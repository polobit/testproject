var ACLRestriction = Backbone.Router.extend({
	routes : {

		/* Deals/Opportunity */
		"not-allowed" : "notAllowed",
		},	
		notAllowed : function(obj){

			getTemplate('not-allowed', obj, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	

				if(obj.ERR_CONTAINER)
			 		$(obj.ERR_CONTAINER).html($(template_ui));

			}, "#content");

		}
});/**
 * calendar.js is a script file having a route to show calendar
 * 
 * @module Activities
 */
var ActivitylogRouter = Backbone.Router.extend({

    routes: {
        /* Shows page */
        "activities": "activities",
        "contact-activities": "contactActivities",
        "contact-activities/:type": "contactActivities",
        "activities/campaign/:id" : "activities"
    },

    activities: function(id) {
        if (!tight_acl.checkPermission('ACTIVITY'))
            return;

        head.js(LIB_PATH + 'lib/date-charts.js', LIB_PATH + 'lib/date-range-picker.js' + '?_=' + _agile_get_file_hash('date-range-picker.js'), function() {

            $('#content').html("<div id='activities-listners'>&nbsp;</div>");
            getTemplate('activity-list-header', {}, undefined, function(template_ui) {

                if (!template_ui)
                    return;

                getTracksCount(function(count) {

                    DEAL_TRACKS_COUNT = count;

                    $('#activities-listners').html($(template_ui));

                    initActivitiesDateRange();

                    //comaign  history
                    var campaignHistory=true;

                    if(id==undefined){
                        campaignHistory=false;
                    }
                    else{
                        $('#selectedentity_type').html("Campaigns");
                        $("#activities_date_range").hide();
                    }

                    renderActivityView(getActivityFilterParameters(true,campaignHistory)+"&campaign-id="+id);
                    
                    $(".activity-log-button").css('display','none');

                    var activityFilters = JSON.parse(_agile_get_prefs(ACTIVITY_FILTER));

                    var optionsTemplate = "<li><a  href='{{id}}'>{{name}}</li>";

                    // fill workflows
                    fillSelect('user-select', 'core/api/users', 'domainuser', function fillActivities() {
                        $('#activities-listners').find("#user-select").append("<li><a href=''>All Users</a></li>");
                        if (activityFilters && (activityFilters.user || activityFilters.entity)) {
                            $('ul#user-select li a').closest("ul").data("selected_item", activityFilters.userId);
                            $('ul#entity_type li a').closest("ul").data("selected_item", activityFilters.entityId);
                            $('#selectedusername').html(activityFilters.user);

                                    //Campaing History
                            if(id != undefined)
                            {

                                   activityFilters.entity="Campaigns";
                            }
                            
                                $('#selectedentity_type').html(activityFilters.entity);
                                $('.activity-sub-heading').html(activityFilters.entity);

                        }

                        $(".activity-log-button").css('display','inline-block');


                    }, optionsTemplate, true);



                });

            }, "#activities-listners");

            $(".active").removeClass("active");
            $("#activitiesmenu").addClass("active");
        })
    },
    contactActivities: function(id) { // begin contact activities

            head.js(LIB_PATH + 'lib/date-charts.js', LIB_PATH + 'lib/date-range-picker.js' + '?_=' + _agile_get_file_hash('date-range-picker.js'), function() {


                getTemplate('contact-activity-header', {}, undefined, function(template_ui) {
                    if (!template_ui)
                        return;
                    $('#content').html($(template_ui));

                    var urlPath = "core/api/campaigns/logs/ContactActivities";

                    var keyword = "";
                    var uiKeyword = "";
                    var sortKey = "time";
                    switch (id) {
                        case "all":
                            keyword = "?log_type=All_Activities";
                            uiKeyword = "All Activities";
                            break;
                        case "page-views":
                            keyword = "?log_type=Page_Views";
                            uiKeyword = "Page Views";
                            break;
                        case "email-opens":
                            keyword = "?log_type=Email_Opened";
                            uiKeyword = "Email Opens";
                            break;
                        case "email-clicks":
                            keyword = "?log_type=Email_Clicked";
                            uiKeyword = "Email Clicks";
                            break;
                        case "unsubscriptions":
                            keyword = "?log_type=Unsubscribed";
                            uiKeyword = "Unsubscriptions";
                            break;
                        case "spam-reports":
                            keyword = "?log_type=Email_Spam";
                            uiKeyword = "Spam Reports";
                            break;
                        case "hard-bounces":
                            keyword = "?log_type=Email_Hard_Bounced";
                            uiKeyword = "Hard Bounces";
                            break;
                        case "soft-bounces":
                            keyword = "?log_type=Email_Soft_Bounced";
                            uiKeyword = "Soft Bounces";
                            break;
                        default:
                            keyword = "?log_type=All_Activities";
                            uiKeyword = "All Activities";
                    }

                    urlPath = urlPath + keyword;
                    if (id != undefined && id != "all")
                        $('.contact-activity-sub-heading').text(uiKeyword);
                    $('#log-filter-title').text(uiKeyword);

                    /*
                     * if(IS_FLUID){
                     * $('#contact_activity_header').removeClass('row').addClass('row-fluid');
                     * $('#contact_activity_model').removeClass('row').addClass('row-fluid'); }
                     * else{
                     * $('#contact_activity_header').removeClass('row-fluid').addClass('row');
                     * $('#contact_activity_model').removeClass('row-fluid').addClass('row'); }
                     */
                    var collectionList = new Base_Collection_View({
                        url: urlPath,
                        templateKey: 'contact-activity-list-log',
                        individual_tag_name: 'li',
                        cursor: true,
                        scroll_symbol: 'scroll',
                        page_size: 20,
                        sort_collection: false,
                        postRenderCallback: function(el) {
                            // initDateRangePicker("contact_activities_date_range",el);
                            contactListener();
                            head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
                                $("time", el).timeago();
                                console.log(id);

                            });

                        },
                        appendItemCallback: function(el) {
                            includeTimeAgo(el);
                        }
                    });
                    collectionList.appendItem = append_contact_activities_log;
                    collectionList.collection.fetch();

                    $('#contact-activity-list-based-condition').html(collectionList.render().el);

                    console.log("========contact activities ==========");


                }, "#content");

            });

        } // end contact activities

});email = null;
/**
 * Creates a backbone router to perform admin activities (account preferences,
 * users management, custom fields, milestones and etc..).
 * 
 */
var AdminPanelRouter = Backbone.Router.extend({

	routes : {

	// from adminpanel these routers will be effected
	"domainSubscribe" : "domainSubscribeDetails",

	"domainSubscribe/:id" : "domainSubscribeDetails",

	// from admin panel subscription for particular domain will be
	// done
	"purchase-plan-formAdminPanel" : "purchasePlanFromAdminpanel",

	/* All Domain Users */
	"all-domain-users" : "allDomainUsers",

	// change password
	"change-password-admin/:id" : "changePasswordadmin",

	// get domain details

	"getDomainUserDetails/:id" : "getDomainUserDetails",

	// search domain

	"domainSearch" : "domainSearch"

	},

	// function will be called from getDomainDetails Navigation
	// todisplay get domain stats object for particular domain

	get_account_stats_for_domain_from_adminpanel : function(el, domainname)
	{
		console.log("in accountstats object");
		console.log(domainname);
		$.ajax({ url : 'core/api/admin_panel/getdomainstats?d=' + domainname, type : 'GET', success : function(data)
		{
			console.log(data);

			
			getTemplate("domain-info", data, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$(el).find('#account').html($(template_ui));

			}, $(el).find('#account'));
			var emails = data.emailcount;
			data.emailcount = JSON.parse(data.emailcount);
			getTemplate("email-stats", JSON.parse(emails), undefined, function(template_ui){
				if(!template_ui)
					  return;
				$(el).find('#emailcount').html($(template_ui));
				$(".delete-namespace").attr("data", domainname);

			}, $(el).find('#emailcount'));

		}, error : function(response)
		{

			console.log(response);
		} });

	},

	// function will be called from getDomainDetails Navigation
	// todisplay get subscription object for particular domain
	get_customerobject_for_domain_from_adminpanel : function(el, domainname)
	{
		var that = this;

		$.ajax({ url : 'core/api/admin_panel/getcustomer?d=' + domainname, type : 'GET', success : function(data)
		{

			getTemplate("plan-info", data, undefined, function(template_ui){
				if(!template_ui)
					  return;

				$(el).find('#planinfo').html($(template_ui));

				if (data == null || data == "" || data == undefined)
				{

					$("#login_id").attr("href", "https://" + domainname + ".agilecrm.com/login");
				}

				else
					that.get_collection_of_charges_for_customer_from_adminpanel(el, data.id);

			}, $(el).find('#planinfo'));

			
		} });

	},

	// function will be called from getDomainDetails Navigation
	// to display get collection of invoices for particular domain

	get_collection_of_invoices_for_domain_from_adminpanel : function(el, domainname)
	{
		this.invoicecollection = new Base_Collection_View({ url : "core/api/admin_panel/getinvoices?d=" + domainname, templateKey : "admin-invoice",

		individual_tag_name : 'tr' });
		this.invoicecollection.collection.fetch();

		$('.past-invoicecollection', el).html(this.invoicecollection.render().el);
	},

	// gets collection of charges of aa paricular customer based on
	get_collection_of_charges_for_customer_from_adminpanel : function(el, customerid)
	{
		this.chargecollection = new Base_Collection_View({ url : "core/api/admin_panel/getcharges?d=" + customerid, templateKey : "admin-charge",

		individual_tag_name : 'tr', sortKey : 'createdtime', descending : true });
		this.chargecollection.collection.fetch();

		$('.past-chargecollection', el).html(this.chargecollection.render().el);
	},

	// router to fill domain details template from admin panel
	getDomainUserDetails : function(id)
	{
		 $('#content').html("<div id='admin-panel-listners'>&nbsp;</div>");
		var self = this;
		var domainname;
		this.usersListViewCollection = new Base_Collection_View({ url : 'core/api/admin_panel/getParticularDomainUsers?d=' + id, templateKey : "all-domain",
			individual_tag_name : 'tr', postRenderCallback : function(el)
			{
				head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
				{
					$(".last-login-time", el).timeago();
				});

				var mod_collection = self.usersListViewCollection.collection.models;

				domainname = mod_collection[0].get('domain');
				email = mod_collection[0].get('email');
				self.get_customerobject_for_domain_from_adminpanel(el, domainname);
				$('#account').html("<img src='" + updateImageS3Path("img/21-0.gif")+ "'>");
				self.get_account_stats_for_domain_from_adminpanel(el, domainname);

				initializeAdminpanelListner(el);

			},

		});
		this.usersListViewCollection.collection.fetch();

		$('#admin-panel-listners').html(this.usersListViewCollection.el);

	},

	// used to change password for particular user from admin panel
	changePasswordadmin : function(id)
	{

		getTemplate("settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			getTemplate("settings-change-password-adminpanel", {}, undefined, function(template_ui){

						$('#content').html($(template_ui));	

						// Save button action of change password form, If it is out of
						// this router wont navigate properly
						$("#saveNewPasswordFromAdmin").on(
								"click",
								function(e)
								{

									e.preventDefault();
									var saveBtn = $(this);

									// Returns, if the save button has disabled
									// attribute
									if ($(saveBtn).attr('disabled'))
										return;

									// Disables save button to prevent multiple
									// click
									// event issues
									disable_save_button($(saveBtn));

									var form_id = $(this).closest('form').attr("id");

									if (!isValidForm('#' + form_id))
									{

										// Removes disabled attribute of save
										// button
										enable_save_button($(saveBtn));
										return false;
									}

									// Show loading symbol until model get saved
									$('#changePasswordForm').find('span.save-status').html(getRandomLoadingImg());

									var json = serializeForm(form_id);

									$.ajax({
										url : '/core/api/admin_panel/changepassword/' + id,
										type : 'PUT',
										data : json,
										success : function()
										{
											add_password_change_info_as_note_to_owner(email);
											Backbone.history.navigate("all-domain-users", { trigger : true });
											showNotyPopUp("information", "password changed successfully", "top");
										},
										error : function(response)
										{
											$('#changePasswordForm').find('span.save-status').html("");
											$('#changePasswordForm').find('input[name="current_pswd"]').closest(".controls").append(
													"<span style='color:red;margin-left:10px;'>Incorrect Password</span>");
											$('#changePasswordForm').find('input[name="current_pswd"]').closest(".controls").find("span").fadeOut(5000);
											$('#changePasswordForm').find('input[name="current_pswd"]').focus();
											enable_save_button($(saveBtn));
										} });

								});
			});

		}, "#content");
	
	},

	/**
	 * Creates a Model to show All Domain Users.
	 */
	allDomainUsers : function()
	{
		allDomainUsersCollectionView = new Base_Collection_View({ url : 'core/api/admin_panel/getAllDomainUsers', templateKey : "all-domain-users",
			individual_tag_name : 'tr', cursor : true, page_size : 25, postRenderCallback : function(el)
			{
				initializeAdminpanelListner(el);

			} });

		allDomainUsersCollectionView.collection.fetch();
		$('#content').html(allDomainUsersCollectionView.el);
	},

	// subscription
	domainSubscribeDetails : function(id)
	{
		$("#content").html("<div id='subscribe_plan_change'></div>");

		var subscribe_plan = new Base_Model_View({ url : "core/api/admin_panel/subscriptionofparticulardomain?d=" + id,
			template : "all-domain-admin-subscribe-new", window : 'domainSubscribe',
			/*
			 * postRenderCallback : function(el) { // Setup account statistics
			 * set_up_account_stats(el); // Load date and year for card expiry
			 * card_expiry(el); // Load countries and respective states
			 * head.js(LIB_PATH + 'lib/countries.js', function() {
			 * print_country($("#country", el)); }); },
			 */
			postRenderCallback : function(el)
			{
				var data = subscribe_plan.model.toJSON();
				initializeSubscriptionListeners(el);

				// console.log(data.get('billing_data_json_string'));

				// Setup account statistics
				set_up_account_stats(el);

				if (!$.isEmptyObject(data))
				{
					USER_BILLING_PREFS = data;
					USER_CREDIRCARD_DETAILS = subscribe_plan.model.toJSON().billingData;
					console.log(USER_CREDIRCARD_DETAILS);
					element = setPriceTemplete(data.plan.plan_type, el);
				}

				else
					element = setPriceTemplete("free", el);

				// Show Coupon code input field
				id = (id && id == "coupon") ? id : "";
				showCouponCodeContainer(id);
				$("#user_quantity",el).prop("value", data.plan.quantity);
				price = update_price();
				$("#users_quantity",el).text(data.plan.quantity);
				$("#users_total_cost",el).text((data.plan.quantity * price).toFixed(2));

				head.load(CSS_PATH + "css/misc/agile-plan-upgrade.css", LIB_PATH + 'lib/jquery.slider.min.js', function()
				{
					if ($.isEmptyObject(data))
						setPlan("free");
					else
						setPlan(data);
					// load_slider(el);
				});

				
			} });
		$('#subscribe_plan_change').html(subscribe_plan.render().el);
	},

	purchasePlanFromAdminpanel : function()
	{
		/*// If plan is not defined i.e., reloaded, or plan not chosen
		// properly,
		// then page is navigated back to subcription/ choose plan page
		if (!plan_json.plan)
		{
			this.navigate("all-domain-users", { trigger : true });

			return;
		}*/

		var window = this;
		// Plan json is posted along with credit card details
		var plan = plan_json

		var upgrade_plan = new Base_Model_View({ url : "core/api/admin_panel/upgradesubscription", template : "admin-purchase-plan", isNew : true, data : plan,
			postRenderCallback : function(el)
			{
				// Discount
				showCouponDiscountAmount(plan_json, el);

				card_expiry(el);
				head.js(LIB_PATH + 'lib/countries.js', function()
				{
					print_country($("#country", el));
				});
			}, saveCallback : function(data)
			{
				window.navigate("domainSubscribe/" + plan.domain_name, { trigger : true });
				add_plan_change_info_as_note_to_owner(email, plan.plan_type, plan.plan_id, plan.quantity);
				showNotyPopUp("information", "You have been upgraded successfully. Please logout and login again for the new changes to apply.", "top");
			}

		});

		// Prepend Loading
		$('#content').html(upgrade_plan.render().el);
		$(".active").removeClass("active");
		// $("#fat-menu").addClass("active");
	},

	domainSearch : function()
	{
		$("#content").html("<div id='domain-search-listners'></div>");
		getTemplate('all-domain-search', {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$("#domain-search-listners").html($(template_ui));
			initializeDomainsearchListner();
			hideTransitionBar();

		}, "#domain-search-listners");

	}
});/**
 * Creates a backbone router to perform admin activities (account preferences,
 * users management, custom fields, milestones and etc..).
 * 
 */
var view = {};
var AdminSettingsRouter = Backbone.Router.extend({
	routes : {
	/* Admin-Settings */
	"admin" : "adminSettings",

	/* Account preferences */
	"account-prefs" : "accountPrefs",

	"account-ipaccess" : "ipaccess",

	/* Users */
	"users" : "users", "users-add" : "usersAdd", "user-edit/:id" : "userEdit",

	/* Custom fields */
	"custom-fields" : "customFields",

	/* Api & Analytics */
	"analytics-code" : "analyticsCode", "analytics-code/:id" : "analyticsCode",

	/* Milestones */
	"milestones" : "milestones",
	
	/* Categories */
	"categories" : "categories",

	/* Menu settings - select modules on menu bar */
	"menu-settings" : "menu_settings",

	/* Mandrill Email Activity */
	/* "email-stats" : "emailStats", */

	/* Integrations Stats */
	"integrations-stats" : "integrationsStats",

	/* Web to Lead */
	"integrations" : "integrations",

	"tag-management" : "tagManagement",

	"email-gateways/:id" : "emailGateways",

	"sms-gateways/:id" : "smsGateways",

	"lost-reasons" : "lostReasons",

	"deal-sources" : "dealSources",
	
	"goals": "dealGoal",
	
	/* Webhook */
	"webhook" : "webhookSettings",

	"change-domain" : "changeDomain",

	/* Java Script API Permission*/
	"js-security" : "jsSecuritySettings"


	},

	/**
	 * Show menu-settings modules selection ( calendar, cases, deals, campaign ) &
	 * saving option
	 * 
	 * @author Chandan
	 */
	menu_settings : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}

		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$('#content').html($(template_ui));	

			var view = new Base_Model_View({ url : '/core/api/menusetting', template : "admin-settings-menu-settings", reload : true });
			$('#content').find('#admin-prefs-tabs-content').html(view.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.menu-settings-tab').addClass('select');

		}, "#content");

		$(".active").removeClass("active");
	},

	/**
	 * Loads a template to show account preferences, with "subscription" option
	 * to change the plan
	 */
	accountPrefs : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}
		var that=this;
		$('#content').html("<div id='account-pref'>&nbsp;</div>");
		
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#account-pref').html($(template_ui));
			$('#account-pref').find('#admin-prefs-tabs-content').html(getTemplate("settings-account-tab"), {});	
			var view = new Base_Model_View({ url : '/core/api/account-prefs', template : "admin-settings-account-prefs", postRenderCallback : function()
			{
				ACCOUNT_DELETE_REASON_JSON = undefined;
			} });

			

			$('#account-pref').find('#admin-prefs-tabs-content').find('#settings-account-tab-content').html(view.render().el);
			$('#account-pref').find('#AdminPrefsTab .select').removeClass('select');
			$('#account-pref').find('.account-prefs-tab').addClass('select');
			$(".active").removeClass("active");
			$('.settings-account-prefs').addClass('active');
			$('#account-pref').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');


		}, "#account-pref");

		$('.settings-account-prefs').addClass('active');
		$('#account-pref').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');
		
	},


	ipaccess : function()
	{

		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			$('#content').html(getTemplate('others-not-allowed',{}));
			return;
		}
		var that = this;
		$('#content').html("<div id='account-pref'>&nbsp;</div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
				
			$('#account-pref').html($(template_ui));
			$('#account-pref').find('#admin-prefs-tabs-content').html(getTemplate("settings-account-tab"), {});
			var view = new Base_Model_View({ url : '/core/api/allowedips', template : "admin-settings-ip-prefs",
				postRenderCallback : function(el)
				{
					loadip_access_events();
					
				}, saveCallback : function(){
				console.log("saveCallback");
				showNotyPopUp("information", "Your IP Address has been updated successfully.", "top", 4000);
				App_Admin_Settings.ipaccess();
			},errorCallback : function(data){
				showNotyPopUp("warning", data.responseText, "top");
			}

				 });
			
			$('#content').find('#admin-prefs-tabs-content').find('#settings-account-tab-content').html(view.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.account-prefs-tab').addClass('select');
			$(".active").removeClass("active");
			$('.settings-account-ips').addClass('active');
			$('#account-pref').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');
			//$('.settings-account-ips').parent().removeClass('b-b-none');

		}, "#account-pref");
	},

	
	webhookSettings : function()
	{
		
		
			var view = new Base_Model_View({ url : '/core/api/webhooksregister', template : "admin-settings-webhook", 
			no_reload_on_delete : true,
			postRenderCallback : function()
			{
				
			}, 
			form_custom_validate : function(){
				$(".checkedMultiCheckbox").find(".help-inline").remove();
                if($(".checkedMultiCheckbox").find('input:checked').length > 0)
                      return true;
                else{
                    $(".checkedMultiCheckbox").append("<span generated='true' class='help-inline col-sm-offset-4 col-xs-offset-4 controls col-sm-8 col-xs-8' style='display: block;'>Please select at least one option.</span>"); 
                }
                
                 return false;
			}, saveCallback : function(){
				console.log("saveCallback");
				App_Admin_Settings.webhookSettings();
				showNotyPopUp("information", "Preferences saved successfully", "top", 1000);
			},
			errorCallback : function(data){
				showNotyPopUp("warning", data.responseText, "top",2000);
			},
			deleteCallback : function(){
				console.log("deleteCallback");
				App_Admin_Settings.webhookSettings();
			} });

			$('#content').find('#webhook-accordian-template').html(view.render().el);
	
	},


	jsSecuritySettings : function()
	{
		
		
			var view = new Base_Model_View({ url : '/core/api/jspermission/', template : "admin-settings-js-security", 
			no_reload_on_delete : true,
			postRenderCallback : function()
			{
				
			}, 
			form_custom_validate : function(){
				$(".checkedMultiCheckbox").find(".help-inline").remove();
                if($(".checkedMultiCheckbox").find('input:checked').length > 0)
                      return true;
                else{
                    $(".checkedMultiCheckbox").append("<span generated='true' class='help-inline col-sm-offset-4 col-xs-offset-4 controls col-sm-8 col-xs-8' style='display: block;'>Please select at least one option.</span>"); 
                }
                
                 return false;
			}, saveCallback : function(){
				console.log("saveCallback");
				App_Admin_Settings.jsSecuritySettings();
				showNotyPopUp("information", "Preferences saved successfully", "top", 1000);
			} });

			$('#content').find('#js-security-accordian-template').html(view.render().el);
	
	},
	
	/**
	 * Shows list of all the users with an option to add new user
	 */
	users : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		} 

		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			that.usersListView = new Base_Collection_View({ url : '/core/api/users', restKey : "domainUser", templateKey : "admin-settings-users",
			individual_tag_name : "tr", sortKey : "name", postRenderCallback : function(el)
			{
				$('i').tooltip();
				head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
				{
					$(".last-login-time", el).timeago();
				});
				
			} });
			that.usersListView.collection.fetch();

			$('#content').find('#admin-prefs-tabs-content').html(that.usersListView.el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.users-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#content");

	},

	/**
	 * Loads a template to add new user, navigates to users list on adding a
	 * user
	 */
	usersAdd : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}

		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			var view = new Base_Model_View({ url : 'core/api/users', template : "admin-settings-user-add", isNew : true, window : 'users', reload : false,
			postRenderCallback : function(el)
			{

				if (view.model.get("id"))
					addTagAgile("User invited");

				// Binds action
				bindAdminChangeAction(el, view.model.toJSON());
				setTimeout(function(){
				$('a[href="#sales-previlages"]').tab("show");
				},100)
				
					
				
			}, saveCallback : function(response)
			{
				$.getJSON("core/api/users/current-owner", function(data)
				{
					if (data)
					{
						console.log("data of current-owner = "+data);
						data["created_user_email"] = response.email;

						add_created_user_info_as_note_to_owner(data);
					}
					location.reload(true);
				});
			}, saveAuth : function(el){
				if(CURRENT_DOMAIN_USER.is_account_owner && $("#userForm", el).find("#owner:checked").length == 1 && $("#userForm", el).find("#eaddress").val() != CURRENT_DOMAIN_USER.email)
				{
					$("#saveUserAuthentication", el).html(getTemplate("conform-owner-change-model",{}));
					$("#saveUserAuthentication", el).modal("show");
					return true;
				}
				else{
					return false;
				}
			}  });

			$('#content').find('#admin-prefs-tabs-content').html(view.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.users-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#content");

		

	},

	/**
	 * Loads a template to add new user, to a particular domain user
	 */

	/**
	 * Edits the existing user by verifying whether the users list view is
	 * defined or not
	 */
	userEdit : function(id)
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}
		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			// If users list is not defined then take back to users template
			if (!that.usersListView || !that.usersListView.collection.get(id))
			{
				that.navigate("users", { trigger : true });
				return;
			}

			// Gets user from the collection based on id
			var user = that.usersListView.collection.get(id);

			var userEmail = user.attributes.email;

			var needLogout = false;
			if (CURRENT_DOMAIN_USER.email == user.attributes.email)
			{
				needLogout = true;
			}

			/*
			 * Creates a Model for users edit, navigates back to 'user' window on
			 * save success
			 */
			var view = new Base_Model_View({ url : 'core/api/users', model : user, template : "admin-settings-user-add", change : false, saveCallback : function(response)
			{

				update_contact_in_our_domain(userEmail, response, function(){

					// If user changed his own email, redirect it to the login page.
					if (needLogout && CURRENT_DOMAIN_USER.email != response.email)
					{
						console.log('Logging out...');
						showNotyPopUp("information", "You Email has been updated successfully. Logging out...", "top");
						var hash = window.location.hash;

						setTimeout(function()
						{
							window.location.href = window.location.protocol + "//" + window.location.host + "/login" + hash;
						}, 5000);
					}
					else
					{
						//Backbone.history.navigate('users', { trigger : true });
						location.reload(true);
					}
				

				});
				

			}, postRenderCallback : function(el)
			{

				bindAdminChangeAction(el, view.model.toJSON());
				setTimeout(function(){
					$('#deals-privilege', el).trigger('change');
					$('#calendar-privilege', el).trigger('change');
					$('a[href="#sales-previlages"]',el).tab('show');
					$('a[href="#sales-previlages"]',el).trigger('click');
				},500);
			}, saveAuth : function(el){
				if(CURRENT_DOMAIN_USER.is_account_owner && $("#userForm", el).find("#owner:checked").length == 1 && $("#userForm", el).find("#eaddress").val() != CURRENT_DOMAIN_USER.email)
				{
					$("#saveUserAuthentication", el).html(getTemplate("conform-owner-change-model",{}));
					$("#saveUserAuthentication", el).modal("show");
					return true;
				}
				else{
					return false;
				}
			} });

			$('#content').find('#admin-prefs-tabs-content').html(view.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.users-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#content");

		

	},

	/**
	 * Shows list of custom fields with an option to add new custom field of
	 * desired type
	 * 
	 */
	/**
	 * Shows list of custom fields with an option to add new custom field of
	 * desired type
	 * 
	 */
	customFields : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}
		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			that.customFieldsListView = new Base_Collection_View({ url : '/core/api/custom-fields/allScopes', restKey : "customFieldDefs",
			templateKey : "admin-settings-customfields", individual_tag_name : 'tr', postRenderCallback : function(el)
			{
				initializeCustomFieldsListeners();

			} });

			that.customFieldsListView.appendItem = groupingCustomFields;

			that.customFieldsListView.collection.fetch();

			$('#content').find('#admin-prefs-tabs-content').html(that.customFieldsListView.el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.custom-fields-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#content");

		
	},

	/**
	 * Loads java-script API to make the user able to track page views on users
	 * site, add/delete contacts from users website or blog directly. Loads
	 * minified prettify.js to prettify analytics code.
	 */
	analyticsCode : function(id)
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}

		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			head.js(LIB_PATH + 'lib/prettify-min.js', function()
			{
				var view = new Base_Model_View({ url : '/core/api/api-key', template : "admin-settings-api-key-model", postRenderCallback : function(el)
				{

					
					$('#content').find('#admin-prefs-tabs-content').html(view.el);

					$('#content').find('#AdminPrefsTab .select').removeClass('select');
					$('#content').find('.analytics-code-tab').addClass('select');
					// prettyPrint();
					if (id)
					{
						$(el).find('#APITab a[href="#' + id + '"]').trigger('click');
					}

					// initZeroClipboard("api_track_webrules_code_icon",
					// "api_track_webrules_code");
					// initZeroClipboard("api_key_code_icon", "api_key_code");
					// initZeroClipboard("api_track_code_icon", "api_track_code");

					try
					{
						if (ACCOUNT_PREFS.plan.plan_type.split("_")[0] == "PRO" || ACCOUNT_PREFS.plan.plan_type.split("_")[0] == "ENTERPRISE")
							$("#tracking-webrules, .tracking-webrules-tab").hide();
						else
							$("#tracking-webrules-whitelist, .tracking-webrules-whitelist-tab").hide();
					}
					catch (e)
					{
						$("#tracking-webrules-whitelist, .tracking-webrules-whitelist-tab").hide();
					}

					prettify_api_add_events();
					// initializeRegenerateKeysListeners();

				} });
			});

		}, "#content");

		
	},

	/**
	 * Shows API-KEY. Loads minified prettify.js to prettify the view
	 */
	api : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");
			return;
		}

		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			head.js(LIB_PATH + 'lib/prettify-min.js', function()
			{
				var view = new Base_Model_View({ url : '/core/api/api-key', template : "admin-settings-api-model", postRenderCallback : function(el)
				{

					initializeRegenerateKeysListeners();
					prettyPrint();
				} });
				$('#content').find('#admin-prefs-tabs-content').html(view.el);
				$('#content').find('#AdminPrefsTab .select').removeClass('select');
				$('#content').find('.analytics-code-tab').addClass('select');
				$(".active").removeClass("active");
			});
		}, "#content");

		
	},

	/**
	 * Creates a Model to show and edit milestones, reloads the page on save
	 * success
	 */
	milestones : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}
		
		var that = this;
		$('#content').html("<div id='milestone-listner'>&nbsp;</div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#milestone-listner').html($(template_ui));
			$('#milestone-listner').find('#admin-prefs-tabs-content').html(getTemplate("settings-milestones-tab"), {});

			that.pipelineGridView = new Track_And_Milestone_Events_Collection_View({ url : '/core/api/milestone/pipelines', templateKey : "admin-settings-milestones",
			individual_tag_name : 'div', sortKey : "name", postRenderCallback : function(el)
			{
				setup_milestones(el);
				var tracks_length = App_Admin_Settings.pipelineGridView.collection.length;
				if (tracks_length == 1)
					$('#milestone-listner').find('#deal-tracks-accordion').find('.collapse').addClass('in');
				initializeMilestoneListners(el);
				milestone_util.init(el);
				//that.lostReasons();
				//that.dealSources();
			} });
			that.pipelineGridView.collection.fetch();

			$('#milestone-listner').find('#admin-prefs-tabs-content').find('#settings-milestones-tab-content').html(that.pipelineGridView.render().el);
			$('#milestone-listner').find('#AdminPrefsTab .select').removeClass('select');
			$('#milestone-listner').find('.milestones-tab').addClass('select');
			$(".active").removeClass("active");
			$('.settings-milestones').addClass('active');
			$('#milestone-listner').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');

		}, "#milestone-listner");
	
		$('.settings-milestones').addClass('active');
		$('#milestone-listner').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');
	},
	
	/**
	 * Creates a Model to show and edit milestones, reloads the page on save
	 * success
	 */
	categories : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			$('#content').html(getTemplate('others-not-allowed',{}));
			return;
		}

		$("#content").html(getTemplate("admin-settings"), {});
		this.categoryGridView = new Base_Collection_View({ url : '/core/api/categories?entity_type=TASK', templateKey : "admin-settings-categories",
			individual_tag_name : 'tr', sortKey : "order", postRenderCallback : function(el)
			{
				console.log("loaded categories : ", el);
				categories.setup_categories(el);
				categories.init();
			} });
		this.categoryGridView.collection.fetch();
		$('#content').find('#admin-prefs-tabs-content').html(this.categoryGridView.render().el);
		$('#content').find('#AdminPrefsTab .select').removeClass('select');
		$('#content').find('.categories-tab').addClass('select');
		$(".active").removeClass("active");
	},

	/**
	 * Fetches Stats of integrations - usage info.
	 */
	integrationsStats : function()
	{
		/*
		 * if (!CURRENT_DOMAIN_USER.is_admin) { $('#content').html("You have no
		 * Admin Privileges"); return; }
		 * $("#content").html(getTemplate("admin-settings"), {}); var
		 * emailStatsModelView = new Base_Model_View({ url :
		 * 'core/api/emails/email-stats', template :
		 * 'admin-settings-email-stats', });
		 * 
		 * $('#content').find('#admin-prefs-tabs-content').html(emailStatsModelView.render().el);
		 * $('#content').find('#AdminPrefsTab .select').removeClass('select');
		 * $('#content').find('.stats-tab').addClass('select');
		 */

		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}

		$("#content").html("<div id='email-stats-listners'></div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#email-stats-listners').html($(template_ui));

			$('#email-stats-listners').find('#AdminPrefsTab .select').removeClass('select');
			$('#email-stats-listners').find('.stats-tab').addClass('select');
			$(".active").removeClass("active");
			$('#email-stats-listners').find('#admin-prefs-tabs-content').html(getRandomLoadingImg());

			getTemplate('admin-settings-integrations-stats-new',{}, undefined, function(template_ui){
				if(!template_ui)
					  return;

				$('#email-stats-listners').find('#admin-prefs-tabs-content').html($(template_ui));
				$('#integration-stats a[href="#account-stats-new"]', $("#email-stats-listners")).tab('show');
				$('#email-stats-listners').find('#account-stats-new').html(LOADING_ON_CURSOR);
				account_stats_integrations.loadAccountStats($("#email-stats-listners"));
				initializeStatsListners($("#email-stats-listners"));
				hideTransitionBar();

			}, $('#email-stats-listners').find('#admin-prefs-tabs-content'));
		}, "#email-stats-listners");

	},

	/**
	 * Web to lead links to website pages
	 */
	integrations : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");
			return;
		}
		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$('#content').html($(template_ui));	

			that.integrations = new Base_Collection_View({ url : 'core/api/widgets/integrations', templateKey : 'admin-settings-web-to-lead-new',
			postRenderCallback : function(el)
			{
				var integrationsTab = _agile_get_prefs("integrations_tab");
				if(!integrationsTab || integrationsTab == null) {
					_agile_set_prefs('integrations_tab', "web-to-lead-tab");
					integrationsTab = "web-to-lead-tab";
				}
				$('#admin-prefs-tabs-content a[href="#'+integrationsTab+'"]').tab('show');
				$("#admin-prefs-tabs-content .tab-container ul li").off("click");
				$("#admin-prefs-tabs-content").on("click",".tab-container ul li",function(){
					var temp = $(this).find("a").attr("href").split("#");
					_agile_set_prefs('integrations_tab', temp[1]);
				});

			} });

			that.integrations.collection.fetch();

			$('#content').find('#admin-prefs-tabs-content').html(that.integrations.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.integrations-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#content");
		
	},

	tagManagement : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}
		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$('#content').html($(template_ui));	

			that.tagsview1 = new Base_Collection_View({ url : 'core/api/tags/stats1', templateKey : "tag-management", individual_tag_name : 'li',
			sort_collection : true, sortKey : 'tag', postRenderCallback : function(el)
			{
				acl_util.initTagACL(el);
				initializeTagManagementListeners();
				$(".allow_users_switch").tooltip({
			        title: "<p>Allow all users to add New Tags.</p><p>Disable this option if you don't want users (non-admin) to add new tags on contacts or companies, apart from the tags listed here.</p>",  
			        html: true,
			        placement : 'bottom'
			    }); 
			} });
			that.tagsview1.appendItem = append_tag_management;

			// var tagsView = new Base_Model_View({ url : 'core/api/tags', template
			// : 'admin-settings-tags-model', });
			console.log(that.tagsview1);
			that.tagsview1.collection.fetch();

			$('#content').find('#admin-prefs-tabs-content').html(that.tagsview1.render().el);
		
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.tag-management-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#admin-prefs-tabs-content");
		
	},

	emailGateways : function(id)
	{
		console.log(App_Admin_Settings.integrations.collection);
		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	
			getTemplate("web-to-lead-settings", {}, undefined, function(template_ui1){
				if(!template_ui1)
					return;
				$('#admin-prefs-tabs-content').html($(template_ui1));
				var integrationsTab = _agile_get_prefs("integrations_tab");
				$("#admin-prefs-tabs-content").find('a[href="#'+integrationsTab+'"]').closest("li").addClass("active");	
				// On Reload, navigate to integrations
				if (!that.integrations || that.integrations.collection == undefined)
				{
					that.navigate("integrations", { trigger : true });
					return;
				}

				var value = 'SEND_GRID';

				if (id == 'mandrill')
					value = 'MANDRILL';
				else if (id == 'ses')
	                value = 'SES';

				var emailGateway;
				$.each(that.integrations.collection.where({name:"EmailGateway"}),function(key,value){
				
					emailGateway = JSON.parse(value.attributes.prefs);
				
				});
				
				// Allow only one Email gateway configured
				if(emailGateway && emailGateway["email_api"])//check if email gateway exist
				{
					if(emailGateway["email_api"].toUpperCase() != value)//checks if the current email gateway is the same as the clicked one
					{
					modalAlert("sms-integration-alert-modal","You have a Email Gateway already configured. Please disable that to configure a new one.","Email Gateway Configured");
					that.navigate("integrations", { trigger : true });
					return;	
					}
				}	

				// To show template according to api. Note: Widget and EmailGateway model is different
				if(!emailGateway)
					emailGateway = {"email_api":value, "api_user": "", "api_key":""}; 
						
				that.email_gateway = new Base_Model_View({ 
					data : emailGateway,
					url : 'core/api/email-gateway',
					template : 'settings-email-gateway', postRenderCallback : function(el)
					{
						initializeIntegrationsTabListeners("integrations_tab", "integrations");
						if(id=="mandrill"){
							$("#integrations-image",el).attr("src","img/crm-plugins/mandrill_logo.png");
						}
						
						if(id=="sendgrid"){
							$("#integrations-image",el).attr("src","img/crm-plugins/sendgrid_logo.png");
						}

						if(id=="ses"){
							$("#integrations-image",el).attr("src","img/crm-plugins/ses_logo.png");
					    }
						
					}, saveCallback : function()
					{
						$('.ses-success-msg').show();
						
						// On saved, navigate to integrations
						Backbone.history.navigate("integrations", { trigger : true });

						if(value == 'SES')
	 						return;

						data = App_Admin_Settings.email_gateway.model.toJSON();

						// Add webhook
						$.getJSON("core/api/email-gateway/add-webhook?api_user="+data.api_user+"&api_key=" + data.api_key + "&type=" + data.email_api, function(data)
						{
							console.log(data);
						});
					},
					errorCallback : function(response)
					{
						var $save = $('.save', '#email-gateway-integration-form');

						disable_save_button($save);

						var msg = response.responseText;

						if(msg.indexOf('SignatureDoesNotMatch') != -1)
	                        msg = msg.replace('SignatureDoesNotMatch', 'Signature Mismatch');

	                    if(msg.indexOf('InvalidClientTokenId') != -1)
	                    	msg = msg.replace('InvalidClientTokenId', 'Invalid Access Key');

						// Show cause of error in saving
						var $save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>'
													+ msg
													+ '</i></p></small></div>');

						// Appends error info to form actions
						// block.
						$save.closest(".form-actions", this.el).append(
								$save_info);

						// Hides the error message after 3
						// seconds
						if(response.status != 406)
							$save_info.show().delay(3000).hide(1, function(){

								enable_save_button($save);
							});
					}

				});

				$('#content').find('#admin-settings-integrations-tab-content').html(that.email_gateway.render().el);
				$('#content').find('.integrations-tab').addClass('select');
				//$(".active").removeClass("active");
			}, "#admin-settings-integrations-tab-content");
		}, null);

		
	},

	smsGateways : function(id)
	{
		console.log("inside sms gateways");
		var that = this;
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	
			getTemplate("web-to-lead-settings", {}, undefined, function(template_ui1){
				if(!template_ui1)
					return;
				$('#admin-prefs-tabs-content').html($(template_ui1));
				var integrationsTab = _agile_get_prefs("integrations_tab");
				$("#admin-prefs-tabs-content").find('a[href="#'+integrationsTab+'"]').closest("li").addClass("active");

				// On Reload, navigate to integrations
				if (!that.integrations || that.integrations.collection == undefined)
				{
					that.navigate("integrations", { trigger : true });
					return;
				}

				var value, accountID;
				if (id == "plivo")
				{
					value = 'PLIVO';
					accountID = "account_id";
				}
				if (id == "twilio")
				{
					value = 'TWILIO';
					accountID = "account_sid";
				}

				var smsGateway;
				$.each(that.integrations.collection.models, function(key, value)
				{
					var prefJSON = JSON.parse(value.attributes.prefs);
					if (prefJSON["sms_api"])
						smsGateway = prefJSON["sms_api"];
				});

				// allow one sms gateway configured at a time
				if (smsGateway != undefined)// check if sms gateway exist
				{
					if (smsGateway.toUpperCase() != value)// checks if the current sms
					// gateway is the same as
					// the clicked one
					{
						modalAlert("sms-integration-alert-modal", "You have a SMS Gateway already configured. Please disable that to configure a new one.",
								"SMS Gateway Configured");
						that.navigate("integrations", { trigger : true });
						return;
					}
				}

				view = new Base_Model_View({
					model : App_Admin_Settings.integrations.collection.where({ name : "SMS-Gateway" })[0],
					url : 'core/api/sms-gateway',
					template : 'settings-sms-gateway',
					prePersist : function(model)
					{
						if (id == "plivo")
							var prefJSON = { account_id : model.attributes.account_id, auth_token : model.attributes.auth_token, endpoint : model.attributes.endpoint,
								sms_api : value };
						if (id == "twilio")
							var prefJSON = { account_sid : model.attributes.account_sid, auth_token : model.attributes.auth_token,
								endpoint : model.attributes.endpoint, sms_api : value };
						model.set({ prefs : JSON.stringify(prefJSON) }, { silent : true });
					}, postRenderCallback : function(el)
					{
						initializeIntegrationsTabListeners("integrations_tab", "integrations");
						if (id == "plivo")
						{
							$("#integrations-image", el).attr("src", "/img/plugins/plivo.png");
							$("#accoundID", el).attr("name", "account_id");
							$("#accoundID", el).attr("placeholder", "Auth ID");
							$("#integrations-label", el).text("You need a Paid Plivo account to be able to send SMS");
						}
						if (id == "twilio")
						{
							$("#integrations-image", el).attr("src", "/img/plugins/twilio.png");
							$("#accoundID", el).attr("name", "account_sid");
							$("#accoundID", el).attr("placeholder", "Account SID");
							$("#integrations-label", el).text("Please provide your account details");
						}
					}, saveCallback : function(data)
					{
						// On saved, navigate to integrations
						Backbone.history.navigate("integrations", { trigger : true });
					}, errorCallback : function(data)
					{
						if ($("#sms-gateway-error").is(":visible"))
							$("#sms-gateway-error").remove();

						$responceText = "<div style='color:#B94A48; font-size:14px' id='sms-gateway-error'><i>" + data.responseText + "</i></div>";
						$("#sms-integration-error", that.el).append($responceText);
					} });

				$('#content').find('#admin-settings-integrations-tab-content').html(view.render().el);
				$('#content').find('#AdminPrefsTab .select').removeClass('select');
				$('#content').find('.integrations-tab').addClass('select');
				//$(".active").removeClass("active");

			}, "#admin-settings-integrations-tab-content");
		}, null);
	},
	
	/**
	 * Fetch all lost reasons
	 */
	lostReasons : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			$('#content').html(getTemplate('others-not-allowed',{}));
			return;
		}
		var that = this;
		$('#content').html("<div id='milestone-listner'>&nbsp;</div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#milestone-listner').html($(template_ui));
			$('#milestone-listner').find('#admin-prefs-tabs-content').html(getTemplate("settings-milestones-tab"), {});
			that.dealLostReasons = new Sources_Loss_Reasons_Events_Collection_View({ url : '/core/api/categories?entity_type=DEAL_LOST_REASON', templateKey : "admin-settings-lost-reasons",
				individual_tag_name : 'tr', sortKey : "name", postRenderCallback : function(el)
				{
					initializeMilestoneListners(el);
				} });
			that.dealLostReasons.collection.fetch();
			$('#content').find('#admin-prefs-tabs-content').find('#settings-milestones-tab-content').html(that.dealLostReasons.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.milestones-tab').addClass('select');
			$(".active").removeClass("active");
			$('.settings-lost-reasons').addClass('active');
			$('#milestone-listner').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');
			$('.settings-lost-reasons').parent().removeClass('b-b-none');

		}, "#milestone-listner");
	},

	/**
	 * Fetch all deal sources
	 */
	dealSources : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			$('#content').html(getTemplate('others-not-allowed',{}));
			return;
		}
		var that = this;
		$('#content').html("<div id='milestone-listner'>&nbsp;</div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#milestone-listner').html($(template_ui));
			$('#milestone-listner').find('#admin-prefs-tabs-content').html(getTemplate("settings-milestones-tab"), {});
			that.dealSourcesView = new Sources_Loss_Reasons_Events_Collection_View({ url : '/core/api/categories?entity_type=DEAL_SOURCE', templateKey : "admin-settings-deal-sources",
				individual_tag_name : 'tr', sort_collection : false, postRenderCallback : function(el)
				{
					initializeMilestoneListners(el);

					//Enable sorting for sources
					dealSourcesSorting();
				} });
			that.dealSourcesView.collection.fetch();
			$('#content').find('#admin-prefs-tabs-content').find('#settings-milestones-tab-content').html(that.dealSourcesView.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.milestones-tab').addClass('select');
			$(".active").removeClass("active");
			$('.settings-deal-sources').addClass('active');
			$('#milestone-listner').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');
			$('.settings-deal-sources').parent().removeClass('b-b-none');

		}, "#milestone-listner");
	},

	dealGoal : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			$('#content').html(getTemplate('others-not-allowed',{}));
			return;
		}
		var that1 = this;
		$('#content').html("<div id='milestone-listner'>&nbsp;</div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#milestone-listner').html($(template_ui));
			$('#milestone-listner').find('#admin-prefs-tabs-content').html(getTemplate("settings-milestones-tab"), {});

			that1.dealGoalsView = new Sources_Loss_Reasons_Events_Collection_View({ url : '/core/api/users', templateKey : "admin-settings-deal-goals",
				individual_tag_name : 'tr', sortKey : "name", postRenderCallback : function(el)
				{
					initQuota(function(){
					initializeMilestoneListners(el);
					

							var d=$('#goal_duration span').html();
					d=new Date(d);
					var start=getUTCMidNightEpochFromDate(d);

						$.ajax({ type : 'GET', url : '/core/api/goals?start_time='+start/1000, 
						contentType : "application/json; charset=utf-8", dataType : 'json' ,
							success:function(data)
							{
								console.log(data);
								var count=0,amount=0;
								$('#deal-sources-table').find('td').each(function(index){
									var that=$(this);
									that.find('.count').val("");
											that.find('.amount').val("");
									$.each(data,function(index,jsond){
										console.log(jsond);
										if(jsond.domain_user_id==that.find('div').attr('id')){
											that.find('.count').val(jsond.count);
											that.find('.amount').val(jsond.amount);
											that.attr('id',jsond.id);
											that.attr('data',jsond.start_time);
											//flag=true;
										}

								});
									if(that.find('.count').val()!="")
									count=count+parseInt(that.find('.count').val());
									if(that.find('.amount').val()!="")
										amount=amount+parseFloat(that.find('.amount').val());
								});

								
								percentCountAndAmount(count,amount);
							}
					});
					});
					
				}  });	
			that1.dealGoalsView.collection.fetch();
			$('#content').find('#admin-prefs-tabs-content').find('#settings-milestones-tab-content').html(that1.dealGoalsView.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.milestones-tab').addClass('select');
			$(".active").removeClass("active");
			$('.settings-deal-goal').addClass('active');
			$('#milestone-listner').find('#admin-prefs-tabs-content').parent().removeClass('bg-white');
			$('.settings-deal-goal').parent().removeClass('b-b-none');

		}, "#milestone-listner");
	},

	changeDomain : function()
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}
		
		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	
			var view = new Base_Model_View({ url : '/core/api/alias', template : "admin-settings-domain-alias", postRenderCallback : function(el){},
			prePersist : function(model){
				var aliasJSON = [];
				$.each($("#alias_domain").find('input[name="alias"]'), function(index, data) {
					aliasJSON.push(($(data).val().toLowerCase()));
				});
			    model.set({ 
			       'alias' : aliasJSON
			      }, 
			      { 
			       silent : true 
			      });
			   }, saveAuth : function(el){
			   	var form_id = $("#alias", el).closest('form').attr("id");
				if (!isValidForm('#' + form_id))
				{
					return false;
				}
				if(getDomainFromURL() != $("#alias", el).val())
				{
					$("#saveAliasAuthentication", el).html(getTemplate("conform-domain-change-model",{}));
					$("#saveAliasAuthentication", el).modal("show");
					return true;
				}
				else{
					return false;
				}
			}, saveCallback : function(response){
				console.log("saveCallback");
				
				var domain = getDomainFromURL();
				if(domain == null)
					window.location.href = "/login";
				if(domain != response.alias[0]){
					showNotyPopUp("information", "Your domain name has been updated successfully. Logging out...", "top");
					setTimeout(function()
					{
						window.location.href = window.location.protocol + "//" + response.alias[0] + ".agilecrm.com/login" + window.location.hash;
					}, 5000);
				}
			},errorCallback : function(data){
				showNotyPopUp("warning", data.responseText, "top");
			} });

			$('#content').find('#admin-prefs-tabs-content').html(view.render().el);
			$('#content').find('#AdminPrefsTab .select').removeClass('select');
			$('#content').find('.account-prefs-tab').addClass('select');
			$(".active").removeClass("active");

		}, "#content");

		
		
	}

});


function initQuota(callback)
{
	$("#goal_duration span.date").datepicker({ format :"MM yyyy", minViewMode:"months",weekStart : CALENDAR_WEEK_START_DAY, autoclose : true ,
						
				}).on('changeMonth',function(e) {
       						/// alert(e);
       						$("#goal_duration span").html( e.date.format("mmmm yyyy"));
       						 callback();

       						}).datepicker("setDate", new Date());

				callback();
}

function toggle_admin_user_bulk_actions_delete(clicked_ele, isBulk, isCampaign)
{
	$("#bulk-action-btns button").addClass("disabled");
	if ($(clicked_ele).is(':checked'))
	{
		$("#bulk-action-btns button").removeClass("disabled");

	}
	else
	{
		if (isBulk)
		{
			$("#bulk-action-btns button").addClass("disabled");

			return;
		}

		var check_count = 0
		$.each($('.tbody_check'), function(index, element)
		{
			if ($(element).is(':checked'))
			{
				check_count++;
				return false;
			}
			// return;
		});

		if (check_count == 0)
		{
			$("#bulk-action-btns button").addClass("disabled");
		}
	}
}

function getDomainFromURL(){
	var temp = window.location.host.split("-dot");
	if(temp.length == 1)
		temp = window.location.host.split(".");
	if(temp.length == 1)
		return "my";
	return temp[0];
}
/**
 * Creates a backbone router to perform config activities (onboarding and etc..).
 * 
 */
var AgileConfigRouter = Backbone.Router.extend({

	routes : {
	/* Admin-Settings */
	"onboarding/:link" : "onBoarding",
	},
	
	onBoarding : function(link)
	{
		if (!CURRENT_DOMAIN_USER.is_admin)
		{
			getTemplate('others-not-allowed', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
			}, "#content");

			return;
		}

		getTemplate("admin-settings", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			head.js(LIB_PATH + 'lib/prettify-min.js','../lib/zeroclipboard/ZeroClipboard.js', function()
			{
				var view = new Base_Model_View({ url : '/core/api/api-key', template : "admin-settings-api-key-model", postRenderCallback : function(el)
				{
					prettyPrint();
					console.log(link+"link is");
					if(link)
					{
						$(el).find('#APITab a[href="#'+ link +'"]').trigger('click');
					}
					
					initZeroClipboard("saas_api_track_code_icon", "saas_api_track_code");
					

				} });
				$('#content').find('#admin-prefs-tabs-content').html(view.render().el);
				$('#content').find('#AdminPrefsTab .select').removeClass('select');
				$('#content').find('.analytics-code-tab').addClass('select');
				// $('#content').html(view.el);
			});
			
			$.getJSON("core/api/api-key", function(data)
		    {
				console.log(data);
				getTemplate("onboarding-"+ link, data, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
				}, "#content");
		    });


		}, "#content");

	}
	
});/**
 * Initiates all the routers and assigns to global variable to access the routes
 * from any where in the code.
 */

// All Routers are global
var App_Contacts, App_Contact_Search, App_Contact_Bulk_Actions, App_Contact_Filters, App_Contact_Views, App_Workflows, App_Deals, App_Admin_Settings, App_Calendar, App_Settings, App_Reports, App_Cases, App_Subscription, App_Visitors, App_WebReports, App_Documents, App_Widgets, App_ShopifyApp, App_Portlets, App_VoiceMailRouter,App_Deal_Details, App_Forms, App_ACL, App_Webpages;
var Collection_View = {};
$(function()
{
	App_Contacts = new ContactsRouter();
	App_Contact_Views = new ContactViewsRouter();
	App_Contact_Filters = new ContactFiltersRouter();
	App_Contact_Bulk_Actions = new ContactBulkActionRouter();
	App_Contact_Search = new ContactSearchRouter();
	App_Workflows = new WorkflowsRouter();
	App_Deals = new DealsRouter();
	App_Admin_Settings = new AdminSettingsRouter();
	App_Settings = new SettingsRouter();
	App_Calendar = new CalendarRouter();
	App_Subscription = new SubscribeRouter();
	App_Reports = new ReportsRouter();
	App_Cases = new CasesRouter();
	App_Visitors = new VisitorsRouter();
	App_WebReports = new WebreportsRouter();
	App_Documents = new DocumentsRouter();
	App_Widgets = new WidgetsRouter();
	App_Configuration = new AgileConfigRouter();
	App_Adminpanel = new AdminPanelRouter();
	App_ReferelRouter = new ReferelRouter();
	App_Activity_log = new ActivitylogRouter();
	App_ShopifyApp = new ShopifyRouter();
	App_Deal_Details= new DealDetailsRouter();
	App_VoiceMailRouter = new VoiceMailRouter();
	App_Portlets = new PortletsRouter;
	App_Tasks = new TaskDetailsRouter();
	App_Forms = new FormsRouter();
	App_ACL = new ACLRestriction();
	App_FacebookPageTabRouter = new FacebookPageTabRouter();
	App_Companies = new CompaniesRouter();
	App_Datasync = new DataSyncRouter();
	App_Ticket_Module = new TicketsUtilRouter();
	App_LandingPageRouter = new LandingPageRouter();
	App_Dashboards = new DashboardsRouter();
	App_EmailBuilderRouter = new EmailBuilderRouter();
	App_VisitorsSegmentation=new VisitorsSegmentationRouter();
    App_Helpcenter_Module = new HelpcenterRouter();
	// Binds an event to activate infinite page scrolling
	Backbone.history.bind("all", currentRoute)

	// Backbone.history.bind("change", routeChange)

	/*
	 * Start Backbone history a necessary step to begin monitoring hashchange
	 * events, and dispatching routes
	 */
	Backbone.history.start();
//	setup_our_domain_sync();
});

// Global variable to store current route
var Current_Route;

/**
 * Reads current route, from the url of the browser, splits at "#" ( current
 * route is after "#" ), and activates infinite scrolling
 * 
 * @param route
 */
function currentRoute(route)
{
	endFunctionTimer("startbackbone");
	
	Current_Route = window.location.hash.split("#")[1];
	
	if(SCROLL_POSITION)
	{
		var temp = Current_Route;
		if(!temp.match("contact"))
			SCROLL_POSITION = 0;
	}

	// Update Google Analytics Track Page
	agile_update_ga_track_page(Current_Route);
	
	activateInfiniScroll();
	// set_profile_noty();
	// Reset it to uncheck checkboxes for bulk actions on route change
	SELECT_ALL = false;
	SUBSCRIBERS_SELECT_ALL = false;
	if (tour)
	{
		tour.end();
		tour = null;
	}
	if (GLOBAL_WEBRULE_FLAG)
		executeWebRulesOnRoute();

	// disposeEvents();

	// load_clickdesk_code();
	try{
		showPageBlockModal();
	}catch(e){
	}
	
	 showUpgradeNoty();

	 // Check the user permission to view the current route.
	 if(CURRENT_DOMAIN_USER)
		 tight_acl.init_permissions();

		//removing_fullscreen();

}



/*
checking the current path for the contacts
*/
/*
function removing_fullscreen()
{

    var fullscreenhideRoutes = ["contacts", "deals", "workflows"];
    var hideFullScreen = false;
    for(var i=0;i <fullscreenhideRoutes.length; i++){
    	if(Current_Route == undefined) {
    		$("#content").removeClass("fullscreenwidjet");
			$("#aside").removeClass("hide");
		}
         else if (Current_Route.indexOf(fullscreenhideRoutes[i]) == 0){
           		return;
    }
    else  {
    $("#content").removeClass("fullscreenwidjet");
	$("#aside").removeClass("hide");
	}
	}

    
 }
 */
/**
 * Clickdesk Widget
 */
function load_clickdesk_code()
{

	if (CLICKDESK_CODE_LOADED)
		return;

	console.log("loading clickdesk..");

	CLICKDESK_CODE_LOADED = true;

	var glcspt = document.createElement('script');
	glcspt.type = 'text/javascript';
	glcspt.async = true;
	glcspt.src = glcpath + 'livechat-new.js';
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(glcspt, s);
}
_
function executeWebRulesOnRoute(){
 	  if(typeof _agile_execute_action == "function")
	  {
	        _agile_webrules();
	        return;
	  }
}

$(document).ready(function(){

  setTimeout(function(){$(".modal-header .close").html("&times;");}, 1000);
});

SUBSCRIBERS_SELECT_ALL = false;
/**
 * calendar.js is a script file having a route to show calendar
 * 
 * @module Activities
 */

var eventCollectionView;
var googleEventCollectionView;
var googleNextPageToken;
var CalendarRouter = Backbone.Router.extend({

routes : {
/* Shows fullCalendar page */
"calendar" : "calendar", "tasks" : "tasks_new", "tasks-new" : "tasks_new" },
/**
 * Activates the calendar menu and loads minified fullcalendar and jquery-ui to
 * show calendar view. Also shows tasks list in separate section.
 */
calendar : function()
{
	$('#due_tasks').css('pointer-events','none');
	_agile_delete_prefs("agile_calendar_view");

	$('#content').html("<div id='calendar-listers'>&nbsp;</div>");
	showTransitionBar();
	
	getTemplate("calendar", {}, undefined, function(template_ui) {
		if( !template_ui )	return;
		
		$('#calendar-listers').html($(template_ui));
		
		$('#calendar_event').html(LOADING_ON_CURSOR);
		$('#calendar-listers').find("#calendar-filters").html(LOADING_ON_CURSOR);
		
		getCalendarUsersDetails(function(users) {
				getTemplate("event-left-filter", users, undefined, function(template_ui1){
					
						$('#calendar-listers').find("#calendar-filters").html($(template_ui1));

						buildCalendarLhsFilters();
						createRequestUrlBasedOnFilter();
						var view = _agile_get_prefs("agile_calendar_view");

						if (view)
						{
							$("#list_event_time").removeClass('hide');
							$("#user_calendars").hide();
							loadGoogleEvents();
							loadAgileEvents();
							return;
						}
						
						$("#list_event_time").addClass('hide');
						$("#user_calendars").show();
						$('#calendar-view-button').show();

						$(".active").removeClass("active");
						$("#calendarmenu").addClass("active");
						$('#agile_event_list').addClass('hide');

						put_thirdparty_calendar_links();
					
						$('#grp_filter').css('display', 'none');
						$('#event_tab').css('display', 'none');
					
						 $("[data-toggle=tooltip").tooltip();
						 
					}, $('#calendar-listers').find("#calendar-filters"));
		});
		
		head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/fullcalendar.min.js', function()
		{
			$('#calendar_event').html('');
			showCalendar([]);
			hideTransitionBar();
			initializeEventListners();
			loadPortlets('Events');
			$('#due_tasks').css('pointer-events','inherit');
		});

	}, '#calendar-listers');
},

/* Show tasks list when All Tasks clicked under calendar page. */
tasks : function()
{

	getTemplate("tasks-list-header", {}, undefined, function(template_ui){
		if(!template_ui)
			  return;
		$('#content').html($(template_ui));	

		fillSelect("owner-tasks", '/core/api/users/current-user', 'domainUser', function fillOwner()
		{

			$('#content').find("#owner-tasks").prepend("<li><a href=''>All Tasks</a></li>");
			$('#content').find("#owner-tasks").append("<li><a href='my-pending-tasks'>My Pending Tasks</a></li>");

			// To Updated task list based on user selection of type and owner
			initOwnerslist();
		}, "<li><a href='{{id}}'>My Tasks</a></li>", true);

		$(".active").removeClass("active");
		$("#calendarmenu").addClass("active");

	}, "#content");
},

/* Show new view of tasks. */
tasks_new : function()
{
	console.log("tasks_new");
	
	$('#content').html("<div id='tasks-list-template'>&nbsp;</div>");

	getTemplate("new-tasks-list-header", {}, undefined, function(template_ui){
		if(!template_ui)
			  return;
		$('#tasks-list-template').html($(template_ui));

		fillSelect("new-owner-tasks", '/core/api/users/current-user', 'domainUser', function fillOwner()
		{
			$('#tasks-list-template').find("#new-owner-tasks").prepend("<li><a href=''>All Tasks</a></li>");
			$('#tasks-list-template').find("#new-owner-tasks").append("<li><a href='all-pending-tasks' class='hide-on-status'>All Pending Tasks</a></li>");
			$('#tasks-list-template').find("#new-owner-tasks").append("<li><a href='my-pending-tasks' class='hide-on-owner hide-on-status'>My Pending Tasks</a></li>");
			initializeTasksListeners();
			// Read stored selections from cookie and Creates nested collection
			readDetailsFromCookie();
			// Bind dropdown events
			bindDropdownEvents();
			

		}, "<li><a href='{{id}}' class='hide-on-owner'>My Tasks</a></li>", true);

		$('.loading').remove();

		$(".active").removeClass("active");
		$("#calendarmenu").addClass("active");

		// Hide owner's and status task selection options from dropdown
		$(".hide-on-pending").hide();
		loadPortlets('Tasks');
	}, "#tasks-list-template");

},

// list view of event

});


// append events in category base
function appendItem1(base_model)
{
	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'tr', });

	// add to the right box - overdue, today, tomorrow etc.
	console.log(base_model.get('title'));
	var createdtime = get_activity_created_time(base_model.get('start'));

	// Today
	// Today
	if (createdtime == 0)
	{

		var heading = $('#today-heading', this.el);

		$('#today-event', this.el).append(itemView.render().el);
		$('#today-event', this.el).parent('table').css("display", "block");
		$('#today-event', this.el).parent('table').removeClass('hide');
		$('#today-event', this.el).show();
		$('#today-heading', this.el).show();
	}
	// if create time is 1 then that events belongs to tomarrow
	else if (createdtime == 1)
	{

		var heading = $('#tomorrow-heading', this.el);

		$('#tomorrow-event', this.el).append(itemView.render().el);
		$('#tomorrow-event', this.el).parent('table').css("display", "block");
		$('#tomorrow-event', this.el).parent('table').removeClass('hide');
		$('#tomorrow-event', this.el).show();
		$('#tomorrow-heading', this.el).show();
	}
	else if (createdtime > 1)
	{

		var heading = $('#next-week-heading', this.el);

		$('#next-week-event', this.el).append(itemView.render().el);
		$('#next-week-event', this.el).parent('table').css("display", "block");
		$('#next-week-event', this.el).parent('table').removeClass('hide');
		$('#next-week-event', this.el).show();
		if ($('#tomorrow-event').children().length > 0 || $('#today-event').children().length > 0)
		{
			$('#next-week-heading', this.el).show();

		}
	}

	var jsonObject = $.parseJSON(_agile_get_prefs('event-lhs-filters'));
	jsonObject = jsonObject[CURRENT_AGILE_USER.id];

	var owner = jsonObject ? jsonObject.owner_ids : null;// if no owner then
	// its all
	if (owner && owner.length == 1 && owner[0] == CURRENT_AGILE_USER.id)
	{
		$('.e_owner').addClass('hide');
	}
	else
	{
		if ($('.e_owner').hasClass('hide'))
			$('.e_owner').removeClass('hide');
	}

	$('.contact_text').children().last().text($('.contact_text').children().last().text().replace(",", "").trim());
}

// append all events
function appendItem2(base_model)
{
	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'tr', });

	// add to the right box - overdue, today, tomorrow etc.

	var heading = $('#event-heading', this.el);

	$('#eventAll', this.el).append(itemView.render().el);
	$('#eventAll', this.el).parent('table').css("display", "block");
	$('#eventAll', this.el).show();
	$('#event-heading', this.el).show();

	// check for all selected
	// on landing of page

	var jsonObject = $.parseJSON(_agile_get_prefs('event-lhs-filters'));
	jsonObject = jsonObject[CURRENT_AGILE_USER.id];

	var owner = jsonObject ? jsonObject.owner_ids : null; // if no owner then
	// its all
	if (owner && owner.length == 1 && owner[0] == CURRENT_AGILE_USER.id)
	{
		$('.e_owner').addClass('hide');
	}
	else
	{
		if ($('.e_owner').hasClass('hide'))
			$('.e_owner').removeClass('hide');
	}

	$('.contact_text').children().last().text($('.contact_text').children().last().text().replace(",", "").trim());

}

// append all google events
function appendGoogleEvent(base_model)
{
	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'tr', });

	// add to the right box - overdue, today, tomorrow etc.

	$('#google_event', this.el).append(itemView.render().el);
	$('#google_event', this.el).parent('table').css("display", "block");
	$('#google_event', this.el).show();
	$('.contact_text').children().last().text($('.contact_text').children().last().text().replace(",", "").trim());

}

function appendGoogleEventCategorization(base_model)
{
	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'tr', });

	// add to the right box - overdue, today, tomorrow etc.
	console.log(base_model.get('title'));
	var eventStartDate = base_model.get('start');
	var d = new Date(eventStartDate);
	var createdtime = get_activity_created_time(d.getTime() / 1000);

	// Today
	// Today
	if (createdtime == 0)
	{
		$('#today-event', this.el).append(itemView.render().el);
		$('#today-event', this.el).parent('table').css("display", "block");
		$('#today-event', this.el).parent('table').removeClass('hide');
		$('#today-event', this.el).show();
		$('#today-heading', this.el).show();
	}
	// if create time is 1 then that events belongs to tomarrow
	else if (createdtime == 1)
	{

		$('#tomorrow-event', this.el).append(itemView.render().el);
		$('#tomorrow-event', this.el).parent('table').css("display", "block");
		$('#tomorrow-event', this.el).parent('table').removeClass('hide');
		$('#tomorrow-event', this.el).show();
		$('#tomorrow-heading', this.el).show();
	}
	else if (createdtime > 1)
	{

		$('#next-week-event', this.el).append(itemView.render().el);
		$('#next-week-event', this.el).parent('table').css("display", "block");
		$('#next-week-event', this.el).parent('table').removeClass('hide');
		$('#next-week-event', this.el).show();
		if ($('#tomorrow-event', this.el).children().length > 0 || $('#today-event', this.el).children().length > 0)
		{
			$('#next-week-heading', this.el).show();

		}
	}
	$('.contact_text').children().last().text($('.contact_text').children().last().text().replace(",", "").trim());

}

function show_model(id)
{

	if ($(window.event.target).is('a'))
	{
		window.event.stopPropagation();
	}
	else
	{
		$("#updateActivityModal").html(getTemplate("update-activity-modal")).modal('show');

		var event = eventCollectionView.collection.get(id).toJSON();
		console.log("clicked event " + event);

		var contactList = event.contacts;
		for (var i = 0; i < contactList.length; i++)

		{
			var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}"><a href="#contact/{{id}}" class="text-white v-middle">{{name}}</a><a class="close m-l-xs" id="remove_tag">&times</a></li>');
			var json = {};
		 	// Adds contact name to tags ul as li element
		 	fel.append();

			if (contactList[i].type == "COMPANY")
			{   
				json = {name : getCompanyName(contactList[i].properties), id : contactList[i].id};
			}
			else
			{
				json = {name : getName(contactList[i].properties), id : contactList[i].id};
			}

			$('#updateActivityModal')
						.find("ul[name='contacts']")
						.append(template(json));
		}

		var priority = event.color;

		$('#updateActivityModal').find("select").children().each(function()
		{
			if (this.value == priority)
				$(this).attr('selected', 'selected');
		});

		if (event.allDay)
		{
			$('#updateActivityModal').find("input[name='allDay']").attr('checked', 'checked');
		}
		else
		{
			$('#updateActivityModal').find("input[name='allDay']").removeAttr("checked");
		}
		$('#updateActivityModal').find("input[name='title']").val(event.title);
		highlight_event();

		start = getDate(event.start);
		end = getDate(event.end);
		// Set Date for Event

		$("#update-event-date-1").val(getDateInFormatFromEpoc(event.start));
		$("#update-event-date-2").val(getDateInFormatFromEpoc(event.end));

		// Set Time for Event
		if ((start.getHours() == 00) && (end.getHours() == 00) && (end.getMinutes() == 00))
		{
			$('#update-event-time-1').val('');
			$('#update-event-time-2').val('');
		}
		else
		{
			$('#update-event-time-1').val(
					(start.getHours() < 10 ? "0" : "") + start.getHours() + ":" + (start.getMinutes() < 10 ? "0" : "") + start.getMinutes());
			$('#update-event-time-2').val((end.getHours() < 10 ? "0" : "") + end.getHours() + ":" + (end.getMinutes() < 10 ? "0" : "") + end.getMinutes());
		}

		$('#updateActivityModal').find("input[name='id']").val(id);
		$('#updateActivityModal').find("input[name='type']").val(event.type);
		if (event.meeting_type)
			$('#updateActivityModal').find("input[name='meeting_type']").val(event.meeting_type);
		else
			$('#updateActivityModal').find("input[name='meeting_type']").val('');

		if (event.type == "WEB_APPOINTMENT" && parseInt(event.start) > parseInt(new Date().getTime() / 1000))
		{
			$("[id='event_delete']").attr("id", "delete_web_event");
			web_event_title = event.title;
			if (event.contacts.length > 0)
			{
				var firstname = getPropertyValue(event.contacts[0].properties, "first_name");
				if (firstname == undefined)
					firstname = "";
				var lastname = getPropertyValue(event.contacts[0].properties, "last_name");
				if (lastname == undefined)
					lastname = "";
				web_event_contact_name = firstname + " " + lastname;
			}
		}
		else
		{
			$("[id='delete_web_event']").attr("id", "event_delete");
		}
		if (event.description)
		{
			var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
			$("#event_desc").html(description);
			$("textarea#description").val(event.description);
		}
		else
		{
			var desc = '<div class="row-fluid">' + '<div class="control-group form-group m-b-none">' + '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>' + '<div class="controls event_discription hide">' + '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>' + '</div></div></div>'
			$("#event_desc").html(desc);
		}
		// Fills owner select element
		populateUsersInUpdateActivityModal(event);
	}
}

function getFormattedDate(date)
{
	var dateFormat = 'mm/dd/yyyy';
	if ((date / 100000000000) > 1)
	{
		var d = new Date(parseInt(date));
		return d.format(dateFormat);
	}
	else
	{
		var d = new Date(parseInt(date) * 1000);
		return d.format(dateFormat);
	}
}

function getDate(date)
{

	if ((date / 100000000000) > 1)
	{
		return new Date(parseInt(date));
	}
	else
	{
		return new Date(parseInt(date) * 1000);
	}
}

function getName(properties)
{
	var name;
	var firstName;
	var lastName;
	for (var i = 0; i < properties.length; i++)
	{
		if (properties[i].name == 'first_name')
			firstName = properties[i].value;
		if (properties[i].name == 'last_name')
			lastName = properties[i].value;

	}
	name = firstName + " " + lastName;

	return name.replace("undefined", "").trim();
}

function getCompanyName(properties)
{

	var name;
	for (var i = 0; i < properties.length; i++)
	{
		if (properties[i].name == 'name')
			name = properties[i].value;
	}
	return name;
}
function loadAgileEvents()
{
	var calEnable = false;

	accessUrlUsingAjax('core/api/calendar-prefs/get', function(response)
	{
		if (response)
			calEnable = true;

		var jsonObject = $.parseJSON(_agile_get_prefs('event-lhs-filters'));
		jsonObject = jsonObject[CURRENT_AGILE_USER.id];

		var agile_event_owners = '';
		if (jsonObject)
		{
			var owners = jsonObject.owner_ids;
			if (owners && owners.length > 0)
			{
				$.each(owners, function(index, value)
				{
					if (index >= 1)
						agile_event_owners += ",";
					agile_event_owners += value;
				});
			}
		}
		var view = _agile_get_prefs("agile_calendar_view");
		if (view == "calendar_list_view")
		{
			eventCollectionView = new Base_Collection_View({ url : 'core/api/events/list?ownerId=' + agile_event_owners + '', templateKey : "events",
				individual_tag_name : 'tr', sort_collection : true, sortKey : 'start', descending : false, cursor : true, page_size : 25 });
			eventCollectionView.appendItem = appendItem2;
			eventCollectionView.collection.fetch();
			if (calEnable)
			{
				$('#agile').html(this.eventCollectionView.render().el);
				$('#agile_event_list').addClass('hide');
			}
			else
				$('#agile_event').html(this.eventCollectionView.render().el);

		}
		else if (view == "calendar_list_view_future")
		{
			eventCollectionView = new Base_Collection_View({ url : 'core/api/events/future/list?ownerId=' + agile_event_owners, templateKey : "future",
				individual_tag_name : 'tr', sort_collection : true, sortKey : 'start', descending : false, cursor : true, page_size : 25 });
			eventCollectionView.appendItem = appendItem1;
			eventCollectionView.collection.fetch();
			if (calEnable)
			{
				$('#agile').html(this.eventCollectionView.render().el);
				$('#agile_event_list').addClass('hide');
			}
			else
				$('#agile_event').html(this.eventCollectionView.render().el);
		}

	 });
}

function loadGoogleEvents()
{

	$.getJSON('core/api/calendar-prefs/get', function(response)
	{
		console.log(response);
		if (response)
		{
			_agile_set_prefs('google_event_token', response.access_token);

			head.js('https://apis.google.com/js/client.js', '/lib/calendar/gapi-helper.js?t=27', function()
			{
				setupGC(function()
				{

					gapi.auth.setToken({ access_token : response.access_token, state : "https://www.googleapis.com/auth/calendar" });

					// Retrieve the events from primary
					var view = _agile_get_prefs("agile_calendar_view");
					if (view == "calendar_list_view")
					{
						var request = gapi.client.calendar.events
								.list({ 'calendarId' : 'primary', maxResults : 25, singleEvents : true, orderBy : 'startTime' });
						request.execute(function(resp)
						{
							var events = new Array();
							console.log(resp);
							for (var i = 0; i < resp.items.length; i++)
							{
								var fc_event = google2fcEvent(resp.items[i]);
								console.log(fc_event);
								events.push(fc_event);

							}
							googleNextPageToken = resp.nextPageToken;
							googleEventCollectionView = new Base_Collection_View({ data : events, templateKey : "google-event", individual_tag_name : 'tr',
								sort_collection : true, sortKey : 'start', descending : false });
							googleEventCollectionView.appendItem = appendGoogleEvent;
							$('#google').html(googleEventCollectionView.render(true).el);

						});

					}
					else
					{
						var startDate = new Date();
						var gDate = startDate.toISOString();
						var request = gapi.client.calendar.events.list({ 'calendarId' : 'primary', maxResults : 25, singleEvents : true, timeMin : gDate });
						request.execute(function(resp)
						{
							var events = new Array();
							console.log(resp);
							for (var i = 0; i < resp.items.length; i++)
							{
								var fc_event = google2fcEvent(resp.items[i]);
								console.log(fc_event);
								events.push(fc_event);

							}
							googleEventCollectionView = new Base_Collection_View({ data : events, templateKey : "googleEventCategorization",
								individual_tag_name : 'tr', sort_collection : true, sortKey : 'start', descending : false });
							googleEventCollectionView.appendItem = appendGoogleEventCategorization;
							$('#google').html(googleEventCollectionView.render(true).el);

						});

					}

				});
				return;
			});
			$('#agile_event_list').addClass('hide');
		}
		else
		{
			$('#event_tab').addClass('hide');
			$('#agile_event').removeClass('hide');
		}

	});
}

function loadMoreEventsFromGoogle()
{
	var accessToken = _agile_get_prefs('google_event_token');
	if (googleNextPageToken)
	{
		if (accessToken)
		{

			gapi.auth.setToken({ access_token : accessToken, state : "https://www.googleapis.com/auth/calendar" });

			// Retrieve the events from primary
			var request = gapi.client.calendar.events.list({ 'calendarId' : 'primary', maxResults : 20, singleEvents : true, pageToken : googleNextPageToken,
				orderBy : 'startTime' });

			request.execute(function(resp)
			{
				var events = new Array();
				console.log(resp);
				for (var i = 0; i < resp.items.length; i++)
				{
					var fc_event = google2fcEvent(resp.items[i]);
					console.log(fc_event);
					events.push(fc_event);

				}
				googleNextPageToken = resp.nextPageToken;
				var view = _agile_get_prefs("agile_calendar_view");
				if (view == "calendar_list_view")
				{
					googleEventCollectionView.collection.add(events);
					googleEventCollectionView.collection.sort();
				}
				else
				{
					googleEventCollectionView.collection.add(events);
					googleEventCollectionView.collection.sort();
				}

			})

		}
		else
		{

			$.getJSON('core/api/calendar-prefs/get', function(response)
			{

				gapi.auth.setToken({ access_token : response.access_token, state : "https://www.googleapis.com/auth/calendar" });

				// Retrieve the events from primary
				var request = gapi.client.calendar.events.list({ 'calendarId' : 'primary', maxResults : 1000, singleEvents : true,
					pageToken : googleNextPageToken });

				request.execute(function(resp)
				{
					var events = new Array();
					console.log(resp);
					for (var i = 0; i < resp.items.length; i++)
					{
						var fc_event = google2fcEvent(resp.items[i]);
						console.log(fc_event);
						events.push(fc_event);

					}
					googleNextPageToken = resp.nextSyncToken;
					var view = _agile_get_prefs("agile_calendar_view");
					if (view == "calendar_list_view")
					{
						googleEventCollectionView.collection.add(events);
						googleEventCollectionView.collection.sort();
					}
					else
					{
						googleEventCollectionView.collection.add(events);
						googleEventCollectionView.collection.sort();
					}

				});
			});
		}
	}
}

function loadOfficeEvents(calStartDateObj, calEndDateObj){

	showLoadingOnCalendar(true);

	var url = "core/api/officecalendar/office365-appointments?startDate="+ calStartDateObj.getTime() +"&endDate="+ calEndDateObj.getTime();
	$.getJSON(url, function(response){
		if(response){
			var jsonArray = [];
			for (var i=0; i<response.length; i++){		
				var obj = response[i];
				//Start Date
				var startDate = Math.round((new Date(obj.start).getTime()) / 1000);
				obj.start = startDate;
				//End Date
				var endDate = Math.round((new Date(obj.end).getTime()) / 1000);
				obj.end = endDate;
				jsonArray.push(obj);		
			}	
			addEventSourceToCalendar('office', jsonArray);
			showLoadingOnCalendar(false);	
		}else{			
			showLoadingOnCalendar(false);	
		}
	});	
}/**
 * Creates backbone router for Case create, read and update operations
 */
var CasesRouter = Backbone.Router.extend({

	routes : { "cases" : "listCases", },

	/**
	 * Fetches all the case and shows them as a list.
	 * 
	 */
	listCases : function()
	{
		 $('#content').html("<div id='cases-listners'>&nbsp;</div>");
		this.casesCollectionView = new Base_Collection_View({ url : 'core/api/cases', sort_collection : false, restKey : "case", templateKey : "cases",
			cursor : true, page_size : 25, individual_tag_name : 'tr', postRenderCallback : function(el)
			{
				includeTimeAgo(el);
				initializeCasesListeners(el);
			}, appendItemCallback : function(el)
			{
				includeTimeAgo(el);
			} });

		this.casesCollectionView.collection.fetch();

		$('#cases-listners').html(this.casesCollectionView.render().el);

		$(".active").removeClass("active");
		$("#casesmenu").addClass("active");
	}

});
/**
 * Creates backbone router for companies management and filter (custom view)
 * operations.
 * 
 * @module Company management & filters
 */

COMPANIES_HARD_RELOAD = true;

var CompaniesRouter = Backbone.Router
.extend({
	
	routes : {
	
		/* Companies */
		"companies" : "companies",
	
		"company/:id" : "companyDetails",
		
		"company-edit" : "editCompany",
		
		"company-view-prefs" : "companyViewPrefs"
	},
	
	/**
	 * Fetches all the companies and shows as list, if tag_id
	 * and company_filter_id are not defined, if any one of them is defined then
	 * fetches the contacts related to that particular id (tag_id or
	 * company_filter_id) and shows as list. Adds tags, charts for tags and
	 * filter views to the contacts list from postRenderCallback of its
	 * Base_Collection_View. Initiates infiniScroll to fetch contacts
	 * (25 in count) step by step on scrolling down instead of fetching
	 * all at once.
	 */
	companies : function(tag_id, company_filter_id, grid_view, is_lhs_filter, view_data)
	{

		if (SCROLL_POSITION)
		{
			$('html, body').animate({ scrollTop : SCROLL_POSITION }, 1000);
			SCROLL_POSITION = 0;
		}
		else
		{
			$(window).scrollTop(0);
		}
		
		// If contacts are selected then un selects them
		SELECT_ALL = false;
		
		/**
		 * If collection is already defined and contacts are fetched the
		 * show results instead of initializing collection again
		 */
		if (COMPANIES_HARD_RELOAD == true)
		{
			this.companiesListView = undefined;
			COMPANIES_HARD_RELOAD = false;
			view_data = undefined;
			// App_Companies.companyViewModel = undefined;
		}
		
		// If id is definesd get the respective custom view object
		if (!view_data)
		{
			// Once view id fetched we use it without fetching it.
			if (!App_Companies.companyViewModel)
			{
				var view = new Backbone.Model();
				view.url = 'core/api/contact-view-prefs/company';
				view.fetch({ success : function(data)
				{
					// If custom view object is empty i.e., custom view
					// is deleted.
					// custom view cookie is eraised and default view is
					// shown
					if ($.isEmptyObject(data.toJSON()))
					{
						// Erase custom_view cookie, since
						// view object with given id is not available
						_agile_delete_prefs("contact_view");

						// Loads default contact view
						App_Companies.companies();
						return;
					}
					App_Companies.companyViewModel = data.toJSON();
					App_Companies.companies(tag_id, undefined, undefined, is_lhs_filter,App_Companies.companyViewModel);

				} });
				return;
			}

			view_data = App_Companies.companyViewModel;

		}

		var template_key = "companies-custom-view";
		var individual_tag_name = "tr";
		var sort_key = _agile_get_prefs("company_sort_field");
		if (!sort_key || sort_key == null)
		{
			sort_key = '-created_time';
			// Saves Sort By in cookie
			_agile_set_prefs('company_sort_field', sort_key);
		}

		// Default url for contacts route
		var url = '/core/api/contacts/companies/list';
		var collection_is_reverse = false;
		this.tag_id = tag_id;
		var postData;

		// Tags, Search & default browse comes to the same function
		if (tag_id)
		{
			tag_id = decodeURI(tag_id);

			tag_id = decodeURI(tag_id);

			// erase filter cookie
			_agile_delete_prefs('company_filter');
			
			if (this.companiesListView && this.companiesListView.collection)
			{

				if (this.companiesListView.collection.url.indexOf('core/api/tags/list/' + tag_id) == -1)
				{
					this.companiesListView = undefined;
				}
			}

			this.customView(_agile_get_prefs("contact_view"), undefined, 'core/api/tags/list/' + tag_id, tag_id);
			return;

		}
		else
		{
			if (this.companiesListView && this.companiesListView.collection)
			{

				if (this.companiesListView.collection.url.indexOf('core/api/tags/list') != -1)
				{
					console.log(window.location.hash = '#companies');
					this.companiesListView = undefined;
				}
			}
		}

		// If contact-filter cookie is defined set url to fetch
		// respective filter results
		if (company_filter_id || (company_filter_id = _agile_get_prefs('company_filter')))
		{
			collection_is_reverse = false;
			url = "core/api/filters/query/list/" + company_filter_id;
		}

		console.log("while creating new base collection view : " + collection_is_reverse);

		if (this.companiesListView && this.companiesListView.collection.url == url)
		{
			this.companiesListView.collection.url = url;
			
			var el = this.companiesListView.render(true).el;

			$('#content').html(el);

			contactFiltersListeners("lhs_filters_conatiner");
			contactListener();

			$(".active").removeClass("active");
			$("#companiesmenu").addClass("active");
			return;
		}
		if (_agile_get_prefs('dynamic_company_filter'))
		{
			url = 'core/api/filters/filter/dynamic-filter';
			postData = _agile_get_prefs('dynamic_company_filter');
		}

		var slateKey = getCompanyPadcontentKey(url);
		if (is_lhs_filter)
		{
			template_key = "companies-custom-view-table";
			/*if (grid_view || _agile_get_prefs("agile_contact_view"))
			{
				template_key = "contacts-grid-table";
				individual_tag_name = "div";
			}*/
		}
		
		/*
		 * cursor and page_size options are taken to activate
		 * infiniScroll
		 */
		this.companiesListView = new Contacts_Events_Collection_View({ url : url, restKey : "contact", modelData : view_data, global_sort_key : sort_key,
			templateKey : template_key, individual_tag_name : 'tr', slateKey : slateKey, cursor : true, request_method : 'POST', post_data: {'filterJson': postData}, page_size : 25, sort_collection : false,
			postRenderCallback : function(el, collection)
			{
				// To set chats and view when contacts are fetch by
				// infiniscroll
				//setup_tags(el);
				contactListener();
				company_list_view.init(el);

				setUpCompanySortFilters(el);

				setUpCompanyFields(el)

				abortCountQueryCall();
				
				if(is_lhs_filter) {

					if(collection.models.length > 0 && !collection.models[0].get("count")){
						// Call to get Count 
						getAndUpdateCollectionCount("companies", el);						
					}
					else {
						var count = 0;
						if(collection.models.length > 0) {
							count = collection.models[0].attributes.count || collection.models.length;
						}
						var count_message;
						if (count > 9999 && (_agile_get_prefs('company_filter') || _agile_get_prefs('dynamic_company_filter')))
							count_message = "<small> (" + 10000 + "+ Total) </small>" + '<span style="vertical-align: text-top; margin-left: -5px">' + '<img border="0" src="' + updateImageS3Path("/img/help.png")+ '"' + 'style="height: 10px; vertical-align: middle" rel="popover"' + 'data-placement="bottom" data-title="Lead Score"' + 'data-content="Looks like there are over 10,000 results. Sorry we can\'t give you a precise number in such cases."' + 'id="element" data-trigger="hover">' + '</span>';
						else
							count_message = "<small> (" + count + " Total) </small>";
						$('#contacts-count').html(count_message);
					}

				} else {

					
				    if(collection.models.length > 0 && !collection.models[0].get("count")){
						// Call to get Count 
						getAndUpdateCollectionCount("companies", el);						
					}
				    					
					setupLhsFilters(el,true);
					contactFiltersListeners("lhs_filters_conatiner");
				}
			} });
		
		var _that = this;
		App_Companies.companyDateFields = COMPANY_DATE_FIELDS;

		App_Companies.companyContactTypeFields = COMPANIES_CONTACT_TYPE_FIELDS;
		App_Companies.companyCompanyTypeFields = COMPANIES_COMPANY_TYPE_FIELDS;

		if(!App_Companies.companyDateFields){
			$.getJSON("core/api/custom-fields/type/scope?type=DATE&scope=COMPANY", function(customDatefields)
				{
					App_Companies.companyDateFields = customDatefields;

					// Defines appendItem for custom view
					_that.companiesListView.appendItem = function(base_model){
						contactTableView(base_model,customDatefields,this,App_Companies.companyContactTypeFields,App_Companies.companyCompanyTypeFields);
					};
			
					// Fetch collection
					_that.companiesListView.collection.fetch();
					contactListener();
					
				});
		} else {
			// Defines appendItem for custom view
			_that.companiesListView.appendItem = function(base_model){
				contactTableView(base_model,App_Companies.companyDateFields,this,App_Companies.companyContactTypeFields,App_Companies.companyCompanyTypeFields);
			};
	
			// Fetch collection
			_that.companiesListView.collection.fetch();
		}
		

		if (!is_lhs_filter)
		{
			$('#content').html(this.companiesListView.el);
			contactListener();
		}
		else
		{
			$('#content').find('.contacts-inner-div').html(this.companiesListView.el);
			$('#bulk-actions').css('display', 'none');
			$('#bulk-select').css('display', 'none');
			$('#bulk-action-btns > button').addClass("disabled");
			COMPANIES_HARD_RELOAD = true;

		}

		$(".active").removeClass("active");
		$("#companiesmenu").addClass("active");
	
	},
	
	/**
	 * Shows a contact in its detail view by taking the contact from
	 * contacts list view, if list view is defined and contains the
	 * contact, otherwise downloads the contact from server side based
	 * on its id. Loads timeline, widgets, map and stars (to rate) from
	 * postRenderCallback of its Base_Model_View.
	 * 
	 */
	companyDetails : function(id, company){
		
		insidePopover=false;
		// For getting custom fields
		if (App_Companies.customFieldsList == null || App_Companies.customFieldsList == undefined)
		{
			App_Companies.customFieldsList = new Base_Collection_View({ url : '/core/api/custom-fields/position', sort_collection : false,
				restKey : "customFieldDefs", templateKey : "admin-settings-customfields", individual_tag_name : 'tr' });
			App_Companies.customFieldsList.collection.fetch();
		}

		var company_collection;

		if (!company && this.companyDetailView && this.companyDetailView.model != null)
		{
			// company_collection = this.contactDetailView;

			if (id == this.companyDetailView.model.toJSON()['id'])
			{
				App_Companies.companyDetails(id, this.companyDetailView.model);
				return;
			}
		}

		// If user refreshes the contacts detail view page directly - we
		// should load from the model
		if (!company)
			if (!this.companiesListView || this.companiesListView.collection.length == 0 || this.companiesListView.collection.get(id) == null)
			{

				console.log("Downloading contact");

				// Download
				var company_details_model = Backbone.Model.extend({ url : function()
				{
					return '/core/api/contacts/' + this.id;
				} });

				var model = new company_details_model();
				model.id = id;
				model.fetch({ success : function(data)
				{

					// Call Contact Details again
					App_Companies.companyDetails(id, model);

				}, error : function(data, response)
				{
					if (response && response.status == '403')

						$("#content").html("<div class='well'> <div class='alert bg-white text-center'><div class='slate-content p-md text'><h4 style='opacity:0.8'> Sorry, you do not have permission to view this Company.</h4><div class='text'style='opacity:0.6'>Please contact your admin or account owner to enable this option.</div></div></div></div>");

				} });

				return;
			}

		// If not downloaded fresh during refresh - read from collection
		if (!company)
		{
			// Set url to core/api/contacts/list (If filters are loaded
			// contacts url is changed so set it back)

			// this.companiesListView.collection.url =
			// "core/api/contacts/list";
			company = this.companiesListView.collection.get(id);
		}

		// Assigning contact collection
		if (this.companiesListView && this.companiesListView.collection)
			company_collection = this.companiesListView.collection;

		add_recent_view(company);

		// If contact is of type company , go to company details page
		this.companyDetailView = new Contact_Details_Model_Events({ model : company, isNew : true, template : "company-detail",
			postRenderCallback : function(el)
			{
				fill_company_related_contacts(id, 'company-contacts', el);
				// Clone contact model, to avoid render and
				// post-render fell in to
				// loop while changing attributes of contact
				var recentViewedTime = new Backbone.Model();
				recentViewedTime.url = "core/api/contacts/viewed-at/" + company.get('id');
				recentViewedTime.save();

				if (App_Companies.companiesListView && App_Companies.companiesListView.collection && App_Companies.companiesListView.collection.get(id))
					App_Companies.companiesListView.collection.get(id).attributes = company.attributes;

				company_util.starify(el);
				company_util.show_map(el);
				// fill_owners(eidl, contact.toJSON());
				// loadWidgets(el, contact.toJSON());

			} });

		var el = this.companyDetailView.render(true).el;
		$('#content').html(el);
	//	fill_company_related_contacts(id, 'company-contacts');
		// company_detail_tab.initEvents();
		checkCompanyUpdated();
		return;
	},
	
	companyViewPrefs : function(){
		var companyView = new Base_Model_View({ url : 'core/api/contact-view-prefs/company', template : "company-view",change: false, 
			restKey : "companyView", window : "companies", postRenderCallback : function(el, modelData)
			{
				fillSelect("custom-fields-optgroup", "core/api/custom-fields/scope?scope=COMPANY", undefined, function(data)
				{
					head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/jquery.multi-select.js', function()
					{

						$('#multipleSelect', el).multiSelect();

						$('.ms-selection', el).children('ul').addClass('multiSelect').attr("name", "fields_set").attr("id", "fields_set").sortable();

						$.each(modelData['fields_set'], function(index, field)
						{
							$('#multipleSelect', el).multiSelect('select', field);
						});

					});

				}, '<option value="CUSTOM_{{field_label}}">{{field_label}}</option>', true, el);
			}, saveCallback : function(data)
			{

				COMPANIES_HARD_RELOAD = true;
				if(App_Companies.companyViewModel)
					App_Companies.companyViewModel["fields_set"] = data.fields_set;

				App_Companies.navigate("companies", { trigger : true });
			} });

		$("#content").html(companyView.render().el);
	},
	
	/**
	 * Takes the contact to continue contact form to edit it. If
	 * attempts to edit a contact without defining contact detail view,
	 * navigates to contacts page. Gets the contact to edit, from its
	 * list view or its custom view, if not found in both downloads from
	 * server side (Contact database).
	 */
	editCompany : function(contact)
	{
		var company = null;

		// Takes back to companies if companies detailview is not defined
		if (!this.companyDetailView || !this.companyDetailView.model.id)
		{
			this.navigate("companies", { trigger : true });
			return;
		}

		// If company detail view is defined the get current company
		// model id
		var id = this.companyDetailView.model.id;

		if (this.companyDetailView && this.companyDetailView.model.id)
		{
			company = this.companyDetailView.model.toJSON();
		}

		// If contact list is defined the get contact to edit from the
		// list
		else if (this.companiesListView && this.companiesListView.collection && this.companiesListView.collection.get(id))
		{
			company = this.companiesListView.collection.get(id).toJSON();
		}

		// If contact list view and custom view list is not defined then
		// download contact
		else if (!company)
		{
			// Download contact for edit since list is not defined
			var company_details_model = Backbone.Model.extend({ url : function()
			{
				return '/core/api/contacts/' + id;
			} });

			var model = new company_details_model();

			model.fetch({ success : function(contact)
			{

				// Call Contact edit again with downloaded contact
				// details
				App_Companies.editCompany(company.toJSON());
			} });

			return;
		}

		// Contact Edit - take him to continue-contact form
		add_custom_fields_to_form(company, function(company)
		{
				deserialize_contact(company, 'continue-company');
		}, company.type);
	},
});/**
 * Creates backbone router for contacts bulk actions management operations.
 */
var ContactBulkActionRouter = Backbone.Router.extend({
	
	routes : {
		
		/* Contact bulk actions */
		
		"bulk-owner" : "ownerBulk",
		
		"bulk-campaigns" : "campaignsBulk",
		
		"bulk-tags" : "tagsBulk",
		
		"bulk-tags-remove" : "tagsRemoveBulk",
		
		"bulk-email" : "emailBulk", 
		
		"company-bulk-owner" : "companyOwnerBulk",
		
		"company-bulk-email" : "companyEmailBulk",

		"company-bulk-tags" : "companyTagsBulk",

		"company-bulk-tags-remove" : "companyTagsRemoveBulk",
		
	},

	/**
	 * Loads the owners template to subscribe the selected contacts to a
	 * campaign and triggers the custom event 'fill_owners' to fill the
	 * owners select drop down. This event is
	 */
	ownerBulk : function()
	{

		// On reloading redirecting to contacts/companies list
		if (!App_Contacts.contactsListView)
			Backbone.history.navigate("contacts", { trigger : true });
		else
		{
			getTemplate("bulk-actions-owner", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
				$('body').trigger('fill_owners');




			}, "#content");
			
		}
	},

	/**
	 * Loads the campaign template to subscribe the selected contacts to
	 * a campaign and triggers an event, which fills the campaigns
	 * select drop down. This event is binded to trigger on loading of
	 * the template
	 */
	campaignsBulk : function()
	{

		// On reloading redirecting to contacts list
		if (!App_Contacts.contactsListView)
			Backbone.history.navigate("contacts", { trigger : true });
		else
		{
			getTemplate("bulk-actions-campaign", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
				$('body').trigger('fill_campaigns');
			}, "#content");			
		}

	},

	/**
	 * Loads the tags template to add tags to the selected contacts
	 */
	tagsBulk : function()
	{
		// On reloading redirecting to contacts list
		if (!App_Contacts.contactsListView)
			Backbone.history.navigate("contacts", { trigger : true });
		else{

			getTemplate("bulk-actions-tags", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));
			}, "#content");	

		}
			
	},
	/**
	 * Loads the tags template to add tags to the selected contacts
	 */
	tagsRemoveBulk : function()
	{
		// On reloading redirecting to contacts list
		if (!App_Contacts.contactsListView)
			Backbone.history.navigate("contacts", { trigger : true });
		else
			getTemplate("bulk-actions-tags-remove", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));
			}, "#content");	
	},

	/**
	 * Loads the email template to send email to the selected contacts
	 * and triggers an event, which fills send email details. This event
	 * is binded to trigger on loading of the template
	 */
	emailBulk : function()
	{

		// On reloading redirecting to contacts list
		if (!App_Contacts.contactsListView)
			Backbone.history.navigate("contacts", { trigger : true });
		else
		{
			$("#content").html('<div id="send-email-listener-container"></div>');
			getTemplate("send-email", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#send-email-listener-container').html($(template_ui));
				$("#emailForm").find('.add-attachment-select').hide();
				$('body').trigger('fill_emails');
				initializeSendEmailListeners();
				sendEmailAttachmentListeners("send-email-listener-container");

			}, "#send-email-listener-container");			
		}

		var options = {
		"+ Add new" : "verify_email"
		};

	fetchAndFillSelect(
			'core/api/account-prefs/verified-emails/all',
			"email",
			"email",
			undefined,
			options,
			$('#from_email'),
			"prepend",
			function($select, data) {
			
			var ownerEmail = $select.find('option[value = \"'+CURRENT_DOMAIN_USER.email+'\"]').val();
			
				if(typeof(ownerEmail) == "undefined")
				{
				$select
						.find("option:first")
						.before(
								"<option value="+CURRENT_DOMAIN_USER.email+">"+CURRENT_DOMAIN_USER.email+"</option>");

					$select.val(CURRENT_DOMAIN_USER.email).attr("selected", "selected");
				}
				else
				$select.find('option[value = \"'+CURRENT_DOMAIN_USER.email+'\"]').attr("selected", "selected");
				
				rearrange_from_email_options($select, data);
			});
	},
	
	/**
	 * Loads the owners template to subscribe the selected contacts to a
	 * campaign and triggers the custom event 'fill_owners' to fill the
	 * owners select drop down. This event is
	 */
	companyOwnerBulk : function()
	{

		// On reloading redirecting to contacts/companies list
		if (!App_Companies.companiesListView)
			Backbone.history.navigate("companies", { trigger : true });
		else
		{
			getTemplate("bulk-actions-company-owner", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	
				$('body').trigger('fill_owners');
			}, "#content");
		}
	},

	/**
	 * Loads the email template to send email to the selected contacts
	 * and triggers an event, which fills send email details. This event
	 * is binded to trigger on loading of the template
	 */
	companyEmailBulk : function()
	{

		// On reloading redirecting to contacts list
		if (!App_Companies.companiesListView)
			Backbone.history.navigate("companies", { trigger : true });
		else
		{

			$("#content").html('<div id="send-email-listener-container"></div>');
			getTemplate("send-email-company", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
					
				$('#send-email-listener-container').html($(template_ui));	
				$("#emailForm").find('.add-attachment-select').hide();
				$('body').trigger('fill_emails');
				initializeSendEmailListeners();
				sendEmailAttachmentListeners("send-email-listener-container");

			}, "#send-email-listener-container");
		}
	},

	/**
	 * Loads the tags template to remove tags to the selected contacts
	 */
	companyTagsRemoveBulk : function()
	{
		// On reloading redirecting to contacts list
		if (!App_Companies.companiesListView)
			Backbone.history.navigate("companies", { trigger : true });
		else
			getTemplate("bulk-actions-companies-tags-remove", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));
			}, "#content");	
	},

	/**
	 * Loads the tags template to add tags to the selected contacts
	 */
	companyTagsBulk : function()
	{
		// On reloading redirecting to contacts list
		if (!App_Companies.companiesListView)
			Backbone.history.navigate("companies", { trigger : true });
		else{

			getTemplate("bulk-actions-companies-tags", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));
			}, "#content");	

		}
	}
	
});
/**
 * Creates backbone router for contacts filters management operations.
 */
var ContactFiltersRouter = Backbone.Router.extend({
	
	routes : {
		

		/* Contact-Filters */
		
		"contact-filters" : "contactfilters",
		
		"contact-filter-add" : "contactFilterAdd",
		
		"contact-filter-edit/:id" : "contactFilterEdit",
		
		"contact-filter/:id" : "showFilterContacts"
		
	},
	
	/**
	 * Shows contact filters list
	 */
	contactfilters : function()
	{
		this.contactFiltersList = new Base_Collection_View({ url : '/core/api/filters', restKey : "ContactFilter", templateKey : "contact-filter",
			individual_tag_name : 'tr', sort_collection : false,
			postRenderCallback : function(el)
			{
							head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
							{
											$(".created_time", el).timeago();
							});

			}});

		this.contactFiltersList.collection.fetch();
		$("#content").html(this.contactFiltersList.render().el);
	},
	
	/**
	 * Adds new filter to get specific contacts
	 */
	contactFilterAdd : function()
	{

		var contacts_filter = new Report_Filters_Event_View({ url : 'core/api/filters', template : "filter-contacts", isNew : "true", window : "contact-filters",
			postRenderCallback : function(el)
			{
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
				{
					chainFiltersForContactAndCompany(el, undefined, function()
					{
						$('#content').html(el);
						scramble_input_names($(el).find('#filter-settings'));
						$("#contact_type").trigger('change');
					});
				});				
			} });
		$("#content").html(LOADING_HTML);
		contacts_filter.render();		
	},
	
	/**
	 * Edits filter created
	 */
	contactFilterEdit : function(id)
	{
		if (!this.contactFiltersList || this.contactFiltersList.collection.length == 0 || this.contactFiltersList.collection.get(id) == null)
		{
			this.navigate("contact-filters", { trigger : true });
			return;
		}

		$("#content").html(LOADING_HTML);
		var contact_filter = this.contactFiltersList.collection.get(id);
		var ContactFilter = new Report_Filters_Event_View({ url : 'core/api/filters', model : contact_filter, template : "filter-contacts",
			window : 'contact-filters', postRenderCallback : function(el)
			{
				$(el).on('agile_model_loaded', function(e) {
					$("#contact_type").trigger('change');
				})
				$("#content").html(LOADING_HTML);
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
				{
					$("#content").html(LOADING_HTML);
					// setTimeout(function(){
						chainFiltersForContactAndCompany(el, contact_filter.toJSON(), function()
						{
							$('#content').html(el);
						});
					scramble_input_names($(el).find('#filter-settings')); 						
					// }, 0);
					

				})
			}, saveCallback : function(data)
			{
				var filterValue = _agile_get_prefs('contact_filter');
				if (filterValue && filterValue == data.id)
					CONTACTS_HARD_RELOAD = true;
			} });

		$("#content").html(LOADING_HTML);
		ContactFilter.render();

	},

	/**
	 * Fetches contacts based on filter_id
	 */
	showFilterContacts : function(filter_id)
	{
		if (App_Contacts)
			App_Contacts.contacts(undefined, filter_id);
	}
	
	
});/**
 * Creates backbone router for contacts search management operations.
 */
var ContactSearchRouter = Backbone.Router.extend({

	routes : {

	/* Search results */

	"contacts/search/:query" : "searchResults" 
		
	},

	/**
	 * search results
	 */
	searchResults : function(query)
	{
		var searchResultsView = new Base_Collection_View({ url : "core/api/search?q=" + encodeURIComponent(query), templateKey : "search", individual_tag_name : 'tr', cursor : true,
			data : QUERY_RESULTS, sort_collection : false, page_size : 15, postRenderCallback : function(el)
			{
				// Shows the query string as heading of search results
				if (searchResultsView.collection.length == 0)
					$("#search-query-heading", el).html('No matches found for "' + query + '"');
				else
					$("#search-query-heading", el).html('Search results for "' + query + '"');
			} });

		// If QUERY_RESULTS is defined which are set by agile_typeahead
		// istead of fetching again
		/*
		 * if(QUERY_RESULTS) { //Create collection with results
		 * searchResultsView.collection = new BaseCollection(QUERY_RESULTS, {
		 * restKey : searchResultsView.options.restKey, sortKey :
		 * searchResultsView.options.sortKey });
		 * 
		 * $('#content').html(searchResultsView.render(true).el);
		 * $('body').trigger('agile_collection_loaded'); return; }
		 */

		// If in case results in different page is clicked before
		// typeahead fetch results, then results are fetched here
		searchResultsView.collection.fetch();

		$('#content').html(searchResultsView.render().el);

	}

});
/**
 * Creates backbone router for contacts views management operations.
 */
var ContactViewsRouter = Backbone.Router.extend({
	
	routes : {
		"contact-view-prefs" : "editContactView",
	},	
	/**
	 * Edits contact view
	 */
	editContactView : function()
	{
		var contactView = new Base_Model_View({ url : 'core/api/contact-view-prefs', template : "contact-view",change: false, 
			restKey : "contactView", window : "contacts", postRenderCallback : function(el, modelData)
			{
				fillSelect("custom-fields-optgroup", "core/api/custom-fields/scope?scope=CONTACT", undefined, function(data)
				{
					head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/jquery.multi-select.js', function()
					{

						$('#multipleSelect', el).multiSelect();

						$('.ms-selection', el).children('ul').addClass('multiSelect').attr("name", "fields_set").attr("id", "fields_set").sortable();

						$.each(modelData['fields_set'], function(index, field)
						{
							$('#multipleSelect', el).multiSelect('select', field);
						});

					});

				}, '<option value="CUSTOM_{{field_label}}">{{field_label}}</option>', true, el);
			}, saveCallback : function(data)
			{
				CONTACTS_HARD_RELOAD = true;
				App_Contacts.navigate("contacts", { trigger : true });

				if(App_Contacts.contactViewModel)
					App_Contacts.contactViewModel["fields_set"] = data.fields_set;
			} });

		$("#content").html(contactView.render().el);

	}
	
});/**
 * Creates backbone router for contacts management and filter (custom view)
 * operations.
 * 
 * @module Contact management & filters
 */

CONTACTS_HARD_RELOAD = true;

var import_tab_Id;
var REFER_DATA;
var contact_company ;

var ContactsRouter = Backbone.Router.extend({

	routes : { 
		
		"" : "dashboard", 
		
		"dashboard" : "dashboard",
		
		// "dashboard-test": "dashboard",

		/* Contacts */
		"contacts" : "contacts",
		
		"contact/:id" : "contactDetails",
		
		"import" : "importContacts",

		"import/salesforce" : "salesforceImport",

		//add contact when customfields are there
		"contact-edit" : "editContact",
		
		"contact-add" : "addContact",
		
		"contact-duplicate" : "duplicateContact",
		
		"duplicate-contacts/:id" : "duplicateContacts",

		"merge-contacts" : "mergeContacts",
		
		"tags/:tag" : "contacts", 
		
		"send-email" : "sendEmail",
		
		"send-email/:id" : "sendEmail",

		"send-emails/:id" : "sendEmailCustom",
		
		"add-campaign" : "addContactToCampaign",

		/* Return back from Scribe after oauth authorization */
		"gmail" : "email", "twitter" : "socialPrefs", "linkedin" : "socialPrefs",
		
		/* CALL */
		"contacts/call-lead/:first/:last" : "addLead",
			
			/* CALL-with mobile number */
			"contacts/call-lead/:first/:last/:mob" : "addLeadDirectly",
			
			/* CALL-with only mobile number */
			"contacts/call-lead/:mob" : "addMobLead",
			

			"call-contacts" : "callcontacts"

	},
	
	initialize : function()
	{
		/*
		 * $(".active").removeClass("active");
		 * 
		 * $("#content").html(getTemplate('dashboard-timline', {}));
		 * setup_dashboardTimeline();
		 */
	},

	salesforceImport : function(){
         App_Datasync.salesforce();
	},

	dashboard : function()
	{
		insidePopover=false;
		$(".active").removeClass("active");
		if(CURRENT_DOMAIN_USER.domain == "admin")
		{
			Backbone.history.navigate("domainSearch" , {
                trigger: true
            });
            return;
		}

		var dashboard_name = _agile_get_prefs("dashboard_"+CURRENT_DOMAIN_USER.id);

		dashboard_name = dashboard_name ? dashboard_name : "DashBoard";

		var dashboardJSON = {};
		if(CURRENT_USER_DASHBOARDS && dashboard_name != "DashBoard") {
			$.each(CURRENT_USER_DASHBOARDS, function(index, value){
				if(dashboard_name != "DashBoard" && value.id == dashboard_name) {
					dashboardJSON["id"] = value.id;
					dashboardJSON["name"] = value.name;
					dashboardJSON["description"] = value.description;
				}
			});
		}

		if(!dashboardJSON["id"])
		{
			dashboard_name = "DashBoard";
		}

		getTemplate('portlets', dashboardJSON, undefined, function(template_ui){
				if(!template_ui)
					  return;

				var el = $(template_ui);
				$("#content").html(el);

				$('[data-toggle="tooltip"]').tooltip();
				if ((navigator.userAgent.toLowerCase().indexOf('chrome') > -1&&navigator.userAgent.toLowerCase().indexOf('opr/') == -1) && !document.getElementById('agilecrm_extension'))
				{
					$("#chrome-extension-button").removeClass('hide');
				}

				loadPortlets(dashboard_name,el);

		}, "#content");

	},
	
	/**
	 * Fetches all the contacts (persons) and shows as list, if tag_id
	 * and filter_id are not defined, if any one of them is defined then
	 * fetches the contacts related to that particular id (tag_id or
	 * filter_id) and shows as list. Adds tags, charts for tags and
	 * filter views to the contacts list from postRenderCallback of its
	 * Base_Collection_View. Initiates infiniScroll to fetch contacts
	 * (25 in count) step by step on scrolling down instead of fetching
	 * all at once.
	 */
	contacts : function(tag_id, filter_id, grid_view, is_lhs_filter)
	{
		insidePopover=false;
		if(SCROLL_POSITION)
		{
			$('html, body').animate({ scrollTop : SCROLL_POSITION  },1000);
			SCROLL_POSITION = 0;
		} else {
			$( window ).scrollTop( 0 );
		}
		
		// If contacts are selected then un selects them
		SELECT_ALL = false;
		
		//campaign filters are disabled for time being.
		/*if(_agile_get_prefs('dynamic_contact_filter') &&_agile_get_prefs('dynamic_contact_filter').indexOf('campaign_status') >= 0 ) {
			_agile_delete_prefs('dynamic_contact_filter');
		}*/
		//custom scroll element for grid view
		var custom_scrollable_element=null;
		var max_contacts_count = 20;
		var is_company = false;
		var template_key = "contacts";
		var individual_tag_name = "tr";
		var sort_key = _agile_get_prefs("sort_by_name");
		if(!sort_key || sort_key == null) {
			sort_key = '-created_time';
			// Saves Sort By in cookie
			_agile_set_prefs('sort_by_name', sort_key);
		}
		
		// Checks if user is using custom view. It check for grid view
		if (grid_view || _agile_get_prefs("agile_contact_view"))
		{
			template_key = "contacts-grid";
			individual_tag_name = "div";
			custom_scrollable_element="#contacts-grid-model-list";
		}
		
		// Default url for contacts route
		var url = '/core/api/contacts/list';
		var collection_is_reverse = false;
		this.tag_id = tag_id;
		var postData;

		// Tags, Search & default browse comes to the same function
		if (tag_id)
		{
			tag_id = decodeURI(tag_id);

			tag_id = decodeURI(tag_id);

			
			// erase filter cookie
			_agile_delete_prefs('contact_filter');
			//_agile_delete_prefs('company_filter');
			//_agile_delete_prefs('contact_filter_type');
			_agile_delete_prefs('dynamic_contact_filter');

			if (this.contactsListView && this.contactsListView.collection)
			{

				if (this.contactsListView.collection.url.indexOf('core/api/tags/list/' + tag_id) == -1)
				{
					this.contactsListView = undefined;
				}
			}

			this.customView(_agile_get_prefs("contact_view"), undefined, 'core/api/tags/list/' + tag_id, tag_id);
			return;
			
		}
		else
		{
			if (this.contactsListView && this.contactsListView.collection)
			{

				if (this.contactsListView.collection.url.indexOf('core/api/tags/list') != -1)
				{
					console.log(window.location.hash = '#contacts');
					this.contactsListView = undefined;
				}
			}
		}

		// If contact-filter cookie is defined set url to fetch
		// respective filter results
		if (filter_id || (filter_id = _agile_get_prefs('contact_filter')))
		{
			collection_is_reverse = false;
			url = "core/api/filters/query/list/" + filter_id;
		}

		// If view is set to custom view, load the custom view
		if (!_agile_get_prefs("agile_contact_view"))
		{
			if(_agile_get_prefs('dynamic_contact_filter')) {
				// Then call customview function with filter url
				this.customView(_agile_get_prefs("contact_view"), undefined, 'core/api/filters/filter/dynamic-filter', undefined,  is_lhs_filter, _agile_get_prefs('dynamic_contact_filter'));
				return;
			}
			// If there is a filter saved in cookie then show filter
			// results in custom view saved
			if (_agile_get_prefs('contact_filter'))
			{
				// Then call customview function with filter url
				this.customView(_agile_get_prefs("contact_view"), undefined, "core/api/filters/query/list/" + _agile_get_prefs('contact_filter'), tag_id);
				return;
			}

			// Else call customView function fetches results from
			// default url : "core/api/contacts/list"
			this.customView(_agile_get_prefs("contact_view"), undefined, undefined, undefined, is_lhs_filter);
			return;
		}

		console.log("while creating new base collection view : " + collection_is_reverse);

		/**
		 * If collection is already defined and contacts are fetched the
		 * show results instead of initializing collection again
		 */
		if (CONTACTS_HARD_RELOAD == true)
		{
			this.contactsListView = undefined;
			CONTACTS_HARD_RELOAD = false;
		}
		
		if (this.contactsListView && this.contactsListView.collection)
		{
			this.contactsListView.collection.url = url;

			$('#content').html('<div id="contacts-listener-container"></div>');
			$('#contacts-listener-container').html(this.contactsListView.render(true).el);

			$(".active").removeClass("active");
			$("#contactsmenu").addClass("active");

			contactFiltersListeners();

			return;
		}
		if(_agile_get_prefs('dynamic_contact_filter')) {
			url = 'core/api/filters/filter/dynamic-filter';
			postData = _agile_get_prefs('dynamic_contact_filter');
		} 

		var slateKey = getContactPadcontentKey(url);
		
		if(is_lhs_filter) {
			template_key = "contacts-table";
			
			if (grid_view || _agile_get_prefs("agile_contact_view"))
			{
				template_key = "contacts-grid-table";
				individual_tag_name = "div";
				custom_scrollable_element="#contacts-grid-table-model-list";
			}
		}

		/*
		 * cursor and page_size options are taken to activate
		 * infiniScroll
		 */
		this.contactsListView = new  Contacts_Events_Collection_View({ url : url,custom_scrollable_element:custom_scrollable_element, sort_collection : false, templateKey : template_key, individual_tag_name : individual_tag_name,
			cursor : true, page_size : 25, global_sort_key : sort_key, slateKey : slateKey, request_method : 'POST', post_data: {filterJson: postData}, postRenderCallback : function(el, collection)
			{		  
		
			$("#contacts-view-options").css( 'pointer-events', 'auto' );

				// Contacts are fetched when the app loads in
				// the initialize
				var cel = App_Contacts.contactsListView.el;
				var collection = App_Contacts.contactsListView.collection;

				abortCountQueryCall();
				
				// To set heading in template
				if(is_lhs_filter) {

					setupViews(el);
					setupContactFilterList();
					//setUpContactView();

					if(collection.models.length > 0 && !collection.models[0].get("count")){
						// Call to get Count 
						getAndUpdateCollectionCount("contacts", el);						
					}
					else {
						var count = 0;
						if(collection.models.length > 0) {
							count = collection.models[0].attributes.count || collection.models.length;
						}
						var count_message;
						if (count > 9999 && (_agile_get_prefs('contact_filter') || _agile_get_prefs('dynamic_contact_filter')))
							count_message = "<small> (" + 10000 + "+ Total) </small>" + '<span style="vertical-align: text-top; margin-left: 0px">' + '<img border="0" src="' + updateImageS3Path("/img/help.png") + '"' + 'style="height: 10px; vertical-align: middle" rel="popover"' + 'data-placement="bottom" data-title="Lead Score"' + 'data-content="Looks like there are over 10,000 results. Sorry we can\'t give you a precise number in such cases."' + 'id="element" data-trigger="hover">' + '</span>';
						else
							count_message = "<small> (" + count + " Total) </small>";
						$('#contacts-count').html(count_message);

					}
					
				} else {

					setupLhsFilters(cel, is_company);
					setupViews(cel);
					setupContactFilterList(cel, tag_id);
					setUpContactView(cel);
					loadPortlets('Contacts',cel);
				

					if(collection.models.length > 0 && !collection.models[0].get("count")){
						// Call to get Count 
						getAndUpdateCollectionCount("contacts", el);						
					}
				}

				$('[data-toggle="tooltip"]').tooltip();
				start_tour("contacts", el);

			} });

		// Contacts are fetched when the app loads in the initialize
		this.contactsListView.collection.fetch();
		if(!is_lhs_filter) {
			$('#content').html('<div id="contacts-listener-container"></div>');
			$('#contacts-listener-container').html(this.contactsListView.render().el);
			contactFiltersListeners();
			contactListener();
		} else {
			$('#contacts-listener-container').find('.contacts-inner-div').html(this.contactsListView.render().el);
			$('#bulk-actions').css('display', 'none');
			$('#bulk-select').css('display', 'none');
			$('#bulk-action-btns > button').addClass("disabled");
			if($("#select_grid_contacts1"))
			{
				$("#select_grid_contacts1").attr("checked", false);
			}
			CONTACTS_HARD_RELOAD = true;
			
		}
		$(".active").removeClass("active");
		$("#contactsmenu").addClass("active");
		$('[data-toggle="tooltip"]').tooltip();

	
		


	},
	
	/**
	 * Fetches all the duplicate contacts (persons) for the given
	 * contact and shows as list
	 */
	duplicateContacts : function(contact_id)
	{

		dup_contacts1_array.length = 0;
		var max_contacts_count = 20;
		var individual_tag_name = "tr";

		// Default url for contacts route
		this.contact_id = contact_id;
		var url = '/core/api/search/duplicate-contacts/' + contact_id;
		var collection_is_reverse = false;
		template_key = "duplicate-contacts";

		if (App_Contacts.contactDetailView === undefined)
		{
			Backbone.history.navigate("contact/" + contact_id, { trigger : true });
			return;
		}

		/*
		 * cursor and page_size options are taken to activate
		 * infiniScroll
		 */
		this.duplicateContactsListView = new Contacts_Events_Collection_View({ url : url, templateKey : template_key, individual_tag_name : 'tr', cursor : true,
			page_size : 25, sort_collection : collection_is_reverse, slateKey : null, postRenderCallback : function(el)
			{
				// this.duplicateContactsListView.collection.forEach(function(model,
				// index) {
				// model.set('master_id',contact_id);
				// });
			} });

		// Contacts are fetched when the app loads in the initialize
		this.duplicateContactsListView.collection.fetch();

		$('#content').html(this.duplicateContactsListView.render().el);

		$(".active").removeClass("active");
		$("#contactsmenu").addClass("active");

	},

	/**
	 * Merges duplicate contacts(persons) into a single master contact,
	 * at a time we can merge 3 contacts
	 */
	mergeContacts : function()
	{
		
		
		var id = dup_contacts1_array[0];

		var max_contacts_count = 20;
		var individual_tag_name = "table";

		var collection_is_reverse = false;
		template_key = "merge-contacts";

		if (App_Contacts.duplicateContactsListView == undefined || dup_contacts1_array.length<1)
		{
			Backbone.history.navigate("contacts", { trigger : true });
			return;
		}
		var contacts = [];
		for (var i = 0; i < dup_contacts1_array.length; i++)
		{
			var contact_id = Number(dup_contacts1_array[i]);
			var data = App_Contacts.duplicateContactsListView.collection.where({ id : contact_id });
			var temp = contacts.concat(data);
			contacts = temp;
		}
		var bigObject = {};
		var master_record = App_Contacts.contactDetailView.model.toJSON();
		console.log(master_record);
//		bigObject['custom_fields'] = get_custom_fields();
		var objects = []
		var length = 0;
		objects[0] = master_record;
		for (i = 0; i < contacts.length; i++)
		{
			objects[i + 1] = contacts[i].toJSON();
			length++;
		}
		bigObject["contacts"] = objects;
		bigObject["length"] = length;
		
		// Contact Edit - take him to continue-contact form
		add_custom_fields_to_form(bigObject, function(contact)
		{
			this.mergeContactsView = new Contact_Details_Model_Events({ template : template_key, data : bigObject, postRenderCallback : function(el)
			{
				// g_id_array.length = 0;
			} });

			$('#content').html(this.mergeContactsView.render(true).el);
			$( window ).scrollTop( 0 );
			$(".active").removeClass("active");
			$("#contactsmenu").addClass("active");

		}, master_record.type);	
	},

	/**
	 * Shows a contact in its detail view by taking the contact from
	 * contacts list view, if list view is defined and contains the
	 * contact, otherwise downloads the contact from server side based
	 * on its id. Loads timeline, widgets, map and stars (to rate) from
	 * postRenderCallback of its Base_Model_View.
	 * 
	 */
	contactDetails : function(id, contact)
	{
		$('[data-toggle="tooltip"]').tooltip();


		//If call campaign is running then show the campaign
		if(CALL_CAMPAIGN.last_clicked == "start-bulk-campaign"){
			startCallCampaign(CALL_CAMPAIGN.contact_id_list);
			CALL_CAMPAIGN.last_clicked = "";
		} 
		//Removed previous contact timeline nodes from the queue, if existed
		if(timeline_collection_view && timeline_collection_view.queue)
		{
			timeline_collection_view.queue.pop();
		}
		
		//For getting custom fields
		if(App_Contacts.customFieldsList == null || App_Contacts.customFieldsList == undefined){
			App_Contacts.customFieldsList = new Contacts_Events_Collection_View({ url : '/core/api/custom-fields/position', sort_collection : false, restKey : "customFieldDefs",
				templateKey : "admin-settings-customfields", individual_tag_name : 'tr' });
			App_Contacts.customFieldsList.collection.fetch();
		}

		var contact_collection;
		

		if (!contact && this.contactDetailView && this.contactDetailView.model != null)
		{
			//contact_collection = this.contactDetailView;

			if (id == this.contactDetailView.model.toJSON()['id'])
			{
				App_Contacts.contactDetails(id, this.contactDetailView.model);
				
				return;
			}
		}

		// If user refreshes the contacts detail view page directly - we
		// should load from the model
		if (!contact)
			if (!this.contactsListView || this.contactsListView.collection.length == 0 || this.contactsListView.collection.get(id) == null)
			{

				console.log("Downloading contact");

				// Download
				var contact_details_model = Backbone.Model.extend({ url : function()
				{
					return '/core/api/contacts/' + this.id;
				} });

				var model = new contact_details_model();
				model.id = id;
				model.fetch({ success : function(data)
				{
					if(data.type == 'COMPANY'){
						App_Companies.companyDetails(id);
						return;
					}
					// Call Contact Details again
					App_Contacts.contactDetails(id, model);

				}, 
				error: function(data, response)
				{
					if(response && response.status == '403')

						$("#content").html ("<div class='well'><div class='alert bg-white text-center'><div class='slate-content p-md text'><h4 style='opacity:0.8;margin-bottom:5px!important;'> Sorry, you do not have permission to view this Contact.</h4><div class='text'style='opacity:0.6;'>Please contact your admin or account owner to enable this option.</div></div></div></div>");

				}
				});
				
				return;
			}

		// If not downloaded fresh during refresh - read from collection
		if (!contact)
		{
			// Set url to core/api/contacts/list (If filters are loaded
			// contacts url is changed so set it back)

			//this.contactsListView.collection.url = "core/api/contacts/list";
			contact = this.contactsListView.collection.get(id);
		}
		
		// Assigning contact collection
		if(this.contactsListView && this.contactsListView.collection)
			contact_collection = this.contactsListView.collection;

		add_recent_view(contact);

		// If contact is of type company , go to company details page
		if (contact.get('type') == 'COMPANY')
		{			
			Backbone.history.navigate( "company/"+id, { trigger : true });
			return;
		}

		this.contactDetailView = new Contact_Details_Model_Events({ model : contact, isNew : true, template : "contact-detail", postRenderCallback : function(el)
		{
			
			$(el).on('click',function(el){
				var newId = el.target.id;
				if(newId == "contact_name")
					return ;
				if(newId == "contactName")
					return ;
				if(newId == 'Contact-input-firstname' || newId == 'Contact-input-lastname')
					return;
				
					inlineNameChange(el,newId);
				
			});
		
			//mobile tabs
			 $('.content-tabs').tabCollapse(); 

			//$("#mobile-menu-settings").trigger('click');
			// Clone contact model, to avoid render and post-render fell
			// in to
			// loop while changing attributes of contact
			if(canEditCurrentContact())
			{
				var recentViewedTime = new Backbone.Model();
				recentViewedTime.url = "core/api/contacts/viewed-at/" + contact.get('id');
				recentViewedTime.save();
			}

			if (App_Contacts.contactsListView && App_Contacts.contactsListView.collection && App_Contacts.contactsListView.collection.get(id))
				App_Contacts.contactsListView.collection.get(id).attributes = contact.attributes;

			load_contact_tab(el, contact.toJSON());

			loadWidgets(el, contact.toJSON());
			
			
			
			/*
			 * // To get QR code and download Vcard
			 * $.get('/core/api/VCard/' + contact.toJSON().id,
			 * function(data){ console.log("Vcard string");
			 * console.log(data); var url =
			 * 'https://chart.googleapis.com/chart?cht=qr&chs=180x180&chld=0&choe=UTF-8&chl=' +
			 * encodeURIComponent(data); $("#qrcode", el).html('<img
			 * src="' + url + '" id="qr_code" alt="QR Code"/>');
			 * //$("#qrcode", el).html('<img
			 * style="display:inline-block!important;" src="' + url + '"
			 * id="qr_code" alt="QR Code" data="' + data + '"
			 * onload="qr_load();"/>'); $("#qrcode", el).prepend('<span
			 * style="padding: 8% 0%;margin-right: 2px;float:right;"
			 * id="downloadify"></span>'); });
			 */

			starify(el);

			show_map(el);

			// To navigate between contacts details
			if (contact_collection != null)
				contact_detail_view_navigation(id, App_Contacts.contactsListView, el);

			//fill_owners(el, contact.toJSON());
			start_tour("contact-details", el);
			
			// this part is to remove the progress cursor from contact number shown in contact detail page
			if(default_call_option.callOption.length == 0){
				$(".contact-make-call",el).removeClass("c-progress");
				$(".contact-make-skype-call",el).removeClass("c-progress");
			}
			} 
			
		});

		var el = this.contactDetailView.render(true).el;
		$(el).find('.content-tabs').tabCollapse(); 

		$('#content').html(el);
	/*	if($(".toggle-contact-image .contact-delete-option").length == 0) {
			$(".toggle-contact-image .contact-edit-option").css("margin-left","10px");
			}*/
		// Check updates in the contact.
		checkContactUpdated();


		if(_agile_get_prefs('MAP_VIEW')=="disabled")
				$("#map_view_action").html("<i class='icon-plus text-sm c-p' title='Show map' id='enable_map_view'></i>");
		else
				$("#map_view_action").html("<i class='icon-minus text-sm c-p' title='Hide map' id='disable_map_view'></i>");


		//contactInnerTabsInvoke(el);

	},

	/**
	 * Takes the contact to continue contact form to edit it. If
	 * attempts to edit a contact without defining contact detail view,
	 * navigates to contacts page. Gets the contact to edit, from its
	 * list view or its custom view, if not found in both downloads from
	 * server side (Contact database).
	 */
	editContact : function(contact)
	{

		// Takes back to contacts if contacts detailview is not defined
		if (!this.contactDetailView || !this.contactDetailView.model.id)
		{
			this.navigate("contacts", { trigger : true });
			return;
		}

		// If contact detail view is defined the get current contact
		// model id
		var id = this.contactDetailView.model.id;

		if (this.contactDetailView && this.contactDetailView.model.id)
		{
			contact = this.contactDetailView.model.toJSON();
		}

		// If contact list is defined the get contact to edit from the
		// list
		else if (this.contactsListView && this.contactsListView.collection && this.contactsListView.collection.get(id))
		{
			contact = this.contactsListView.collection.get(id).toJSON();
		}

		// If contacts list view is not defined happens when in
		// custom-view route or in filter
		// then get contact from contact custom view
		else if (this.contact_custom_view && this.contact_custom_view.collection && this.contact_custom_view.collection.get(id))
		{
			contact = this.contact_custom_view.collection.get(id).toJSON();
		}

		// If contact list view and custom view list is not defined then
		// download contact
		else if (!contact)
		{
			// Download contact for edit since list is not defined
			var contact_details_model = Backbone.Model.extend({ url : function()
			{
				return '/core/api/contacts/' + id;
			} });

			var model = new contact_details_model();

			model.fetch({ success : function(contact)
			{

				// Call Contact edit again with downloaded contact
				// details
				App_Contacts.editContact(contact.toJSON());
			} });

			return;
		}
		if(contact.contact_company_id){							
			$.ajax({
				url : "/core/api/contacts/"+contact.contact_company_id ,
				type: 'GET',
				dataType: 'json',
				success: function(company){
					if(company){
						console.log(company);
						contact_company = company ;
					}
				}
			});
		}

		// Contact Edit - take him to continue-contact form
		add_custom_fields_to_form(contact, function(contact)
		{

			if (contact.type == 'COMPANY')
				deserialize_contact(contact, 'continue-company');
			else
				deserialize_contact(contact, 'continue-contact');
		}, contact.type);
	},

	/**
	 * Creates a duplicate contact to the existing one. Deletes the
	 * email (as well as it has to be unique) and id (to create new one)
	 * of the existing contact and saves it. Also takes the duplicate
	 * contact to continue contact form to edit it.
	 */
	duplicateContact : function()
	{

		// Takes back to contacts if contacts detail view is not defined
		if (!this.contactDetailView || !this.contactDetailView.model.id || !this.contactsListView || this.contactsListView.collection.length == 0)
		{
			this.navigate("contacts", { trigger : true });
			return;
		}

		// Contact Duplicate
		var contact = this.contactDetailView.model
		var orginal_json = contact.toJSON();
		var json = $.extend(true, {}, orginal_json);

		// Delete email as well as it has to be unique
		json = delete_contact_property(json, 'email');
		delete json.id;

		var contactDuplicate = new Backbone.Model();
		contactDuplicate.url = 'core/api/contacts';
		contactDuplicate.save(json, { success : function(data)
		{
			add_custom_fields_to_form(data.toJSON(), function(contact)
			{

				deserialize_contact(contact, 'continue-contact');

			});
		} });
	},

	/**
	 * Navigates the contact (of type company) to continue company form
	 */
	/*
	 * continueCompany: function () { // commented here to avoid the
	 * creation of multiple entities var model =
	 * serialize_and_save_continue_contact(undefined, 'companyForm',
	 * 'companyModal', true, false, '#continue-company'); },
	 */

	/**
	 * Imports contacts from a csv file and then uploads all the
	 * contacts to database
	 */
	importContacts : function()
	{

		App_Contacts.importContacts = new CONTACTS_IMPORT_VIEW({
			url : 'core/api/upload/status/CONTACTS',
			template : "import-contacts",
			postRenderCallback: function(el)
			{
				initializeImportEvents("import-contacts-event-listener");

				if(import_tab_Id) {
					 $('#import-tabs-content a[href="#'+import_tab_Id+'"]', el).tab('show');
					 import_tab_Id=undefined;
				}
				else{
					$('#import-tabs-content a[href="#csv-tab"]', el).tab('show');
				}
			}

		});

		$('#content').html(App_Contacts.importContacts.render().el);
		
/*
$('#content').html('<div id="import-contacts-event-listener"></div>');
		getTemplate("import-contacts", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$('#import-contacts-event-listener').html($(template_ui));	
			initializeImportEvents('import-contacts-event-listener');
			if(import_tab_Id){
				 $('#import-tabs-content a[href="#'+import_tab_Id+'"]').tab('show');
				 import_tab_Id=undefined;
			}
			else{
				$('#import-tabs-content a[href="#csv-tab"]').tab('show');
			}

		}, "#import-contacts-event-listener");      
		*/ 
	},
	

	/**
	 * Subscribes a contact to a campaign. Loads the related template
	 * and triggers the custom event "fill_campaigns_contact" to show
	 * the campaigns drop down list.
	 */
	addContactToCampaign : function()
	{

		getTemplate("contact-detail-campaign", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$("#content").html($(template_ui));	
			$('body').trigger('fill_campaigns_contact');

		}, "#content"); 

		
	},

	/**
	 * Shows a send email form with some prefilled values (email - from,
	 * to and templates etc..). To prefill the fields the function
	 * populate_send_email_details is called from the
	 * postRenderCallback.
	 */
	sendEmail : function(id, subject, body, cc, bcc, force_reload)
	{

		// Check old hash and call same function

		if(!force_reload && Agile_Old_Hash && Agile_Old_Hash.indexOf("contact/") > -1)
		{
              var contactId = Agile_Old_Hash.split("/")[1];

             
             // Gets the domain name from the contacts of the custom fields.
               var currentContactJson = App_Contacts.contactDetailView.model.toJSON();
               if(contactId == currentContactJson.id){
					var properties = currentContactJson.properties;
					var email;
					$.each(properties,function(id, obj){
						if(obj.name == "email"){
							email = obj.value;
							return false;
						}
					});
			   }
              
              this.sendEmail(email, subject, body, cc, bcc, true);
              return;
		}
		var that=this;
		sendMail(id,subject,body,cc,bcc,that);

		var options = {
		"+ Add new" : "verify_email"
		};
		
		fetchAndFillSelect(
			'core/api/account-prefs/verified-emails/all',
			"email",
			"email",
			undefined,
			options,
			$('#from_email'),
			"prepend",
			function($select, data) {
			
			var ownerEmail = $select.find('option[value = \"'+CURRENT_DOMAIN_USER.email+'\"]').val();
				
				if(typeof(ownerEmail) == "undefined")
				{
				$select
						.find("option:first")
						.before(
								"<option value="+CURRENT_DOMAIN_USER.email+">"+CURRENT_DOMAIN_USER.email+"</option>");

					$select.val(CURRENT_DOMAIN_USER.email).attr("selected", "selected");
				}
				else
					$select.val(CURRENT_DOMAIN_USER.email).attr("selected", "selected");
				rearrange_from_email_options($select, data);
			});
	},

	sendEmailCustom : function(id, subject, body, cc, bcc,custom_view)
	{
		var that=this.contact_popover;
		insidePopover=false;
		sendMail(id,subject,body,cc,bcc,that,true);
	
	},
	
	/**
	 * Custom views, its not called through router, but by cookies
	 */
	// Id = custom-view-id, view_data = custom view data if already
	// availabel, url = filter url if there is any filter
	customView : function(id, view_data, url, tag_id, is_lhs_filter, postData)
	{
		console.log("customView");

		// Load contact detail js file
		tpl_directory.loadTemplates(["contact-detail"], function () {});

		SELECT_ALL = false;
		App_Contacts.tag_id = tag_id;

		// If url is not defined set defult url to contacts
		if (!url)
		{
			url = "core/api/contacts/list";
		}
		

		if (CONTACTS_HARD_RELOAD == true)
		{
			this.contact_custom_view = undefined;
			CONTACTS_HARD_RELOAD = false;
			view_data = undefined;
			// ts.contactViewModel = undefined;
		}

		// If id is defined get the respective custom view object
		if (!view_data)
		{
			// Once view id fetched we use it without fetching it.
			if (!App_Contacts.contactViewModel)
			{
				var view = new Backbone.Model();
				view.url = 'core/api/contact-view-prefs';
				view.fetch({ success : function(data)
				{
					// If custom view object is empty i.e., custom view
					// is deleted.
					// custom view cookie is eraised and default view is
					// shown
					if ($.isEmptyObject(data.toJSON()))
					{
						// Erase custom_view cookie, since
						// view object with given id is not available
						_agile_delete_prefs("contact_view");

						// Loads default contact view
						App_Contacts.contacts();
						return;
					}
					
					App_Contacts.contactViewModel = data.toJSON();
					App_Contacts.customView(undefined, App_Contacts.contactViewModel, url, tag_id, is_lhs_filter);

				} });
				return;
			}

			view_data = App_Contacts.contactViewModel;

		}
	

		// If defined
		if (this.contact_custom_view && this.contact_custom_view.collection.url == url)
		{
			var el = App_Contacts.contact_custom_view.render(true).el;
			$('#content').html('<div id="contacts-listener-container"></div>');
			$('#contacts-listener-container').html(el);
			$("#contacts-view-options").css( 'pointer-events', 'auto' );
			//loadPortlets('Contacts',el);
			if(agile_is_mobile_browser()) {
			// $('#contacts-table tbody tr .icon-append-mobile',el).after('<td><div class="text-md text-muted m-t contact-list-mobile"><i class="fa fa-angle-right"></i></div></td>');
			}
			

			contactFiltersListeners();
			contactListener();

			if (_agile_get_prefs('company_filter'))
				$('#contact-heading', el).text('Companies');

			//setup_tags(el);
			//pieTags(el);

			setupViews(el, view_data.name);
			setupContactFilterList(el, tag_id);
			setUpContactView(el);
			//loadPortlets('Contacts',el);


			$(".active").removeClass("active"); // Activate Contacts
												// Navbar tab
			$("#contactsmenu").addClass("active");
			 App_Contacts.contactsListView.delegateEvents();
			return;
		}

		var slateKey = getContactPadcontentKey(url);
		var sort_key = _agile_get_prefs("sort_by_name");
		if(!sort_key || sort_key == null) {
			sort_key = '-created_time';
			// Saves Sort By in cookie
			_agile_set_prefs('sort_by_name', sort_key);
		}
		var template_key = "contacts-custom-view";
		var individual_tag_name='tr';
		var custom_scrollable_element=null;

		// Checks if user is using custom view. It check for grid view
		if (_agile_get_prefs("agile_contact_view"))
		{
			template_key = "contacts-grid";
			individual_tag_name = "div";
			custom_scrollable_element="#contacts-grid-model-list";
		}
		//if directly called the method, i.e on click of custom view link, 
		//the url will be updated if any filter conditions are selected.
		if(_agile_get_prefs('dynamic_contact_filter')) {
			url = 'core/api/filters/filter/dynamic-filter';
			postData=_agile_get_prefs('dynamic_contact_filter');
		}
		if(is_lhs_filter) {
			template_key = "contacts-custom-view-table";

			if (_agile_get_prefs("agile_contact_view"))
		    {
			template_key = "contacts-grid-table";
			individual_tag_name = "div";
			custom_scrollable_element="#contacts-grid-table-model-list";
		    }
		}	
		that = this ;
		this.contact_custom_view = new Contacts_Events_Collection_View({ url : url, restKey : "contact", modelData : view_data, global_sort_key : sort_key,
			templateKey : template_key,custom_scrollable_element:custom_scrollable_element, individual_tag_name : individual_tag_name, slateKey : slateKey, cursor : true, request_method : 'POST', post_data: {'filterJson': postData}, page_size : 25, sort_collection : false,
			postRenderCallback : function(el, collection)
			{
				
				App_Contacts.contactsListView = App_Contacts.contact_custom_view;
				contactListener();

				
				// To set chats and view when contacts are fetch by
				// infiniscroll
				//setup_tags(el);

				//pieTags(el);
				setupViews(el, view_data.name);
				$("#contacts-view-options").css( 'pointer-events', 'auto' );

				// show list of filters dropdown in contacts list
				setupContactFilterList(el, App_Contacts.tag_id);

				if(tag_id)
				setUpContactView(el,true);
			    else
				setUpContactView(el);

				// Render Contact fields
				setupContactFields(el);

				abortCountQueryCall();
				

				if(is_lhs_filter) {

					if(collection.models.length > 0 && !collection.models[0].get("count")){
						// Call to get Count 
						getAndUpdateCollectionCount("contacts", el);
					} else {
						var count = 0;
						if(collection.models.length > 0) {
							count = collection.models[0].attributes.count || collection.models.length;
						}
						var count_message;
						if (count > 9999 && (_agile_get_prefs('contact_filter') || _agile_get_prefs('dynamic_contact_filter')))
							count_message = "<small> (" + 10000 + "+ Total) </small>" + '<span style="vertical-align: text-top; margin-left: 0px">' + '<img border="0" src="'+ updateImageS3Path("/img/help.png") +'"' + 'style="height: 10px; vertical-align: middle" rel="popover"' + 'data-placement="bottom" data-title="Lead Score"' + 'data-content="Looks like there are over 10,000 results. Sorry we can\'t give you a precise number in such cases."' + 'id="element" data-trigger="hover">' + '</span>';
						else
							count_message = "<small> (" + count + " Total) </small>";
						$('#contacts-count').html(count_message);
					}

					
				} else {	

					if(collection.models.length > 0 && !collection.models[0].get("count")){
						// Call to get Count 
						getAndUpdateCollectionCount("contacts", el);						
					}

					setupLhsFilters(el);
					loadPortlets('Contacts',el);
				}

				if(agile_is_mobile_browser()) {
				
					var $nextEle = $('<td><div class="text-md text-muted m-t contact-list-mobile"><i class="fa fa-angle-right"></i></div></td>');
					// $('#contacts-table tbody tr .icon-append-mobile',el).after($nextEle);
				}
				

			}, appendItemCallback: function(el){
				if(agile_is_mobile_browser()) {
					// $('#contacts-table tbody tr .icon-append-mobile',el).after('<td><div class="text-md text-muted m-t contact-list-mobile"><i class="fa fa-angle-right"></i></div></td>');
				}
			}, });

		var _that = this;
		App_Contacts.contactDateFields = CONTACTS_DATE_FIELDS;

		App_Contacts.contactContactTypeFields = CONTACTS_CONTACT_TYPE_FIELDS;
		App_Contacts.contactCompanyTypeFields = CONTACTS_COMPANY_TYPE_FIELDS;

		if(!App_Contacts.contactDateFields){
				$.getJSON("core/api/custom-fields/type/scope?type=DATE&scope=CONTACT", function(customDatefields)
				{
					App_Contacts.contactDateFields = customDatefields;
					
					// Defines appendItem for custom view
					_that.contact_custom_view.appendItem = function(base_model){
						contactTableView(base_model,App_Contacts.contactDateFields,this,App_Contacts.contactContactTypeFields,App_Contacts.contactCompanyTypeFields);
					};
					// Fetch collection
					_that.contact_custom_view.collection.fetch();
					contactListener();
					
				});

		} else{

				// Defines appendItem for custom view
				_that.contact_custom_view.appendItem = function(base_model){
					contactTableView(base_model,App_Contacts.contactDateFields,this,App_Contacts.contactContactTypeFields,App_Contacts.contactCompanyTypeFields);
				};
				// Fetch collection
				_that.contact_custom_view.collection.fetch();
		}

		if(!is_lhs_filter) {
			$('#content').html('<div id="contacts-listener-container"></div>');
			$('#contacts-listener-container').html(this.contact_custom_view.el);
			contactFiltersListeners();
			//loadPortlets('Contacts',el);
		} else {
			$('#contacts-listener-container').find('.contacts-inner-div').html(this.contact_custom_view.el);
			$('#bulk-actions').css('display', 'none');
			$('#bulk-select').css('display', 'none');
			$('#bulk-action-btns > button').addClass("disabled");
			if($("#select_grid_contacts1"))
			{
				$("#select_grid_contacts1").attr("checked", false);
			}
			CONTACTS_HARD_RELOAD = true;
		}
			
		// Activate Contacts Navbar tab
		$(".active").removeClass("active");
		$("#contactsmenu").addClass("active");
	
	},
	
	addLead : function(first, last){
		$("#personModal").on("show.bs.modal", function(){
			$(this).find("#fname").val(first);
			$(this).find("#lname").val(last);
		});
		$("#personModal").modal();
	},
	
	addLeadDirectly : function(first, last,mob){
		$("#personModal").on("show.bs.modal", function(){
			$(this).find("#fname").val(first);
			$(this).find("#lname").val(last);
			$(this).find("#phone").val(mob);
		});
		$("#personModal").modal();
	},

	addMobLead : function(mob){
		$("#personModal").on("show.bs.modal", function(){
			$(this).find("#phone").val(mob);
		});
		$("#personModal").modal();
	},
	
	addContact : function(){
		$.getJSON("core/api/custom-fields/scope?scope=CONTACT", function(data)
		{
			if(data.length > 0){
				var json = {custom_fields:data,properties:[]};
				getTemplate("continue-contact", json, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$("#content").html($(template_ui));	
					// Add placeholder and date picker to date custom fields
					$('.date_input').attr("placeholder", "Select Date");

					$('.date_input').datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY});

					// To set typeahead for tags
					setup_tags_typeahead();

					// Iterates through properties and ui clones
					
					var fxn_display_company = function(data, item)
					{
						$("#content [name='contact_company_id']")
								.html(
										'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + data + '"><span><a class="text-white m-r-xs" href="#contact/' + data + '">' + item + '</a><a class="close" id="remove_tag">&times</a></span></li>');
						$("#content #contact_company").hide();
						if(data){							
							$.ajax({
								url : "/core/api/contacts/"+data,
								type: 'GET',
								dataType: 'json',
								success: function(company){
									if(company){
										console.log(company);
										contact_company = company ;
										var prop = null;
										$.each(contact_company.properties , function(){
											if(this.name == "address" && this.subtype == "office")
												prop = JSON.parse(this.value);
										});
										if(prop){
											$("#content .address-type").val("office");
											if(prop.address)
												$("#content #address").val(prop.address);
											if(prop.city)
												$("#content #city").val(prop.city);
											if(prop.state)
												$("#content #state").val(prop.state);
											if(prop.zip)
												$("#content #zip").val(prop.zip);
											if(prop.country)
												$("#content #country").val(prop.country);
										}

									}

								}
							});
						}
					}
					agile_type_ahead("contact_company", $('#content'), contacts_typeahead, fxn_display_company, 'type=COMPANY', '<b>No Results</b> <br/> Will add a new one');

					$('.contact_input', $('#content')).each(function(){
						agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), $('#content')), contacts_typeahead, undefined, 'type=PERSON');
					});

					$('.company_input', $('#content')).each(function(){
						agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), $('#content')), contacts_typeahead, undefined, 'type=COMPANY');
					});

				}, "#content"); 

					
			}else{
				Backbone.history.navigate("contacts" , {trigger: true});
				$("#personModal").modal("show");
			}		
					
		});

	},
	
		callcontacts : function()
	{
		
		$(".active").removeClass("active");
		var total_count = CALL_CAMPAIGN.total_count;
		var callSetting = {};
		callSetting['total_count'] = total_count;
		callSetting['time']=[10,20,30,40,50,60];
		
		getTemplate("call-campaign-setting", callSetting, undefined, function(template_ui){
			if(!template_ui)
				  return;
			  
			$(".butterbar").hide();
			$("#content").html($(template_ui));	
			$('[data-toggle="tooltip"]').tooltip();

		}, "#content"); 



	},

	});


function getAndUpdateCollectionCount(type, el, countFetchURL){

		console.log("countFetchURL = " + countFetchURL);

		var count_message = "";
    	$("#contacts-count").html(count_message);

    	var countURL = "";
    	if(type == "contacts")
    		countURL = App_Contacts.contactsListView.options.url + "/count";

    	else if(type == "workflows")
    		countURL = countFetchURL + "/count";
     	else
    		countURL = App_Companies.companiesListView.options.url + "/count";

    	// Hide bulk action checkbox
    	$(".thead_check", el).closest("label").css("visibility", "hidden");

    	$("table", el).addClass("hide-head-checkbox");

    	abortCountQueryCall();

    	Count_XHR_Call = $.get(countURL, {}, function(data){
    		        data = parseInt(data);
    		        
                    count_message = "<small> (" + data + " Total) </small>";
					$('#contacts-count').html(count_message);

					if(type == "workflows")
						  $("span.badge.bg-primary", el).html(data);

					// Reset collection
					if(type == "contacts")
						App_Contacts.contactsListView.collection.models[0].set("count", data, {silent: true});
					else if(type == "workflows"){
						if(App_Workflows.active_subscribers_collection && App_Workflows.active_subscribers_collection.collection && App_Workflows.active_subscribers_collection.collection.length > 0)
							App_Workflows.active_subscribers_collection.collection.models[0].set("count", data, {silent: true});
					} else{
						App_Companies.companiesListView.collection.models[0].set("count", data, {silent: true});
					}

					$(".thead_check", el).closest("label").css("visibility", "visible");
					$("table", el).removeClass("hide-head-checkbox");	
    	});
}

function abortCountQueryCall(){
	try{
		Count_XHR_Call.abort();
	}catch(e){}
}

function sendMail(id,subject,body,cc,bcc,that,custom_view)
{
	var model = {};
		
		if(!canSendEmails(1))
		{
			var pendingEmails = getPendingEmails();
			window.history.back();
			var title = "Emails Limit";
			var yes = "";
			var no = "Ok"
			var upgrade_link =  'Please <a  href="#subscribe" class="action text-info" data-dismiss="modal" subscribe="subscribe" action="deny"> upgrade </a> your email subscription.';
			var emialErrormsg = '<div class="m-t-xs">To continue sending emails from your account, please<a href="#subscribe" class="action text-info" data-dismiss="modal" subscribe="subscribe" action="deny"> purchase </a>more.</div>';
			var message = "<div>Sorry, your emails quota has been utilized.</div>" + emialErrormsg;
			
			showModalConfirmation(title, 
					message, 
					""
				, function(element){
						
					// No callback
						Backbone.history.navigate( "subscribe", { trigger : true });
						return;
					},
					function(element){
						
					}, yes, no);
			return;
		}

		if(custom_view){
			model=that.toJSON();
		}
		else{
		// Takes back to contacts if contacts detail view is not defined
		if (that.contactDetailView && !that.contactDetailView.model.get(id))
		{
			// Show the email form with the email prefilled from the curtrent contact
			model = that.contactDetailView.model.toJSON();
		}
		
		if(App_Companies.companyDetailView){
			var compEmailTemp = getPropertyValue(App_Companies.companyDetailView.model.toJSON().properties,'email');
			if(id && id == compEmailTemp){
				model = App_Companies.companyDetailView.model.toJSON();
			}
		}
	}
	
		var el = $("#content").html('<div id="send-email-listener-container"></div>').find('#send-email-listener-container').html(getTemplate("send-email", model));
		
		// Call setupTypeAhead to get contacts
		agile_type_ahead("to", el, contacts_typeahead, null, null, "email-search", null, true, null, true);


		$("#content").html('<div id="send-email-listener-container"></div>');
		//var that = this;
		getTemplate("send-email", model, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var el = $("#send-email-listener-container").html($(template_ui));

			// Call setupTypeAhead to get contacts
			agile_type_ahead("to", el, contacts_typeahead, null, null, "email-search", null, true, null, true);

			agile_type_ahead("email_cc", el, contacts_typeahead, null, null, "email-search", null, true, null, true);

			agile_type_ahead("email_bcc", el, contacts_typeahead, null, null, "email-search", null, true, null, true);

			// To append name to email
			if (id)
			{
				var name;

				// For Reply all, id may contains multiple emails. If contains multiple, skip
				if (model && id.indexOf(',') == -1)
				{
					if (model.type == "PERSON")
					{

						var first_name = getPropertyValue(model.properties, "first_name");
						var last_name = getPropertyValue(model.properties, "last_name");

						if (first_name || last_name)
						{
							name = first_name ? first_name : "";
							name = (name + " " + (last_name ? last_name : "")).trim();
						}
					}
					else
					{
						var company_name = getPropertyValue(model.properties, "name");
						name = (company_name ? company_name : "").trim();
					}
				}

				if (name && name.length)
				{
					var data = id;

					// If already appended with name, skip
					if(id.indexOf('<') == -1 && id.indexOf('>') == -1)
						data = name + ' <' + id.trim() + '>';

					$('#to', el)
							.closest("div.controls")
							.find(".tags")
							.append(
									'<li class="tag  btn btn-xs btn-primary m-r-xs inline-block" data="' + data + '"><a href="#contact/' + model.id + '">' + name + '</a><a class="close" id="remove_tag">&times</a></li>');
				}
				else
					$("#emailForm", el).find('input[name="to"]').val(id);
			}
			else
				$("#emailForm", el).find('input[name="to"]').val('');

			// Checks Zoomifier tag for contact
			if (checkTagAgile("Zoomifier") && that.contactDetailView)
			{
				// Appends zoomifier link to attach their documents.
				head.js(LIB_PATH + 'lib/zoomifier.contentpicker.min.js', function()
				{
					$("#emailForm", el).find('textarea[name="body"]').closest(".controls")
							.append('<div><a style="cursor:pointer;" onclick="Javascript:loadZoomifierDocSelector();"><i class="icon-plus-sign"></i> Attach Zoomifier Doc</a></div>');
				});
			}

			// Populate from address and templates
			populate_send_email_details(el);
			
			if(subject)
				$("#emailForm",el).find('input[name="subject"]').val(subject);
			
			if(cc)
			{
				$("#emailForm",el).find('#email_cc').closest('.control-group').show();
				$("#emailForm",el).find('input[name="email_cc"]').val(cc);
			}
			
			if(bcc)
			{
				$("#emailForm",el).find('#email_bcc').closest('.control-group').show();
				$("#emailForm",el).find('input[name="email_bcc"]').val(bcc);
			}
			
			// Setup HTML Editor
			if(id)
			{		
				setupTinyMCEEditor('textarea#email-body', false, undefined, function(){
					
						if(!body)
							body = '';
					
						// Add tinymce content
						set_tinymce_content('email-body', body);
						
						// Register focus
						register_focus_on_tinymce('email-body');
				
					});
			}
			else
			{	
				setupTinyMCEEditor('textarea#email-body', true, undefined, function(){

						if(!body)
							body = '';
					
						// Add tinymce content
						set_tinymce_content('email-body', body);
						
						// Register focus
						register_focus_on_tinymce('email-body')
				});
			}
			
			initializeSendEmailListeners();
			sendEmailAttachmentListeners("send-email-listener-container");
			
			
		}, "#send-email-listener-container"); 
}
var DashboardsRouter = Backbone.Router.extend({
	
	routes : {
		

		/* Dashboard */
		
		"add-dashboard" : "addDashboard",

		"dashboards" : "Dashboards",

		"edit-dashboard/:id" : "editDashboard"
		
	},
	
	/**
	 * Adds new dashboard
	 */
	addDashboard : function()
	{
		$("#content").html(LOADING_HTML);
		var that = this;
		var dashboard_view = new Base_Model_View({ url : 'core/api/dashboards', template : "dashboard-add", isNew : "true",
			postRenderCallback : function(el)
			{
								
			},
			saveCallback : function(data)
			{
				if(that.dashboards_collection_view && data) {
					that.dashboards_collection_view.collection.add(new BaseModel(data));
				}
				if(data) {
					CURRENT_USER_DASHBOARDS.push(data);
				}
				that.navigate("dashboards", { trigger : true });
			} });
		$('#content').html(dashboard_view.render().el);		
	},

	/**
	 * Fetch all dashboards
	 */
	Dashboards : function()
	{
		$("#content").html(LOADING_HTML);
		if(!this.dashboards_collection_view) {
			this.dashboards_collection_view = new Base_Collection_View({ url : 'core/api/dashboards', templateKey : "dashboard", isNew : "true", window : "dashboards",
				individual_tag_name : 'tr', sortKey : 'name',  
				postRenderCallback : function(el)
				{
					head.js('lib/jquery.timeago.js', function()
					{
						$(".time-ago", el).timeago();
					});					
				} });
			this.dashboards_collection_view.collection.fetch();
			$('#content').html(this.dashboards_collection_view.render().el);
		}else {
			$('#content').html(this.dashboards_collection_view.render(true).el);
		}
				
	},

	/**
	 * Edits dashboard created
	 */
	editDashboard : function(id)
	{
		if (!this.dashboards_collection_view || this.dashboards_collection_view.collection.length == 0 || this.dashboards_collection_view.collection.get(id) == null)
		{
			this.navigate("dashboards", { trigger : true });
			return;
		}

		$("#content").html(LOADING_HTML);
		var that = this;
		var dashboard = this.dashboards_collection_view.collection.get(id);
		var dashboard_json = dashboard.toJSON();
		var dashboard_view = new Base_Model_View({ url : 'core/api/dashboards', model : dashboard, template : "dashboard-add", 
			postRenderCallback : function(el)
			{
				deserializeForm(dashboard_json, $("#dashboardAddForm"));
			},
			saveCallback : function(data)
			{
				if(that.dashboards_collection_view && data) {
					that.dashboards_collection_view.collection.get(id).set(new BaseModel(data));
				}
				if(data) {
					$.each(CURRENT_USER_DASHBOARDS, function(index, value)
					{
						if(id == this.id)
						{
							this.name = data["name"];
							this.description = data["description"];
						}
					});
				}
				that.navigate("dashboards", { trigger : true });
			},
			errorCallback : function(response)
			{
				if(that.dashboards_collection_view && dashboard_json) {
					that.dashboards_collection_view.collection.get(id).set(new BaseModel(dashboard_json), { silent : true });
				}
				if(response && response.responseText)
				{
					$("span.error-message", $("#dashboardAddForm")).html('<small><p style="color:#B94A48; font-size:14px"><i>'+response.responseText+'</i></p></small>');
				}
				setTimeout(function(){
					$("span.error-message", $("#dashboardAddForm")).html("");
				},1000);

			} });

		$("#content").html(dashboard_view.render().el);

	}
	
	
});/**
 new DataSync router
 separated from widgets
*/



var DataSyncRouter = Backbone.Router.extend({

routes : {

            "sync": "dataSync",
            "sync/contacts": "google_contacts_sync",
            "sync/calendar-setup": "google_calendar_setup",
            "sync/stripe-import": "stripe_sync",
            "sync/shopify": "shopify",
            "sync/officeCalendar" : "office365_calendar_sync",
            "sync/officeCalendar/:id" : "office365_calendar_sync",
            "sync/salesforce": "salesforce",
            "sync/zoho-import": "zoho_sync",
            "sync/quickbook": "quickbook_import",
            "sync/xero": "xero_import",
            "sync/freshbooks": "freshbooks_sync",
            "sync/freshbooks/setting": "freshbooks_sync_setting",

            "importcrm" : "importFromCRMS",

 },

importFromCRMS : function(){
    var that = this;
    getTemplate('import-from-crm', {}, undefined, function(template_ui) {
        if (!template_ui)
            return;
        $('#content').html($(template_ui));

        that.agile_sync_collection_view = new Base_Collection_View({
            url: 'core/api/contactprefs/allPrefs',
            type: 'GET',
            individual_tag_name: 'div',
            templateKey: 'data-import',
            postRenderCallback: function(el) {
                var dataSyncTab = _agile_get_prefs("dataimport_tab");
                if(!dataSyncTab || dataSyncTab == null) {
                    _agile_set_prefs('dataimport_tab', "salesforce-tab");
                    dataSyncTab = "salesforce-tab";
                }
                $('#prefs-tabs-content a[href="#'+dataSyncTab+'"]').tab('show');
                $("#prefs-tabs-content .tab-container ul li").off("click");
                $("#prefs-tabs-content").on("click",".tab-container ul li",function(){
                    var temp = $(this).find("a").attr("href").split("#");
                   _agile_set_prefs('dataimport_tab', temp[1]);
                });

                initializeDataSyncListners();

            }
        });

        that.agile_sync_collection_view.collection.fetch();
        that.agile_sync_collection_view.appendItem = organize_sync_widgets;
        $('#prefs-tabs-content').html(that.agile_sync_collection_view.render().el);

    }, "#content");
},

salesforce : function(el){

        var that = this;
            getTemplate('import-from-crm', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));

               getTemplate('data-import-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("dataimport_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("dataimport_tab", "sync");
                        initializeDataSyncListners();
                       getSyncModelFromName("SALESFORCE", function(model){

                        var url= 'core/api/contactprefs/SALESFORCE',
                                  template= 'admin-settings-import-salesforce-prefs';
                                        renderInnerSyncView(url,template,model,function(model){
                                        showNotyPopUp("information", "Salesforce import initiated", "top", 1000);
                                        // Navigate to back
                                        // Backbone.history.navigate("importcrm", { trigger : true });
                                        DATA_SYNC_FORCE_FETCH=true;
                                        App_Datasync.salesforce();

                                        }, function(){

                                            $(".checkedMultiCheckbox").find(".help-inline").remove();
                                            if($(".checkedMultiCheckbox").find('input:checked').length > 0)
                                                  return true;
                                            else{
                                                $(".checkedMultiCheckbox").append("<span generated='true' class='help-inline' style='display: block;'>Please select atleast one option.</span>"); 
                                            }
                                            
                                             return false;
                                            
                                        });
                               
                             });
                }, null);
             }, "#content");
         
    },

dataSync : function()
{
	var that = this;
    getTemplate('settings', {}, undefined, function(template_ui) {
        if (!template_ui)
            return;
        $('#content').html($(template_ui));

        $('#PrefsTab .select').removeClass('select');
        $('.contact-sync-tab').addClass('select');
       
        that.agile_sync_collection_view = new Base_Collection_View({
            url: 'core/api/contactprefs/allPrefs',
            type: 'GET',
            individual_tag_name: 'div',
            templateKey: 'data-sync',
            postRenderCallback: function(el) {
                var dataSyncTab = _agile_get_prefs("datasync_tab");
                if(!dataSyncTab || dataSyncTab == null) {
                    _agile_set_prefs('datasync_tab', "google-tab");
                    dataSyncTab = "google-tab";
                }
                $('#prefs-tabs-content a[href="#'+dataSyncTab+'"]').tab('show');
                $("#prefs-tabs-content .tab-container ul li").off("click");
                $("#prefs-tabs-content").on("click",".tab-container ul li",function(){
                    var temp = $(this).find("a").attr("href").split("#");
                   _agile_set_prefs('datasync_tab', temp[1]);
                });
            	that.google_calendar(el);
                that.office_calendar(el);
                initializeDataSyncListners();

            }
        });

        that.agile_sync_collection_view.collection.fetch();
        that.agile_sync_collection_view.appendItem = organize_sync_widgets;
        $('#prefs-tabs-content').html(that.agile_sync_collection_view.render().el);

    }, "#content");
},


    google_calendar:function(el){
    	this.calendar_sync_google = new GoogleCalendar_Event_Modal_View({
            url: 'core/api/calendar-prefs/type/GOOGLE',
            template: 'import-google-calendar',
            postRenderCallback: function(el) {
                initializeImportListeners();
            }
        });

        // console.log(getTemplate("import-google-contacts", {}));
        $('#calendar-prefs').html(this.calendar_sync_google.render().el);
    },

    office_calendar: function(el){

         var calendar_settings_view = new Calendar_Sync_Settings_View({
            url : "core/api/calendar-prefs/type/OFFICE365",
            template : "admin-settings-import-office365-sync-details"
         });
        $('#office365').html(calendar_settings_view.render().el);
    },

	 google_contacts_sync: function() {
	            var that = this;
	            getTemplate('settings', {}, undefined, function(template_ui) {
	                if (!template_ui)
	                    return;
	                $('#content').html($(template_ui));

	                $('#PrefsTab .select').removeClass('select');
	                $('.contact-sync-tab').addClass('select');

                    getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");
    	                getSyncModelFromName("GOOGLE", function(model){

                       	var	url= 'core/api/contactprefs/GOOGLE',
    			                  template= 'admin-settings-import-google-contacts-setup';
                      					renderInnerSyncView(url,template,model,function(model){
    									showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                      					});
    			               
    			         });
                    }, null);

	            }, "#content");

	        },
            google_calendar_setup: function()
            {
                getTemplate('settings', {}, undefined, function(template_ui) {

                    $('#content').html($(template_ui));
                    $('#PrefsTab .select').removeClass('select');
                    $('.contact-sync-tab').addClass('select');

                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");

                    var calendar_settings_view = new Calendar_Sync_Settings_View({
                        url : "core/api/calendar-prefs/type/GOOGLE",
                        template : "import-google-calendar-setup",
                        change : false,
                        saveCallback: function(data)
                        {
                            erase_google_calendar_prefs_cookie();
                            showNotyPopUp("information", "Google calendar preferences saved successfully", "top", 1000);
                        },
                        postRenderCallback: function(el)
                        {
                            var model = calendar_settings_view.model;
                            
                            prefs = model.get('prefs');
                            if(prefs)
                            {
                                if(typeof prefs != 'object')
                                {
                                    JSON.parse(model.get('prefs'));
                                    model.set("prefs", JSON.parse(model.get('prefs')), {silent : true});
                                        prefs = model.get('prefs');
                                }
                            }
                            
                            console.log(model);
                            $("#multi-select-calendars-container", el).html(getRandomLoadingImg());
                            erase_google_calendar_prefs_cookie();
                            _fetchGoogleCalendarList(function(data) {
                                getTemplate('dynamic-multi-calendar', data, 'no',  function(template_ui){
                                    

                                        head.js(LIB_PATH + 'lib/jquery.multi-select.js', function()
                                        {
                                            $("#multi-select-calendars-container", el).html(template_ui);
                                            deserialize_multiselect(model.toJSON(), el);
                                            var select_field = $('#multi-select-calendars', el)
                                             select_field.multiSelect({
                                                  selectableHeader: '<label class="control-label"><b>Google</b></label>',
                                                  selectedHeader: '<label class="control-label"><b>Agile</b></label>'
                                             });

                                             var calendars = get_calendar_ids_form_prefs(model.toJSON());
                                             if(calendars && calendars.length == 1 && calendars[0] == 'primary')
                                             {
                                                if(data && data.items)
                                                $.each(data.items, function(index, field){
                                                    if(field.primary)
                                                    {
                                                        select_field.multiSelect('select', field.summary); 
                                                    }
                                                });                                      
                                             }
                                             else
                                                $.each(get_calendar_ids_form_prefs(model.toJSON()), function(index, field){
                                                    select_field.multiSelect('select', field);     
                                                });
                                        });
                                });
                                
        
                            });
                        }
                    });
                    $("#data-sync-settings-tab-content").html(calendar_settings_view.render().el);
                    
                    }, null);
                  


                }, "#content");
            },


        stripe_sync: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));

                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');

               getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");
    			       getSyncModelFromName("STRIPE", function(model){

                       	var	url= 'core/api/contactprefs/STRIPE',
    			                  template= 'admin-settings-import-stripe-contact-sync-prefs';
                      					renderInnerSyncView(url,template,model,function(model){
    									showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                      					});
    			               
    			    	     });
                }, null);
			 }, "#content");

        },

        office365_calendar_sync: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));

                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');

               getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");

                        var calendar_settings_view = new Calendar_Sync_Settings_View({
                            url : "core/api/calendar-prefs/type/OFFICE365",
                            template : "admin-settings-import-office365-calendar-prefs",
                            postRenderCallback: function(el){
                               var model = calendar_settings_view.model;
                               if(model && model.get("prefs"))
                               {
                                    try
                                    {
                                        var prefs = model.get("prefs");
                                        if(typeof prefs != 'object')
                                            model.set('prefs', JSON.parse(prefs), {silent: true});
                                    }
                                    catch (err)
                                    {
                                        console.log(err)
                                    }
                               }
                            },
                            saveCallback: function() {                                
                                App_Datasync.dataSync();
                                showNotyPopUp("information", "Office365 calendar saved successfully", "top", 1000);
                            }
                        });
                        $("#data-sync-settings-tab-content").html(calendar_settings_view.render().el);


                       // getSyncModelFromName("officeCalendar", function(model){
                       //      var url= '',
                       //      template= '';
                       //      renderInnerSyncView(url,template,model,function(model){
                       //          showNotyPopUp("information", "Office 365 calendar saved successfully", "top", 1000);
                       //      });                       
                       //  });

                }, null);
             }, "#content");

        },

        shopify : function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));
                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');
                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");
                   getSyncModelFromName("SHOPIFY", function(model){

                   	var	url= 'core/api/contactprefs/SHOPIFY',
			                  template= 'admin-settings-import-shopify-prefs';
                  					renderInnerSyncView(url,template,model,function(model){
									showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                  					});
			               
			         });
                }, null);    
            }, "#content");
        },

        freshbooks_sync: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));

                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');
                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");
                getSyncModelFromName("FRESHBOOKS", function(model){

                    var url= 'core/api/contactprefs/FRESHBOOKS',
                              template= 'admin-settings-import-freshbooks-contacts-form';
                                    renderInnerSyncView(url,template,model,function(model){
                                    showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                                    });
                           
                     });
                }, null);      
            }, "#content");
        },

        freshbooks_sync_setting: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));
                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');
                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");
                  getSyncModelFromName("FRESHBOOKS", function(model){
                    var url= 'core/api/contactprefs/FRESHBOOKS',
                              template= 'admin-settings-import-freshbooks-settings';
                                    renderInnerSyncView(url,template,model,function(model){
                                    //initializes freshbooks listners which is present in 
                                    //import.js
                                    
                                    showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                                    });
                     });

                  }, null);
            }, "#content");
        },

       
        quickbook_import: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));
                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');
                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");

                  getSyncModelFromName("QUICKBOOK", function(model){

 							var	url= 'core/api/contactprefs/QUICKBOOK',
			                  template= 'admin-settings-import-quickbook-settings';
                  					renderInnerSyncView(url,template,model,function(model){
                                        
									showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                  					});
			         });
                  }, null);
            }, "#content");
        },

        xero_import: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));

                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');
                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");

                 getSyncModelFromName("XERO", function(model){

                   	var	url= 'core/api/contactprefs/XERO',
			                  template= 'admin-settings-import-xero-settings';
                  					renderInnerSyncView(url,template,model,function(model){
									showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                  					});
			               
			         });
                 }, null);
            }, "#content");
        },
         zoho_sync: function() {
            var that = this;
            getTemplate('settings', {}, undefined, function(template_ui) {
                if (!template_ui)
                    return;
                $('#content').html($(template_ui));
                $('#PrefsTab .select').removeClass('select');
                $('.contact-sync-tab').addClass('select');

                getTemplate('data-sync-settings', {}, undefined, function(template_ui1){
                        if(!template_ui1)
                            return;
                        $("#prefs-tabs-content").html(template_ui1);
                        var dataSynctTab = _agile_get_prefs("datasync_tab");
                        $("#prefs-tabs-content").find('a[href="#'+dataSynctTab+'"]').closest("li").addClass("active");
                        initializeTabListeners("datasync_tab", "sync");
                 getSyncModelFromName("ZOHO", function(model){

                   	var	url= 'core/api/contactprefs/ZOHO',
			                  template= 'admin-settings-import-zoho-prefs';
                  					renderInnerSyncView(url,template,model,function(model){
									showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                  					});
			               
			         });
                }, null);
            }, "#content");
        }

});
/**
 * calendar.js is a script file having a route to show calendar
 * 
 * @module Activities
 */
var DEAL_TRACKS_COUNT;
var DealDetailsRouter = Backbone.Router.extend({

	routes : {
	/* Shows page */
	"deal/:id" : "dealdetails", "dealEdit/:id" : "dealEdit" },

	dealdetails : function(id)
	{
		$("#content").html("<div id='deal-detail-page'></div>")
		// For getting custom fields
		if (App_Deals.customFieldsList == null || App_Deals.customFieldsList == undefined)
		{
			App_Deals.customFieldsList = new Base_Collection_View({ url : '/core/api/custom-fields/scope/position?scope=DEAL', sort_collection : false,
				restKey : "customFieldDefs", templateKey : "admin-settings-customfields", individual_tag_name : 'tr' });
			App_Deals.customFieldsList.collection.fetch();
		}

		this.dealDetailView = new Deal_Modal_Event_View({ url : '/core/api/opportunity/' + id, template : "deal-detail", postRenderCallback : function(el)
		{

			$('.content-tabs',el).tabCollapse();
			

			/**
			 * gets the tracks count when user comes to deals page and stores in
			 * global variable
			 */
			if (!DEAL_TRACKS_COUNT){

				getTracksCount(function(count){
						DEAL_TRACKS_COUNT = count;
					initializeDealTabWithCount(id, el);
				});
			} else {
				initializeDealTabWithCount(id, el);
			}

		} });
		var that = this;

		this.dealDetailView.model.fetch();//({success : function(data){
			var ele = that.dealDetailView.render(true).el;
			$("#deal-detail-page").html(getRandomLoadingImg());
			$('#deal-detail-page').html(ele);
		/*},error : function(data, response){
			hideTransitionBar();
			if(response && response.status == '403')
				$('#deal-detail-page').html('<h2 class="p-l-md"><strong><i class="fa-exclamation-triangle icon-white"></i>&nbsp;&nbsp; '+response.responseText+'</strong></h2>');
		} })*/

	},

	dealEdit : function(id, deal)
	{

		// If user refreshes the contacts detail view page directly - we
		// should load from the model
		if (!deal)
		{

			console.log("Downloading deal");

			// Download
			var deal_details_model = Backbone.Model.extend({ url : function()
			{
				return '/core/api/opportunity/' + this.id;
			} });

			var model = new deal_details_model();
			model.id = id;
			model.fetch({ success : function(data)
			{

				// Call deal Details again
				App_Deal_Details.dealEdit(id, data);

			}, error : function(data, response)
			{
				if (response && response.status == '403')
					$("#content").html(response.responseText);
			} });

			return;
		}

		add_custom_fields_to_form(deal, function(deal)
		{

			deserialize_deal(deal, 'deal-detail-edit');

		}, "DEAL");

	}

});



function dealNameEdit(el)
{
	var json = App_Deal_Details.dealDetailView.model.toJSON();
	json.name = el ;
	var dealModel = new BaseModel();
	dealModel.url = '/core/api/opportunity';
	dealModel.save(json,{ success : function(model)
	{
	$("#deals-inline").text(el);
	$("#inline-input").addClass("hidden");
	$("#deals-inline").removeClass("hidden");
	$("#inline-input").removeClass("error-inputfield");
	App_Deal_Details.dealDetailView.model = dealModel;
	}


	});


}

/**
 * Shows all the domain users names as ul drop down list to change the owner of
 * a contact
 */
function fill_deal_owners(el, data, callback)
{
	var optionsTemplate = "<li><a href='javascript:void(0);' class='deal-owner-list' data='{{id}}'>{{name}}</a></li>";
	fillSelect('deal-detail-owner', '/core/api/users', 'domainUsers', callback, optionsTemplate, true);
}

/**
 * To show owner on change
 */
function show_deal_owner()
{
	$('#deal-owner').css('display', 'inline-block');
}

/**
 * To navigate from one deal detail view to other
 */
function deal_detail_view_navigation(id, deal_collection, el)
{
	console.log("collection >>>>>>>>>>>>>>>>");
	console.log(deal_collection);

	var collection_length = deal_collection.length;
	var current_index = deal_collection.indexOf(deal_collection.get(id));
	var previous_deal_id;
	var next_deal_id;

	if (collection_length > 1 && current_index < collection_length && deal_collection.at(current_index + 1) && deal_collection.at(current_index + 1).has("id"))
	{

		next_deal_id = deal_collection.at(current_index + 1).id
	}

	if (collection_length > 0 && current_index != 0 && deal_collection.at(current_index - 1) && deal_collection.at(current_index - 1).has("id"))
	{

		previous_deal_id = deal_collection.at(current_index - 1).id
	}

	if (previous_deal_id != null)
		$('.navigation', el).append('<a style="float:left;" href="#deal/' + previous_deal_id + '" class=""><i class="icon icon-chevron-left"></i></a>');
	if (next_deal_id != null)
		$('.navigation', el).append('<a style="float:right;" href="#deal/' + next_deal_id + '" class=""><i class="icon icon-chevron-right"></i></a>');

}

/**
 * Displays note modal, to add a note related to the contact in contact detail
 * view. Also prepends the contact name to related to field of activity modal.
 */

function fill_relation_deal(el)
{

	var json = App_Deal_Details.dealDetailView.model.toJSON();
	var deal_name = json.name;

	var template = Handlebars.compile('<li class="tag inline-block v-middle m-r-xs btn btn-xs btn-primary" data="{{id}}">{{name}}</li>');
  
 	// Adds contact name to tags ul as li element
 	$('.tags',el).html(template({name : deal_name, id : json.id}));
}

function deserialize_deal(value, template)
{
	value = value.toJSON();

	// Loads the form based on template value

	getTemplate(template, value, undefined, function(template_ui){
		if(!template_ui)
			  return;
		var dealForm = $('#content').html($(template_ui));	

		deserializeForm(value, dealForm);

		// Call setupTypeAhead to get contacts
		agile_type_ahead("relates_to", dealForm, contacts_typeahead);

		// Fills owner select element
		populateUsers("owners-list", dealForm, value, 'owner', function(data)
		{
			dealForm.find("#owners-list").html(data);
			if (value.owner)
			{
				$("#owners-list", dealForm).find('option[value=' + value['owner'].id + ']').attr("selected", "selected");
				$("#owners-list", dealForm).closest('div').find('.loading-img').hide();
			}
		});

		// Fills the pipelines list in the select menu.
		populateTracks(dealForm, undefined, value, function(pipelinesList)
		{

			// Fills milestone select element
			populateMilestones(dealForm, undefined, value.pipeline_id, value, function(data)
			{
				dealForm.find("#milestone").html(data);
				if (value.milestone)
				{
					$("#milestone", dealForm).find('option[value=\"' + value.milestone + '\"]').attr("selected", "selected");
				}
				$("#milestone", dealForm).closest('div').find('.loading-img').hide();
			});
		});

		// Enable the datepicker
		$('#close_date', dealForm).datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY});

		add_custom_fields_to_form(value, function(data)
		{
			var el = show_custom_fields_helper(data["custom_fields"], []);
			$("#custom-field-deals", dealForm).html(fill_custom_fields_values_generic($(el), value["custom_data"]));
			$('.date_input', dealForm).datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY});

		}, "DEAL")

	}, "#content");
}

/**
 * 
 * @returns due tasks count upto today
 */
function getTracksCount(callback)
{
	accessUrlUsingAjax('core/api/milestone/tracks/count', function(data){

			if (!isNaN(data))
			{
				return callback(data);
			}

			return callback(0);

	});
}

/**
*
*/
function initializeDealTabWithCount(id, el){
	
	load_deal_tab(el, "");
	var deal_collection;
	if (App_Deals.opportunityCollectionView && App_Deals.opportunityCollectionView.collection)
		deal_collection = App_Deals.opportunityCollectionView.collection;

	if (deal_collection != null && _agile_get_prefs("agile_deal_view"))
		deal_detail_view_navigation(id, deal_collection, el);

}

/**
 * Displays task modal, to add a deal related to the task in deal detail
 * view. Also prepends the deal name to related deal to field of activity modal.
 */
function fill_relation_deal_task(el)
{

	var json = App_Deal_Details.dealDetailView.model.toJSON();
	var deal_name = json.name;

	var template = Handlebars.compile('<li class="tag inline-block v-middle m-r-xs btn btn-xs btn-primary" data="{{id}}">{{name}}</li>');

	var relatedContactsJOSN = json.contacts;
	$.each(relatedContactsJOSN, function(index, relContact){
		var rel_contact_exist = true;
		// If tag already exists returns
		$.each($('ul.tags', el).children('li'), function(index, tag)
		{
			if ($(tag).attr('data') == relContact.id)
			{
				rel_contact_exist = false;
				return;
			}
		});

		if(rel_contact_exist)
		{
			var tplJSON = {};
			tplJSON.email_item = relContact.id;
			if(relContact.type == 'PERSON'){
				tplJSON.type_item = '#contact/';
			}
			else if(relContact.type == 'COMPANY'){
				tplJSON.type_item = '#company/';
			}
			tplJSON.tag_item = relContact.id;
			tplJSON.item = getContactName(relContact);
			$('ul.tags', el).append(getTemplate("tag-item-li", tplJSON));
		}
	});

 	// Adds contact name to tags ul as li element
 	$('.deal_tags',el).html(template({name : deal_name, id : json.id}));
	
}
/**
 * Creates backbone router for Deals/Opportunities create, read and update
 * operations
 */
var DealsRouter = Backbone.Router.extend({

	routes : {
		/* Deals/Opportunity */
		"deals" : "deals", 
		"import-deals" : "importDeals",
		"deal-rc-0" : "dealsRightClick",
		"deal-rc-1" : "dealsRightClick",
		"deal-rc-2" : "dealsRightClick",
		"deal-rc-3" : "dealsRightClick",
		"deal-filters" : "dealFilters", 
		"deal-filter-add" : "dealFilterAdd",
		"deal-filter-edit/:id" : "dealFilterEdit",
		"deal-filter/:id" : "dealFilter"
	},

	/**
	 * Fetches all the opportunities as list and also as milestone lists.
	 * Fetching both makes easy to add/get deal to the list rather than
	 * milestone lists. Based on deal_view cookie it show deals to user. Also
	 * fetches Milestones pie-chart and Details graph if deals exist.
	 */
	deals : function()
	{
		pipeline_id = 0;
		if (_agile_get_prefs("agile_deal_track"))
			pipeline_id = _agile_get_prefs("agile_deal_track");
		
		$('#content').html("<div id='opportunity-listners'>&nbsp;</div>");
		
		//fix for mobile view showing only list view 
		if(agile_is_mobile_browser())
			createCookie("agile_deal_view", "list_view"); 
		
		// Depending on cookie shows list or milestone view
		if (!_agile_get_prefs("agile_deal_view"))
		{
			template_key = "opportunities-by-milestones";

			if (pipeline_id == 1)
				pipeline_id = 0;

			getTemplate("opportunities-header", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#opportunity-listners').html($(template_ui));

				DEALS_LIST_COLLECTION = null;
				setupDealsTracksList();
				setupDealFilters();
				initializeDealListners();
				loadPortlets('Deals');
				contactListener();

			}, "#opportunity-listners");
		}
		else
		{
			var that = this;
			DEALS_LIST_COLLECTION = null;
			setupDealFilters(function(data){
				getTemplate("opportunities-header", {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#opportunity-listners').html($(template_ui));
					
					loadPortlets('Deals');
				});
				fetchDealsList(data);
			});
		}

		$(".active").removeClass("active");
		$("#dealsmenu").addClass("active");
		
		setTimeout(function()
		{
			$('a.deal-notes').tooltip();
			$('.deal_won_date').tooltip();
			
		}, 2000);
	},

	/**
	 * Open deal view in new page when right clicked
	 */
	dealsRightClick : function()
	{
		var link = window.location.hash;
		var param = link.split("-")[2];
		
		if(param == "0"){
			_agile_set_prefs("agile_deal_view", "list_view");
		}else if(param == "1"){
			_agile_delete_prefs("agile_deal_view");
			_agile_delete_prefs('deal-milestone-view');
		}else if(param == "2"){
			_agile_set_prefs('deal-milestone-view','compact');			
		}else if(param == "3"){
			_agile_set_prefs('deal-milestone-view','fit');
		}
		App_Deals.deals();
		window.location.hash = "deals";
	},
	
	/**
	 * import deals from a csv file and then upload all deals to databse
	 */
	importDeals : function()
	{
		if (!hasScope("MANAGE_DEALS"))
		{
			$('#content').html('<h2 class="p-l-md"><strong><i class="fa-exclamation-triangle icon-white"></i>&nbsp;&nbsp; Sorry, you do not have privileges to import deals.</strong></h2>');
			hideTransitionBar();
			return;
		}
		$('#content').html("<div id='import-deals-listener'></div>");
		getTemplate("import-deals", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#import-deals-listener').html($(template_ui));
			initializeImportEvents("import-deals-listener");	
		}, "#import-deals-listener");
		
	},

	/**
	 * Shows contact filters list
	 */
	dealFilters : function()
	{
		this.dealFiltersList = new Base_Collection_View({ url : '/core/api/deal/filters', restKey : "DealFilter", templateKey : "deal-filter", isNew : "true", window : "deal-filters",
			individual_tag_name : 'tr', sort_collection : false,
			postRenderCallback : function(el)
			{
							head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
							{
											$(".created_time", el).timeago();
							});

			}});

		this.dealFiltersList.collection.fetch();
		$("#content").html(this.dealFiltersList.render().el);
	},

	/**
	 * Adds new filter to get specific deals
	 */
	dealFilterAdd : function()
	{
		$('#content').html("<div id='opportunity-listners'></div>");
		var deals_filter = new Base_Model_View({ url : '/core/api/deal/filters', template : "filter-deals", isNew : "true", window : "deal-filters",
			prePersist : function(model){
				model.set({ 
						//	'close_date_start' : getGMTEpochFromDateForCustomFilters(new Date(model.attributes.close_date_start*1000)) / 1000 ,
						//	'close_date_end' : getGMTEpochFromDateForCustomFilters(new Date(model.attributes.close_date_end*1000)) / 1000 
						}, 
						{ 
							silent : true 
						}); 
						console.log('before persist');

			},
			postRenderCallback : function(el)
			{
				initializeDealListners();
				contactListener();
				var usersCollection = new Base_Collection_View({ url : '/core/api/users', sort_collection : false });
				usersCollection.collection.fetch({
					success : function(data){
						var json = data.toJSON();
						$('#owners-list-filters').html('');
						if(json && json.length > 1){
							$('#owners-list-filters').html('<option value="">Any</option>');
						}
						var template = Handlebars.compile('<option value="{{id}}">{{name}}</option>'); 
						$.each(json, function(index, user){
							$('#owners-list-filters').append(template({name : user.name, id : user.id}));
						});
						$('#owners-list-filters').parent().find('img').hide();
						hideTransitionBar();
					}
				});
				var tracksCollection = new Base_Collection_View({ url : '/core/api/milestone/pipelines', sort_collection : false });
				tracksCollection.collection.fetch({
					success : function(data){
						var json = data.toJSON();
						$('#filter_pipeline').html('');
						if(json && json.length > 1){
							$('#filter_pipeline').html('<option value="">Any</option>');
						}
						var template = Handlebars.compile('<option value="{{id}}">{{name}}</option>'); 
						$.each(json, function(index, track){
							$('#filter_pipeline').append(template({name : track.name, id : track.id}));
						});
						$('#filter_pipeline', $('#opportunity-listners')).trigger('change');
						$('#filter_pipeline').parent().find('img').hide();
						hideTransitionBar();
					}
				});
				$('input[name=name]').trigger('focus');
				$('#deal-cd-rhs .date' , el).datepicker({ format : CURRENT_USER_PREFS.dateFormat , });
				$('#deal-cd-rhs-new .date' , el).datepicker({ format : CURRENT_USER_PREFS.dateFormat , });
			} });
		$("#opportunity-listners").html(deals_filter.render().el);		
	},

	/**
	 * Edits filter created
	 */
	dealFilterEdit : function(id)
	{
		if (!this.dealFiltersList || this.dealFiltersList.collection.length == 0 || this.dealFiltersList.collection.get(id) == null)
		{
			this.navigate("deal-filters", { trigger : true });
			return;
		}

		$('#content').html("<div id='opportunity-listners'></div>");
		$("#opportunity-listners").html(LOADING_HTML);
		var deal_filter = this.dealFiltersList.collection.get(id);
		var deal_filter_json = deal_filter.toJSON();
		var dealFilter = new Base_Model_View({ url : 'core/api/deal/filters', model : deal_filter, template : "filter-deals",
			window : 'deal-filters', prePersist : function(model){ 
				model.set({ 
							'pipeline_id' : $('#filter_pipeline', $("#dealsFilterForm")).val(), 
							'milestone' : $('#milestone', $("#dealsFilterForm")).val(),
							'owner_id' : $('#owners-list-filters', $("#dealsFilterForm")).val() 
						//	'close_date_start' : getGMTEpochFromDateForCustomFilters(new Date(model.attributes.close_date_start*1000)) / 1000 ,
						//	'close_date_end' : getGMTEpochFromDateForCustomFilters(new Date(model.attributes.close_date_end*1000)) / 1000 
						}, 
						{ 
							silent : true 
						});
			}, 
			postRenderCallback : function(el)
			{
				initializeDealListners();
				contactListener();
				deserializeForm(deal_filter_json, $("#dealsFilterForm"));
				$('input[name=name]').trigger('focus');
				var usersCollection = new Base_Collection_View({ url : '/core/api/users', sort_collection : false });
				usersCollection.collection.fetch({
					success : function(data){
						var json = data.toJSON();
						$('#owners-list-filters').html('');
						if(json && json.length > 1){
							$('#owners-list-filters').html('<option value="">Any</option>');
						}
						var template = Handlebars.compile('<option value="{{id}}">{{name}}</option>');
						$.each(json, function(index, user){
							$('#owners-list-filters').append(template({id : user.id, name : user.name}));
						});
						if(deal_filter_json && deal_filter_json.owner_id)
						{
							$('#owners-list-filters').find('option[value="'+deal_filter_json.owner_id+'"]').attr("selected", "selected");
						}
						$('#owners-list-filters').parent().find('img').hide();
						hideTransitionBar();
						$('#value_filter').find('option').each(function(){
				    		if($(this).val()==$('#value_filter').val()){
				    			$('.'+$(this).val(),$('#deal-value-filter')).removeClass('hide');
				    		}else{
				    			$('.'+$(this).val(),$('#deal-value-filter')).addClass('hide');
				    		} 
				    	});
					}
				});
				var tracksCollection = new Base_Collection_View({ url : '/core/api/milestone/pipelines', sort_collection : false });
				tracksCollection.collection.fetch({
					success : function(data){
						var json = data.toJSON();
						$('#filter_pipeline').html('');
						if(json && json.length > 1){
							$('#filter_pipeline').html('<option value="">Any</option>');
						}
						var template = Handlebars.compile('<option value="{{id}}">{{name}}</option>');
						$.each(json, function(index, track){
							$('#filter_pipeline').append(template({id : track.id, name : track.name}));
						});
						if(deal_filter_json && deal_filter_json.pipeline_id)
						{
							$('#filter_pipeline').find('option[value="'+deal_filter_json.pipeline_id+'"]').attr("selected", "selected");
						}
						$('#filter_pipeline').parent().find('img').hide();
						hideTransitionBar();

						var track = $('#filter_pipeline').val();
						if (track)
						{
							var milestoneModel = Backbone.Model.extend({ url : '/core/api/milestone/'+track });
							var model = new milestoneModel();
							model.fetch({ 
								success : function(data){
									var json = data.toJSON();
									var milestones = json.milestones;
									milestonesList = milestones.split(",");
									$('#milestone').html('');
									if(milestonesList.length > 1)
									{
										$('#milestone', el).html('<option value="">Any</option>');
									}
									var template = Handlebars.compile('<option value="{{milestone}}">{{milestone}}</option>');
									$.each(milestonesList, function(index, milestone){
										$('#milestone', el).append(template({milestone : milestone}));
									});
									if(deal_filter_json && deal_filter_json.milestone && track == deal_filter_json.pipeline_id)
									{
										$('#milestone').find('option[value="'+deal_filter_json.milestone+'"]').attr("selected", "selected");
									}
									
									$('#milestone', el).parent().find('img').hide();
									hideTransitionBar();
									 
								} 
							});
						}
						else
						{
							$('#milestone', el).html('<option value="">Any</option>');
						}
						
					}
				});
				if(deal_filter_json.close_date_filter == "BETWEEN"){
					$('#deal-cd-rhs', el).parent().removeClass("hide");
					$('#deal-cd-rhs-new', el).parent().removeClass("hide");
					$('#cd-value', el).parent().addClass("hide");
				}else if(deal_filter_json.close_date_filter == "ON" || (deal_filter_json.close_date_filter == "AFTER" || deal_filter_json.close_date_filter == "BEFORE")){
					$('#deal-cd-rhs', el).parent().removeClass("hide");
					$('#deal-cd-rhs-new', el).parent().addClass("hide");
						$('#cd-value', el).parent().addClass("hide");
				}else if(deal_filter_json.close_date_filter == "LAST" || deal_filter_json.close_date_filter == "NEXT" ){
					$('#cd-value', el).parent().removeClass("hide");
						$('#deal-cd-rhs-new', el).parent().addClass("hide");
						$('#deal-cd-rhs', el).parent().addClass("hide");
				}
				$('#deal-cd-rhs .date' , el).datepicker({ format : CURRENT_USER_PREFS.dateFormat , });
				$('#deal-cd-rhs-new .date' , el).datepicker({ format : CURRENT_USER_PREFS.dateFormat , });
			} });

		$("#opportunity-listners").html(dealFilter.render().el);
	},

	/**
	 * Adds new filter to get specific deals
	 */
	dealFilter : function(id)
	{
		var deal_filter = App_Deals.deal_filters.collection.get(id);
		var deal_filter_json = deal_filter.toJSON();
		_agile_set_prefs('deal-filters', JSON.stringify(deal_filter_json));
		App_Deals.deals();
	},

});
/**
 * Creates backbone router for Documents create, read and update operations
 */
var DocumentsRouter = Backbone.Router.extend({

	routes : {

	/* Documents */
	"documents" : "documents", },

	/**
	 * Fetches all the documents as list. Fetching makes easy to add/get
	 * document to the list.
	 */
	documents : function()
	{
		 // Fetches documents as list
		this.DocumentCollectionView = new Document_Collection_Events({ url : 'core/api/documents', templateKey : "documents", cursor : true, page_size : 20,
			individual_tag_name : 'tr', postRenderCallback : function(el)
			{
				includeTimeAgo(el);
				
			}, appendItemCallback : function(el)
			{
				// To show timeago for models appended by infini scroll
				includeTimeAgo(el);
			} });

		this.DocumentCollectionView.collection.fetch();

		// Shows deals as list view
		$('#content').html(this.DocumentCollectionView.render().el);

		$(".active").removeClass("active");
		$("#documentsmenu").addClass("active");
	} });
var EmailBuilderRouter = Backbone.Router.extend({

	routes : {
	"emailbuilder-add" : "showEmailBuilder",
    "emailbuilder-templates" : "getListOfTemplates",
	"emailbuilder-add/:id" : "loadSelectedTemplate",
	"emailbuilder/:id" : "loadSavedTemplate",
    "emailbuilder-copy/:id" : "copyEmailTemplate"
	},

	showEmailBuilder : function() {
        $('#content').html("<div id='emailbuilder-listeners'></div>");
        initializeEmailBuilderListeners();

        getTemplate("emailbuilder-add", {}, undefined, function(ui){
            $("#emailbuilder-listeners").html($(ui));
        }, "#emailbuilder-listeners");
	
        //hide sidebar
        collapseLeftMenuInBuilder();
        hideTransitionBar();
	},

    getListOfTemplates : function() {
        $('#content').html("<link rel='stylesheet' type='text/css' href='flatfull/css/jquery.fancybox.css'><div id='emailbuilder-listeners'></div>");
        initializeEmailBuilderListeners();
        $.getJSON("misc/emailbuilder/templates/templates.json", function(data) {

            getTemplate("emailbuilder-categories", data.templates[0], undefined, function(ui){
                $("#emailbuilder-listeners").html($(ui));
            }, "#emailbuilder-listeners");
            
            hideTransitionBar();
        });
    },

	loadSelectedTemplate : function(defaultTemplateId) {
		$('#content').html("<div id='emailbuilder-listeners'></div>");
        initializeEmailBuilderListeners();

        var data = {
            "templateId" : defaultTemplateId,
            "action" : "new"
        };

        getTemplate("emailbuilder-add", data, undefined, function(ui){
            $("#emailbuilder-listeners").html($(ui));
        }, "#emailbuilder-listeners");
	
	   $('html, body').animate({scrollTop: $('body').offset().top}, 500);
        
        //hide sidebar
        collapseLeftMenuInBuilder();
        hideTransitionBar();

	},

    loadSavedTemplate : function(templateId) {
        $('#content').html("<div id='emailbuilder-listeners'></div>");
        initializeEmailBuilderListeners();

        var data = {
            "templateId" : templateId,
            "action" : "edit"
        };

        getTemplate("emailbuilder-add", data, undefined, function(ui){
            $("#emailbuilder-listeners").html($(ui));            
        }, "#emailbuilder-listeners");

        //hide sidebar
        collapseLeftMenuInBuilder();
        
       $('html, body').animate({scrollTop: $('body').offset().top}, 500);
       hideTransitionBar();

    },

    copyEmailTemplate : function(templateId) {
        $('#content').html("<div id='emailbuilder-listeners'></div>");
        initializeEmailBuilderListeners();

        var data = {
            "templateId" : templateId,
            "action" : "copy"
        };

        getTemplate("emailbuilder-add", data, undefined, function(ui){
            $("#emailbuilder-listeners").html($(ui));            
        }, "#emailbuilder-listeners");

        //hide sidebar
        collapseLeftMenuInBuilder();
        
       $('html, body').animate({scrollTop: $('body').offset().top}, 500);
       hideTransitionBar();

    }
	
});

function collapseLeftMenuInBuilder() {
    $wrapElement = $("#wrap");
    if(!$wrapElement.hasClass("app-aside-dock")) {
        if(!$wrapElement.hasClass("app-aside-folded")) {
            $wrapElement.addClass("app-aside-folded");
        }
    }
}
var FacebookPageTabRouter = Backbone.Router.extend({

	routes : {
	"facebook-integration" : "fbPageTab"
	},

	fbPageTab : function(){
		$('#content').html("<div id='fbPageTab-listners'>&nbsp;</div>");
		getTemplate("admin-settings", {}, undefined, function(template_ui){

			if(!template_ui)
				return;
			$('#fbPageTab-listners').html($(template_ui));

			getTemplate("web-to-lead-settings", {}, undefined, function(template_ui1){
				if(!template_ui1)
					return;

				$('#admin-prefs-tabs-content').html($(template_ui1));
				$("#admin-prefs-tabs-content").find('a[href="#web-to-lead-tab"]').closest("li").addClass("active");	
				

				accessUrlUsingAjax("fbpage?action=GET_DETAILS", function(data){
					var dataObj = data;
					accessUrlUsingAjax("core/api/forms", function(response){

							dataObj["forms"] = response;
							
							getTemplate('fbpagetab', dataObj, undefined, function(template_ui2){
						 		if(!template_ui2)
						    		return;
								$('#admin-settings-integrations-tab-content').html($(template_ui2));
								initializeFbPageTabListners();
							}, "#admin-settings-integrations-tab-content");
					});
				});
				
				initializeIntegrationsTabListeners("integrations_tab", "integrations");
				$('#content').find('.integrations-tab').addClass('select');
			}, null);

		},null);

		hideTransitionBar();		
	}
	
});


function accessUrlUsingAjax(url, callback, error_callback){
	$.ajax({ 
		url : url, 
		dataType : 'json',
		success : function(response){

		   try{
		   	  response = $.parseJSON(response);
		   }catch(err){}

			if(callback)
				 callback(response);
		}, error : function(response){

			if(error_callback)
					 error_callback(response);
		}
	});
}var FormsRouter = Backbone.Router.extend({
	
	routes : { 
		"forms" : "formSettings",
		"form-builder-templates" : "getListOfTemplates" 
	},

	formSettings : function()
	{
		console.log("forms collection template");
		
		this.formsListView = new Form_Collection_Events({ url : '/core/api/forms', restKey : "forms", templateKey : "forms",
			individual_tag_name : 'tr', postRenderCallback : function(el){
				head.js(LIB_PATH + 'lib/jquery.timeago.js', function(el)
						{
							$("time.form-modified-time", el).timeago();
						});
			} })
		this.formsListView.collection.fetch();
		$("#content").html(this.formsListView.el);
	},

	getListOfTemplates : function()
	{
		$('#content').html("<link rel='stylesheet' type='text/css' href='flatfull/css/jquery.fancybox.css'><div id='formbuilder-listeners'></div>");
        
        head.js('flatfull/lib/jquery.fancybox.js',function() {
            $.getJSON("misc/formbuilder/templates/templates.json", function(data) {

               getTemplate("formbuilder-categories", data.templates[0], undefined, function(ui){
                    $("#formbuilder-listeners").html($(ui));
                }, "#formbuilder-listeners");
                
                $(".form_fancybox").fancybox({
                    'autoDimensions': true,
                    'padding'       : 0,
                    'autoScale'     : true,
                    'overflow'		: 'visible'
                 });

                hideTransitionBar();
            });
        });
        
        $(".active").removeClass("active");
	
	} 



});
/**
 * Ticket Router with callbacks
 */
var HelpcenterRouter = Backbone.Router.extend({
	routes: {

		/* Home routes */
		"helpcenter" : "categories",

		/* Show add edit categorie */
		"helpcenter/categories":"categories",
        "helpcenter/add-category":"categorieAdd",
	   	"categorie/:id/edit-categorie":"categorieEdit",
	   	
	   	/* Show add edit section */
	   	"helpcenter/sections" : "sections",
	    "helpcenter/add-section" : "addSection",
        "categorie/:id/add-section" : "addSection",
	    "categorie/:categorie_id/section/:section_id/edit-section":"sectionEdit",
        
        /* Show add edit article */
        "helpcenter/add-article" : "addArticle",
        "categorie/:categorie_id/section/:section_id/articles" : "sectionArticles",
        "categorie/:categorie_id/section/:section_id/add-article" :  "addArticle",
        "categorie/:categorie_id/section/:section_id/article/:article_id": "showArticle",
        "categorie/:categorie_id/section/:section_id/article/:article_id/edit-article": "editArticle"       
    },
	categories: function(){

		App_Helpcenter_Module.loadhelpcenterTemplate(function(callback){
			
			//Initializing base collection with groups URL
			App_Helpcenter_Module.categoriesCollection = new Base_Collection_View({
				url : '/core/api/knowledgebase/categorie',
				templateKey : "helpcenter-categories",
				individual_tag_name : 'div',
				postRenderCallback : function(el, collection) {

                  Helcenter_Events.categorieDelete(el);
				}
			});

			//Fetching groups collections
			App_Helpcenter_Module.categoriesCollection.collection.fetch();

			//Rendering template
			$('#helpcenter-content').html(App_Helpcenter_Module.categoriesCollection.el);
	    });
	},

	categorieAdd: function(){
		
		App_Helpcenter_Module.loadhelpcenterTemplate(function(callback){
					
		    var addCatogeryView = new Base_Model_View({
					isNew : true, 
				 	url : '/core/api/knowledgebase/categorie',
					template : "helpcenter-add-catogery",
					window : "#helpcenter/categories",
		    });

			$('#helpcenter-content').html(addCatogeryView.render().el);    
		});
  },
  
  addArticle: function(category_id,section_id){
  
  	setupTinyMCEEditor('textarea#description-article', true, undefined, function(){});
  
  		App_Helpcenter_Module.loadhelpcenterTemplate(function(callback){
	
			    var addsectionView = new Base_Model_View({
	 				isNew : true, 
	 				url : '/core/api/knowledgebase/article',
	 				template : "helpcenter-add-article",
	 				window : "back",
			        
					prePersist : function(model){
						var json = {};
						var catogery_id = $("#catogery option:selected").data('catogery-id');
						json = {"categorie_id" : catogery_id };

						var plain_content = '';

						try{
							plain_content = $(tinyMCE.activeEditor.getBody()).text();

							json.plain_content = plain_content;
						}
						catch(err){}
						
						model.set(json, { silent : true });
				    },

			        postRenderCallback : function(el){
					
						fillSelect('catogery', '/core/api/knowledgebase/categorie', '', function(collection){
			 	 			getTemplate("helpcenter-section-category", collection.toJSON(), undefined, function(template_ui){

						

								if(!template_ui)
									return;

				                $('#catogery', el).html($(template_ui));

				                if(category_id && section_id)
									$('#catogery option[value="'+section_id+'"]',el).attr("selected",true);

								if(callback)
					 				callback();
			               	} );		
					
					},'', true);

			        },
			        
			    });

				$('#helpcenter-content').html(addsectionView.render().el);    
	        
		});
    },

  addSection: function(category_id){
        
        App_Helpcenter_Module.loadhelpcenterTemplate(function(callback){
		
		    var addsectionView = new Base_Model_View({
 				isNew : true, 
 				url : '/core/api/knowledgebase/section',
 				template : "helpcenter-add-section",
 				window : "#helpcenter/categories",
		        postRenderCallback : function(el){
		        	 var optionsTemplate = "<option value={{id}}>{{name}}</option>";
						 fillSelect('catogery', '/core/api/knowledgebase/categorie', '',function(){
                                           
                                       if(!category_id)
                                       	  return;

                                       $('select option[value="'+category_id+'"]').attr("selected",true);
                                        
						 },optionsTemplate, true);

		        }
			});

				$('#helpcenter-content').html(addsectionView.render().el);    
	        
		});
   },

  categorieEdit: function(category_id){

  	if(!App_Helpcenter_Module.categoriesCollection || !App_Helpcenter_Module.categoriesCollection.collection){

	 				Backbone.history.navigate( "helpcenter/categories", { trigger : true });
	 				return;
	} 			
  	
  		App_Helpcenter_Module.loadhelpcenterTemplate(function(callback){
		
	    	var categorieModel = App_Helpcenter_Module.categoriesCollection.collection.get(category_id);

        	console.log(categorieModel);
		
		    var editCatogeryView = new Base_Model_View({
 				model : categorieModel,
 				isNew : true, 
 				url : '/core/api/knowledgebase/categorie',
 				template : "helpcenter-add-catogery",
 				window : "#helpcenter/categories",
		    });

			$('#helpcenter-content').html(editCatogeryView.render().el);    
		});
  },

  sectionArticles: function(categorie_id,section_id){
		  
		App_Helpcenter_Module.loadhelpcenterTemplate(function(){
			
			var sectionView = new Base_Model_View({
				isNew : false,
				template : "helpcenter-section",
				url : "/core/api/knowledgebase/section?id=" + section_id,
		        postRenderCallback: function(){
		        	//Initializing base collection with groups URL
					App_Helpcenter_Module.articlesCollection = new Base_Collection_View({
						url : '/core/api/knowledgebase/article?section_id=' + section_id + '&categorie_id=' + categorie_id,
						templateKey : "helpcenter-articles",
						individual_tag_name : 'tr',
						postRenderCallback: function(el){
                          
					      Helcenter_Events.initializeStatuscheckbox(el);
					    	
					    	$('[data-toggle="tooltip"]', el).tooltip();
					     
					    },
					    
					});

					//Fetching groups collections
					App_Helpcenter_Module.articlesCollection.collection.fetch();

					//Rendering template
					showTransitionBar();
					$('#articles-collection').html(App_Helpcenter_Module.articlesCollection.el);
		        },
		        deleteCallback : function(){
							Backbone.history.navigate( "helpcenter/categories", { trigger : true });
		   		}
			});

	 		$('#helpcenter-content').html(sectionView.render().el);
	 	});                 
		  
  },

  sectionEdit: function(category_id,section_id){ 	
  		
  		App_Helpcenter_Module.loadhelpcenterTemplate(function(){
			
			var sectionView = new Base_Model_View({
				isNew : false,
				template : "helpcenter-add-section",
				url : "/core/api/knowledgebase/section?id=" + section_id,
				window:'back',
			    postRenderCallback : function(el){
			        var optionsTemplate = "<option value={{id}}>{{name}}</option>";
 						 fillSelect('catogery', '/core/api/knowledgebase/categorie', '', function(){
                                       $('select option[value="'+category_id+'"]').attr("selected",true);    
			                     },optionsTemplate, true);
 					}
			   
			    	});
              
              
	 		$('#helpcenter-content').html(sectionView.render().el);
	 	});			
  },
  showArticle: function(category_id,section_id,article_id){
  		
	App_Helpcenter_Module.loadhelpcenterTemplate(function(){

		var articleView = new Base_Model_View({
			isNew : false,
			template : "helpcenter-article",
			url : "/core/api/knowledgebase/article/" + article_id,
	        no_reload_on_delete:false,
	        postRenderCallback: function(el, data){

	        	//Helpcenter_Util.setBreadcrumbPath('article-breadcrumb', data);
			},
			deleteCallback : function(){
				window.history.back();
		    }
		});

 		$('#helpcenter-content').html(articleView.render().el);
 	});
  },
  editArticle : function(categorie_id,section_id,article_id){
    
		App_Helpcenter_Module.loadhelpcenterTemplate(function(callback){
	
		    var editarticleView = new Base_Model_View({
 				isNew : false, 
 				url : "/core/api/knowledgebase/article/" +article_id,
 				template : "helpcenter-add-article",
 				window : "back",
		        
                prePersist : function(model){
					var json = {};
					var catogery_id = $("#catogery option:selected").data('catogery-id');
					json = {"categorie_id" : catogery_id };
					model.set(json, { silent : true });
			    },

		        postRenderCallback : function(el){
				setupTinyMCEEditor('textarea#description-article', true, undefined, function(){
					$("textarea#description-article").css("display", "none");
				});

				fillSelect('catogery', '/core/api/knowledgebase/categorie', '', function(collection){

		 	 		$('#catogery', el).html(getTemplate('helpcenter-section-category', collection.toJSON()));
   					$('#catogery option[value="'+section_id+'"]',el).attr("selected",true);                    
				
				},'', true);

				
				 

		        }
		    });    
			    $('#helpcenter-content').html(editarticleView.render().el); 
	    });
  },

  loadhelpcenterTemplate: function(callback){

		if($("div #helpcenter-root-div").length > 0){
          if(callback)
 				callback();
    	  return;
	    }
		
		getTemplate("helpcenter", {}, undefined, function(template_ui){

			if(!template_ui)
				return;
			
			$('#content').html($(template_ui));	
			

 			if(callback)
 				callback();
		},'#helpcenter' );
}
});var LandingPageRouter = Backbone.Router.extend({
	routes : {
	"landing-pages" : "getListOfLandingPages",
	"landing-page-add" : "showLandingPageBuilder",
	"landing-page-templates" : "getListOfTemplates",
	"landing-page-add/:id" : "loadSelectedTemplate",
	"landing-page/:id" : "loadSavedLandingPage",
    "landing-page-settings/:id" : "pageSettings",
    "landing-page-copy/:id" : "copySelectedLandingPage"
	},

	getListOfLandingPages : function(){

        $('#content').html("<div id='landingpages-listeners'></div>");
        
        this.LandingPageCollectionView = new Base_Collection_View({ url : 'core/api/landingpages', templateKey : "landingpages", cursor : true, page_size : 20,
            individual_tag_name : 'tr', postRenderCallback : function(el)
            {
                includeTimeAgo(el);
            },
            appendItemCallback : function(el)
            { 
                // To show time ago for models appended by infinite scroll
                includeTimeAgo(el);
            } });
        
        this.LandingPageCollectionView.collection.fetch();

        $("#landingpages-listeners").html(this.LandingPageCollectionView.render().el);
        
        $(".active").removeClass("active");
	$("#landing-pages-menu").addClass("active");

	},

	showLandingPageBuilder : function() {
        $('#content').html("<div id='landingpages-listeners'></div>");
        initializeLandingPageListeners();

        getTemplate("landingpages-add", {}, undefined, function(ui){
            $("#landingpages-listeners").html($(ui));
        }, "#landingpages-listeners");
        
        $(".active").removeClass("active");
	$("#landing-pages-menu").addClass("active");
	
        hideTransitionBar();
	},

	getListOfTemplates : function() {
        $('#content').html("<link rel='stylesheet' type='text/css' href='flatfull/css/jquery.fancybox.css'><div id='landingpages-listeners'></div>");
        
        head.js('flatfull/lib/jquery.fancybox.js',function() {
            $.getJSON("misc/landingpage/templates/templates.json", function(data) {

                getTemplate("landingpages-categories", data.templates[0], undefined, function(ui){
                    $("#landingpages-listeners").html($(ui));
                }, "#landingpages-listeners");
                
                $(".lpt_fancybox").fancybox({
                    'autoDimensions': false,
                    'padding'       : 0,
                    'autoScale'     : true,
                    'width'         : "600px",
                    'transitionIn'  : 'none',
                    'transitionOut' : 'none',
                    'type'          : 'iframe'
                 });

                hideTransitionBar();
            });
        });
        
        $(".active").removeClass("active");
	$("#landing-pages-menu").addClass("active");

	},

	loadSelectedTemplate : function(defaultTemplateId) {
		$('#content').html("<div id='landingpages-listeners'></div>");
        initializeLandingPageListeners();

        var data = {
            "templateId" : defaultTemplateId,
            "action" : "new"
        };

        getTemplate("landingpages-add", data, undefined, function(ui){
            $("#landingpages-listeners").html($(ui));
        }, "#landingpages-listeners");
	
	$('html, body').animate({scrollTop: $('body').offset().top}, 500);
	$(".active").removeClass("active");
	$("#landing-pages-menu").addClass("active");
        hideTransitionBar();

	},

    //remove pageId from here
    loadSavedLandingPage : function(pageId) {
        $('#content').html("<div id='landingpages-listeners'></div>");
        initializeLandingPageListeners(pageId);

        var data = {
            "templateId" : pageId,
            "action" : "edit"
        };        

        getTemplate("landingpages-add", data, undefined, function(ui){
            $("#landingpages-listeners").html($(ui));
        }, "#landingpages-listeners");
	
	$('html, body').animate({scrollTop: $('body').offset().top}, 500);
	$(".active").removeClass("active");
	$("#landing-pages-menu").addClass("active");

    /*
    *calling setInterval function for everey 5min 
    *for the autoSave of the landing page
    */
    var lpAutoSaveRec = setInterval(function(){
            if(Current_Route.indexOf("landing-page/") == -1) {
                clearInterval(lpAutoSaveRec);
            } else {
                saveLandingPageToDataStore(true,pageId);
            }              
        },5*60*1000);
    
    hideTransitionBar();

    },

    pageSettings : function(pageId) {

        $('#content').html("<div id='landingpages-listeners'></div>");
        initializeLandingPageListeners(pageId);

        $.getJSON("core/api/landingpages/custom-domain/"+pageId, function(data){
            data = data || {};
            data["pageid"] = pageId;
            getTemplate("landingpages-settings", data, undefined, function(ui){
                $("#landingpages-listeners").html($(ui));
                var cnameEL = document.getElementById("cname");
                if($("#cname").attr("href") != "") {
                    var parts = cnameEL.hostname.split('.');
                    $("#sub_domain").val(parts.shift());
                    $("#domain").val(parts.join('.'));

                    var dirPath = cnameEL.pathname;
                    if(dirPath.charAt(0) === '/'){
                        dirPath = dirPath.substr(1);
                    }
                    $("#directory_path").val(dirPath);
                }
            }, "#landingpages-listeners");
        });
        
       $(".active").removeClass("active");
	   $("#landing-pages-menu").addClass("active");
       hideTransitionBar();
    },

    copySelectedLandingPage :function(defaultTemplateId) {
       $('#content').html("<div id='landingpages-listeners'></div>");
        initializeLandingPageListeners();

        var data = {
            "templateId" : defaultTemplateId,
            "action" : "copy"
        };

        getTemplate("landingpages-add", data, undefined, function(ui){
            $("#landingpages-listeners").html($(ui));
        }, "#landingpages-listeners");
    
    $('html, body').animate({scrollTop: $('body').offset().top}, 500);
    $(".active").removeClass("active");
    $("#landing-pages-menu").addClass("active");
        hideTransitionBar();
    }
	
});
/**
 * Creates backbone router to access preferences of the user
 */
var PortletsRouter = Backbone.Router
		.extend({

			routes : {
				"add-dashlet" : "adddashlet"
			},


			adddashlet : function() {

				// Back to dashboard if gridster not initalized
				/*if (!gridster) {
					App_Portlets.navigate("dashboard", {
						trigger : true
					});
					return;
				} */

					
				$('#content').html("<div id='portlets-add-listener'></div>");

				// Load portlets
				this.Catalog_Portlets_View = new Base_Collection_View(
						{
							url : '/core/api/portlets/default',
							templateKey : "portlets-add",
							sort_collection : false,
							individual_tag_name : 'div',

							postRenderCallback : function(el) {
								$('#dashlet-tabs-content a[href="#contacts_dashlet"]').tab('show');
								
								// Hide activity/Deals/tasks tab if no deals
								// portlets are there
								// (Previliges not allowing to show)
								var array = [ "deals", "taksAndEvents",
										"userActivity" ];
								$.each(array, function(i, item) {
									if ($('#' + item).children().length == 0)
										$('#' + item).closest(".tab-container").find('.' + item+"-aclpermission")
												.hide();
								});

								// Preload images (Images are not showing while
								// popover if they are not preloaded)
								preloadImages([
										updateImageS3Path('flatfull/img/dashboard_images/Mini-Calendar.jpg'),
										updateImageS3Path('flatfull/img/dashboard_images/stats.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Leaderboard.png'),
										updateImageS3Path('flatfull/img/dashboard_images/account-information.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Activities.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Agile-Blog.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Calls.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Deals-Funnel.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Email-opened.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Events.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Milestone.png'),
										updateImageS3Path('flatfull/img/dashboard_images/My-contacts.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Pending-Deals.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Revenue-graph.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Tag-Graph.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Task-report.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Task.png'),
										updateImageS3Path('flatfull/img/dashboard_images/User-Activities.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Campaign-stats-new.jpg'),
										updateImageS3Path('flatfull/img/dashboard_images/Quota.png'),
										updateImageS3Path('flatfull/img/dashboard_images/incoming-deals-new.png'),
										updateImageS3Path('flatfull/img/dashboard_images/lost-deal-analysis-new.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Average_deviation.png'),
										updateImageS3Path('flatfull/img/dashboard_images/Refferalurl-Stats-new.png'),

								]);
								// Event initializers
								initializeAddPortletsListeners();
								//initializePortletsListeners();
							}
						});

				// Override append Item to show our custom view
				this.Catalog_Portlets_View.appendItem = organize_portlets;

				// 
				this.Catalog_Portlets_View.collection.fetch();

				$('#portlets-add-listener').html(
						this.Catalog_Portlets_View.render().el);

			}
		});

/*
 * Append the dashbaord images to body.
 */
function preloadImages(arrayOfImages) {
	$(arrayOfImages).each(function() {
		$('<img />').attr('src', this).appendTo('body').css('display', 'none');
	});
}

/*
 * Delete pop up modal sholud be open for deleting portlet.
 */
function deletePortlet(el) {

	var p_id = el.id.split("-close")[0];
	var $modal = $('#portletDeleteModal');

	$modal.modal('show');
	$modal.find('.save-modal').attr('id', p_id);

	var model = Portlets_View.collection.get(p_id);
	var header_text = $('#' + p_id).parent()
			.find('.portlet_header > h4 > span').text();
	var header_sub_text = $('#' + p_id).parent().find(
			'.portlet_header > h4 > small').text();

	var deleteWarnHTML = "";

	if (header_text && header_text.trim() != "Getting Started")
		deleteWarnHTML = "Are you sure you want to delete Dashlet - "
				+ header_text.trim() + " " + header_sub_text.trim() + "?";

	else if (header_text && header_text.trim() == "Getting Started")
		deleteWarnHTML = "Are you sure you want to delete Dashlet - "
				+ header_text.trim()
				+ "?<br/>This dashlet can't be added back again.";

	else if (model.get("name") == "Leaderboard")
		deleteWarnHTML = "Are you sure you want to delete Dashlet - Leaderboard "
				+ portlet_utility.getDurationForPortlets(
						model.get("settings").duration, function(duration) {
							return duration;
						}) + "?";

	else if (model.get("name") == "Mini Calendar")
		deleteWarnHTML = "Are you sure you want to delete Dashlet - Mini Calendar?";

	else if (model.get("name") == "Deal Goals")
		deleteWarnHTML = "Are you sure you want to delete Dashlet - Deal Goals "
				+ portlet_utility.getDurationForPortlets(
						model.get("settings").duration, function(duration) {
							return duration;
						}) + "?";

	else
		deleteWarnHTML = "Are you sure you want to delete Dashlet - Activity Overview "
				+ portlet_utility.getDurationForPortlets(
						model.get("settings").duration, function(duration) {
							return duration;
						}) + "?";


	$modal.find(".modal-body").html(deleteWarnHTML);
}

/**
 * Hiding all errors related to tag graph settings.
 */
function hidePortletErrors(ele) {
	if ($('#' + ele.id).next().is(':visible'))
		$('#' + ele.id).next().hide();
}

/**
 * Convert time in human readable format.
 */
function displayTimeAgo(elmnt)
{
	head.js('lib/jquery.timeago.js', function()
	{
		$(".time-ago", elmnt).timeago();
	});
	
	console.log($("article.stream-item").parent());
	
	$("article.stream-item").parent().addClass("social-striped");
}


function updateImageS3Path(imageUrl){

	if(!imageUrl)
		  imageUrl = "";
	
	try{
		if(imageUrl){
			imageUrl = imageUrl.replace("flatfull/", "").replace(/\.{2}/g, '');
	    }	
	}catch(e){}
		  

	if(!S3_STATIC_IMAGE_PATH)
		S3_STATIC_IMAGE_PATH = "//doxhze3l6s7v9.cloudfront.net/beta/static/";

	return (S3_STATIC_IMAGE_PATH + imageUrl);
}
var ReferelRouter = Backbone.Router.extend({

	routes : {

	"referrals" : "referrelprogram",
	"refer-friends" : "referFriends",
	"referral" : "Referrals"
	},

	referrelprogram : function()
	{

		head.js(LIB_PATH + '../lib/zeroclipboard/ZeroClipboard.js', function()
		{
			referelsview = new Base_Collection_View({ url : '/core/api/users/getreferedbyme?reference_domain=' + CURRENT_DOMAIN_USER.domain,
				templateKey : "referrals", individual_tag_name : 'tr', postRenderCallback : function(el)
				{

					initZeroClipboard("url_clip_button", "referral_url");

				} });

			referelsview.collection.fetch();

			$('#content').html(referelsview.render().el);
		});
	},
	refer : function()
	{
		Agile_GA_Event_Tracker.track_event("Refer");
		load_facebook_lib_for_referrals();
		$.ajax({
			url : 'core/api/refer',
			type : 'GET',
			dataType : 'json',
			success : function(data){
				REFER_DATA = data;
				getTemplate("refer-modal", {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#referModal').html($(template_ui));
					getTemplate("refer-modal-body", data, undefined, function(template_ui1){
						if(!template_ui1)
							  return;
						$('#referModal').find(".modal-body").html($(template_ui1));
						$('#referModal').modal("show");
					}, null);
				}, null);
			}
		});

	},

	referFriends : function()
	{
		var subject = "I am using Agile CRM and I really love it! Try it now.";
		var body = "Hi,<br><br>I am using Agile CRM and I really love it!<br><br>It is a combination of important features like email marketing, call campaign, online scheduling, landing pages, Web rules and many others. This service is true value for money!<br><br>What to try it? Let's start by signing up with below link:<br>http://www.agilecrm.com/pricing?utm_source=affiliates&utm_medium=web&utm_campaign="+CURRENT_DOMAIN_USER.domain+"<br><br>Best Regards";
		sendMail(undefined,subject,body,undefined,undefined,this);
	},

	/**
	 * Fetches all the Users refered by the current domain user and show the plan 
	 * the new users subscribed to and dispaly the time when they had created
	 */
	Referrals : function(el)
	{
		
		var Subscribers = new Base_Collection_View({ url :'core/api/refer/refered_domains',  templateKey : "refer-users",individual_tag_name : "tr",postRenderCallback :function(el){
			console.log("Subscribers")
		}
			});
		Subscribers.collection.fetch();
		
		$('#content').html(Subscribers.render().el);

	}

	 });
/**
 * Creates a backbone router to create, read and update reports
 * 
 * @module Reports
 */
var ReportsRouter = Backbone.Router
		.extend({

			routes : {

			/* Reports */
			"reports" : "reports", "email-reports" : "emailReportTypes", "activity-reports" : "activityReports", "activity-report-add" : "activityReportAdd",
				"activity-report-edit/:id" : "activityReportEdit", "campaign-reports" : "campaignReports","contact-reports" : "emailReports", 
				"report-add" : "reportAdd","campaign-report-add" : "campaignReportAdd", "campaign-report-edit/:id" : "campaignReportEdit",
				"report-campaign-results/:id" : "campaignReportInstantResults","report-edit/:id" : "reportEdit", "report-results/:id" : "reportInstantResults", "report-charts/:type" : "reportCharts",
				"report-funnel/:tags" : "showFunnelReport", "report-growth/:tags" : "showGrowthReport", "report-ratio/:tag1/:tag2" : "showRatioReport","report-sales":"showrevenuegraph","report-deals":"showIncomingDeals","report-calls/:type" : "showCallsReport","user-reports": "showUserReports",
				"report-lossReason":"showDealsLossReason","reports-wonDeals":"showDealsWonChart","rep-reports":"showRepPerformance","report-comparison":"showComparisonReport" },


			/**
			 * Shows reports categories 
			 */
			reports : function()
			{
				report_utility.loadReportsTemplate(function(){
				var tab_active=$('.nav-tabs li:first-child>a').attr('href').substring(1);
				var tav_inner = $('.nav-tabs li li:first-child>a').attr('href').substring(1);
				$.each($('.tab-content .tab-pane'),function()
				{
					if($(this).attr('id')==tav_inner)
					{
						var route=$('a',this).attr('href').substring(1);
						_agile_set_prefs("reports_tab",tab_active);
						$('#reports-tab-container a[href="#'+tab_active+'"]').parent().addClass('report-selected');
						Backbone.history.loadUrl(route);
						return;
					}
				});
			});
			},

			/**
			 * Shows email-reports categories
			 */
			emailReportTypes : function()
			{
				getTemplate('email-report-categories', {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;
					$('#content').html($(template_ui));

					$(".active").removeClass("active");
					$("#reportsmenu").addClass("active");

				}, "#content");

			},

			/** shows list of activity reports added * */
			activityReports : function()
			{
			
				this.activityReports = new Base_Collection_View({ url : '/core/api/activity-reports', restKey : "activityReports",
					templateKey : "activity-report", individual_tag_name : 'tr', postRenderCallback : function()
					{
						initializeActivityReportsListeners();
					} });

				this.activityReports.collection.fetch();
				var b=this.activityReports;
					report_utility.loadReportsTemplate(function(){
				$(".reports-Container").html(getRandomLoadingImg());
				$(".reports-Container").html(b.render().el);

				$(".active").removeClass("active");
				$("#reportsmenu").addClass("active");
				});
			},

			/** shows list of campaign reports added * */
			campaignReports : function()
			{
				//$("#content").html("<div id='reports-listerners-container'></div>");

				this.reports = new Base_Collection_View({ url : '/core/api/campaignReports', restKey : "reports", templateKey : "report-campaign", individual_tag_name : 'tr',
					postRenderCallback : function()
					{
						initializeReportsListeners();
					} });



				this.reports.collection.fetch();
				var b=this.reports;
				report_utility.loadReportsTemplate(function(){
				$(".reports-Container").html(b.render().el);
			});
			},

			/**
			 * adds new activity report with various condtion like user, type of
			 * activity ,user email ,frequency and advanced conditions
			 */
			activityReportAdd : function()
			{

				if (!tight_acl.checkPermission('REPORT'))
					return;

				if (!tight_acl.checkPermission('ACTIVITY'))
					return;

				$("#content").html("<div id='reports-listerners-container'></div>");
				$("#reports-listerners-container").html(getRandomLoadingImg());
				count = 0;

				var activity_report_add = new Base_Model_View({ url : 'core/api/activity-reports', template : "activity-reports-add",
					window : "activity-reports", isNew : true, postRenderCallback : function(el)
					{

						initializeActivityReportsListeners();
						initializeReportsListeners();
						if (count != 0)
						 return;

						report_utility.load_activities(el);

					} });

				$("#reports-listerners-container").html(getRandomLoadingImg());
				activity_report_add.render();

			},

			/**
			 * adds new campaign report with various condtion like user,
			 * campaign ,user email ,frequency and advanced conditions
			 */
			campaignReportAdd : function()
			{

				count = 0;

				$("#content").html("<div id='reports-listerners-container'></div>");
				$("#reports-listerners-container").html(getRandomLoadingImg());

				SEARCHABLE_CONTACT_CUSTOM_FIELDS = undefined;
				var report_add = new Report_Filters_Event_View({ url : 'core/api/campaignReports', template : "reports-campaign-add", window : "campaign-reports", isNew : true,
					postRenderCallback : function(el)
					{
						initializeReportsListeners();
						var optionsTemplate = "<option value='{{id}}'{{#if is_disabled}}disabled=disabled>{{name}} (Disabled){{else}}>{{name}}{{/if}}</option>";
						fillSelect('campaign-select', '/core/api/workflows', 'workflow', function(id)
							{
								//$('#campaign-select', el).find('option[value=' + campaign_id + ']').attr('selected', 'selected');
							}, optionsTemplate, false, el);
						// Counter to set when script is loaded. Used to avoid
						// flash in
						// page
						if (count != 0)
							return;

						report_utility.load_contacts(el, count);

					} });

				$("#reports-listerners-container").html(getRandomLoadingImg());
				report_add.render();

			},

			/**
			 * Edits a report by de-serializing the existing report into its
			 * saving form, from there it can be edited and saved. Populates
			 * users and loads agile.jquery.chained.min.js to match the
			 * conditions with the values of input fields.
			 */
			campaignReportEdit : function(id)
			{
				$("#content").html("<div id='reports-listerners-container'></div>");
				$("#reports-listerners-container").html(getRandomLoadingImg());

				// Counter to set when script is loaded. Used to avoid flash in
				// page
				count = 0;

				// Gets a report to edit, from reports collection, based on id
				var report = this.reports.collection.get(id);
				var report_model = new Report_Filters_Event_View({
					url : 'core/api/campaignReports',
					change : false,
					model : report,
					template : "reports-campaign-add",
					window : "campaign-reports",
					id : "reports-listerners-container",
					postRenderCallback : function(el)
					{
						initializeReportsListeners();

						if (count != 0)
							return;

						var optionsTemplate = "<option value='{{id}}'{{#if is_disabled}}disabled=disabled>{{name}} (Disabled){{else}}>{{name}}{{/if}}</option>";


						fillSelect('campaign-select', '/core/api/workflows', 'workflow', function fillCampaign()
						{
							var value = report.toJSON();
							if (value)
							{
								$('#campaign-select', el).find('option[value=' + value.campaignId + ']').attr('selected', 'selected');
							}
						}, optionsTemplate, false, el);

						// Gets a report to edit, from reports collection, based
						// on id

						fillSelect("custom-fields-optgroup", "core/api/custom-fields/scope?scope=CONTACT", undefined, function()
						{

							loadActivityReportLibs(function()
							{
								report_utility.edit_contacts(el, report, true);
							});
	

						}, '<option value="custom_{{field_label}}">{{field_label}}</option>', true, el);

						head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/agile.jquery.chained.min.js', LIB_PATH + 'lib/jquery.multi-select.js',
								function()
								{

									chainFiltersForContact(el, report.toJSON(), function()
									{
										++count
										if (count > 1)
											deserialize_multiselect(report.toJSON(), el);
									});

									scramble_input_names($(el).find('div#report-settings'));
								});

					} });

				$("#reports-listerners-container").html(getRandomLoadingImg());
				report_model.render();

			},


			/**
			 * Edits a report by de-serializing the existing report into its
			 * saving form, from there it can be edited and saved. Populates
			 * users and loads agile.jquery.chained.min.js to match the
			 * conditions with the values of input fields.
			 */
			activityReportEdit : function(id)
			{

				if (!tight_acl.checkPermission('REPORT'))
					return;

				if (!tight_acl.checkPermission('ACTIVITY'))
					return;

				$("#content").html("<div id='reports-listerners-container'></div>");
				$("#reports-listerners-container").html(getRandomLoadingImg());

				// Counter to set when script is loaded. Used to avoid flash in
				// page
				count = 0;

				// If reports view is not defined, navigates to reports
				if (!this.activityReports || !this.activityReports.collection || this.activityReports.collection.length == 0 || this.activityReports.collection
						.get(id) == null)
				{
					this.navigate("activity-reports", { trigger : true });
					return;
				}

				// Gets a report to edit, from reports collection, based on id
				var activityReport = this.activityReports.collection.get(id);
				var report_model = new Base_Model_View({
					url : 'core/api/activity-reports',
					change : false,
					model : activityReport,
					template : "activity-reports-add",
					window : "activity-reports",
					postRenderCallback : function(el)
					{
						initializeActivityReportsListeners();
						initializeReportsListeners();
						if (count != 0)
							return;

						fillSelect("users-list", '/core/api/users', 'domainUser', function()
						{
							var json = activityReport.toJSON();
							var time = json.activity_start_time;

							var frequency = json.frequency;

							deserializeForm(json, $('#activityReportsForm', el));

							head.js(LIB_PATH + 'lib/jquery.multi-select.js', CSS_PATH + 'css/businesshours/jquerytimepicker.css',
									LIB_PATH + 'lib/businesshours/jquerytimepicker.js', function()
									{

										report_utility.edit_activities(el, json);

									});
						}, '<option value="{{id}}">{{name}}</option>', true, el);

					} });

				$("#reports-listerners-container").html(getRandomLoadingImg());
				report_model.render();

			},

			/**
			 * Shows list of reports, with an option to add new report
			 */
			emailReports : function()
			{
				
				//$("#content").html("<div id='reports-listerners-container'></div>");
				this.reports = new Base_Collection_View({ url : '/core/api/reports', restKey : "reports", templateKey : "report", individual_tag_name : 'tr',
					postRenderCallback : function()
					{
						initializeReportsListeners();
					} });

				this.reports.collection.fetch();
				var a=this.reports;
				report_utility.loadReportsTemplate(function(){
				$(".reports-Container").html(a.render().el);
			});

			},

			/**
			 * Loads a template to add new report. Populates users drop down
			 * list and loads agile.jquery.chained.min.js to chain conditions
			 * and values of input fields, from postRenderCallback of its
			 * Base_Model_View.
			 */
			reportAdd : function()
			{
				count = 0;

				$("#content").html("<div id='reports-listerners-container'></div>");
				$("#reports-listerners-container").html(getRandomLoadingImg());

				SEARCHABLE_CONTACT_CUSTOM_FIELDS = undefined;
				var report_add = new Report_Filters_Event_View({ url : 'core/api/reports', template : "reports-add", window : "contact-reports", isNew : true,
					postRenderCallback : function(el)
					{
						initializeReportsListeners();
						// Counter to set when script is loaded. Used to avoid
						// flash in
						// page
						if (count != 0)
							return;

						report_utility.load_contacts(el, count);

					} });

				$("#reports-listerners-container").html(getRandomLoadingImg());
				report_add.render();
			},

			/**
			 * Edits a report by de-serializing the existing report into its
			 * saving form, from there it can be edited and saved. Populates
			 * users and loads agile.jquery.chained.min.js to match the
			 * conditions with the values of input fields.
			 */
			reportEdit : function(id)
			{
				$("#content").html("<div id='reports-listerners-container'></div>");
				$("#reports-listerners-container").html(getRandomLoadingImg());

				// Counter to set when script is loaded. Used to avoid flash in
				// page
				count = 0;

				// Gets a report to edit, from reports collection, based on id
				var report = this.reports.collection.get(id);
				var report_model = new Report_Filters_Event_View({
					url : 'core/api/reports',
					change : false,
					model : report,
					template : "reports-add",
					window : "contact-reports",
					id : "reports-listerners-container",
					postRenderCallback : function(el)
					{
						initializeReportsListeners();

						if (count != 0)
							return;

						// Gets a report to edit, from reports collection, based
						// on id
						fillSelect("custom-fields-optgroup", "core/api/custom-fields/scope?scope=CONTACT", undefined, function()
						{

							loadActivityReportLibs(function()
							{
								report_utility.edit_contacts(el, report);
							});
	

						}, '<option value="custom_{{field_label}}">{{field_label}}</option>', true, el);

						head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/agile.jquery.chained.min.js', LIB_PATH + 'lib/jquery.multi-select.js',
								function()
								{

									chainFiltersForContact(el, report.toJSON(), function()
									{
										++count
										if (count > 1)
											deserialize_multiselect(report.toJSON(), el);
									});

									scramble_input_names($(el).find('div#report-settings'));
								});

					} });

				$("#reports-listerners-container").html(getRandomLoadingImg());
				report_model.render();

			},

			/**
			 * Shows report results. It gets report object from reports list, if
			 * it is list is not available then it fetches report based on
			 * report id, send request to process results, and shows them
			 */
			reportInstantResults : function(id, report)
			{
				report_utility.loadReportsTemplate(function(){
				if (!report)
				{
					// If reports view is not defined, navigates to reports
					if (!this.reports || !this.reports.collection || this.reports.collection.length == 0 || this.reports.collection.get(id) == null)
					{

						// Shows loading while report is being fetched
						$(".reports-Container").html(getRandomLoadingImg());
						var reportModel = new Backbone.Model();
						reportModel.url = "core/api/reports/" + id;
						reportModel.fetch({ success : function(data)
						{
							// Fetches reports and call to show instant results
							App_Reports.reportInstantResults(id, data.toJSON());
						} });
						return;

					}
					else
					{
						report = this.reports.collection.get(id).toJSON();
					}

				}

				// Stores in global variable, as it is required to build custom
				// table
				// headings
				REPORT = report;

				var report_results_view = new Base_Collection_View({ url : "core/api/reports/show-results/" + id, modelData : report,
					templateKey : "report-search", individual_tag_name : 'tr', cursor : true, sort_collection : false, page_size : 15, });// Collection
				var _that = this;
				
				$.getJSON("core/api/custom-fields/type/scope?type=DATE&scope=CONTACT", function(customDatefields)
				{
					// Report built with custom table, as reports should be
					// shown with
					// custom order selected by user
					report_results_view.appendItem = function(base_model)
					{
						reportsContactTableView(base_model, customDatefields, this);
					};

					report_results_view.collection.fetch();
				});
				$(".reports-Container").html(report_results_view.render().el);
				});
			},

			/**
			 * Shows report results. It gets report object from reports list, if
			 * it is list is not available then it fetches report based on
			 * report id, send request to process results, and shows them
			 */
			campaignReportInstantResults : function(id, report)
			{	
				
			report_utility.loadReportsTemplate(function(){
				var report_results_view = new Base_Model_View({ url : "core/api/campaignReports/show-results/" + id, template : "campaign-report-via-email"});// Collection
				var _that = this;
				$(".reports-Container").html(report_results_view.render().el);
			});
			},


			/**
			 * Returns Funnel reports based on tags
			 * 
			 * @param tags -
			 *            workflow id
			 */
			showFunnelReport : function(tags)
			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
				{
					getTemplate("report-funnel", {}, undefined, function(template_ui)
					{
						if (!template_ui)
							return;

						// Load Reports Template
						$('.reports-Container').html($(template_ui));
						
						// Set the name
						$('#reports-funnel-tags').text(tags);

						initFunnelCharts(function()
						{
							showFunnelGraphs(tags);
						});

						$(".active").removeClass("active");
						$("#reportsmenu").addClass("active");

						
						highlightDatepickerOption();

					}, ".reports-Container");

				});
				});
			},

			/**
			 * Returns growth report based on the tags
			 * 
			 * @param tags -
			 *            comma separated tags
			 */
			showGrowthReport : function(tags)
			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()

				{

					// Load Reports Template
					getTemplate("report-growth", {}, undefined, function(template_ui)
					{
						if (!template_ui)
							return;
						$('.reports-Container').html($(template_ui));

						// Set the name
						$('#reports-growth-tags').text(tags);

						initFunnelCharts(function()
						{
							showGrowthGraphs(tags);
						});

					}, ".reports-Container");

					
				});

				$(".active").removeClass("active");
				$("#reportsmenu").addClass("active");
				highlightDatepickerOption();
			});
			},
			
			
				
		/**
			 * Returns calls report
			 * 
			 * @param tags -
			 *            comma separated tags
			 */
			showCallsReport : function(reportType)
			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()

				{
					
					/** Default dropdown value to be considered*/ 
					var graphOn='number-of-calls';
					
					/**Default template id to be loaded*/
					var templateId="report-calls";
					
					/**when it is a call outcome selection*/
					if(reportType == 'pie-graph'){
						//templateId="report-calls-piechart";
						templateId=templateId+"-piechart";
						
					}
					if(reportType == 'timebased')
						templateId=templateId+"-timeGraph";
					
					getTemplate(templateId, {}, undefined, function(template_ui){
						if(!template_ui)
							  return;

						// Load Reports Template
						$('.reports-Container').html($(template_ui));
					
					/**Reinitialize the variable which holds the user preference abt report type*/
	               if(reportType == 'average-calls'){
						graphOn='average-calls';
						$('select[id="typeCall"]').find('option[value="average-calls"]').attr("selected",true);
						
					}else{
						$('select[id="typeCall"]').find('option[value="number-of-calls"]').attr("selected",true);
					}
	               
	               initReportsForCalls(function()
							{
	            	   
	            	   /** Get date range selected for every call back call */
	            	   
	            		var options = "?";

						var range = $('#range').html().split("-");
						var start_time=new Date(range[0]).getTime() / 1000;

						var end_value = $.trim(range[1]);

						
						if (end_value)
							end_value = end_value + " 23:59:59";

						var end_time=new Date(end_value).getTime() / 1000;
						options += ("start-date=" + start_time + "&end-date=" + end_time);
						
						var url='core/api/portlets/calls-per-person/' + options;
						if(reportType == 'timebased'){
										if ($('#frequency').length > 0)
									{
									// Get Frequency
									var frequency = $("#frequency").val();
									options += ("&frequency=" + frequency);
								}
							url='core/api/reports/calls-time-based/' + options;
						}
						graphOn=$("#typeCall option:selected").val();
					    
					    var userDropDown=$('#users option:selected').val();
					    
					    if(userDropDown != undefined){
					    	if(userDropDown != 'All' && userDropDown != ""){
								var usersUrl=url;
								url=url+'&user=["'+userDropDown+'"]';
							}
					    	
					    }
					     report_utility.call_reports(url,reportType,graphOn);
					    
							
							});

					}, ".reports-Container");
				});
				});
			},
			
			/**
			 * Shows User Reports
			 */
			showUserReports : function()

			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
						{
					getTemplate("report-revenue-user", {}, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	

						initUserReports(function()
								{
							salesReportGraphForUserReports();
							showLossReasonGraphForUserReports();
								
							var callReportUrl='core/api/portlets/calls-per-person/' + getSelectedDates();
							
							if ($('#owner').length > 0)
							{
								if ($("#owner").val() != "" && $("#owner").val() != "All Owners"){
								var user=$("#owner").val();
								callReportUrl=callReportUrl+'&user=["'+user+'"]';
							}
							}
							
							report_utility.user_reports(callReportUrl);
							
								});
						
						
				}, ".reports-Container");

						});
			});
			},



			/**
			 * Returns Ratio Graphs with two tag1
			 * 
			 * @param id -
			 *            workflow id
			 */
			showRatioReport : function(tag1, tag2)
			{

				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()

				{

					// Load Reports Template
					getTemplate("report-ratio", {}, undefined, function(template_ui)
					{
						if (!template_ui)
							return;
						$('.reports-Container').html($(template_ui));

						// Set the name
						$('#reports-ratio-tags').text(tag1 + " versus " + tag2);

						initFunnelCharts(function()
						{
							showRatioGraphs(tag1, tag2);
						});

						$(".active").removeClass("active");
						$("#reportsmenu").addClass("active");

						highlightDatepickerOption();

					}, ".reports-Container");

				});
				});

			},

			/**
			 * Shows reports charts of growth or funnel
			 */
			reportCharts : function(type)
			{
				report_utility.loadReportsTemplate(function(){
				var template_name = "report-growth";

				if (type)
					template_name = "report-" + type + "-form";

				//$("#content").html("<div id='reports-listerners-container'></div>");
				getTemplate(template_name, {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;

							var el = $(template_ui);
				$(".reports-Container").html(el);
				initializeChartReportsListeners();

				if (type && (type == 'growth' || type == 'funnel'))
				{
					setup_tags_typeahead();
					return;
				}
				$.each($("[id=tags-reports]", el), function(i, element)
				{
					console.log(element);
					addTagsDefaultTypeahead(element);
				});

				}, ".reports-Container");
			});
			},

			showIncomingDeals : function(){
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
						{

							// Load Reports Template
						getTemplate("report-deals", {}, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	


							initFunnelCharts(function()
							{
								showDealsGrowthReport();
							});
						}, ".reports-Container");
					});
			});
			},

			showDealsLossReason : function()
			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
				{

					// Load Reports Template
				getTemplate("report-DealsLoss", {}, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	

					initSalesCharts(function()
							{
						showLossReasonGraphs();
							});

					$(".active").removeClass("active");
					$("#reportsmenu").addClass("active");
				}, ".reports-Container");
			});
			});
			},

			showDealsWonChart : function()
			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
			initReportLibs(function()
				{

					// Load Reports Template
				getTemplate("report-DealsWon", {}, undefined, function(template_ui){

					if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	

					initSalesCharts(function()
							{
						showWonPieChart();
							});

				$(".active").removeClass("active");
				$("#reportsmenu").addClass("active");
				}, ".reports-Container");
			  });	
		});
},

			showrevenuegraph : function()
			{
						hideTransitionBar();
						report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
				{
							// Load Reports Template
						getTemplate("report-sales", {}, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	
							// Set the name

							initSalesCharts(function()
							{
								showsalesReportGraphs();
					});
						}, ".reports-Container");
					});
			});
			},

			showComparisonReport : function()
			{
					hideTransitionBar();
					report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
				{
							// Load Reports Template
						getTemplate("report-comparison", {}, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	
							// Set the name

							initComparisonReports(function()
							{
								showComparisonReportGraph();
					});
						}, ".reports-Container");
					});
			});
			},
			
			showRepPerformance : function()
			{
				hideTransitionBar();
				report_utility.loadReportsTemplate(function(){
				initReportLibs(function()
				{
							// Load Reports Template
						getTemplate("report-user-performance", {}, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('.reports-Container').html($(template_ui));	
							// Set the name

						initRepReports(function()
							{
								showRepPerformanceReport();
								
					});
						}, ".reports-Container");
					});
			});
			},
			
});

var count = 0;
/**
 * Creates backbone router to access preferences of the user (email templates,
 * email (gmail/IMAP), notifications and etc..).
 */

var HAS_EMAIL_ACCOUNT_LIMIT_REACHED = false;

var EMAIL_PREFS_WIDGET_SIZE = 0;

var SettingsRouter = Backbone.Router
		.extend({
			routes : {

			/* Settings */
			"settings" : "settings",

			/* User preferences */
			"user-prefs" : "userPrefs",

			/* Change Password */
			"change-password" : "changePassword",

			/* Email (Gmail / IMAP) */
			"email" : "email",

			/* IMAP add prefs */
			"imap" : "imapAdd",

			/* IMAP edit prefs */
			"imap/:id" : "imapEdit",

			/* Office add prefs */
			"office" : "officeAdd",

			/* Office edit prefs */
			"office/:id" : "officeEdit",

			/* Social preferences */
			"social-prefs" : "socialPrefs",

			/* Gmail share preferences */
			"gmail/:id" : "gmailShare",

			/* Email templates */
			"email-templates" : "emailTemplates", "email-template-add" : "emailTemplateAdd", "email-template/:id" : "emailTemplateEdit",

			/* Notifications */
			"notification-prefs" : "notificationPrefs",

			/* scheduling */
			"scheduler-prefs" : "scheduler",

			/* support page */
			"help" : "support",

			/* contact-us help email */
			"contact-us" : "contactUsEmail",

			/* Theme & Layout page */
			"themeandlayout" : "themeandlayout" },

			/**
			 * Shows all the options to access user's Preferences
			 */
			/*
			 * settings : function() { var html = getTemplate("settings", {});
			 * $('#content').html(html); // Update Menu
			 * $(".select").removeClass("select");
			 * $("#settingsmenu").addClass("select"); },
			 */

			/**
			 * Creates a Model to show and edit Personal Preferences, and sets
			 * HTML Editor. Reloads the page on save success.
			 */
			userPrefs : function()
			{
				//var data;
				var that =this;
				getTemplate("settings", {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					getTemplate("settings-user-prefs-tab", {}, undefined, function(template_ui1){
						if(!template_ui1)
							  return;
						$('#prefs-tabs-content').html($(template_ui1));
					
						/* $('#prefs-tabs-content').html(getRandomLoadingImg()); */

						$.getJSON("/core/api/user-prefs", function(data){

							var prefsData = new BaseModel(data);
							that.userPrefsProfile(prefsData);
							$('#prefs-tabs-content a[href="#settings-user-prefs"]').on('click', function(e) {
								e.preventDefault();
								that.userPrefsProfile(prefsData);
								
							});

							$('#prefs-tabs-content a[href="#settings-reminders"]').on('click', function(e) {
								e.preventDefault();
								that.userPrefsReminders(prefsData);
								
							});
							$('#prefs-tabs-content a[href="#settings-advanced"]').on('click', function(e) {
								e.preventDefault();
								that.userPrefsAdvanced(prefsData);
								
							});

						}).done(function(){
							hideTransitionBar();
						}).fail(function(){
							hideTransitionBar();
						});
							
						$('#PrefsTab .select').removeClass('select');
						$('.user-prefs-tab').addClass('select');
						$(".active").removeClass("active");
						$("#prefs-tabs-content .prefs-profile").addClass("active");
						// $('#content').html(view.render().el);
					}, null);	
				}, "#content");
			},

			/**
			 * Creates a Model to show and edit Personal Preferences, and sets
			 * HTML Editor. Reloads the page on save success.
			 */
			changePassword : function()
			{

				getTemplate("settings", {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					getTemplate('settings-change-password', {}, undefined, function(template_ui1){
						if(!template_ui1)
							  return;

						$('#prefs-tabs-content').html($(template_ui1));	
						$('#PrefsTab .select').removeClass('select');
						$('.user-prefs-tab').addClass('select');
						$(".active").removeClass("active");

						// Save button action of change password form, If it is out of
						// this router wont navigate properly
						$("#saveNewPassword").on(
								"click",
								function(e)
								{

									e.preventDefault();
									var saveBtn = $(this);

									// Returns, if the save button has disabled
									// attribute
									if ($(saveBtn).attr('disabled'))
										return;

									// Disables save button to prevent multiple click
									// event issues
									disable_save_button($(saveBtn));

									var form_id = $(this).closest('form').attr("id");

									if (!isValidForm('#' + form_id))
									{

										// Removes disabled attribute of save button
										enable_save_button($(saveBtn));
										return false;
									}
									// Returns if same password is given
									if ($("#current_pswd").val() == $("#new_pswd").val())
									{
										$('#changePasswordForm').find('span.save-status').html(
												"<span style='color:red;margin-left:10px;'>Current and New Password can not be the same</span>");
										$('#changePasswordForm').find('span.save-status').find("span").fadeOut(5000);
										enable_save_button($(saveBtn));
										return false;
									}

									// Show loading symbol until model get saved
									$('#changePasswordForm').find('span.save-status').html(getRandomLoadingImg());

									var json = serializeForm(form_id);

									$.ajax({
										url : '/core/api/user-prefs/changePassword',
										type : 'PUT',
										data : json,
										success : function()
										{
											$('#changePasswordForm').find('span.save-status').html(
													"<span style='color:green;margin-left:10px;'>Password changed successfully</span>").fadeOut(5000);
											enable_save_button($(saveBtn));
											$('#' + form_id).each(function()
											{
												this.reset();
											});
											history.back(-1);
										},
										error : function(response)
										{
											$('#changePasswordForm').find('span.save-status').html("");
											$('#changePasswordForm').find('input[name="current_pswd"]').closest(".controls").append(
													"<span style='color:red;margin-left:10px;'>Incorrect Password</span>");
											$('#changePasswordForm').find('input[name="current_pswd"]').closest(".controls").find("span").fadeOut(5000);
											$('#changePasswordForm').find('input[name="current_pswd"]').focus();
											enable_save_button($(saveBtn));
										} });

								});

					}, "#prefs-tabs-content");

				}, "#content");
			},

			/**
			 * Shows social preferences (LinkedIn and Twitter) to get access.
			 * Loads linkedIn and then appends Twitter to the view
			 */
			socialPrefs : function()
			{
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));

					var data = { "service" : "linkedin" };
					var itemView = new Settings_Modal_Events({ url : '/core/api/social-prefs/LINKEDIN', template : "settings-social-prefs", data : data, postRenderCallback : function(el){
					} });

					$('#prefs-tabs-content').html(itemView.render().el);

					data = { "service" : "twitter" };
					var itemView2 = new Settings_Modal_Events({ url : '/core/api/social-prefs/TWITTER', template : "settings-social-prefs", data : data , postRenderCallback : function(el){
					} });

					$('#prefs-tabs-content').append(itemView2.render().el);
					$('#PrefsTab .select').removeClass('select');
					$('.social-prefs-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Shows Gmail and IMAP preferences to get access. Allows to get the
			 * communicated mails between contact and logged in preference.
			 */
			/**
			 * Shows Gmail and IMAP preferences to get access. Allows to get the
			 * communicated mails between contact and logged in preference.
			 */
			email : function()
			{
				var that = this;
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
						
					$('#content').html($(template_ui));	

					getTemplate('settings-email-prefs', {}, undefined, function(template_ui1){
							if(!template_ui1)
								  return;
							$('#prefs-tabs-content').html($(template_ui1));	
							that.imapListView = {};
							that.officeListView = {};
							that.gmailListView = {};

							$('#PrefsTab .select').removeClass('select');
							$('.email-tab').addClass('select');
							$(".active").removeClass("active");

					}, "#prefs-tabs-content");

					var socialHeight = 0;
					$.getJSON("/core/api/emails/synced-accounts", function(data)
					{
						if (typeof data !== undefined && data.hasOwnProperty('emailAccountsLimitReached') && data.emailAccountsLimitReached)
							HAS_EMAIL_ACCOUNT_LIMIT_REACHED = true;
						else
							HAS_EMAIL_ACCOUNT_LIMIT_REACHED = false;

						var limit = data.emailAccountsLimit;

						load_gmail_widgets(limit);
						load_imap_widgets(limit);
						load_office365_widgets(limit);

					});

				}, "#content");
			},

			/**
			 * Imap Update settings
			 */
			imapEdit : function(imap_id)
			{
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));
					if (App_Settings.imapListView === undefined)
					{
						App_Settings.navigate("email", { trigger : true });
						return;
					}

					var imapmodel = App_Settings.imapListView.collection.get(imap_id);
					// Gets IMAP Prefs
					var itemView2 = new Settings_Modal_Events({ url : '/core/api/imap/', model : imapmodel, template : "settings-imap-prefs", change : false,
						postRenderCallback : function(el)
						{
							var model = itemView2.model;
							var id = model.id;
							itemView2.model.set("password", "");
							load_imap_properties(model, el);
						}, saveCallback : function()
						{
							App_Settings.navigate("email", { trigger : true });
							return;
						} });
					// Appends IMAP
					$('#prefs-tabs-content').html(itemView2.render().el);
					$('#PrefsTab .select').removeClass('select');
					$('.email-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Imap Add settings
			 */
			imapAdd : function()
			{
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					// Gets IMAP Prefs
					var itemView2 = new Settings_Modal_Events({ url : '/core/api/imap/', template : "settings-imap-prefs", change : false, isNew : true,
						postRenderCallback : function(el)
						{
						}, saveCallback : function()
						{
							var model = itemView2.model;
							var json = model.toJSON();
							if (typeof json.isUpdated !== 'undefined' && json.hasOwnProperty('isUpdated') && json.isUpdated)
								App_Settings.navigate("email", { trigger : true });
							else
							{
								itemView2.render(true);
								var el = itemView2.el;
								var model = itemView2.model;
								load_imap_folders(el, model);
							}
						} });
					// Appends IMAP
					$('#prefs-tabs-content').html(itemView2.render().el);
					$('#PrefsTab .select').removeClass('select');
					$('.email-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Office Add settings
			 */
			officeAdd : function()
			{
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					// Gets Office Prefs
					var itemView3 = new Settings_Modal_Events({ url : '/core/api/office', template : "settings-office-prefs", isNew : true, change : false,
						postRenderCallback : function(el)
						{
							itemView3.model.set("password", "");
						}, saveCallback : function()
						{
							// $("#office-prefs-form").find("#office-password").val("");
							App_Settings.navigate("email", { trigger : true });
							return;
						} });
					// Appends Office
					$('#prefs-tabs-content').html(itemView3.render().el);
					$('#PrefsTab .select').removeClass('select');
					$('.email-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Office Update settings
			 */
			officeEdit : function(id)
			{
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					if (App_Settings.officeListView === undefined)
					{
						App_Settings.navigate("email", { trigger : true });
						return;
					}

					var office_model = App_Settings.officeListView.collection.get(id);

					// Gets Office Prefs
					var itemView3 = new Settings_Modal_Events({ url : '/core/api/office/', model : office_model, template : "settings-office-prefs",
						postRenderCallback : function(el)
						{
							itemView3.model.set("password", "");
						}, saveCallback : function()
						{
							// $("#office-prefs-form").find("#office-password").val("");
							App_Settings.navigate("email", { trigger : true });
							return;
						} });

					// Appends Office
					$('#prefs-tabs-content').html(itemView3.render().el);
					$('#PrefsTab .active').removeClass('select');
					$('.email-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Gmail sharing settings
			 */
			gmailShare : function(id)
			{
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					if (App_Settings.gmailListView === undefined)
					{
						App_Settings.navigate("email", { trigger : true });
						return;
					}
					var gmail_model = App_Settings.gmailListView.collection.get(id);
					// Gets GMAIL Prefs
					var gmailShareView = new Settings_Modal_Events({ url : 'core/api/social-prefs/share/' + id, model : gmail_model,
						template : "settings-gmail-prefs-share", postRenderCallback : function(el)
						{
							
						}, saveCallback : function()
						{
							App_Settings.navigate("email", { trigger : true });
							return;
						} });

					// Appends Gmail
					$('#prefs-tabs-content').html(gmailShareView.render().el);
					$('#PrefsTab .select').removeClass('select');
					$('.email-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Shows list of email templates, with an option to add new template
			 */
			emailTemplates : function()
			{
				var that = this;
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					that.emailTemplatesListView = new Base_Collection_View({ url : '/core/api/email/templates', restKey : "emailTemplates",
					templateKey : "settings-email-templates", individual_tag_name : 'tr', postRenderCallback : function(el)
					{
						head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
						{
							console.log("In email tmplt postrender");
							$(".created_time", el).timeago();
						});
					} });

					that.emailTemplatesListView.collection.fetch();
					$('#prefs-tabs-content').html(that.emailTemplatesListView.el);
					$('#PrefsTab .select').removeClass('select');
					$('.email-templates-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");

			},

			/**
			 * Loads a form to add new email-template. Sets HTMLEditor for the
			 * form. Navigates to list of email templates on save success.
			 */
			emailTemplateAdd : function()
			{

				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));
					var view = new Email_Template_Events({ url : '/core/api/email/templates', isNew : true, template : "settings-email-template-add",
					window : 'email-templates', postRenderCallback : function()
					{
					} });

					$('#prefs-tabs-content').html(view.render().el);

					// set up TinyMCE Editor
					setupTinyMCEEditor('textarea#email-template-html', false, undefined, function()
					{

						// Reset tinymce
						set_tinymce_content('email-template-html', '');

						// Register focus
						register_focus_on_tinymce('email-template-html');

						//To open source code automatically when "Bring Your Code" button is clicked
						if(typeof BRING_YOUR_CODE_BTN != "undefined" && BRING_YOUR_CODE_BTN) {
							$('.mce-i-code').trigger('click');
							BRING_YOUR_CODE_BTN = false;
						}
					});

					$('#PrefsTab .select').removeClass('select');
					$('.email-templates-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Updates existing email-template. On updation navigates the page
			 * to email-templates list
			 * 
			 * @param id
			 *            EmailTemplate Id
			 */
			emailTemplateEdit : function(id)
			{
				var that = this;
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					// Navigates to list of email templates, if it is not defined
					if (!that.emailTemplatesListView || that.emailTemplatesListView.collection.length == 0)
					{
						that.navigate("email-templates", { trigger : true });
						return;
					}

					// Gets the template form its collection
					var currentTemplate = that.emailTemplatesListView.collection.get(id);

					var view = new Email_Template_Events({ url : '/core/api/email/templates', model : currentTemplate, template : "settings-email-template-add",
						window : 'email-templates', postRenderCallback : function()
						{
						} });

					$('#prefs-tabs-content').html(view.render().el);

					/** TinyMCE * */

					// set up TinyMCE Editor
					setupTinyMCEEditor('textarea#email-template-html', false, undefined, function()
					{

						// Insert content into tinymce
						set_tinymce_content('email-template-html', currentTemplate.toJSON().text);

						// Register focus
						register_focus_on_tinymce('email-template-html');
					});

					/** End of TinyMCE* */

					$('#PrefsTab .select').removeClass('select');
					$('.email-templates-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
				if ($('#attachment_id').val())
				{
					var el = $('#tpl-attachment-select').closest("div");
					$('#tpl-attachment-select').hide();
					el.find(".attachment-document-select").css("display", "inline");
					var optionsTemplate = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' size='{{size}}' url='{{url}}'>{{name}}</option>";
        			fillSelect('attachment-select','core/api/documents', 'documents',  function fillNew()
					{
						el.find("#attachment-select option:first").after("<option value='new'>Upload new doc</option>");
						$('#attachment-select').find('option[value='+$('#attachment_id').val()+']').attr("selected","selected");
						$('.add-tpl-attachment-confirm').trigger("click");
						$('#tpl-attachment-select').hide();
						$('#tpl-attachment-name').show();
					}, optionsTemplate, false, el);
				}
			},

			/**
			 * Creates a Model to show and edit notification preferences.
			 * Reloads the page on save success.
			 */
			notificationPrefs : function()
			{

				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					var view = new Settings_Modal_Events({
					url : 'core/api/notifications',
					template : 'settings-notification-prefs',
					reload : true,
					postRenderCallback : function(el)
					{
						// Update Notification prefs
						notification_prefs = view.model.toJSON();

						console.log("updated notification prefs are...");
						console.log(notification_prefs);

						head.load(CSS_PATH + 'css/bootstrap_switch.css', LIB_PATH + 'lib/bootstrapSwitch.js', function()
								{
									showSwitchChanges(el);
									check_browser_notification_settings(el);
								});
						try
						{
							$('#notification-switch', el).bootstrapSwitch();
						}
						catch (err)
						{
							console.log(err);
						}

						// plays notification sounds
						notification_play_button()

						// to show notification-switch in safari properly
						if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1)
							$('#notification-switch').parent().css('margin-top', '-32px');
					} });

					$('#prefs-tabs-content').html(view.render().el);
					$('#PrefsTab .select').removeClass('select');
					$('.notification-prefs-tab').addClass('select');
					$(".active").removeClass("active");

				}, "#content");
			},

			/**
			 * Support page
			 */
			support : function()
			{
				load_clickdesk_code();

				getTemplate('support-form', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					$(".active").removeClass("active");
					$("#helpView").addClass("active");

					try
					{
						CLICKDESK_Live_Chat
								.onStatus(function(status)
								{

									if (status == "online")
										$("#clickdesk_status")
												.html(
														'Chat with our support representative.<br/> <a class="text-info c-p" onclick="CLICKDESK_LIVECHAT.show();">Start chat</a>.');
									else
										$("#clickdesk_status")
												.html(
														'No chat support representative is available at the moment. Please<br/> <a href="#contact-us" id="show_support">leave a message</a>.');
								});

					}
					catch (e)
					{

						setTimeout(
								function()
								{

									CLICKDESK_Live_Chat
											.onStatus(function(status)
											{

												if (status == "online")
													$("#clickdesk_status")
															.html(
																	'Chat with our support representative.<br/> <a class="text-info c-p" onclick="CLICKDESK_LIVECHAT.show();">Start chat</a>.');
												else
													$("#clickdesk_status")
															.html(
																	'No chat support representative is available at the moment. Please<br/> <a href="#contact-us" id="show_support">leave a message</a>.');
											});

								}, 5000);

					}

					hideTransitionBar();


				}, "#content");
			},

			scheduler : function()
			{
				$('#content').html("<div id='online-cal-listners'>&nbsp;</div>");
				getTemplate('settings', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#online-cal-listners').html($(template_ui));

					var view = new Base_Model_View({
					url : 'core/api/scheduleprefs',
					type : 'GET',
					template : 'settings-online-calendar-new',
					postRenderCallback : function(el)
					{
						$('#online-calendar a[href="#calendar-tab"]', el).tab('show');
						//online_calendar_tabs.loadScheduleUrlTab("#online-cal-listners");

						var currentDomain = getCurrentDomain();

						var onlineschedulingURL = "https://" + currentDomain + ".agilecrm.com/calendar/" + view.model.get('schedule_id');

						$("#scheduleurl").attr("href", onlineschedulingURL);
						$("#scheduleurl").text(onlineschedulingURL);

						$("#scheduleurl").removeClass("nounderline");

						head.js(CSS_PATH + 'css/businesshours/businesshours.css', CSS_PATH + 'css/businesshours/jquerytimepicker.css',
								LIB_PATH + 'lib/businesshours/businesshours.js', LIB_PATH + 'lib/businesshours/jquerytimepicker.js',LIB_PATH+'lib/summer-note/summernote.js',CSS_PATH+'css/summernote/summernote.css', function()
								{
									var json = JSON.parse(view.model.get('business_hours'));
									console.log();
									businessHoursManager = $("#define-business-hours").businessHours({ operationTime : json,

									postInit : function()
									{
										$('.operationTimeFrom, .operationTimeTill').timepicker({ 'timeFormat' : 'H:i', 'step' : 30 });
									}, });

									$(".mini-time").keydown(false).addClass("form-control");
									
									
									$(".online_summer_note")
								     .summernote({
	
									      toolbar : [
									        [
									          'style',
									          [ 'bold', 'italic', 'underline',
									            'clear' ] ],
									        [ 'fontsize', [ 'fontsize' ] ],
									        [ 'insert', [ 'link' ] ] ],
									        height:'100'
									     });
										 
										 $(".online_summer_note").code(view.model.get('user_calendar_title'));

								});
						
						initializeOnlineCalendarListners(el);

					} });
				$('#prefs-tabs-content').html(view.render().el);
				$('#PrefsTab .select').removeClass('select');
				$('.scheduler-prefs-tab').addClass('select');
				$(".active").removeClass("active");

				}, "#online-cal-listners");
			},

			/**
			 * Contact us email
			 */
			contactUsEmail : function()
			{
				getTemplate('help-mail-form', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					$(".active").removeClass("active");
					$("#helpView").addClass("active");

				}, "#content");
			},

			/* theme and layout */

			themeandlayout : function()
			{
				// $("#content").html(getTemplate("theme-layout-form"), {});
				showTransitionBar();
				$
						.ajax({
							url : '/core/api/user-prefs',
							type : 'GET',
							dataType : "json",
							success : function(data)
							{
								getTemplate('theme-layout-form', {}, undefined, function(template_ui){
									if(!template_ui)
										  return;
									$('#content').html($(template_ui));	
									initializeThemeSettingsListeners();
									$("#menuPosition").val(CURRENT_USER_PREFS.menuPosition);
									$("#layout").val(CURRENT_USER_PREFS.layout);
									if (CURRENT_USER_PREFS.animations == true)
										$("#animations").attr('checked', true);
									$('.magicMenu  input:radio[name="theme"]').filter('[value=' + CURRENT_USER_PREFS.theme + ']').attr('checked', true);
									if (data.menuPosition != CURRENT_USER_PREFS.menuPosition || data.layout != CURRENT_USER_PREFS.layout || data.theme != CURRENT_USER_PREFS.theme || data.animations != CURRENT_USER_PREFS.animations)
										$(".theme-save-status").css("display", "inline");
									hideTransitionBar();

								}, "#content");

								
							}, error : function()
							{
								hideTransitionBar();
								showNotyPopUp("information", "error occured please try again", "top");
							} });

				/*
				 * var view = new Base_Model_View({ url :
				 * '/core/api/user-prefs', template : "theme-layout-form",
				 * postRenderCallback: function(el){} });
				 * $('#content').html(view.render().el); var data =
				 * view.model.toJSON();
				 * $("#menuPosition").val(CURRENT_USER_PREFS.menuPosition);
				 * $("#layout").val(CURRENT_USER_PREFS.layout); $('.magicMenu
				 * input:radio[name="theme"]').filter('[value='+CURRENT_USER_PREFS.theme+']').attr('checked',
				 * true); if(data.menuPosition !=
				 * CURRENT_USER_PREFS.menuPosition || data.layout !=
				 * CURRENT_USER_PREFS.layout || data.theme !=
				 * CURRENT_USER_PREFS.theme)
				 * $(".theme-save-status").css("display","inline");
				 */

				// $(".active").removeClass("active");
			},

			//preferences profile tab
			userPrefsProfile : function(data)
			{
				var prefs_profile_view = new Base_Model_View({ url : "core/api/user-prefs", model : data, template : "settings-user-prefs", change : false, reload : true,
					postRenderCallback : function(el)
					{	


						setupTinyMCEEditor('textarea#WYSItextarea', true, ["textcolor link image preview code"], function()
								{

									// Register focus
									register_focus_on_tinymce('WYSItextarea');
								});
						
					}});
					$("#settings-user-prefs-tab-content").html(prefs_profile_view.render(true).el);
				
			},

			//preferences reminders tab
			userPrefsReminders : function(data)
			{
				var prefs_reminders_view = new Base_Model_View({ url : 'core/api/user-prefs', model : data, template : 'settings-reminders', change : false, reload : true,
				postRenderCallback : function(el){
						
					}
				});
				$("#settings-user-prefs-tab-content").html(prefs_reminders_view.render(true).el);
			},

			//preferences advanced tab
			userPrefsAdvanced : function(data)
			{
				var prefs_advanced_view = new Base_Model_View({ url : 'core/api/user-prefs', model : data, template : 'settings-advanced', change : false, reload : true, 
					postRenderCallback : function(el){
						
					}
				});
				$("#settings-user-prefs-tab-content").html(prefs_advanced_view.render(true).el);
			}

		});


function getCurrentDomain(options){
	var url = window.location.host;
	var exp = /(\.)/;
	if (url.search(exp) >= 0){
		return url.split(exp)[0];
	}
	return " ";
}var ShopifyRouter = Backbone.Router.extend({
	routes: {
		"shopify/:shopurl" : "shopify","shopify":"shopify"
	},
	shopify: function(shopurl){
		var t_url = "core/shopifyapp?shop=" + shopurl;
		var response = {}; response["shopurl"] = shopurl;
		
		$.ajax({
			type : "GET",
			url : t_url,
			success: function(data){
				if(data){
					response["installed"] = true;

					getTemplate("shopifyboxes", response, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('#content').html($(template_ui));	
					}, "#content");

					return;
				}
				else{
					$.ajax({
						type : "POST",
						url : t_url,
						success: function(data){
							response["installed"] = false;
							getTemplate("shopifyboxes", response, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$('#content').html($(template_ui));	
							}, "#content");

							return;
						}
					});
				}
			}
		});
		
	}
});// Social suites stream and tweets.
var Streams_List_View;

// Scheduled updates.
var Scheduled_Updates_View;

// Stores tweets on scroll down in stream.
var Past_Tweets = [];

// Base-model to display data in Message modal and save in DB.
var Message_Model;

// Object of pubnub.
var Pubnub = null;

/**
 * Creates backbone router to create and access streams of the user.
 */
var SocialSuiteRouter = Backbone.Router.extend({

	routes : {
	
	// First function on click of tab
	"social" : "socialsuite",

	// Streams tab with collection
	"streams" : "streams",

	// Scheduled updates on new page
	"scheduledmessages" : "scheduledmessages" },

	before : 
	{	
		'*any': function(fragment, args, next) {
		// Gets template to display.
		getTemplate('socialsuite-show-streams', {}, undefined, function(template_ui){
			// For production versions
			if(HANDLEBARS_PRECOMPILATION)
				next();
			// For local env
			else {
				head.js("jscore/min/flatfull/social-suite-all-min.js", function(){
                   next();
				});
			}

		}, "#content");
	
		}
	},
	/**
	 * On click on social tab this function is called, to initialize social
	 * suite, it will include js files.
	 */
	socialsuite : function()
	{
		if(!tight_acl.checkPermission('SOCIAL'))
			return;
		
		initializeSocialSuite();

		// Makes tab active
		$(".active").removeClass("active");
		$("#socialsuitemenu").addClass("active");

		// Gets template to display.
		getTemplate('socialsuite-show-streams', {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			/* Creates pubnub object and channel dedicated for new user or relogin */
            initToPubNub(function() {
                if (!Pubnub.is_connected_call) {
                    return
                }
                Pubnub.is_connected_call = false;
                socialsuitecall.streams()
            });

			// Display added streams
			socialsuitecall.streams();

		}, "#content");
		
	}, // socialsuite end

	/**
	 * This will create collection and store social suite in that, all streams
	 * and tweets are displayed from this function and publish msg to register.
	 * 
	 * Format : Streams_List_View [streamView (tweetListView [tweet] ) ]
	 */
	streams : function(stream)
	{
		// If current location is social then only show streams
		var currentLocation = document.location.href;
		if(currentLocation.search("social") != -1)
		{
			var tab_content_elements = $('#content').find("#socialsuite-tabs-content");
			
			if(tab_content_elements && tab_content_elements.length > 0)
				console.log("do nothing");
			else{
				getTemplate('socialsuite-show-streams', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
				}, "#content");

			}	
		}

		// Check scheduled updates.
		checkScheduledUpdates();

		if (!Streams_List_View) // Streams not collected from dB
		{
			console.log("Creating Collection First Time.");
			Streams_List_View = new Base_Collection_View({ url : "/core/social", restKey : "stream", templateKey : "socialsuite-streams",
				individual_tag_name : 'div', className : 'social-app-content  clearfix', id : 'stream_container',

				postRenderCallback : function(el)
				{
					// User have streams so register all of them on server
					registerAll(0);
					console.log(Streams_List_View.collection);
				} });

			// Creates new default function of collection
			Streams_List_View.appendItem = this.socialSuiteAppendItem;

			Streams_List_View.collection.fetch();

			$('#socialsuite-tabs-content').append(Streams_List_View.render().el);			

			return;
		}// if end

		if (Streams_List_View) // Streams already collected in collection
		{
			console.log("Collection already defined.");

			// New stream to add in collection.
			if (stream)
				Streams_List_View.collection.add(stream);

			$('#socialsuite-tabs-content').append(Streams_List_View.render(true).el);

			// Creates normal time.
			displayTimeAgo($(".chirp-container"));

			// Check for new tweets and show notification.
			showNotification(null);
		}
		
		var noOfModels = Streams_List_View.collection.length;
    	for(var index = 0; index < noOfModels; index++) {
    		var StreamJson = Streams_List_View.collection.models[index];
    		if(typeof StreamJson != "undefined") {
    			if(parseInt(StreamJson.get('stream_version')) != 2) {
    				$("#streamsMessageBox").show();
    				break;
    			}
    		}
		}

		// Remove deleted tweet element from ui
		$('.deleted').remove();

		// Remove waiting icon.
		removeWaiting();
		
	}, // streams end

	/**
	 * Append Model and Collection with Models in Collection.
	 */
	socialSuiteAppendItem : function(base_model)
	{
		console.log("base_model in append.");

		// Stream model in main collection
		var streamView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'li',
			className : 'ui-state-default col-md-4 col-sm-6 col-xs-12 ' + base_model.get("id"), id : base_model.get("id"), name : base_model.get("column_index"), });

		// Tweet collection in stream model
		var tweetListView = new Base_Collection_View({ data : [], templateKey : 'Column', individual_tag_name : 'div', });

		// Comparator to sort tweets in tweet collection
		tweetListView.collection.comparator = function(model)
		{
			if (model.get('id'))
				return -model.get('id');
		};

		// If model has tweets, need to save them, when user change tab from
		// social
		if (base_model.has("tweetListView"))
		{
			tweetListView.collection.add(base_model.get("tweetListView").toJSON());
			tweetListView.collection.sort();
		}

		// Add new tweetList View as collection in stream model
		base_model.set('tweetListView', tweetListView.collection);

		var el = streamView.render().el;
		$('#stream', el).html(tweetListView.render(true).el);
		$('#socialsuite-streams-model-list', this.el).append(el);

		
	}, // socialSuiteAppendItem end

	/**
	 * On click on scheduled update time button in socialsuite will display
	 * scheduled updates if user have any.
	 */
	scheduledmessages : function()
	{		
		Scheduled_Updates_View = new Base_Collection_View({ url : "/core/scheduledupdate", restKey : "scheduledUpdate",
			templateKey : "socialsuite-scheduled-updates", individual_tag_name : 'tr', postRenderCallback : function(el)
			{
				// Creates normal time.
				displayTimeAgo($(".is-actionable"));
			}});

		Scheduled_Updates_View.collection.fetch();

		console.log(Scheduled_Updates_View.collection);
		
		$('#content').html(Scheduled_Updates_View.render(true).el);

		// Makes tab active
		$(".active").removeClass("active");
	} // scheduledmessages end
});

// Global variable to call function from Router.
var socialsuitecall = new SocialSuiteRouter();
/**
 * Creates Backbone Router for subscription operations, defines routes for
 * subscribe, updating creditcard/plan, invoice, invoice detailed view
 * 
 * @module Subscription
 * @author Yaswanth
 */
var _data = null;
var IS_TRIAL = false;
_IS_EMAIL_PLAN_ACTIVE = false;
var IS_ALLOWED_TRIAL = false;
var SubscribeRouter = Backbone.Router
		.extend({

			routes : {

			/* Subscription page */

			"subscribe" : "subscribe",

			"trial-subscribe" : "trialSubscribe",

			"subscribe/:id/:plan" : "subscribe",

			"subscribe-plan" : "subscribePlan",

			"subscribe-plan/:id" : "subscribePlan",

			/* billing settings */

			"billing-settings" : "billingSettings",

			"account-details" : "accountDetails",

			"invoice-details" : "invoiceDetailsList",

			/* Updating subscription details */

			"updateplan" : "updatePlan",

			"purchase-plan" : "purchasePlan",

			"purchase-email" : "purchaseEmail",

			"updateCreditCard" : "cardUpdation",

			/* Invoices */

			"invoice" : "invoice",

			"invoice/:id" : "getInvoiceDetails",

			"getInvoiceDetails/:id" : "getInvoiceDetails",

			},

			subscribePlan : function()
			{
				Backbone.history.navigate("subscribe", { trigger : true });
			},

			cardUpdation : function()
			{

				var card_details = new Base_Model_View({ url : "core/api/subscription", template : "creditcard-update", window : 'subscribe',
					saveCallback : function()
					{
						showNotyPopUp("information", "Card has been updated successfully.", "top");
					}, errorCallback : function(data)
					{
						showNotyPopUp("warning", data.responseText, "top");
					}, postRenderCallback : function(el)
					{

						// Load date and year for card expiry
						card_expiry(el);

						// To deserialize
						var card_detail_form = el.find('form.card_details'), card_data = card_details.model.toJSON().billingData;

						USER_CREDIRCARD_DETAILS = card_data;
						plan_json.customer = JSON.parse(USER_CREDIRCARD_DETAILS);

						var activeCard = getActiveCard(plan_json.customer);

						// Load countries and respective states
						// Deserialize card details
						if (!$.isEmptyObject(card_data))
						{
							// Deserialize method defined in
							// agile_billing.js
							deserialize_card_details(activeCard, $(card_detail_form));
						}

					} });
				$("#content").html(card_details.render().el);
			},

			billingSettings : function()
			{
				getTemplate('billing-settings', {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;
					$('#content').html($(template_ui));

					var view = new Base_Model_View({ url : '/core/api/subscription', template : "account-details", postRenderCallback : function()
					{
					} });
					$('#content').find('#billing-settings-tab-content').html(view.render().el);
					$('#content').find('#BillingSettingsTab .select').removeClass('select');
					$('#content').find('.account-details-tab').addClass('select');

				}, "#content");

				$(".active").removeClass("active");

			},

			accountDetails : function()
			{
				getTemplate('billing-settings', {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;
					$('#content').html($(template_ui));
					
					
				}, "#content");
				var view = new Base_Model_View({ url : '/core/api/subscription', template : "account-details", postRenderCallback : function()
				{
				} });
				$('#content').find('#billing-settings-tab-content').html(view.render().el);
				$('#content').find('#BillingSettingsTab .select').removeClass('select');
				$('#content').find('.account-details-tab').addClass('select');
				$(".active").removeClass("active");

			},

			invoiceDetailsList : function()
			{
				var that = this;
				getTemplate('billing-settings', {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;
					$('#content').html($(template_ui));
					
					getTemplate('invoice-details', {}, undefined, function(template_ui)
					{
						if (!template_ui)
							return;
						$('#billing-settings-tab-content').html($(template_ui));
						$("#invoice-details-holder").html(getRandomLoadingImg());
						
					}, "#billing-settings-tab-content");
					
					var subscribe_plan = new Base_Model_View({ url : "core/api/subscription?reload=true", template : "subscribe-new", window : 'subscribe',

					postRenderCallback : function(el)
					{

						var data = subscribe_plan.model.toJSON();
						var subscription_model = new BaseModel(data);
						that.recent_invoice(subscription_model);

					} });
					
				}, "#content");
				
				
				

			},

			purchaseEmail : function()
			{

				if (!email_json.quantity)
				{
					this.navigate("subscribe", { trigger : true });

					return;
				}
				var plan = email_json;
				var update_email = new Base_Model_View({ url : "core/api/subscription", data : email_json, template : "purchase-emails", window : 'subscribe',

				saveCallback : function()
				{
					showNotyPopUp("information", "Emails have been added successfully. It will take a few seconds to update on your account. <a href='#subscribe' onclick='document.location.reload();'>Click here</a> if they are not added.", "top", 15000);
				}, postRenderCallback : function(el)
				{
					_IS_EMAIL_PLAN_ACTIVE = true;
					card_expiry(el);
					head.js(LIB_PATH + 'lib/countries.js', function()
					{
						print_country($("#country", el));
					});

				}, errorCallback : function(data)
				{
					showNotyPopUp("warning", data.responseText, "top");
				}
				/*
				 * prePersist : function(el) { console.log(el); }
				 */
				});

				$('#content').html(update_email.render().el);
				$(".active").removeClass("active");
				$("#planView").addClass("active");

			},
			/**
			 * Shows the subscription details(If subscribed ) of subscription
			 * form, this function also sets account statistics in the
			 * subscription page, using post render callback of the
			 * Base_Model_View
			 */
			subscribe : function(id, plan)
			{

				IS_HAVING_MANDRILL = false;
				if(window.location.href.split("#")[1] == "subscribe")
            		IS_TRIAL = false;
				$("#content").html("<div id='subscribe_plan_change'></div>");

				if (IS_NEW_USER && _plan_on_signup && _plan_on_signup.plan_type && _plan_on_signup.plan_type == "FREE")
				{
					 _plan_on_signup = null;
					Backbone.history.navigate("dashboard", { trigger : true });
					return;
				}
				
				if (!$.isEmptyObject(USER_CREDIRCARD_DETAILS))
				{

					plan_json.customer = JSON.parse(USER_CREDIRCARD_DETAILS);
				}
				var that = this;
				var counter = 0;
				showTransitionBar();
				var planDetails;

				this.subscribe_plan = new Base_Model_View({ url : "core/api/subscription?reload=true", template : "subscribe-new", window : 'subscribe',

				postRenderCallback : function(el)
				{
					var data = that.subscribe_plan.model.toJSON();
					_data = that.subscribe_plan.model.toJSON();

					initializeSubscriptionListeners()
					$('[data-toggle="tooltip"]').tooltip();

					var _window = window;
					// Setup account statistics
					set_up_account_stats(el);

					USER_BILLING_PREFS = data;

					USER_CREDIRCARD_DETAILS = that.subscribe_plan.model.toJSON().billingData;

					if (data && data.billingData)
					{
						var billing_data = JSON.parse(data.billingData);
						var stripe_subscription = getSubscription(data.billingData, data.plan);
					}

					var planType = "";

					var quantity;
					if (stripe_subscription == null)
					{
						quantity = "2";
						planType = "FREE";
					}
					else
					{
						quantity = data.plan.quantity;
						planType = data.plan.plan_type.toUpperCase();
//						if("PRO_MONTHLY" == planType)
//							planType = "ENTERPRISE_MONTHLY";
//						else if("PRO_YEARLY" == planType)
//							planType = "ENTERPRISE_YEARLY";
					}
					planDetails = "<span class='text-head-black'>Current Plan</span></br><span class='text-head-black'>" + quantity + " Users</span>";
					if (planType.indexOf('STARTER') == 0)
					{
						id = $('#starter_plan');
					}
					else if (planType.indexOf('REGULAR') == 0)
					{
						id = $('#regular_plan');
					}
					else if (planType.indexOf('ENTERPRISE') == 0 || planType.indexOf('PRO') == 0)
					{
						id = $('#pro_plan');
					}

					if (id)
					{
						$("#plan_type").val(id.attr("id").split("_")[0]);
					}
					element = setPriceTemplete(data.plan.plan_type, el);
					addStyleForAPlan(id, planDetails);
					// Show Coupon code input field
					id = (id && id == "coupon") ? id : "";
					showCouponCodeContainer(id);
					price = update_price();
					$("#user_quantity").val(quantity);
					$("#users_quantity").text(quantity);
					(quantity && quantity > 1) ? $("#users_quantity_text").text("Users") : $("#users_quantity_text").text("User");
					$("#users_total_cost").text((quantity * price).toFixed(2));
					if ($.isEmptyObject(data))
						setPlan("free");
					else
						setPlan(data);

					data = _data;
					_billing_restriction = _data.cachedData;
					init_acl_restriction();

					var subscription_model = new BaseModel(data);

					that.setup_email_plan(subscription_model);

					that.show_card_details(subscription_model);

					that.invoice_latest(subscription_model);

					hideTransitionBar();
					document.getElementById('email-quantity').value = "";
					$('.selected-plan', el).trigger('click');
					if (_IS_EMAIL_PLAN_ACTIVE)
					{
						$(".nav-tabs li").removeClass("active");
						$("#users-content").removeClass("active");
						$("#emailtab").addClass("active");
						$("#email-content").addClass("active");
					}

				} });

				addStyleForAPlan(id, planDetails);
				$('#subscribe_plan_change').html(that.subscribe_plan.render().el);
				$(".active").removeClass("active");
				$("#planView").addClass("active");

			},

			getInvoiceDetails : function(invoice_id)
			{
				var invoicedata;
				var companydata;
				var obj;

				if (!invoice_id)
					return;

				accessUrlUsingAjax('core/api/subscription/getinvoice?d=' + invoice_id, function(data)
				{
					console.log("Invoice object");
					console.log(data);
					invoicedata = data;

					accessUrlUsingAjax('/core/api/account-prefs', function(data)
					{
						console.log("Account prefs");
						console.log(data);
						companydata = data;

						obj = { "invoice" : invoicedata, "company" : companydata }
						console.log("xxxxxxxxxxxxxxx");
						console.log(obj);
						head.js(LIB_PATH + 'jscore/handlebars/handlebars-helpers.js', function()
						{
							getTemplate('invoice-detail', obj, undefined, function(template_ui)
							{
								if (!template_ui)
									return;
								$('#content').html($(template_ui));
								$('[data-toggle="tooltip"]').tooltip();
							}, "#content");
						});

					}, function(response)
					{
						showNotyPopUp("information", "error occured please try again", "top");
					});

				}, function(response)
				{
					showNotyPopUp("information", "error occured please try again", "top");
				});

			},

			/**
			 * Shows form the update plan, uses the same url used to create new
			 * subscription/update credit card of plan, deserializes the current
			 * plan
			 */
			updatePlan : function()
			{
				var update_plan = new Base_Model_View({
					url : "core/api/subscription-addon/subscribe",
					template : "purchase-email-plan",

					saveCallback : function()
					{
						window.navigate("subscribe", { trigger : true });
						showNotyPopUp("information", "Your plan has been updated successfully. Please logout and login again for the new changes to apply.",
								"top");
					}, postRenderCallback : function(el)
					{
						initializeSubscriptionListeners();
						card_expiry(el);
						head.js(LIB_PATH + 'lib/countries.js', function()
						{
							print_country($("#country", el));
						});
					}

				});

				$('#content').html(update_plan.render().el);
				$(".active").removeClass("active");
				$("#planView").addClass("active");
			},

			/**
			 * Fetches the invoices and displays as list.
			 */
			invoice : function()
			{
				Backbone.history.navigate("invoice-details", { trigger : true });
				this.invoice = new Base_Collection_View({ url : "core/api/subscription/invoices", templateKey : "invoice", window : 'subscribe',
					individual_tag_name : 'tr' })

				// Fetches the invoice payments
				this.invoice.collection.fetch();

				$('#content').html(this.invoice.el);
			},

			/**
			 * Displays detailed invoice, when selected from the invoice list
			 */
			invoiceDetails : function(id)
			{

				// Checks whether invoice list is defined, if list is not
				// defined get the list of invoices

				if (!this.invoice || !this.invoice.collection || this.invoice.collection == 0 || !this.invoice.collection.get(id))
				{
					this.navigate("invoice", { trigger : true });
					return;
				}
				if (id)
				{
					// Gets invoice item from the collection
					var model = this.invoice.collection.get(id);

					// Displays detailed invoice
					var invoice_detail_model = new Base_Model_View({ url : "core/api/subscription/getinvoice", model : model, template : "invoice-detail",
						postRenderCallback : function(el)
						{
						} });
					$("#billing-settings-tab-content").html("");
					$("#billing-settings-tab-content").html(invoice_detail_model.render().el);
				}
				else
					return;
			},

			/**
			 * After selecting plan, page is navigated to purchase plan where
			 * user enter his credit card details. It shows a form with
			 * countries and states and fields to enter credit card details
			 */
			purchasePlan : function()
			{

				// If plan is not defined i.e., reloaded, or plan not chosen
				// properly,
				// then page is navigated back to subscription/ choose plan page
				if (!plan_json.plan)
				{
					this.navigate("subscribe", { trigger : true });

					return;
				}

				_plan_on_signup = null;

				var window = this;
				// Plan json is posted along with credit card details
				var plan = plan_json
				var upgrade_plan = new Base_Model_View(
						{
							url : "core/api/subscription",
							template : "purchase-plan",
							isNew : true,
							data : plan,
							postRenderCallback : function(el)
							{
								initializeSubscriptionListeners();
								_IS_EMAIL_PLAN_ACTIVE = false;
								// Discount
								showCouponDiscountAmount(plan_json, el);
								card_expiry(el);
								
							},
							saveCallback : function(data)
							{
								window.navigate("subscribe", { trigger : true });
								showNotyPopUp("information", "Your plan has been updated successfully", "top");

								try
								{
									push_actual_plan(data.plan)
								}
								catch (err)
								{
									console.log(err);
								}

							},
							errorCallback : function(data)
							{
								if (data.responseText)
									showNotyPopUp("warning", data.responseText, "top");
							}

						});

				// Prepend Loading
				$('#content').html(upgrade_plan.render().el);
				$('[data-toggle="tooltip"]').tooltip();
				$(".active").removeClass("active");
				$("#planView").addClass("active");
			},

			setup_email_plan : function(subscription)
			{
				var counter = 0;
				var that = this;
				IS_HAVING_MANDRILL = false;
				$.ajax({ url : "core/api/email-gateway", type : "GET", success : function(data)
				{
					if (data && data.email_api)
						IS_HAVING_MANDRILL = true;

				}

				});

				/*
				 * Creates new view with a render callback to setup expiry dates
				 * field(show dropdown of month and year), countries list and
				 * respective states list using countries.js plugin account
				 * stats in subscription page
				 */
				var subscribe_email_plan = new Base_Model_View({ url : "core/api/subscription", template : "email-update", model : subscription,
					window : 'subscribe',

					postRenderCallback : function(el)
					{

					} });

				$('#purchase-email').html(subscribe_email_plan.render(true).el);
			},

			show_card_details : function(subscription)
			{
				var that = this;
				var counter = 0;
				/*
				 * Creates new view with a render callback to setup expiry dates
				 * field(show dropdown of month and year), countries list and
				 * respective states list using countries.js plugin account
				 * stats in subscription page
				 */
				var stripe_customer_details = new Base_Model_View({ url : "core/api/subscription", model : subscription, template : "customer-details-block",

				postRenderCallback : function(el)
				{
				} });

				$('#customer-details-holder').html(stripe_customer_details.render(true).el);
			},

			invoice_latest : function(subscription)
			{
				$('#recent_invoice').html(getRandomLoadingImg());
				if (!subscription.get("billingData"))
				{
					$("#invoice-details-holder").html("");
					$('#invoice-details-holder').append("<div class='text-lg p-l-sm p-t-sm'>No invoices</div>");
					return;
				}

				// Send an ajax request

				$.get("core/api/subscription/invoices", {}, function(invoice)
				{

					if (!invoice || invoice.length <= 0)
						return;

					// Sort invoice
					invoice = new BaseCollection(invoice, { sortKey : "date", descending : true }).toJSON();
//					var object = JSON.parse(JSON.stringify(invoice[0]));
					// Send data to a template
					getTemplate('latest-invoice', invoice[0] , undefined, function(template_ui)
					{
						if (!template_ui)
							return;
						$('#recent_invoice').html(template_ui);
						
					}, "#recent_invoice");
					
				})
				.fail(function() {
					$('#recent_invoice').html("You do not have any invoices yet.");
				});

			},

			// gets collection of charges of aa paricular customer based on
			recent_invoice : function(subscription)
			{
				if (!subscription.get("billingData"))
				{
					$("#invoice-details-holder").html("");
					$('#invoice-details-holder')
							.append(
									"<div class='text-lg p-l-sm p-t-sm'>Invoices</div><hr><div class='text-center p-b-lg'><p class='m-b-none' style='font-size: 18px;'>You do not have any invoices yet</p><p>Generated invoices will be shown here.</p></div>");
					return;
				}

				this.invoice = new Base_Collection_View({ url : "core/api/subscription/invoices" + "?page_size=20", templateKey : "invoice",
					window : 'subscribe', individual_tag_name : 'tr', sortKey : 'date', descending : true });

				// Fetches the invoice payments
				this.invoice.collection.fetch();

				$("#invoice-details-holder").html(this.invoice.render().el);

			},

			trialSubscribe: function()
			{
				IS_TRIAL = true;
				var that = this;
				if(!IS_ALLOWED_TRIAL)
				{
					$.ajax({ url : "core/api/subscription/agileTags?email="+CURRENT_DOMAIN_USER.email,
					 type : "GET",
					 dataType: "json",
					 contentType : "application/json; charset=utf-8",
					 success : function(data)
						{
							console.log(data);
							if(data && data.tags)
							{
								if ( $.inArray('Cancellation Request', data.tags) == -1 && $.inArray('Cancelled Trial', data.tags) == -1 && $.inArray('Trial', data.tags) != -1) {
								    IS_ALLOWED_TRIAL = true;
								}
							}
							that.subscribe();
						},error : function(){
							showAlertModal("error");
						}
					});	
				}
				else{
					that.subscribe();
				}
			}

		});

function getPendingEmails()
{
	var count = _billing_restriction.one_time_emails_count;

	var max = getMaxEmailsLimit();

	// if max is greater than zero, we consider user is subscrbed to email plan
	if (max > 0)
	{
		// In case of count is less than zero we return 0;
		if (count < 0)
			return 0;

		return count;
	}

	// If max is zero then it is free plan
	if (max == 0)
	{
		// Count comes as a negavie value here
		var remaining = 5000 + count;
		if (remaining < 0)
			return 0;

		return remaining;
	}

	return count;
}

function getMaxEmailsLimit()
{
	var max = _billing_restriction.max_emails_count;

	if (max == undefined)
		max = 0;

	return max;
}
function canSendEmails(emails_to_send)
{
	var pending = getPendingEmails() + getEmailCreditsCount();
	if (pending >= emails_to_send)
		return true;

	return false;
}

function is_free_plan()
{
	return _IS_FREE_PLAN;
}

/**
 * This function is used to add the style for price panels.
 * 
 * @param id
 * @param description
 */
function addStyleForAPlan(id, planDetails)
{
	if (id)
	{

		if (($('selected-plan')) != ($('#email-div')))
		{
			$(".plan-collection-in").removeClass('selected-plan');
			id.find('.plan-collection-in').addClass('selected-plan');
		}
		else
		{
			$('#email-div').addClass('selected-plan');
		}

	}
}

function removeStyleForAPlan(id)
{
	var id = $('#plans-panel');

	id.find(".plan-collection-bot").css("opacity", "0.5");

	if (($('selected-plan')) != ($('#email-div')))
		$(".plan-collection-in").removeClass('selected-plan');

}

function getEmailsNextRenewalTime()
{
	var last_renewal_time = _billing_restriction.last_renewal_time;
	if(last_renewal_time == undefined || last_renewal_time == null){
		$.getJSON("core/api/users/current-owner", function(data){
			$("#next_emails_renewal").html(new Date((data.createdTime+2592000)*1000).format("mmm dd, yyyy"));
		  return;
		});
	}else{
		return new Date((last_renewal_time+2592000)*1000).format("mmm dd, yyyy");
	}

}

function getEmailCreditsCount()
{
	var count = _billing_restriction.email_credits_count;

	if (count == undefined)
		count = 0;

	return count;
}
/**
 * task timeline plugin
 * 
 * @auther jitendra
 */
// global task details model
var taskDetailView;
var task_tab_position_cookie_name = "task_tab_position";
var TaskDetailsRouter = Backbone.Router.extend({ routes : { 'task/:id' : 'taskDetailView' },

taskDetailView : function(id)
{

	if (id)
	{
		if (App_Calendar.allTasksListView)
		{
			var task = App_Calendar.allTasksListView.collection.get(id);
			taskDetailView = task;
			getTemplate("task-detail", task.toJSON(), undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#content').html($(template_ui));	

				initializeTaskDetailListeners();
				task_details_tab.loadActivitiesView();

			}, "#content");
			

		}
		else if (App_Calendar.tasksListView)
		{
			var task = App_Calendar.tasksListView.collection.get(id);
			if (task)
			{
				taskDetailView = task;
				getTemplate("task-detail", task.toJSON(), undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					initializeTaskDetailListeners();
					task_details_tab.loadActivitiesView();
				}, "#content");
			}
			else
			{
				var taskModel = Backbone.Model.extend({});
				$.ajax({ url : "core/api/tasks/getTaskObject/" + id, success : function(response)
				{
					taskDetailView = new taskModel(response);
					getTemplate("task-detail", taskDetailView.toJSON(), undefined, function(template_ui){
						if(!template_ui)
							  return;
						$('#content').html($(template_ui));	

						initializeTaskDetailListeners();
						task_details_tab.loadActivitiesView();
					}, "#content");					
				} });
			}
		}
		else
		{
			var taskModel = Backbone.Model.extend({});
			$.ajax({ url : "core/api/tasks/getTaskObject/" + id, success : function(response)
			{
				taskDetailView = new taskModel(response);

				getTemplate("task-detail", taskDetailView.toJSON(), undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					initializeTaskDetailListeners();
					task_details_tab.loadActivitiesView();
				}, "#content");				
			} });

		}
	}

}

});

function initializeTaskDetailListeners(){

	var id;

	/**
	 * Activates the Timeline tab-content to show the time-line with all
	 * details, which are already added to time-line, when the task is getting
	 * to its detail view.
	 */
	$('#task-tab-container-header #taskDetailsTab a[href="#timeline"]').off();
	$('#task-tab-container-header').on('click', '#taskDetailsTab a[href="#timeline"]', function(e) 
	{
		e.preventDefault();

		save_task_tab_position_in_cookie("timeline");

		task_details_tab.load_timeline();
	});

	/**
	 * Fetches all the notes related to the task and shows the notes collection
	 * as a table in its tab-content, when "Notes" tab is clicked.
	 */
	$('#task-tab-container-header #taskDetailsTab a[href="#notes"]').off();
	$('#task-tab-container-header').on('click', '#taskDetailsTab a[href="#notes"]', function(e) 
	{
		e.preventDefault();
		save_task_tab_position_in_cookie("notes");
		task_details_tab.load_notes();
	});

	$('#task-tab-container-header #taskDetailsTab a[href="#contacts"]').off();
	$('#task-tab-container-header').on('click', '#taskDetailsTab a[href="#contacts"]', function(e)
	{
		e.preventDefault();
		save_task_tab_position_in_cookie("contacts");
		task_details_tab.loadTaskRelatedContactsView();
	});

	$('#task-tab-container-header #taskDetailsTab a[href="#activity"]').off();
    $('#task-tab-container-header').on('click', '#taskDetailsTab a[href="#activity"]', function(e) 
	{
		e.preventDefault();
		save_task_tab_position_in_cookie("activity");
		task_details_tab.loadActivitiesView();
	});

	$('#task-tab-container-header #taskDetailsTab a[href="#deals"]').off();
	$('#task-tab-container-header').on('click', '#taskDetailsTab a[href="#deals"]', function(e)
	{
		e.preventDefault();
		save_task_tab_position_in_cookie("deals");
		task_details_tab.loadTaskRelatedDealsView();
	});
	
	$('#change-owner-element .task-owner-list').off();
	$('#change-owner-element').on('click', '.task-owner-list', function(e) 
	{

		$('#change-task-owner-ul').css('display', 'none');

		// Reads the owner id from the selected option
		var new_owner_id = $(this).attr('data');
		var new_owner_name = $(this).text();
		var current_owner_id = $('#task-owner').attr('data');
		// Returns, if same owner is selected again
		if (new_owner_id == current_owner_id)
		{
			// Showing updated owner
			show_task_owner();
			return;
		}

		var taskModel = new BaseModel();
		taskModel.url = '/core/api/tasks/change-owner/' + new_owner_id + "/" + taskDetailView.get('id');
		taskModel.save(taskDetailView.toJSON(), { success : function(model)
		{

			$('#task-owner').text(new_owner_name);
			$('#task-owner').attr('data', new_owner_id);

			// Showing updated owner
			show_task_owner();
			taskDetailView = model;
			task_details_tab.loadActivitiesView();

		} });
	});

	$('#change-owner-element .task-owner-add').off();
	$('#change-owner-element').on('click', '.task-owner-add', function(e)
	{
		e.preventDefault();
		fill_task_owners(undefined, undefined, function()
		{

			$('.task-owner-add').css('display', 'none');

			$('#change-task-owner-ul').css('display', 'inline-block');
			$('#change-task-owner-ul').addClass("open");

			if ($('#change-owner-element > #change-task-owner-ul').css('display') == 'inline-block')
				$("#change-owner-element").find(".loading").remove();

		});

	});

	$('#change-owner-element #task-owner').off();
	$('#change-owner-element').on('click', '#task-owner', function(e)
	{
		e.preventDefault();
		fill_task_owners(undefined, undefined, function()
		{

			$('#task-owner').css('display', 'none');

			$('#change-task-owner-ul').css('display', 'inline-block');

			if ($('#change-task-owner-ul').css('display') == 'inline-block')
				$("#change-owner-element").find(".loading").remove();

		});

	});

	/**
	 * task note update
	 */
	$('#task_tab_detail .task-note-edit').off();
	$('#task_tab_detail').on('click', '.task-note-edit', function(e) 
	{

		e.preventDefault();
		var note = notesView.collection.get($(this).attr('data'));
		console.log(note);
		deserializeForm(note.toJSON(), $("#tasknoteUpdateForm", $('#tasknoteupdatemodal')));
		fill_relation_task($('#tasknoteUpdateForm'));
		$('#tasknoteupdatemodal').modal('show');

	})

	/**
	 * * update task related notes /
	 */

	$('#tasknoteupdatemodal #task_note_update').off();
	$('#tasknoteupdatemodal').on('click', '#task_note_update', function(e)
	{
		e.preventDefault();

		// Returns, if the save button has disabled attribute
		if ($(this).attr('disabled'))
			return;

		// Disables save button to prevent multiple click event issues
		disable_save_button($(this));// $(this).attr('disabled', 'disabled');

		if (!isValidForm('#tasknoteUpdateForm'))
		{

			// Removes disabled attribute of save button
			enable_save_button($(this));
			return;
		}

		// Shows loading symbol until model get saved
		// $('#noteUpdateModal').find('span.save-status').html(getRandomLoadingImg());

		var json = serializeForm("tasknoteUpdateForm");

		saveTaskNote($("#tasknoteUpdateForm"), $("#tasknoteupdatemodal"), this, json);
	})

	$('#task-detail-lhs .delete_task').off();
    $('#task-detail-lhs').on('click', '.delete_task', function(e)
	{
		var id = $('.delete_task').attr('data');
		e.preventDefault();
		showAlertModal("delete_task", "confirm", function(){
			$.ajax({ url : 'core/api/tasks/' + id, type : 'DELETE', success : function(response)
			{
				document.location.href = document.location.origin + "#/tasks";
				getDueTasksCount(function(count){
					var due_task_count = count;
					if(due_task_count !=0)
						$('#due_tasks_count').html(due_task_count);
					else
						$('#due_tasks_count').html("");
				});
				
			} });
		});
	});

	/**
	 * task note delete
	 */
	$('#task_tab_detail .activity-delete').off();
	$('#task_tab_detail').on('click', '.activity-delete', function(e) 
	{
		e.preventDefault();
		Contact_Details_Tab_Actions.deleteActivity(e);
	});

	/**
 * task note validate
 */
/**
 * Saves note model using "Bcakbone.Model" object, and adds saved data to
 * time-line if necessary.
 */
$('#new-task-modal').on('click', '#tasknote_validate', function(e) 
{
	e.preventDefault();

	// Returns, if the save button has disabled attribute
	if ($(this).attr('disabled'))
		return;

	if (!isValidForm('#tasknoteForm'))
	{
		return;
	}

	disable_save_button($(this));
	var json = serializeForm("tasknoteForm");

	console.log(json);

	saveTaskNote($("#tasknoteForm"), $("#new-task-modal"), this, json);
});


}


$(function(){

	$('#content #task_edit').off('click');
    $('#content').on('click', '#task_edit', function(e) 
	{
		e.preventDefault();
		var id = $(this).attr('data');
		var task
		if (App_Calendar.allTasksListView)
		{
			task = App_Calendar.allTasksListView.collection.get(id);
		}
		else if (App_Calendar.tasksListView)
		{
			task = App_Calendar.tasksListView.collection.get(id);
			if (!task)
			{
				task = taskDetailView;
			}
		}
		else
		{
			task = taskDetailView;

		}
		if (task)
			update_task(task.toJSON());

	});

    $('#content .task-add-contact').off('click');
	$('#content').on('click', '.task-add-contact', function(e) 
	{
		e.preventDefault();
		update_task(taskDetailView.toJSON());
	});

	$('#content .task-add-deal').off('click');
	$('#content').on('click', '.task-add-deal', function(e) 
	{
		e.preventDefault();
		update_task(taskDetailView.toJSON());
		setTimeout(function(){
			$('#update_task_relates_to_deals').focus();
		},1000);
	});

});


/**
 * Activates "Timeline" tab and its tab-content in contact details and also
 * deactivates the other activated tabs.
 * 
 * @method activate_timeline_tab
 * 
 * Changed to activate first tab in the list ( on contact-details page , works
 * even on company-details page
 * @modified Chandan
 */
function activate_timeline_tab()
{
	$('#contactDetailsTab').find('li.active').removeClass('active');
	$('#contactDetailsTab li:first-child').addClass('active');

	$('div.tab-content').find('div.active').removeClass('active');
	$('div.tab-content > div:first-child').addClass('active');

	// $('#time-line').addClass('active'); //old original code for flicking
	// timeline

	if (App_Contacts.contactDetailView.model.get('type') == 'COMPANY')
	{
		fill_company_related_contacts(App_Contacts.contactDetailView.model.id, 'company-contacts');
	}
}

function save_task_tab_position_in_cookie(tab_href)
{

	var position = '';

	if (_agile_get_prefs(task_tab_position_cookie_name))
		position = _agile_get_prefs(task_tab_position_cookie_name);

	if (position == tab_href)
		return;

	_agile_set_prefs(task_tab_position_cookie_name, tab_href);
}


// update task
function update_task(value)
{

	$("#updateTaskModal").html(getTemplate("task-update-modal")).modal('show');

	loadProgressSlider($("#updateTaskForm"), function(el){

		deserializeForm(value, $("#updateTaskForm"));
	
		categories.getCategoriesHtml(value,function(catsHtml){
			$('#type',$("#updateTaskForm")).html(catsHtml);
			// Fills owner select element
			populateUsers("owners-list", $("#updateTaskForm"), value, 'taskOwner', function(data)
			{
				$("#updateTaskForm").find("#owners-list").html(data);
				if (value.taskOwner)
				{
					$("#owners-list", $("#updateTaskForm")).find('option[value=' + value['taskOwner'].id + ']').attr("selected", "selected");
				}
				$("#owners-list", $("#updateTaskForm")).closest('div').find('.loading-img').hide();
			});
		});

	    activateSliderAndTimerToTaskModal();

		// Add notes in task modal
		showNoteOnForm("updateTaskForm", value.notes);

	});
	deserializeForm(value, $("#updateTaskForm"));
	$('.update-task-timepicker').val(fillTimePicker(value.due));

	
}

/**
 * Shows all the domain users names as ul drop down list to change the owner of
 * a contact
 */
function fill_task_owners(el, data, callback)
{
	var optionsTemplate = "<li><a href='javascript:void(0);' class='task-owner-list' data='{{id}}'>{{name}}</a></li>";
	fillSelect('task-detail-owner', '/core/api/users', 'domainUsers', callback, optionsTemplate, true);
}

/**
 * To show owner on change
 */
function show_task_owner()
{
	$('#task-owner').css('display', 'inline-block');
}

/**
 * Displays note modal, to add a note related to the task in task detail view.
 * Also prepends the task name to related to field of activity modal.
 */

function fill_relation_task(el)
{

	var json = taskDetailView.toJSON();
	var task_name = json.name;

	var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');

 	// Adds contact name to tags ul as li element
 	$('.tags', el).html(template({name : task_name, id : json.id}));
}


function saveTaskNote(form, noteModal, element, note)
{

	var noteModel = new Backbone.Model();
	noteModel.url = 'core/api/notes';
	noteModel.save(note, { success : function(data)
	{

		// Removes disabled attribute of save button
		enable_save_button($(element));// $(element).removeAttr('disabled');

		form.each(function()
		{
			this.reset();
		});

		// Removes loading symbol and hides the modal
		// modal.find('span.save-status img').remove();
		noteModal.modal('hide');

		var note = data.toJSON();

		console.log(note);
		// Add model to collection. Disabled sort while adding and called
		// sort explicitly, as sort is not working when it is called by add
		// function
		if (!notesView)
		{
			notesView = new Base_Collection_View(data);
		}
		if (notesView && notesView.collection)
		{
			if (notesView.collection.get(note.id))
			{
				notesView.collection.get(note.id).set(new BaseModel(note));
			}
			else
			{

				// Replace contacts object with contact ids
				var taskJSON = taskDetailView.toJSON();
				var contacts = [];
				$.each(taskJSON.contacts, function(index, contact)
				{
					contacts.push(contact.id);
				});

				// Replace notes object with note ids
				var notes = [];
				$.each(taskJSON.notes, function(index, n)
				{
					notes.push(n.id);
				});

				notes.push(note.id);

				taskJSON.contacts = contacts;
				taskJSON.notes = notes;

				if (taskJSON.taskOwner)
					taskJSON.owner_id = taskJSON.taskOwner.id;
				var newTaskModel = new Backbone.Model();

				newTaskModel.url = 'core/api/tasks';
				newTaskModel.save(taskJSON, { success : function(data)
				{

					notesView.collection.add(new BaseModel(note), { sort : false });
					notesView.collection.sort();
					taskDetailView = data;
					

				} });

			}
		}

	} });
}
/**
 * Ticket Router with callbacks
 */
var TicketAutomationRouter = Backbone.Router.extend({
	routes : {

		/* Automations */
		"automations" : "automations",
		"automation-add" : "automationAdd",
		"automation-edit/:id" : "automationEdit",
	},

	/**
	 * Shows all the automations list
	 */
	automations : function() {

	},

	automationAdd : function() {

	},

	automationEdit : function(id) {

	}

});/**
 * Ticket Router with callbacks
 */
var TicketMacroRouter = Backbone.Router.extend({
	routes : {

		/* Macros */
		"macros" : "macros",
		"macro-add" : "macroAdd",
		"macro-edit/:id" : "macroEdit"

	},

	/**
	 * Shows all the macros list
	 */
	macros : function() {

		this.macrosCollection = new Base_Collection_View({
			url : '/core/api/ticket/macros',
			// restKey : "workflow",
			sort_collection : false,
			templateKey : "ticket-macros",
			individual_tag_name : 'tr',
			cursor : true,
			page_size : 20,
			slateKey : "ticket-macros",
			postRenderCallback : function(el) {
				head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
					$("time.macro-created-time", el).timeago();

				});

			}
		});

		this.macrosCollection.collection.fetch();

		$("#content").html(this.macrosCollection.el);

	},

	/**
	 * To add new macro
	 */
	macroAdd : function() {

		// Get macro default model Data
		var macro_template_model = Backbone.Model.extend({
			url : 'misc/ticket-templates/macro_template.jsp'
		});

		var model = new macro_template_model();

		model.fetch({
			success : function(data) {
				App_Ticket_Macros.constructMacroAddEditTemplate(model);
			}
		});

	},

	/**
	 * Edit macro
	 */
	macroEdit : function(id) {

		try {

			// Get model
			var macroModel = this.macrosCollection.collection.get(id);

			// Convert actions String to object
			macroModel.set("actions", JSON.parse(macroModel.toJSON().actions))

			this.constructMacroAddEditTemplate(macroModel);

		} catch (e) {

			this.navigate("macros", {
				trigger : true
			});
			return;
		}

	},

	constructMacroAddEditTemplate : function(macroModel) {

		this.macroModelview = new Base_Model_View({
			url : '/core/api/ticket/macros',
			template : "ticket-macro-add-edit",
			isNew : true,
			model : macroModel,
			window : "macros",
			errorCallback : function(response) {
				showAlertModal(response.responseText, undefined, undefined, undefined, "Error");
			},
			postRenderCallback : function(el) {

				initializeTicketMacroListeners(el);

			}

		});

		$("#content").html(this.macroModelview.render().el);

	}

});/**
 * Ticket Router with callbacks
 */
 var TicketsUtilRouter = Backbone.Router.extend({
 	routes : {

 		/* Tickets */
 		"tickets" : "tickets",
 		
 		/* Tickets  by filter*/
		"tickets/filter/:id" : "ticketsByFilter",
		"tickets/filter/:id/ticket/:id" : "ticketDetailsByFilter",

		"ticket/:id" : "ticketDetails",

		/* Ticket bulk actions*/
		"tickets/bulk-actions/:action_type" : "ticketsBulkActions",

		/*Ticket Groups CRUD*/
		"ticket-groups" : "ticketGroups",
		"add-ticket-group" : "addTicketGroup",
		"ticket-group/:id" : "editTicketGroup",

		"ticket-labels" : "ticketLabels",
		"add-ticket-label" : "addTicketLabel",
		"ticket-label/:id" : "editTicketLabel",

		/*Ticket Filters CRUD*/
		"ticket-views" : "ticketFilters",
		"add-ticket-view" : "addTicketFilter",
		"ticket-view/:id" : "editTicketFilter",

		/*Ticket Canned Responses CRUD*/
		"canned-responses" : "cannedResponses",
		"add-canned-response" : "addCannedResponse",
		"edit-canned-response/:id" : "editCannedResponse",

		/*Ticket reports*/
		"ticket-reports" : "ticketReports",
		"ticket-report/:report_type" : "ticketReport"
	},

	/**
	 * Default root path provided in main menu
	 */
	tickets: function(){
		
		loadServiceLibrary(function(){
			App_Ticket_Module.ticketsByFilter(Ticket_Filter_ID);
		});
	},

	/**
	 * Shows new ticket form
	 */
	renderNewTicketModalView: function(){

		loadServiceLibrary(function(){
			var newTicket = new Base_Model_View({
				isNew : true,
				template : "ticket-new-modal",
				url : "/core/api/tickets/new-ticket",
				saveCallback: function(){
					$('#ticketsModal').modal('hide');
				},
				prePersist : function(model){
					
					var json = {};

					//Fetching selected assignee ID
					var assignee_id = $('#groupID option:selected').data('assignee-id');

					if(assignee_id)
						json.assigneeID = assignee_id;

					var last_name = $('#last_name').val();

					if(last_name)
						json.requester_name = $('#first_name').val() + ' ' + last_name;

					var email = $('#email_input').val();

					if(email)
						json.requester_email = email;

					model.set(json, { silent : true });
				},
				postRenderCallback : function(el) {

					//Initializing click event on add new contact link
					el.on('click', '.add-ticket-contact', function(e){

						//Toggle views between search contact and add contact
						$('div.new-contact-row').toggle();
						$('div.search-contact-row').toggle();

						$('#email_input').val($('#requester_email').val());
					});
				}
			});
			
			//Appending template to ticket modals container
			$('#ticketsModal').html(newTicket.render().el).modal('show').on('shown.bs.modal', function(){

				Tickets.initNewTicketTypeahead($('#ticketsModal'));
			});

			$('#ticketsModal').on('hidden.bs.modal', function (e) {
			    $(e.currentTarget).unbind();    
			});
		});
	},

	/**
	 * Shows list of tickets for the given filter id
	 **/
	 ticketsByFilter : function(filter_id){

	 	loadServiceLibrary(function(){
		 	//Fetching whole tickets count to show suggestion if there are no tickets
		 	$.getJSON("/core/api/tickets/count", function(json) {
				
				if(json.count)
					Helpdesk_Enabled = true;
			});

		 	//Verifying there exits any ticket collection
		 	if(App_Ticket_Module.ticketsCollection && 
		 		App_Ticket_Module.ticketsCollection.collection.length > 0 
		 		&& Ticket_Filter_ID == filter_id){

		 		Tickets.renderExistingCollection();
		 		return;
		 	}

		 	Ticket_Filter_ID = filter_id;

			//Rendering the root layout
			Tickets.renderLayout(function(){

				//Initialize custom filters and render layout with filter conditions selected
				Ticket_Custom_Filters.renderLayout();

				//Fetching filters collection
				Ticket_Filters.fetchFiltersCollection(function(){

					//Reseting custom filters
					Ticket_Custom_Filters.reset();
					
					//Showing selected filter name on top
					Ticket_Filters.updateFilterName();

					//Fetching selected filter ticket collection
					Tickets.fetchTicketsCollection();
				});
			});
		});
	},

	/**
	 * Shows individual ticket details and notes collection
	 **/
	ticketDetailsByFilter : function(filter_id, ticket_id){

		loadServiceLibrary(function(){
			Ticket_Filter_ID = filter_id;

			App_Ticket_Module.ticketDetails(ticket_id);
		});
	},

	/**
	 * Shows individual ticket details and notes collection
	 **/
	 ticketDetails: function(id){

	 	loadServiceLibrary(function(){
		 	var ticketModel = null;

		 	//Fetching ticket model from collection
		 	if (App_Ticket_Module.ticketsCollection && App_Ticket_Module.ticketsCollection.collection){
		 	   ticketModel = App_Ticket_Module.ticketsCollection.collection.get(id);
		 	}
		 
		 	Current_Ticket_ID = id;

		 	//Fetching canned responses collection
		 	Ticket_Canned_Response.fetchCollection(function(){

		 		// Get ticket models
			 	if(!ticketModel){

			 		// Fetch ticket details
			 		Tickets.fetchTicketModel( id, function(model){
			 			App_Ticket_Module.getTicketModelView(model);
			 		});

			 		return;
			 	}

			 	//Rendering ticket details page
			 	App_Ticket_Module.getTicketModelView(ticketModel);

			 	return;
		 	});
		});
	},

	/**
	 * Renders ticket details page for given ticket model
	 **/
	getTicketModelView: function(model){

		loadServiceLibrary(function(){
			if(!model || !model.toJSON().id)
				return;

			var id = model.toJSON().id;

			App_Ticket_Module.ticketView = new Ticket_Base_Model({
		 		model : model, 
		 		isNew : true,
		 		template : "ticket-details",
		 		url : "/core/api/tickets/" + id,
		 		postRenderCallback : function(el, data) {

		 			//Get ticket contact
		 			Ticket_Utils.fetchContact(data.contactID, function(){

		 				//Rendering ticket notes
						App_Ticket_Module.renderNotesCollection(id, 
							$('#notes-collection-container', el), function(){});

		 				//Render template with contact details
		 				if(Ticket_Utils.Current_Ticket_Contact &&
		 					!$.isEmptyObject(Ticket_Utils.Current_Ticket_Contact.toJSON())){
		 					$('#ticket-contact-details', el).html(
		 						getTemplate('ticket-contact', Ticket_Utils.Current_Ticket_Contact.toJSON()));
		 				}else{
		 					
		 					$('#ticket-contact-details', el).html(
		 						getTemplate('ticket-contact-fallback', data));
		 				}
		 			});

		 			// Append reply container
		 			Tickets_Notes.repltBtn("reply", el);

		 			//Initialize tooltips
					Ticket_Utils.enableTooltips(el);

					//Showing ticket labels as selected labels
					Ticket_Labels.showSelectedLabels(data.labels, $(el), true);

					//Load RHS side bar widgets
					Tickets.loadWidgets(App_Ticket_Module.ticketView.el);

					//Initializing Assignee dropdown with groups and assignees
					Tickets.fillAssigneeAndGroup(el);

					//Initializing date picker on due date fields
					Tickets.initializeTicketSLA(el);
					Tickets.initializeTicketSLAinHours(el);

					// Fill next, Prev navigation
					Tickets.ticket_detail_view_navigation(id, el)

					//Initializing type ahead for cc emails
					agile_type_ahead("cc_email_field", el, Tickets_Typeahead.contact_typeahead, function(arg1, arg2){

						arg2 = arg2.split(" ").join("");

						var email = TYPEHEAD_EMAILS[arg2 + '-' + arg1];

						if(!email || email == 'No email')
							return;

						//$('ul.cc-emails').prepend(getTemplate('cc-email-li', {email: email}));
	        			$('#cc_email_field').val('');

	        	  		Tickets.updateCCEmails(email, 'add');
	        	  	},undefined, undefined, 'core/api/search/');

					// Initialize events on cc input
					Tickets.initCCEmailsListeners();

					// Get previous ticket 
					Tickets.showPreviousTicketCount(data.requester_email, el);	
					
				}
			});

			//$(".tickets-collection-pane").html('');
			$('#content').html(App_Ticket_Module.ticketView.render().el);
		});
	},

	/**
	 * Bulk actions route
	 */
	ticketsBulkActions: function(action_type){
		loadServiceLibrary(function(){
			Ticket_Bulk_Ops.renderTemplate(action_type);
		});
	},

	/**
	 * Shows list of Groups
	 */
	 ticketGroups : function() {

	 	loadServiceLibrary(function(){

		 	//Rendering root template
		 	App_Ticket_Module.loadAdminsettingsHelpdeskTemplate({groups: true}, function(callback){

		 		//Initializing base collection with groups URL
	 			App_Ticket_Module.groupsCollection = new Base_Collection_View({
	 				url : '/core/api/tickets/groups',
	 				templateKey : "ticket-groups",
	 				sort_collection : true,
	 				descending : true,
	 				sortKey : 'updated_time',
	 				individual_tag_name : 'tr',
	 				postRenderCallback : function(el, collection) {

	 					//Disabling click events on copy btn
						$('#ticket-groups-model-list', el).on('click', 'a.a-frwd-email', function(e){

							console.log('e');
							e.stopPropagation();
							e.stopImmediatePropagation();
						});

						//Loading and initializing copy to clipboard buttons
						loadZeroclipboard2(function()
						{
							var array = collection.toJSON();
							for(var i=0; i< array.length; i++){

								var model = array[i];
								initZeroClipboard2($('#grp-' + model.id), $('#source-' + model.id));
							}
						});
					}
				});

	 			//Fetching groups collections
				App_Ticket_Module.groupsCollection.collection.fetch();

				//Rendering template
				$('.ticket-settings', $('#admin-prefs-tabs-content')).html(App_Ticket_Module.groupsCollection.el);
		 		
		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Add ticket group
	 */
	 addTicketGroup: function(){

	 	loadServiceLibrary(function(){

		 	//Rendering root template
		 	App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

		 		var addTicketGroupView = new Base_Model_View({
	 				isNew : true,
	 				template : "add-edit-ticket-group",
	 				url : "/core/api/tickets/groups",
	 				saveCallback : function(){
	 					Backbone.history.navigate( "ticket-groups", { trigger : true });
	 				},
	 				postRenderCallback : function(el) {

	 					//Fetches domain users collection and shows them in add group form
	 					App_Ticket_Module.renderUsersCollection($('#users-collection', el));

	 					var optionTemplate = "<option value='{{id}}'>{{name}}</option>";

	 					//Fetching all email templates
						fillSelect('template_id', '/core/api/email/templates', '', 
							function(collection){}, optionTemplate, false, el);
	 				}
	 			});

	 			$('#admin-prefs-tabs-content').html(addTicketGroupView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	 },

	/**
	 * Edit ticket group
	 */
	 editTicketGroup: function(id){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				//Redirecting to groups collection if collection not exists
		 		if(!App_Ticket_Module.groupsCollection || !App_Ticket_Module.groupsCollection.collection){

	 				Backbone.history.navigate( "ticket-groups", { trigger : true });
	 				return;
	 			}

	 			//Fetching selected group model form collection to render edit form
	 			var group = App_Ticket_Module.groupsCollection.collection.get(id);

	 			//Create base model view with existing group
	 			var editTicketGroupView = new Base_Model_View({
	 				model : group, 
	 				isNew : true, 
	 				template : "add-edit-ticket-group",
	 				saveCallback : function(){
	 					Backbone.history.navigate( "ticket-groups", { trigger : true });
	 				},
	 				url : "/core/api/tickets/groups",
	 				postRenderCallback : function(el, data) {

	 					//Fetching all domains users
	 					App_Ticket_Module.renderUsersCollection($('#users-collection', el), function(){

	 						var agents_keys = data.agents_keys;

	 						//Selecting domain users who are exists in current group
	 						for(var i=0; i < agents_keys.length; i++)
	 							$("input[data='"+ agents_keys[i] +"']").attr('checked', 'checked');

	 						var optionTemplate = "<option value='{{id}}'>{{name}}</option>";

		 					//Fetching all email templates and selecting chosen template
							fillSelect('template_id', '/core/api/email/templates', '', 
								function(){

									if(data.template_id)
										$('#template_id option[value=' + data.template_id + ']', el).attr('selected','selected');
								
								}, optionTemplate, false, el);

	 						//Initializing copy to clipboard button
	 						loadZeroclipboard2(function()
	 						{	
	 							initZeroClipboard2($('#grp-' + data.id), $('#source-' + data.id));
	 						});
	 					});
	 				}
	 			});

	 			$('#admin-prefs-tabs-content').html(editTicketGroupView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 *Shows labels collection
	 */
	 ticketLabels: function(){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
		 	App_Ticket_Module.loadAdminsettingsHelpdeskTemplate({labels: true}, function(callback){

		 		//Creating base collection for fetching labels collection
	 			Ticket_Labels.labelsCollection = new Base_Collection_View({ 
	 				url : 'core/api/tickets/labels', 
	 				templateKey : "ticket-label", 
	 				individual_tag_name : 'tr',
	 				sort_collection : true,
	 				descending : true,
	 				sortKey : 'updated_time'
	 			});

				//Fetching labels collection
				Ticket_Labels.labelsCollection.collection.fetch();

				$('.ticket-settings', $('#admin-prefs-tabs-content')).html(Ticket_Labels.labelsCollection.el);

		 		if(callback)
		 			callback();
		 	});
		});
	 },

	/**
	 * Add ticket group
	 */
	 addTicketLabel: function(){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				var addTicketLabelView = new Base_Model_View({
	 				isNew : false,
	 				template : "ticket-label-add-edit",
	 				url : "/core/api/tickets/labels",
	 				window : "ticket-labels",
	                errorCallback :function(response)
	                {
	                	$('.error_message_label').css('display','block');
	                	// Hides the error message after 5 seconds
	                	
	                	//setTimeout($('.error_message_label').text(response.responseText),5000);
	                    $('.error_message_label').text(response.responseText).delay(5000).hide(1);
	        	        
	                }
	 			});

	 			$('#admin-prefs-tabs-content').html(addTicketLabelView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Edit ticket group
	 */
	 editTicketLabel: function(id){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				if(!Ticket_Labels.labelsCollection || !Ticket_Labels.labelsCollection.collection){

	 				Backbone.history.navigate( "ticket-labels", { trigger : true });
	 				return;
	 			}

	 			var label = Ticket_Labels.labelsCollection.collection.get(id);

	 			var editTicketGroupView = new Base_Model_View({
	 				model : label, 
	 				isNew : true, 
	 				template : "ticket-label-add-edit",
	 				url : "/core/api/tickets/labels",
	 				window : "ticket-labels"
	 			});

	 			$('#admin-prefs-tabs-content').html(editTicketGroupView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Shows list of Groups
	 */
	 ticketFilters : function() {

	 	loadServiceLibrary(function(){
		 	//Rendering root template
		 	App_Ticket_Module.loadAdminsettingsHelpdeskTemplate({filters: true}, function(callback){

		 		App_Ticket_Module.ticketFiltersCollection = new Base_Collection_View({
	 				url : '/core/api/tickets/filters',
	 				templateKey : "ticket-filters",
	 				individual_tag_name : 'tr',
	 				sort_collection : true, 
	 				sortKey : 'updated_time',
	 				descending : true,
	 				slateKey : "no-ticket-filters"
	 			});

	 			App_Ticket_Module.ticketFiltersCollection.collection.fetch();

	 			$('.ticket-settings', $('#admin-prefs-tabs-content')).html(App_Ticket_Module.ticketFiltersCollection.el);

		 		if(callback)
		 			callback();
		 	});
		});
	 },

	/**
	 * Add ticket filter
	 */
	 addTicketFilter: function(){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				var addTicketFilterView = new Ticket_Base_Model({
	 				isNew : true,
	 				template : "ticket-filter-add-edit",
	 				url : "/core/api/tickets/filters",
	 				window : "ticket-views",
	 				postRenderCallback : function(el) {

	 					head.js('lib/agile.jquery.chained.min.js', function()
	 					{
	 						Ticket_Filters.initChaining(el);
	 					});
	 				}
	 			});

	 			$('#admin-prefs-tabs-content').html(addTicketFilterView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Edit ticket group
	 */
	 editTicketFilter: function(id){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				if(!App_Ticket_Module.ticketFiltersCollection || !App_Ticket_Module.ticketFiltersCollection.collection){

	 				Backbone.history.navigate( "ticket-views", { trigger : true });
	 				return;
	 			}

	 			var filter = App_Ticket_Module.ticketFiltersCollection.collection.get(id);

	 			var editTicketFilterView = new Ticket_Base_Model({
	 				model : filter, 
	 				isNew : true,
	 				url : "/core/api/tickets/filters",
	 				template : "ticket-filter-add-edit",
	 				window : "ticket-views",
	 				postRenderCallback : function(el, data) {

	 					head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
	 					{
	 						Ticket_Filters.initChaining(el, data);
	 					});

	 				}
	 			});

	 			$('#admin-prefs-tabs-content').html(editTicketFilterView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Shows list of Canned Responses
	 */
	 cannedResponses : function() {

	 	loadServiceLibrary(function(){
		 	//Rendering root template
		 	App_Ticket_Module.loadAdminsettingsHelpdeskTemplate({canned_responses: true}, function(callback){

		 		Ticket_Labels.fetchCollection(function(){

					App_Ticket_Module.cannedResponseCollection = new Base_Collection_View({
						url : '/core/api/tickets/canned-messages',
						templateKey : "ticket-canned-response",
						individual_tag_name : 'tr',
						sort_collection : true, 
	 					sortKey : 'updated_time',
	 					descending : true,
						slateKey : "no-groups"
					});

					App_Ticket_Module.cannedResponseCollection.collection.fetch();

					$('.ticket-settings', $('#admin-prefs-tabs-content')).html(App_Ticket_Module.cannedResponseCollection.el);
					
					if(callback)
						callback();
				});
		 	});
		});
	},

	/**
	 * Adds canned response
	 */
	 addCannedResponse: function(){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				var addCannedResponseView = new Base_Model_View({
	 				isNew : true,
	 				template : "ticket-canned-response-add-edit",
	 				url : '/core/api/tickets/canned-messages',
	 				window : 'canned-responses',
	 				postRenderCallback: function(el){

	 					Ticket_Labels.showSelectedLabels([], $(el));

	 					initTicketCannedResponseEvents(el);
	 				}
	 			});

	 			$('#admin-prefs-tabs-content').html(addCannedResponseView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Edit canned response
	 */
	 editCannedResponse: function(id){

	 	loadServiceLibrary(function(){
		 	//Rendering root template
			App_Ticket_Module.loadAdminsettingsTemplate(function(callback){

				if(!App_Ticket_Module.cannedResponseCollection || !App_Ticket_Module.cannedResponseCollection.collection){

	 				Backbone.history.navigate( "canned-responses", { trigger : true });
	 				return;
	 			}

	 			var cannedResponse = App_Ticket_Module.cannedResponseCollection.collection.get(id);

	 			var editCannedResponseView = new Base_Model_View({
	 				model : cannedResponse, 
	 				isNew : true, 
	 				url : '/core/api/tickets/canned-messages',
	 				template : "ticket-canned-response-add-edit",
	 				window : "canned-responses",
	 				postRenderCallback: function(el) {
	 					
	 					Ticket_Labels.showSelectedLabels(cannedResponse.toJSON().labels, $(el));
	 					initTicketCannedResponseEvents(el);
	 				}
	 			});

	 			$('#admin-prefs-tabs-content').html(editCannedResponseView.render().el);

		 		if(callback)
		 			callback();
		 	});
		});
	},

	/**
	 * Ticket reports router
	 */
	ticketReports: function(){

		loadServiceLibrary(function(){
			
			getTemplate("ticket-report-container", {}, undefined, function(template_ui){

		 		if(!template_ui)
		 			return;

		 		$('#content').html($(template_ui));

		 		hideTransitionBar();

		 		$('#ticket-reports-tab-container a[href="#overview"]').tab('show');
		 	});
	
		});
	},

	/**
	 * Generates highchart reports for given report type
	 */
	ticketReport: function(report_type){

		loadServiceLibrary(function(){
			report_utility.loadReportsTemplate(function(){
			hideTransitionBar();

			$(".active").removeClass("active");
			$("#reportsmenu").addClass("active");

			//Loading highchart files and daterange picker files
			initReportLibs(function(){

				//CallbCK function executes when daterange picker is changed
				var template = '', callback;

				switch(report_type){
					case 'tickets':
						template = 'tickets-report';
						callback = Ticket_Reports.tickets;
						break;
					case 'priority-report':
						template = 'ticket-priority-report';
						callback = Ticket_Reports.priorityReports;
						break;
					case 'sla-report':
						template = 'ticket-sla-report';
						callback = Ticket_Reports.slaReport;
						break;
					case 'avg-first-resp-time':
						template = 'ticket-avg-first-resp-time';
						callback = Ticket_Reports.avgFirstRespTime;
						break;
				}

				//Renders the required template based on report type
				getTemplate(template, {}, undefined, function(template_ui){

					if(!template_ui)
						return;

					var $template_ui = $(template_ui);

					$('.reports-Container').html($template_ui);	

					//initializing date range picket
					initDateRange(callback);

					callback();

				}, ".reports-Container");
			});
				});
		});
	},

	/**
	 * Renders ticket activities collection
	 */
	renderActivitiesCollection : function(ticket_id, $ele, callback){

	 	App_Ticket_Module.activitiesCollection = new Base_Collection_View({
	 		url : '/core/api/tickets/activity?id=' + ticket_id,
	 		templateKey : "ticket-activities",
	 		sort_collection : true,
	 		sortKey:"time",
	 		customLoader: true,
	 		customLoaderTemplate: "ticket-notes-loader",
	 		descending:true,
	 		individual_tag_name : 'div',
	 		postRenderCallback : function(el) {

	 			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
				{
					$("time", el).timeago();
				});

	 			if(callback)
	 				callback();
	 		}
	 	});

	 	App_Ticket_Module.activitiesCollection.collection.fetch();

	 	$ele.html(App_Ticket_Module.activitiesCollection.el);
	 },

	/**
	 * Fetches all notes related to given ticket id and renders html to provided element.
	 **/
	 renderNotesCollection : function(ticket_id, $ele, callback){

	 	App_Ticket_Module.notesCollection = new Base_Collection_View({
	 		url : '/core/api/tickets/notes/' + ticket_id,
	 		templateKey : "ticket-notes",
	 		sortKey:"created_time",
	 		customLoader: true,
	 		customLoaderTemplate: "ticket-notes-loader",
	 		descending:true,
	 		individual_tag_name : 'div',
	 		postRenderCallback : function(el) {

	 			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
				{
					$("time", el).timeago();
				});

				if(callback)
	 				callback();
	 		}
	 	});

	 	App_Ticket_Module.notesCollection.collection.fetch();

	 	$ele.html(App_Ticket_Module.notesCollection.el);
	 },

	/**
	 * Fetches all domain users and renders html to the provided element.
	 **/
	 renderUsersCollection : function($ele, callback){

		//Fetching users collection
		var collection_def = Backbone.Collection.extend({url : '/core/api/users'});
		var collection = new collection_def();

		collection.fetch(
			{ success : function(){

				var data = collection.toJSON();
				data.sort(function(a, b)
				{
					if (a.name < b.name)
						return -1;
					if (b.name < a.name)
						return 1;
					return 0;
				});

				var html = '';
				for(var i=0; i < data.length; i++){
					html+= getTemplate('ticket-add-group-user', data[i]);
				}

				$ele.html(html);

				if(callback)
					callback();
			}
		});
	},

	loadAdminsettingsTemplate: function(callback){

		getTemplate("admin-settings", {}, undefined, function(template_ui){

			if(!template_ui)
				return;
			
			$('#content').html($(template_ui));	
			
			var tab_highlight_callback = function(){
 				$('#content').find('#AdminPrefsTab .select').removeClass('select');
				$('#content').find('.helpdesk-tab').addClass('select');
 			};

 			if(callback)
 				callback(tab_highlight_callback);
		});
	},

	loadAdminsettingsHelpdeskTemplate: function(json, callback){

		getTemplate("admin-settings", {}, undefined, function(template_ui){

	 		if(!template_ui)
	 			return;

	 		$('#content').html($(template_ui));	

	 		getTemplate("ticket-settings-nav-tab", json, undefined, function(tab_template_ui){

	 			if(!tab_template_ui)
	 				return;

	 			$('#admin-prefs-tabs-content').html($(tab_template_ui));

	 			var tab_highlight_callback = function(){
	 				$('#content').find('#AdminPrefsTab .select').removeClass('select');
 					$('#content').find('.helpdesk-tab').addClass('select');
	 			};

	 			if(callback)
	 				callback(tab_highlight_callback);

	 		}, '#admin-prefs-tabs-content');
	 	}, '#content');
	},
});var VisitorsRouter = Backbone.Router.extend({

routes : { "visitors-old" : "loadGmap" },

initialize : function()
{

},

loadGmap : function()
{
	head.js(LIB_PATH + 'lib/date-charts.js', LIB_PATH + 'lib/date-range-picker.js' + '?_=' + _agile_get_file_hash('date-range-picker.js'),LIB_PATH + 'lib/markerclusterer.js', function()
	{

		var view = new Base_Model_View({ model : new BaseModel(), template : "gmap-html-page",
		// gmap main template id path
		isNew : true, postRenderCallback : function(el)
		{

			try
			{
				if (google.maps)
				{
					gmap_initialize(el);
				}
			}
			catch (err)
			{

				gmap_load_script(el);
			}
		} });

		$('#content').html(view.render().el);
	});

}

});
VISITORS_HARD_RELOAD = true;

var VisitorsSegmentationRouter = Backbone.Router
    .extend({

        routes: {

            /* Webstats */
            "visitors": "visitorssegmentation"         
        },

        visitorssegmentation: function(time_range, is_lhs_filter,view_data,filter_id)
             {

            var postData;
            var start_time;
            var end_time;
            var timeZone;

            if (VISITORS_HARD_RELOAD == true) {
                this.webstatsListView = undefined;
                VISITORS_HARD_RELOAD = false;                
            }
            _agile_delete_prefs("visitor_repeat_filter");
           
            var template_key = "segmentation-custom-view";

            // Default url for contacts route
            var url = 'core/api/web-stats/filter/dynamic-filter';
            if (filter_id||(filter_id=_agile_get_prefs("visitor_filter")))
            {           
            url = "core/api/web-stats/query/list/" + filter_id;
            }
            
            if (_agile_get_prefs('dynamic_visitors_filter')) {

                postData = _agile_get_prefs('dynamic_visitors_filter');
            }

            var slateKey = getSegmentPadcontentKey(url);
            if (is_lhs_filter) {
                template_key = "segmentation-custom-view-table";

            }

            var web_scope = this;
            head
                .js(
                    LIB_PATH + 'lib/date-charts.js',
                    LIB_PATH + 'lib/date-range-picker.js' + '?_=' + _agile_get_file_hash('date-range-picker.js'),
                    function() {

                        // first time entry

                        if (!time_range && _agile_get_prefs('duration')) {

                            var range = _agile_get_prefs('duration')
                                .split(",");
                            start_time = Number(range[0]
                                .substr(range[0].indexOf(":") + 1));
                            end_time = Number(range[1]
                                .substr(range[1].indexOf(":") + 1));

                        } else {

                            if (!time_range)
                                time_range = getFirstTimeWebstats();

                            start_time = time_range[0];
                            end_time = time_range[1];
                        }

                        timeZone=new Date().getTimezoneOffset();

                        web_scope.webstatsListView = new Base_Collection_View({
                            url: url,
                            restKey: "contact",
                            templateKey: template_key,
                            individual_tag_name: 'tr',
                            slateKey: slateKey,
                            cursor: true,
                            request_method: 'POST',
                            post_data: {
                                'filterJson': postData,
                                'start_time': start_time,
                                'end_time': end_time,
                                'timeZone' : timeZone

                            },
                            page_size: 20,
                            sort_collection: false,
                            postRenderCallback: function(
                                el, collection) {

                                                                                             
                               if(collection.models.length==0)
                                     $("#visitors-count").html("<small> (" + 0 + " Total) </small>");
                                else if(collection.models[collection.models.length-1].attributes.count){
                                    
                                    total_count = collection.models[collection.models.length-1].attributes.count;
                                    count_message = "<small> (" + total_count + " Total) </small>";
                                    $("#visitors-count").html(count_message);
                                }                                             
                                                             
                               if (!is_lhs_filter) {
                                    setupAnalyticsLhsFilters(el);
                                    contactFiltersListeners("lhs_filters_segmentation");

                                }

                                if(url.includes('query/list')){
                                    setupSegmentFilterList(el,url.substr(30))
                                }else
                                 setupSegmentFilterList(el);
                            }
                        });

                       // Fetch collection
                        web_scope.webstatsListView.collection
                            .fetch();

                        if (!is_lhs_filter) {
                            $('#content').html(
                                web_scope.webstatsListView.el);

                        } else {
                            $('#content')
                              .find('.visitors-div')
                                .html(
                                    web_scope.webstatsListView.el);
                            VISITORS_HARD_RELOAD = true;
                        }

                        $(".active").removeClass("active");
                        $("#segmentationmenu").addClass("active");
                    });

        }
   
    });


var VoiceMailRouter = Backbone.Router.extend({

	routes : {
	"voicemail" : "voicemail"
	},

	voicemail : function(){
		var that = this;
		getTemplate('settings', {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#content').html($(template_ui));	

			$('#PrefsTab .select').removeClass('select');
			$('.add-widget-prefs-tab').addClass('select');
			
			that.VoiceMailCollectionView = new Base_Collection_View({ url : 'core/api/voicemails', templateKey : "voice-mail", cursor : true, page_size : 20,
				individual_tag_name : 'tr', postRenderCallback : function(el)
				{
					includeTimeAgo(el);
				},
				appendItemCallback : function(el)
				{ 
					// To show time ago for models appended by infinite scroll
					includeTimeAgo(el);
				} });
			
			that.VoiceMailCollectionView.collection.fetch();
			console.log(that.VoiceMailCollectionView);
			$('#prefs-tabs-content').html(that.VoiceMailCollectionView.render().el);

		}, "#content");
	}
});
/**
 * workflows.js is a script file having routes for CRU operations of workflows
 * and triggers.
 * 
 * @module Webpages
 * 
 */
var WebpagesRouter = Backbone.Router
		.extend({
			routes : {

				/* webpages */
				"webpages" : "webpages",
				"webpage-add" : "webpageAdd",
				"webpage/:id" : "webpageEdit",

			},

			/**
			 * 
			 * Gets workflows list.Sets page-size to 10, so that initially
			 * workflows are 10. Cursor is true, when scrolls down , the
			 * workflows list increases.
			 */
			webpages : function() {

				this.webpages_list_view = new Base_Collection_View({
					url : '/core/api/webpages',
					restKey : "webpage",
					sort_collection : false,
					templateKey : "webpages",
					individual_tag_name : 'tr',
					cursor : true,
					page_size : 20,
					postRenderCallback : function(el) {
						head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
							$("time.webpage-created-time", el).timeago();

						});

						start_tour(undefined, el);

					},
					appendItemCallback : function(el) {
						$("time.webpage-created-time", el).timeago();

					}
				});

				this.webpages_list_view.collection.fetch();

				$('#content').html(this.webpages_list_view.el);

				$(".active").removeClass("active");
				$("#webpagesmenu").addClass("active");
			},

			/**
			 * Saves new workflow.After workflow saved,the page should navigate
			 * to workflows list.
			 */
			webpageAdd : function() {
				if (!this.webpages_list_view
						|| !this.webpages_list_view.collection) {
					this.navigate("webpages", {
						trigger : true
					});
					return;
				}

				/* Reset the designer JSON */
				this.webpage_json = undefined;
				this.webpage_model = undefined;

				getTemplate('webpage-add', {"is_new" : true}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	
					initiate_tour("webpages-add", $('#content'));
				}, "#content");
			},

			/**
			 * Updates existing workflow. After workflow updated, the page
			 * navigates to workflows list
			 * 
			 * @param id
			 *            Workflow Id
			 */
			webpageEdit : function(id, webpage) {

				if (!this.webpages_list_view
						|| this.webpages_list_view.collection.length == 0) {
					this.navigate("webpages", {
						trigger : true
					});
					return;
				}

				/* Set the designer JSON. This will be deserialized */
				if (webpage)
					this.webpage_model = webpage;
				else
					this.webpage_model = this.webpages_list_view.collection
							.get(id);

				// Download new one if undefined
				if (this.webpage_model === undefined) {
					console.log("Downloading webpage.");

					// get count value from first attribute count
					var total_count = this.webpages_list_view.collection.at(0).attributes.count;

					if (this.webpages_list_view.collection.length !== total_count) {
						// if not in the collection, download new one.
						var new_webpage_model = Backbone.Model.extend({
							url : '/core/api/webpages/' + id
						});

						var model = new new_webpage_model();
						model.id = id;

						model.fetch({
							success : function(data) {
								// Call workflowEdit again if not Empty
								if (!$.isEmptyObject(data.toJSON())) {
									App_Webpages.webpageEdit(id, model);
									return;
								}
							}
						});
					}
				}

				if (this.webpage_model === undefined)
					return;

				this.webpage_json = this.webpage_model.get("rules");
				var that = this;
				getTemplate('webpage-add', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					var el = $('#content').html($(template_ui));	
					// Set the name
					$('#name').val(that.webpage_model.get("name"));
				}, "#content");
			},

		});
/**
 * Creates backbone router to access preferences of the user (email templates,
 * email (gmail/IMAP), notifications and etc..).
 */

 var templateUrl;
var WebreportsRouter = Backbone.Router.extend({

	routes : {
	/* Settings */
	"web-rules" : "webrules", "webrules-add" : "web_reports_add", "webrule-edit/:id" : "web_reports_edit", "webrules-templates" : "webrules_display", "webrules-add/*path" : "webrules_template_load", "webrules-custom" : "load_empty_editor"},
	webrules : function()
	{
		var that = this;
		this.webrules = new Base_Collection_View({ url : '/core/api/webrule', restKey : "webrule", templateKey : "webrule", individual_tag_name : 'tr',
			sortKey : 'position', postRenderCallback : function(el)
			{
				if (that.webrules.collection && that.webrules.collection.length == 0)
				{
					head.js(LIB_PATH + 'lib/prettify-min.js', function()
					{
						$.ajax({ url : 'core/api/api-key', type : 'GET', dataType : 'json', success : function(data)
						{
							getTemplate("webrule-collection", data, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$('#content').html($(template_ui));	
								if(ACCOUNT_PREFS.plan.plan_type.split("_")[0] == "PRO")
								{
									$("#whitelist-disabled").addClass("hide");
									$("#whitelist-enabled").removeClass("hide");
								}
								prettyPrint();

							}, "#content");

							
						} });

					});
				}
				else
				{
					enableWebrulesSorting(el);
				}
			} });

		this.webrules.collection.fetch();
		$("#content").html(this.webrules.render().el);
		$(".active").removeClass("active");
		$("#web-rules-menu").addClass("active");

	},
	web_reports_add : function()
	{
		$('.fancybox-wrap').hide();

		if(!tight_acl.checkPermission('WEBRULE'))
			return;
		var web_reports_add = new Web_Rules_Event_View({ url : 'core/api/webrule', template : "webrules-add", window : "web-rules", isNew : true,
			
			postRenderCallback : function(el)
			{
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js?_=1452593296', function()
				{

					chainFilters(el, undefined, function()
					{
						chainWebRules(el, undefined, true);
						$("#content").html(el);
					}, true);

				})
			} });

		$("#content").html(getRandomLoadingImg());
		web_reports_add.render();
	},

	web_reports_edit : function(id)
	{
		$('.fancybox-wrap').hide();

		if(!tight_acl.checkPermission('WEBRULE'))
			return;

		// If reports view is not defined, navigates to reports
		if (!this.webrules || !this.webrules.collection || this.webrules.collection.length == 0 || this.webrules.collection.get(id) == null)
		{
			this.navigate("web-rules", { trigger : true });
			return;
		}

		var count = 0;

		// Gets a report to edit, from reports collection, based on id
		var webrule = this.webrules.collection.get(id);

		// Default template is webrule-add. If rule is of type shopify template is changed accordingly
		var template = "webrules-add";
		var web_reports_add = new Web_Rules_Event_View({ url : 'core/api/webrule', model : webrule, template : template, window : "web-rules",
			postRenderCallback : function(el)
			{
				if (count > 0)
					return;
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js?_=1452593296', function()
				{
					chainFilters(el, webrule.toJSON(), function()
					{
						chainWebRules(el, webrule.toJSON(), false, webrule.toJSON()["actions"]);
						$("#content").html(el);
					}, true);

				})
				count++;
			} });

		$("#content").html(getRandomLoadingImg());
		web_reports_add.render();
	},

	webrules_display : function(){

			$('.fancybox-overlay').hide();

		 $('#content').html("<link rel='stylesheet' type='text/css' href='flatfull/css/jquery.fancybox.css'><div id='webrule-listeners'></div>");
        
        head.js('flatfull/lib/jquery.fancybox.js',function() {

        $.getJSON("misc/modal-templates/webrule-templates.json", function(data) {

            getTemplate("webrule-categories", null, undefined, function(ui){
            	$("#webrule-listeners").append($(ui));
            },"#webrule-listeners");

            
            $(".web_fancybox").fancybox({
                    'autoDimensions': true,
                    'padding'       : 0,
                    'autoScale'     : true,
                    'overflow'		: 'visible'
                 });

                hideTransitionBar();
            });
        });

	},

	webrules_template_load : function(path){

			$('.fancybox-wrap').hide();

		if(!tight_acl.checkPermission('WEBRULE'))
			return;
		var web_reports_add = new Web_Rules_Event_View({ url : 'core/api/webrule', template : "webrules-add", window : "web-rules", isNew : true,
			postRenderCallback : function(el)
			{
				if(path.includes("callpopup.html"))
					el.find("#action select").val("CALL_POPUP");
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js?_=1452593296', function()
				{
					chainFilters(el, undefined, function()
					{
						chainWebRules(el, undefined, true);
						$("#content").html(el);
						loadSavedTemplate(path, function(data) {
							$("#tiny_mce_webrules_link").trigger('click');
						});
					}, true);
				})
				
			} });

		$("#content").html(getRandomLoadingImg());
		web_reports_add.render();
	},

	load_empty_editor : function(){

		$('.fancybox-wrap').hide();

		if(!tight_acl.checkPermission('WEBRULE'))
			return;
		var web_reports_add = new Web_Rules_Event_View({ url : 'core/api/webrule', template : "webrules-add", window : "web-rules", isNew : true,
			
			postRenderCallback : function(el)
			{
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js?_=1452593296', function()
				{

					chainFilters(el, undefined, function()
					{
						chainWebRules(el, undefined, true);
						$("#content").html(el);
						$("#tinyMCEhtml_email").text(" ");
						$("#tiny_mce_webrules_link").trigger('click');
					}, true);

				})
			} });

		$("#content").html(getRandomLoadingImg());
		web_reports_add.render();
	}

	 });

function show_fancy_box(content_array)
{
	var obj = {
		"href" 	: content_array.href,
		"link" 	: content_array.getAttribute("data-link"),
		"title"	: content_array.title
	};
	
	  // Shows content array in fancybox
    $.fancybox.open(obj,{

    	padding     : 10,
        margin      : [20, 60, 20, 60],
        width : 100,
        helpers : {
     	        overlay : {
     	            css : {
     	                'background' : 'rgba(58, 42, 45, 0.95)'
     	            }
     	        }
     	    },
     	    beforeLoad: function() {

            content_array.title = '<a data-link='+this.link+' style="color: white; text-decoration: underline;" href="#webrules-add/'+this.link+'" >Load in Editor</a>';
         },
         afterLoad: function()
         {
        	
        }

 	}); // End of fancybox
}

function loadSavedTemplate(templateURL, callback){
	
	templateUrl=templateURL;
	templateURL = "/misc/modal-templates/" + templateURL;

	 $.ajax({
            url: templateURL,
            data: {},
            success: function(data) {
            	data = data.trim();

            	if(isNotValid(data))
				{
					showError("Please enter a valid html message");
					return;
				}
				if(templateUrl.includes("callpopup.html"))
					$("#callwebrule-code").text(data);
				else
                	$("#tinyMCEhtml_email").text(data);
				
				if( callback && typeof(callback) === 'function' )	callback(data);
            }
        });
}

function isNotValid(value)
{
	if(value == undefined)
		return true;
	
	if(value.length == 0)
		return true;
	
	return false;
}

/**
 * Creates backbone router to access preferences of the user widgets
 */
var WidgetsRouter = Backbone.Router

        .extend({
            routes : {
                // Add widgets main route
                "add-widget" : "addWidget",
                // Social widgets
                "Twitter" : "Twitter",
                "Twitter/:id" : "Twitter",
                "GooglePlus" : "GooglePlus",
                "GooglePlus/:id" : "GooglePlus",
                "Rapleaf" : "Rapleaf",
                "Rapleaf/:id" : "Rapleaf",
                "Facebook" : "Facebook",
                "Facebook/:id" : "Facebook",
                // Support widgets
                "ClickDesk" : "ClickDesk",
                "ClickDesk/:id" : "ClickDesk",
                "HelpScout" : "HelpScout",
                "HelpScout/:id" : "HelpScout",
                "Zendesk" : "Zendesk",
                "Zendesk/:id" : "Zendesk",
                "Uservoice" : "Uservoice",
                "Uservoice/:id" : "Uservoice",
                // Calling widgets
                "Sip" : "Sip",
                "Sip/:id" : "Sip",
                "Twilio" : "Twilio",
                "Twilio/:id" : "Twilio",
                "TwilioIO" : "TwilioIO",
                "TwilioIO/:id" : "TwilioIO",
                "callscript/rules" : "CallScriptShow",
                "callscript/add-rules" : "CallScriptAdd",
                "callscript/editrules/:id" : "CallScriptEdit",
                "callscript" : "CallScript",
                "callscript/:id" : "CallScript",
                // Billing widgets
                "FreshBooks" : "FreshBooks",
                "FreshBooks/:id" : "FreshBooks",
                "Stripe" : "Stripe",
                "Stripe/:id" : "Stripe",
                "Braintree" : "Braintree",
                "Braintree/:id" : "Braintree",
                "Xero" : "Xero",
                "Xero/:id" : "Xero",
                "QuickBooks" : "QuickBooks",
                "QuickBooks/:id" : "QuickBooks",
                "PayPal" : "PayPal",
                "PayPal/:id" : "PayPal",
                // Ecommerce widgets
                "Shopify" : "Shopify",
                "Shopify/:id" : "Shopify",
                // Custom widget
                "Custom-widget" : "Custom",
                "Custom-widget/:id" : "Custom",
				"Bria" : "Bria", "Bria/:id" : "Bria",
				"Skype" : "Skype", "Skype/:id" : "Skype"

                	
            },

            /**
             * Adds the configured and configurable widgets on widgets add
             * route.
             */
            addWidget : function() {

                var that = this;
                loadSettingsUI(function() {

                    that.Catalog_Widgets_View = new Base_Collection_View({
                        url : '/core/api/widgets/default',
                        restKey : "widget",
                        templateKey : "widgets-add-new",
                        sort_collection : false,
                        individual_tag_name : 'div',
                        postRenderCallback : function(el) {
                            var widgetTab = _agile_get_prefs("widget_tab");
                            if(!widgetTab || widgetTab == null) {
                                _agile_set_prefs('widget_tab', "call-tab");
                                widgetTab = "call-tab";
                            }
                            $('#prefs-tabs-content a[href="#'+widgetTab+'"]').tab('show');
                            initializeWidgetSettingsListeners();
                            $("#prefs-tabs-content .tab-container ul li").off("click");
                            $("#prefs-tabs-content").on("click",".tab-container ul li",function(){
                                var temp = $(this).find("a").attr("href").split("#");
                                _agile_set_prefs('widget_tab', temp[1]);
                            });
                            build_custom_widget_form(el);
                            /*setTimeout(function() {
                                var socialHeight = 0;
                                $('#social > div', el).each(function() {
                                    if ($(that).height() > socialHeight)
                                        socialHeight = $(that).height();
                                });
                                $('#social > div', el).each(function() {
                                    $(that).height(socialHeight);
                                });
                            }, 1000);*/
                            $('[data-toggle="tooltip"]').tooltip();
                        }
                    });

                    // Append widgets into view by organizing them
                    that.Catalog_Widgets_View.appendItem = organize_widgets;
                    
                    // Fetch the list of widgets
                    that.Catalog_Widgets_View.collection.fetch({
                        success : function(data) {
                            console.log(data.where({
                                "is_added" : true
                            }));
                            _plan_restrictions.process_widgets(data);
                            console.log(data);
                            console.log("****");
                        }
                    });

                    // Shows available widgets in the content
                    $('#prefs-tabs-content').html(that.Catalog_Widgets_View.el);

                });

            },

            /**
             * Manages FreshBooks widget
             */
            FreshBooks : function(id) {
                addConfigurableWidget(id, "FreshBooks", 'freshbooks-login');
            },

            /**
             * Manages TwilioIo widget
             */
            TwilioIO : function(id) {
                addConfigurableWidget(id, "TwilioIO", 'twilioio-login');
            },
            
			/**
			 * Manages Bria widget
			 */
			 Bria : function(id) {
			 	addConfigurableWidget(id, "Bria", 'bria-login');
			 },
			 
			 /**
			 * Manages Skype widget
			 */
			 Skype : function(id) {
			 	addConfigurableWidget(id, "Skype", 'skype-login');
			 },
			 
            /**
             * Manages Rapleaf widget
             */
            Rapleaf : function(id) {
                addConfigurableWidget(id, "Rapleaf", "rapleaf-login");
            },

            /**
             * Manages ClickDesk widget
             */
            ClickDesk : function(id) {
                addConfigurableWidget(id, "ClickDesk", "clickdesk-login");
            },

            /**
             * Manages Zendesk widget
             */
            Zendesk : function(id) {
                addConfigurableWidget(id, "Zendesk", "zendesk-login");
            },
            
            /**
             * Manages Uservoice widget
             */            
            Uservoice : function(id){
                addConfigurableWidget(id, "Uservoice", "uservoice-login");
            },

            /**
             * Manages HelpScout widget
             */
            HelpScout : function(id) {
                addConfigurableWidget(id, "HelpScout", "helpscout-login");
            },

            /**
             * Manages Sip widget
             */
            Sip : function(id) {
                addConfigurableWidget(id, "Sip", "sip-login");
            },

            /**
             * Manages Twitter widget
             */
            Twitter : function(id) {
                if (!id) {
                    addOAuthWidget(
                            "Twitter",
                            "twitter-login",
                            ('/scribe?service=twitter&linkType=widget&isForAll=' + isForAll
                                    + '&return_url='
                                    + encodeURIComponent(window.location.href)));
                } else {
                    addWidgetProfile(id, "Twitter", "twitter-revoke-access",
                            "core/api/widgets/social/profile/"+id);
                }

            },

            /**
             * Manages Facebook widget
             */
            Facebook : function(id) {
                if (!id) {
                    addOAuthWidget(
                            "Facebook",
                            "facebook-login",
                            ('/scribe?service=facebook&linkType=widget&isForAll=' + isForAll
                                    + '&return_url='
                                    + encodeURIComponent(window.location.href)));
                } else {
                    addWidgetProfile(id, "Facebook", "facebook-revoke-access",
                            "/core/api/widgets/facebook/currentUserProfile/"+id);
                }

            },

            /**
             * Manages Facebook widget
             */
            Xero : function(id) {
                if (!id) {
                    addOAuthWidget(
                            "Xero",
                            "xero-login",
                            ("http://integrations.clickdesk.com:8080/ClickdeskPlugins/agile-xero-oauth?callbackUrl=" + encodeURIComponent(window.location.protocol
                                    + "//"
                                    + window.location.host
                                    + "/XeroServlet?isForAll="
                                    + isForAll
                                    + "&linkType=widget&data=")));
                } else {
                    addWidgetProfile(id, "Xero", "xero-revoke-access",
                            "core/api/widgets/Xero");
                }

            },

            /**
             * Manages Quickbooks widget
             */
            QuickBooks : function(id) {
                if (!id) {
                    addOAuthWidget(
                            "QuickBooks",
                            "quickbooks-login",
                            ('/OAuthServlet?service=quickbooks&linkType=widget&isForAll='
                                    + isForAll + '&return_url='
                                    + encodeURIComponent(window.location.href)));
                } else {
                    addWidgetProfile(id, "QuickBooks",
                            "quickbooks-revoke-access",
                            "core/api/widgets/QuickBooks");
                }

            },

           /**
            *
            */
            PayPal : function(id){

               if (!id) {
                    addOAuthWidget(
                            "PayPal",
                            "paypal-login",
                            ('/paypalScribe?isForAll=' + isForAll + '&return_url='
                                    + encodeURIComponent(window.location.href)));
                } else {
                    addWidgetProfile(id, "PayPal", "paypal-revoke-access",
                            "core/api/widgets/paypal");
                }

            },

            /**
             * Manages Shopify widget
             */
            Shopify : function(id) {
                if (!id) {
                    addOAuthWidget("Shopify", "shopify-login", "");
                } else {
                    addWidgetProfile(id, "Shopify", "shopify-revoke-access",
                            "/core/api/widgets/default");
                }
                // addConfigurableWidget(id, "Shopify", "shopify-login");
            },

            /**
             * Manages GooglePlus widget
             */
            GooglePlus : function(id) {
                if (!id) {
                    addOAuthWidget(
                            "GooglePlus",
                            "googleplus-login",
                            ('/scribe?service=googleplus&linkType=widget&isForAll=' + isForAll
                                    + '&return_url='
                                    + encodeURIComponent(window.location.href)));
                } else {
                    addWidgetProfile(id, "GooglePlus",
                            "googleplus-revoke-access",
                            "core/api/widgets/GooglePlus");
                }

            },

            /**
             * Manages Stripe widget
             */
            Stripe : function(id) {
                if (!id) {
                    addOAuthWidget(
                            "Stripe",
                            "stripe-login",
                            ('/scribe?service=stripe&linkType=widget&isForAll=' + isForAll));                   
                } else {
                    addWidgetProfile(id, "Stripe", "stripe-revoke-access",
                            "core/api/widgets/Stripe");
                }

            },

            /**
             * Manages Stripe widget
             */
            Braintree : function(id) {
               addConfigurableWidget(id, "Braintree", "braintree-login");
            },

            /**
             * Manages CallScript widget
             */
            CallScript : function(id)
            {
                addConfigurableWidget(id, "CallScript", "callscript-login");
                if(id){
                    adjust_form();
                }
            },
            
            /**
             * Show CallScript rules
             */
            CallScriptShow : function()
            {   
                showCallScriptRule();
            },
            
            /**
             * Add CallScript rules
             */
            CallScriptAdd : function()
            {
                addCallScriptRule();
            },
            
            /**
             * Edit CallScript rules
             */
            CallScriptEdit : function(id)
            {
                editCallScriptRule(id);
            }
});

function getAgileConfiguredWidgetCollection(callback) {

    if (App_Widgets.Catalog_Widgets_View
            && App_Widgets.Catalog_Widgets_View.collection) {

        callback(App_Widgets.Catalog_Widgets_View.collection);
        return;
    }

    App_Widgets.Catalog_Widgets_View = new Base_Collection_View({
        url : '/core/api/widgets/default'
    });

    // Fetch the list of widgets
    App_Widgets.Catalog_Widgets_View.collection.fetch({
        success : function() {

            getAgileConfiguredWidgetCollection(callback);

        }
    });
}

function renderWidgetView(templateName, url, model, renderEle){

    var widgetModel = new Widget_Model_Events({
        template : templateName,
        url : url,
        isNew : true,
        data : model,
        postRenderCallback : function(el) {
            if(model && model.name != "Stripe"){
                deserializeWidget(model, el);
            }
            var widgetTab = _agile_get_prefs("widget_tab");
            $("#prefs-tabs-content").find('a[href="#'+widgetTab+'"]').closest("li").addClass("active");
            initializeTabListeners("widget_tab", "add-widget");
        }
    });
    var output = widgetModel.render().el;
    $(renderEle).html(output);
}
/**
 * workflows.js is a script file having routes for CRU operations of workflows
 * and triggers.
 * 
 * @module Campaigns
 * 
 */
var WorkflowsRouter = Backbone.Router
		.extend({
			routes : {

			/* workflows */
			"workflows" : "workflows", "workflow-add" : "workflowAdd", "workflow/:id" : "workflowEdit",

			/* workflow templates */
			"workflow-templates" : "workflowTemplates", "workflow-add/:c/:t" : "workflowAddTemplate",

			/* Logs */
			"workflows/logs/:id" : "logsToCampaign",

			/* Campaign Stats */
			"campaign-stats" : "campaignStats", "email-reports/:id" : "emailReports",

			/* Triggers */
			"triggers" : "triggers",

			// Appends campaign-id to show selected campaign-name in add trigger
			// form.
			"trigger-add/:id" : "triggerNewUI",

			"trigger-add" : "triggerNewUI", "trigger/:id" : "triggerEdit",

			/* Subscribers */
			"workflow/all-subscribers/:id" : "allSubscribers", "workflow/active-subscribers/:id" : "activeSubscribers",
				"workflow/completed-subscribers/:id" : "completedSubscribers", "workflow/removed-subscribers/:id" : "removedSubscribers",

				"workflow/unsubscribed-subscribers/:id" : "unsubscribedSubscribers", "workflow/hardbounced-subscribers/:id" : "hardBouncedSubscribers",
				"workflow/softbounced-subscribers/:id" : "softBouncedSubscribers", "workflow/spam-reported-subscribers/:id" : "spamReportedSubscribers",
				// Added for Campaign sharing
				"share-campaign/:c/:t" : "shareWorkflow"

			},

			/**
			 * Gets workflows list.Sets page-size to 10, so that initially
			 * workflows are 10. Cursor is true, when scrolls down , the
			 * workflows list increases.
			 */
			workflows : function()
			{

				if (this.workflow_list_view && this.workflow_list_view.collection && this.workflow_list_view.collection.length > 0)
				{
					//$('body').trigger('agile_collection_loaded');
					$("#content").html('<div id="workflows-listener-container"></div>').find('#workflows-listener-container').html(this.workflow_list_view.render(true).el);
					$(".active").removeClass("active");
					$("#workflowsmenu").addClass("active");
					return;
				}


				this.workflow_list_view = new Base_Collection_View({ url : '/core/api/workflows', restKey : "workflow", sort_collection : false,
					templateKey : "workflows", individual_tag_name : 'tr', cursor : true, page_size : 20, postRenderCallback : function(el)
					{
						head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
						{
							$("time.campaign-created-time", el).timeago();

						});

						start_tour(undefined, el);

						// If workflows not empty, show triggers
						if (App_Workflows.workflow_list_view && !(App_Workflows.workflow_list_view.collection.length === 0))
							show_triggers_of_each_workflow(el);
						
						if (App_Workflows.workflow_list_view && !(App_Workflows.workflow_list_view.collection.length === 0))
						{
								if(App_Workflows.workflow_list_view.collection.toJSON()[0])
								{
									el.find('#campaign_logs').attr('href','#email-reports/' + App_Workflows.workflow_list_view.collection.toJSON()[0].id);
									return;
								}
								else
								{
									el.find('#campaign_logs').attr('href','#workflows');
									return;
								}
						}
						else
						{
							el.find('#campaign_logs').attr('href','#workflows');
							return;
						}
					}, appendItemCallback : function(el)
					{
						$("time.campaign-created-time", el).timeago();

						// Shows triggers to workflows appended on scroll
						show_triggers_of_each_workflow(el);

					} });

				this.workflow_list_view.collection.fetch();
			
				$("#content").html('<div id="workflows-listener-container"></div>').find('#workflows-listener-container').html(this.workflow_list_view.el);
				// initializeWorkflowsListeners();
				
				$(".active").removeClass("active");
				$("#workflowsmenu").addClass("active");
				
			},

			/**
			 * Saves new workflow.After workflow saved,the page should navigate
			 * to workflows list.
			 */
			workflowAdd : function()
			{
				if (!this.workflow_list_view || !this.workflow_list_view.collection)
				{
					this.navigate("workflows", { trigger : true });
					return;
				}

				/* Reset the designer JSON */
				this.workflow_json = undefined;
				this.workflow_model = undefined;

				var workflowModal = new Workflow_Model_Events({
					url : 'core/api/workflow', 
					template : 'workflow-add',
					isNew : 'true',
					data : {  "is_new" : true, "is_disabled" : "false", "was_disabled" : "false" },
					postRenderCallback : function(el){
						
						initiate_tour("workflows-add", $('#content'));	
						var optionsTemplate = "<option value='{{id}}'> {{#if name}}{{name}}{{else}}{{subject}}{{/if}}</option>";
						fillSelect('sendEmailSelect', '/core/api/email/templates', 'emailTemplates', function(){
							console.log($(el).html());
						}, optionsTemplate, false, el, 'Default template');

						// Init SendVerify Email
						send_verify_email(el);
					}

				});

				$("#content").html(workflowModal.render().el);

			},

			/**
			 * Updates existing workflow. After workflow updated, the page
			 * navigates to workflows list
			 * 
			 * @param id
			 *            Workflow Id
			 */
			workflowEdit : function(id, workflow)
			{

				if (!this.workflow_list_view || this.workflow_list_view.collection.length == 0)
				{
					this.navigate("workflows", { trigger : true });
					return;
				}

				/* Set the designer JSON. This will be deserialized */
				if (workflow)
					this.workflow_model = workflow;
				else
					this.workflow_model = this.workflow_list_view.collection.get(id);

				// Download new one if undefined
				if (this.workflow_model === undefined)
				{
					console.log("Downloading workflow.");

					// get count value from first attribute count
					var total_count = this.workflow_list_view.collection.at(0).attributes.count;

					if (this.workflow_list_view.collection.length !== total_count)
					{
						// if not in the collection, download new one.
						var new_workflow_model = Backbone.Model.extend({ url : '/core/api/workflows/' + id });

						var model = new new_workflow_model();
						model.id = id;

						model.fetch({ success : function(data)
						{
							// Call workflowEdit again if not Empty
							if (!$.isEmptyObject(data.toJSON()))
							{
								App_Workflows.workflowEdit(id, model);
								return;
							}
						} });
					}
				}

				if (this.workflow_model === undefined)
					return;

				this.workflow_json = this.workflow_model.get("rules");
				this.is_disabled = this.workflow_model.get("is_disabled");
				var that = this;

				var workflowModal = new Workflow_Model_Events({
					url : 'core/api/workflow', 
					template : 'workflow-add',
					isNew : 'true',
					data :  {"is_disabled" : ""+that.is_disabled},
					postRenderCallback : function(el){
						head.load(CSS_PATH + 'css/bootstrap_switch.css', LIB_PATH + 'lib/bootstrapSwitch.js', LIB_PATH + 'lib/desktop-notify-min.js');
						
						// Set the name
						$('#workflow-name', el).val(that.workflow_model.get("name"));

						var unsubscribe = that.workflow_model.get("unsubscribe");

						$('#unsubscribe-email', el).val(unsubscribe.unsubscribe_email);
						$('#unsubscribe-name', el).val(unsubscribe.unsubscribe_name);
						$('#unsubscribe-tag', el).val(unsubscribe.tag);
						$('#unsubscribe-action', el).val(unsubscribe.action);
						
						$('#unsubscribe-action', el).trigger('change');

						var level = that.workflow_model.get("access_level");
						$('#access_level', el).val(level);
						change_access_level(level, el);

						console.log($(el).html());
						if(that.is_disabled)
								$('#designer-tour', el).addClass("blur").removeClass("anti-blur");

						var optionsTemplate = "<option value='{{id}}'> {{#if name}}{{name}}{{else}}{{subject}}{{/if}}</option>";
						fillSelect('sendEmailSelect', '/core/api/email/templates', 'emailTemplates', function(){
							console.log($(el).html());
							var mId = unsubscribe.unsubscribe_subject;
							//$('#sendEmailSelect').append($("<option></option>").attr("value","None").text("None"));
							$('select option[value="' + mId + '"]', el).attr("selected",true);
							//$("select option").val(mId).attr("selected", true);
						}, optionsTemplate, false, el, 'Default template');
						

						// Init SendVerify Email
						send_verify_email(el);
					}

				});

				$("#content").html(workflowModal.render().el);

			},

			/**
			 * Fetches various default workflow template jsons such as
			 * newsletter etc and build UI to show various templates to select
			 * workflow template.
			 * 
			 */
			workflowTemplates : function()
			{
				
				if (!this.workflow_list_view || !this.workflow_list_view.collection)
					{
						this.navigate("workflows", { trigger : true });
						return;
					}
				$("#content").html('<div id="workflows-listener-container"></div>');
				getTemplate('workflow-categories', {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;
					$('#workflows-listener-container').html($(template_ui));
					// initializeWorkflowsListeners();
					var activetab = _agile_get_prefs("workflows_tab");

					if(!activetab || activetab == null) {
						_agile_set_prefs('workflows_tab', "general");
						activetab = "general";
					}
					$("#workflows-tab-container").on("click",".tab-container ul li",function(){
						var temp = $(this).find("a").attr("href").split("#");
						_agile_set_prefs('workflows_tab', temp[1]);
					});
					
					$('#workflows-tab-container a[href="#'+activetab+'"]').tab('show');
					
					
				}, "#workflows-listener-container");
			},

			/**
			 * Shows constructed workflow that matches with the template_name.
			 * 
			 * @param template_name -
			 *            template name.
			 */
			workflowAddTemplate : function(category, template_name)
			{
				if (!this.workflow_list_view || !this.workflow_list_view.collection)
				{
					this.navigate("workflows", { trigger : true });
					return;
				}

				/* Reset the designer JSON */
				this.workflow_json = undefined;
				this.workflow_model = undefined;

				// Get workflow template based on category and template name
				var workflow_template_model = Backbone.Model.extend({

				url : 'misc/campaign-templates/' + category + '/' + template_name + '_template.jsp' });

				var model = new workflow_template_model();

				var that = this;

				model.fetch({ success : function(data)
				{
					that.workflow_json = JSON.stringify(data);
				} });

				var workflowModal = new Workflow_Model_Events({
					url : 'core/api/workflow', 
					template : 'workflow-add',
					isNew : 'true',
					data : { "is_new" : true, "is_disabled" : false, "was_disabled" : false  },
					postRenderCallback : function(el){

						var optionsTemplate = "<option value='{{id}}'> {{#if name}}{{name}}{{else}}{{subject}}{{/if}}</option>";
						fillSelect('sendEmailSelect', '/core/api/email/templates', 'emailTemplates', function(){
							console.log($(el).html());
						}, optionsTemplate, false, el, 'Default template');

						// Init SendVerify Email
						send_verify_email(el);
					}

				});

				$("#content").html(workflowModal.render().el);

			},

			/**
			 * Gets list of logs with respect to campaign.
			 * 
			 * @param id
			 *            Workflow Id
			 * 
			 * @param log_type -
			 *            log-filter type
			 * 
			 * @param log_filter_title -
			 *            selected title to show on button.
			 */
			logsToCampaign : function(id, log_type, log_filter_title)
			{

				this.render_email_reports_select_ui(id, function(){

						getTemplate("campaign-analysis-tabs", { "id" : id }, undefined, function(template_ui)
						{
							if (!template_ui)
								return;

							// Render tabs
							$('#campaign-analysis-tabs').html($(template_ui));

							if (log_type == undefined || log_type == "ALL")
								log_type = "";
							else
								log_type = '?log-type=' + log_type;

							var logsListView = new Workflow_Reports_Events({ url : '/core/api/campaigns/logs/' + id + log_type, templateKey : "campaign-logs",
								cursor : true,page_size :20, individual_tag_name : 'tr', sort_collection :false, postRenderCallback : function(el)
								{
									initializeTriggersListeners();
									head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
									{
										$("time.log-created-time", el).timeago();
									});

									$('#log-filter-title').html(log_filter_title);
									
								},appendItemCallback : function(el)
								{
									includeTimeAgo(el);
								}  
								});

							logsListView.collection.fetch({ success : function(collection)
							{
								if (collection.length === 0)
									fill_logs_slate('logs-slate', log_type.split('=')[1]);
							} });

							$('#campaign-analysis-tabs-content').html(logsListView.el);

							$('#campaign-tabs .select').removeClass('select');
							$('.campaign-logs-tab').addClass('select');

						}, "#campaign-analysis-tabs");

				});

				
			},

			/** Gets list of campaign-stats * */
			campaignStats : function()
			{
				hideTransitionBar();
				// Load Reports Template
				getTemplate("campaign-stats-chart", {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#content').html($(template_ui));	

					// Show bar graph for campaign stats
					showBar('/core/api/campaign-stats/stats/', 'campaign-stats-chart', 'Campaigns Comparison', 'Email Stats', null);

					$(".active").removeClass("active");
					$("#workflowsmenu").addClass("active");
				}, "#content");
			},

			/**
			 * Returns campaign stats graphs data for given campaign-id.
			 * 
			 * @param id -
			 *            workflow id
			 */
			emailReports : function(id)
			{
				showTransitionBar();

				this.render_email_reports_select_ui(id, function(){

					getTemplate("campaign-analysis-tabs", { "id" : id }, undefined, function(template_ui)
					{
						if (!template_ui)
							return;

						// Render tabs with id
						$('#campaign-analysis-tabs').html($(template_ui));
						// Hide bulk subscribers block
						$('#subscribers-block').hide();

						initReportLibs(function()
						{
							// Load Reports Template
							getTemplate('campaign-email-reports', {}, undefined, function(template_ui1)
							{
								if (!template_ui1)
									return;
								
								$('#campaign-analysis-tabs-content').html($(template_ui1));
								
								// Set the name
								// $('#reports-campaign-name').text(workflowName);
								initChartsUI(function()
								{
									// Updates table data
									get_email_table_reports(id);

									// shows graphs by default week date range.
									showEmailGraphs(id);
								});
							}, "#campaign-analysis-tabs-content");

						});

						$(".active").removeClass("active");
						$("#workflowsmenu").addClass("active");

						$('#campaign-tabs .select').removeClass('select');
						$('.campaign-stats-tab').addClass('select');

						hideTransitionBar();

					}, "#campaign-analysis-tabs");
				
				});

			},

			/** Gets list of triggers */
			triggers : function()
			{
				this.triggersCollectionView = new Base_Collection_View({
						url : '/core/api/triggers', 
						restKey : "triggers", 
						templateKey : "triggers", 
						individual_tag_name : 'tr', 
						postRenderCallback : function(el, collection) {
							// If there are form submit triggers, fetch their name and update UI.
							// Iterate over the models in the collection
							$.each(collection.models, function(index, model) {
								var modelJSON = model.toJSON();
								if( modelJSON.type == 'FORM_SUBMIT' && modelJSON.trigger_form_event && modelJSON.trigger_form_event != '' )
								{
									getFormNameForTrigger(modelJSON.trigger_form_event, function(formName) {
										//Replace content in the table cell for the form name
										$('#' + getFormNameCellIDForFormSubmitTriggers(modelJSON.trigger_form_event))
												.parent()
												.html(formName);
									});
								}
							});
						} 
					});


				this.triggersCollectionView.collection.fetch();

				$('#content').html(this.triggersCollectionView.el);

				$(".active").removeClass("active");
				$("#workflowsmenu").addClass("active");
			},

			/**
			 * Shows new trigger UI
			 */
			 triggerNewUI : function(campaign_id)
			 {
			 	$('#content').html("<div id='trigger-listener'>&nbsp;</div>");

				this.triggerModelview = new Base_Model_View({ url : 'core/api/triggers', template : "trigger-categories", isNew : true, window : 'triggers',
					/**
					 * Callback after page rendered.
					 * 
					 * @param el
					 *            el property of Backbone.js
					 */
					postRenderCallback : function(el)
					{
					//	var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";

						// fill the selected campaign-id
						
						$('#campaign-id').val(campaign_id);

						initializeTriggerEventListners(campaign_id);
						
						var activetab = _agile_get_prefs("triggers_tab");
						if(!activetab || activetab == null) {
							_agile_set_prefs('triggers_tab', "contact");
						}
						$("#triggers-tab-container",el).on("click",".tab-container ul li",function(){
							var temp = $(this).find("a").attr("href").split("#");
							_agile_set_prefs('triggers_tab', temp[1]);
						});
						activetab = _agile_get_prefs("triggers_tab");
						$('#triggers-tab-container a[href="#'+activetab+'"]').tab('show');
					}
				
				});
				
				var view = this.triggerModelview.render();

				$('#trigger-listener').html(view.el);

				$('#campaign-id').val(campaign_id);


			 },
			/**
			 * Saves new trigger. Loads jquery.chained.js to link Conditions and
			 * Value of input field.Fills campaign list using fillSelect
			 * function. When + Add is clicked in workflows, fill with selected
			 * campaign-name
			 */
			triggerAdd : function(id,trigger_type)
			{
				//Set Global API Key before performing other operations
				//API key is used for shopify trigger and inbound email trigger
				setGlobalAPIKey(function() {
					$('#content').html("<div id='trigger-selector'>&nbsp;</div>");

					this.triggerModelview = new Base_Model_View({ 
							url : 'core/api/triggers', 
							template : "trigger-add", 
							isNew : true, 
							window : 'triggers',
							/**
							 * Callback after page rendered.
							 * 
							 * @param el
							 *            el property of Backbone.js
							 */
							postRenderCallback : function(el) {

								initializeTriggerListEventListners(id,trigger_type);

								// Loads jquery.chained.min.js
								head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function() {
									var LHS, RHS;

									// Assigning elements with ids LHS
									// and RHS
									// in trigger-add.html
									LHS = $("#LHS", el);
									RHS = $("#RHS", el);

									CALL = $('#CALL', el);

									// Chaining dependencies of input
									// fields
									// with jquery.chained.js
									RHS.chained(LHS);

									// Chain Call trigger options
									CALL.chained(LHS);

								});

								var optionsTemplate = "<option value='{{id}}'{{#if is_disabled}}disabled=disabled>{{name}} (Disabled){{else}}>{{name}}{{/if}}</option>";

								/**
								* Shows given values when trigger selected
								*/
								// To get the input values
								var type = trigger_type;
								var campaign_id = id;

								setTimeout(function() {
										// Shows the Value field with given value
									$('#trigger-type', el).val(type).attr("selected", "selected").trigger('change');
								}, 100);

								if (campaign_id)
								{
									fillSelect('campaign-select', '/core/api/workflows', 'workflow', function(id)
									{
										$('#campaign-select', el).find('option[value=' + campaign_id + ']').attr('selected', 'selected');
									}, optionsTemplate, false, el);
								}
								else
								{
									/**
									 * Fills campaign select with existing Campaigns.
									 * 
									 * @param campaign-select -
									 *            Id of select element of Campaign
									 * @param /core/api/workflows -
									 *            Url to get workflows
									 * @param 'workflow' -
									 *            parse key
									 * @param no-callback -
									 *            No callback
									 * @param optionsTemplate-
									 *            to fill options with workflows
									 */
									fillSelect('campaign-select', '/core/api/workflows', 'workflow', 'no-callback', optionsTemplate, false, el);
								}
							},
							saveCallback : function() {
								// To get newly added trigger in triggers list
								App_Workflows.triggersCollectionView = undefined;
							}
						}); //End of declaration for this.triggerModelView

						var view = this.triggerModelview.render();

						$('#trigger-selector').html(view.el);
					}); // End of setGlobalAPIKey call-back function
				},

			/**
			 * Updates trigger.
			 * 
			 * @param id -
			 *            trigger id
			 */
			triggerEdit : function(id)
			{

				// Send to triggers if the user refreshes it directly
				if (!this.triggersCollectionView || this.triggersCollectionView.collection.length == 0)
				{
					this.navigate("triggers", { trigger : true });
					return;
				}

				// Gets trigger with respect to id
				var currentTrigger = this.triggersCollectionView.collection.get(id);

				$('#content').html("<div id='trigger-edit-selector'>&nbsp;</div>");

				var view = new Base_Model_View({ url : 'core/api/triggers', model : currentTrigger, template : "trigger-add", window : 'triggers',
					postRenderCallback : function(el)
					{
						initializeTriggersListeners();

						// Loads jquery.chained.min.js
						head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
						{
							var LHS, RHS;

							LHS = $("#LHS", el);
							RHS = $("#RHS", el);

							CALL = $('#CALL', el);

							// Chaining dependencies of input
							// fields
							// with jquery.chained.js
							RHS.chained(LHS);

							// Chain Call Trigger options
							CALL.chained(LHS);

						});

						/**
						 * Shows given values when trigger selected
						 */

						// To get the input values
						var type = currentTrigger.toJSON()['type'];

						initializeTriggerListEventListners(id,type);

						// Shows the Value field with given value
						$('#trigger-type', el).val(type).attr("selected", "selected").trigger('change');

						// Populate milestones list and make obtained milestone
						// selected.
						if (type === 'DEAL_MILESTONE_IS_CHANGED')
						{

							var trigger_deal_milestone_value = currentTrigger.toJSON()['trigger_deal_milestone'];
							populate_milestones_in_trigger($('form#addTriggerForm', el), 'trigger-deal-milestone', trigger_deal_milestone_value);

						}

						if (type == 'FORM_SUBMIT')
						{
							var trigger_form_id = currentTrigger.toJSON()['trigger_form_event'];
							var trigger_run_on_new_contacts = currentTrigger.toJSON()['trigger_run_on_new_contacts'];
							populate_forms_in_trigger($('form#addTriggerForm', el), 'trigger-form-event', trigger_form_id, trigger_run_on_new_contacts);
						}

						// Populate contact filters list and make obtained
						// contact filter
						// selected
						if (type == 'RUNS_DAILY' || type == 'RUNS_WEEKLY' || type == 'RUNS_MONTHLY' || type == 'RUNS_HOURLY')
						{
							var trigger_filter_value = currentTrigger.toJSON()['contact_filter_id'];
							populate_contact_filters_in_trigger($('form#addTriggerForm', el), 'contact-filter', trigger_filter_value);
						}

						// Calls TagsTypeAhead on focus event.
						if (type == 'TAG_IS_ADDED' || type == 'TAG_IS_DELETED')
						{

							// Show custom tags textbox
							$('#trigger-custom-tags', el).closest('div.control-group').css('display', '');

							$('.trigger-tags', el).on("focus", function(e)
							{
								e.preventDefault();
								addTagsDefaultTypeahead($('form#addTriggerForm').find('div#RHS'));
							});
						}

						if (type == 'ADD_SCORE')
							$('#trigger-custom-score', el).closest('div.control-group').css('display', '');

						if (type == 'STRIPE_CHARGE_EVENT')
						{
							var stripe_charge_event_type = currentTrigger.toJSON()['trigger_stripe_event'];
							var trigger_run_on_new_contacts = currentTrigger.toJSON()['trigger_run_on_new_contacts'];
							populate_stripe_events_in_trigger($('form#addTriggerForm', el), 'trigger-stripe-event', stripe_charge_event_type,
									trigger_run_on_new_contacts);
						}

						if (type == 'SHOPIFY_EVENT')
						{
							var shopify_event_type = currentTrigger.toJSON()['trigger_shopify_event'];
							var trigger_run_on_new_contacts = currentTrigger.toJSON()['trigger_run_on_new_contacts'];
							populate_shopify_events_in_trigger($('form#addTriggerForm', el), 'trigger-shopify-event', shopify_event_type,
									trigger_run_on_new_contacts);
						}

						if (type == 'INBOUND_MAIL_EVENT')
						{
							var new_email_trigger_run_on_new_contacts = currentTrigger.toJSON()['new_email_trigger_run_on_new_contacts'];
							populate_inbound_mail_events_in_trigger($('form#addTriggerForm', el), 'trigger-inbound-mail-event',
									new_email_trigger_run_on_new_contacts);
						}

						if (type == 'EMAIL_OPENED' || type == 'EMAIL_LINK_CLICKED' || type == 'UNSUBSCRIBED')
						{
							if (type !== 'UNSUBSCRIBED')
							{
								// Show custom tags textbox
								$('#email-tracking-type', el).closest('div.control-group').css('display', '');

								$('#email-tracking-type', el).find('option[value=' + currentTrigger.toJSON()["email_tracking_type"] + ']').attr('selected',
										'selected').trigger('change');
							}

							if (currentTrigger.toJSON()["email_tracking_type"] == "CAMPAIGNS" || type == 'UNSUBSCRIBED')
							{
								$('#email-tracking-campaign-id', el).closest('div.control-group').css('display', '');

								var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";

								/**
								 * Fills campaign select drop down with existing
								 * Campaigns and shows previous option as
								 * selected.
								 * 
								 * @param campaign-select -
								 *            Id of select element of Campaign
								 * @param /core/api/workflows -
								 *            Url to get workflows
								 * @param 'workflow' -
								 *            parse key
								 * @param callback-function -
								 *            Shows previous option selected
								 * @param optionsTemplate-
								 *            to fill options with workflows
								 */
								fillSelect('email-tracking-campaign-id', '/core/api/workflows?allow_campaign=' + currentTrigger.toJSON().email_tracking_campaign_id, 'workflow', function fillCampaign()
								{
									$('#email-tracking-campaign-id option:first').after('<option value="0">All</option>');

									var value = currentTrigger.toJSON();
									if (value)
									{
										$('#email-tracking-campaign-id', el).find('option[value=' + value.email_tracking_campaign_id + ']').attr('selected',
												'selected');
									}

									// Remove loading image
									$('.loading', el).remove();

								}, optionsTemplate, false, el);
							}

							if (type == 'EMAIL_LINK_CLICKED')
							{
								// Show custom tags textbox
								$('#custom-link-clicked', el).closest('div.control-group').css('display', '');
							}

						}

						if (type == 'EVENT_IS_ADDED')
						{
							$('form#addTriggerForm', el).find('select#event-type').closest('div.control-group').css('display', '');

							$('#email-type', el).find('option[value=' + currentTrigger.toJSON()["email_type"] + ']').attr('selected', 'selected').trigger(
									'change');

							populate_owners_in_trigger($('form#addTriggerForm', el), 'event-owner-id', currentTrigger.toJSON()["event_owner_id"]);
						}

						// Inbound of Outbound call
						if (type == 'INBOUND_CALL' || type == 'OUTBOUND_CALL')
						{
							populate_call_trigger_options($('form#addTriggerForm', el), currentTrigger.toJSON());
						}

						var optionsTemplate = "<option value='{{id}}'{{#if is_disabled}}disabled=disabled>{{name}} (Disabled){{else}}>{{name}}{{/if}}</option>";

						/**
						 * Fills campaign select drop down with existing
						 * Campaigns and shows previous option as selected.
						 * 
						 * @param campaign-select -
						 *            Id of select element of Campaign
						 * @param /core/api/workflows -
						 *            Url to get workflows
						 * @param 'workflow' -
						 *            parse key
						 * @param callback-function -
						 *            Shows previous option selected
						 * @param optionsTemplate-
						 *            to fill options with workflows
						 */
						fillSelect('campaign-select', '/core/api/workflows?allow_campaign=' + currentTrigger.toJSON().campaign_id, 'workflow', function fillCampaign()
						{
							var value = currentTrigger.toJSON();
							if (value)
							{
								$('#campaign-select', el).find('option[value=' + value.campaign_id + ']').attr('selected', 'selected');
							}
						}, optionsTemplate, false, el);
					},

					saveCallback : function()
					{

						// To get newly added trigger in triggers list
						App_Workflows.triggersCollectionView = undefined;
					}

				});

				$("#trigger-edit-selector").html(view.render().el);
			},

			/**
			 * Saves new automation. Loads jquery.chained.js to link Conditions
			 * and Value of input field.Fills campaign list and contact filter
			 * list using fillSelect function.
			 */
			automationAdd : function()
			{
				this.automationModelview = new Base_Model_View({ url : '/core/api/automations', template : "automation-add", isNew : true,
					window : 'automations',
					/**
					 * Callback after page rendered.
					 * 
					 * @param el
					 *            el property of Backbone.js
					 */
					postRenderCallback : function(el)
					{

						var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";

						/**
						 * Fills campaign select with existing Campaigns.
						 * 
						 * @param campaign-select -
						 *            Id of select element of Campaign
						 * @param /core/api/workflows -
						 *            Url to get workflows
						 * @param 'workflow' -
						 *            parse key
						 * @param no-callback -
						 *            No callback
						 * @param optionsTemplate-
						 *            to fill options with workflows
						 */
						fillSelect('campaign-select', '/core/api/workflows', 'workflow', 'no-callback', optionsTemplate, false, el);

						fillSelect('filter-select', '/core/api/filters', 'workflow', 'no-callback', optionsTemplate, false, el);
					}

				});

				var view = this.automationModelview.render();

				$('#content').html(view.el);
			},

			/** Gets list of automations */
			automations : function()
			{
				this.automationsCollectionView = new Base_Collection_View({

				url : '/core/api/automations', restKey : "automations", templateKey : "automations", individual_tag_name : 'tr' });

				this.automationsCollectionView.collection.fetch();

				$('#content').html(this.automationsCollectionView.el);

				$(".active").removeClass("active");
				$("#workflowsmenu").addClass("active");
			},

			/**
			 * Updates automation.
			 * 
			 * @param id -
			 *            automation id
			 */
			automationEdit : function(id)
			{

				// Send to triggers if the user refreshes it directly
				if (!this.automationsCollectionView || this.automationsCollectionView.collection.length == 0)
				{
					this.navigate("automations", { trigger : true });
					return;
				}

				// Gets automation with respect to id
				var currentAutomation = this.automationsCollectionView.collection.get(id);

				var view = new Base_Model_View({ url : 'core/api/automations', model : currentAutomation, template : "automation-add", window : 'automations',
					postRenderCallback : function(el)
					{

						/**
						 * Shows given values when automation selected
						 */

						// To get the input values
						var durationType = currentAutomation.toJSON()['durationType'];

						// Shows the Value field with given value
						$('#period-type', el).val(durationType).attr("selected", "selected").trigger('change');

						var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
						/**
						 * Fills campaign select drop down with existing
						 * Campaigns and shows previous option as selected.
						 * 
						 * @param campaign-select -
						 *            Id of select element of Campaign
						 * @param /core/api/workflows -
						 *            Url to get workflows
						 * @param 'workflow' -
						 *            parse key
						 * @param callback-function -
						 *            Shows previous option selected
						 * @param optionsTemplate-
						 *            to fill options with workflows
						 */
						fillSelect('campaign-select', '/core/api/workflows', 'workflow', function fillCampaign()
						{
							var value = currentAutomation.toJSON();
							if (value)
							{
								$('#campaign-select', el).find('option[value=' + value.campaign_id + ']').attr('selected', 'selected');
							}
						}, optionsTemplate, false, el);

						/**
						 * Fills contact filer select drop down with existing
						 * Contact filters and shows previous option as
						 * selected.
						 * 
						 * @param campaign-select -
						 *            Id of select element of Campaign
						 * @param /core/api/workflows -
						 *            Url to get workflows
						 * @param 'workflow' -
						 *            parse key
						 * @param callback-function -
						 *            Shows previous option selected
						 * @param optionsTemplate-
						 *            to fill options with workflows
						 */
						fillSelect('filter-select', '/core/api/filters', 'workflow', function fillContactFilter()
						{
							var value = currentAutomation.toJSON();
							if (value)
							{
								$('#filter-select', el).find('option[value=' + value.contactFilter_id + ']').attr('selected', 'selected');

							}
						}, optionsTemplate, false, el);

					},

				});

				$("#content").html(view.render().el);
			},

			/**
			 * Returns all subscribers including active, completed and removed.
			 * 
			 * @param id -
			 *            workflow id.
			 */
			allSubscribers : function(id)
			{

				this.render_email_reports_select_ui(id, function(){

					// Render tabs
					getTemplate("campaign-analysis-tabs", { "id" : id }, undefined, function(template_ui)
					{
						if (!template_ui)
							return;

						abortCountQueryCall();

						$('#campaign-analysis-tabs').html($(template_ui));
						var all_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/all-subscribers/' + id,
								'workflow-other-subscribers');
						all_subscribers_collection.collection.fetch({ success : function(collection)
						{
							if (collection.length === 0)
								fill_subscribers_slate('subscribers-slate', "all-subscribers");

						} });
						$("#campaign-analysis-tabs-content").html(all_subscribers_collection.el);
						// Hide bulk subscribers block
						$('#subscribers-block').hide();

						$('#campaign-tabs .select').removeClass('select');
						$('.campaign-subscribers-tab').addClass('select');
					}, "#campaign-analysis-tabs");

				});
			},

			/**
			 * Returns list of subscribers having campaignStatus
			 * campaignId-ACTIVE
			 * 
			 * @param id -
			 *            workflow id.
			 */
			activeSubscribers : function(id)
			{

				var that = this;
				that.render_email_reports_select_ui(id, function(){
                    
					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					that.active_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/active-subscribers/' + id,
							'workflow-active-contacts');

					that.active_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "active-subscribers");
					} });

					$("#campaign-analysis-tabs-content").html(that.active_subscribers_collection.el);

					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');

			    });
				

			},

			/**
			 * Returns list of completed subscribers of given campaign-id having
			 * campaignStatus campaignId-DONE
			 * 
			 * @param id -
			 *            workflow id.
			 * 
			 */
			completedSubscribers : function(id)
			{
				var that = this;
				that.render_email_reports_select_ui(id, function(){
					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					var completed_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/completed-subscribers/' + id,
							'workflow-other-subscribers');

					completed_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "completed-subscribers");
					} });
					$("#campaign-analysis-tabs-content").html(completed_subscribers_collection.el);

					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');

				});
				
			},

			/**
			 * Returns list of subscribers removed from a campaign.
			 * 
			 * @param id -
			 *            workflow id.
			 */
			removedSubscribers : function(id)
			{
				var that = this;
				that.render_email_reports_select_ui(id, function(){
					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					var removed_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/removed-subscribers/' + id,
							'workflow-other-subscribers');

					removed_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "removed-subscribers");
					} });

					$("#campaign-analysis-tabs-content").html(removed_subscribers_collection.el);

					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');

				});
			},
			unsubscribedSubscribers : function(id)
			{

				var that = this;
				that.render_email_reports_select_ui(id, function(){

					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					var unsubscribed_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/unsubscribed-subscribers/' + id,
							'workflow-other-subscribers');

					unsubscribed_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "unsubscribe-subscribers");
					} });

					$("#campaign-analysis-tabs-content").html(unsubscribed_subscribers_collection.el);

					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');
				});
			},

			hardBouncedSubscribers : function(id)
			{

				var that = this;
				that.render_email_reports_select_ui(id, function(){

					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					var hardbounced_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/hardbounced-subscribers/' + id,
							'workflow-other-subscribers');

					hardbounced_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "hardbounced-subscribers");
					} });

					$("#campaign-analysis-tabs-content").html(hardbounced_subscribers_collection.el);
					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');
				});
			},

			softBouncedSubscribers : function(id)
			{

				var that = this;
				that.render_email_reports_select_ui(id, function(){

					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					var softbounced_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/softbounced-subscribers/' + id,
							'workflow-other-subscribers');

					softbounced_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "softbounced-subscribers");
					} });

					$("#campaign-analysis-tabs-content").html(softbounced_subscribers_collection.el);
					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');
				});
			},

			spamReportedSubscribers : function(id)
			{

				var that = this;
				that.render_email_reports_select_ui(id, function(){

					if (!that.workflow_list_view || that.workflow_list_view.collection.length == 0)
					{
						that.navigate("workflows", { trigger : true });
						return;
					}

					var spam_reported_subscribers_collection = get_campaign_subscribers_collection(id, 'core/api/workflows/spam-reported-subscribers/' + id,
							'workflow-other-subscribers');

					spam_reported_subscribers_collection.collection.fetch({ success : function(collection)
					{

						// show pad content
						if (collection.length === 0)
							fill_subscribers_slate('subscribers-slate', "spam-reported-subscribers");
					} });

					$("#campaign-analysis-tabs-content").html(spam_reported_subscribers_collection.el);
					// Hide bulk subscribers block
					$('#subscribers-block').hide();

					$('#campaign-tabs .select').removeClass('select');
					$('.campaign-subscribers-tab').addClass('select');
				});
			},

			render_email_reports_select_ui : function(id, callback){

				 // Fetches workflows if not filled
				if (!$('#campaign-reports-select').html())
				{
					getTemplate('campaign-analysis', {}, undefined, function(template_ui){
				 		if(!template_ui)
				    		return;

						$('#content').html($(template_ui)); 
						var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";

						// fill workflows
						fillSelect('campaign-reports-select', '/core/api/workflows', 'workflow', function fillCampaign()
						{
							if(id)
							$('#campaign-reports-select').find('option[value=' + id + ']').attr('selected', 'selected');

						}, optionsTemplate);

						initializeLogReportHandlers();

						if(callback)
							  callback();
						
					}, "#content");

					return;
				}

				if(callback)
					callback(); 		

			},
			
			shareWorkflow : function(sender_cid, sender_domain, workflow){
				
                this.workflow_list_view = new Base_Collection_View({ url : '/core/api/workflows', restKey : "workflow", sort_collection : false,
					templateKey : "workflows", individual_tag_name : 'tr', cursor : true, page_size : 20, postRenderCallback : function(el)
					{	
					}});

                var workflowModal = new Workflow_Model_Events({
							url : 'core/api/workflow', 
							template : 'workflow-add',
							isNew : 'true',
							data : { "is_new" : true, "is_disabled" : false, "was_disabled" : false  },
							postRenderCallback : function(el){
								// Init SendVerify Email
								send_verify_email(el);
							}

						});

				// Get workflow template based on category and template name
				var workflow_template_model = Backbone.Model.extend({

					url : '/core/api/workflows/shareCampAPI?id='+sender_cid+'&senderDomain='+sender_domain
				});

				var model = new workflow_template_model();
	
        		var that = this;

         		model.fetch({ success : function(data)
		 			{
						that.workflow_json = data.toJSON().rules;
						console.log(data.toJSON().rules);
//						workflowModal.save();
//						that.workflow_list_view.collection.add(workflowModal);
						$("#content").html(workflowModal.render().el);
						App_Workflows.workflow_list_view.collection.remove();
						
	          		},

	          		error:function(data){
	          			$("#content").html(workflowModal.render().el);
	          		}

         		});		
		
			}
});
// To Enable Console in IE - MC
$(function(){
	var alertFallback = false;
	
	if (typeof console === "undefined" || typeof console.log === "undefined") {
		console = {};
		if (alertFallback) {
			console.log = function(msg) {
            alert(msg);
         };
		} else {
         console.log = function() {};
		}
	}
	
	// Disable console.logging if disabled
	if(!IS_CONSOLE_ENABLED)
	{
		//console.log("disabling");		
		console.log = function(){};
		if(console.warn)
			console.warn = function(){};
	}
});   /** Closing the datepicker on back and forward button **/
$(function(){
window.onhashchange = function (e) {
	
	$('.daterangepicker').hide();
	$('.contact_popover').remove();
	$('.contact_popover').hide();
}
});
/**
 * Initializes the date-range-picker and other filters. Calls the callback when
 * the date range is selected.
 * 
 * @param campaign_id -
 *            to show charts w.r.t campaign-id.
 * @param callback -
 *            callback method if any.
 */
function initFunnelCharts(callback)
{

	// Init the callback for daterange
	initDateRange(callback);
	
	// Init the callback when the frequency selector changes too
	if ($('#frequency').length > 0)
	{
		// Get Frequency
		$('#frequency').change(function()
		{
			callback();
		});
	}

	fillSelect("filter", "core/api/filters", undefined, function()
	{
		$('#filter').change(function()
		{
			callback();
		});

	}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Contacts");

	if ($('#type').length > 0)
	{
		// Get Frequency
		
		$('#type').change(function()
		{
			callback();
		});
	}
	fillSelect("owner", "core/api/users/partial", undefined, function()
			{
				$('#owner').change(function()
				{

					callback();
				});

	}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Owners");

	callback();
}


/** .
* 
* @param callback -
*            callback method if any.
*/
function initReportsForCalls(callback){
	

	initDateRange(callback);

	callback();
	
	if ($('#frequency').length > 0)
	{
		// Get Frequency
		$('#frequency').change(function()
		{
			callback();
		});
	}
	
	$('#typeCall').change(function()
		{
			callback();
		});
	
	fillSelect("users", "core/api/users/partial", undefined, function()
			{
				$('#users').change(function()
				{

					callback();
				});

			}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Users");
	
}

/**
 * Shows Funnel Graphs based on the tags
 */
function showFunnelGraphs(tags)
{
	console.log("Showing funnel logs");
	showFunnel('core/api/reports/funnel/' + tags + getOptions(), 'funnel-chart', 'Funnel Reports', true);
}

/**
 * Shows Growth Graphs based on the tags
 */
function showGrowthGraphs(tags)
{
	showAreaSpline('core/api/reports/growth/' + tags + getOptions(), 'growth-chart', '', '', true);
}

/**
 * Shows Ratio Graphs based on the tags
 */
function showRatioGraphs(tag1, tag2)
{
	showLine('core/api/reports/ratio/' + tag1 + "/" + tag2 + "/" + getOptions(), 'ratio-chart', 'Ratio Analysis', tag1 + ' vs ' + tag2, true);
}
function initSalesCharts(callback){

	initDateRange(callback);
		// Init the callback when the frequency selector changes too
		if ($('#frequency').length > 0)
			{
		// Get Frequency
			$('#frequency').change(function()
			{
			callback();
			});
		}
			// Init the callback when the track selector changes too
		fillSelect("track", "/core/api/milestone/pipelines", undefined, function()
		{
			$('#track').change(function()
			{
				callback();
			});
		}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Tracks");

		fillSelect("owner", "core/api/users/partial", undefined, function()
		{
			$('#owner').change(function()
			{
				callback();
			});

		}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Owners");

		/*fillSelect("source", "/core/api/categories?entity_type=DEAL_SOURCE", undefined, function()
		{
			
			$('#source option').eq(0).after($('<option class="default-select" value="1">Unknown</option>'));
			$('#source').change(function()
			{
				callback();
			});

		}, '<option class="default-select" value="{{id}}">{{label}}</option>', false, undefined, "All Sources");*/

		var sources = new Base_Collection_View({url : '/core/api/categories?entity_type=DEAL_SOURCE', sort_collection: false});
		sources.collection.fetch({
			success: function(data){
				var jsonModel = data.toJSON();
				var html =  '<option class="default-select" value="">All Sources</option>' + 
							'<option class="default-select" value="1">Unknown</option>';
				
				$.each(jsonModel,function(index,dealSource){
					html+='<option class="default-select" value="'+dealSource.id+'">'+dealSource.label+'</option>';
				});
				$('#source', $('#content')).html(html);

				// Hide loading bar
				hideTransitionBar();

				$('#source').change(function()
				{
					callback();
				});
			}
		});
		
		callback();

		
		
	}

function showDealsGrowthReport()
{
// Options
    var options = "";

    // Get Date Range January 22, 2015 - January 28, 2015
    var range = $('#range').html().split("-");
    
    // Returns milliseconds from start date. For e.g., August 6, 2013 converts
    // to 1375727400000
    //var start_time = Date.parse($.trim(range[0])).valueOf();
    //Get the GMT start time
    var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));
    var d = new Date();
    start_time=start_time+(d.getTimezoneOffset()*60*1000);
    start_time=start_time/1000;
    var end_value = $.trim(range[1]);

    // To make end value as end time of day
    if (end_value)
        end_value = end_value + " 23:59:59";

    // Returns milliseconds from end date.
    //var end_time = Date.parse(end_value).valueOf();
    //Get the GMT end time
    var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

    end_time += (((23*60*60)+(59*60)+59)*1000);
    end_time=end_time+(d.getTimezoneOffset()*60*1000);
    end_time=end_time/1000;

    if ($('#owner').length > 0)
	{
    var owner_id=0;
        if ($("#owner").val() != "" && $("#owner").val() != "All Owners")
            owner_id=$("#owner").val();
            options += owner_id;
    }

    // Adds start_time, end_time to params.
    options += ("?min=" + start_time + "&max=" + end_time);
        if ($('#frequency').length > 0)
    {
        // Get Frequency
        var frequency = $("#frequency").val();
        options += ("&frequency=" + frequency);
    }
        if ($('#type').length > 0)
        {
            // Get Frequency
            var type = $("#type").val();
            options += ("&type=" + type);
        }


    showDealsGrowthgraph('core/api/opportunity/details/' + options, 'deals-chart', '', '',true);

}
/**
 * Highlight the default option in date picker
 */
function highlightDatepickerOption()
{
    var hasActive = false;
    $('.daterangepicker > .ranges > ul').each(function()
    {
        if ($(this).hasClass("active"))
        {
            hasActive = true;
        }
    });
    if (!hasActive)
    {
        $('.daterangepicker > .ranges > ul > li').eq(2).addClass("active");
    }
}
function showsalesReportGraphs()
{
	var options='';
	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");
	/*
	 * var temp = "January 22, 2015 - January 28, 2015"; var range =
	 * temp.split("-");
	 */
	// Returns milliseconds from start date. For e.g., August 6, 2013 converts
	// to 1375727400000
	//var start_time = Date.parse($.trim(range[0])).valueOf();
	//Get the GMT start time
	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";

	// Returns milliseconds from end date.
	//var end_time = Date.parse(end_value).valueOf();
	//Get the GMT end time
	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	//end_time += (((23*60*60)+(59*60)+59)*1000);

	// Adds start_time, end_time and timezone offset to params.
	var d = new Date();
	start_time=start_time+(d.getTimezoneOffset()*60*1000);
	 end_time += (((23*60*60)+(59*60)+59)*1000);
	end_time=end_time+(d.getTimezoneOffset()*60*1000);


	if ($('#owner').length > 0)
	{

		// Get User
		var owner_id=0;
		if ($("#owner").val() != "" && $("#owner").val() != "All Owners")
			owner_id=$("#owner").val();
			options += owner_id;
	}
	
	if ($('#track').length > 0)
	{
		// Get Frequency
		var track = 0;
		if($("#track").val() != "" &&  $("#track").val() != "All Tracks")
			track=$("#track").val();
			options +=('/'+ track);

	}

	if ($('#source').length > 0)
	{
		// Get source
		var source = 0;
		if($("#source").val() != "" &&  $("#source").val() != "All Sources")
			source=$("#source").val();
			options +=('/'+ source);

	}
	options += ("?min=" + start_time/1000 + "&max=" + end_time/1000);
	if ($('#frequency').length > 0)
	{
		// Get Frequency
		var frequency = $("#frequency").val();
		options += ("&frequency=" + frequency);
	}
	// If Frequency is present - send frequency too
	var frequency = $( "#frequency:visible").val();

	showDealAreaSpline('core/api/opportunity/stats/details/'+options,'revenue-chart','','',true,frequency);

}


function initUserReports(callback){
	
	initDateRange(callback);

	callback();	

		fillSelect("owner", "core/api/users/partial", undefined, function()
		{
			$('#owner').change(function()
			{
				callback();
			});

		}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Owners");
		
	}


   
function showLossReasonGraphs()


{
	var options='';

	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");
	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";

	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	// Adds start_time, end_time and timezone offset to params.
	var d = new Date();
	start_time=start_time+(d.getTimezoneOffset()*60*1000);
	 end_time += (((23*60*60)+(59*60)+59)*1000);
	end_time=end_time+(d.getTimezoneOffset()*60*1000);


	if ($('#owner').length > 0)
	{
		// Get owner
		var owner_id=0;
		if ($("#owner").val() != "" && $("#owner").val() != "All Owners")
			owner_id=$("#owner").val();
			options += owner_id;
	}
	
	if ($('#track').length > 0)
	{
		// Get track
		var track = 0;
		if($("#track").val() != "" &&  $("#track").val() != "All Tracks")
			track=$("#track").val();
			options +=('/'+ track);

	}
	if ($('#source').length > 0)
	{
		// Get source
		var source = 0;
		if($("#source").val() != "" &&  $("#source").val() != "All Sources")
		source=$("#source").val();
		options += ("/" + source);
	}
	options += ("?min=" + start_time/1000 + "&max=" + end_time/1000);
	
	
	pieforReports('core/api/opportunity/details/'+options,'lossreasonpie-chart','',true);
}

function showLossReasonGraphForUserReports(){
	

	var options='';

	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");
	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";

	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	// Adds start_time, end_time and timezone offset to params.
	var d = new Date();
	start_time=start_time+(d.getTimezoneOffset()*60*1000);
	 end_time += (((23*60*60)+(59*60)+59)*1000);
	end_time=end_time+(d.getTimezoneOffset()*60*1000);


	if ($('#owner').length > 0)
	{
		// Get owner
		var owner_id=0;
		if ($("#owner").val() != "" && $("#owner").val() != "All Owners")
			owner_id=$("#owner").val();
			options += owner_id;
	}
	//options += CURRENT_DOMAIN_USER.id;
	
		// Get track
		var track = 0;
		options +=('/'+ track);
	
		// Get source
		var source = 0;
		options += ("/" + source);
	
	options += ("?min=" + start_time/1000 + "&max=" + end_time/1000);
	
	
	pieforReports('core/api/opportunity/details/'+options,'lossreasonpie-chart-users','',true);

	
}

function salesReportGraphForUserReports(){
	
	

	var options='';
	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");

	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";

	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	var d = new Date();
	start_time=start_time+(d.getTimezoneOffset()*60*1000);
	 end_time += (((23*60*60)+(59*60)+59)*1000);
	end_time=end_time+(d.getTimezoneOffset()*60*1000);


	if ($('#owner').length > 0)
	{
		// Get Frequency
		var owner_id=0;
		if ($("#owner").val() != "" && $("#owner").val() != "All Owners")
			owner_id=$("#owner").val();
			options += owner_id;
	}
	
	
		// Get Frequency
		var track = 0;
		options +=('/'+ track);
		
			// Get source
		var source = 0;
		options +=('/'+ source);


	   options += ("?min=" + start_time/1000 + "&max=" + end_time/1000);
	
		// Default frequency for the user report is set to weekly
		var frequency = "monthly";
		//options += ("&frequency=" + frequency);

	showDealAreaSpline('core/api/opportunity/stats/details/'+options,'revenue-chart-users','','',true,undefined);

	
}

function showWonPieChart()
{
var options='';

	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");
	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";


	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	// Adds start_time, end_time and timezone offset to params.
	var d = new Date();
	start_time=start_time+(d.getTimezoneOffset()*60*1000);
	 end_time += (((23*60*60)+(59*60)+59)*1000);
	end_time=end_time+(d.getTimezoneOffset()*60*1000);


	if ($('#owner').length > 0)
	{
		// Get owner
		var owner_id=0;
		if ($("#owner").val() != "" && $("#owner").val() != "All Owners")
			owner_id=$("#owner").val();
			options += owner_id;
	}
	
	options += ("?min=" + start_time/1000 + "&max=" + end_time/1000);
	
	
	pieforReports('core/api/opportunity/wonDetails/'+options,'wonpie-chart','',true);
}

/** Initialising date range for various report* */
function initDateRange(callback)
{
	initReportLibs(function()
	{

					$('.daterangepicker').remove();
					// Bootstrap date range picker.
					$('#reportrange').daterangepicker({ ranges : { 'Today' : [
							'today', 'today'
					], 'Yesterday' : [
							'yesterday', 'yesterday'
					], 'Last 7 Days' : [
							Date.today().add({ days : -6 }), 'today'
					], 'Last 30 Days' : [
							Date.today().add({ days : -29 }), 'today'
					], 'This Month' : [
							Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()
					], 'Last Month' : [
							Date.today().moveToFirstDayOfMonth().add({ months : -1 }), Date.today().moveToFirstDayOfMonth().add({ days : -1 })
					], 'This Quarter' : [
							Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(9)).moveToFirstDayOfMonth(), 
							Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(8)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
					], 'Last Quarter' : [
							Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(9)).moveToFirstDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth(), 
							Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(11)).moveToLastDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(8)).moveToLastDayOfMonth()
					], 'This Year' : [
							new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
					], 'Last Year' : [
							new Date(Date.today().setMonth(0)).add({ years : -1 }).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).add({ years : -1 }).moveToLastDayOfMonth()
					] }, locale : { applyLabel : 'Apply', cancelLabel : 'Cancel', customRangeLabel : 'Custom', daysOfWeek : [
							'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'
					], monthNames : [
							'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
					], firstDay : parseInt(CALENDAR_WEEK_START_DAY) } }, function(start, end)
					{
						if(start && end){
						var months_diff = Math.abs(start.getMonth() - end.getMonth() + (12 * (start.getFullYear() - end.getFullYear())));
						$('#reportrange span').html(start.toString('MMMM d, yyyy') + ' - ' + end.toString('MMMM d, yyyy'));
						$("#week-range").html(end.add({ days : -6 }).toString('MMMM d, yyyy') + ' - ' + end.add({ days : 6 }).toString('MMMM d, yyyy'));
						}
						else
 						{
 							$('#reportrange span').html(Date.today().add({ days : -6 }).toString('MMMM d, yyyy')+'-'+Date.today().toString('MMMM d, yyyy'));	
 							$('.daterangepicker > .ranges > ul > li').each(function(){
							$(this).removeClass("active");
						});
 						}
						callback();
					});
					$('.daterangepicker > .ranges > ul').on("click", "li", function(e)
					{
						$('.daterangepicker > .ranges > ul > li').each(function(){
							$(this).removeClass("active");
						});
						$(this).addClass("active");
					});

	});

}


function showRepPerformanceReport()
{

	var options='';

	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");
	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";


	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	// Adds start_time, end_time and timezone offset to params.
	var d = new Date();
	start_time=start_time+(d.getTimezoneOffset()*60*1000);
	 end_time += (((23*60*60)+(59*60)+59)*1000);
	end_time=end_time+(d.getTimezoneOffset()*60*1000);

	if ($('#owner').length > 0)
	{
		// Get owner
		var owner_id=0;
		if ($("#owner").val() != "")
			owner_id=$("#owner").val();
			options += owner_id;
	}

	//options += CURRENT_DOMAIN_USER.id;
	options += ("?min=" + start_time/1000 + "&max=" + end_time/1000);
		report_utility.getRepPerformanceLog('core/api/reports/repPerformance/' + options);

			//console.log(resp);
		

}

function initRepReports(callback){
	
	initReportLibs(function()
	{

					$('.daterangepicker').remove();
					// Bootstrap date range picker.
					$('#reportrange').daterangepicker({ ranges : {  'This Month' : [
							Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()
					], 'Last Month' : [
							Date.today().moveToFirstDayOfMonth().add({ months : -1 }), Date.today().moveToFirstDayOfMonth().add({ days : -1 })
					], 'This Quarter' : [
							Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(9)).moveToFirstDayOfMonth(), 
							Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(8)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
					], 'Last Quarter' : [
							Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(9)).moveToFirstDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth(), 
							Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(11)).moveToLastDayOfMonth() : 
							(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() :
							(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(8)).moveToLastDayOfMonth()
					], 'This Year' : [
							new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
					], 'Last Year' : [
							new Date(Date.today().setMonth(0)).add({ years : -1 }).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).add({ years : -1 }).moveToLastDayOfMonth()
					] }, locale : { applyLabel : 'Apply', cancelLabel : 'Cancel', customRangeLabel : 'Custom', minViewMode : 'month', dateLimit:'month', startDate:Date.today().moveToFirstDayOfMonth(),endDate:Date.today().moveToLastDayOfMonth(), daysOfWeek : [
							'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'
					], monthNames : [
							'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
					], firstDay : parseInt(CALENDAR_WEEK_START_DAY) } }, function(start, end)
					{
						if(start && end){
						var months_diff = Math.abs(start.getMonth() - end.getMonth() + (12 * (start.getFullYear() - end.getFullYear())));
						$('#reportrange span').html(start.toString('MMMM d, yyyy') + ' - ' + end.toString('MMMM d, yyyy'));
						$("#week-range").html(end.add({ days : -6 }).toString('MMMM d, yyyy') + ' - ' + end.add({ days : 6 }).toString('MMMM d, yyyy'));
						}
						else
 						{
 							$('#reportrange span').html(Date.today().moveToFirstDayOfMonth().toString('MMMM d, yyyy')+'-'+Date.today().moveToLastDayOfMonth().toString('MMMM d, yyyy'));	
 							$('.daterangepicker > .ranges > ul > li').each(function(){
							$(this).removeClass("active");
						});
 						}
						callback();
					});
					$('.daterangepicker > .ranges > ul').on("click", "li", function(e)
					{
						$('.daterangepicker > .ranges > ul > li').each(function(){
							$(this).removeClass("active");
						});
						$(this).addClass("active");
					});
					$('.daterangepicker > .ranges > ul li:last-child' ).hide();
					$('.daterangepicker  .range_inputs').hide();
					$('.daterangepicker > .ranges > ul li:last-child').prev().removeClass('b-b');

	});

	

	fillSelect("owner", "core/api/users/partial", undefined, function()
		{
			$('select[id="owner"]').find('option[value="'+CURRENT_DOMAIN_USER.id+'"]').attr("selected",true);
			callback();					
			$('#owner').change(function()
			{
				callback();
			});

		}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined);
		
	}

function initComparisonReports(callback){
	
	initDateRange(callback);

	
	// Init the callback when the track selector changes too
		fillSelect("pipeline_track", "/core/api/milestone/pipelines", undefined, function()
		{
			//if (_agile_get_prefs("agile_deal_track"))
           // pipeline_id = _agile_get_prefs("agile_deal_track");

			$('select[id="pipeline_track"]').find('option[value=""]').remove();
			        	callback();
			$('#pipeline_track').change(function()
			{
				callback();
			});
		}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "");

	}
function showComparisonReportGraph()
{
		url='/core/api/opportunity/conversionRate/0';
		url=url+getSelectedDates();
		if ($('#pipeline_track').length > 0)
	{
		// Get owner
		var track_id=0;
		if ($("#pipeline_track").val() != ""){
			track_id=$("#pipeline_track").val();
			url += '&track-id='+track_id;
			BubbleChart(url,'comparison-chart','',true);
		}
	}
	
}



 function push_signup_plan(plan)
 {
 	try
 	{
 		if(!window.ga)
 		{
 			setTimeout(function(){
 				push_signup_plan(plan);
 			}, 2000);
 		}
 		ga('send', 'event', 'Dashboard', 'Signup', _plan_on_signup["plan_type"], _plan_on_signup["quantity"]);	
 	}
 	catch(err)
 	{
 		console.error(err);
 	}
	
	
 }

 function push_actual_plan(plan)
 {
	try
	{
		if(!window.ga)
 		{
 			setTimeout(function(){
 				push_actual_plan(plan);
 			}, 2000);
 		}

		ga('send', 'event', 'Dashboard', 'Paid', plan["plan_type"], plan["quantity"]);
	}
 	catch(err)
 	{
 		console.error(err);
 	}
 }

 $(function(){
 	try
 	{
 		if(IS_NEW_USER && _plan_on_signup)
 			push_signup_plan(_plan_on_signup);
 	
 	}catch(err)
 	{
 		console.log(err);
 	}
 	
 });/**
 * Tags
 */
var CANCELED = "Canceled";
var SIGN_UP = "Signup";
var CAMPAIGN_TAG = "Campaigns";
var CODE_SETUP_TAG = "Code setup";
var IMPORT_TAG = "Import";
var SOCIAL_TAG = "Social";
var WIDGET_TAG = "Widgets";
var DOMAIN_COOKIE_FOR_WEBSITE = "_agile_login_domain"

// Subject for account cancellation note
var ACCOUNT_CANCELED_NOTE_SUBJECT = "Account Canceled";

// Account cancellation cusom field
var ACCOUNT_CANCELED_CUSTOM_FIELD_NAME = "Cancel Reason";

function our_domain_set_account() {
	// If it is local server then add contacts to local domain instead of
	// our domain
	if (LOCAL_SERVER)
		
		_agile.set_account('7n7762stfek4hj61jnpce7uedi', 'local');
		//_agile.set_account('p62u9mnp5dirj1na66ccjuiqr9', 'myapps'); // for testing purpose only.

	else
		_agile.set_account('fdpa0sc7i1putehsp8ajh81efh', 'our');
		//_agile.set_account('slnfmib8k4ursofeeqqn1qilch', 'test55'); // for testing purpose only.

	_agile.set_email(CURRENT_DOMAIN_USER['email']);

	// Track page view code
	_agile.track_page_view();
}


/**
 * Adds domain and loggedin date in contact in our domain
 */
function add_custom_fields_to_our_domain(callback) {
	add_init_tags(function() {
		get_new_custom_properties_to_add();
		add_referrar_info_as_note();
	});
}

/**
 * Creates custom field for domain field
 * @returns {___anonymous6182_6183}
 */
function getDomainCustomField() {
	// Gets domain property from contact
	var domain_custom_field = getProperty(Agile_Contact.properties, 'Domain');

	if (!domain_custom_field
			|| domain_custom_field.value != CURRENT_DOMAIN_USER["domain"]) {
		return create_contact_custom_field("Domain",
				CURRENT_DOMAIN_USER["domain"], "CUSTOM");
	}
}

/**
 * Creates loggedin time and domain fields
 * @param callback
 */
function get_new_custom_properties_to_add(callback) {
		addLoggedInTime(function(){
			addDomain(callback);
		});
}

/**
 * Creates domain
 * @param callback
 */
function addDomain(callback) {
	var domainField = getDomainCustomField();
	if (!domainField) {
		if (callback && typeof callback === "function")
			callback();
		return;
	}
	property_request(domainField, callback);
}

function addLoggedInTime(callback) {
	var timeField = new_current_loggedin_time();
	if (!timeField) {
		
		processCallback(callback);
		return;
	}

	property_request(timeField, callback);
}

/**
 * Processes callback
 * @param callback
 */
function processCallback(callback)
{
	if (callback && typeof callback === "function")
		callback();
}

function property_request(property, callback)
{
	_agile.add_property(property,
			function(data) {
				Agile_Contact = data;
				_agile_contact = data;

				processCallback(callback)
			});	
}

/**
 * Adds all tags in single reqeust
 * @param callback
 */
function add_init_tags(callback) {
	var tag = "";
	tag = SIGN_UP;
	if (CURRENT_DOMAIN_USER['is_account_owner']) {
		tag += "," + "Domain Owner";
	}

	add_miltiple_tags(tag, callback);
}

function add_miltiple_tags(tags, callback) {
	var tags_array = tags.split(",");

	var finalizedTags = "";

	for (var i = 0; i < tags_array.length; i++) {
		if (hasTagInContact(tags_array[i]))
			continue;

		if (finalizedTags.length > 0)
			finalizedTags += "," + tags_array[i];
		else
			finalizedTags += tags_array[i];
	}

	if (finalizedTags.length == 0) {
		if (callback && typeof (callback) === "function") {
			callback();
		}

		return;
	}
	add_multiple_tags_request(finalizedTags.trim(), callback)
}

function add_multiple_tags_request(finalizedTags, callback) {
	_agile.add_tag(finalizedTags, function(data) {
		Agile_Contact = data;

		if (callback && typeof (callback) === "function") {
			callback(data);
		}
	});
}

/***************************************/

function new_current_loggedin_time() {
	// Gets current time, and updates the last loggedin time.
	var current_date_object = new Date();
	var current_date_string = current_date_object.getUTCMonth() + 1 + "/"
			+ current_date_object.getUTCDate() + "/"
			+ current_date_object.getUTCFullYear();

	console.log(parseInt(current_date_object.getTime() / 1000));

	// Gets logged in time property.
	var loggedin_time_property = getProperty(Agile_Contact.properties,
			'Last login');
	var existing_date_string = "";

	// To whether custom is new or old.
	var is_new_customer = true;
	if (loggedin_time_property) {
		var existing_date_object = new Date(
				parseFloat(loggedin_time_property.value) * 1000);
		existing_date_string = existing_date_object.getUTCMonth() + 1 + "/"
				+ existing_date_object.getUTCDate() + "/"
				+ existing_date_object.getUTCFullYear();
		is_new_customer = false;
	}

	// If loggedin time is defined and it is not equal to current date then it
	// is updated
	if (existing_date_string && existing_date_string == current_date_string)
		return;

	loggedin_time_property = create_contact_custom_field("Last login",
			parseInt(current_date_object.getTime() / 1000), 'CUSTOM');

	return loggedin_time_property;
}


function create_contact_custom_field(name, value, type, subtype) {
	if (!name)
		return;

	var json = {};
	json["name"] = name;
	json["value"] = value;
	json["subtype"] = type;

	console.log(value);
	return json;

}

function add_account_canceled_info(info, callback) {
	var custom_field = create_contact_custom_field(
			ACCOUNT_CANCELED_CUSTOM_FIELD_NAME, info["reason"], 'CUSTOM');
	_agile.add_property(custom_field, function(data) {
		add_tag_our_domain(CANCELED, function(data) {

			if (info["reason_info"]) {
				var note = {};
				note.subject = ACCOUNT_CANCELED_NOTE_SUBJECT;
				note.description = info["reason_info"];

				_agile.add_note(note, function(data) {
					console.log(data);
					Agile_Contact = data;

					if (callback && typeof (callback) === "function") {
						callback();
					}

				});
				return;
			}

			if (callback && typeof (callback) === "function") {
				callback();
			}

		});
	});
}

/**
 * adds referral info as a note while adding contact as a note in our domain
 */

function add_referrar_info_as_note() {
	var utmsource = _agile_get_prefs("_agile_utm_source");
	var utmcampaign = _agile_get_prefs("_agile_utm_campaign");
	var utmmedium = _agile_get_prefs("_agile_utm_medium");
	var utmreferencedomain = _agile_get_prefs("agile_reference_domain");
	if (utmsource && utmcampaign && utmmedium && utmreferencedomain) {
		var note = {};
		note.subject = "Referrer";
		note.description = "Source - " + utmsource + "\n Campaign -  "
				+ utmcampaign + "\n Medium - " + utmmedium
				+ "\n Reference Domain -" + utmreferencedomain;

		_agile.add_note(note, function(data) {
			console.log(data);
			_agile_delete_prefs("agile_reference_domain");

		});
	}
}

// add GMT tag for user who is in between 4am to 6pm GMT
function add_timezone_tag() {
	var date = new Date();
	var startTime = date.getUTCHours();
	if (startTime >= 3 && startTime <= 15) {
		add_tag_our_domain("GMT");
	}
}


function our_domain_sync() {

	try {

		our_domain_set_account();

		var domain = _agile_get_prefs(DOMAIN_COOKIE_FOR_WEBSITE);

		// Sets different cookie if user logs into different domain
		if (!domain || domain != CURRENT_DOMAIN_USER["domain"])
			createCookieInAllAgileSubdomains(DOMAIN_COOKIE_FOR_WEBSITE,
					CURRENT_DOMAIN_USER["domain"],365);

		get_contact_from_our_domain(function(data) {
			// Shows noty
			// set_profile_noty();
			Agile_Contact = data;

			
			var phone = getProperty(Agile_Contact.properties, 'phone');
			var update_phone = CURRENT_DOMAIN_USER["phone"];
			if(update_phone){
				if(!phone){
					_agile.add_property(create_contact_custom_field("phone", update_phone, "SYSTEM","home"),
							function(data) {
								Agile_Contact = data;
								_agile_contact = data;
							});
				}
			}

			// Adds signup tag, if it is not added previously.
			// set_profile_noty();
			add_custom_fields_to_our_domain();

			initWebrules();

		}, function(data) {
			var name = CURRENT_DOMAIN_USER['name'];

			// var first_name = name, last_name = name;
			name = name.trim();
			var first_name = name.split(" ")[0].trim();
			var last_name = (first_name.length < name.length) ? name.substring(
					first_name.length + 1).trim() : '';

			// Creates a new contact and assigns it to global value
			var email = CURRENT_DOMAIN_USER['email'];
			var emailType = email.split("@")[1].split(".")[0];

			var param = {
					"email" : CURRENT_DOMAIN_USER['email'],
					"first_name" : first_name,
					"last_name" : last_name
					};
			if(CURRENT_DOMAIN_USER['phone']){
				param['phone'] = CURRENT_DOMAIN_USER['phone'];
			}
			
			if(emailType != "yopmail")
			{
				_agile.create_contact(param, function(data) {
					Agile_Contact = data;
					// Shows noty
					// set_profile_noty();
					add_custom_fields_to_our_domain();

					initWebrules();
				});
			}

		})
		// Gets contact based on the the email of the user logged in

	} catch (err) {

	}
}

function get_contact_from_our_domain(successCallback, errorCallback) {

	// Gets contact based on the the email of the user logged in
	agile_getContact(CURRENT_DOMAIN_USER['email'], {
		success : function(data) {
			Agile_Contact = data;
			if (successCallback && typeof (successCallback) === "function")
				successCallback(data);
		},
		error : function(data) {
			if (errorCallback && typeof (errorCallback) === "function")
				errorCallback(data);
		}
	})

}

function add_signup_tag(callback) {
	if (!Agile_Contact.tags || Agile_Contact.tags.indexOf(SIGN_UP) < 0) {
		add_tag_our_domain(SIGN_UP, function(data) {
			// Calling to add custom fields here so avoid data loss
			// due to asyn
			// requests
			add_custom_fields_to_our_domain();

			if (callback && typeof (callback) === "function") {
				callback();
			}
		})
		return;
	}

	// Calling to add custom fields here so avoid data loss due to asyn requests
	add_custom_fields_to_our_domain();
}


function setup_our_domain_sync() {
	our_domain_sync();
}



// Checks if tag exists
function checkTagAgile(tag) {

	console.log(Agile_Contact);
	if (Agile_Contact && Agile_Contact.tags)
		return Agile_Contact.tags.indexOf(tag) > -1;

	return false;
}

function hasTagInContact(tag) {
	if (!tag)
		return false;

	if (Agile_Contact
			&& (!Agile_Contact.tags || Agile_Contact.tags.indexOf(tag) < 0))
		return false;

	return true;

}

function add_tag_our_domain(tag, callback) {
	if (hasTagInContact(tag)) {
		if (callback && typeof (callback) === "function") {
			callback(Agile_Contact);
		}
		return;
	}

	_agile.add_tag(tag, function(data) {
		Agile_Contact = data;

		if (callback && typeof (callback) === "function") {
			callback(data);
		}
	});
}

/**
 * Adds tag to 'OUR' domain.
 * 
 * @param tag
 */
function addTagAgile(tag) {

	try{
		// Checks if tag is already available.
		if (checkTagAgile(tag))
			return;

		// Adds tag
		_agile.add_tag(tag, function(data) {
			Agile_Contact = data;
			if (!checkTagAgile(tag))
				Agile_Contact.tags.push(tag)
				// set_profile_noty();
		});
		
	}catch(err){}
	
}

function add_property(name, value, type, callback) {
	// alert(Agile_Contact.properties);
	var property = getProperty(Agile_Contact.properties, name);
	if (property && property.value == value && type == property.type) {
		callback(Agile_Contact);
		return false;

	}
	_agile.add_property(create_contact_custom_field(name, value, type),
			function(data) {
				Agile_Contact = data;
				_agile_contact = data;

				if (callback && typeof callback == "function")
					callback(data);
			});
}

var GLOBAL_WEBRULE_FLAG;
function initWebrules() {
	_agile_execute_web_rules();
	GLOBAL_WEBRULE_FLAG = true;
}


function add_properties_from_popup(phone_number, company_size) {
	_agile.add_property(create_contact_custom_field("Company Size",
			company_size, "CUSTOM"), function(data) {
		_agile.add_property(create_contact_custom_field("phone", phone_number,
				"SYSTEM", "home"), function(data) {

			console.log(data);
			_agile_contact = data;
			console.log(_agile_contact);
			window.setTimeout(initWebrules, 4000);

		});
	});
}

/**
 * adds user info as a note to account owner when user created called from
 * user-add route
 */
function add_created_user_info_as_note_to_owner(owner, callback) {
	var note = {};
	note.subject = "User created";
	note.description = " Domain - " + owner['domain'] + "\n User Email -  "
			+ owner['created_user_email'];
	_agile.add_note(note, function(data) {
		if (callback && typeof callback == "function")
			callback(data);

	}, owner['email']);

}


// add note to owner when subscription is cancelled
function add_cancel_subscription_info_as_note_to_owner(cus_email, callback) {
	var note = {};
	note.subject = "Subscription Cancelled";
	note.description = " Subscription cancelled by "
			+ CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data) {
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);
}
function add_delete_user_info_as_note_to_owner(cus_email, callback) {
	var note = {};
	note.subject = "User Deleted ";
	note.description = " One user deleted by " + CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data) {
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}
function add_refunded_info_as_note_to_owner(cus_email, amount, callback) {
	var note = {};
	note.subject = "Amount Refunded ";
	note.description = "Amount $" + amount + " refunded by "
			+ CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data) {
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}
function add_password_change_info_as_note_to_owner(cus_email, callback) {
	var note = {};
	note.subject = "Password Changed ";
	note.description = " Password changed by " + CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data) {
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}

/**
 * Adds plan changed info as a note
 * @param cus_email
 * @param plan_type
 * @param plan_id
 * @param quantity
 * @param callback
 */
function add_plan_change_info_as_note_to_owner(cus_email, plan_type, plan_id,
		quantity, callback) {
	var note = {};
	note.subject = "Plan Changed ";
	note.description = " Plan changed to " + plan_type + " (" + plan_id + "*"
			+ quantity + ") by " + CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data) {
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}

$(function(){
	
	
});

function initialize_agile_domain_sync(){

	try
	{
		if(_agile)
		{
			setup_our_domain_sync();
			return;
		}
		head.js("stats/min/agile-min.js", function(){
			setup_our_domain_sync();
		})
		
	}
	catch(err)
	{
		console.log();
	}
	
}

// add note to owner when subscription is cancelled
function add_cancel_subscription_info_as_note_to_owner(cus_email, callback)
{
	var note = {};
	note.subject = "Subscription Cancelled";
	note.description = " Subscription cancelled by "+CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data)
	{
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);
}
function add_delete_user_info_as_note_to_owner(cus_email, callback)
{
	var note = {};
	note.subject = "User Deleted ";
	note.description = " One user deleted by "+CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data)
		{
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}
function add_refunded_info_as_note_to_owner(cus_email, amount, callback)
{
	var note = {};
	note.subject = "Amount Refunded ";
	note.description = "Amount $"+amount+" refunded by "+CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data)
		{
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}
function add_password_change_info_as_note_to_owner(cus_email, callback)
{
	var note = {};
	note.subject = "Password Changed ";
	note.description = " Password changed by "+CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data)
		{
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}
function add_plan_change_info_as_note_to_owner(cus_email, plan_type, plan_id, quantity, callback)
{
	var note = {};
	note.subject = "Plan Changed ";
	note.description = " Plan changed to "+plan_type+" ("+plan_id+"*"+quantity+") by "+CURRENT_DOMAIN_USER.email;
	_agile.add_note(note, function(data)
		{
		if (callback && typeof callback == "function")
			callback(data);

	}, cus_email);

}

function update_contact_in_our_domain(user_email, response, callback){

	console.log("update_contact_in_our_domain");

	if(!response || !response.email){
		processCallback(callback);
		return;
	}

	var phone = "";
	if(response.phone){
		phone = response.phone;
	}
	try{

		if (CURRENT_DOMAIN_USER.email != user_email)
		   _agile.set_email(user_email);

		_agile.update_contact({
		    "email": response.email,
		    "phone":phone
		}, {
		    success: function (data) {
		        console.log("success");
		        processCallback(callback);
		    },
		    error: function (data) {
		        console.log("error");
		        processCallback(callback);
		    }
		});

	}catch(e){
		processCallback(callback);
	}

}
var Agile_Tour = {};

/**
 * Returns Agile_tour steps JSON
 * 
 * @param el
 */
function create_tour_steps(el)
{

	Agile_Tour["contacts"] = [
			{ "element" : "#contacts", "title" : "Contact & Account Management",
				"content" : "View your contacts, leads and accounts (companies) all at one place.<br/>", "placement" : "bottom", "el" : el, "backdrop" : true },
			{ "element" : "#filters-tour-step", "title" : "Companies (Accounts)",
				"content" : "Accounts are stored as Companies in Agile.<br/><br/> You can switch between contacts and companies  here.<br/>",
				"placement" : "bottom", "el" : el, "backdrop" : true },
			{
				"element" : "#tags",
				"title" : "Tags",
				"content" : "Tags help you effectively manage your contacts and companies.<br/><br/> For eg: you can add a lead tag to your contacts for leads.<br/>",
				"placement" : "right", "el" : el, "backdrop" : true }
	]

	/**
	 * Contacts details
	 */
	Agile_Tour["contact-details"] = [
			{ "element" : "#contact-tab-content", "title" : "Facebook-Style Timeline",
				"content" : "Notice the awesome timeline with dates, emails exchanged, social messages & site visits.<br/>", "placement" : "right", "el" : el,
				"backdrop" : true },
			{
				"element" : "#score",
				"container" : "#score",
				"title" : "Score your leads",
				"content" : "Assign lead scores for every contact to keep high quality leads swimming on top. <br/><br/> Use workflows to automate the process based on user behavior.<br/>",
				"placement" : "bottom", "el" : el, "backdrop" : true },
			{ "element" : "#widgets", "title" : "Widgets & Integrations",
				"content" : "Get more information about the contact from social media, helpdesk tickets, chats, and from billing systems.<br/>",
				"placement" : "left", "el" : el, "backdrop" : true, },
	];

	/**
	 * Calendar
	 */
	Agile_Tour["calendar"] = [
			{ "element" : "#calendar_event", "title" : "Calendar Events", "content" : "Events are time based such as meetings.<br/> They show up in calendar.<br/>",
				"placement" : "left",
				// "el": el,
				"backdrop" : true, },
			{ "element" : ".todo-block", "title" : "To Do Tasks",
				"content" : "Tasks are like to-dos. Result oriented.<br/><br/> You can assign a category such as call, email.<br/>", "placement" : "right",
				// "el": el,
				"backdrop" : true, },
			{ "element" : "#subscribe-ical", "title" : "Calendar Sync",
				"content" : "You can sync your Agile calendar with  Outlook, Google calendar or your mobile phone.<br/>", "placement" : "top",
				// "el": el,
				"backdrop" : true, },

	];

	Agile_Tour["workflows"] = [
			{
				"element" : "#learn-workflows",
				"title" : "Learn about Campaigns",
				"content" : "Our customers love campaign workflows. You would too!<br/><br/>  <p class='text-error'><strong>Take a few mins and learn more about campaigns.</strong></p>",
				"placement" : "left", "el" : el, "backdrop" : true, },
			{
				"element" : "#add-trigger",
				"title" : "Triggers",
				"content" : "Create conditions to trigger your campaigns automatically. <br/><br/> <strong>Eg:</strong> when a tag is added or when a contact reaches a score.<br/>",
				"placement" : "bottom", "el" : el, "backdrop" : true, }
	]
/*	Agile_Tour["workflows-add"] = [
		{ "element" : "#workflowform", "title" : "Visual Campaigns",
			"content" : "Create your campaigns and workflows visually.<br/> Just drag and drop the nodes. Connect them to the workflow.<br/>",
			"placement" : "top", "el" : el, "backdrop" : true, }
	]*/

}

var tour;

/**
 * gets the key and initializes the tour with steps from the JSON Object
 * 
 * @param key
 * @param el
 */
function start_tour(key, el)
{
	if((1 + 1) == 2)
		return;
	
	if (!key)
		key = Current_Route;

	console.log(tour);

	// If tour is defined and tour name is not equal to current route/key, then
	// tour should be ended
	if (tour && tour._options)
	{
		var step = tour._current;
		console.log(step);
		console.log(tour._options.name);
		console.log(key + "-tour");

		if (tour._options.name != key + "-tour")
		{
			tour.end();
			tour = undefined;
		}
		else
		{
			// if user hits a button in the page, it reloads. On reload, current
			// tour is stoped and reinitialized
			tour.end();
			tour.setCurrentStep(step);
			tour.start(true);
			return;
		}
	}

	tour = undefined;
	var tour_flag = false;

	if (!el)
	{
		if (tour_flag)
			return;

		// Initializes the tour and sets tour flag to ensure tour won't load
		// again
		initiate_tour(key, el);
		tour_flag = true;
	}

	// Tour should be initialized only after page is loaded
	$("body").on('agile_collection_loaded', 'body', function(event, element)
	{
		if (tour_flag)
			return;

		// Initializes the tour and sets tour flag to ensure tour won't load
		// again
		initiate_tour(key, element);
		tour_flag = true;
	});
}

/**
 * Initializes the tour with based fetched from JSON object defined. key can
 * either be sent explicitly or it takes them from current route
 * 
 * @param key
 * @param el
 */
function initiate_tour(key, el)
{
	// Reads cookie which is set in Homeservlet when new user is created
	var tour_status_cookie = _agile_get_prefs("agile_tour");

	// If cookies is not preset it returns back
	if (!tour_status_cookie)
		return;

	// If is undefined the current route is assigned to tour
	if (!key)
	{
		if (!Current_Route)
			return;

		key = Current_Route;
	}

	// Parses cookie. It is parsed 2 times or it is returing string instead of
	// JSON object
	tour_status_cookie = JSON.parse(JSON.parse(tour_status_cookie));

	// Reads whether tour is ended on current route
	tourStatus = tour_status_cookie[key];

	// If tour is not there on current page then it is returned back
	if (!tourStatus)
		return;

	// If JSON Object is empty, then creates new JSON Object
	if ($.isEmptyObject(Agile_Tour))
		create_tour_steps(el);

	if (Agile_Tour[key])
		head.load(CSS_PATH+'css/bootstrap-tour.min.css', 'lib/bootstrap-tour-agile.min.js', function()
		{
			// Uses bootstrap tour
			tour = new Tour({ name : key + "-tour", debug : true, useLocalStorage : true, endOnLast : true, onEnd : function(tour)
			{

				// Remove from cookie on ending tour
				$("." + key + "-tour").remove();
				delete tour_status_cookie[key];

				if ($.isEmptyObject(tour_status_cookie))
				{
					_agile_delete_prefs("agile_tour");
					return;
				}

				/*
				 * Stringified it twice to maintain consistency with the cookie
				 * set from backend. Creates JSON with current step removed.
				 */
				_agile_set_prefs("agile_tour", JSON.stringify(JSON.stringify(tour_status_cookie)));
			} });

			tour.addSteps(Agile_Tour[key]);

			// Set current step to first step
			tour.setCurrentStep(0);
			tour.start(true);

		})

}

/**
 * Creates a tour cookie and initializes tour on current page.
 */
function reinitialize_tour_on_current_route()
{

	console.log(tour);

	// Return of tour is already enabled on that route
	var tour_status_cookie = _agile_get_prefs("agile_tour");
	var key = Current_Route;

	// If current view is contact details page we cannot initialize
	// tour based on route name, so we should be changing it to
	// "contact-details"
	if (Current_Route.indexOf("contact/") != -1)
		key = "contact-details";

	// If cookie exists, checks the state of tour in curent route.
	if (tour_status_cookie)
	{
		tour_status_cookie = JSON.parse(JSON.parse(tour_status_cookie));

		if (tour_status_cookie[key] == true)
			return;
		_agile_delete_prefs(key + "-tour_current_step");
	}

	else
		tour_status_cookie = {};

	// Set tour back to true and save in cookie.
	tour_status_cookie[key] = true;

	console.log(JSON.stringify(tour_status_cookie));

	// Removes the current step from localstorage, it is set by bootstrap tour
	_agile_delete_prefs(key + "-tour_current_step");

	// Creates a new tour cookie
	_agile_set_prefs("agile_tour", JSON.stringify(JSON.stringify(tour_status_cookie)));

	// Initialize tour
	initiate_tour(key);
}

$(function()
{
	/**
	 * Selecting tour enables tour again.
	 */
	$('#agile-page-tour').click(function(e)
	{
		e.preventDefault();
		reinitialize_tour_on_current_route();
	});
});
$(function()
{
	// Collapses the menu on a mobile device
	// Without this, the user has to click the collapsible button to remove the menu
	$('.agile-menu > li').click(function(e){
	    
		console.log("Collapsing before ul");
		$nav_collapse = $(this).closest('.nav-collapse');
		console.log($nav_collapse.attr('class'));
		if($nav_collapse.hasClass('collapse'))
		{
			console.log("Collapsing");
			$nav_collapse.collapse('hide');
		}
	});

	// Scroll to top
	$(window).load(function() {
		$("#top").click(function () {
			$("body, html").animate({
				scrollTop: 0
			}, 300);
			return false;
		}); 
	});
});	

		/**
 * Loads scripts from url only if there are not active ajax requests. If there
 * are any active ajax requests, current function with all arguments will be
 * called after 5 seconds timeout
 * 
 * @param url
 * @param callback
 */
function load_urls_on_ajax_stop(url, callback) { 
	if (!isActive()) {
		setTimeout(function() {
			load_urls_on_ajax_stop(url, callback);
		}, 5000);
		return;
	}

	head.js(url, function() {
		if (callback && typeof callback == "function")
			callback();
	});

}

function loadMiscScriptsWithTimeOut() {
	if (loadMiscScripts) {
		// Load User voice then
		setTimeout(loadMiscScripts, 10000);
		return;
	}

	try {
		setTimeout(loadMiscScriptsWithTimeOut, 3000);
	} catch (err) {
		console.log(err);
	}

}

function loadMiscScripts() {

    // Load Google Analytics code
    load_analytics_code();

    // Load agile web stats
    load_urls_on_ajax_stop('stats/min/agile-min.js?_=' + _agile_get_file_hash('agile-min.js'), function(){

    		initialize_agile_domain_sync();
    		_agile_execute_web_rules();
    });

    if(!agile_is_mobile_browser())
		load_urls_on_ajax_stop('lib/user-voice.js');

	// load_clickdesk_code();

	// Clicky code
	/*load_urls_on_ajax_stop('//static.getclicky.com/js', function() {

		try {
			clicky.init(100729733);
		} catch (e) {

		}
	});*/

	/**
	 * Sets timeout for registering notifications.Waits for 2secs after page
	 * loads and calls downloadAndRegisterForNotifications function
	 */
	downloadAndRegisterForNotifications();
	
} 

/**
 * Clickdesk Widget
 */
/*
 * function load_clickdesk_code() { return;
 * 
 * if (CLICKDESK_CODE_LOADED) return;
 * 
 * console.log("loading clickdesk..");
 * 
 * CLICKDESK_CODE_LOADED = true;
 * 
 * load_urls_on_ajax_stop(glcpath + 'livechat-new.js', function(){
 * CLICKDESK_CODE_LOADED = true; }) }
 */

$(function() {
	setTimeout(loadMiscScriptsWithTimeOut, 10000);
})

/**
 * Checks if there are any active ajax requests
 * 
 * @returns {Boolean}
 */
function isActive() {
	if ($.active > 0)
		return false;
	return true;
}

/** Google analytics code **/
function load_analytics_code(){

	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
	  ga('create', 'UA-44894190-1', 'auto');
	  ga('send', 'pageview');
	  ga('create', 'UA-75813054-1', {'name':'b'});
	  ga('b.send', 'pageview');
}/**
 * Track Events to Google Analytics
 */
var Agile_GA_Event_Tracker = {

	/**
	 * Set category
	 */
	category : "Agile Dashboard",

	/**
	 * Send track event to google analytics
	 */
	track_event : function(action) {

		if (!action)
			return;

		var label = CURRENT_DOMAIN_USER.domain;
		label = (!label) ? "localhost" : label;

		try {
			_gaq.push([ '_trackEvent', this.category, action, label ]);
		} catch (e) {
			try {
				ga('b.send', 'event', this.category, action, label);
			} catch (e) {
			}
		}

	}

};

$(function(){
    $("body").on("click", ".ga-track-event", function(){
         var action = $(this).attr("data-ga-text");
         if(!action)
         	 return;

       Agile_GA_Event_Tracker.track_event(action);  	

    });
});


function track_with_save_success_model(ele){
   try{
   	
   	  var href = location.href;
   	  var action = "";
	      
	  if(href.indexOf("newsletter") != -1)
	  	   action = "Save Campaign in Newsletter";
	  else if(href.indexOf("auto_responder") != -1)
	  	   action = "Save Campaign in Autoresponder";
	  else if(href.indexOf("webrule-add") != -1)
	  	   action = "Web Rule Added";
	  else if(href.indexOf("landing-page-add") != -1)
	  	   action = "Landing Page Created";

	  if(action)
		  Agile_GA_Event_Tracker.track_event(action); 

   }catch(e){}
   
}

function agile_update_ga_track_page(hash_content){
	if(!hash_content)
		  return;
	try{
		if(hash_content.split("/").length > 1)
		   hash_content = hash_content.split("/")[0];

		ga('b.set', 'page', '/#' + hash_content);
		ga('b.send', 'pageview');
	}catch(e){}
}/**
 * Loads highcharts.js and highcharts-exporting.js plugins used to show graphs,
 * after loading graphs callback function sent is called i.e., actions to be
 * performed after loading plugin scripts
 * 
 * @param callback
 *            Function to be called after loading highcharts.js and
 *            exporting.js, it gives functionalities to
 */
function setupCharts(callback)
{

	head.js(LIB_PATH + 'lib/flot/highcharts-3.js',LIB_PATH + 'lib/flot/highcharts-more.js',LIB_PATH + 'lib/flot/solid-gauge.js', LIB_PATH + 'lib/flot/highcharts-exporting.js?_=v1', LIB_PATH + 'lib/flot/funnel.js',LIB_PATH + 'lib/flot/highcharts-grid.js',
	LIB_PATH + 'lib/flot/no-data-to-display.js', LIB_PATH + 'lib/flot/export-csv.js', function()
	{

		// Checks if callback is available, if available calls the callback
		if (callback && typeof (callback) === "function")
		{

			// Execute the callback
			callback();
		}
	});
}

/**
 * Sets pie chart with the data obtained by accessing url in the selector
 * element with given name as title of the chart.
 * 
 * @param url -
 *            to fetch json data inorder to render graph. 
 * @param selector -
 *            id or class of an element where charts render.
 * @param name - 
 *            title of the chart.
 */
function pie(url, selector, name)
{

	// Show loading
	// $('#' + selector).html(getRandomLoadingImg());

	var chart;
	setupCharts(function()
	{
		// Fetches data from to get tags informations
		// i.e., {"tags1" :" number of contacts with 'tags1', "tags2" : "number
		// of contacts with tags2"}
		fetchReportData(
						url,
						function(data)
						{
							// Convert into labels and data as required by
							// Highcharts
							var pieData = [];
							var total = 0;
							var count = 0;

							// Iterates through data and calculate total number
							$.each(data, function(k, v)
							{
								total += v;
								count ++;
							});

							console.log(data,total);
							// Iterates through data, gets each tag, count and
							// calculate
							// percentage of each tag
							$.each(data, function(k, v)
							{
								var item = [];

								
								// Push tag name in to array
								item.push(k);

								// Push percentage of current tag in to array
								item.push(v / total * 100);
								pieData.push(item);
							})
							console.log(pieData);
							var animation = count > 20 ? false : true;
							
							// Initializes Highcharts,
							chart = new Highcharts.Chart(
									{
										chart : { renderTo : selector, type : 'pie', plotBackgroundColor : null, plotBorderWidth : null, plotShadow : false,
											marginTop : 50 },
										colors: ['#7266ba','#23b7e5','#27c24c','#fad733','#f05050'],
										title : { text : name },
										tooltip : {
											backgroundColor : null,
											borderWidth : 0,
											borderRadius : 0,
											headerFormat : '',
											useHTML : true,
											enabled : true,
											shadow : false,
											formatter : function()
											{
												var s = '<div class="highcharts-tool-tip"><div class="tooltip-title" style="color:#333333!important;">' + this.point.name + '</div><div style="text-align:center;margin-top:7px;margin-left:-3px;color:#333333!important;"><b>' + (this.point.percentage)
														.toFixed(2) + '%<b></div></div>';
												return s;
											}, message : "Hover over chart slices<br>for more information.", positioner : function()
											{
												return { x : 15, y : 23 };
											}, },
										legend : { itemWidth : 75, },

										plotOptions : {
											pie : {
												 animation: animation,
												allowPointSelect : true,
												cursor : 'pointer',
												borderWidth : 0,
												dataLabels : { enabled : true, color : '#000000', connectorColor : '#000000', connectorWidth : 0,
													formatter : function()
													{
														return "";
														if (this.percentage <= 2)
															return "";
														return (this.percentage).toFixed(2) + ' %';
													}, distance : 2 }, showInLegend : false, innerSize : '60%', size : '90%', shadow : false, borderWidth : 0 },
											series : { events : { mouseOver : function()
											{
												$('.tooltip-default-message').hide();
											}, mouseOut : function(e)
											{
												$('.tooltip-default-message').show();
											} },
											borderWidth : 0 } },

										series : [
											{ type : 'pie', name : 'Tag', data : pieData, startAngle : 90 }
										], }, function(chart)
									{ // on complete

										chart.renderer.image(updateImageS3Path('img/donut-tooltip-frame.png'), 14, 5, 200, 80).add();
										chart.renderer.text(this.options.tooltip.message, 50, 40).attr("class", 'tooltip-default-message').add();

									});
						});
	});
}

/**
 * Function to build either stacked graph or bar graph using highcharts. Inorder
 * to show bar graph, initialize stacked parameter as null.
 * <p>
 * Data of categories in the bar graph should be as follows: categories: ['Aug
 * 1', 'Aug 2', 'Aug 3', 'Aug 4', 'Aug 5']
 * </p>
 * 
 * <p>
 * Data of series in the bar graph should be as follows: series: [{ name: 'Email
 * Sent', data: [5, 3, 4, 7, 2] }, { name: 'Email Opened', data: [2, 2, 3, 2, 1] }, {
 * name: 'Email Clicked', data: [3, 4, 4, 2, 5] }, { name: 'Total Clicks', data:
 * [3, 4, 4, 2, 5] }]
 * </p>
 * 
 * @param url -
 *            to fetch json data inorder to render graph.
 * @param selector -
 *            id or class of an element where charts should render.
 * @param name -
 *            title of the chart.
 * @param yaxis_name -
 *            name for y-axis.
 * @param stacked -
 *            is stacked graph or bar graph? If bar graph, stacked is null.
 */
function showBar(url, selector, name, yaxis_name, stacked, selected_colors)
{
	var chart;

	// Shows loading image
	$('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");


	// Builds graph with the obtained json data.
	setupCharts(function()
	{

		// Loads statistics details from backend
		fetchReportData(url, function(data)
		{

			// Names on X-axis
			var categories = [];
			var tempcategories = [];
			var colors=[];

			if(selector!='calls-chart')
				colors=['#23b7e5','#27c24c','#7266ba','#fad733'];
			else
				colors=['#27c24c','#23b7e5','#f05050','#7266ba','#fad733','#FF9900','#7AF168','#167F80','#0560A2','#D3E6C7','#7798BF','#B72030'];
			
			colors = selected_colors || colors;
			
			var dataLength = 0;
				var frequency= $("#frequency:visible").val();
			// Data to map with X-axis and Y-axis.
			var series;

			// Iterates through data and add all keys as categories
			$.each(data, function(k, v)
			{
				if(selector!='calls-chart' && selector!='tickets-chart')
				  categories.push(k);

				// Initializes series with names with the first
				// data point
				if (series == undefined)
				{
					var index = 0;
					series = [];
					$.each(v, function(k1, v1)
					{
						var series_data = {};
						series_data.name = k1;
						series_data.data = [];
						series[index++] = series_data;
					});
				}

				// Fill Data Values with series data
				$.each(v, function(k1, v1)
				{

					// Find series with the name k1 and to that,
					// push v1
					var series_data = find_series_with_name(series, k1);
					series_data.data.push(v1);
				});
				tempcategories.push(k*1000);
				dataLength++;
	
			});
					var cnt=0;
					if(selector=='calls-chart' || selector=='tickets-chart'){
					$.each(data, function(k, v)
			{
						dateRangeonXaxis(tempcategories,categories,frequency,dataLength,cnt);
						                 cnt++;
						});
						}
			// Draw the graph
			chart = new Highcharts.Chart({
			    chart: {
			        renderTo: selector,
			        type: 'column'
			    },
			    colors: colors,
			    title: {
			        text: name
			    },
			    xAxis: {
			        categories: categories,
			        tickPositioner:function()
		            {
		                // to overcome x-axis labels overlapping
			        	if(this.options.categories.length > 30)
		                {
		                   // this.options.minTickInterval = 5;
		                    this.options.minTickInterval = Math.ceil(this.options.categories.length/10);
               					 if(this.options.minTickInterval==3)
               					 {
                   					 this.options.minTickInterval = 4;
                				}
		                }
		            },
			        labels:
			        {
			        	overflow:'justify'
			        }
			    },
			    yAxis: {
			    	allowDecimals: false,
			        min: 0,
			        title: {
			            text: yaxis_name
			        },
			        stackLabels: {
			            enabled: true,
			            style: {
			                fontWeight: 'bold',
			                color: (Highcharts.theme&&Highcharts.theme.textColor)||'gray'
			            }
			        }
			    },
			    legend: {
			        align: 'right',
			        x: -52,
			        verticalAlign: 'top',
			        y: 0,
			        floating: true,
			        layout: 'horizontal',
			        backgroundColor: (Highcharts.theme&&Highcharts.theme.legendBackgroundColorSolid)||'white',
			        borderColor: '#CCC',
			        borderWidth: 1,
			        shadow: false
			    },
			    tooltip: {
			        formatter: function(){
			        	if(selector=='calls-chart'){
			        		return'<b>'+this.x+'</b><br/><font color='+this.series.color+'>'+this.series.name+'</font>: '+this.y;
			        		
			        	}
			        	else
			            	return'<b>'+this.x+'</b><br/>'+this.series.name+': '+this.y;
			        },
			        useHTML : true,
			    },

			    plotOptions: {
			        column: {
			            stacking: stacked,
			            dataLabels: {
			                enabled: true,
			                color: (Highcharts.theme&&Highcharts.theme.dataLabelsColor)||'white'
			            }
			        },
			        series : {
			        	borderWidth : 0
			        },
			    },
			    series: series,
			    noData: {
									 style: {
									   
										fontSize: '14px',
										fontWeight : 'normal',
										color : '#98A6AD'
											 },
						},
			});
			});
	});
}

/**
 * Small utility function to search series with a given name. Returns series
 * with index if given name matches. It provides way to enter values within
 * the data array of given name.
 * 
 * @param series -
 *              chart series data.
 * @param name - 
 *              series name.
 */
function find_series_with_name(series, name)
{
	for ( var i = 0; i < series.length; i++)
	{
		if (series[i].name == name)
			return series[i];
	}
}

/**
 * Function to build deal's line chart to compare total value and pipeline value.
 * <p>
 * Data obtained to render deal's line chart will be:
 * [{closed-date:{total:value, pipeline: value},...]
 * </p>
 * 
 * @param url - 
 *            to fetch json data inorder to render graph.
 * @param selector - 
 *            id or class of an element where charts should render.
 * @param name - 
 *            title of the chart.
 * @param yaxis_name - 
 *            name for y-axis
 * @param show_loading
 * 				shows loading image
 */
function showLine(url, selector, name, yaxis_name, show_loading)
{
	
	// Show loading image if required
	if(typeof show_loading === 'undefined')
	{
		// Old calls were not showing loading image..
	}
	else
		$('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");
	
	
	var chart;

	// Loads Highcharts plugin using setupCharts and sets up line chart in the
	// callback
	setupCharts(function()
	{
		if (reportDataRequest && reportDataRequest.readyState==1 && reportDataRequest.state()=="pending")
		{
			reportDataRequest.abort();
		}

		// Loads statistics details from backend i.e.,[{closed
		// date:{total:value, pipeline: value},...]
		fetchReportData(url, function(data)
		{

			// Categories are closed dates
			var categories = [];
			var tempcategories = [];
			var dataLength = 0;
			var min_tick_interval = 1;
			var frequency = $( "#frequency:visible").val();
			
			// Data with total and pipeline values
			var series;
			
			var sortedKeys = [];
			$.each(data,function(k,v){
				sortedKeys.push(k);
			});
			sortedKeys.sort();
			var sortedData = {};
			$.each(sortedKeys,function(index,value){
				sortedData[''+value] = data[''+value];
			});

			// Iterates through data and adds keys into
			// categories
			$.each(sortedData, function(k, v)
			{

				// Initializes series with names with the first
				// data point
				if (series == undefined)
				{
					var index = 0;
					series = [];
					$.each(v, function(k1, v1)
					{
						var series_data = {};
						series_data.name = k1;
						series_data.data = [];
						series[index++] = series_data;
					});
				}

				// Fill Data Values with series data
				$.each(v, function(k1, v1)
				{

					// Find series with the name k1 and to that,
					// push v1
					var series_data = find_series_with_name(series, k1);
					series_data.data.push(v1);
				});
				tempcategories.push(k*1000);
				dataLength++;

			});

			var cnt = 0;
			if(Math.ceil(dataLength/10)>0)
			{
				min_tick_interval = Math.ceil(dataLength/10);
				if(min_tick_interval==3)
				{
					min_tick_interval = 4;
				}
			}
			$.each(sortedData, function(k, v)
			{
				 var dt = new Date(k * 1000);
				var dte = new Date(tempcategories[cnt]);
				if(frequency!=undefined)
				{
					if(frequency=="daily")
					{
						categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()))+'');
					}
					else if(frequency=="weekly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getUTCFullYear(), next_dte.getUTCMonth(), next_dte.getUTCDate()-1)));
						}
						else
						{
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate())));
						}
					}
					else if(frequency=="monthly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							if(cnt!=0)
							{
								if(current_date.getUTCFullYear()!=dte.getUTCFullYear())
								{
									from_date = Highcharts.dateFormat('%b.%Y', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								
								}
								categories.push(from_date);
							}
							else
							{
								if(current_date.getUTCFullYear()!=dte.getUTCFullYear())
								{
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								
								}
								if(current_date.getUTCFullYear()!=next_dte.getUTCFullYear())
								{
									to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(next_dte.getUTCFullYear(), next_dte.getUTCMonth(), next_dte.getUTCDate()-1));
								}
								else
								{
									to_date = Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getUTCFullYear(), next_dte.getUTCMonth(), next_dte.getUTCDate()-1));
								}
								categories.push(from_date+' - '+to_date);
							}
						}
						else
						{
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							if(current_date.getUTCFullYear()!=dte.getUTCFullYear())
							{
								from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
							}
							else
							{
								from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								to_date = Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
								
							}
							categories.push(from_date+' - '+to_date);
						}
					}
					cnt++;
				}

			});

			// After loading and processing all data, highcharts are initialized
			// setting preferences and data to show
			chart = new Highcharts.Chart({
			    chart: {
			        renderTo: selector,
			        type: 'line',
			        marginRight: 130,
			        marginBottom: 50
			    },
			    title: {
			        text: name,
			        x: -20//center
			    },
			    xAxis: {
			        /*type: 'datetime',
			        dateTimeLabelFormats: {
			            //don't display the dummy year  month: '%e.%b',
			            year: '%b',
			            month: '%e.%b \'%y',
			        },
			        minTickInterval: min_interval,
			        startOfWeek: startOfWeek*/
			        categories: categories,
			        tickmarkPlacement: 'on',
			        minTickInterval: min_tick_interval,
			        tickWidth: 1
			    },
			    yAxis: {
			        title: {
			            text: yaxis_name
			        },
			        plotLines: [
			            {
			                value: 0,
			                width: 1,
			                color: '#808080'
			            }
			        ],
			        min: 0
			    },
			    //Tooltip to show details,
			    /*ongraphtooltip: {
			        formatter: function(){
			            return'<b>'+this.series.name+'</b><br/>'+Highcharts.dateFormat('%e.%b',
			            this.x)+': '+this.y.toFixed(2);
			        }
			    },*/
			    legend: {
			        layout: 'vertical',
			        align: 'right',
			        verticalAlign: 'top',
			        x: -10,
			        y: 100,
			        borderWidth: 0
			    },
			    //Sets the series of data to be shown in the graph,shows total 
			    //and pipeline
			    series: series,
			});
		});
	});
}

/**
 * Function to show funnel bsed on the data
 * <p>
 * Shows funnel
 * </p>
 * 
 * @param url - 
 *            to fetch json data inorder to render graph.
 * @param selector - 
 *            id or class of an element where charts should render.
 * @param name - 
 *            title of the chart.
 * @param show_loading
 * 				shows loading image
 */
function showFunnel(url, selector, name, show_loading)
{
	// Show loading image if required
	if(typeof show_loading === 'undefined')
	{
		// Old calls were not showing loading image..
	}
	else
		$('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");
	var chart;

	// Loads Highcharts plugin using setupCharts and sets up line chart in the
	// callback
	setupCharts(function()
	{

		// Loads statistics details from backend i.e.,[{closed
		// date:{total:value, pipeline: value},...]
		fetchReportData(url, function(data)
		{
			
			var funnel_data = [];
			
			$.each(data, function(i,v){
				
				// iterate through each data
				$.each(v, function(k1,v1){
					var each_data = [];
					each_data.push(k1, v1);
					funnel_data.push(each_data);
				});
				
			});
			
			console.log(funnel_data);
			
			chart = new Highcharts.Chart({
		        chart: {
		            type: 'funnel',
		            marginRight: 100,
		            renderTo: selector
		        },
		        title: {
		            text: name,
		            x: -50
		        },
		        plotOptions: {
		            series: {
		                dataLabels: {
		                    enabled: true,
		                    format: '<b>{point.name}</b> ({point.y:,.0f})',
		                    color: '#ccc',
		                    softConnector: true
		                },
		                neckWidth: '30%',
		                neckHeight: '25%',
		                
		                //-- Other available options
		                // height: pixels or percent
		                // width: pixels or percent
		                borderWidth: 0
		            }
		        },
		        tooltip : {
		        	 headerFormat: '<span style="font-size: 12px">{point.key}</span><br/>'
		        	},
		        legend: {
		            enabled: false
		        },
		        series: [{
		            name: 'Contacts',
		            data: funnel_data
		        }],
		        noData: {
									 style: {
									   
										fontSize: '14px',
										fontWeight : 'normal',
										color : '#98A6AD'
											 },
						},
		    });
			
		});
	});
}

 


/**
 * Shows Pie chart for tags of contacts,
 */
function pieTags(el, force_reload)
{
	var url = '/core/api/tags/stats';
	if(force_reload)
		url = url + '?reload=true';
	
	$("#pie-tags-chart", el).html(getRandomLoadingImg());
	
	pie(url, 'pie-tags-chart', '');
}

/**
 * Shows pie chart of milestones using high charts, called from deals controller
 * when deals collection is loaded.
 */
function pieMilestones()
{
	pie('/core/api/opportunity/stats/milestones?min=0&max=1543842319', 'pie-deals-chart', '');
}

/**
 * Shows pie chart of milestones using high charts, called from deals controller
 * when deals collection is loaded.
 */
function pieMilestonesByPipeline(pipeline_id)
{
	pie('/core/api/opportunity/stats/milestones/'+pipeline_id+'?min=0&max=1543842319', 'pie-deals-chart', '');
}

/**
 * Shows pie chart of tasks split by Type
 * @param params - params e.g. owner=<owner-id>, directly sent with url as GET request
 */
function pieTasks(params)
{
	pie('core/api/tasks/stats'+params,'pie-tasks-chart','');
}

/**
 * Shows line chart for deal statistics. Compares deal totals and pipeline with respect to 
 * time
 */
function dealsLineChart()
{
	var frequency=$( "#frequency:visible").val();
	showDealAreaSpline('core/api/opportunity/stats/details?min=0&max=1543842319', 'total-pipeline-chart', 'Monthly Deals', 'Total Value',frequency);
}

/**
 * Shows line chart for deal statistics. Compares deal totals and pipeline with respect to 
 * time
 */
function dealsLineChartByPipeline(pipeline_id)
{
	var frequency=$( "#frequency:visible").val();
	showDealAreaSpline('core/api/opportunity/stats/details/'+pipeline_id+'?min=0&max=1543842319', 'total-pipeline-chart', 'Monthly Revenue - All Deals', 'Total Value',frequency);
}

/**
 * Generic function to fetch data for graphs and act accordingly on plan limit error
 * @param url
 * @param successCallback
 */
 var reportDataRequest;
function fetchReportData(url, successCallback)
{
	// Hides error message
	$("#plan-limit-error").hide();
	
	// Fetches data
	reportDataRequest = $.getJSON(url, function(data)
			{	
				// Sends data to callback
				if(successCallback && typeof (successCallback) === "function")
					successCallback(data);
			}).error(function(response){
				
				// If error is not billing exception then it is returned
				if(response.status != 406)
					return;
				
				// If it is billing exception, then empty set is sent so page will not be showing loading on error message
				if(successCallback && typeof (successCallback) === "function")
					successCallback([]);
				
				// Show cause of error in saving
				$save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>'
						+ response.responseText
						+ '</i></p></small></div>');
				
				$("#plan-limit-error").html($save_info).show();
			});
}
/**
 * Function to build deal's line chart to compare total value and pipeline value.
 * <p>
 * Data obtained to render deal's line chart will be:
 * [{closed-date:{total:value, pipeline: value},...]
 * </p>
 * 
 * @param url - 
 *            to fetch json data inorder to render graph.
 * @param selector - 
 *            id or class of an element where charts should render.
 * @param name - 
 *            title of the chart.
 * @param yaxis_name - 
 *            name for y-axis
 * @param show_loading
 * 				shows loading image
 */
function showAreaSpline(url, selector, name, yaxis_name, show_loading)
{
	
	// Show loading image if required
	if(typeof show_loading === 'undefined')
	{
		// Old calls were not showing loading image..
	}
	else
		$('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");
	
	
	var chart;

	// Loads Highcharts plugin using setupCharts and sets up line chart in the
	// callback
	setupCharts(function()
	{
		if (reportDataRequest && reportDataRequest.readyState==1 && reportDataRequest.state()=="pending")
		{
			reportDataRequest.abort();
		}

		// Loads statistics details from backend i.e.,[{closed
		// date:{total:value, pipeline: value},...]
		fetchReportData(url, function(data)
		{

			// Categories are closed dates
			var categories = [];
			var tempcategories = [];
			var dataLength = 0;
			var min_tick_interval = 1;
			var frequency = $( "#frequency:visible").val();
			
			// Data with total and pipeline values
			var series;
			
			var sortedKeys = [];
			$.each(data,function(k,v){
				sortedKeys.push(k);
			});
			sortedKeys.sort();
			var sortedData = {};
			$.each(sortedKeys,function(index,value){
				sortedData[''+value] = data[''+value];
			});

			// Iterates through data and adds keys into
			// categories
			$.each(sortedData, function(k, v)
			{

				// Initializes series with names with the first
				// data point
				if (series == undefined)
				{
					var index = 0;
					series = [];
					$.each(v, function(k1, v1)
					{
						var series_data = {};
						series_data.name = k1;
						series_data.data = [];
						series[index++] = series_data;
					});
				}

				// Fill Data Values with series data
				$.each(v, function(k1, v1)
				{

					// Find series with the name k1 and to that,
					// push v1
					var series_data = find_series_with_name(series, k1);
					series_data.data.push(v1);
				});
				tempcategories.push(k*1000);
				dataLength++;

			});

			var cnt = 0;
			if(Math.ceil(dataLength/10)>0)
			{
				min_tick_interval = Math.ceil(dataLength/10);
				if(min_tick_interval==3)
				{
					min_tick_interval = 4;
				}
			}
			$.each(sortedData, function(k, v)
			{
				var dte = new Date(tempcategories[cnt]);
				if(frequency!=undefined)
				{
					if(frequency=="daily")
					{
						categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()))+'');
					}
					else if(frequency=="weekly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getUTCFullYear(), next_dte.getUTCMonth(), next_dte.getUTCDate()-1)));
						}
						else
						{
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate())));
						}
					}
					else if(frequency=="monthly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							if(cnt!=0)
							{
								if(current_date.getUTCFullYear()!=dte.getUTCFullYear())
								{
									from_date = Highcharts.dateFormat('%b.%Y', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								
								}
								categories.push(from_date);
							}
							else
							{
								if(current_date.getUTCFullYear()!=dte.getUTCFullYear())
								{
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								
								}
								if(current_date.getUTCFullYear()!=next_dte.getUTCFullYear())
								{
									to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(next_dte.getUTCFullYear(), next_dte.getUTCMonth(), next_dte.getUTCDate()-1));
								}
								else
								{
									to_date = Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getUTCFullYear(), next_dte.getUTCMonth(), next_dte.getUTCDate()-1));
								}
								categories.push(from_date+' - '+to_date);
							}
						}
						else
						{
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							if(current_date.getUTCFullYear()!=dte.getUTCFullYear())
							{
								from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
							}
							else
							{
								from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getUTCFullYear(), dte.getUTCMonth(), dte.getUTCDate()));
								to_date = Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
								
							}
							categories.push(from_date+' - '+to_date);
						}
					}
					cnt++;
				}

			});

			// After loading and processing all data, highcharts are initialized
			// setting preferences and data to show
			chart = new Highcharts.Chart({
			    chart: {
			        renderTo: selector,
			        type: 'areaspline',
			        marginRight: 130,
			        marginBottom: 50
			    },
			    title: {
			        text: name,
			        x: -20//center
			    },
			    xAxis: {
			        /*type: 'datetime',
			        dateTimeLabelFormats: {
			            //don't display the dummy year  month: '%e.%b',
			            year: '%b',
			            month: '%e.%b \'%y',
			        },
			        minTickInterval: min_interval,
			        startOfWeek: startOfWeek*/
			        categories: categories,
			        tickmarkPlacement: 'on',
			        minTickInterval: min_tick_interval,
			        tickWidth: 1
			    },
			    yAxis: {
			    	allowDecimals: false,
			        title: {
			            text: yaxis_name
			        },
			        plotLines: [
			            {
			                value: 0,
			                width: 1,
			                color: '#808080'
			            }
			        ],
			        min: 0
			    },
			    //Tooltip to show details,
			    /*ongraphtooltip: {
			        formatter: function(){
			            return'<b>'+this.series.name+'</b><br/>'+Highcharts.dateFormat('%e.%b',
			            this.x)+': '+this.y.toFixed(2);
			        }
			    },*/
			    legend: {
			        layout: 'vertical',
			        align: 'right',
			        verticalAlign: 'top',
			        x: -10,
			        y: 100,
			        borderWidth: 0
			    },
			    //Sets the series of data to be shown in the graph,shows total 
			    //and pipeline
			    series: series,
			  
			});
		});
	});
}
/**
 * Function to build deal's line chart to compare total value and pipeline value.
 * <p>
 * Data obtained to render deal's line chart will be:
 * [{closed-date:{total:value, pipeline: value},...]
 * </p>
 * 
 * @param url - 
 *            to fetch json data inorder to render graph.
 * @param selector - 
 *            id or class of an element where charts should render.
 * @param name - 
 *            title of the chart.
 * @param yaxis_name - 
 *            name for y-axis
 * @param show_loading
 * 				shows loading image
 */
function showDealAreaSpline(url, selector, name, yaxis_name, show_loading,frequency)
{
	
	// Show loading image if required
	if(typeof show_loading === 'undefined')
	{
		// Old calls were not showing loading image..
	}
	else
		$('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");
	
	
	var chart;

	// Loads Highcharts plugin using setupCharts and sets up line chart in the
	// callback
	setupCharts(function()
	{

		// Loads statistics details from backend i.e.,[{closed
		// date:{total:value, pipeline: value},...]
		fetchReportData(url, function(data)
		{
			// Categories are closed dates
			var categories = [];
			
			//The below code is commented as frequency is now sent as a parameter 
			//var frequency = $( "#frequency:visible").val();
			var tempcategories=[];
			// Data with total and pipeline values
			var series;
			
			var sortedKeys = [];
			$.each(data,function(k,v){
				sortedKeys.push(k);
			});
			sortedKeys.sort();
			var sortedData = {};
			$.each(sortedKeys,function(index,value){
				sortedData[''+value] = data[''+value];
			});

			var min_tick_interval = 1;
			var dataLength = 0;
			// Iterates through data and adds keys into
			// categories
			$.each(sortedData, function(k, v)
			{

				// Initializes series with names with the first
				// data point
				if (series == undefined)
				{
					var index = 0;
					series = [];
					$.each(v, function(k1, v1)
					{
						var series_data = {};
						series_data.name = k1;
						series_data.data = [];
						series[index++] = series_data;
					});
				}

				// Fill Data Values with series data
				$.each(v, function(k1, v1)
				{

					// Find series with the name k1 and to that,
					// push v1
					var series_data = find_series_with_name(series, k1);
					series_data.data.push(v1);
				});
				tempcategories.push(k*1000);
				dataLength++;
			});
				//
				var cnt=0;
				$.each(sortedData, function(k, v)
			{
				var dt = new Date(k * 1000);
				var dte = new Date(tempcategories[cnt]);
				if(selector=="revenue-chart"){

						if(frequency!=undefined)
				{
					if(frequency=="daily")
					{
						categories.push(Highcharts.dateFormat('%e.%b',Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+'');
					}
					else if(frequency=="weekly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getFullYear(), next_dte.getMonth(), next_dte.getDate()-1)));
						}
						else
						{
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate())));
						}
					}
					else if(frequency=="monthly" || frequency=="yearly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							if(cnt!=0)
							{
								if(frequency=="yearly")
									from_date = Highcharts.dateFormat('%Y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								else{
								if(current_date.getFullYear()!=dte.getFullYear())
								{
									from_date = Highcharts.dateFormat('%b.%Y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								
								}
							}
								categories.push(from_date);
							}
							else
							{
								var start_date=new Date(Date.parse($.trim($('#range').html().split("-")[0])).valueOf());
								if(current_date.getFullYear()!=dte.getFullYear())
								{
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								
								}
								//if(current_date.getFullYear()!=next_dte.getFullYear())
								
									to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(next_dte.getFullYear(), next_dte.getMonth(), next_dte.getDate()-1));
								
								categories.push(from_date+' - '+to_date);
							}
						}
						else
						{
							var current_date = new Date();
							var from_date ='';
							var start_date=new Date(Date.parse($.trim($('#range').html().split("-")[0])).valueOf());
							var to_date = '';
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							if(current_date.getFullYear()!=dte.getFullYear())
							{
								if(cnt==0)
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								else
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
							
								to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
							}
							else
							{
								if(cnt==0)
								  from_date = Highcharts.dateFormat('%e.%b', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								else
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								
								to_date = Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
								
							}
							categories.push(from_date+' - '+to_date);
						}
					}
					else if(frequency=="Quarterly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							if(cnt!=0)
							{
								if(current_date.getFullYear()!=dte.getFullYear())
								{
									categories.push(Highcharts.dateFormat('%b.%y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+' - '+Highcharts.dateFormat('%b.%y', Date.UTC(next_dte.getFullYear(), next_dte.getMonth()-1, next_dte.getDate())));
								}
								else
								{
									categories.push(Highcharts.dateFormat('%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+' - '+Highcharts.dateFormat('%b', Date.UTC(next_dte.getFullYear(), next_dte.getMonth()-1, next_dte.getDate())));
	
								}
								
							}
							else
							{
								var start_date=new Date(Date.parse($.trim($('#range').html().split("-")[0])).valueOf());
								if(current_date.getFullYear()!=dte.getFullYear())
								{
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								
								}
								if(current_date.getFullYear()!=next_dte.getFullYear())
								{
									to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(next_dte.getFullYear(), next_dte.getMonth(), next_dte.getDate()-1));
								}
								else
								{
									to_date = Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getFullYear(), next_dte.getMonth(), next_dte.getDate()-1));
								}
								categories.push(from_date+' - '+to_date);
							}
							
									}
						else
						{
							var current_date = new Date();
							var from_date ='';
							var start_date=new Date(Date.parse($.trim($('#range').html().split("-")[0])).valueOf());
							var to_date = '';
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							if(current_date.getFullYear()!=dte.getFullYear())
							{
								if(cnt==0)
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								else
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
							
								to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
							}
							else
							{
								if(cnt==0)
								  from_date = Highcharts.dateFormat('%e.%b', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								else
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								
								to_date = Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
								
							}
							categories.push(from_date+' - '+to_date);
						}
					}

					cnt++;
				}
				}
					//categories.push(Highcharts.dateFormat('%e.%b',Date.UTC(dt.getFullYear(), dt.getMonth(), dt.getDate()))+'');
				else
					categories.push(Highcharts.dateFormat('%b.%Y',Date.UTC(dt.getFullYear(), dt.getMonth(), dt.getDate()))+'');
				//dataLength++;
			});

			if(Math.ceil((dataLength-1)/10)>0)
			{
				min_tick_interval = Math.ceil(dataLength/10);
				if(min_tick_interval==3)
				{
					min_tick_interval = 4;
				}
			}

			// After loading and processing all data, highcharts are initialized
			// setting preferences and data to show
			chart = new Highcharts.Chart({
			    chart: {
			        renderTo: selector,
			        type: 'areaspline',
			        marginRight: 130,
			        marginBottom: 50
			    },
			    title: {
			        text: name,
			        x: -20,//center
			        style : {
						textTransform : 'normal'
					}
			    },
			    xAxis: {
			        //type: 'datetime',
			        /*dateTimeLabelFormats: {
			            //don't display the dummy year  month: '%e.%b',
			            year: '%b'
			        },*/
			        //minTickInterval: 24 * 3600 * 1000
			        categories: categories,
			        tickmarkPlacement: 'on',
			        minTickInterval : min_tick_interval
			    },
			    yAxis: {
			        title: {
			            text: yaxis_name
			        },
			        plotLines: [
			            {
			                value: 0,
			                width: 1,
			                color: '#808080'
			            }
			        ],
			        min: 0
			    },
			    //Tooltip to show details,
			    tooltip: {
	    			formatter: function(){
		        		return '<div>' + 
		        		        '<div class="p-n">'+this.x+'</div>' + 
		        		        '<div class="p-n"><font color='+this.series.color+'>'+this.series.name+'</font> : '+getCurrencySymbolForCharts()+''+getNumberWithCommasForCharts(this.y)+'</div>' +
		        		        '</div>';
		        	},
		        	useHTML: true
	        	},
			    legend: {
			        layout: 'vertical',
			        align: 'right',
			        verticalAlign: 'top',
			        x: -10,
			        y: 100,
			        borderWidth: 0
			    },
			    //Sets the series of data to be shown in the graph,shows total 
			    //and pipeline
			    series: series,
			    lang: {
            				noData: "No Deals Found"
        				},
        					noData: {
           								style: {
             								
               									fontSize: '14px',
               									fontWeight : 'normal',
               									color : '#98A6AD'

      	     									 },
      	     							 position :{
               									 x : 60,
               									 y: 5
           									 },
       								 }
			});
		});
	});
}

/** get the symbol for currency to be used in various charts **/
function getCurrencySymbolForCharts(){
	var value = ((CURRENT_USER_PREFS.currency != null) ? CURRENT_USER_PREFS.currency : "USD-$");
	var symbol = ((value.length < 4) ? "$" : value.substring(4, value.length));
	return symbol;
}

/** get the comma separated number for charts **/
function getNumberWithCommasForCharts(value){
	value = parseFloat(value);
	value = Math.round(value);
	if(value==0)
		return value;

	if (value)
		return value.toFixed(2).toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
}
function showDealsGrowthgraph(url, selector, name, yaxis_name, show_loading)
{
    
    // Show loading image if required
    if(typeof show_loading === 'undefined')
    {
        // Old calls were not showing loading image..
    }
    else
        $('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");
    
    
    var chart;

    // Loads Highcharts plugin using setupCharts and sets up line chart in the
    // callback
    setupCharts(function()
    {

        // Loads statistics details from backend 
        fetchReportData(url, function(data)
        {

            // Categories are created time
            var categories = [];
            var tempcategories=[];
            var type = $( "#type:visible").val();
            var frequency= $("#frequency:visible").val();
            // Data with deals
            var series;
            var AllData=[];
            var sortedKeys = [];
            $.each(data,function(k,v){
                sortedKeys.push(k);
            });
            sortedKeys.sort();
            var sortedData = {};
            $.each(sortedKeys,function(index,value){
                sortedData[''+value] = data[''+value];
            });

            var min_tick_interval = 1;
            var dataLength = 0;
            // Iterates through data and adds keys into
            // categories
            $.each(sortedData, function(k, v)
            {
            	var totalData=[];
            	totalData.push(k);
            	var total=0;
                // Initializes series with names with the first
                // data point
                if (series == undefined)
                {
                    var index = 0;
                    series = []; 
                    $.each(v, function(k1, v1)
                    {
                    	
                        var series_data = {};
                        series_data.name = k1;
                        series_data.data = [];
                        series[index++] = series_data;
                        //totalData.push(total);
                    });
                
                }


                // Fill Data Values with series data
                $.each(v, function(k1, v1)
                {
                	total=total+v1;
                    // Find series with the name k1 and to that,
                    // push v1
                    var series_data = find_series_with_name(series, k1);
                    series_data.data.push(v1);
                });
                     totalData.push(total);
                tempcategories.push(k*1000);
				dataLength++;
				AllData.push(totalData);
			});
				
				var cnt=0;
				$.each(sortedData, function(k, v)
			{
                dateRangeonXaxis(tempcategories,categories,frequency,dataLength,cnt);
                 cnt++;
            });

            if(Math.ceil((dataLength-1)/10)>0)
            {
                min_tick_interval = Math.ceil(dataLength/10);
                if(min_tick_interval==3)
                {
                    min_tick_interval = 4;
                }
            }
            if(series==undefined)
            	 chartRenderforIncoming(selector,categories,name,yaxis_name,min_tick_interval,type,series,AllData);
            else
            {
            $.ajax({ type : 'GET', url : '/core/api/categories?entity_type=DEAL_SOURCE', dataType : 'json',
            success: function(data){
                $.each(data,function(index,deals){
                    for(var i=0;i<series.length;i++){
                        if(series[i].name=="0")
                                series[i].name="Unknown";
                        else if(deals.id==series[i].name){
                            series[i].name=deals.label;
                        }
                            
                    }
                });
                chartRenderforIncoming(selector,categories,name,yaxis_name,min_tick_interval,type,series,AllData);
                } 
            });
        	}


            // After loading and processing all data, highcharts are initialized
            // setting preferences and data to show
            
        });
    });
}

function chartRenderforIncoming(selector,categories,name,yaxis_name,min_tick_interval,type,series,AllData,x_pos,y_pos,base_model){
	if(x_pos == undefined)
		x_pos = -10;
	if(y_pos == undefined)
		y_pos = 100; 
	chart = new Highcharts.Chart({
                chart: {
                    renderTo: selector,
                    type: 'area',
                    marginRight: 50,
                    marginBottom: 50,
                    events: {
			   		load: function(){
			   			console.log("load");
			   			if(base_model!=undefined)
			   			portlet_utility.toggle_chart_legends(this, base_model);
			   		}, redraw : function(){
			   			console.log("redraw");
			   			if(base_model!=undefined)
			   			portlet_utility.toggle_chart_legends(this, base_model);
			   		}
			   },
                },
                
                colors: ['#7266ba','#23b7e5','#27c24c','#fad733','#f05050','#FF9900','#7AF168','#167F80','#0560A2','#D3E6C7'],
                title: {
                    text: name,
                    x: -20,//center
                    style : {
                        textTransform : 'normal'
                    }
                },
                xAxis: {
                    categories: categories,
                    tickmarkPlacement: 'on',
                    minTickInterval : min_tick_interval
                },
                yAxis: {
                	allowDecimals: false,
                    title: {
                        text: yaxis_name
                    },
                    plotLines: [
                        {
                            value: 0,
                            width: 1,
                            color: '#808080'
                        }
                    ],
                    min: 0
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'top',
                    x: x_pos,
                    y: y_pos,
                    borderWidth: 0,
                    labelFormatter : function() {
														if (this.name.length > 12) {
															return this.name
																	.slice(0,
																			12)
																	+ '...';
														} else {
															return this.name;
														}
													}
                },
                 plotOptions: {
                    area: {
                stacking: 'normal',
                lineColor: '#666666',
                lineWidth: 1,
                marker: {
                    lineWidth: 1,
                    lineColor: '#666666',
                    fillColor: null
                  }
                 }
                  },
                //Tooltip to show details,
                tooltip: {
                    formatter: function(){
                        if(type=="deals")
                                {
                        return '<div>' + 
                                '<div class="p-n">'+this.x+'</div>' + 
                                '<div class="p-n text-cap"><font color='+this.series.color+'>'+this.series.name+'</font> : '+getNumberWithCommasForCharts(this.y)+'</div>' +
                                '</div>'+
                                '<div class="p-n">Total : '+getNumberWithCommasForCharts(AllData[this.point.x][1])+'</div>';
                            }
                        else
                        {
                        return '<div>' + 
                                '<div class="p-n">'+this.x+'</div>' + 
                                '<div class="p-n"><font color='+this.series.color+'>'+this.series.name+'</font> : '+getCurrencySymbolForCharts()+''+getNumberWithCommasForCharts(this.y)+'</div>' +
                                '</div>'+
                                 '<div class="p-n">Total : '+getCurrencySymbolForCharts()+''+getNumberWithCommasForCharts(AllData[this.point.x][1])+'</div>';;
                            }
                    },
                    useHTML: true
                },
                  lang: {
            				noData: "No Deals Found"
        				},
        					noData: {
           								style: {
             								 
               									fontSize: '14px',
               									fontWeight : 'normal',
        										color : '#98A6AD'
      	     									 },
      	     							 position :{
               									 x : 60,
               									 y: 5
           									 },
       								 },
                //Sets the series of data to be shown in the graph,shows total 
                //and pipeline
                series: series,
          /*      exporting : {
						    	buttons: {
			   						  exportButton: {
       					 menuItems: null,
       					 onclick: function () { this.downloadCSV(); }
       					 
       					},
       					printButton: {
       						enabled : false
       					}
	       		
			       		
			       				}
						    },*/
            });
}
function pieforReports(url, selector, name,show_loading, is_lost_analysis)
{

	    if(typeof show_loading === 'undefined')
    {
        // Old calls were not showing loading image..
    }
    else
        $('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");

	var chart;
	var AllData=[];
	var frequency = $( "#frequency:visible").val();
	setupCharts(function()
	{

		fetchReportData(
						url,
						function(data)
						{
							// Convert into labels and data as required by
							// Highcharts
							var pieData = [];
							var total = 0;
							var count = 0;

							// Iterates through data and calculate total number
							$.each(data, function(k, v)
							{
								var totalData=[];
								totalData.push(k);
								totalData.push(v.count);
								totalData.push(v.total);
								AllData.push(totalData);
								if(frequency=="Revenue")
								total+=v.total;	
								else
								total += v.count;
								count ++;
							});

							console.log(data,total);
							// Iterates through data, gets each tag, count and
							// calculate
							// percentage of each tag
							$.each(data, function(k, v)
							{
								var item = [];

								
								// Push tag name in to array
								item.push(k);

								// Push percentage of current tag in to array
								if(frequency=="Revenue")
									item.push(v.total/ total * 100);
								else
								item.push(v.count/ total * 100);
								pieData.push(item);
							})
							console.log(pieData);
							var animation = count > 20 ? false : true;
							var url_path;
							if(selector=="lossreasonpie-chart" || selector == "lossreasonpie-chart-users" || is_lost_analysis)
								url_path='/core/api/categories?entity_type=DEAL_LOST_REASON';
							else
								url_path='/core/api/categories?entity_type=DEAL_SOURCE';
							if(pieData!=undefined && pieData.length==0){
								createAPieChart(selector, name, animation, AllData, pieData);
							}
							else{

							  $.ajax({ type : 'GET', url : url_path, dataType : 'json',
          				  success: function(data){
                			$.each(data,function(index,deals){
                   				 for(var i=0;i<pieData.length;i++){
                     			   if(pieData[i][0]=="0")
                        	      		 pieData[i][0]="Unknown";
                        		else if(deals.id==pieData[i][0]){
                            		pieData[i][0]=deals.label;
                        		}
                        		 createAPieChart(selector, name, animation, AllData, pieData);
                            
                  		  }
                			});

            	    }		
            	     });
					}
						});
	});
	}


	function createAPieChart(selector, name, animation, AllData, pieData){
		var pieSize='90%';
if(selector == 'lossreasonpie-chart-users'){
	pieSize='50%';
}
		// Initializes Highcharts,
	chart = new Highcharts.Chart(
			{
				chart : { renderTo : selector, type : 'pie', plotBackgroundColor : null, plotBorderWidth : null, plotShadow : false,
					marginBottom:30, marginTop:20, marginLeft: 70, marginRight: 70},
				colors: ['#7266ba','#23b7e5','#27c24c','#fad733','#f05050','#FF9900','#7AF168','#167F80','#0560A2','#D3E6C7'],
				title : { text : name },
				 tooltip: {
				formatter:  function(){
						return  '<div>' + 
                              
                                '<div class="p-n">'+this.series.name+'s: <b>'+getNumberWithCommasForCharts(AllData[this.point.x][1])+'</b></div>' +
                                '</div>'+
                                '<div class="p-n">Total Value: <b>'+getCurrencySymbolForCharts()+''+AllData[this.point.x][2].toLocaleString()+'</b></div>';
                        
						},
							  shared: true,
								  useHTML: true,
							 borderWidth : 1,
						backgroundColor : '#313030',
							shadow : false,
						borderColor: '#000',
					borderRadius : 3,
					style : {
					color : '#EFEFEF'
				}
					 },
				legend : { itemWidth : 75, },
				plotOptions : {
					pie : {
						 animation: animation,
						allowPointSelect : true,
						cursor : 'pointer',
						borderWidth : 0,
						dataLabels : { enabled : true,useHTML: true,
							formatter : function()
							{
								return 	'<div class="text-center text-cap"><span style="color:'+this.point.color+';display:block"><b>'+this.point.name+'</b></span>' +
    			'<span style="color:'+this.point.color+'"><b>'+Math.round(this.point.percentage)+'%</b></span></div>';
							}, distance : 25 }, showInLegend : false,size:pieSize,innerSize :'65%',shadow : false, borderWidth : 0 },
					series : { events : { mouseOver : function()
					{
						$('.tooltip-default-message').hide();
					}, mouseOut : function(e)
					{
						$('.tooltip-default-message').show();
					} },
					borderWidth : 0 } },

				series : [
					{ type : 'pie', name : 'Deal', data : pieData, startAngle : 90 }
				], 

				 lang: {
					noData: "No Deals Found"
					},
					 noData: {
									 style: {
									   
										fontSize: '14px',
										fontWeight : 'normal',
										color : '#98A6AD'
											 },
											 position :{
               									 y: 5
           									 },
								 }
				 } );


	}

	/* x axis label categorization based on frequency */
	function dateRangeonXaxis(tempcategories,categories,frequency,dataLength,cnt)
	{
		var dte = new Date(tempcategories[cnt]);

						if(frequency=="daily")
					{
						categories.push(Highcharts.dateFormat('%e.%b',Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+'');
					}
				else if(frequency=="weekly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(next_dte.getFullYear(), next_dte.getMonth(), next_dte.getDate()-1)));
						}
						else
						{
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							categories.push(Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()))+' - '+Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate())));
						}
					}
				else if(frequency=="monthly")
					{
						if(cnt!=dataLength-1)
						{
							var next_dte = new Date(tempcategories[cnt+1]);
							var current_date = new Date();
							var from_date = '';
							var to_date = '';
							if(cnt!=0)
							{
								if(current_date.getFullYear()!=dte.getFullYear())
								{
									from_date = Highcharts.dateFormat('%b.%Y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								
								}
							
								categories.push(from_date);
							}
							else
							{
								var start_date=new Date(Date.parse($.trim($('#range').html().split("-")[0])).valueOf());
								if(current_date.getFullYear()!=dte.getFullYear())
								{
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								}
								else
								{
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								
								}
								//if(current_date.getFullYear()!=next_dte.getFullYear())
								
									to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(next_dte.getFullYear(), next_dte.getMonth(), next_dte.getDate()-1));
								
								categories.push(from_date+' - '+to_date);
							}
						}
						else
						{
							var current_date = new Date();
							var from_date ='';
							var start_date=new Date(Date.parse($.trim($('#range').html().split("-")[0])).valueOf());
							var to_date = '';
							var end_date = new Date(Date.parse($.trim($('#range').html().split("-")[1])).valueOf());
							if(current_date.getFullYear()!=dte.getFullYear())
							{
								if(cnt==0)
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								else
									from_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
							
								to_date = Highcharts.dateFormat('%e.%b.%Y', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
							}
							else
							{
								if(cnt==0)
								  from_date = Highcharts.dateFormat('%e.%b', Date.UTC(start_date.getFullYear(), start_date.getMonth(), start_date.getDate()));
								else
									from_date = Highcharts.dateFormat('%e.%b', Date.UTC(dte.getFullYear(), dte.getMonth(), dte.getDate()));
								
								to_date = Highcharts.dateFormat('%e.%b', Date.UTC(end_date.getFullYear(), end_date.getMonth(), end_date.getDate()));
								
							}
							categories.push(from_date+' - '+to_date);
						}
					}
	}



function showGuage(selector, data,goal_data,name,show_loading)
{
	// Show loading image if required
	if(typeof show_loading === 'undefined')
	{
		// Old calls were not showing loading image..
	}
	else
		$('#' + selector).html("<div class='text-center v-middle opa-half'><img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");

	var chart;
	var series=[];
	if(data>goal_data)
		series[0]=goal_data;
		else
	series[0]=data;
		setupCharts(function()
		{
			
			chart = new Highcharts.Chart({
		      
						chart: {
            type: 'solidgauge',
		            renderTo: selector,
		            marginBottom:50

        },

        title: null,

        pane: {
            center: ['50%', '85%'],
            size: '100%',
            startAngle: -90,
            endAngle: 90,
            background: {
                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || '#EEE',
                innerRadius: '60%',
                outerRadius: '100%',
                shape: 'arc'
            }
        },

        tooltip: {
        	formatter : function(){
           if(selector=='amount_goals_chart')

           	return  '<div>' + 
                              
                                '<div class="p-n">Revenue: <b>'+getCurrencySymbolForCharts()+''+getNumberWithCommasForCharts(data)+'</b></div>' +
                                '</div>'+
                                '<div class="p-n">Goals set: <b>'+getCurrencySymbolForCharts()+''+getNumberWithCommasForCharts(goal_data)+'</b></div>';
                  else

                			return		'<div>' + 
                              
                                '<div class="p-n">Won Deals: <b>'+getNumberWithCommasForCharts(data)+'</b></div>' +
                                '</div>'+
                                '<div class="p-n">Goals set: <b>'+getNumberWithCommasForCharts(goal_data)+'</b></div>';
                     	},
                     	useHTML : true,
        },

        // the value axis
        yAxis: {
 
            lineWidth: 0,
            minorTickInterval: null,
            tickPixelInterval: null,
            tickInterval : goal_data,
            tickWidth: 0,
            maxColor : "#000000",
            title: {
                y: -150,
                text : name 

            },
            labels: {
                y: 16
            },
                min: 0,
            max: goal_data,

             gridLineWidth: 0
        },

        plotOptions: {
            series: {
                //color: '#FF0000',
               // cursor: 'pointer',
                     dataLabels: {
                			enabled : true,
                			useHTML : true,
                			borderWidth : 0,
                			y:-60,
                			formatter : function()
                			{
                				var s=(data/goal_data)*100;
                				if(s>100)
                					s=100;
                				var element='<div class="text-center m-b-lg" style="font-size:20px">'+Math.round(s)+'%</div>'
                				if(selector=='amount_goals_chart')
                						element=element+ '<div class="text-center"><span style="font-size:25px;color:' +
                    	 'black' + '">'+getCurrencySymbolForCharts()+''+getNumberWithCommasForCharts(data)+'</span></div>';
                					else
                				element=element+ '<div class="text-center"><span style="font-size:25px;color:' +
                     		'black' + '">'+getNumberWithCommasForCharts(data)+'</span></div>';
                     		return element;
                			}
            },
        },
        },

             series: [{
            name: 'Goal',
            data: series,
       


        }]
    });
		    });
}

function showFunnelForConversion(selector, name, show_loading,v)
{
	
	setupCharts(function()
	{

			
			var funnel_data = [];
			

			
					$.each(v,function(k1,v1){
					var each_data = [];
					each_data.push(k1, v1);
					funnel_data.push(each_data);
				});
				
			
			console.log(funnel_data);
			
			chart = new Highcharts.Chart({
		        chart: {
		            type: 'funnel',
		            marginRight: 100,
		            renderTo: selector
		        },
		        title: {
		            text: name,
		            x: -50
		        },
		        plotOptions: {
		            series: {
		                dataLabels: {
		                    enabled: true,
		                    format: '<b>{point.name}</b> ({point.y:,.0f})',
		                    color: '#ccc',
		                    softConnector: true
		                },
		                neckWidth: '30%',
		                neckHeight: '25%',
		                
		                //-- Other available options
		                // height: pixels or percent
		                // width: pixels or percent
		                borderWidth: 0
		            }
		        },
		        tooltip : {
		        	 formatter:  function(){
		        	 		var percent=0;
		        	 		if(this.point.x==0)
		        	 				percent=100;
		        	 		if(this.point.x!=0 && funnel_data[this.point.x-1][1]!=0)
		        	 			percent=(funnel_data[this.point.x][1]/funnel_data[this.point.x-1][1])*100;
						return  '<div>' + 
                              	'<div class="p-n">'+this.point.name+'</div>'+
                                '<div class="p-n">'+this.series.name+': '+getNumberWithCommasForCharts(this.point.y)+'</div>' +
                                
                                '</div>'+
                                '<div class="p-n">'+Math.round(percent)+'%</div>';
                               
                        
						},
							  shared: true,
								  useHTML: true,

		        	 //headerFormat: '<span style="font-size: 12px">{point.key}</span><br/>'
		        	},
		        legend: {
		            enabled: false
		        },
		        series: [{
		            name: 'Deals',
		            data: funnel_data
		        }],
		        noData: {
									 style: {
									   
										fontSize: '14px',
										fontWeight : 'normal',
										color : '#98A6AD'
											 },
						},
		    });
			
		});
}

function BubbleChart(url, selector, name,show_loading)
	{
		// Show loading image if required
	var chart;

	// Loads Highcharts plugin using setupCharts and sets up line chart in the
	// callback
	setupCharts(function()
	{
		
		// Loads statistics details from backend i.e.,[{closed
		// date:{total:value, pipeline: value},...]
		fetchReportData(url, function(data)
		{

			var symbols=['circle','triangle','square','diamond','triangle-down'];
			// Categories are closed dates
			var categories ;
			var tempcategories = [];
			var dataLength = 0;
			var min_tick_interval = 1;
			
			// Data with total and pipeline values
			var series=[];
			var Data=[];
			var index=0;
			var actual_data=[];
			
			var sortedKeys = [];
			$.each(data,function(k,v){
				actual_data.push(v);
			$.each(v,function(k1,v1){
				sortedKeys.push(k1);
			});
		});
			sortedKeys.sort();
			var sortedData = {};
			$.each(sortedKeys,function(index,value){
				$.each(actual_data,function(index1,val){
					if(val[''+value]!=undefined)
				sortedData[''+value] = val[''+value];
			});

			});

			// Iterates through data and adds keys into
			// categories
			$.each(sortedData, function(k, v)
			{
					
				// Initializes series with names with the first
				// data point
				
					//var index = 0;
					//series = [];
					//series_data.name = k;
					$.each(v, function(k1, v1)
					{

						var series_data = {};
						var extra_data={};
						extra_data.name = k;
						extra_data.data = [];
						series_data.name = k;
						series_data.data = [];
						series[index] = series_data;
						Data[index]=extra_data;
						index++;
					});

				// Fill Data Values with series data

					// Find series with the name k1 and to that,
					// push v1
					$.each(v, function(k1, v1)
					{
						var total=0;
						var value;
						var i=0;
						$.each(v1, function(k2, v2)
					{
					var series_data = find_series_with_name(series, k);
					var extra=find_series_with_name(Data, k);
					extra.data.push(v2);
					var percent='';
				 		total=total+v2;
				 		if(i==0){
				 				if(v2!=0)
				 				percent=100;
				 				else
				 					percent=0;
				 				
				 				
				 			}
				 			else
				 			{
				 				if(value!=0)
				 				percent=(v2*100)/value;
				 				else
				 					percent=0;
				 			}
				 			value=v2;
				 				
				 		i++;
					series_data.data.push(percent);
				});
					});

				if(categories==undefined){
					categories=[];
				$.each(v, function(k1, v1)
				{
					$.each(v1,function(k2,v2){
						categories.push(k2);
					});
				});
			}
			});

				if(categories!=undefined){
			if(Math.ceil(categories.length/10)>0)
			{
				min_tick_interval = Math.ceil(categories.length/10);
				if(min_tick_interval==3)
				{
					min_tick_interval = 4;
				}
			}
			}
			/*	$.each(series, function(k1, v1)
					{
						v1.name=v1.name.split("_")[0];
					});

				$.each(Data, function(k1, v1)
					{
						v1.name=v1.name.split("_")[0];
					});*/
			// After loading and processing all data, highcharts are initialized
			// setting preferences and data to show
			chart = new Highcharts.Chart({
			    chart: {
			        renderTo: selector,
			        type: 'scatter',
			        marginRight: 130,
			        marginBottom: 80,
			        inverted : true,
			    },
			    title: {
			        text: name,
			        x: -20//center
			    },
			     plotOptions: {
            series: {
                marker: {
                    radius: 6,
                }
            }
        },
			    xAxis: {
			    	//offset: 10,
			    	lineWidth : 2,

			        categories: categories,
			        tickmarkPlacement: 'on',
			       // minTickInterval: min_tick_interval,
			        tickWidth: 1,
			              labels: {
			              	x:-20,
				    formatter: function () {
					    var text = this.value;
					    //if(categories.length>10)
						    var formatted = text.length > 9 ? text.substring(0, 9) + '...' : text;
						/*else
							formatted=text;*/

                        return '<div style="width:50px; overflow:hidden" title="' + text + '">' + formatted + '</div>';
				    },
				    /*style: {
					    width: '10px'
				    },*/
				    useHTML: true
			}
			    },
			    yAxis: {

			        title: {
			            text: "Percentage"
			        },
			        plotLines: [
			            {
			                value: 0,
			                width: 1,
			                color: '#808080'
			            }
			        ],
			        min: 0,
			        max:100
			    },
			    tooltip :{
			    		useHTML : true,
			    		formatter:  function(){
			    			var that=this;
			    			var d;
						$.each(Data,function(i,v){
							if(Data[i]["name"]==that.series.name)
							{
								d= Data[i];
							return false;
						}
						});
						var base_percent=0;
						if(d["data"][0]!=0)
						base_percent=(d["data"][this.point.x]/d["data"][0])*100;
			    				
						return  '<div>' + 
                              	'<div class="p-n">'+this.x+'</div>'+
                                '<div class="p-n text-cap"><font color='+this.series.color+'>'+this.series.name+'</font>: <b>'+Math.round(this.point.y)+'%</b></div>' +
                                
                                '<div class="p-n">'+Math.round(base_percent)+'% of <b>'+categories[0]+'</b></div></div>' +
                                '<div class="p-n">Deals: <b>'+getNumberWithCommasForCharts(d["data"][this.point.x])+'</b></div>';
                        
						}
			    },

			    legend: {
			        layout: 'horizontal',
			        align: 'center',
			        verticalAlign: 'bottom',
			        x: -10,
			       // y: 12,
			        borderWidth: 0,
			        
			    },
			    //Sets the series of data to be shown in the graph,shows total 
			    //and pipeline
			    series: series,
			});
		});
	});
	}
$(function(){
	
   $("#choose-avatar-modal").on('click', '.thumb-avatar-wrapper', function(e) {
	
			e.preventDefault();
	
			var modalId = $(this).closest('.modal').attr("id");
	
			var source = $(this).find("img").attr("src");
	
			$(this).closest(".modal-body").find("input[type='hidden']").val(source);
	
			$(this).closest('.modal').modal('hide');
			$(this).trigger('choose-image')
	});
	
	$("#choose-avatar-modal").on('choose-image', '.thumb-avatar-wrapper', function(e) {
	
			//var selectedSource = $(this).closest('tbody').find("input[type='hidden']").val();
			var selectedSource = $(this).attr('src');
			
			if(selectedSource)
			{
				$("input[name='custom_image']").val(selectedSource);
				
				setImageURL(selectedSource);
				
				/*var modalId = $(this).attr("id");
				$("a[href='#" + modalId + "']").find("img").attr('src', selectedSource);*/
				//$(".preview-avatar").attr("src", selectedSource);
			}
	});
	$("#content").on('choose-image', '#choose-avatar-test', function(e) {
		$("#choose-avatar-modal").closest('.modal').modal('hide');
		var selectedSource = $(this).find('tbody').find("input[type='hidden']").val();
		
		if(selectedSource)
		{
			$("input[name='custom_image']").val(selectedSource);
			
			setImageURL(selectedSource);
			
			/*var modalId = $(this).attr("id");
			$("a[href='#" + modalId + "']").find("img").attr('src', selectedSource);*/
			//$(".preview-avatar").attr("src", selectedSource);
		}
});
	
	$('#choose-avatar-modal').on('show.bs.modal',function (e) {
		$('#choose-avatar-modal').html($('#choose-avatar-test').html());
	});

})

// selects default avatars randomly
function choose_random_avatar()
{
	var avatar = ["https://d1gwclp1pmzk26.cloudfront.net/img/gravatar/86.png",
	              "https://d1gwclp1pmzk26.cloudfront.net/img/gravatar/72.png",
	              "https://d1gwclp1pmzk26.cloudfront.net/img/gravatar/17.png",
	              "https://d1gwclp1pmzk26.cloudfront.net/img/gravatar/5.png",
	              "https://d1gwclp1pmzk26.cloudfront.net/img/gravatar/3.png"];

	var random = Math.floor((Math.random() * avatar.length));

	return avatar[random];
}
$("body").on('click', '.agent-popup-alert-dismiss', function(event)
{
	_agile_set_prefs('CHORME_EXTENSION_DOWNLOAD', false);
	$("#chrome_extension").remove();
});

/**
 * Chrome extension id
 */
/*
 * var Chrome_Extension_Id = "eofoblinhpjfhkjlfckmeidagfogclib";
 * 
 *//**
	 * Chrome extension resource path to detect extension
	 */
/*
 * var Chrome_Extension_Accesible_Resource = "/js/xhr_override.js";
 * 
 *//**
	 * Chrome extension webstore url
	 */
/*
 * var Chrome_Extension_Webstore_Url =
 * "https://chrome.google.com/webstore/detail/" + Chrome_Extension_Id;
 * 
 *//**
	 * Detect chrome extension on load
	 */

/*
 * $(function() { console.log("**chrome extension**");
 * 
 * var chrome = window.chrome || {}; console.log("chrome: " + chrome); // Check
 * chrome browser if (!chrome.app || !chrome.webstore) { console.log("***Its not
 * chrome***") return false; } else { // Check forincognito mode var fs =
 * window.RequestFileSystem || window.webkitRequestFileSystem; if (!fs) {
 * console.log("check failed?"); return false; } else { fs(window.TEMPORARY,
 * 100, function(fs) { console.log("it does not seem like you are in incognito
 * mode"); // After clicking on logout, erase cookie to show notification //
 * after // // re-login about chrome extension if not install.
 * $('a').click(function(event) { var herfLogout = $(this).attr("href"); if
 * (herfLogout == "/login") { // erasefield
 * 
 * _agile_delete_prefs("agile_chrome_extension"); } });
 * 
 * console.log("_agile_get_prefs: " + _agile_get_prefs("agile_chrome_extension") + " " +
 * _agile_get_prefs("prevent_extension_request")); // Read cookie to notify once per
 * session if (_agile_get_prefs("agile_chrome_extension") ||
 * _agile_get_prefs("prevent_extension_request")) { console.log("return now"); return; } //
 * Detect extension Detect_Chrome_Extension(Toggle_Extension_Request_Ui); },
 * function(err) { console.log("it seems like you are in incognito mode");
 * return false; }); } } });
 * 
 *//**
	 * Detect chrome extension by chechking element added in page from extension
	 */
/*
 * 
 * function Detect_Chrome_Extension(callback) { console.log("In
 * Detect_Chrome_Extension");
 * 
 * if (document.getElementById('agilecrm_extension')) { console.log("crome
 * extension installed."); if (callback) callback(true); } else {
 * console.log("crome extension is not installed."); // Create visit type cookie
 * to notify once per session // _agile_set_prefs("agile_chrome_extension",
 * "notified");
 * 
 * if (callback) callback(false);
 * 
 * Initialize_Chrome_Webstore_events(); } }
 * 
 *//**
	 * Toggle extension installer UI
	 * 
	 * @param hide
	 */
/*
 * 
 * function Toggle_Extension_Request_Ui(hide) { console.log("in
 * Toggle_Extension_Request_Ui:" + hide);
 * 
 * if ($("#chrome_extension").length >= 1) { $("#chrome_extension").remove(); //
 * toggle_navbar_position("slide_up"); } // true, extension installed if (hide)
 * return;
 * 
 * $("body").append(getTemplate("chrome-extension", {})); //
 * toggle_navbar_position("slide_down"); }
 * 
 * function toggle_navbar_position(positionToChange) {
 * console.log("intoggle_navbar_position: " + positionToChange);
 * 
 * if (positionToChange == "slide_up")
 * $(".navbar-fixed-top").removeClass("navbar-slide-down"); else if
 * (positionToChange == "slide_down")
 * $(".navbar-fixed-top").addClass("navbar-slide-down"); }
 */

/**
 * Initilaize webstore events to install the extension
 */
/*
 * function Initialize_Chrome_Webstore_events() {
 * 
 * console.log("in Initialize_Chrome_Webstore_events");
 * 
 *//**
	 * To dismiss chrome extension popup
	 *//*
	$('#chrome_extension #dismiss').live('click', function(e)
	{
		e.stopPropagation();

		// To prevent notify user permanantly
		_agile_set_prefs("prevent_extension_request", "true");

		Toggle_Extension_Request_Ui(true);
	});

	*//**
	 * To prevent notify user on each session
	 *//*
	$("#chrome_extension #prevent_extension_request").live('click', function()
	{

		// To prevent notify user permanantly
		_agile_set_prefs("prevent_extension_request", "true");

		Toggle_Extension_Request_Ui(true);
	});

	*//**
	 * Install extension
	 *//*
	$('#chrome_extension #chrome_install_button').live('click', function(e)
	{

		e.stopPropagation();

		var $this = $(this);

		Toggle_Extension_Loader("inline");

		try
		{
			chrome.webstore.install(Chrome_Extension_Webstore_Url, function(success)
			{

				console.log(success);
				Toggle_Extension_Request_Ui(true);

			}, function(error)
			{
				console.log(error);
				Toggle_Extension_Loader("none");
				//OpenInNewTab();
			});
		}
		catch (e)
		{
			console.log(e);
			Toggle_Extension_Loader("none");
			//OpenInNewTab();
		}
		return false;
	});
}

*//**
 * Toggle loader image
 * 
 * e.stopPropagation();
 * 
 * var $this = $(this);
 * 
 * Toggle_Extension_Loader("inline");
 * 
 * try { chrome.webstore.install(Chrome_Extension_Webstore_Url,
 * function(success) {
 * 
 * console.log(success); Toggle_Extension_Request_Ui(true); }, function(error) {
 * console.log(error); Toggle_Extension_Loader("none"); //OpenInNewTab(); }); }
 * catch (e) { console.log(e); Toggle_Extension_Loader("none");
 * //OpenInNewTab(); } return false; }); }
 * 
 *//**
	 * Toggle loader image
	 * 
	 * @param type
	 */
/*
 * function Toggle_Extension_Loader(type) {
 * 
 * console.log("In Toggle_Extension_Loader: " + type);
 * 
 * if (!type) return;
 * 
 * $("#chrome_extension").find("#loading").css('display', type); } // Open
 * extension installation in new window function OpenInNewTab() { var url =
 * "https://chrome.google.com/webstore/detail/agile-crm/eofoblinhpjfhkjlfckmeidagfogclib?utm_source=chrome-ntp-icon";
 * var win = window.open(url, '_blank'); win.focus(); }
 *//**
 * Cookie.js deals with functions used to create, read and erase a cookie.
 * @module jscore
 */

/**
 * Creates a cookie variable with the given name, value and expire time in days
 * 
 * @param name
 *            name of the variable example : agile-email etc.
 * @param value
 *            value of the variable example: agilecrm@example.com
 * @param days
 *            time in days before the variable expires example : 15*365
 * @returns cookie
 */
function createCookie(name, value, days)
{
	// If days is not equal to null, undefined or ""
	if (days)
	{
		var date = new Date();

		// Set cookie variable's updated expire time in milliseconds
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		var expires = "; expires=" + date.toGMTString();
	}
	else
		// If days is null, undefined or "" set expires as ""
		var expires = "";
	document.cookie = name + "=" + escape(value) + expires + "; path=/";
}

function createCookieInAllAgileSubdomains(name, value, days)
{
	// If days is not equal to null, undefined or ""
	if (days)
	{
		var date = new Date();

		// Set cookie variable's updated expire time in milliseconds
		date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
		var expires = "; expires=" + date.toGMTString();
	}
	else
		// If days is null, undefined or "" set expires as ""
		var expires = "";
	document.cookie = name + "=" + escape(value) + expires + "; path=/; domain=agilecrm.com";
}

/**
 * Used to read a particular variable's value from document.cookie
 * 
 * @param name
 *            the name of the cookie variable to read example :
 *            agile-crm-session_start_time
 * @returns value of the cookie variable else it returns null
 */
function readCookie(name)
{
	var nameEQ = name + "=";

	// Split document.cookie into array at each ";" and iterate through it
	var ca = document.cookie.split(';');
	for ( var i = 0; i < ca.length; i++)
	{
		var c = ca[i];

		// Check for ' ' and remove to get string from c
		while (c.charAt(0) == ' ')
			c = c.substring(1, c.length);

		// check if nameEQ starts with c, if yes unescape and return its value
		if (c.indexOf(nameEQ) == 0)
			return unescape(c.substring(nameEQ.length, c.length));
	}
	return null;
}

/**
 * Used to delete a variable from document.cookie
 * 
 * @param name
 *            name of the variable to be removed from the cookie
 * @returns cookie without the variable
 */
function eraseCookie(name)
{
	createCookie(name, "", -1);
}
function initZeroClipboard(id, source) {

	 try {
	
		  ZeroClipboard.setDefaults({
		   moviePath : '/lib/zeroclipboard/ZeroClipboard.swf',
		   allowScriptAccess : "always"
		  });
		
	 } catch (e) {
		  // TODO: handle exception
		  console.log(e);
		  return false;
	 }
	
	 // Script code
	 var scriptCode = $('#' + source).text();
	
	 var clip = new ZeroClipboard();
	 clip.glue(document.getElementById(id));
	
	 clip.setText(scriptCode);
	
	 // Set id
	 clip.options.id = id;
	
	 // Set data to clickable element
	 $("#" + id).attr("data-clipboard-text", scriptCode);
	
	 clip.on('complete', function(client, args) {
		 
		  var id = $(this).attr("id");
		  
		  var script_tooltip_timing = function() {
			  $("#" + id).tooltip('hide').removeAttr('data-original-title');
		  };
		  
		  var timeOutHandler = setTimeout(script_tooltip_timing, 500);
		  
		  window.clearTimeout(timeOutHandler);
		  if (!id) {
		   return false;
		  }
		
		  var title = getTitleForClip(id);
		
		  // Show tooltip on complete
		  $("#" + id).attr({
		   "data-placement" : 'bottom',
		   "data-original-title" : title
		  });
		
		  $("#" + id).tooltip('show').off('mouseenter mouseleave');
		
		  timeOutHandler = setTimeout(script_tooltip_timing, 2000);
	
	 });

}


function initZeroClipboard2($id, $source){

	var clip = new ZeroClipboard($id);
 
    clip.on("ready", function(e) {
        $id.data("placement", "top").attr("title", "Copy to clipboard").tooltip();
    });
 
    clip.on("copy", function(e) {
        clip.setText($source.attr("data-clipboard-text"));
    });
 
    clip.on("aftercopy", function(e) {

    	var txt = $id.attr("data-copied-text") ? $id.attr("data-copied-text") : 'Copied!';
    	
        $id.attr("title", txt).tooltip("fixTitle").tooltip("show").attr("title", "Copy to clipboard").tooltip("fixTitle");
    });
 
    clip.on("error", function(e) {
        $id.attr("title", e.message).tooltip("fixTitle").tooltip("show");
    });
}

function getTitleForClip(id) {

 var title = "Code copied to clipboard";
 switch (id) {
 case "copy_email_to_clip_button":
  title = "Email copied to clipboard";
  break;
 case "api_key_code_icon":
  title = "Key copied to clipboard";
  break;
 case "popup_clip_button":
  title = "Code copied to clipboard";
  break;
 case "url_clip_button":
  title = "URl copied to clipboard";
  break;
 }

 return title;

}

function loadZeroclipboard2(callback){

	head.js('/lib/zeroclipboard2/ZeroClipboard.min.js', function(){
		
		if(callback)
			callback();
	});
}
/**
 * email-charts.js - It handles campaign's hourly, weekly or date email-charts. It
 * initializes the date-range-picker and HighChart's bar graphs. It also handles
 * to fetch timezone offset.
 */

/**
 * Initializes the date-range-picker. Calls showEmailGraphs based on the date
 * range seleted.
 * 
 * @param callback -
 *            callback method if any.
 */
function initChartsUI(callback)
{
	//Loads the date range 
	initDateRange(callback);
	callback();

}

/**
 * Shows date-wise, hourly and weekly reports of a campaign. Calls showBar
 * function which uses HighCharts plugin to show bar charts.
 */
function showEmailGraphs(campaign_id)
{

	// Daily
	showBar('core/api/campaign-stats/email/reports/' + campaign_id + getOptions() + "&type=date", 'line-daily-chart', 'Daily Reports', 'Count', null);

	// Hourly
	showBar('core/api/campaign-stats/email/reports/' + campaign_id + getOptions() + "&type=hour", 'line-hourly-chart', 'Hourly Reports', 'Count', null);

	// Weekly
	showBar('core/api/campaign-stats/email/reports/' + campaign_id + getOptions() + "&type=day", 'line-weekly-chart', 'Weekly Reports', 'Count', null);
}

/**
 * Returns start_time, end_time and time_zone (timezone offset like -330) as
 * query params. Splits date range based on '-' to get start and end time in
 * milliseconds. Fetches timezone offset using Date function.
 */
function getOptions()
{
	// Options
	var options = "?";

	// Get Date Range January 22, 2015 - January 28, 2015
	var range = $('#range').html().split("-");
	/*
	 * var temp = "January 22, 2015 - January 28, 2015"; var range =
	 * temp.split("-");
	 */
	// Returns milliseconds from start date. For e.g., August 6, 2013 converts
	// to 1375727400000
	//var start_time = Date.parse($.trim(range[0])).valueOf();
	//Get the GMT start time
	var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));

	var end_value = $.trim(range[1]);

	// To make end value as end time of day
	if (end_value)
		end_value = end_value + " 23:59:59";

	// Returns milliseconds from end date.
	//var end_time = Date.parse(end_value).valueOf();
	//Get the GMT end time
	var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	end_time += (((23*60*60)+(59*60)+59)*1000);

	// Adds start_time, end_time and timezone offset to params.
	options += ("start_time=" + start_time + "&end_time=" + end_time);

	// Add Timezone offset
	var d = new Date();
	options += ("&time_zone=" + d.getTimezoneOffset());

	// If Frequency is present - send frequency too
	if ($('#frequency').length > 0)
	{
		// Get Frequency
		var frequency = $("#frequency").val();
		options += ("&frequency=" + frequency);
	}

	// If Frequency is present - send frequency too
	if ($('#filter').length > 0)
	{
		// Get Frequency
		var filter_id = $("#filter").val();
		if (filter_id != "" && filter_id != "ALL")
			options += ("&filter=" + filter_id);
	}

	// console.log("options " + options);
	return options;
}

/**
 * Returns data required for table
 */
function get_email_table_reports(campaign_id)
{
	$("#email-table-reports").html(getRandomLoadingImg());

	$.getJSON('core/api/campaign-stats/email/table-reports/' + campaign_id + getOptions(), function(data)
	{

		console.log(data);

		// Load Reports Template
		getTemplate("campaign-email-table-reports", data, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("#email-table-reports").html($(template_ui));	
		}, "#email-table-reports");

	});
}
/**
 * email-pic.js contains functions which fetch the picture
 * if its a valid email and get the picture by the email
 * 
 * @module jscore
 */
$(function()
{
	
	/*// Using initials as image 
	$('body').live('agile_collection_loaded', function(event, element)
	{
		$(".img-inital").closest("img").error(function()
		{
			$(this).initial({charCount: 2});
		});

	});*/
	
	//prevent default focusout of email
	$("#content").on('focusout', '#email', function(e)
	{
		e.preventDefault();

		// If length of email is 0, do not display picture
		var val = $("#email").val();
		if (val.length == 0)
		{
			$('#pic').css("display", "none");
			changeProperty();
			return;
		}
		
		// If picture is not null and undefined, display it by given width, else display none
		var pic = getPicByEmail(val, 45);
		if (pic != undefined && pic != null)
		{
			var el = $('<img class="imgholder thumbnail person-img" onload="changeProperty()" style="display: inline;"  src="' + pic + '"></img>');
			$('#pic').html(el).show();
			$("img").error(function()
			{
				$('#pic').css("display", "none");
				changeProperty();
				
			});
		}
	});
});

function getPicByEmail(email, width)
{
	//get picture by email from gravatar.com
	if (email)
	{
		return 'https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + '&d=404';
	}
}
function initializeEmailBuilderListeners() {

    $('#emailbuilder-listeners').off();
    
    $('#emailbuilder-listeners').on('click', '.saveEmailBuilderButton', function(e){
        e.preventDefault();
        if (isValidForm('#emailBuilderForm')) {
            $(".saveEmailBuilderButton").prop("disabled",true);
            $(".saveEmailBuilderButtonText").html("Saving...");
            document.getElementById('emailBuilderFrame').contentWindow.$('#save').trigger("click");
        }
    });

    $('#emailbuilder-listeners').on('click', '.sendTestEmailButton', function(e){
         e.preventDefault();
        if (isValidForm('#emailBuilderForm')) {
            document.getElementById('emailBuilderFrame').contentWindow.$('#sendTestEmail').trigger("click");          
        }
    });

    $('#emailbuilder-listeners').on('click', '#emailBuilderOptionsLink', function (e) {
        e.preventDefault();
        $(this).find('i').toggleClass('icon-plus').toggleClass('icon-minus');
        $("#emailBuilderOptions").slideToggle('fast');
    });

    $('#emailbuilder-listeners').on('click', '#mainsourcepreview', function (e) {
        e.preventDefault();
        document.getElementById('emailBuilderFrame').contentWindow.$('#sourcepreview').trigger("click");
    });

    $('#emailbuilder-listeners').on('click', '.addAttachmentLink', function(e){
        e.preventDefault();
        var el = $(this).closest("div");
        $(this).css("display", "none");
        el.find("#attachmentSelectBoxHolder").css("display", "inline");
        var optionsTemplate = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' size='{{size}}'>{{name}}</option>";
        fillSelect('attachmentSelectBox','core/api/documents', 'documents',  function fillNew()
        {
            el.find("#attachmentSelectBox option:first").after("<option value='new'>Upload new doc</option>");

        }, optionsTemplate, false, el);
        $('#attachmentSelectBoxRequired').hide();
        $(this).hide();
    });

    $('#emailbuilder-listeners').on("click", ".attachmentAddBtn,.add-tpl-attachment-confirm", function(e){
        e.preventDefault();
        var selectedVal = $('#attachmentSelectBox').val();
        if(selectedVal == "new"){
            $('#uploadDocumentModal').html(getTemplate("upload-document-modal", {})).modal('show');
            $('#GOOGLE',$('#uploadDocumentModal')).parent().hide();
        }else if(selectedVal != ""){
            $('#attachmentSelectBoxHolder').hide();
            $('#attachmentHolder').show();
            $('#attachment_id').val(selectedVal);
            $('#attachment_text').html($('#attachmentSelectBox option:selected').text());
        }else if(selectedVal == ""){
            $('#attachmentSelectBoxRequired').show();
        }
    });

    $('#emailbuilder-listeners').on("click", ".attachmentCancelBtn", function(e){
        e.preventDefault();
        $('.addAttachmentLink').show();
        $('#attachmentHolder').hide();
        $('#attachmentSelectBoxHolder').hide();
        $('#attachment_id').val("");
        $('#attachment_text').html("");
    });

    $('#emailbuilder-listeners').on("change", "#attachmentSelectBox", function(e){
        if($(this).val() == ""){
            $('#attachmentSelectBoxRequired').show();
        } else {
            $('#attachmentSelectBoxRequired').hide();
        }
    });

    $('#emailbuilder-listeners').on('click', '#bringYourCodeBtn', function(e){
        e.preventDefault();
        BRING_YOUR_CODE_BTN = true;
        window.location.hash = "#email-template-add";
    });
    
}

function saveEmailTemplateFromBuilder(fullSource,builderSource) {
    
    var template = {
    "name": $("#nameoftemplate").val(),
    "subject": $("#subject").val(),
    "text": fullSource,
    "text_email": $("#text_email").val(),
    "html_for_builder": builderSource,
    "is_template_built_using_builder": true,
    "attachment_id": ($("#attachment_id").val()) ? $("#attachment_id").val() : ""
    };

    var requestType = "post";
    var message = "Template saved.";
    //to check already template id exists or not
    var templateId = $("#templateid").val();
    if(templateId) {
        var requestType = "put";
        template["id"] = templateId;
        message = "Template updated.";
    }

    $.ajax({
        type: requestType, 
        url: 'core/api/email/templates',       
        data: JSON.stringify(template),
        dataType: 'json',
        contentType: "application/json; charset=utf-8",
        success: function (data) {
            $("#nameoftemplate-msg",parent.document).html('<br><span style="color: green;">'+message+'</span>').show().fadeOut(3000);
            $(".saveEmailBuilderButton",parent.document).prop("disabled",false);
            $(".saveEmailBuilderButtonText",parent.document).html("Save");
            if(requestType == "post") {
                window.location.hash = "email-templates";
            }
        },
    });
}

function sendTestEmailTemplate(fullSource,builderSource) {
    
    var template = {
                "name": $("#nameoftemplate").val(),
                "from_name": CURRENT_DOMAIN_USER.name,
                "from_email":CURRENT_DOMAIN_USER.email,
                "to_email": CURRENT_DOMAIN_USER.email,
                "replyto_email":CURRENT_DOMAIN_USER.email,
                "subject": $("#subject").val(),
                "text_email": $("#text_email").val(),
                "html_email": fullSource
            };

    // Verifies merge fields and gives alert
    if ( check_merge_fields_and_send(template) ){
        var requestType = "post";
        var message = "Test Email Sent.";

        $.ajax({
            type: requestType, 
            url: 'core/api/emails/send-test-email',    
            data: template,
            success: function (data) {
                $("#nameoftemplate-msg",parent.document).html('<br><span style="color: green;">'+message+'</span>').show().fadeOut(3000);
            
            },
        });
    }
}


function redirectToOldEditor(templateId) {
    window.location.hash = "email-template/"+templateId;
}

function onEmailBuilderLoad() {
    $("#loadingImgHolder").hide();
    $("#emailBuilderTopOptionsHolder").show();
    $("#attachmentsHolderElement").show();
    $("#emailBuilderFrame").prop("height",680);
}

function setAttachmentInTemplateEdit(attachmentId) {
    $('.addAttachmentLink').hide();
    $('#attachmentSelectBoxHolder').hide();
    $('#attachmentHolder').show();

    $.getJSON("core/api/documents/"+attachmentId, function(data) {
        if(data) {
            $('#attachment_id').val(attachmentId);
            $('#attachment_text').html(data.name);
        } else {
            $('#attachmentHolder').hide();
            $('.addAttachmentLink').show();
        }
    });
}

function check_merge_fields_and_send(template)
 {
    
     var subject = $('#subject').val();
     var text_body = template.text_email;
     var html_body = template.html_email;
     if((subject && subject.indexOf('{{') != -1) || (text_body && text_body.indexOf('{{') != -1) || (html_body && html_body.indexOf('{{') != -1))
         {
             if ( show_test_email_alert(template))
             {
                return true;
             }else{
                return false;
             }
             
         }
      else
         {
             //send_test_email();
             return true;
         }
         
 
  }
  
 function show_test_email_alert(template){
     var title="Send Test Email";
     var message="Please observe that the merge fields in test emails would not be replaced.";
 
 
     window.parent.workflow_alerts(title, message , "workflow-alert-modal"
 
         ,function(modal){
 
         var $a = $(modal).find("a");
 
         $a.off("click");
         $a.on("click", function(e){
                     e.preventDefault();
                    
                     // Disable and change text
                     $(this).attr('disabled', 'disabled').text("Sending");
                     var requestType = "post";
                    var message = "Test Email Sent.";

                    $.ajax({
                        type: requestType, 
                        url: 'core/api/emails/send-test-email',    
                        data: template,
                        success: function (data) {
                            $("#nameoftemplate-msg",parent.document).html('<br><span style="color: green;">'+message+'</span>').show().fadeOut(3000);
            
                        },
                    });
                     return true;
                    
                 });
 
         // On hidden
         modal.on('hidden.bs.modal', function (e) {
        
         });
     }); 
 }
$(function(){
	
	
});

function initializeFbPageTabListners(el){

	$("#fbPageTab-listners").on('click', '#facebookPageTabSave', function(e){
		e.preventDefault();
		
		// Checks whether all input fields are given
		if (!isValidForm($("#facebookPageTabSettingForm"))){
			return;
		}
		
		var facebookPageId = $("#facebookTabPage").val();
		var facebookPageName = $("#facebookTabPage").find('option:selected').text();
		var AgileFacebookAppId = $("#AgileFacebookAppId").val();
		var selectedFormId = $("#formToUse").val();
		var selectedFormName = $("#formToUse").find('option:selected').text();

		if($('#connectedFormHolder_'+facebookPageId).length != 0) {
			if(!confirm("Are you sure you want to update?")) {
				return;
			}
		}
		
		var formData = "facebookPageID=" + facebookPageId;
		formData += "&facebookPageName=" + facebookPageName;
		formData += "&facebookPageToken=" + $("#facebookTabPage").find('option:selected').attr("data-token");
		formData += "&formID=" + selectedFormId;
		formData += "&formName=" + selectedFormName;
		
		$.ajax({
		    url : "fbpage?action=SAVE_DETAILS",
		    type: "POST",
		    data : formData,
		    success: function(data, textStatus, jqXHR){
		       if(data == "true") {
		    	   $('#formToUse').prop('selectedIndex',0);
		    	   $('#facebookTabPage').prop('selectedIndex',0);

		    	   if($('#fbFormsTable').length == 0) {
		    	   	$('#fbFormsHolder').html('<p class="font-bold">Current Facebook Pages</p><table class="table" id="fbFormsTable"><tbody></tbody></table><div id="delStatusMessageHolder"></div>');
		    	   }

		    	   var tableRowHtml = '<tr id="connectedFormHolder_'+facebookPageId+'"><td colspan="3" style="padding-left:0px;"><a target="_blank" href="/form.jsp?id='+selectedFormId+'" class="text-info">'+selectedFormName+'</a> form has been added to<br><a target="_blank" href="https://www.facebook.com/pages/null/'+facebookPageId+'?sk=app_'+AgileFacebookAppId+'" class="text-info">'+facebookPageName+'</a> page</td><td style="padding-top:18px;"><a href="#" data-pageid="'+facebookPageId+'" id="connectedForm_'+selectedFormId+'" class="deleteFacebookLinkedpage"><i class="icon-trash"></i></a></td></tr>';
		    	   
		    	   var statusMessageNote = "has been added to";
		    	   if($('#connectedFormHolder_'+facebookPageId).length != 0) {
		    	   	$('#connectedFormHolder_'+facebookPageId).remove();
		    	   	statusMessageNote = "updated in";
		    	   }

		    	   $('#fbFormsTable > tbody:last-child').append(tableRowHtml);

		    	   var sucMessage = "Form "+statusMessageNote+" <a target=\"_blank\" class=\"text-info\" href=\"https://www.facebook.com/pages/null/"+facebookPageId+"?sk=app_"+AgileFacebookAppId+"\">your Facebook page.</a><br>";
		    	   $("#statusMessageHolder").html(sucMessage).show().fadeOut(10000);
		    	   $("#facebookFormAddHolder").hide();
		    	   $("#addFacebookFormLink").show();

		       } else {
		    	   $("#statusMessageHolder").html("Something went wrong, please try again.");
		       }
		    },
		    error: function (jqXHR, textStatus, errorThrown){
		    }
		    });		
	});
	
	$("#fbPageTab-listners").on('click', '.deleteFacebookLinkedpage', function(e){
		e.preventDefault();
		var $that = $(this);
		showAlertModal("delete_facebook_linked_page", "confirm", function(){
			var pageId = $that.attr("data-pageid");
			var pageToken = $("#facebookTabPage option[value='"+pageId+"']").attr("data-token");
			if(typeof pageToken == "undefined") {
				setTimeout(function(){
					showAlertModal("delete_facebook_linked_page_error", undefined, function(){
						var fbLoginLink = $("#AddFormLinkFacebookAccount").attr("href");
						if(typeof fbLoginLink != "undefined") {
							window.location.href = fbLoginLink;
						}
					});
				},1000);
			}else{
				var formData = "facebookPageID=" + pageId;
				formData += "&facebookPageToken=" + pageToken;
				
				$.ajax({
				    url : "fbpage?action=DELETE_TAB",
				    type: "POST",
				    data : formData,
				    success: function(data, textStatus, jqXHR){
				       if(data == "true") {
				    	   $("#connectedFormHolder_"+pageId).remove();
				    	   $("#delStatusMessageHolder").html("Deleted successfully.<br>").show().fadeOut(8000);
				       } else {
				    	   $("#delStatusMessageHolder").html("Something went wrong, please try again.");
				       }
				    },
				    error: function (jqXHR, textStatus, errorThrown){
				    }
				    });
			}
		});	
	});
	
	$("#fbPageTab-listners").on('change', '#formToUse', function(e){
		var preSelectedFormId = $("#connectedForm_"+$(this).val()).attr("data-pageid");
		if(typeof preSelectedFormId != "undefined") {
			$("#facebookTabPage").val(preSelectedFormId);
		}
	});

	$("#fbPageTab-listners").on('click', '#addFacebookFormLink', function(e){
		e.preventDefault();
		$("#facebookFormAddHolder").show();
		$(this).hide();
	});

	$("#fbPageTab-listners").on('click', '#unlinkFacebookAccount', function(e) {
		e.preventDefault();
		showAlertModal("unlink_facebook", "confirm", function(){
			$.post( "fbpage?action=UNLINK_ACCOUNT", function(data) {
				window.location.reload();
			});
		});
	});
}/*$(function(){
    head.js("https://cdn.jsdelivr.net/fingerprintjs2/1.1.2/fingerprint2.min.js", function(){
    	// Send hash to server
    	new Fingerprint2().get(function(result, components){
		  console.log(result); //a hash, representing your device fingerprint
		  console.log(components); // an array of FP components
		  var obj = {}
		  obj.user_agent = components.user_agent;
		  obj.session_storage = components.session_storage;
		  obj.navigator_platform = components.navigator_platform;
		   $.ajax({
		   	type : 'POST',
		   	url : '/core/api/users/fingerprintscanner?result='+result,
		   	data : obj,

		    
		    success : function(response)
			{
				console.log("success");
			},
			error: function(response)
			{

			}


		   });


		});
    });
});*/(function($) {
	
    // To show top button at the bottom of page
	addScrollTopAnimation(); 
	
	// Starts scroll
	function addScrollTopAnimation() {

		var $scrolltop_link = $('#scroll-top');

		// When click event is fired scrolls the page to top
		$scrolltop_link.on('click', function(ev) {

			ev.preventDefault();

			$('html, body').animate({ scrollTop : 0	}, 700);

		})

		// Hides the link initially
		.data('hidden', 1).hide();

		var scroll_event_fired = false;

		$(window).on('scroll', function() {

			scroll_event_fired = true;

		});

		/*
		 * Checks every 300 ms if a scroll event has been fired.
		 */
		setInterval(function() {

			if (scroll_event_fired) {

				/*
				 * Stop code below from being executed until the next scroll
				 * event.
				 */
				scroll_event_fired = false;

				var is_hidden = $scrolltop_link.data('hidden');

				/*
				 * Display the scroll top link when the page is scrolled down
				 * the height of half a viewport from top, Hide it otherwise.
				 */
				if ($(this).scrollTop() > $(this).height() / 2) {
					if (is_hidden) {
						$scrolltop_link.fadeIn(600).data('hidden', 0);
					}
				}
				else {
					if (!is_hidden) {
						$scrolltop_link.slideUp().data('hidden', 1);
					}
				}
			}
		}, 300);
	}
	
	/* For toggling help modal popup */
	$("body").on('click', '#help-page', function(e){
		
		getTemplate("show-help", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var helpModal = $(template_ui);
			helpModal.modal('show');
		
			// Hides help only when clicked on close button.
		    $('.hide-modal', helpModal).click(function(){
		    		helpModal.modal('hide');
		    });

		}, null);
   
	});
	
	/* For opening the footer icons in seperate popup window */
	$("body").on('click', '.email-share', function(e){
		e.preventDefault();
		var x = 500;
		var title = $(this).closest("a").attr('data');
		if(title == "Linkedin") x=700;
		var url = $(this).closest("a").attr('href');
		window.open(url, title, "width=" + x + ",height=500,left=200%,top=100%");
	});
	
	/* For sharing agile to friends */
	$("body").on('click', '#share-email', function(e){
		e.preventDefault();
		
		// If modal is already present removing it to submit new form
        if ($('#share-by-email').size() != 0)
        {
        	$('#share-by-email').remove();
        }

        getTemplate("share-by-email", CURRENT_DOMAIN_USER, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var emailModal = $(template_ui);
			// Replacing text area break lines
			var description = $(emailModal).find('textarea').val();
			description = description.replace( /<br\/>/g,"\r\n");
			$(emailModal).find('textarea').val(description);
	
			emailModal.modal('show');
			// When send button is clicked form is validated
			$("body").on('click', '#shareMail', function(e){
					e.preventDefault();
					
					if(!isValidForm($('#sharemailForm')))
				      {	
				      	return;
				      }
					
					var json = serializeForm("sharemailForm");
					
					json.body = json.body.replace(/\r\n/g,"<br/>");
					
					// Constructs URL to send mail
					var url =  'core/api/emails/send-email?from=' + encodeURIComponent(json.from) + '&to=' + 
					 encodeURIComponent(json.to) + '&subject=' + encodeURIComponent(json.subject) + '&body=' + 
						 encodeURIComponent(json.body);
					
					// Shows message 
				    $save_info = $('<img src="'+updateImageS3Path("img/1-0.gif")+'" height="18px" width="18px"></img>&nbsp;&nbsp;<span><p class="text-success" style="color:#008000; font-size:15px; display:inline-block"> <i>Sending mail...</i></p></span>');
				    $("#msg", this.el).append($save_info);
					$save_info.show().delay(2000).fadeOut("slow");
					
					// Navigates to previous page on sending email
					$.post(url, function(){
						emailModal.modal('hide');
					});
			});

		}, "#content");
	});
	
})(jQuery);function updateFormsDB(){

	if(CURRENT_DOMAIN_USER.is_forms_updated)
		   return;

	// Fetch and update forms db
	$.getJSON("/core/api/forms", {}, function(data){

		var noOfOldForms = 0;
		for(var i = 0; i < data.length; i++){
			if(!data[i].formHtml) {
				noOfOldForms++;
				createIframe(data[i].id);
			}
		}

		// Update user DB with true param
		console.log("No. of old forms : "+noOfOldForms);
		if(noOfOldForms == 0) {
			$.get('/core/api/users/formsupdated',{},function(data){
				console.log("All forms are updated.");
			});
		}

	});
}

function createIframe(formId) { 

  var iframe = document.createElement("iframe");
  iframe.style.display = "none";
  iframe.src = "form.jsp?id=" + formId;
  document.body.appendChild(iframe);

 }

function updateAgileFormDB(form) {
	$.ajax({
		type : 'POST',
		url : 'core/api/forms',
		async : true,
		contentType : 'application/json',
		data : JSON.stringify(form),
		success: function(){
		}
	});
}

$(function(){
	updateFormsDB();
});
$(function(){
  //on clicking the full screen main page button 
  $("body").on("click", ".enable-element-full-screen", function(e){

      e.preventDefault();
      document.addEventListener("fullscreenchange",Detection);
      document.addEventListener("webkitfullscreenchange", Detection);
      document.addEventListener("mozfullscreenchange", Detection);
      document.addEventListener("MSFullscreenChange", Detection);

      screenfull.toggle();
    //$(this).closest("#content")[0] 
  });
  
});

 function Detection()
 {
      var isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement;
          if(isFullScreen)
          {
              $("#toggle-fullscreen-icon").attr('class','fa fa-compress ');
          }
          else
          {
              $("#toggle-fullscreen-icon").attr('class','fa fa-expand');
          }
              

}
//cicking the fullscreen button for the contact page
$("body").on("click",".fullscreenelement",function(elem){

     // Get closest target elem
     var targetEle = $(this).attr("targetFullscreenElement");
     if(!targetEle)
         targetEle = "#content";

      $("#aside").toggleClass("hide");

      // Target closest element 
      var elem1 = $(targetEle)[0];
      $(elem1).toggleClass("fullscreenwidjet");

      // Toggle icons
      $("#toggle-screen-icon", $(targetEle)[0]).attr("class","fa fa-" + ($(elem1).hasClass("fullscreenwidjet") ? "compress" : "expand"));

});
  
  




  /*!
* screenfull
* v3.0.0 - 2015-11-24
* (c) Sindre Sorhus; MIT License
*/
;(function () {
  'use strict';

  var isCommonjs = typeof module !== 'undefined' && module.exports;
  var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

  var fn = (function () {
    var val;
    var valLength;

    var fnMap = [
      [
        'requestFullscreen',
        'exitFullscreen',
        'fullscreenElement',
        'fullscreenEnabled',
        'fullscreenchange',
        'fullscreenerror'
      ],
      // new WebKit
      [
        'webkitRequestFullscreen',
        'webkitExitFullscreen',
        'webkitFullscreenElement',
        'webkitFullscreenEnabled',
        'webkitfullscreenchange',
        'webkitfullscreenerror'

      ],
      // old WebKit (Safari 5.1)
      [
        'webkitRequestFullScreen',
        'webkitCancelFullScreen',
        'webkitCurrentFullScreenElement',
        'webkitCancelFullScreen',
        'webkitfullscreenchange',
        'webkitfullscreenerror'

      ],
      [
        'mozRequestFullScreen',
        'mozCancelFullScreen',
        'mozFullScreenElement',
        'mozFullScreenEnabled',
        'mozfullscreenchange',
        'mozfullscreenerror'
      ],
      [
        'msRequestFullscreen',
        'msExitFullscreen',
        'msFullscreenElement',
        'msFullscreenEnabled',
        'MSFullscreenChange',
        'MSFullscreenError'
      ]
    ];

    var i = 0;
    var l = fnMap.length;
    var ret = {};

    for (; i < l; i++) {
      val = fnMap[i];
      if (val && val[1] in document) {
        for (i = 0, valLength = val.length; i < valLength; i++)
         {
          ret[fnMap[0][i]] = val[i];
         }
        return ret;
      }
    }

    return false;
  })();

  var screenfull = {
    request: function (elem) {
      var request = fn.requestFullscreen;

      elem = elem || document.documentElement;

      // Work around Safari 5.1 bug: reports support for
      // keyboard in fullscreen even though it doesn't.
      // Browser sniffing, since the alternative with
      // setTimeout is even worse.
      if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) 
      {
          elem[request]();
      } 
      else
      {
        elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
      }
    },
    exit: function ()
     {
      document[fn.exitFullscreen]();
     },
    toggle: function (elem) {

      if (this.isFullscreen) {
        
        this.exit();
      } 
      else
       {
        $("#content").css("height",100+'vh');
       this.request(elem);
       }
      
    },
    raw: fn
  };

  if (!fn) {
    if (isCommonjs) {
      module.exports = false;
    } else {
      window.screenfull = false;
    }

    return;
  }

  Object.defineProperties(screenfull, {
    isFullscreen: {
      get: function () {
        return Boolean(document[fn.fullscreenElement]);
      }
    },
    element: {
      enumerable: true,
      get: function () {
        return document[fn.fullscreenElement];
      }
    },
    enabled: {
      enumerable: true,
      get: function () {
        // Coerce to boolean in case of old WebKit
        return Boolean(document[fn.fullscreenEnabled]);
      }
    }
  });

  if (isCommonjs) {
    module.exports = screenfull;
  } else {
    window.screenfull = screenfull;
  }
})();/** Image loader while template render */
var Template_Render_Image_Loader = '<img class="loading" style="padding-right:5px;opacity:0.5;" src= "'+updateImageS3Path("/flatfull/img/ajax-loader-cursor.gif")+'"></img>';


// Count XHR call
var Count_XHR_Call;/**
 * help-mail.js deals with functions like building url by parsing form data,
 * showing message while sending mail, resetting form data after sending mail.
 * 
 * @module jscore
 */

/**
 * Serialize form data, build url, show message, reset form fields.
 * 
 * @param #helpmailForm
 */
$(function() {
	
/*	// To toggle the contact us email
	$("#show_support").live("click", function(e){
		  e.preventDefault();
		  $("#content").html(getTemplate("help-mail-form"), {});
		 // $("#helpmailForm").toggle();
		 // $('html, body').animate({ scrollTop : 360  },1000);
	});*/

	// Prevent default on click
	$("body").on('click', '#helpMail', function(e){
		e.preventDefault();

		if($(this).attr('disabled'))
	   	     return;
		
		// If not a valid form return else serialize form data to parse
		if(!isValidForm($("#helpmailForm")))
			return;
		
		// Disables send button and change text to Sending...
		disable_send_button($(this));
		
		var json = serializeForm("helpmailForm");

		json.from = CURRENT_DOMAIN_USER.email;
		
		// Replace \r\n with <br> tags as email is sent as text/html
		json.body = json.body.replace(/\r\n/g,"<br/>");
        

        $.ajax({
		
				type : 'POST',
				data : json,
				url : 'core/api/emails/contact-us',
				success : function()
						{

							// Reset form fields after sending email
							$("#helpmailForm").each(function () {
								this.reset();
							});
			
							// Show message and gif while sending mail and fadeout
							$save_info = $('<span class="text-success" style="color:#008000; font-size:15px; display:inline-block"><i> Email Sent</i></span>');
							$('#msg').append($save_info);
							$save_info.show().delay(1000).fadeOut("slow", function(){
				
								// Enables Send Email button.
			    				enable_send_button($('#helpMail'));
				
								//$("#helpmailForm").hide();
								
								window.history.back();
								});
						},
						error : function(response)
								{
									enable_send_button($('#helpMail'));

									// Show cause of error in saving
									$save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>' + response.responseText + '</i></p></small></div>');

									// Appends error info to form actions
									// block.
									$($('#helpMail')).closest(".form-actions", this.el).append($save_info);

									// Hides the error message after 3
									// seconds
									if (response.status != 406)
										$save_info.show().delay(10000).hide(1);
								}
				});
	});
});/**
 * ical.js is a script file that runs when user clicks on subscribe iCal feed.
 * It fetches apikey and domain name of current user. It appends apikey and
 * domain name to url.
 * 
 * author: Naresh
 */
$("#content").on('click', '#subscribe-ical', function(event)
{
	event.preventDefault();
	set_api_key();
});

/**
 * Fetches APIKey of current user
 * 
 * @method set_api_key
 */
function set_api_key()
{
	var api_key_model = Backbone.Model.extend({ url : 'core/api/api-key' });

	var model = new api_key_model();
	var data = model.fetch({ success : function(data)
	{
		var api_key = data.get('api_key');
		set_url_domain(api_key);
	} });
}
/**
 * 
 * Gets domain of current user using Backbone.
 * 
 * @method set_url_domain
 * @param apiKey -
 *            apiKey of current user.
 */
function set_url_domain(apiKey)
{
	var domain = window.location.hostname.split(".")[0];
	set_url(apiKey, domain);
}

/**
 * 
 * Sets url with domain and apiKey
 * 
 * @method set_url
 * @param apiKey -
 *            apiKey of current user.
 * 
 * @param domain -
 *            domain of current user.
 */
function set_url(apiKey, domain)
{
	var url = "webcal://" + domain + ".agilecrm.com/ical/" + apiKey;
	$('#ical-feed').attr('href', url);
	$('#ical-feed').text(url);
	console.log(url);
}

/**
 * Sends email with ical data to current-user email.
 * 
 * @method send_ical_info_email
 * @param emailModal -
 *            ical-email-modal
 */
function send_ical_info_email(emailModal)
{
	// When Send Clicked, validate the form and send email.
	emailModal.on("shown.bs.modal", function(e){

	$("#share-ical-by-email")
			.on(
					'click',
					'#shareIcalMail',
					function(e)
					{
						e.preventDefault();

						// if not valid
						if (!isValidForm($('#shareIcalMailForm')))
							return;

						var json = serializeForm("shareIcalMailForm");
						json.body = json.body.replace(/\r\n/g, "<br/>");

						var url = 'core/api/emails/send-email?from=' + encodeURIComponent(json.from) + '&to=' + encodeURIComponent(json.to) + '&subject=' + encodeURIComponent(json.subject) + '&body=' + encodeURIComponent(json.body);

						// Shows message
						$save_info = $('<img src="'+updateImageS3Path("img/1-0.gif")+'" height="18px" width="18px"></img>&nbsp;&nbsp;<span><p class="text-success" style="color:#008000; font-size:15px; display:inline-block"> <i>Sending mail...</i></p></span>');
						$("#msg", this.el).append($save_info);
						$save_info.show().delay(2000).fadeOut("slow");

						// Navigates to previous page on sending email
						$.post(url, function()
						{
							emailModal.modal('hide');
						});

					});
		});
}

$(function()
{

	$('#scheduleModal').on('hidden.bs.modal', function(e)
	{
		$("#edit").show();
		$('#charlength').hide();
		$('#specialchar').hide();

	})

	/*
	 * $("body").on('click', '#show-schedule-url', function(e) {
	 * e.preventDefault(); $('#scheduleModal').modal('show'); });
	 */

	$('#scheduleModal').on('show.bs.modal', function()
	{

		var updatedCurrentUser = Backbone.Model.extend({ url : '/core/api/users/current-user', restKey : "domainUser" });

		var updateduserModel = new updatedCurrentUser();

		updateduserModel.fetch({ success : function(data)
		{
			var model = data.toJSON();

			if ($("#scheduleModal").size() > 1)
			{
				$('#scheduleModal').modal('hide').remove();

			}

			var onlineschedulingURL = "https://" + model.domain + ".agilecrm.com/calendar/" + model.schedule_id;
			var hrefvalue = "https://" + model.domain + ".agilecrm.com/calendar/";
			$("#scheduleurl").attr("href", onlineschedulingURL);
			$("#hrefvalue").html(hrefvalue);
			$("#schedule_id").html(model.schedule_id);

			$("#scheduleurl").removeClass("nounderline");

		} });
	});

});

/*
 * $("body").on('click', '#send-schedule-url-email', function(e) {
 * e.preventDefault();
 * 
 * $("#scheduleModal").modal('hide'); // Removes previous modals if exist. if
 * ($('#scheduleModal').size() != 0) $('#scheduleModal').remove();
 * 
 * var emailModal = $(getTemplate("share-schedule-url-by-email", {}));
 * 
 * var description = $(emailModal).find('textarea').val();
 * 
 * description = description.replace(/<br\/>/g, "\r\n");
 * 
 * $(emailModal).find('textarea').val(description);
 * 
 * emailModal.modal('show'); // Send schedule url by email //
 * send_schedule_url_email(emailModal);
 * 
 * });
 */

/**
 * Sends email with ical data to current-user email.
 * 
 * @method send_ical_info_email
 * @param emailModal -
 *            ical-email-modal
 */
/*
 * function send_schedule_url_email(emailModal) { // When Send Clicked, validate
 * the form and send email. $("#icalModal") .on( 'click', '#share-url-email',
 * function(e) { e.preventDefault();
 *  // if not valid if (!isValidForm($('#sharescheduleurlmailForm'))) return;
 * 
 * var json = serializeForm("sharescheduleurlmailForm"); json.body =
 * json.body.replace(/\r\n/g, "<br/>");
 * 
 * var url = 'core/api/emails/send-email?from=' + encodeURIComponent(json.from) +
 * '&to=' + encodeURIComponent(json.to) + '&subject=' +
 * encodeURIComponent(json.subject) + '&body=' + encodeURIComponent(json.body);
 *  // Shows message $save_info = $('<img src="img/1-0.gif" height="18px"
 * width="18px"></img>&nbsp;&nbsp;<span><p class="text-success" style="color:#008000; font-size:15px; display:inline-block">
 * <i>Sending mail...</i></p></span>'); $("#msg",
 * this.el).append($save_info); $save_info.show().delay(2000).fadeOut("slow");
 *  // Navigates to previous page on sending email $.post(url, function() {
 * emailModal.modal('hide'); });
 * 
 * }); }
 */
/** 
 * Check if route is the current route of the app.
 * @param route
 * @returns {Boolean}
 */
function isRoute(route)
{
	if(!Current_Route)return false;
	return (Current_Route.indexOf(route)==0);
}

/**
 * Checks if any modal is visible.
 * @returns
 */
function isModalVisible()
{
	return $(".modal").is(":visible");
}

$(function(){
	
	/* To enable or disable the keyboard shortcuts	 */
	if(CURRENT_USER_PREFS.keyboard_shotcuts){
		enableKeyboardShotcuts();
		$(".show_shortcuts .shortcuts").addClass("enable");
	}
	/* For toggling keyboard shortcuts modal popup */
    $("body").on('click', '#keyboard-shortcuts', function(e){
		e.preventDefault();

		getTemplate("shortcut-keys", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$(template_ui).modal('show');
		}, null);
	});
});

/**
 * Enables keyboard shortcuts based on user prefs.
 */
function enableKeyboardShotcuts()
{
	head.js(LIB_PATH+'lib/mousetrap.min.js',function(){
	
		
		// New contact
		Mousetrap.bind('shift+n',function(){
			if(!isModalVisible())
				addContactBasedOnCustomfields(); 
		});

		// New company
		Mousetrap.bind('shift+c',function(){
			if(!isModalVisible())
				$('#companyModal').modal('show'); 
		});

		// New event
		Mousetrap.bind('shift+v',function(){
			if(!isModalVisible()){
				$('#activityModal').html(getTemplate("new-event-modal")).modal('show');
				highlight_event();
			}
		});
		
		// New Task
		Mousetrap.bind('shift+t',function(){
			if(!isModalVisible())
				showTaskModal("");
		});

		// New deal
		Mousetrap.bind('shift+d',function(){
			if(!isModalVisible())
				show_deal(); 
		});

		// New note
		Mousetrap.bind('shift+o',function(){
			if(!isModalVisible()){
				$('#noteModal').modal('show'); 
				var el = $("#noteForm");
				agile_type_ahead("note_related_to", el, contacts_typeahead);
			}
		});

		// New email
		/*Mousetrap.bind('shift+l',function(){
			if(!isRoute("send-email") && !isModalVisible())
				App_Contacts.navigate("send-email",{trigger:true});
		});*/




		// Preferences
		Mousetrap.bind('shift+p',function(){
			if(!isRoute("user-prefs") && !isModalVisible())
				App_Settings.navigate("user-prefs",{trigger:true});
		});

		// Admin settings
		Mousetrap.bind('shift+a',function(){
			if(!isRoute("account-prefs") && !isModalVisible() && CURRENT_DOMAIN_USER.is_admin)
				App_Settings.navigate("account-prefs",{trigger:true});
		});

		// Theme and layout
		Mousetrap.bind('shift+l',function(){
			if(!isRoute("themeandlayout") && !isModalVisible())
				App_Settings.navigate("themeandlayout",{trigger:true});
		});

		// upgrade
		Mousetrap.bind('shift+u',function(){
			if(!isRoute("subscribe") && !isModalVisible())
				App_Settings.navigate("subscribe",{trigger:true});
		});

		// Product updates
		Mousetrap.bind('shift+r',function(){
			if(!isModalVisible())
				window.open("https://www.agilecrm.com/product-updates", true);
		});

		// Help
		Mousetrap.bind('shift+h',function(){
			if(!isModalVisible())
				window.open("https://www.agilecrm.com/support", true);
		});

		// Logout
		Mousetrap.bind('shift+g',function(){
			if(!isModalVisible())
				window.location.href = "/login?sur=true";
		});



		
		// Edit the current contact
		Mousetrap.bind('shift+e',function(){
			if(isRoute("contact/") && !isModalVisible())
				App_Contacts.navigate("contact-edit",{trigger:true});
		});
		
		// Send mail to current contact
		Mousetrap.bind('shift+m',function(){
			if(isModalVisible())
				return;
			if(isRoute("contact/"))
				App_Contacts.navigate("send-email/"+ getCurrentContactProperty("email"),{trigger:true});
			else
				App_Contacts.navigate("send-email",{trigger:true});
		});
		
		// Focus on search box in main menu
		Mousetrap.bind('/',function(e){
			if(isModalVisible())return;
			document.getElementById('searchText').focus();
			
			if(e.preventDefault)
		        e.preventDefault();
		    else
		        e.returnValue = false; // internet explorer
		});
		
		// New of current entity type
		Mousetrap.bind('n',function(){
			
			if(isModalVisible())return;
			
			if(isRoute('contact'))
				addContactBasedOnCustomfields();
			else if(isRoute('cases'))
				showCases();
			else if(isRoute('deals'))
				show_deal();
			else if(isRoute('workflow'))
				App_Workflows.navigate("workflow-add",{trigger:true});
			else if(isRoute('report'))
				App_Reports.navigate("report-add",{trigger:true});
			else if(isRoute('tasks'))
				showTaskModal("");
			else if(isRoute('calendar'))
				{
				  $('#activityModal').html(getTemplate("new-event-modal")).modal('show');
				  highlight_event();
				}
		});
	});
}

/** OLD CODE Below - Without any library, just native js.
 * 	Performance not tested, so don't know if this or the one with Mousetrap Library is faster.
 *

// keyCode value of keys used in shortcut.
var CodeASCII={
E:"E".charCodeAt(0),
M:"M".charCodeAt(0),
N:"N".charCodeAt(0),
P:"P".charCodeAt(0),
T:"T".charCodeAt(0),
Slash:191
};



/**
 * Check if tg is any input tag
 * @param tg - tag name to test.
 * @returns
 *
function isInputTag(tg)
{
	var tagList=[ "INPUT", "TEXTAREA" ];
	
	for(var i=0;i<tagList.length;++i)
		if(tg==tagList[i])return true;
	
	return false;
}

/**
 * Handler function fired when any key is pressed.
 * @param e
 *
function keyHandler(e)
{
	if((e.target && isInputTag(e.target.tagName)) || isModalVisible())return;
	// focussed on input, so return default, as user is typing text.
	
	if(e.shiftKey)
	{
		if(e.keyCode==CodeASCII.P)
			App_Settings.navigate("user-prefs",{trigger:true}); 	// Shift+P : preferences
		else if(e.keyCode==CodeASCII.N)
			$('#personModal').modal('show');                    	// Shift+N : new contact person
		else if(e.keyCode==CodeASCII.T)
			$('#activityModal').modal('show');						// Shift+T : new task
		else if(isRoute("contact/"))
		{
			if(e.keyCode==CodeASCII.E)
				App_Contacts.navigate("contact-edit",{trigger:true});	// Shift+E : edit current contact
			else if(e.keyCode==CodeASCII.M)	
				App_Contacts.navigate("send-email",{trigger:true});		// Shift+M : send mail to current contact
		}
		else return;												// Let default happen.
		
		e.preventDefault();
	}
	else
	{
		if(e.keyCode==CodeASCII.Slash)
		{
			document.getElementById('searchText').focus(); 			// / : search
			e.preventDefault();
		}
		else if(e.keyCode==CodeASCII.N)								// N : new current thing
		{
			if(isRoute('contact'))
				$('#personModal').modal('show');
			else if(isRoute('cases'))
				showCases();
			else if(isRoute('deals'))
				show_deal();
			else if(isRoute('workflow'))
				App_Workflows.navigate("workflow-add",{trigger:true});
			else if(isRoute('report'))
				App_Reports.navigate("report-add",{trigger:true});
			else if(isRoute('task') || isRoute('calendar'))
				$('#activityModal').modal('show');	
			e.preventDefault();
		}
	}	
}

window.onkeydown = keyHandler;
*/
jQuery.validator.addMethod("lpdomain", function(value, element) {
	if(value == '')
		return true;
	return /^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/.test(value);
	 },"Invalid domain.");
	
jQuery.validator.addMethod("lpsubdomain", function(value, element) {
	if(value == '')
		return true;
	return /^[a-zA-Z0-9-]+$/.test(value);
	},"Invalid sub domain.");

jQuery.validator.addMethod("lpdirectorypath", function(value, element) {
	if(value == '')
		return true;
	return /^(\/\w+)+[a-z0-9-.]+$/.test("/"+value);
	},"Invalid path.");

 /**making an function  for the reusable the code for the save 
 landing page and here one LandingPageId we are defining with empty  
 **/

function saveLandingPageToDataStore(isAutoSaved,pageId) {

	if (isValidForm('#landingPageBuilderForm')) {
		$(".saveLandingPageButton").prop("disabled",true);
		
		$(".saveLandingPageButtonText").html("Saving...");
		    		
		document.getElementById('landingPageBuilder').contentWindow.$('.icon-floppy-1:last').trigger("click");
		if(App_LandingPageRouter.LandingPageCollectionView) {
			App_LandingPageRouter.LandingPageCollectionView.collection.fetch();
		}
        /*when autosaved value is true that time it will be work
        * for the */
		if(!isAutoSaved) {	
			if (typeof pageId !== "undefined" && readData("landingpages-save-popup")!=="true" ) {
				getTemplate("landingpages-save-popup-modal",{"id":pageId}, undefined, function(ui){
					$("#landingPagesSavePopup").html(ui).modal("show");
					$("#popup-msg").fadeOut(8000);
				});//function closing
			}//if closed
	 	}//outer if closed
      

 } else {
		if(!$("#landingpagename").val().trim()) {
			$('html, body').animate({scrollTop: $('body').offset().top}, 500);
		}
	}
}

function initializeLandingPageListeners(pageId) {

	$('#landingpages-listeners').off();
	
	$('#landingpages-listeners').on('click', '.saveLandingPageButton', function(e){
		e.preventDefault();
		saveLandingPageToDataStore(false,pageId);
		track_with_save_success_model(e.currentTarget);
	});
   $('#landingpages-listeners').on('click', '.lpDeviceView', function(e){
		e.preventDefault();
		var triggeringElement = $(this).data("trigger");
    	var landingPageIframe = document.getElementById('landingPageBuilder').contentWindow;
    	landingPageIframe.$(triggeringElement).trigger("click");
    	var deviceClass = $(this).data("deviceclass");
    	landingPageIframe.$("#preview-frame").removeClass("xs-width sm-width md-width full-width");
    	landingPageIframe.$("#preview-frame").addClass(deviceClass);

	});

	$('#landingpages-listeners').on('click', '.lpPreviewView', function(e){
		e.preventDefault();
		var triggeringElement = $(this).data("trigger");
    	document.getElementById('landingPageBuilder').contentWindow.$(triggeringElement).trigger("click");
    	$(this).find('i').toggleClass('fa-eye fa-eye-slash');
    	
    	
    	if( $(this).find('i').hasClass('fa-eye')) {
    		//alert("Inside toggle");
    		document.getElementById('landingPageBuilder').contentWindow.$("#preview-closer").trigger("click");
    	}
    	
    	if ($(this).find("span").text() == 'Close'){
        	$(this).find("span").text('Preview');
    	} else {
        	$(this).find("span").text('Close');
    	} 
    	document.getElementById('landingPageBuilder').contentWindow.$("#preview-closer").addClass("hidden");
	});
	//creating an function for the  save
    
      
	  /*$('#landingpages-listeners').on('click','.saveLandingPageButton',function(e){
		   e.preventDefault();
		   // var flag=false;	    
            var id={"id":pageId};
            if (flag===false && isValidForm('#landingPageBuilderForm') && pageId !== undefined && readData("landingpages-save-popup")!=="true") {
 
		    getTemplate("landingpages-save-popup-modal",id, undefined, function(ui){
		   	// var id={"id":pageId};
             $("#landingPagesSavePopup").html(ui).modal("show");
             $("#popup-msg").fadeOut(8000);
             flag=true;
       
       
      });
    }
    
   });*/
	 
	$('#landingpages-listeners').on('click', '#builderPageOptionsLink', function (e) {
		e.preventDefault();
		$(this).find('i').toggleClass('icon-plus').toggleClass('icon-minus');
		$("#builderPageOptions").slideToggle('fast');
	});

	$('#landingpages-listeners').on('click', '#landingPageSettingBtn', function (e) {
		e.preventDefault();

		$('#landingPageSettingForm').validate({
           rules: {
               sub_domain: {
                  required: true,
                  lpsubdomain: true
             	}, 
				domain: {
                  required: true,
                  lpdomain: true
             	},
			 	directory_path: {
				  required: false,
				  lpdirectorypath: true
             	}
           }
       	});
		
		if (!$('#landingPageSettingForm').valid()) {
			return;			
		}
	
		var mainDomain = $("#domain").val();
		var forPageId = $(this).data("pageid");

		$.get("core/api/landingpages/has-rights-to-add-domain?domain="+mainDomain.toLowerCase(), function(data) {
			if(data.result) {
				var $btn = $("#landingPageSettingBtn").button('loading');
				landingPageSaveCnameSettings(forPageId,"http://"+$("#sub_domain").val()+"."+mainDomain+"/"+$("#directory_path").val());
      			$btn.button('reset');
			} else {
				landingPageShowAlertMessage("You cannot add this ("+mainDomain+") domain. It is used in other agile CRM account.","alert-danger");
			}
		});
	});

	$('#landingpages-listeners').on('keyup', '#sub_domain', function (e) {
		$("#landingPageVerifyBtn").hide();
		if($("#cnameInstructionMessage").is(':hidden')) {
			$("#cnameInstructionMessage").show();
		}
		$("#cnameHostVal").html($(this).val());
	});
	
	$('#landingpages-listeners').on('keyup', '#domain', function (e) {
		$("#landingPageVerifyBtn").hide();
	});

	$('#landingpages-listeners').on('click', '.lpBuilderMenuItem', function(e){
		e.preventDefault();
		var builderIFrame = document.getElementById('landingPageBuilder').contentWindow;
		var selectorId = $(this).data("id");
		var selector = '#'+selectorId+'AgileId';

		if($(this).hasClass("active")) {
			builderIFrame.$('#elements-container').hide();
			$(this).removeClass("active");
		} else {
			builderIFrame.$('#elements-container').show();
			$('.lpBuilderMenuItem').removeClass("active");
			$(this).addClass("active");
		}

/*		if(selectorId == "inspector") {
			builderIFrame.$('#elementsPanelAgileId').addClass("hidden");
			builderIFrame.$('#elements-container').css("position","fixed");
			builderIFrame.$('#elements-container').css("left","");
			builderIFrame.$('#elements-container').css("right","0");
		} else {
			builderIFrame.$('#elementsPanelAgileId').removeClass("hidden");
			builderIFrame.$('#elements-container').css("position","absolute");
			builderIFrame.$('#elements-container').css("right","");
			builderIFrame.$('#elements-container').css("left","0");
		}*/
		
		builderIFrame.$(selector).trigger("click");
	});
    
	$('#landingpages-listeners').on('click', '.lpCodeEditorMenuItem', function(e){
		e.preventDefault();
		document.getElementById('landingPageBuilder').contentWindow.$('#codeEditorAgileId').trigger("click");
	});

	$('#landingpages-listeners').on('click', '#landingPageVerifyBtn', function (e) {
		 e.preventDefault();
		 var cnameEL = document.getElementById("cname");

		 if($("#cname").attr("href") != "") {
		 	$.get("core/api/landingpages/verifycname?domain="+cnameEL.hostname, function(data) {
		 		if(data.result) {
		 			landingPageShowAlertMessage("CNAME is correct. Found " + data.cnames[0],"alert-success");
		 		} else {
		 			if(typeof data.cnames != "undefined" && typeof data.cnames[0] != "undefined") {
		 				landingPageShowAlertMessage("CNAME is incorrect. Found " + data.cnames[0],"alert-danger");
		 			} else {
		 				landingPageShowAlertMessage("CNAME is not found.","alert-danger");
		 			}
		 		}
		 	});
		 }
	});
	
}

//creating an function for the publishih id whn the popup will appers Date 19/4/16
function onLandingPageSaved(landingPage) {
	landingPage.id;
}
  //for hiding the popup
    function hideLandingPopup(){
   	   $("#landingPagesSavePopup").modal("hide");
         }
  //function for the close button 
    function hideLandingpagePopup(){
   
        if($("#landingpages-save-popup").prop("checked"))
            storeData("landingpages-save-popup", true,10);
        else
            storeData("landingpages-save-popup", false,10);
         }
    function onLandingPageBuilderLoad() {
	$("#landingPageBuilderMenuNav").show();
     }

  function landingPageShowAlertMessage(message, type) {
	$("#statusMessageHolder").html('<div class="alert '+type+'" role="alert">'
	+ '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'
	+ message + '</div>');
   }

 function landingPageSaveCnameSettings(pageId,CNAME) {

    var cnameSettings = {
    "landing_page_id": pageId,
    "cname": CNAME.toLowerCase()
    };

    var requestType = "post";
    var message = "saved";

    var cnameId = $("#cname_id").val();
    if(cnameId) {
        var requestType = "put";
        cnameSettings["id"] = cnameId;
        message = "updated";
    }
      

    $.ajax({
        type: requestType, 
        url: 'core/api/landingpages/custom-domain',       
        data: JSON.stringify(cnameSettings),
        dataType: 'json',
        contentType: "application/json; charset=utf-8",
        success: function (obj) {
	       	if(obj["isDuplicateCName"]) {
				landingPageShowAlertMessage("Custom domain should be unique","alert-danger");
			} else {
				landingPageShowAlertMessage("Custom domain "+message+" successfully","alert-success");
				$("#cname_id").val(obj.id);
				$("#cname").attr("href",CNAME);
				$("#landingPageVerifyBtn").show();
			}
        },
    });

}

function formEmbedIFrameLoaded(iFrameEl) {
	if(iFrameEl) {
	    // iFrameEl.height = "";
	    // iFrameEl.height = iFrameEl.contentWindow.document.body.scrollHeight + "px";

	    var formParentEl = iFrameEl.parentElement;
	    if(formParentEl.className.indexOf("ui-draggable-dragging") == -1) {
		    var formIframeDoc = iFrameEl.contentWindow.document;

		    var afh = formIframeDoc.getElementById("agileFormHolder");
		    afh.removeChild(formIframeDoc.getElementsByTagName("style")[0]);
		    afh.removeChild(formIframeDoc.getElementsByTagName("script")[0]);		    

		    var formCode = afh.innerHTML;
		    formCode = formCode.replace('<div class="agile-custom-clear"></div>','');
		    formParentEl.innerHTML = "";
		    formParentEl.innerHTML = formCode;
		}
	}
}/**
 * local-storage.js deals with functions used to store data in the client side.
 * Stores in localstorage if available otherwise usrs cookies.
 * @module jscore
 */

/**
 * stores data with given name in local storage or cookies.
 * 
 * @param name
 *            name of the variable example : agile-email etc.
 * @param value
 *            value of the variable example: agilecrm@example.com
 * @param days
 *            time in days before the variable expires example : 15*365
 * @returns cookie
 */
function storeData(name, value, days)
{
	if(typeof(Storage) !== "undefined") {
		if(islocalStorageHasSpace()){
			localStorage.setItem(name, value);
		}
	} else {
	    createCookie(name, value, days);
	}
}

/**
 * Used to read a particular variable's value from local storage
 * 
 * @param name
 *            the name of the cookie variable to read example :
 *            agile-crm-session_start_time
 * @returns value of the cookie variable else it returns null
 */
function readData(name)
{
	if(typeof(Storage) !== "undefined") {
		return localStorage.getItem(name);
	} else {
	    return readCookie(name);
	}
}

/**
 * Used to delete a variable from storage
 * 
 * @param name
 *            name of the variable to be removed from the cookie
 */
function eraseData(name)
{

	if(typeof(Storage) !== "undefined") {
		return localStorage.removeItem(name);
	} else {
	    return eraseCookie(name);
	}
}

/**
 * This Function will clear the data for every 30days.
 */
function clearLocalStorage() {
	var currentDate = new Date();	
	var setExprDate = false;
	
    var localStorageSize = 1024 * 1024 * 5 - unescape(encodeURIComponent(JSON.stringify(localStorage))).length;
    if(localStorageSize < 1242597){
    	localStorage.clear();
    	setExprDate = true;
    }else{
    	//Getting the local Storage expire date.
    	var exprDate = localStorage.getItem('localStorageExpireDate');
    	//Check the expire date has value/not.
        if(exprDate){
        	exprDate = new Date(Date.parse(exprDate));
        	if(currentDate >= exprDate){
        		localStorage.clear();
        		setExprDate = true;
        	}
        }else{    	
        	setExprDate = true; 	
        }
    }
	
    //Set the expire date.
    if(setExprDate){
    	var updateDate = currentDate.getDate()+30;
    	currentDate.setDate(updateDate);
    	localStorage.setItem('localStorageExpireDate',currentDate);
    }
}

/**
 * This function will check the space is available in the local storage.
 */
function islocalStorageHasSpace(){
	var hasSpace = false;
	var fixedLimit = 1242597;
	var localStorageSize = 1024 * 1024 * 5 - unescape(encodeURIComponent(JSON.stringify(localStorage))).length;
	if(localStorageSize){
		if(localStorageSize > fixedLimit){
			hasSpace = true;
		}
	}else{
		hasSpace = true;
	}
	return hasSpace;
}

(function($) {
	clearLocalStorage();
    releaseAllAgileCookies();
})(jQuery);


// New localstorage prefs 
function _agile_get_prefs(key){

    //  Checks in cookie first. If it is present delete from cookie and reset to localstorage and returns the value
    var value = readCookie(key);
    if(value != null && value != undefined && value != "null"){

    	// Remove value from cookie and 
    	eraseCookie(key);

    	// Set in localstorage
    	storeData(key, value);
    }

    return readData(key);
}

function _agile_set_prefs(key, value, days){
        storeData(key, value, days);
}

function _agile_delete_prefs(key){
        eraseData(key);
}

// Release all cookies for first time
function releaseAllAgileCookies(){

    // Get release prefs cookie
    if(_agile_get_prefs("agileReleasedAllCookies"))
          return;

    var sessionCookieName = "JSESSIONID";

    // Split document.cookie into array at each ";" and iterate through it
    var ca = document.cookie.split(';');
    for ( var i = 0; i < ca.length; i++)
    {
        var c = ca[i];

        // Check for ' ' and remove to get string from c
        while (c.charAt(0) == ' ')
            c = c.substring(1, c.length);

        // check if nameEQ starts with c, if yes unescape and return its value
        if (c.indexOf(sessionCookieName) == 0)
             continue;
         
        // Remove from cookie
        eraseCookie(c);
    }

    _agile_set_prefs("agileReleasedAllCookies", "done");

}/**
 * md5.js deals with implementing the md5 cryptographic hash function 
 * which takes arbitrary-sized data and output a fixed-length (16) hash value.
 */
var Agile_MD5 = function (string) {

        function RotateLeft(lValue, iShiftBits) {
            return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
        }

        function AddUnsigned(lX, lY) {
            var lX4, lY4, lX8, lY8, lResult;
            lX8 = (lX & 0x80000000);
            lY8 = (lY & 0x80000000);
            lX4 = (lX & 0x40000000);
            lY4 = (lY & 0x40000000);
            lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
            if (lX4 & lY4) {
                return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
            }
            if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                    return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                } else {
                    return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                }
            } else {
                return (lResult ^ lX8 ^ lY8);
            }
        }

        function F(x, y, z) {
            return (x & y) | ((~x) & z);
        }

        function G(x, y, z) {
            return (x & z) | (y & (~z));
        }

        function H(x, y, z) {
            return (x ^ y ^ z);
        }

        function I(x, y, z) {
            return (y ^ (x | (~z)));
        }

        function FF(a, b, c, d, x, s, ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        function GG(a, b, c, d, x, s, ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        function HH(a, b, c, d, x, s, ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        function II(a, b, c, d, x, s, ac) {
            a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
            return AddUnsigned(RotateLeft(a, s), b);
        };

        function ConvertToWordArray(string) {
            var lWordCount;
            var lMessageLength = string.length;
            var lNumberOfWords_temp1 = lMessageLength + 8;
            var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
            var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
            var lWordArray = Array(lNumberOfWords - 1);
            var lBytePosition = 0;
            var lByteCount = 0;
            while (lByteCount < lMessageLength) {
                lWordCount = (lByteCount - (lByteCount % 4)) / 4;
                lBytePosition = (lByteCount % 4) * 8;
                lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
                lByteCount++;
            }
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
            lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
            lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
            return lWordArray;
        };

        function WordToHex(lValue) {
            var WordToHexValue = "",
                WordToHexValue_temp = "",
                lByte, lCount;
            for (lCount = 0; lCount <= 3; lCount++) {
                lByte = (lValue >>> (lCount * 8)) & 255;
                WordToHexValue_temp = "0" + lByte.toString(16);
                WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
            }
            return WordToHexValue;
        };

        function Utf8Encode(string) {
            string = string.replace(/\r\n/g, "\n");
            var utftext = "";

            for (var n = 0; n < string.length; n++) {

                var c = string.charCodeAt(n);

                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }

            }

            return utftext;
        };

        var x = Array();
        var k, AA, BB, CC, DD, a, b, c, d;
        var S11 = 7,
            S12 = 12,
            S13 = 17,
            S14 = 22;
        var S21 = 5,
            S22 = 9,
            S23 = 14,
            S24 = 20;
        var S31 = 4,
            S32 = 11,
            S33 = 16,
            S34 = 23;
        var S41 = 6,
            S42 = 10,
            S43 = 15,
            S44 = 21;

        string = Utf8Encode(string);

        x = ConvertToWordArray(string);

        a = 0x67452301;
        b = 0xEFCDAB89;
        c = 0x98BADCFE;
        d = 0x10325476;

        for (k = 0; k < x.length; k += 16) {
            AA = a;
            BB = b;
            CC = c;
            DD = d;
            a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
            d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
            c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
            b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
            a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
            d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
            c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
            b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
            a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
            d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
            c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
            b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
            a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
            d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
            c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
            b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
            a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
            d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
            c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
            b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
            a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
            d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
            c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
            b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
            a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
            d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
            c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
            b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
            a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
            d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
            c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
            b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
            a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
            d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
            c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
            b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
            a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
            d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
            c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
            b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
            a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
            d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
            c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
            b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
            a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
            d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
            c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
            b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
            a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
            d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
            c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
            b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
            a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
            d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
            c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
            b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
            a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
            d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
            c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
            b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
            a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
            d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
            c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
            b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
            a = AddUnsigned(a, AA);
            b = AddUnsigned(b, BB);
            c = AddUnsigned(c, CC);
            d = AddUnsigned(d, DD);
        }

        var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);

        return temp.toLowerCase();
    };/*JSON object for alert type modals and confirm modals*/
var GLOBAL_MODAL_MESSAGES = {
	"global_delete": "Are you sure you want to delete?",
	"global_error_title" : "Error",
	"global_validation_title" : "Validation",
	"global_error_message" : "Error occured. Please try again"
}
var MODAL_MESSAGES = {


	"delete" : {
		"title": "Delete",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"error" : {
		"title": "Error",
		"message" : "Error occured. Please Reload the page."
	},
	"retry" : {
		"title": "Error",
		"message" : GLOBAL_MODAL_MESSAGES.global_error_message
	},
	"delete_task" : {
		"title": "Delete Task",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_contact" : {
		"title": "Delete Contact",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_company" : {
		"title": "Delete Company",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_event" : {
		"title": "Delete Event",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_opportunity" : {
		"title": "Delete Deal",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_custom_field" : {
		"title": "Delete Custom field",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_milestone" : {
		"title": "Delete Milestone",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_stream" : {
		"title": "Delete Stream",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_calendar_prefs" : {
		"title": "Delete Calendar Preferences",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_lost_reason" : {
		"title": "Delete Loss Reason",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_deal_source" : {
		"title": "Delete Deal Source",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"event_drop" : {
		"title": "Update Event",
		"message" : "Are you sure about this change?"
	},
	"delete_user" : {
		"title": "Delete User",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_account" : {
		"title": "Delete Account",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_free_trial" : {
		"title": "Cancel Free Trial",
		"message" : "Are you sure you want to cancel your free trial?"
	},
	"delete_subscription" : {
		"title": "Delete Subscription",
		"message" : "Are you sure you want to cancel this subscription ?"
	},
	"delete_rule" : {
		"title": "Delete Rule",
		"message" : "Are you sure to delete a rule?"
	},
	"delete_facebook_linked_page" : {
		"title": "Delete",
		"message" : "Are you sure you want to delete this Form from your Facebook page?"
	},
	"delete_facebook_linked_page_error" : {
		"title": "Error",
		"message" : "To delete the Form from Page, Link your Facebook account which is associated to the Page."
	},
	"delete_campaign_logs" : {
		"title": "Delete Campaign logs",
		"message" : "Are you sure you want to delete all logs?"
	},
	"bulk_delete" : {
		"title": "Bulk Delete",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"delete_activity" : {
		"title": "Delete Activity",
		"message" : GLOBAL_MODAL_MESSAGES.global_delete
	},
	"unlink_facebook" : {
		"title": "Unlink Facebook",
		"message" : "Are you sure you want to unlink your Facebook account ?"
	},
	"regenerate_api_key" : {
		"title": "Regenerate API key",
		"message" : "Resetting the API Key will break all existing integrations you may have setup using the current key. Are you sure you want to reset the API key?"
	},
	"delete_tweet" : {
		"title": "Delete Tweet",
		"message" : "Are you sure you want to delete this tweet?"
	},
	"undow_retweet_status" : {
		"title": "Undow Retweet status",
		"message" : "Are you sure you want to undo retweet this status?"
	},

	"activity_error" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Category name should start with an alphabet and can not contain special characters other than underscore, space and hyphen"
	},
	"user_deleted" : {
		"title": "Delete",
		"message" : "User Deleted"
	},
	"download_error" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Error downloading a file!"
	},
	"number_validation" : {
		"title": GLOBAL_MODAL_MESSAGES.global_validation_title,
		"message" : "Please enter a valid number."
	},
	"freshbook_domain_error" : {
		"title": GLOBAL_MODAL_MESSAGES.global_validation_title,
		"message" : "Please Enter Domain Name only"
	},
	"contacts_merge_limit" : {
		"title": "Merge Contacts",
		"message" : "You can merge maximum of 2 records at a time with master record."
	},
	"empty_shop" : {
		"title": GLOBAL_MODAL_MESSAGES.global_validation_title,
		"message" : "Enter Shop name"
	},
	"won_milestone_delete_error" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "'Won' milestone cannot be changed now as the track already has deals."
	},
	"lost_milestone_delete_error" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "'Lost' milestone cannot be changed now as the track already has deals."
	},
	"multiple_conditions" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Sorry. You can't have multiple 'Between' conditions."
	},
	"add_error" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Failed to add."
	},
	"future_date" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please select Date/Time in future."
	},
	"select_plan" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please select a plan to proceed"
	},
	"change_plan" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please change your plan to proceed"
	},
	"social_access" : {
		"title": "Social Access",
		"message" : "You have to give access to your social account."
	},
	"tag_name_restriction" : {
		"title": "Tag Validation",
		"message" : "Tag name should start with an alphabet and cannot contain special characters other than underscore and space."
	},
	"on_call" : {
		"title": "Call",
		"message" : "Already on call."
	},
	"appointment_time" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please select appointment time."
	},
	"slot_booking" : {
		"title": "Slot Booking",
		"message" : "Looks like this slot is booked already. Please try another one."
	},
	"webrule_popup_limit" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Only one popup is allowed per webrule. You have already set a popup action for this webrule."
	},
	"duplicate_widget" : {
		"title": "Duplicate Widget",
		"message" : "A widget with this name exists already. Please choose a different name"
	},
	"no_twilio_numbers" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "You have no twilio numbers. Please buy or port a number in your Twilio account."
	},
	"no_verified_num" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "You have no verified numbers. Please verify number in your Twilio account."
	},
	"valid_details" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please enter valid details."
	},
	"valid_details_try_again" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please try again with valid details."
	},
	"active_connection" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "A connection is currently active."
	},
	"enter_shop_name" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Enter Shop name"
	},
	"name_not_valid" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Name not valid"
	},
	"duplicate_workflow" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please change the name and click on 'Create a Copy' again."
	},
	"linkedin_invalid_url" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "URL provided for linkedin is not valid"
	},
	"proper_amount" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "Please enter proper amount"
	},
	"twitter_invalid_url" : {
		"title": GLOBAL_MODAL_MESSAGES.global_error_title,
		"message" : "URL provided for Twitter is not valid"
	},

};/** The function is commented inorder to implement later. It shows Upgrade message to free users**/

var Nagger_Noty;
function showUpgradeNoty()
{
	if(!_billing_restriction.currentLimits.freePlan || agile_is_mobile_browser()){
		$(".free-user-alert-message").hide();
		return;
	}
	if(Current_Route == "subscribe" || Current_Route == "subscribe-plan" || Current_Route == "purchase-plan")
	{
		$(".free-user-alert-message").hide();
	}else{
		$(".free-user-alert-message").show();
	}

	// Returns if account if paid account
	/*if(!_billing_restriction.currentLimits.freePlan || agile_is_mobile_browser())
		return;
	
	if(Current_Route == "subscribe" || Current_Route == "subscribe-plan" || Current_Route == "purchase-plan")
	{
		return;
	}
	getTemplate("free-user-alert", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("#alert-message").html(template_ui).show();
		}, null);*/
	
	/*// If Noty is present already, then noty is initiated again
	if(Nagger_Noty && $("#" +Nagger_Noty).length > 0)
		return;
	
	
		// Show the first one after 3 secs
	showNotyPopUp("warning", get_random_message(), "topCenter", "none", function(){
			Nagger_Noty = null;
			Backbone.history.navigate('subscribe', {
				 trigger : true
				 });
		});*/
}

var CONTACTS_HARD_RELOAD = false;

/**
 * Shows noty popup for bulk actions like bulk contacts deletion, 
 * adding bulk contacts to campaign etc.
 * 
 * @param type - 
 *             type of noty. For e.g. noty of information type is blue.
 * @param message -
 *             message to be shown on noty.
 * @param position -
 *             position of noty like bottomRight, top etc.            
 *                     
 */
function bulkActivitiesNoty(type, message, position) {
	CONTACTS_HARD_RELOAD = true;
	
	message = message.message;
	message = Handlebars.compile("{{message}}")({message : message});

	// if no position, default bottomRight
	if(!position)
	{
		showNotyPopUp(type, message, "bottomRight")
		return;
	}
		
	// shows noty in given position
	showNotyPopUp(type, message, position)
}

/**
 * Loads files required for noty and calls notySetup to show 
 * noty with the given options.
 *
 * @param type - 
 *             type of noty. For e.g. noty of information type is blue.
 * @param message -
 *             message to be shown on noty.
 * @param position -
 *             position of noty like bottomRight, top etc.
 */
function showNotyPopUp(type, message, position, timeout, clickCallback) {
	if(type != 'null' && message !=  'null'){
		// for top position
		if(position == "top")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH
			+ 'lib/noty/layouts/top.js', LIB_PATH
			+ 'lib/noty/themes/default.js', function(){
				notySetup(type, message, position, timeout, clickCallback)
			});
		
		//for topCenter position
		if(position == "topCenter")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH
					+ 'lib/noty/layouts/topCenter.js', LIB_PATH
					+ 'lib/noty/themes/default.js', function(){
				          notySetup(type,message,position,timeout,clickCallback)
			});
		
		// for bottomRight position
		if(position == "bottomRight")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js',  LIB_PATH
					+ 'lib/noty/layouts/bottom.js', LIB_PATH
					+ 'lib/noty/layouts/bottomRight.js', LIB_PATH
					+ 'lib/noty/themes/default.js', function(){
						notySetup(type, message, position, timeout, clickCallback)
					});
		
		// for bottomLeft position
		if(position == "bottomLeft")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH
					+ 'lib/noty/layouts/bottomLeft.js', LIB_PATH
					+ 'lib/noty/themes/default.js', function(){
							notySetup(type, message, position, timeout, clickCallback)
					});	
		
		//for bottomCenter position
		if(position == "bottomCenter")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH
					+ 'lib/noty/layouts/bottomCenter.js', LIB_PATH
					+ 'lib/noty/themes/default.js', function(){
				          notySetup(type,message,position,timeout,clickCallback)
			});

		//for topCenter position
		if(position == "topCenter")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH
					+ 'lib/noty/layouts/topCenter.js', LIB_PATH
					+ 'lib/noty/themes/default.js', function(){
				          notySetup(type,message,position,timeout,clickCallback)
			});
		
		// for bottomLeft position
		if(position == "bottom")
			head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH + 'lib/noty/layouts/bottom.js', LIB_PATH
					+ 'lib/noty/themes/default.js', function(){
							notySetup(type, message, position, timeout, clickCallback)
					});	
	}
}

/**
 * Sets noty popup to show message in the given position and type.
 * 
 * @param type - 
 *             type of noty. For e.g. noty of information type is blue.
 * @param message -
 *             message to be shown on noty.
 * @param position -
 *             position of noty like bottomRight, top etc.*/
function notySetup(type, message, position, noty_timeout, clickCallback) {
		
	    // close all other noty before showing current
	    $.noty.closeAll()

		var n = noty({
			text : message,
			layout : position,
			type : type,
			animation : {
				open : {
					height : 'toggle'
				},
				close : {
					height : 'toggle'
				},
				easing : 'swing',
				speed : 500
				// opening & closing animation speed
			},
			
			timeout : noty_timeout != undefined ? (noty_timeout == "none" ? undefined : noty_timeout) : 20000, // delay for closing event. Set false for sticky
							// notifications
					
		});
	    
	    if(clickCallback && typeof clickCallback == "function" && n.options.id)
	    {
	    	Nagger_Noty = n.options.id;
	    	$("#" + n.options.id).on('click', function(e){
	    		clickCallback();
	    	})
	    }
	}

function get_random_message() {
	
	
/*	var trail_expiry_message;
	if(getPendingdaysIntrail() == 0)
		trail_expiry_message = "Your trail expired";
	else
		trail_expiry_message = "Your trial will expire in "+getPendingdaysIntrail()+" days";*/
	
	var	messages = ["You are using FREE limited version of Agile CRM. <span> Upgrade Now </span> "];
	var random = Math.floor((Math.random() * messages.length));
	// console.log(random + messages[random]);

	return messages[random];
}

var TRAIL_PENDING_DAYS;
var _TRAIL_DAYS = 14; 

function getPendingdaysIntrail()
{
	if(TRAIL_PENDING_DAYS)
		return TRAIL_PENDING_DAYS;
	
	if(!_billing_restriction || !_billing_restriction.createdtime)
		return (TRAIL_PENDING_DAYS = 14)
		
	var time = (new Date().getTime()/1000) - _billing_restriction.createdtime;
	
	var days = time / (24 * 60 *60)
	
	var TRAIL_PENDING_DAYS = _TRAIL_DAYS - days;
	
	if(TRAIL_PENDING_DAYS < 0)
	{
		TRAIL_PENDING_DAYS = 0;
	}
	
	TRAIL_PENDING_DAYS = Math.round(TRAIL_PENDING_DAYS);
	return TRAIL_PENDING_DAYS;
}$(function(){
	
	$("body_removed_event").on("click", "#track_visitors", function(e) {
		e.preventDefault();
		$("#setupContent").html('<p><iframe width="560" height="390" src="//www.youtube.com/embed/CWMelsl70H4" frameborder="0" allowfullscreen></iframe></p>');
	});
	$("body_removed_event").on("click", "#sync_new_signups", function(e) {
		e.preventDefault();
		$("#setupContent").html('<p><iframe width="560" height="390" src="//www.youtube.com/embed/CWMelsl70H4" frameborder="0" allowfullscreen></iframe></p>');
	});
	$("body_removed_event").on("click", "#automate_email", function(e) {
		e.preventDefault();
		$("#setupContent").html('<p><iframe width="560" height="390" src="//www.youtube.com/embed/RXOqougExkM" frameborder="0" allowfullscreen></iframe></p>');
	});
	$("body_removed_event").on("click", "#app_messages_popups", function(e) {
		e.preventDefault();
		$("#setupContent").html('<p><iframe width="560" height="390" src="//www.youtube.com/embed/XGouq0B_7G8" frameborder="0" allowfullscreen></iframe></p>');
	});
	
});/**
 * Defines a JSON of content to be shown in the respective route when collection
 * is empty. The content respective to each route is used to fill the slate
 * template which is shown when collection is empty, called from
 * base_collection.
 * 
 * Each current route key contacts title, description, learn_more, button_text,
 * route, modal_id, image
 * 
 * <P>
 * "KEY SHOULD BE CURRENT ROUTE"
 * </p>
 */
var CONTENT_JSON = {
	"contacts" : {
		"title" : "You do not have any contacts currently.",
		"description" : "Contacts are your customers or prospects that you interact with using Agile.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Contacts",
		"route" : "#",
		"modal_id" : "personModal",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"filter_results" : {
		"title" : "No contacts matching this criteria.",
		//"learn_more" : "click here to learn more",
		//"button_text" : "Add Contacts",
		"route" : "#",
		//"modal_id" : "personModal",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"filter_results_segments" : {
		"title" : "There are no contacts for the selected filter. Try refining the filters and the date range.",
		"route" : "#",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"filter_results_companies" : {
		"title" : "No companies matching this criteria.",
		//"learn_more" : "click here to learn more",
		//"button_text" : "Add Contacts",
		"route" : "#",
		//"modal_id" : "personModal",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"tag_results" : {
		"title" : "No contacts available with this tag.",
		//"learn_more" : "click here to learn more",
		//"button_text" : "Add Contacts",
		"route" : "#",
		//"modal_id" : "personModal",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"companies" : {
		"title" : "You do not have any companies currently.",
		"description" : "companies are prospects that you interact with using Agile.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Companies",
		"route" : "#",
		"modal_id" : "companyModal",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"workflows" : {
		"title" : "You do not have any Campaigns currently.",
		"description" : "Campaign or workflow is an intelligent sales and marketing automation process for sending your contacts relevant information at the right time.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Campaign",
		"route" : "#workflow-templates",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"deals" : {
		"title" : "No deals found.",
		"description" : "You either do not have any deals currently, or there are none matching the filter conditions. <br/>Deals are sales opportunities you track continuously throughout its lifecycle.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Deal",
		"route" : "#",
		"modal_id" : "opportunityModal",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"reports" : {
		"title" : "You do not have any reports currently.",
		"description" : "Reports are based on a variety of tags and filters and receive them periodically to constantly be in touch with your sales cycle and pipeline.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Report",
		"route" : "#report-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"activity-reports" : {
		"title" : "You do not have any activity reports currently.",
		"description" : "Get a periodic  email digest of various activities by users in Agile.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Report",
		"route" : "#activity-report-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"campaign-reports" : {
		"title" : "You do not have any campaign reports currently.",
		"description" : "Get a periodic  email digest of various campaign reports stats by users in Agile.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Report",
		"route" : "#campaign-report-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-filters" : {
		"title" : "You do not have any filters currently.",
		"description" : "Filters are used to sort contacts with a specific criteria to find patterns.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Filter",
		"route" : "#contact-filter-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-views": {
		"title" : "You do not have any custom views currently.",
		"description" : "View is collection of different fields and the order in which you would like them to appear.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add View",
		"route" : "#contact-view-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"no-tickets" : {
		"title" : "You do not have any Tickets currently.",
		"description" : "Tickets can be problem, incident, question or task escalated by your customers. Set up email forwarding to receive tickets.",
		"button_text" : "Set up forwarding",
		"route" : "#ticket-groups",
		"image" : "/img/clipboard.png"
	},
	"no-ticket-filters" : {
		"title" : "You do not have any Tickets Filters currently.",
		"description" : "Tickets Filters are set of conditions to view Tickets which satisfies conditions.",
		"image" : "/img/clipboard.png"
	},
	"dashboard" : {
		"contacts" : {
			"title" : "There is no recent activity",
			"description" : "Perhaps, you may want to create a <a href='#' modal_id='personModal' class='modal-form'>new contact</a>.",
			"icon" : "icon-group icon-3x"
		},
		"tasks" : {
			"title" : "You have no tasks due",
			"icon" : "icon-edit icon-3x"
		},
		"deals" : {
			"title" : "No ongoing deals for you",
			"icon" : "icon-money icon-3x"
		},
		"workflows" : {
			"title" : "No campaign activity yet",
			"description" : "Campaigns help you automate your communication with your customers.<br/>You can create a <a href='#workflow-add'>new campaign</a>.",
			"icon" : "icon-sitemap icon-3x"
		}
	},
	"email-templates" : {
		"title" : "You do not have any Email templates currently.",
		"description" : "Personalize and customize email templates for every scenario in the sales cycle.",
		"button_text" : "Add Email Template",
		"route" : "#emailbuilder-templates",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities" : {
		"title" : "No Contact activity recorded yet.",
		"description" : "Web and Campaign activity of your contacts is shown here.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/All_Activities" : {
		"title" : "No Contact activity recorded yet.",
		"description" : "Web and Campaign activity of your contacts is shown here.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Page_Views" : {
		"title" : "No web activity recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Email_Opened" : {
		"title" : "No email opens recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Email_Clicked" : {
		"title" : "No email clicks recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Unsubscribed" : {
		"title" : "No unsubscriptions recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Spam_Reports" : {
		"title" : "No spam reports recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Email_Hard_Bounced" : {
		"title" : "No hard bouces recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"contact-activities/Email_Soft_Bounced" : {
		"title" : "No soft bounces recorded yet.",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"webpages" : {
		"title" : "You do not have any Webpages currently.",
		"description" : "You can create a page easily by using our smart builder.",
		"button_text" : "Add Webpage",
		"route" : "#webpage-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"deal-filters" : {
		"title" : "You do not have any filters currently.",
		"description" : "Filters are used to sort deals with a specific criteria to find patterns.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Filter",
		"route" : "#deal-filter-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	"dashboards" : {
		"title" : "There are no user-defined dashboards.",
		"description" : "User-defined dashboards allow users to configure multiple dashboards with different dashlets for various purposes.",
		//"learn_more" : "click here to learn more",
		"button_text" : "Add Dashboard",
		"route" : "#add-dashboard",
		"image" : updateImageS3Path("/img/clipboard.png")
	},
	/*"web-rules" : {/All_Activities
		
		"title" : "Engage visitors on website",
		"description" : "Define web rules and engage your website visitors with smart popups, or perform automatic actions when contacts do (or don't do) something in your application or website. Checkout the <a href='https://github.com/agilecrm/agile-popups'>documentation</a>",
		"button_text" : "Add Web Rule",
		"route" : "#webrules-add",
		"image" : updateImageS3Path("/img/clipboard.png")
	}*/
	
};

/**
 * Fills the slate with the content respective to the current route in the
 * CONTENT_JSON
 */
function fill_slate(id, el, key) {
	var route_path = key;
	
	if(!route_path)
	{
		route_path = window.location.hash.split("#")[1];
	}

	// If content for current route is available in the CONTENT_JSON, slate
	// template is made with the content related to current route
	if (CONTENT_JSON[route_path]){

		var template_name = "", json = {};

		if((route_path == "contacts") && _agile_get_prefs('company_filter')){
			template_name = "empty-collection-model";
			json = CONTENT_JSON["companies"];
		} 	
		else if((route_path == "filter_results") && company_util.isCompany()){
			template_name = "empty-collection-model";
			json = CONTENT_JSON["filter_results_companies"];
		}
			
		else{
			template_name = "empty-collection-model";
			json = CONTENT_JSON[route_path];
		}
		
		getTemplate(template_name, json, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("#" + id, el).html($(template_ui));	
		}, $("#" + id, el));
		
	}
}

function getContactPadcontentKey(url)
{
	if(!url)
		return;
	
	if(url.indexOf('tag') > 0)
		return "tag_results";
	
	if(url.indexOf('filter') > 0)
		return "filter_results";
	
	return "contacts";
		
}

function getSegmentPadcontentKey(url)
{
	if(!url)
		return;
	
	return "filter_results_segments";
		
}

function getCompanyPadcontentKey(url)
{
	if(!url)
		return;
	
	if(url.indexOf('tag') > 0)
		return "tag_results";
	
	if(url.indexOf('filter') > 0)
		return "filter_results";
	
	return "companies";
		
}

/**
 * Show modal if add entity form is modal, it is used for contacts (adding new contact)
 */
$(function() {
	
	// Show activity modal
	$("body").on("click", ".modal-form", function(e) {
		e.preventDefault();
		var id = $(this).attr('modal_id');
		if(id == "opportunityModal")
			show_deal();
		else if(id == "personModal")
			addContactBasedOnCustomfields();
		else 
			$("#" + id).modal('show');
	});
});;var tpl_directory = {

    loadTemplates: function(views, callback) {

        var deferreds = [];

        $.each(views, function(index, view) {
            deferreds.push(load_urls_on_ajax_stop(CLOUDFRONT_PATH + "tpl/min/precompiled/" + FLAT_FULL_PATH + view + ".js" + "?_=" + _agile_get_file_hash(view + ".js")));
        });

        $.when.apply(null, deferreds).done(callback);
    }

};

$(function(){
     if(!HANDLEBARS_PRECOMPILATION)
          return;
      
     startFunctionTimer("loadtemplates");
     tpl_directory.loadTemplates(["contact-view", "case", "document", "workflow", "portlets", "web-rules", "landingpages", "settings", "admin", "admin-settings", "tickets"],
        function () {
            endFunctionTimer("loadtemplates");
        });
});/**
 * Global variable 'Is_Profile_Guider_Closed' is used to check whether user has
 * closed noty bar.
 */
var Is_Profile_Guider_Closed = false;

/*
 * Global values of each step.
 */
var Profile_Settings = {
	"Email" : "",
// "User_invited" : "#users",
// "Widgets" : 10
// "Share" : "#",
}

/**
 * Holds messages to be shown on each step ex: welcome, configuring email,
 * inviting users, sharing
 */
var Profile_Setup_Messages = {};

Profile_Setup_Messages.Welcome = "Welcome to Agile - the next generation CRM. I will be your tour guide.<a href='#' id='noty-welcome-user' style='text-decoration: none;'> Let's get you started."
Profile_Setup_Messages.Email = "Shake Hands. <a href='#email' style='text-decoration: none;'> Let's sync your emails first</a>. It's simple and secure.";
Profile_Setup_Messages.User_invited = "Emails will show up in the awesome timeline. It's time to invite your colleague";
Profile_Setup_Messages.Share = "Are you liking Agile? Spread the love.";

// Initial percentage after first time login
var Initial_Total = 65;

var Profile_Info = {
	"Welcome" : false,
	"Email" : false,
	// "User_invited" : false,
	// "Widgets" : false,
	"total" : Initial_Total
};

// Calculate based on tags added in 'OUR' domain
function calculate_profile() {

	// Get tags from global contact fetched from 'OUR' domain.
	var tags = Agile_Contact.tags;

	// If tags are not empty then return profile_info with basic information
	if (!tags || tags.length == 0)
		return Profile_Info;

	// Gets the initial count to calculate completed percentage (Percentage is
	// not show now)
	var total = Initial_Total;

	// Check to show welcome message or not
	var is_first_time_user = true;

	// Iterates thought each field in Profile_Settings and finds whether tag is
	// available in contact
	$.each(Profile_Settings, function(key, value) {
		// Replaces "_" with space, that is how tag is saved in 'our' domain
		var temp_key = key.indexOf("_") != -1 ? key.replace("_", " ") : key;

		// Checks if tag is available in contact. Sets true in JSON object if
		// tag is available, which indicates that step can be excluded from
		// showing in noty.
		if (tags.indexOf(temp_key) != -1) {
			Profile_Info[key] = true;

			// Calculates complete percentage
			total = total + value;
			is_first_time_user = false;
			return;
		}
	});

	// If user has tags (email, user invited etc) then welcome message is not
	// shown
	if (!is_first_time_user)
		Profile_Info["Welcome"] = !is_first_time_user;

	// Assigns percentage completeness or profile
	Profile_Info["total"] = total;

	return Profile_Info

}

function set_profile_noty() {

}

/**
 * Sets up noty message to be shown. It iterates though profile stats calculated
 * in calculate_profile() method and creates noty template with appropriate
 * message
 */
function set_profile_noty1() {
	console.log(Agile_Contact);
	if (jQuery.isEmptyObject(Agile_Contact))
		return;

	// Gets profile stats
	var profile_stats = calculate_profile();

	// Removes noty before building
	remove_profile_noty();

	$.each(profile_stats, function(key, value) {
		console.log(profile_stats);
		// If value is false, then noty is built with that respective message
		if (value == false) {
			var json = {};
			json.message = Profile_Setup_Messages[key];
			json.route = Profile_Settings[key];
			show_noty_on_top_of_panel(json);
			return false;
		}
	});

}

/**
 * Show noty and arranges home dashbord to adjust accordingly
 * 
 * @param content
 */
function show_noty_on_top_of_panel(content) {
	if (Is_Profile_Guider_Closed)
		return;

	$('body').find('#wrap').find('#notify-container').remove();
	$('body').find('#wrap').find('.navbar-fixed-top').css('margin-top', '0px');
	$('body').find('#wrap').find('#agilecrm-container').css('padding-top',
			'60px');

	$('body').find('#wrap').find('#notify-container').remove();
	
	getTemplate("sticky-noty", content, undefined, function(template_ui){
		if(!template_ui)
			  return;
		$('body').find('#wrap').prepend($(template_ui));
		$('body').find('#wrap').find('.navbar-fixed-top').css('margin-top', '34px');
		$('body').find('#wrap').find('#agilecrm-container').css('padding-top',
				'96px');

	}, null);
}

/**
 * Removes noty and re-arranges the navbar layout by removing 60px padding which
 * is added to show naoty
 */
function remove_profile_noty() {
	$('body').find('#wrap').find('#notify-container').remove();
	$('body').find('#wrap').find('.navbar-fixed-top').css('margin-top', '0px');
	$('body').find('#wrap').find('#agilecrm-container').css('padding-top',
			'60px');
}

$(function() {
	/**
	 * User can exlicitly disable noty in current session. Along with removing
	 * the noty a flag is set, which is checked before showing noty
	 */
	$("#content").on("click", "span.notify-close", function(e) {
				// Flat which indicates user has disables
				Is_Profile_Guider_Closed = true;
				$(this).parent().slideUp(
						"slow",
						function() {
							$('body').find('#wrap').find('.navbar-fixed-top')
									.css('margin-top', '0px');
							$('body').find('#wrap').find('#agilecrm-container')
									.css('padding-top', '60px');
						});
			});

	/**
	 * Removes welcome message and shows next step
	 */
	 $("#content").on("click", "#noty-welcome-user", function(e) {
		e.preventDefault();
		delete Profile_Info["Welcome"];
		set_profile_noty();

	})
});
/**
 * Creates Pubnub object and subscribe client channel as well as publish on
 * agile_CRM_Channel.
 * 
 */
function initToPubNub(callback)
{
	//console.log(Pubnub);
	// Pubnub already defined.
	if(Pubnub != undefined)
	 if (Pubnub != null){
		 if(callback)
			 callback();
	 	 return;
}

	// Pubnub not defined.
	var protocol = 'https';

	head.js(protocol + '://pubnub.a.ssl.fastly.net/pubnub-3.4.min.js', function()
	{
		// CREATE A PUBNUB OBJECT
		Pubnub = PUBNUB.init({ 'publish_key' : 'pub-c-e4c8fdc2-40b1-443d-8bb0-2a9c8facd274', 'subscribe_key' : 'sub-c-118f8482-92c3-11e2-9b69-12313f022c90',
			ssl : true, origin : 'pubsub.pubnub.com', });
		// Get compatibility with all browsers.
		// Pubnub.ready();

		// Subscribe to client channel. Receive tweet from social server.
		subscribeClientChannel(callback);
	});
}

/**
 * Subscribe client channel.
 */
function subscribeClientChannel(callback)
{
	Pubnub.subscribe({ channel : CURRENT_DOMAIN_USER.id + "_Channel", restore : false, message : function(message, env, channel)
	{
		//console.log(message);
		
		try{
			if((message || {}).type  == "call"){
				handleCallRequest(message);
			}else{
				// Display message in stream.
				handleMessage(message);	
			}
		}catch (e) {
		}

	}, // RECEIVED A MESSAGE.
	presence : function(message, env, channel)
	{
		console.log(message);
	}, // OTHER USERS JOIN/LEFT CHANNEL.
	connect : function()
	{
		console.log("Agile crm Connected");
		Pubnub.is_connected_call = true;
		
		if(callback)
			callback();
	
	}, // CONNECTION ESTABLISHED.
	disconnect : function(channel)
	{
		console.log(channel + " Disconnected");
	}, // LOST CONNECTION (OFFLINE).
	reconnect : function(channel)
	{
		console.log(channel + " Reconnected")
	}, // CONNECTION BACK ONLINE!
	error : function(channel)
	{
		console.log(channel + " Network Error")
	}, });
}

/**
 * Publish message (action of user) on agile_crm_Channel.
 */
function sendMessage(publishJSON)
{
	console.log("publish_message publishJSON: ");
	console.log(publishJSON);

	// Message to publish is empty.
	if (publishJSON == null)
		return;

	// Message has data.
	Pubnub.publish({ channel : "agile_crm_Channel", message : publishJSON, callback : function(info)
	{
		if (info[0])
			console.log("publish_message Successfully Sent!");
		else
		// The internet is gone. // TRY SENDING AGAIN!
		{
			console.log("publish_message unsuccessfull to Sent!");
			showNotyPopUp('information', "You are not connected with Twitter server or you have problem with connection!", "top", 5000);
			displayErrorInStream(publishJSON.stream);
			
			// How many streams are register.			
			Register_Counter++;
			
			// Register next stream.
			registerAll(Register_Counter);
			
			// sendMessage(publishJSON);
		}
	} });
}
$(function() {
	
	$("#referModal").on("click", 'ul li', function(e) {
		var data = $(this).attr("id");
		if(data == undefined)
			return;
		switch(data){
			case "write_blog":
				$("#referModal").find(".modal-body").html(getTemplate('refer-blog', {}));
				Agile_GA_Event_Tracker.track_event("Write a blog (Ref)");
				return;
			case "refer_friends":
				$("#referModal").modal("hide");
				Agile_GA_Event_Tracker.track_event("Refer Friends (Ref)");
				window.location = "#refer-friends";
				return;
			case "share_on_fb":
				if($.inArray("facebook_share", REFER_DATA.usedReferTypes) != -1)
					return;
				Agile_GA_Event_Tracker.track_event("Share on Facebook (Ref)");
				shareOnFacebook();
				return;
			case "follow_on_twitter":
				if($.inArray("twitter_follow", REFER_DATA.usedReferTypes) != -1)
					return;
				Agile_GA_Event_Tracker.track_event("Follow on Twitter (Ref)");
				var newwindow = window.open('cd_twitter.jsp?referral_type=follow','twitter','height=700,width=700,location=1');
				if (window.focus)
				{
					newwindow.focus();
				}
				return;
			case "tweet_about_us":
				if($.inArray("twitter_tweet", REFER_DATA.usedReferTypes) != -1)
					return;
				Agile_GA_Event_Tracker.track_event("Tweet about us (Ref)");
				$("#referModal").find(".modal-body").html(getTemplate('refer-tweet', {}));
				return;
			default:
				return;
		}
	});

	$("#referModal").on('click', '#blogMail', function(e){
		e.preventDefault();

		if($(this).attr('disabled'))
	   	     return;
		
		// If not a valid form return else serialize form data to parse
		if(!isValidForm($("#blogmailForm")))
			return;
		
		// Disables send button and change text to Sending...
		disable_send_button($(this));
		
		var json = serializeForm("blogmailForm");

		var $that = $(this);
		json.body = "Username: "+CURRENT_DOMAIN_USER.email+"<br>Domain: "+CURRENT_DOMAIN_USER.domain+"<br>Blog URL: "+json.body;
		// Replace \r\n with <br> tags as email is sent as text/html
		json.body = json.body.replace(/\r\n/g,"<br/>");
        

        $.ajax({

			type : 'POST',
			data : json,
			url : 'core/api/emails/contact-us',
			success : function()
			{
				enable_send_button($that);
				trackReferrals("blogpost");
				showNotyPopUp("information", "Your submission is successful, thank you.", "top");
				
			},
			error : function(response)
			{
				enable_send_button($that);
				showNotyPopUp("warning", data.responseText, "top");
			}
			});

	});

	$("#referModal").on('click', '#refer_by_tweet', function(e){
		e.preventDefault();

		if($(this).attr('disabled'))
	   	     return;
	   	var newwindow = window.open('cd_twitter.jsp?referral_type=tweet','twitter','height=700,width=700,location=1');
		if (window.focus)
		{
			newwindow.focus();
		}
	});

	$("#referModal").on('click', '#go_to_referrals', function(e){
		e.preventDefault();
		$("#referModal").find(".modal-body").html(getTemplate('refer-modal-body', REFER_DATA));
	});

	$("#referModal").on('click', '#refered_users', function(e){
		$("#referModal").modal('hide');
	});

});

function shareOnFacebook(){

	console.log("clicked");

	FB.getLoginStatus(function(response) {

		if (response.status === 'connected') {

			// save_user_info(response.authResponse['accessToken']);
			openFacebookModal();

		} else {

			console.log("login");

			FB.login(function(response) {
				if (response.authResponse) {
					// save_user_info(response.authResponse['accessToken']);
					openFacebookModal();
				}
			}, {
				scope : 'email'
			});
		}
	});
}

function openFacebookModal() {

	var feed_json = {
			method : 'feed',
			message : 'We\'re using ClickDesk live chat and help desk software to increase sales, conversions and customer happiness :)',
			link : 'https://www.agilecrm.com',
			name : 'CRM, Sales and Marketing Automation Software',
			caption : 'www.agilecrm.com.com',
			description : 'All-in-one powerful and affordable Customer Relationship Management (CRM) software with sales and marketing automation for small businesses. Sign up now!',
			picture : 'https://doxhze3l6s7v9.cloudfront.net/beta/static/images/agilecrm-logo.jpg',
			display : 'dialog'
		};

	console.log(feed_json);

	FB.ui(feed_json, function(response) {

		console.log(response);

		if (!response || !response.post_id) {
			console.log('post was not shared');
			return;
		}

		
		// Send success info to server to send email
		trackReferrals("facebook");
		addRefeferCredits("facebook");
	});

}

function addRefeferCredits(type) {

	$.ajax({url:'core/api/refer/share_on_fb',
			type:'POST',
			success:function(data){
				REFER_DATA.usedReferTypes.push("facebook_share");
				console.log("Emails added");
			},error: function(){
				console.log("Error occured");
			}
		});
}

function load_facebook_lib_for_referrals() {

	// Facebook
	head.js("https://connect.facebook.net/en_US/all.js", function() {

		window.fbAsyncInit = function() {
			FB.init({
				appId : "827039704106675",
				status : true,
				cookie : true,
				xfbml : true,
				oauth : true
			});
		};

		window.onload = function() {
			FB.Canvas.setAutoResize();
		}

	});

}

function trackReferrals(type){
	$("#referModal").find(".modal-body").html(getTemplate('refer-modal-body', REFER_DATA));
	if(type == undefined)
		return;
	switch(type){
			case "facebook":
				showNotyPopUp("information", "Your submission is successful, thank you.", "top");
				$("#share_on_fb").css("cursor", "not-allowed");
				$("#share_on_fb .refer-checked").removeClass("hide");
				sendReferralTrackMail("Shared on facebook");
				REFER_DATA.usedReferTypes.push("facebook_share");
				return;
			case "follow":
				showNotyPopUp("information", "You are following Agile CRM on Twitter. Congratulations!", "top");
				$("#follow_on_twitter").css("cursor", "not-allowed");
				$("#follow_on_twitter .refer-checked").removeClass("hide");
				sendReferralTrackMail("Following on twitter");
				REFER_DATA.usedReferTypes.push("twitter_follow");
				return;
			case "tweet":
				showNotyPopUp("information", "Your tweet has been posted successfully.", "top");
				$("#tweet_about_us").css("cursor", "not-allowed");
				$("#tweet_about_us .refer-checked").removeClass("hide");
				sendReferralTrackMail("Tweet");
				REFER_DATA.usedReferTypes.push("twitter_tweet");
				return;
			default:
				return;
		}
	//Agile_GA_Event_Tracker.track_event("refer_"+type,REFER_DATA.domain)
}
function sendReferralTrackMail(type, callback)
{
	var json = {};
	json.from=CURRENT_DOMAIN_USER.email;
	json.cc = "venkat@agilecrm.com";
	json.bcc = "mogulla@agilecrm.com";
	json.to = "shreyansh@agilecrm.com";
	json.subject = "Referrals feature used";	
	json.body = "Username: "+CURRENT_DOMAIN_USER.email+"<br>Domain: "+CURRENT_DOMAIN_USER.domain+"<br>Type: "+type;
	sendEmail(json);
}
function initializeRegenerateKeysListeners() {
    $(".prettyprint").css({
            "padding": "9px 15px; ",
            "border": "none"
    });

    $("#api_key_generate_icon").on("click",function(e) {
        e.preventDefault();
        regenerate_api_key('core/api/api-key/key');
    });
    $("#jsapi_key_generate_icon").off('click').on("click", function(e) {
        e.preventDefault();
        regenerate_api_key('core/api/api-key/jskey');
    });
}

function update_admin_settings_api_key_template(){
	$.ajax({
		url : 'core/api/api-key',
		type : 'GET',
		dataType : 'json', 
		success : function(data){

			getTemplate("admin-settings-api-key-model", data, undefined, function(template_ui){
				if(!template_ui)
					  return;

				$("#admin-prefs-tabs-content").html($(template_ui));
				 prettify_api_add_events();
			}, null);
		}
	})
}

function regenerate_api_key(url) {
    showAlertModal("regenerate_api_key", "confirm", function(){
        $.ajax({
            url: url,
            type: 'POST',
            success: function() {
                update_admin_settings_api_key_template();
            }
        })
    });
}

function prettify_api_add_events() {
    prettyPrint();

    initializeRegenerateKeysListeners();
    $("#update_allowed_domains").off('click');
    $("#update_allowed_domains").on('click', function(e) {
        e.preventDefault();
        $(this).attr("disabled", "disabled");
        var allowed_domains = get_allowed_domains();
        var new_allowed_domain = $("#new_allowed_domain").val();
        if (!new_allowed_domain || is_duplicate_allowed_domain(new_allowed_domain, allowed_domains)) {
            $(this).removeAttr("disabled");
            return;
        }
        allowed_domains = allowed_domains ? allowed_domains + ", " + new_allowed_domain : new_allowed_domain;
        put_allowed_domains(allowed_domains);
    });
$("#webhook_accordian").on('click', function(e) {
        e.preventDefault();
        if($("#webhook-accordian-template").html() != "")
            return;
        setTimeout(function(){
             App_Admin_Settings.webhookSettings();
        },500)
       
    });

 $("sendgrid-dkim_accordian").off('click');
 $("#sendgrid-dkim_accordian").on('click', function(e) {
    e.preventDefault();
    var view = new Base_Model_View({ url : '/core/api/emails/sendgrid/permission', template : "admin-setting-sendgrid-whitelabel-permission",
    
        postRenderCallback : function(e)
            {
               if($("#sendgrid-dkim-restriction-template").html().search("undefined")==-1)
                    {
                        $("#get_whitelabel_key").attr("disabled",true);
                        $("#validate_whitelabel").attr("disabled",true);
                        $("#whitelabel-domain").attr("disabled",true);
                    }
                else
                {
                    $("#get_whitelabel_key").attr("disabled",false);
                    $("#validate_whitelabel").attr("disabled",false);
                    $("#whitelabel-domain").attr("disabled",false);
                    $("#sendgrid-dkim-restriction-template").html("");
                }
                console.log( $("#sendgrid-dkim-restriction-template").html()+"hhh");
            }
       });
    $("#sendgrid-dkim-restriction-template").html(view.render().el);
    return;
    });

$("#js-security_accordian").on('click', function(e) {
        e.preventDefault();
        if($("#js-security-accordian-template").html() != "")
            return;
        setTimeout(function(){
             App_Admin_Settings.jsSecuritySettings();
        },500)
       
    });

    $(".allowed-domain-delete").off('click');
    $(".allowed-domain-delete").on('click', function(e) {
        e.preventDefault();
        $(this).closest("tr").remove();
        var allowed_domains = get_allowed_domains();
        put_allowed_domains(allowed_domains);
    });

   
        
        $("#get_my_ip").on('click',function(e){
             $("#new_blocked_ip").val(USER_IP_ADDRESS);
              $("#ip_error_message").addClass("hide");
            $("#empty_ip_message").addClass("hide");
        });
  
    $("#update_blocked_ips").off('click');
    $("#update_blocked_ips").on('click', function(e) {
        e.preventDefault();
        $("#ip_error_message").addClass("hide");
            $("#empty_ip_message").addClass("hide");
        $(this).attr("disabled", "disabled");
        var blocked_ips = get_blocked_ips();
        var new_blocked_ip = $("#new_blocked_ip").val();
        if (!new_blocked_ip || is_duplicate_blocked_ip(new_blocked_ip, blocked_ips) || !is_valid_ip(new_blocked_ip)) {
            $(this).removeAttr("disabled");
            
            if(is_duplicate_blocked_ip(new_blocked_ip, blocked_ips))
            $("#ip_error_message").removeClass("hide");
            else
            $("#empty_ip_message").removeClass("hide");  
            return;
        }
        blocked_ips = blocked_ips ? blocked_ips + ", " + new_blocked_ip : new_blocked_ip;
        put_blocked_ips(blocked_ips);
        $("#ip_error_message").addClass("hide");
        $("#empty_ip_message").addClass("hide");

    });

    $(".blocked-ip-delete").off('click');
    $(".blocked-ip-delete").on('click', function(e) {
        e.preventDefault();
        $(this).closest("tr").remove();
        var blocked_ips = get_blocked_ips();
        put_blocked_ips(blocked_ips);
    });

    //Sendgrid DKIM and SPF verification
    $("#get_whitelabel_key").off('click');
    $("#get_whitelabel_key").on('click', function(e) {
        e.preventDefault();
         $("#sendgrid-whitelabel-key-template").html("");
        var whitelabel_domain = $("#whitelabel-domain").val();

        var pattern = /^[a-z0-9-\.]+\.[a-z]{2,4}/;
        if(!pattern.test(whitelabel_domain))
             $("#empty_domain_message").removeClass("hide");
         else
         {
             $("#empty_domain_message").addClass("hide");
             getSendgridWhitelabel(whitelabel_domain)
         }
    });

    $("#validate_whitelabel").off('click');
    $("#validate_whitelabel").on('click', function(e) {
        e.preventDefault();
         $("#sendgrid-whitelabel-key-template").html("");

        var whitelabel_domain = $("#whitelabel-domain").val();
        var pattern = /^[a-z0-9-\.]+\.[a-z]{2,4}/;
        if(!pattern.test(whitelabel_domain))
             $("#empty_domain_message").removeClass("hide");
         else
         {
             $("#empty_domain_message").addClass("hide");
             validateSendgridWhitelabel(whitelabel_domain)
         }
    });


    try {
        if (ACCOUNT_PREFS.plan.plan_type.split("_")[0] == "PRO" || ACCOUNT_PREFS.plan.plan_type.split("_")[0] == "ENTERPRISE")
            $("#tracking-webrules, .tracking-webrules-tab").hide();
        else
            $("#tracking-webrules-whitelist, .tracking-webrules-whitelist-tab").hide();
    } catch (e) {
        $("#tracking-webrules-whitelist, .tracking-webrules-whitelist-tab").hide();
    }
}

function getSendgridWhitelabel(domainName)
{   
     var view = new Base_Model_View({ url : '/core/api/emails/sendgrid/whitelabel?emailDomain='+domainName,
     template : "admin-setting-sendgrid-whitelabel",
    });
  $("#sendgrid-whitelabel-key-template").html(view.render().el);
}


function validateSendgridWhitelabel(domainName)
{   
   var view = new Base_Model_View({ url : '/core/api/emails/sendgrid/whitelabel/validate?emailDomain='+domainName,
     template : "admin-setting-sendgrid-whitelabel-validate",
    });
  $("#sendgrid-whitelabel-key-template").html(view.render().el);
}var businessHoursManager;



function initializeOnlineCalendarListners(el){
	
	 $("#online-cal-listners").off();
	 
	 $("#online-cal-listners #btnSerialize").off("click");
	 $("#online-cal-listners").on("click","#btnSerialize", function(e){
			e.preventDefault();

			var saveBtn = $(this);
			disable_save_button($(saveBtn));
			if (!$.trim($("#15mins").val()) && !$.trim($("#30mins").val()) && !$.trim($("#60mins").val()))
			{
				enable_save_button($(saveBtn));
				$('#meeting_duration_message').fadeIn('slow');
				setTimeout(function()
				{
					$('#meeting_duration_message').fadeOut('slow');
				}, 5000);
				return;
			}

			if ($("#15mins").val().charCodeAt(0) == ' ' && $("#30mins").val().charCodeAt(0) == ' ' && $("#60mins").val().charCodeAt(0) == ' ')
			{
				enable_save_button($(saveBtn));
				$('#meeting_duration_message').fadeIn('slow');
				setTimeout(function()
				{
					$('#meeting_duration_message').fadeOut('slow');
				}, 5000);
				return;
			}
			var data = $('#scheduleurl').text();
			var scheduling_id = data.substr(data.lastIndexOf("/") + 1);
			var url = data.substr(0, data.lastIndexOf("/") + 1);
			var json = serializeForm("scheduleform");
			var meeting_durations = formToJSON();
			console.log(meeting_durations);

			var business_hours = JSON.stringify(businessHoursManager.serialize());

				json['business_hours'] = business_hours;
				json['meeting_durations'] = meeting_durations;
				json['schedule_id'] = scheduling_id;
				json['bufferTime'] = $("#bufferTime").val();
				json['bufferTimeUnit'] = $("#bufferTimeUnit").val();
				json['user_calendar_title']=$(".online_summer_note").code();
				console.log(business_hours);

			// $("#schedule-preferences").html(getRandomLoadingImg());
				$.ajax({ url : '/core/api/scheduleprefs', type : 'PUT', contentType : 'application/json', data : JSON.stringify(json),
					success : function()
					{
						setTimeout(function()
						{
							enable_save_button($(saveBtn));
						}, 2000);
						$('#error_message').empty();
					}, error : function(error)
					{
						$('#error_message').html("There was an error in saving your settings. Please try again in a minute.");
						enable_save_button($(saveBtn));
						
					} });
		});

$("#online-cal-listners #edit-schedule-id").off("click");
$("#online-cal-listners").on("click","#edit-schedule-id", function(e){
					e.preventDefault();
					var data = $('#scheduleurl').text();
					var scheduling_id = data.substr(data.lastIndexOf("/") + 1);
					var url = data.substr(0, data.lastIndexOf("/") + 1);
					console.log(url + "   " + scheduling_id);
					$("#edit").hide();
					$("#scheduleurl").removeAttr("href");
					$('#scheduleurl')
							.html(
									url + "<input class='input-sm inline-block form-control' style='width:140px' type='text'  name='url' id='url' value='" + scheduling_id + "'/><buttion class='btn btn-primary btn-sm inline-block m-l-sm' id='save-scheduleurl'>Save</button>");

					$("#scheduleurl").addClass("nounderline");
					$('#scheduleModal').data('modal', null);

				});

$("#online-cal-listners #save-scheduleurl").off("click");
$("#online-cal-listners").on("click","#save-scheduleurl", function(e){
			e.preventDefault();
			var data = $("#url").val();
			if (data.length < 4)
			{
				$('#charlength').fadeIn('slow');
				setTimeout(function()
				{
					$('#charlength').fadeOut('slow');
				}, 2000);
				return;
			}

			var regex = /^[0-9a-zA-Z\_]+$/
			if (!(regex.test(data)))
			{
				$('#specialchar').fadeIn('slow');
				setTimeout(function()
				{
					$('#specialchar').fadeOut('slow');
				}, 2000);
				return;
			}

			var saveBtn = $(this);
			disable_save_button($(saveBtn));
			$.ajax({
				url : '/core/api/scheduleprefs/updateId?scheduleid=' + data + '&domainId=' + CURRENT_DOMAIN_USER.id,
				type : 'GET',
				datatype : "json",
				success : function(user)
				{
					var onlineschedulingURL = "https://" + CURRENT_DOMAIN_USER.domain + ".agilecrm.com/calendar/" + user.schedule_id;
					$("#scheduleurl").attr("href", onlineschedulingURL);
					$("#scheduleurl").text(onlineschedulingURL);

					$("#scheduleurl").removeClass("nounderline");
					enable_save_button($(saveBtn));
					$("#edit").show();
					$("#specialchar").hide();
					$("#charlength").hide();
					$("#scheduleurl").removeClass("nounderline");

				},
				error : function(error)
				{

					console.log(error);
					$('#schedule_error_message').html(
							'Something went wrong as your schedule url was not updated. Please try again in few hours. Error: ' + error.statusText);
					$('#schedule_error_message').fadeIn('slow');
					setTimeout(function()
					{
						$('#schedule_error_message').fadeOut('slow');
					}, 2000);
					enable_save_button($(saveBtn));
					return;
				} });

		});
	
	$("#online-cal-listners #calendar_advanced").off("click");
	$("#online-cal-listners").on("click","#calendar_advanced", function(e)
	{
		e.preventDefault();
		$("#calendar_advanced span i").toggleClass("fa-minus");
		$("#calendar_advanced span i").toggleClass("fa-plus");

	});

	$("#online-cal-listners #calendar_advanced_block").off("shown");
	$("#online-cal-listners").on("shown","#calendar_advanced_block", function(e)
	{
		$('#calendar_advanced').html('<span><i class="icon-minus"></i></span> Advanced');

	});

	$("#online-cal-listners #calendar_advanced_block").off("hidden");
	$("#online-cal-listners").on("hidden","#calendar_advanced_block", function(e)
	{
		$('#calendar_advanced').html('<span><i class="icon-plus"></i></span> Advanced');
	});

	$("#online-cal-listners #bufferTime").off("keypress");
	$("#online-cal-listners").on("keypress","#bufferTime", function(e){
		// if the letter is not digit then display error and don't type anything
		if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57))
		{
			// display error message
			$("#errmsg").html("Digits Only").show().fadeOut(3000);
			return false;
		}
	});

	$("#online-cal-listners .onlineCalendarAddToSite").off("click");
	$("#online-cal-listners").on("click",".onlineCalendarAddToSite", function(e)
	{
		e.preventDefault();

        console.log("asadfas");

        $("body #onlineCalendarAddToSite").remove();

		getTemplate('online-calendar-addtosite', {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			onlineCalendarModel = $(template_ui);
			onlineCalendarModel.modal('show');	
		}, null);	

	});
/*
     $("#online-cal-listners a[href='#calendar-tab']").unbind("click");
	 $('#online-cal-listners a[href="#calendar-tab"]').on('click', function(e) {
			e.preventDefault();
			$(el).find('#calendar-tab').html(LOADING_ON_CURSOR);
			online_calendar_tabs.loadScheduleUrlTab(el);
	  });
	 $("#online-cal-listners a[href='#businesshours-tab']").unbind("click");
	$('#online-cal-listners a[href="#businesshours-tab"]').on('click', function(e) {
		e.preventDefault();
		$(el).find('#businesshours-tab').html(LOADING_ON_CURSOR);
		online_calendar_tabs.loadBusinessHoursTab(el);
	  });
	 $("#online-cal-listners a[href='#meeting-types-tab']").unbind("click");
	$('#online-cal-listners a[href="#meeting-types-tab"]').on('click', function(e) {
		e.preventDefault();
		$(el).find('#meeting-types-tab').html(LOADING_ON_CURSOR);
		online_calendar_tabs.loadMeetingtypesTab(el);
	  });
	$("#online-cal-listners a[href='#advanced-tab']").unbind("click");
	$('#online-cal-listners a[href="#advanced-tab"]').on('click', function(e) {
		e.preventDefault();
		$(el).find('#advanced-tab').html(LOADING_ON_CURSOR);
		online_calendar_tabs.loadAdvancedTab(el);
	  });*/


	// $("#onlineCalendarAddToSite .getStartedToAddToSite").off("click");	
}

$("body").on("click",".getStartedToAddToSite", function(e)
		{

			e.preventDefault();
			Backbone.history.navigate("webrules-add", { trigger : true });
			if (onlineCalendarModel)
				onlineCalendarModel.modal('hide');
			onlineCalendarModel = null;

			getHtmlContent(function(html_content)
			{
				setTimeout(function()
				{
					tinyMCECallBack("tinyMCEhtml_email", html_content);
				}, 1000);
			});

		});


function getHtmlContent(callback)
{
	$.get("/misc/modal-templates/schedule/popout/pop-out.html", function(data)
	{
		return callback(data);
	});
}

/**
 * meeting duration form will be serialized manually becoz to trim spaces
 * 
 * @returns serialized meeting duration form.
 */

function formToJSON()
{
	return JSON.stringify({ "15mins" : $('#15mins').val().trim(), "30mins" : $('#30mins').val().trim(), "60mins" : $('#60mins').val().trim() });
}
/**
 * sound.js plays sounds within the browser. It uses HTML5 Audio to play sounds.
 * @param sound - sound name.
 **/
// Global variable to use in twilio.js
audio = null;

function play_sound(sound, is_web_url)
{
	var sound_url;

	if(sound)
		sound_url = '../res/' + sound + '.mp3';
	else
		sound_url = '../res/sound.wav';
	
	if(is_web_url)
		sound_url = sound
	try
	{
		// If browser supports html5 audio
		audio = new Audio(sound_url);
		audio.autoplay = true;
		audio.play();
	}
	catch (err)
	{
		console.log("Error occured while playing sound " + err);
	}
}


/**
 * Set image URL in tinymce upload editor
 * @param url
 */
function setTinyMCEImageUploadURL(url){
	
	var elem = $(".mce-abs-layout").find("input")[0];
    $(elem).val(url).trigger("change");
    
}/**
 * TinyMCE is a platform independent web based Javascript HTML WYSIWYG editor.
 * TinyMCE has the ability to convert HTML TEXTAREA fields or other HTML
 * elements to editor instances.
 * 
 * @author Naresh
 */

var CONTACT_CUSTOM_FIELDS = undefined;

/**
 * Sets up tinymce HTML Editor on given selector
 * 
 * @param selector -
 *            id of HTML element e.g., textarea#email-body
 * 
 */
function setupTinyMCEEditor(selector, noAgileContactFields, plugins, callback)
{
	
	// Id undefined
	if (selector === undefined)
	{
		console.log("selector is undefined...");
		return;
	}
	
	// Show loading image instead of textarea
	$('#loading-editor').html(getRandomLoadingImg());
	
	var toolbar_2 = "bullist numlist | outdent indent blockquote | forecolor backcolor | merge_fields | preview | code";
	
	// Remove Agile Contact fields button
	if(noAgileContactFields)
		toolbar_2 = "bullist numlist | outdent indent blockquote | forecolor backcolor | preview | code";
	
	var default_plugins = ["textcolor link image preview code fullpage"];
	
	// If no plugins, assign default
	if(!plugins)
		plugins = default_plugins;
	
	// Init tinymce first time
	if (typeof (tinymce) === "undefined")
	{
		head.js('/js/designer/tinymce/tinymce.min.js', function()
		{
			get_custom_fields(function(data){

				// If loading src script fails
				if(typeof (tinymce) === "undefined")
				{
					console.log("Reloading script...");
					
					// Show confirmation for reload
					
					if(confirm("Unable to load editor. Click OK to Reload."))
					  location.reload();

					
					return;
				}
				
				// Show textarea and remove loading img
				$(selector).css('display', '');
				$('#loading-editor').html("");
				
				tinymce.init({ mode : "exact", selector : selector, plugins : plugins,
				    menubar : false,
					toolbar1 : "bold italic underline | alignleft aligncenter alignright alignjustify | link image | formatselect | fontselect | fontsizeselect",
					toolbar2 : toolbar_2, valid_elements : "*[*]",
					toolbar_items_size: 'small',
					browser_spellcheck : true,
					relative_urls : false,
					convert_urls : false,
			        gecko_spellcheck: true,
			        forced_root_block : false,
					extended_valid_elements : "*[*]", setup : function(editor)
					{
						editor.addButton('merge_fields', { type : 'menubutton', text : 'Merge Fields', icon : false, menu : set_up_merge_fields(editor) });
					}
					});
				
				// callback after tinymce initialised
		    	setTimeout(function(){
		    		if(callback != undefined && typeof (callback) === "function")
		    		callback();
		    		},500);

			});

			
		});
    	
		return;
	}

	// if tinymce instance exists, reinitialize tinymce on given selector
	if (selector.indexOf('#') !== -1)
		selector = selector.split('#')[1];

	// Add custom toolbar
	tinymce.settings.toolbar2 = toolbar_2;
	
	// Add required plugins
	tinymce.settings.plugins = plugins;
	
	// reinitialize tinymce
	reinitialize_tinymce_editor_instance(selector, callback);
		
}

/**
 * Sets given content in tinymce.
 * 
 * @param selector -
 *            id of an element without '#' e.g., email-body
 * @param content -
 *            content to be inserted
 * 
 */
function set_tinymce_content(selector, content)
{
	try
	{
		if(typeof (tinymce) !== "undefined")
		{
			tinymce.get(selector).setContent(content);
		}
	}
	catch (err)
	{
		console.log("error occured while setting content...");
		console.log(err);
	}
}

/**
 * Saves tinymce content back to textarea.
 * 
 * @param selector -
 *            id of an element without '#'
 */
function save_content_to_textarea(selector)
{
	try
	{
		if(typeof (tinymce) !== "undefined")
			tinymce.get(selector).save();
	}
	catch (err)
	{
		console.log("error occured while saving content to textarea...");
		console.log(err)
	}
}

/**
 * 
 * Triggers all tinymce editors save. It is used in base-modal to save
 * content back to textarea before form serialization.
 * 
 **/
function trigger_tinymce_save()
{
	try
	{
		if(typeof (tinymce) !== "undefined")
			tinymce.triggerSave();
	}
	catch(err)
	{
		console.log("error occured while triggering tiny save...");
		console.log(err);
	}
}
/**
 * Re-initialize HTML Editor on given selector using existing tinymce.
 * 
 * @param selector -
 *            id of an element without '#'
 */
function reinitialize_tinymce_editor_instance(selector, callback)
{
	try
	{
		// Calling duplicate instances won't setup tinymce. So remove previous
		// instance
		remove_tinymce_editor_instance(selector);

		// Surrounded within timeout to work in Firefox
	    setTimeout(function(){

	    	// Show textarea and remove loading img
	    	$('#loading-editor').html("");
	    	$('#'+ selector).css('display', '');
			
	    	tinymce.EditorManager.execCommand('mceAddEditor', true, selector);
	    	
	    	// callback after tinymce re-initialised
	    	if(callback != undefined && typeof (callback) === "function")
	    		callback();
	    		
	    	// Show hidden tinymce
	    	$('.mce-tinymce').css('display', '');

	    }, 100);
	
	}
	catch (err)
	{
		console.log("error occured while reinitializing tinymce...");
		console.log(err)
	}
}

/**
 * Removes tinymce instance on given selector
 * 
 * @param selector -
 *            id of an element without '#'
 */
function remove_tinymce_editor_instance(selector)
{
	try
	{
		// Removes all tinymce editors 
		for(var i=0; i < tinymce.editors.length; i++)
		{
			tinyMCE.remove(tinyMCE.editors[i]);
		}
		
		//tinymce.EditorManager.execCommand("mceRemoveEditor", false, selector);
	}
	catch (err)
	{
		console.log("error occured while removing tinymce editor instance...");
		console.log(err);
	}

}

/**
 * Set up merge fields as menu button in Editor
 * 
 * @param editor -
 *            editor instance
 */
function set_up_merge_fields(editor)
{
	var menu = [];

	var contact_json;

	// Get Current Contact json for merge fields
	if (App_Contacts.contactDetailView != undefined && App_Contacts.contactDetailView.model != undefined)
		contact_json = get_contact_json_for_merge_fields();

	// Iterates over merge fields and builds merge fields menu
	//$.each(get_merge_fields(), function(key, value)
	$.each(get_merge_field_objs(), function(key, value)
	{	
		var main_menu_item = {};
		main_menu_item["text"] = key;

		var sub_menu = [];

		$.each(value, function(key, value)
		{
			var menu_item = {};

			menu_item["text"] = key;
			menu_item["onclick"] = function()
			{

				// Insert value without compiling
				if (Current_Route === "bulk-email" || Current_Route === "send-email" || Current_Route.indexOf('email-template') != -1 || Current_Route.indexOf('emailbuilder') != -1)
				{
					editor.insertContent(value);
				}
				else
				{
					var template = Handlebars.compile(value);
					var compiled_template;

					try
					{
						compiled_template = template(contact_json);
					}
					catch(err)
					{
						console.log("error.....");
						
						// Handlebars need [] if json keys have spaces
						value = '{{['+key+']}}';
						
						template = Handlebars.compile(value);
						compiled_template = template(contact_json);
					}
					
					editor.insertContent(compiled_template + '');
				}
			};

			sub_menu.push(menu_item);
		});

		main_menu_item['menu'] = sub_menu;

		menu.push(main_menu_item);
	});
	
	console.log(menu);
	return menu;
}

/**
 * Returns merge fields that includes custom fields
 * 
 */
function get_merge_fields(callback)
{
	
	var options = {
			"First Name": "{{first_name}}",
			"Last Name": "{{last_name}}",
			"Score": "{{score}}",
			"Email": "{{email}}",
			"Company": "{{company}}",
			"Title": "{{title}}",
			"Address": "{{location.address}}",
			"City": "{{location.city}}",
			"State":"{{location.state}}",
			"Country":"{{location.country}}",
			"Owner Name":"{{owner.name}}",
			"Owner Email":"{{owner.email}}", 
			"Calendar URL":"{{owner.calendar_url}}"
			
			}
	
	if(!callback){
		// Get Custom Fields in template format
		var custom_fields = get_custom_merge_fields();

		// Merges options json and custom fields json
		var merged_json = merge_jsons({}, options, custom_fields);

		return merged_json;
	}else{
		
		// Get Custom Fields in template format
		get_custom_merge_fields(function(custom_fields){
			// Merges options json and custom fields json
			var merged_json = merge_jsons({}, options, custom_fields);

			return callback(merged_json);
		});


	}



}

/**
 * Returns json object containing merge field object like contact, custom & ticket if exists.
 * 
 */
function get_merge_field_objs()
{
	
	var contact_merge_fields = {
		"First Name": "{{first_name}}",
		"Last Name": "{{last_name}}",
		"Score": "{{score}}",
		"Email": "{{email}}",
		"Company": "{{company}}",
		"Title": "{{title}}",
		"Address": "{{location.address}}",
		"City": "{{location.city}}",
		"State":"{{location.state}}",
		"Country":"{{location.country}}",
		"Owner Name":"{{owner.name}}",
		"Owner Email":"{{owner.email}}", 
		"Calendar URL":"{{owner.calendar_url}}"
	}
	
	// Get Custom Fields in template format
	var custom_fields = get_custom_merge_fields();

	var json = {Contact: contact_merge_fields};

	if(custom_fields && !$.isEmptyObject(custom_fields))
		json['Custom'] = custom_fields;

	//Return json if path isn't email-template
	if(Current_Route.indexOf('emailbuilder-add') == -1 && 
		Current_Route.indexOf('email-template-add') == -1 &&
		Current_Route.indexOf('emailbuilder/') == -1)
		return json;

	var ticket_merge_fields = {
		"Ticket ID": "{{ticket_id}}",
		"Subject": "{{subject}}",
		"Requester Name": "{{requester_name}}",
		"Requester Email": "{{requester_email}}",
		"Priority": "{{priority}}",
		"Status": "{{status}}",
		"Ticket Comments": "{{{ticket_comments}}}",
		"Footer": "{{{ticket_footer}}}",
		"Group": "{{group_name}}",
		"Assignee": "{{agent_name}}"
	};

	json['Ticket'] = ticket_merge_fields

	return json;
}

/**
 * Returns custom fields data in JSON
 */
function get_custom_fields(callback)
{
	// If already fetched, return
	if(CONTACT_CUSTOM_FIELDS != undefined){
		if(callback)
			  return callback(CONTACT_CUSTOM_FIELDS)

		return CONTACT_CUSTOM_FIELDS;
	}
		
	
	// Sends GET request for customfields.
	accessUrlUsingAjax('/core/api/custom-fields/scope?scope=CONTACT', function(data){

		// Parse stringify json
		CONTACT_CUSTOM_FIELDS = data;
		
		if(callback)
			  return callback(CONTACT_CUSTOM_FIELDS)

		return CONTACT_CUSTOM_FIELDS;

	});

}

/**
 * Returns custom fields in format required for merge fields. E.g., Nick
 * Name:{{[Nick Name]}}. Handlebars need to have square brackets for json keys
 * having spaceaaa
 */
function get_custom_merge_fields(callback)
{
	
	var customfields = {};

	if(!callback){
		// Iterate over data and get field labels of each custom field
		var custom_fields = get_custom_fields();
		
		$.each(custom_fields, function(index, obj)
					{
						customfields[obj['field_label']] = "{{" + obj['field_label'] + "}}"
					});

		return customfields;
	}else{
		
		// Iterate over data and get field labels of each custom field
		get_custom_fields(function(custom_fields){
			$.each(custom_fields, function(index, obj)
					{
						customfields[obj['field_label']] = "{{" + obj['field_label'] + "}}"
					});

					return callback(customfields);
		});
	}


}
/**
 * Returns merged json of two json objects
 */
function merge_jsons(target, object1, object2)
{
	return $.extend(target, object1, object2);
}


/**
 * Returns json required for merge fields in Editor
 */
function get_contact_json_for_merge_fields()
{
	// Compile templates immediately in Send email but not for bulk contacts
	if (App_Contacts.contactDetailView != undefined && App_Contacts.contactDetailView.model != undefined)
	{

		// Get Current Contact
		var contact_json = App_Contacts.contactDetailView.model.toJSON();
		var contact_property_json = get_property_JSON(contact_json);
		
		try
		{
			contact_property_json["score"]= contact_json["lead_score"];
			
			// Replace epoch times with formatted date values in property json
			var arr = get_custom_field_labels_by_type(get_custom_fields(), 'DATE');
			
			// Format each epochtime to Date
			for(var i in arr)
				contact_property_json[arr[i]]= get_formatted_date(contact_property_json[arr[i]]);
			
			contact_property_json["id"] = contact_json["id"];
			
			if(contact_property_json["address"])
				contact_property_json["location"] = JSON.parse(contact_property_json["address"]);
		}
		catch(err)
		{
			console.log("Error occured while parsing json");
			console.log(err);
		}
		
		return merge_jsons({}, {"owner":contact_json.owner}, contact_property_json);
		
	}  
}

/**
 * Replaces {{}} with {{[]}} to allow spaces in keys
 * 
 * @param text - text to replace
 * 
 **/
function add_square_brackets_to_merge_fields(text)
{
	// Matches all strings within {{}}. e.g., {{first_name}}, {{New Note}}
	var t = text.match(/{{[a-zA-Z0-9 ]*[a-zA-Z0-9 ]}}/g);
	
	if(t)
	{
		// Change {{New Note}}  to {{[New Note]}}. 
		// Handlebars allow keys having spaces, 
		// within square brackets
		for(var i=0; i < t.length;i++)
		{
			text = text.replace(t[i], '{{['+t[i].match(/{{(.*?)}}/)[1]+']}}');
		}
	};
	
	return text;
}

/**
 * Returns array of custom field labels that matches
 * with given field_type
 * 
 * @param custom_data - Custom fields
 * 
 * @param field_type - field type
 **/
function get_custom_field_labels_by_type(custom_data, field_type)
{
	var field_labels = [];
	
	// Iterate over data and get field labels of each custom field
	$.each(custom_data, function(index, obj)
	{
		
		if(obj['field_type'] == field_type)
			field_labels.push(obj['field_label']);
		
	});
	
	return field_labels;
}

/**
 * Returns formatted date from epoch time
 * 
 * @param epoch_time - Epoch time in milliseconds
 *                     
 **/
function get_formatted_date(epoch_time, format)
{
	if (!epoch_time)
	    return;

	var d = undefined;
	
	if ((epoch_time / 100000000000) > 1)
	   d = new Date(parseInt(epoch_time));
	else
	   d = new Date(parseInt(epoch_time) * 1000);
	
	var month_names = new Array("Jan", "Feb", "Mar", 
			"Apr", "May", "Jun", "Jul", "Aug", "Sep", 
			"Oct", "Nov", "Dec");

	var date = d.getDate();
	var month = d.getMonth();
	var year = d.getFullYear();
	
	return date + " " + month_names[month] 
			+ " " + year;
}

function register_focus_on_tinymce(selector)
{
	var document = $("iframe#"+selector+"_ifr").contents()[0];
	
	if(!document)
		return;
	
	$(document).on('click', function(e){
		
		e.preventDefault();
		
		$(this).find('body').focus();
		
	});
}

$(function(){ 

	$("body").on('click', ".upload_s3", function(e){
		e.preventDefault();
		uploadImage("upload-container");
	});

	//Upload contact image
	$("body").on('click', ".edit-pic", function(e){
		e.preventDefault();
		uploadImage("contact-container");
	});

	//Upload company image
	$("body").on('click', ".upload_pic", function(e){
		e.preventDefault();
		uploadImage("contact-container");
	});
	
	//Upload personal prefs
	$("body").on('click', ".upload_prefs_s3", function(e){
		e.preventDefault();
		uploadImage("upload-in-modal");
	});
	
});	

function uploadImage(id)
{
	var newwindow = window.open("flatfull/upload-flatfull.jsp?id=" + id,'name','height=310,width=500');
	if (window.focus)
	{
		newwindow.focus();
	}
	return false;
}

function setImageURLInModal(url)
{
	var id = "upload-in-modal";
	// Set the media stream
	$('#' + id).find('.imgholder').html('');
	$('#' + id).find('.imgholder').html('<img class="m-b-none avatar-thumb" src="' + url + '" style="height:58px;width:58px;"/>');
	
	var  modalId = $('#' + id).closest(".modal").attr("id");
	
	// Set the value of selector for input
	$("#" + modalId).find(".modal-body input[type='hidden']").val(url);
	
	$("#" + modalId).closest('.modal').modal('hide');
	$("#" + modalId).trigger('choose-image');
	
}

function setImageURL(url)
{
	var id = "upload-container";
	// Set the media stream
	$('#' + id).find('.imgholder').html('');
 	$('#' + id).find('.imgholder').html('<img class="w-full" src="' + url + '"/>');
	
	// Set the value of selector for input
	$('#' + id).find('#upload_url').val(url);
}

//Saving contact image
function setContactImageURL(url)
{
	var id = "contact-container";
	// Set the media stream
	$('#' + id).find('.contact-image-view').html('');
	$('#' + id).find('.contact-image-view').html('<img src="' + url + '" class="upload_pic imgholder submit w-full img-circle" style="width:75px;height:75px;" type="submit" />');
	if($(".toggle-contact-image .contact-delete-option").length == 0) {
 	$('#' + id).find('.toggle-contact-image').append('|<div style="float:right" class="contact-delete-option"><a name="Delete" value="Delete" onClick="deleteConfirmation();" class="tooltip_info" data-placement="bottom" data-toggle="tooltip" title="Delete"><i class="glyphicon glyphicon-trash" style="color:red"></i></a></div>');	
	$('#' + id).find('.toggle-contact-image').find(".contact-edit-option").removeAttr('style');
	$('#' + id).find('.toggle-contact-image').find(".contact-edit-option").css("float","left");
	}
	// Set the value of selector for input
	$('#' + id).find('#upload_url').val(url);
	agile_crm_update_contact("image", url);
}
function deleteContactImage(){
	var url = window.location.href;
	//get rid of the trailing / before doing a simple split on /
	var url_parts = url.replace(/\/\s*$/,'').split('/'); 
	//since we do not need example.com
	contactId = url_parts[url_parts.length - 1] ;	
	var url = "/core/api/contacts/deleteContactImage?id="+contactId
	$.ajax({ type : 'PUT', url : url, success : function(){
                
        // Default image
		var img = DEFAULT_GRAVATAR_url;
		var backup_image = "&d=404\" ";
		// backup_image="";
		var initials = '';

		try
		{
			var name = $('#contactName .contactFirstname').text();
			if(name.length >=2)
				initials = name.substring(0,2);
			else
				initials = name ; 
		}
		catch (e)
		{
			console.log(e);
		}

		if (initials.length == 0)
			backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";

		var data_name =  '';
		// if(!isIE())
			data_name = "onLoad=\"image_load(this)\" onError=\"image_error(this)\"_data-name=\"" + initials;
		
		
		var url = 'https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=40' + backup_image + data_name

		var id = "contact-container";
		// Set the media stream
		$('#' + id).find('.contact-image-view').html('');
		$('#' + id).find('.contact-image-view').html('<img src="' + url + '" class="upload_pic imgholder submit w-full img-circle" style="width:75px;height:75px;"/>');
		if($(".toggle-contact-image .contact-delete-option").length > 0) {
		$('#' + id).find('.toggle-contact-image').empty();
		$('#' + id).find('.toggle-contact-image').append('<div style="float:left" class="contact-edit-option"><a name="Delete" class="tooltip_info  edit-pic" data-placement="bottom" data-toggle="tooltip" title="Change"><i class="glyphicon glyphicon-edit"></i></a></div>');
 		$('#' + id).find('.toggle-contact-image').find(".contact-edit-option").css("margin-left","10px");
 		}
 		var properties = App_Contacts.contactsListView.collection.get(contactId).get("properties");
 		var i;
		for (i = 0; i < properties.length; i++) {
   			 if(properties[i].name == "image"){
   			 	properties.splice(i,1);
   			 }
		}
		var contact_model = App_Contacts.contactDetailView.model;
	    var conProperties = contact_model.toJSON()['properties'];
	    for (i = 0; i < conProperties.length; i++) {
   			 if(conProperties[i].name == "image"){
   			 	conProperties.splice(i,1);
   			 }
		}  
 
	},error: function() {
     	console.log('An error occurred');
	}
});
}
function deleteConfirmation() {
    var x; 
    showAlertModal("delete", "confirm", function(){
    	deleteContactImage();
	});

}/**
 * Loading spinner shown while loading
 */
var LOADING_HTML = '<img class="loading" style="padding-left:10px;padding-right:5px;opacity:0.5;" src= "'+updateImageS3Path("/flatfull/img/ajax-loader-cursor.gif")+'"></img>';

/**
 * Set of loading images
 */
LOADING_HTML_IMAGES = [
	LOADING_HTML
]

/**
 * Loading images shown which contacts are being fetched on page scroll
 */
var LOADING_ON_CURSOR = '<img class="loading" style="padding-left:10px;padding-right:5px" src= "'+updateImageS3Path("img/ajax-loader-cursor.gif")+'"></img>';

/**
 * Default image shown for contacts if image is not available
 */

var DEFAULT_GRAVATAR_url = agileWindowOrigin() + "/" + FLAT_FULL_PATH + "images/user-default.jpg";

var DEFAULT_GRAVARTAR_IMG = "https://doxhze3l6s7v9.cloudfront.net/img/default-404.png";

var ONBOARDING_SCHEDULE_URL = "http://supportcal.agilecrm.com";


var SALES_SCHEDULE_URL = "http://salescal.agilecrm.com";


var SUPPORT_SCHEDULE_URL = "http://supportcal.agilecrm.com";


var CALENDAR_WEEK_START_DAY = CURRENT_USER_PREFS.calendar_wk_start_day;

var AVOID_PAGEBLOCK_URL = [ "subscribe", "purchase-plan", "updateCreditCard" ];

var PAGEBLOCK_REASON = [ "BILLING_FAILED_2", "BILLING_FAILED_3", "SUBSCRIPTION_DELETED", "SUB&#x73;criptION_DELETED"];

var PAYMENT_FAILED_REASON = ["BILLING_FAILED_0", "BILLING_FAILED_1"];
/**
 * Returns random loading images
 * 
 * @returns
 */
function getRandomLoadingImg()
{
	var length = LOADING_HTML_IMAGES.length;
	return LOADING_HTML_IMAGES[Math.round(Math.random() * (LOADING_HTML_IMAGES.length - 1))]
}

// Read a page's GET URL variables and return them as an associative array.
function getUrlVars()
{
	var vars = [], hash;
	var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
	for (var i = 0; i < hashes.length; i++)
	{
		hash = hashes[i].split('=');
		vars.push(hash[0]);
		vars[hash[0]] = hash[1];
	}

	return vars;
}

var _agile_owners_collection = null;

/**
 * Creates a select fields with the options fetched from the url specified,
 * fetches the collection from the url and creates a select element and appends
 * to the selectId sent, it takes the template to fill the values and also takes
 * a callback to deserialize the select field if form is being edited
 * 
 * @param selectId
 *            to append the options
 * @param url
 *            To fetch collection
 * @param parseKey
 *            parses the collection
 * @param callback
 *            to process select field after being created
 * @param template
 *            Template to create options
 */
function fillSelect(selectId, url, parseKey, callback, template, isUlDropdown, el, defaultSelectOption)
{
	// Fetch Collection from URL
	var collection_def = Backbone.Collection.extend({ url : url,
	/*
	 * parse : function(response) {
	 * 
	 * if (response && response[parseKey]) return response[parseKey];
	 * 
	 * return response; }
	 */
	});

	// Prepend Loading
	$loading = '<img class="loading" style="padding-right:5px;opacity:0.5;" src= "'+updateImageS3Path("../flatfull/img/ajax-loader-cursor.gif")+'"></img>';
	if ($("#" + selectId, el).next().hasClass("select-loading"))
		$("#" + selectId, el).next().html($loading);
	else
		$("#" + selectId, el).after($loading);
	// Creates a collection and fetches the data from the url set in collection
	var collection = new collection_def();

	// Check if owners are already fetched and stored in global variable.
	// If yes, fill the select field directly otherwise, fetch from the server
	if( url == '/core/api/users/partial' && _agile_owners_collection != null )
	{
		_fillSelectCallback(_agile_owners_collection, selectId, callback, template, isUlDropdown, el, defaultSelectOption);
	} else {
		// On successful fetch of collection loading symbol is removed and options
		// template is populated and appended in the selectId sent to the function
		collection.fetch({success: function() {
				_fillSelectCallback(collection, selectId, callback, template, isUlDropdown, el, defaultSelectOption);
				if( url == '/core/api/users/partial' )	_agile_owners_collection = collection;
			} 
		});
	}
}

/*
 *	This function will remove the loading symbol, populate the options template
 *	and append the options to the selectId sent to it
 */
function _fillSelectCallback(collection, selectId, callback, template, isUlDropdown, el, defaultSelectOption)
{
			// Remove loading
		if ($("#" + selectId, el).next().hasClass("select-loading"))
			$("#" + selectId, el).next().html("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
		else
			$("#" + selectId, el).next().remove();

		// Delete prev options if any by verifying whether ul drop down or
		// select drop down
		if (isUlDropdown)
			$("#" + selectId, el).empty();
		else
		{
			if (!defaultSelectOption)
				defaultSelectOption = "Select...";

			$("#" + selectId, el).empty().append('<option class="default-select" value="">' + defaultSelectOption + '</option>');
		}
		var data = collection.toJSON();
		data.sort(function(a, b)
		{
			if (a.name < b.name)
				return -1;
			if (b.name < a.name)
				return 1;
			return 0;
		});
		// Convert template into HTML
		var modelTemplate = Handlebars.compile(template);
		var optionsHTML = "";
		// Iterates though each model in the collection and
		// populates the template using handlebars
		$.each(data, function(index, model)
		{
			if (model && model.field_type && model.field_type == "FORMULA")
			{
				//If the model is Customfield and if it is formula type we won't add that.
			}
			else
			{
				optionsHTML += modelTemplate(model);
				$("#" + selectId, el).append(modelTemplate(model));
			}
		});

		// If callback is present, it is called to deserialize
		// the select field
		if (callback && typeof (callback) === "function")
		{
			// execute the callback, passing parameters as
			// necessary
			callback(collection, optionsHTML);
		}
}



// Fill selects with tokenized data
/**
 * fillTokenizedSelect if similar to fillSelect, but data is not fetched it is
 * sent to the function which creates options based on the array of values sent.
 * It also includes callback function to deseriazlie
 * 
 * @param selectId
 *            to To append options
 * @param array
 *            list of values to be used to create options
 * @param callback
 *            function to be called after select if created
 */
function fillTokenizedSelect(selectId, array, callback, defaultSelectOption)
{
	if (!defaultSelectOption)
		defaultSelectOption = "Select...";

	$("#" + selectId).empty().append('<option value="">' + defaultSelectOption + '</option>');

	// Iterates though each element in array and creates a options to select
	// field and
	// appends to the id sent
	$.each(array, function(index, element)
	{
		$("#" + selectId).append('<option value=' + '"' + element + '">' + element + '</option>');
	});

	// If callback exists it is called after select field is created
	if (callback && typeof (callback) === "function")
	{
		// execute the callback, passing parameters as necessary
		callback();
	}
}

/**
 * Fills milestore in to dorpdown
 * 
 * @param ulId
 * @param array
 */
function fillMilestones(ulId, array)
{
	$("#" + ulId).empty();
	$.each(array, function(index, element)
	{
		$("#" + ulId).append('<a href="#"><li value=' + '"' + element + '">' + element + '</li></a>');
	});
}
function btnDropDown(contact_id, workflow_id)
{

}

/**
 * Removes the specified property from the contact
 */
function delete_contact_property(contact, propertyName)
{

	// Iterates through the properties of the contact, finds the property with
	// the name specified and removes the property from the contact
	for (var index = 0; index < contact.properties.length; index++)
	{
		if (contact.properties[index].name == propertyName)
		{
			contact.properties.splice(index, 1);
			--index;
		}
	}
	return contact;
}

// Delete contact tag
/**
 * Removes a tag from the contact, tag name is to be specified to remove the tag
 */
function delete_contact_tag(contact, tagName)
{

	// Iterates though tags in the contact and removes the tag which matches the
	// tag name parameter of the function
	$.each(contact.tagsWithTime, function(index, tagObject)
	{
		if (tagObject.tag == tagName)
		{
			// Tag should be removed from tags also,
			// or deleted tag will be added again
			contact.tags.splice(index, 1);
			contact.tagsWithTime.splice(index, 1);
			return false;
		}
		contact.tags.push(tagObject.tag);
	});

	return contact;
}

/**
 * Adds a new tag to contact
 */
function add_contact_tags(contact, newTags)
{
	for (var index = 0; index < newTags.length; index++)
	{
		contact.tags.push(newTags[index])
	}
	return contact;
}

/**
 * Creates a property json object
 * 
 * @param name
 * @param id
 * @param type
 */
function property_JSON(name, id, type)
{
	var json = {};

	if (type == undefined)
		json.type = "SYSTEM";
	else
		json.type = type;

	json.name = name;

	var elem = $('#' + id), elem_type = elem.attr('type'), elem_value;

	if (elem_type == 'checkbox')
		elem_value = elem.is(':checked') ? 'on' : 'off';
	else
		elem_value = elem.val();

	json.value = elem_value;
	return json;
}

// Sends post request using backbone model to given url. It is a generic
// function, can be called to save entity to database
function saveEntity(object, url, callback, errorCallback)
{
	var model = new Backbone.Model();
	model.url = url;
	model.save(object, { success : function(data)
	{
		if (callback && typeof (callback) === "function")
		{
			// execute the callback, passing parameters as necessary
			callback(data);
		}
	}, error: function(model,response){
			console.log(response);
			if(errorCallback)
   			errorCallback(model,response);
   		}});
}

/**
 * Returns GMT time.
 * 
 * @param date
 * @returns
 */
function getGMTEpochFromDate(date)
{
	var current_sys_date = new Date();
	console.log(new Date().getHours());
	console.log(new Date().getMinutes());
	console.log(new Date().getSeconds());
	console.log(date.getYear() + "," + date.getMonth() + "," + date.getDate())
	date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

	// Adding offset to date returns GMT time
	return date.getTime() + (date.getTimezoneOffset() * 60 * 1000);
}

//get the GMT time for contact and compant static filters
function getGMTEpochFromDateForCustomFilters(date)
{
	var current_sys_date = new Date();
	date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
	var offset = (date.getTimezoneOffset() * 60 * 1000) ;
	// Adding offset to date returns GMT time 
	return date.getTime() - (date.getTimezoneOffset() * 60 * 1000);
	}
function getGMTEpochFromDateForDynamicFilters(date)
{
	var current_sys_date = new Date();
	date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
	var offset = (date.getTimezoneOffset() * 60 * 1000) ;
	// Adding offset to date returns GMT time 
	return date.getTime();
	}
/**
 * Returns local epoch time based form GMT time
 * 
 * @param time_in_milliseconds
 * @returns {Number}
 */
function getLocalTimeFromGMTMilliseconds(time_in_milliseconds)
{
	var date = new Date(parseInt(time_in_milliseconds));

	// Subtracting epoch offset from epoch time;
	return date.getTime() - (date.getTimezoneOffset() * 60 * 1000);
}
function getLocalTimeFromGMTMillisecondsforDynamicFilters(time_in_milliseconds)
{
	var date = new Date(parseInt(time_in_milliseconds));
	
	return date.getTime();
}

function showTextGravatar(selector, element)
{
	var el = $(selector, $(element));
	$(el).closest('img').error(function()
	{
		var name = $(this).attr("_data-name");

		if (!name)
			return;

		$(this).attr("data-name", name);

		// $(element).initial({charCount: 2,fontWeight: 'normal',fontSize:20, width:$(element).width(), height:$(element).height()});
		$(element).initial({charCount: 2,fontWeight: 'normal'});
	});
}

function text_gravatar_initials(items, char_count)
{
	if (items == undefined)
		return;

	var name = "";

	var first_name;
	var last_name;

	var name = "";

	if (getPropertyValue(items, "first_name"))
	{

		first_name = getPropertyValue(items, "first_name");

	}

	if (getPropertyValue(items, "last_name"))
	{
		last_name = getPropertyValue(items, "last_name");
	}

	if (first_name && last_name)
	{
		name = first_name.substr(0, 1);
		name += last_name.substr(0, 1);
	}
	else
	{
		if (first_name)
		{
			var first_name_length = first_name.length;
			if (first_name_length > 1)
				name = first_name.substr(0, 2);
			else
				name = first_name.substr(0, 1);
		}
		else if (last_name)
		{
			var last_name_length = last_name.length;
			if (last_name_length > 1)
				name = last_name.substr(0, 2);
			else
				name = last_name.substr(0, 1);
		}
	}
	if (name.length == 0)
	{
		var email = getPropertyValue(items, "email");
		if (email)
		{
			if (email.length > 1)
				name = email.substr(0, 2);
		}
	}

	if (name.length == 0)
		name = "X";

	if(!isNaN(char_count) && char_count < name.length){
         name = name.substr(0, char_count);
	}

	return name;
}

function buildFacebookProfileURL(URL)
{
	URL = URL.replace('@', '');
	var hasScheme = (URL.indexOf('http://') === 0 || URL.indexOf('https://') === 0);
	var isFBURL = (URL.indexOf('facebook.com') !== -1);
	if (URL && !hasScheme && !isFBURL)
	{
		URL = 'https://www.facebook.com/' + URL;
	}
	else if (URL && isFBURL && URL.indexOf('www.facebook.com') === -1)
	{
		URL = URL.replace('facebook.com', 'www.facebook.com');
	}
	else if (URL && !hasScheme)
	{
		URL = 'http://' + URL;
	}
	return URL;
}

function visibleFilter()
{
	return $(this).css('display') != 'none';
}
function showTransitionBar()
{
	// Remove transition bar for mobile browsers
	if( agile_is_mobile_browser() )	return;
	
	if ($('.butterbar').hasClass('hide'))
		$('.butterbar').removeClass('hide');
	if (!$('.butterbar').hasClass('animation-active'))
		$('.butterbar').addClass('animation-active');
}
function hideTransitionBar()
{
	setTimeout(function()
	{
		if ($('.butterbar').hasClass('animation-active'))
			$('.butterbar').removeClass('animation-active');
		if (!$('.butterbar').hasClass('hide'))
			$('.butterbar').addClass('hide');
	}, 10);
}
$('body').on('shown.bs.modal', '.modal:visible', function (e) 
{
	setTimeout(function()
	{
		if ($('.modal-backdrop', $('.modal:visible')).height() <= $('.modal-dialog', $('.modal:visible')).height())
			$('.modal-backdrop', $('.modal:visible')).height($('.modal-dialog', $('.modal:visible')).height() + 70);
	}, 500);
});
/**
 * Returns UTC mid night time.
 * 
 * @param date
 * @returns
 */
function getUTCMidNightEpochFromDate(date)
{
	date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0));

	// returns UTC mid night time
	return date.getTime();
}

/*
 function to get the date in user selected format in useprefs page. Will take epoc time  as input
*/

function getDateInFormatFromEpoc(date)
{
	if(!date)
		return;
	if ((date / 100000000000) > 1)
	{1
		return en.dateFormatter({raw: getGlobalizeFormat()})(new Date(parseInt(date)));
	}
	return en.dateFormatter({raw: getGlobalizeFormat()})(new Date(parseInt(date) * 1000));

}

// function to get the gmt format of date to show to edit the custom filters for contacts
function getDateInFormatFromEpocForContactFilters(date)
{
	if(!date)
		return;
	var now = new Date(parseInt(date)); 
	var now_utc = new Date(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),  now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds());
	if ((date / 100000000000) > 1)
	{1  
		
		
		return en.dateFormatter({raw: getGlobalizeFormat()})(now_utc);
	}
	return en.dateFormatter({raw: getGlobalizeFormat()})(now_utc * 1000);

}

/*
 function to get the date in user selected format in useprefs page. Will takes date object as input
*/

function getDateInFormat(date)
{
	if(!date)
		return;
	return en.dateFormatter({raw: getGlobalizeFormat()})(date);

}

function getGlobalizeFormat()
{
	var format = CURRENT_USER_PREFS.dateFormat;
	
	if(format.search("MM") != -1)
		format = format.replace(/MM/g, "MMMM");
	else if(format.search("M") != -1)
		format = format.replace(/M/g, "MMM");
	if(format.search("DD") != -1)
		format = format.replace(/DD/g, "EEEE");
	else if(format.search("D") != -1)
		format = format.replace(/D/g, "EEE");
	format = format.replace(/m/g, "M");
	return format;
}


/* To convert UK formatted date to US formatted date
   ukDate should be in dd/mm/yyyy format
*/
function convertDateFromUKtoUS(ukDate)
{
	if(!ukDate)
		return "";
	var date;
	if(ukDate.search("/") != -1)
		date = ukDate.split("/");
	else
		date = ukDate.split(".");
	if(date.length == 3)
	{	
		if(date[2].length == 2)
			  date[2] = "20" + date[2];

		var returnDate = new Date(date[1]+"/"+date[0]+"/"+date[2]);
		if(!/Invalid|NaN/.test(returnDate))
			return returnDate.format("mm/dd/yyyy");
		else
			return "";
	}
	else 
		return "";
}

/**
* Retuns date with supportable format
*/
function getFormattedDateObjectWithString(value){

		if(!value)
			   return new Date("");

        value = value.replace(/\./g,'/');
		if(CURRENT_USER_PREFS.dateFormat.indexOf("yyyy") == -1){
			value = value.substring(0, value.length - 2) + "20" + value.substring(value.length - 2);
		}

		if(CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1)
			value = convertDateFromUKtoUS(value);

		return new Date(value);
	
}

function isIE() {

	var isIE = (window.navigator.userAgent.indexOf("MSIE") != -1); 
	var isIENew = (window.navigator.userAgent.indexOf("rv:11") != -1);  
	if(isIE || isIENew)
	 return true;

	return false;
}

function agileWindowOrigin(){
	if (!window.location.origin) {
	   return window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');
	}

	return window.location.origin;
}

$(function(){
    $( document ).ajaxError(function(event, jqXHR) {
	   // Get response code and redirect to login page
	   if(jqXHR.status && jqXHR.status == 401)
	   	      handleAjaxError();
	});
});

function handleAjaxError(){

		var hash = window.location.hash;

        try{
            // Unregister all streams on server.
			unregisterAll();
        }catch(err){}
		
		// Unregister on SIP server.
		sipUnRegister();
		
		// Firefox do not support window.location.origin, so protocol is explicitly added to host
		window.location.href = window.location.protocol + "//" + window.location.host+"/login"+hash;

}

function showPageBlockModal() {

	// Removing existing modal
	$("#user-blocked-modal").modal('hide');
	$("#alert-message").html("").hide();
	if(USER_BILLING_PREFS.status == "BILLING_PAUSED"){
		getTemplate("pause-user", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("body").append(template_ui);
			$("#user-blocked-modal").modal('show');
		}, null);
	}
	else if ($.inArray(Current_Route, AVOID_PAGEBLOCK_URL) != -1 || USER_BILLING_PREFS == undefined || USER_BILLING_PREFS.status == undefined || USER_BILLING_PREFS.status == null || USER_BILLING_PREFS.updated_time == undefined || USER_BILLING_PREFS.updated_time == null || USER_BILLING_PREFS.updated_time < 1456803000)
		return;
	else if($.inArray(USER_BILLING_PREFS.status, PAYMENT_FAILED_REASON) != -1){
		getTemplate("user-alert", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("#alert-message").html(template_ui).show();
		}, null);

	}else if($.inArray(USER_BILLING_PREFS.status, PAGEBLOCK_REASON) != -1 && USER_BILLING_PREFS.updated_time > 1457494200){
		var template = "block-payment-failed-user";
		if(USER_BILLING_PREFS.status == "SUBSCRIPTION_DELETED" || USER_BILLING_PREFS.status == "SUB&#x73;criptION_DELETED")
			template = "block-cancelled-user";
		getTemplate(template, {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("body").append(template_ui);
			$("#user-blocked-modal").modal('show');
		}, null);
	}
}

function  printCurrentDateMillis(type){
      console.info(type + " " + new Date().getTime());
}

function  startFunctionTimer(name){
	try{console.time(name);	}catch(e){}
}

function endFunctionTimer(name){
	try{console.timeEnd(name);	}catch(e){}
}

function loadServiceLibrary(callback){
	if(!tight_acl.checkPermission("HELPDESK")){
		tight_acl.init_permissions();
		hideTransitionBar();
		return;
	}
	head.js(CLOUDFRONT_PATH + 'jscore/min/' + FLAT_FULL_PATH +'tickets-min.js' + "?_=" + (_AGILE_VERSION + '1'), function(){

		if(callback)
			callback();
	});
}

function sendEmail(json, callback){
	$.ajax({

			type : 'POST',
			data : json,
			url : 'core/api/emails/contact-us',
			success : function()
			{
				if(callback && typeof(callback == "function"))
					callback();
			},
			error : function(response)
			{
				showNotyPopUp("warning", data.responseText, "top");
			}
			});
}

function showAlertModal(json_key, type, confirm_callback, decline_callback,dynamic_title){
	var data = {};
	if(MODAL_MESSAGES[json_key] != undefined){
		data.title = MODAL_MESSAGES[json_key]['title'];
		data.message = MODAL_MESSAGES[json_key]['message'];
	}else{
		data.title = dynamic_title;
		data.message = json_key;
	}
	if(type == undefined)
		type = "alert";
	data.type = type;
	getTemplate("modal-confirm", data, undefined, function(template_ui){
		if(!template_ui)
			  return;
		$("#alertModal").html($(template_ui)).modal('show');
		$('#alertModal #success_callback').click(function (e) {
			e.preventDefault();
			$("#alertModal").modal('hide');
	    	if(confirm_callback && typeof(confirm_callback === "function"))
	    		confirm_callback();
		});
		$('#alertModal #decline_callback').click(function (e) {
			e.preventDefault();
			$("#alertModal").modal('hide');
	    	if(decline_callback && typeof(decline_callback === "function"))
	    		decline_callback();
		});
	}, null);
}
/**
 * wysihtml.js is used to embed beautiful html editors to email body. Inserts
 * merge fields into email body. wysihtml makes use of wysihtml5 which is a
 * javascript plugin that makes it easy to create simple, beautiful wysiwyg
 * editors with the help of wysihtml5 and Twitter Bootstrap.
 */
function initializeEmailTemplateAddListeners(){

	// Code for Merge fields in Email Template
	$('#prefs-tabs-content').on('click', '.merge-field', function (e) {
				e.preventDefault();
				// console.log("Merge field");

				// Get Selected Value
				var fieldContent = $(this).attr("name");

				// Get Current HTML
				var val = $('#email-template-html').val();

				// Set New HTML
				var wysihtml5 = $('#email-template-html').data('wysihtml5');
				if (wysihtml5) {
					// console.log("Setting content ");
					// console.log(fieldContent);

					// wysihtml5.editor.setValue(fieldcontent + " " + val,
					// true);
				    editor.focus();
					wysihtml5.editor.composer.commands.exec("insertHTML", '{{'
							+ fieldContent + '}}');
				}
			});

	$('#prefs-tabs-content').on('click', '.add-attachment-select', function(e){
		e.preventDefault();
		var el = $(this).closest("div");
		$(this).css("display", "none");
		el.find(".attachment-document-select").css("display", "inline");
		var optionsTemplate = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' size='{{size}}'>{{name}}</option>";
        fillSelect('attachment-select','core/api/documents', 'documents',  function fillNew()
		{
			el.find("#attachment-select option:first").after("<option value='new'>Upload new doc</option>");

		}, optionsTemplate, false, el);
        $('#enable_tracking').css("margin-top", "-7px");
	});
	
	/**
	 * For adding existing document to current contact
	 */
	$('#prefs-tabs-content').on('click', '.add-attachment-confirm', function(e){
		e.preventDefault();		
		var network_type = $('#attachment-select').find(":selected").attr('network_type');
		var document_size = $('#attachment-select').find(":selected").attr('size');
		if(typeof network_type !=='undefined' && network_type.toUpperCase() === 'GOOGLE')
		{
			$(this).closest("span").find(".attachment-status").html("<span style='color:#df382c;margin-top:10px; display:block'>Can not attach Google Drive doc to email. You can add a link instead in the email.</span>");
			$(this).css({'border': '1px solid #df382c','outline': 'none'   });				             	            
		}
		else if(document_size >= 5242880){
			$(this).closest("span").find(".attachment-status").html("<span style='color:#df382c;margin-top:10px; display:block'>Document size exceeds the 5MB limit.</span>");
			$(this).css({'border': '1px solid #df382c','outline': 'none'   });
		}
		else
		{
			$('#attachment-select').closest("span").find('.attachment-status').find("span").fadeOut(0);
			$('#attachment-select').css({"border":"1px solid #bbb"});
		    var document_id = $(this).closest(".attachment-document-select").find("#attachment-select").val();
		    var saveBtn = $(this);
			
	  		// To check whether the document is selected or not
		    if(document_id == "")
		    {
		    	saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>This field is required.</span>");
		    	saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
		    	return;
		    }	    	
		    else if(document_id == "new")
		    {	
		    	e.preventDefault();
				$(this).closest('form').find('#error').html("");
				var form_id = $(this).closest('form').attr("id");
				var id = $(this).find("a").attr("id");
				
				var newwindow = window.open("upload-attachment.jsp?id="+ form_id +"&t=" + CURRENT_USER_PREFS.template +"&d=" + CURRENT_DOMAIN_USER.domain, 'name','height=310,width=500');
				
				if (window.focus)
				{
					newwindow.focus();
				}
		    }
		    else if(document_id != undefined && document_id != null)
		    {
		    	var docName = $( "#attachment-select option:selected").text();
		    	$('#emailForm').find('#eattachment').css('display','block');
		    	$('#emailForm').find('#attachment_id').find("#attachment_fname").text(docName);
		    	$('#emailForm').find(".attachment-document-select").css('display','none');
		    	$('#emailForm').find('#eattachment_key').attr('name',"document_key");
		    	$('#emailForm').find('#eattachment_key').attr('value',document_id);
		    }
	    }
		$('#enable_tracking').css("margin-top", "-47px");
	});
	
	/**
	 * To cancel the add attachment request in send-email form
	 */
	$('#prefs-tabs-content').on('click', '.add-attachment-cancel', function(e){
		e.preventDefault();
		var blobKey = $('#emailForm').find('#attachment_id').attr('name');
		if(typeof blobKey !== typeof undefined)
	    {
			if(blobKey.toLowerCase() === 'blob_key')
			{
				var blobKeyValue = $('#emailForm').find('#eattachment_key').attr("value");
				deleteBlob(blobKeyValue);
			}
	    }
		$('#attachment-select').closest("span").find('.attachment-status').find("span").fadeOut(0);
		$('#attachment-select').css({"border":"1px solid #bbb"});	 
		$('#attachment-select').find('option:first').attr('selected', 'selected');
		var el = $(this).closest("div");
		$('#emailForm').find('.attachment-document-select').css('display','none');
		$('#emailForm').find('#eattachment').css('display','none');
		$('#emailForm').find(".add-attachment-select").css("display", "inline");
		$('#emailForm').find('#eattachment_key').attr("name","name");
    	$('#emailForm').find('#eattachment_key').attr("value","value");
    	$('#enable_tracking').css("margin-top", "-7px");
	});

	$('#prefs-tabs-content').on("click", ".add-tpl-attachment-confirm", function(e){
		e.preventDefault();
		if($(this).parent().find('select').val()=="new"){
			$('#uploadDocumentModal').modal('show');
			$('#GOOGLE',$('#uploadDocumentModal')).parent().hide();
		}else if($(this).parent().find('select').val()!=""){
			$('#tpl-attachment-select').hide();
			$('#tpl-attachment-name').show();
			$('#attachment_id',$('#tpl-attachment-name')).val($(this).parent().find('select').val());
			//$('#tpl_attachment_fname',$('#tpl-attachment-name')).text($(this).parent().find('option:selected').text());
			$('#tpl_attachment_fname',$('#tpl-attachment-name')).html('<a href='+$(this).parent().find('option:selected').attr('url')+'>'+$(this).parent().find('option:selected').text()+'</a>');
		}else if($(this).parent().find('select').val()==""){
			$('#attachment-select-required').show();
		}
	});

	$('#prefs-tabs-content').on("click", ".add-tpl-attachment-cancel", function(e){
		e.preventDefault();
		$('#tpl-attachment-select').show();
		$('#tpl-attachment-name').hide();
		$('.add-attachment-select').show();
		$('.attachment-document-select').hide();
		$('#attachment_id',$('#tpl-attachment-name')).val("");
	});

	$('#prefs-tabs-content').on("change", "#attachment-select", function(e){
		e.preventDefault();
		if($(this).val()==""){
			$('#attachment-select-required').show();
		}else{
			$('#attachment-select-required').hide();
		}
	});

	$('#uploadDocumentModal').on('hidden.bs.modal', function(e){
		$('#GOOGLE',$('#uploadDocumentModal')).parent().show();
	});
}

/**
 * Sets HTML Editor for UserPrefs, EmailTemplates etc.
 **/
function setupHTMLEditor(selector, data) {
	head.js(LIB_PATH + 'lib/wysihtml5-0.3.0-min.js', LIB_PATH + 'lib/bootstrap-wysihtml5-min.js',
			function() {
				console.log('setting up text');
				console.log(selector.html());
				
				if(!$(selector).data('wysihtml5'))
					selector.wysihtml5();
				
				if(data)
					selector.data("wysihtml5").editor.setValue(data, false);
				
			});
}/**
 * Zoomifier code to show their template in send email template
 */
 function loadZoomifierDocSelector() {
	 var loggedInUser = CURRENT_DOMAIN_USER.email;
	 var selectedContact = getPropertyValue(App_Contacts.contactDetailView.model.attributes.properties, "email");
	 var picker = new Zoomifier.PickerBuilder().
				setPartnerKey('dwqs4rxjksqpldwqklnpes8hs=').
				setCallback(zoomifierDocSelectionCallback).
				setSalesUser(loggedInUser).
				setTargetCustomer(selectedContact).
				build();
  }
 
 /**
  * Appends the data or template fetched from zoomifier
  * @param data
  */
  function zoomifierDocSelectionCallback(data) {
		data = "</br>" + data + "</br>";
		//Fill html editor with template body
		var wysihtml5 = $('#body').data('wysihtml5');
		
		if(wysihtml5){
			editor.focus();
			wysihtml5.editor.composer.commands.exec("insertHTML",data);
		}
  }function hasScope(scope)
{
	var scopes = CURRENT_DOMAIN_USER.scopes;
	
	if(!scopes)
		return true;
	
	return jQuery.inArray(scope, scopes) > -1;
}


function showContactsImportAccessDeniedMessage(el)
{
   $(el).html("<h4>Access denied to sync contacts. Please contact Admin</h4>");	
}

function hasScope(scope_constant)
{
	return (CURRENT_DOMAIN_USER.scopes && $.inArray(scope_constant, CURRENT_DOMAIN_USER.scopes) != -1);
}

function canEditContacts()
{
	return hasScope("EDIT_CONTACT");
}

function canEditContacts()
{
	return hasScope("VIEW_CONTACTS");
}

function canCreateContacts()
{
	return hasScope("CREATE_CONTACT");
}

function canImportContacts()
{
	if(!hasScope("CREATE_CONTACT"))
		return false; 
	return hasScope("IMPORT_CONTACTS");
}

function canExportContacts()
{
	return hasScope("EXPORT_CONTACTS");
}

function canEditContact(owner_id)
{
	if((hasScope('UPDATE_CONTACTS') || hasScope('EDIT_CONTACT')) || CURRENT_DOMAIN_USER.id == owner_id)
		return true;
	
	return false;
}

function canEditCurrentContact()
{
	var contact_model = App_Contacts.contactDetailView.model;
	
	if(!contact_model)
		return;
	var contact = contact_model.toJSON();
	
	if(!contact.owner)
		return true;
	
	return canEditContact(contact.owner.id);
}

function canRunBulkOperations()
{
	if(!hasScope('VIEW_CONTACTS'))
		return true;
	
	if(!(hasScope('UPDATE_CONTACTS') || hasScope('EDIT_CONTACT')))
		return false;
	
	return true;
}/**
 * To implement ACL for all the modules.
 */
(function(tight_acl, $, undefined) {
	
	//Contants to denote the permission
	tight_acl.DEAL_PER = false;
	tight_acl.REPORTS_PER = false;
	tight_acl.ACTIVITY_PER = false;
	var obj = {};

	/*
	 * Initialize the permissions when user changes the route using the menu scopes in the current domain user object.
	 */
	tight_acl.init_permissions = function(){

		if(!Current_Route)
			return;
		
		if(Current_Route.indexOf('deal') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('DEALS') > -1))
			{
				obj.entity = 'Deals';
				tight_acl.DEAL_PER = true;
				App_ACL.notAllowed(obj);
			}
		if(Current_Route.indexOf('tasks') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('CALENDAR') > -1))
		  {
		   obj.entity = 'Tasks';
		   tight_acl.ACTIVITY_PER = true;
		   App_ACL.notAllowed(obj);
		  }

		  if(Current_Route.indexOf('calendar') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('CALENDAR') > -1))
		  {
		   obj.entity = 'Calendar';
		   tight_acl.ACTIVITY_PER = true;
		   App_ACL.notAllowed(obj);
		  }
		if(Current_Route.indexOf('activit') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('ACTIVITY') > -1))
		{
			obj.entity = 'Acivities';
			tight_acl.ACTIVITY_PER = true;
			App_ACL.notAllowed(obj);
		}
		if(Current_Route.indexOf('report') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('REPORT') > -1))
		{
			obj.entity = 'Reports';
			tight_acl.REPORTS_PER = true;
			App_ACL.notAllowed(obj);
		}
		if((Current_Route.indexOf('web-rules') > -1 || Current_Route.indexOf('webrule') > -1) && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('WEBRULE') > -1))
		{
			obj.entity = 'Webrules';
			tight_acl.REPORTS_PER = true;
			App_ACL.notAllowed(obj);
		}
		
		if(Current_Route.indexOf('social') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('SOCIAL') > -1))
		{
			obj.entity = 'Social';
			tight_acl.REPORTS_PER = true;
			App_ACL.notAllowed(obj);
		}
		
		if(Current_Route.indexOf('documents') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('DOCUMENT') > -1))
		{
			obj.entity = 'Documents';
			tight_acl.REPORTS_PER = true;
			App_ACL.notAllowed(obj);
		}
		
		if(Current_Route.indexOf('cases') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('CASES') > -1))
		{
			obj.entity = 'Cases';
			tight_acl.REPORTS_PER = true;
			App_ACL.notAllowed(obj);
		}
		
		if((Current_Route.indexOf('workflow') > -1 || Current_Route.indexOf('trigger') > -1) && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('CAMPAIGN') > -1))
		{
			obj.entity = 'Campaigns';
			tight_acl.REPORTS_PER = true;
			App_ACL.notAllowed(obj);
		}
		if(Current_Route.indexOf('tickets') > -1 && !(CURRENT_DOMAIN_USER.menu_scopes.indexOf('HELPDESK') > -1))
		{
			obj.entity = 'Help Desk';
			tight_acl.REPORTS_PER = true;
			obj.ERR_CONTAINER = ".ticket-settings";
			App_ACL.notAllowed(obj);
		}
	}
	
	/*
	 * Check the permission based up on the given scope.
	 */
	tight_acl.checkPermission = function(scope){
		return CURRENT_DOMAIN_USER.menu_scopes.indexOf(scope) > -1;
	}
}(window.tight_acl = window.tight_acl || {}, $));

(function(acl_util, $, undefined) {

	acl_util.canAddTag = function(tag,callback,errorCallback){
		
		if(CURRENT_DOMAIN_USER.is_admin || ACCOUNT_PREFS.tagsPermission){
			if(callback)
				callback(true);
			else
				return true;
			return;
		}
		
		if(tagsCollectionView){
			if(tag.indexOf('[') < 0){
				if(tagsCollectionView.collection.where({"tag":tag}).length == 0){
					showAlertModal("Tag '" + tag + "' does not exist. You don't have permissions to create a new Tag.", undefined, function(){
						if(errorCallback)
							errorCallback("Tag '" + tag + "' does not exist. You don't have permissions to create a new Tag.");
					}, undefined, "Error");
					return;
				}
				else if(callback)
					callback(tagsCollectionView.collection.where({"tag":tag}).length > 0);
			} else {
				var tagArray = JSON.parse(tag);
				var newTags = '';
				$.each(tagArray,function(i,tagStr){
					if(tagsCollectionView.collection.where({"tag":tagStr}).length == 0)
						if(newTags.length == 0)
							newTags = tagStr;
						else
							newTags += ", "+tagStr;
				});
				
				if(newTags.length > 0){
					showAlertModal("Tag '" + newTags + "' does not exist. You don't have permissions to create a new Tag.", undefined, function(){
						if(errorCallback)
							errorCallback("Tag '" + newTags + "' does not exist. You don't have permissions to create a new Tag.");
					},undefined,"Error");
					return;
				}
				else if(callback)
					callback(true);
				
			}
		} else {
			$.ajax({
				url: 'core/api/tags/can_add_tag?tag='+tag,
				type: 'GET',
				success: function(result){
					if(callback)
						callback(result);
					else
						return result;
				}, error: function(response){
					showAlertModal(response.responseText, undefined, function(){
						if(errorCallback)
							errorCallback(response.responseText);
					},undefined, "Error");
					return;
				}
			});
		}
	};
	
	var setTagACL = function(el){
		if(ACCOUNT_PREFS){
			if(ACCOUNT_PREFS.tagsPermission)
				$('#new_tag_acl',el).attr('checked','checked');
		}else {
			$.ajax({ type : 'GET', url : '/core/api/account-prefs', dataType : 'json',
				success: function(data){
					
					if(isCheck)
						$('#new_tag_acl',el).attr('checked','checked');
				} });
		}
		
	};
	
	var updateTagAcl = function(isEnable){
		var input = {};
		input.is_enable = isEnable;
		queuePostRequest('tag_acl', "/core/api/account-prefs/allow-new-tag", input, function(){
			if(ACCOUNT_PREFS){
				ACCOUNT_PREFS.tagsPermission = isEnable;
			}
		}, function(){});
	};
	
	acl_util.initTagACL = function(el){
	$('#disable_new_tags').on('click',function(e){
	if($('#disable_new_tags').text().trim() == 'Enable Access')
	{
		
		$('#disable_new_tags').text("Disable Access");
		
		updateTagAcl(true);console.log(false);
	}
	else if($('#disable_new_tags').text().trim() == 'Disable Access')
	{
		$('#disable_new_tags').text("Enable Access");
		
		updateTagAcl(false);
		//$('#disable_new_tags').attr("option","");

	}  
	});
	/*	$('#new_tag_acl',el).off('change').on('change',function(){
			updateTagAcl($(this).is(':checked'));
		});*/
		setTagACL(el);
	}
}(window.acl_util = window.acl_util || {}, $));
function initializeActivitiesListner(el){


	$("#activities-listners").off();
	// Click events to agents dropdown and department
	$("#activities-listners").on("click", "ul#user-select li a, ul#entity_type li a", function(e)
	{
		e.preventDefault();

		// Show selected name
		var name = $(this).html(), id = $(this).attr("href");

		$(this).closest("ul").data("selected_item", id);
		$(this).closest(".btn-group").find(".selected_name").text(name);
		var url = getActivityFilterParameters();

		renderActivityView(url);

	});
	$("#activities-listners").on("click", "ul#entity_type li a", function(e)
	{
		var entitytype = $(this).html();

		var entity_attribute = $(this).attr("href");

		buildActivityFilters(entitytype,entity_attribute,"entityDropDown");
		$('.activity-sub-heading').html(entitytype);

	});
	$("#activities-listners").on("click", "ul#user-select li a", function(e)
	{

		var user = $(this).html();
		var user_attribute = $(this).attr("href");

		buildActivityFilters(user,user_attribute,"userDropDown");

	});


$("#activities-listners").on('click', '.activity-event-edit', function(e) {
	e.preventDefault();
	var data = $(this).closest('a').attr("data");

	getEventObject(data, function(resp) {
			update_event_activity(resp);
		});
});

$("#activities-listners").on('click', '.email-details', function(e) {
	e.preventDefault();
	var data = $(this).closest('a').attr("data");

	getActivityObject(data, function(resp) {
			console.log(resp);

			getTemplate("infoModal", resp, undefined, function(template_ui){
				if(!template_ui)
					  return;
				var emailinfo = $(template_ui);
				emailinfo.modal('show');
			}, null);
		});

});
	/*Ticket related click event to show the modal when requester or assignee replies*/
	$("#activities-listners").on('click', '.ticket-activity-notes', function(e) 
{
	e.preventDefault();
   	var id = $(this).data("id");
    
    var activity_ticket_notes = activitiesview.collection.get(id).toJSON();

    //console.log(activity_ticket_notes.entityObject);
	getTemplate("ticket-activity-notes-modal", activity_ticket_notes, undefined, function(template_ui){

		if(!template_ui)
			  return;

		var emailinfo = $(template_ui);

		emailinfo.modal('show');
	}, null);

});

}

function getEventObject(id, callback)
{
	
	$.ajax({ 
			type : "GET", 
			url : 'core/api/events/getEventObject/' + id, 
			success : function(response) {
				if( callback && typeof(callback) === 'function' )	callback(response);
			} 
		});
}

function getActivityObject(id, callback)
{
	$.ajax({ 
			type : "GET", 
			url : 'core/api/activitylog/' + id, 
			success : function(response) {
				if( callback && typeof(callback) === 'function' )	callback(response);
			} 
		});
}

function update_event_activity(ele)
{
	$("#updateActivityModal").html(getTemplate("update-activity-modal"));
	
	var value = ele;
	deserializeForm(value, $("#updateActivityForm"));
	$('.update-start-timepicker').val(fillTimePicker(value.start));
	$('.update-end-timepicker').val(fillTimePicker(value.end));

	$("#updateActivityModal").modal('show');

	if (value.type == "WEB_APPOINTMENT" && parseInt(value.start) > parseInt(new Date().getTime() / 1000))
	{
		$("[id='event_delete']").attr("id", "delete_web_event");
		web_event_title = value.title;
		if (value.contacts.length > 0)
		{
			var firstname = getPropertyValue(value.contacts[0].properties, "first_name");
			if (firstname == undefined)
				firstname = "";
			var lastname = getPropertyValue(value.contacts[0].properties, "last_name");
			if (lastname == undefined)
				lastname = "";
			web_event_contact_name = firstname + " " + lastname;
		}
	}
	else
	{
		$("[id='delete_web_event']").attr("id", "event_delete");
	}
	if (value.description)
	{
		var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
		$("#event_desc").html(description);
		$("textarea#description").val(value.description);
	}
	else
	{
		var desc = '<div class="row-fluid">' + '<div class="control-group form-group m-b-none">' + '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>' + '<div class="controls event_discription hide">' + '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>' + '</div></div></div>'
		$("#event_desc").html(desc);
	}
	// Fills owner select element
	populateUsersInUpdateActivityModal(value);
}

function getModal()
{
	var activity_object = App_Activity_log.activitiesview.collection.models[this];
	alert(activity_object);
	console.log(activity_object);
}

function updateactivity__task(ele)
{
	var value = JSON.parse(ele);

	$("#updateTaskModal").html(getTemplate("task-update-modal")).modal('show');

	loadProgressSlider($("#updateTaskForm"), function(el){

		deserializeForm(value, $("#updateTaskForm"));
		// Fills owner select element
		populateUsers("owners-list", $("#updateTaskForm"), value, 'taskOwner', function(data)
		{
			$("#updateTaskForm").find("#owners-list").html(data);
			if (value.taskOwner)
			{
				$("#owners-list", $("#updateTaskForm")).find('option[value=' + value['taskOwner'].id + ']').attr("selected", "selected");
			}
			$("#owners-list", $("#updateTaskForm")).closest('div').find('.loading-img').hide();
		});

		// Add notes in task modal
		showNoteOnForm("updateTaskForm", value.notes);

	});

	
}

function updatedeals(ele)
{

	var value = JSON.parse(ele);
	console.log(value);

	add_recent_view(new BaseModel(value));

	var dealForm = $("#opportunityUpdateForm");

	$("#opportunityUpdateForm")[0].reset();

	deserializeForm(value, $("#opportunityUpdateForm"));

	$("#opportunityUpdateModal").modal('show');

	// Call setupTypeAhead to get contacts
	agile_type_ahead("relates_to", dealForm, contacts_typeahead);

	// Fills owner select element
	populateUsers("owners-list", dealForm, value, 'owner', function(data)
	{
		dealForm.find("#owners-list").html(data);
		if (value.owner)
		{
			$("#owners-list", dealForm).find('option[value=' + value['owner'].id + ']').attr("selected", "selected");
			$("#owners-list", $("#opportunityUpdateForm")).closest('div').find('.loading-img').hide();
		}
	});

	// Fills the pipelines list in the select menu.
	populateTracks(dealForm, undefined, value, function(pipelinesList)
	{

		// Fills milestone select element
		populateMilestones(dealForm, undefined, value.pipeline_id, value, function(data)
		{
			dealForm.find("#milestone").html(data);
			if (value.milestone)
			{
				$("#milestone", dealForm).find('option[value=\"' + value.milestone + '\"]').attr("selected", "selected");
			}
			$("#milestone", dealForm).closest('div').find('.loading-img').hide();
		});
	});

	// Add notes in deal modal
	showNoteOnForm("opportunityUpdateForm", value.notes);

	add_custom_fields_to_form(value, function(data)
	{
		var el = show_custom_fields_helper(data["custom_fields"], []);
		// if(!value["custom_data"]) value["custom_data"] = [];
		$("#custom-field-deals", dealForm).html(fill_custom_fields_values_generic($(el), value["custom_data"]));

	}, "DEAL")
}

function get_activity_created_time(due)
{
	// Get Todays Date
	var date = new Date();
	date.setHours(0, 0, 0, 0);

	date = date.getTime() / 1000;
	// console.log("Today " + date + " Due " + due);
	return Math.floor((due - date) / (24 * 3600));
}

/**
 * 
 * Based on created date arranges the activities UI
 * 
 * @method append_tasks
 * @param {Object}
 *            base_model task model
 * 
 */
function append_activity_log(base_model)
{

	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'li', });

	// add to the right box - overdue, today, tomorrow etc.
	var createdtime = get_activity_created_time(base_model.get('time'));

	// Today
	if (createdtime == 0)
	{
		$('#earllier').show();
		$('#next-week-heading').addClass("ref-head");

		var heading = $('#today-heading', this.el);

		$('#today-activity', this.el).append(itemView.render().el);
		$('#today-activity', this.el).parent('table').css("display", "block");
		$('#today-activity', this.el).show();
		$('#today-heading', this.el).show();
	}

	if (createdtime == -1)
	{
		$('#earllier').show();
		$('#next-week-heading').addClass("ref-head");

		var heading = $('#tomorrow-heading', this.el);

		$('#tomorrow-activity', this.el).append(itemView.render().el);
		$('#tomorrow-activity', this.el).parent('table').css("display", "block");
		$('#tomorrow-activity', this.el).show();
		$('#tomorrow-heading', this.el).show();
	}
	if (createdtime < -1)
	{

		var heading = $('#next-week-heading', this.el);

		$('#next-week-activity', this.el).append(itemView.render().el);
		$('#next-week-activity', this.el).parent('table').css("display", "block");
		$('#next-week-activity', this.el).show();
		$('#next-week-heading', this.el).show();
	}

}

var ACTIVITY_FILTER="activity-filters-cookie";

var ACTIVITY_FILTER_JSON={};

function includeTimeAgo(element)
{
	head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
	{
		$("time", element).timeago();
	});
}


function buildActivityFilters(name,valueid,clickedFrom){
   
		if(clickedFrom=='entityDropDown'){
		ACTIVITY_FILTER_JSON.entity=name;
		ACTIVITY_FILTER_JSON.entityId=valueid;
		}
		else if(clickedFrom=='userDropDown'){
		ACTIVITY_FILTER_JSON.user=name;
		ACTIVITY_FILTER_JSON.userId=valueid;
		}

		_agile_set_prefs(ACTIVITY_FILTER,JSON.stringify(ACTIVITY_FILTER_JSON));


}
/**
 * To show the dates or time in words of time-ago plugin.
 * 
 * @param element
 * 
 * 
 * 
 * updateData() method updates chat sessions on page for different query's from
 * user
 * 
 * @param params
 *            query string contains date, agentId & widgetId
 */
function renderActivityView(params)
{
	// Creates backbone collection view
	this.activitiesview = new Base_Collection_View({ url : '/core/api/activitylog/getActivitiesOnSelectedCondition' + params, sortKey : 'time',
		descending : true, templateKey : "activity-list-log", sort_collection : false, cursor : true, scroll_symbol : 'scroll', page_size : 20,
		individual_tag_name : 'li', postRenderCallback : function(el)
		{
			includeTimeAgo(el);
			initializeActivitiesListner(el);
			initializeEventListners(el);
			contactListener(el);
		}, appendItemCallback : function(el)
		{
			includeTimeAgo(el);
		}

	});
	activitiesview.appendItem = append_activity_log;
	// Fetches data from server
	this.activitiesview.collection.fetch();

	// Renders data to activity list page.
	$('#activity-list-based-condition').html(this.activitiesview.render().el);

}

/**
 * getParameters() method returns a string(used as query param string) contains
 * user selected type and entity type
 * 
 * @returns {String} query string
 */
function getActivityFilterParameters(loadingFirstTime,campaignHistory)
{
	$("#activities_date_range").show();
	var params = "?";

	var user =null;
	var entitytype=null;
	// Get Date Range
	var range = $('#activities_date_range #range').html().split("-");

	if (range)
	{
		//var start_time = Date.parse($.trim(range[0])).valueOf();
		//Get the GMT start time
		var start_time = getUTCMidNightEpochFromDate(new Date($.trim(range[0])));

		var end_value = $.trim(range[1]);

		// To make end value as end time of day
		if (end_value)
			end_value = end_value + " 23:59:59";

		// Returns milliseconds from end date.
		//var end_time = Date.parse(end_value).valueOf();
		var end_time = getUTCMidNightEpochFromDate(new Date(end_value));
		
		end_time += (((23*60*60)+(59*60)+59)*1000);

		// Adds start_time, end_time and timezone offset to params.
		params += ("start_time=" + start_time + "&end_time=" + end_time);

	}
	

	if(loadingFirstTime){
		var activityFilters=JSON.parse(_agile_get_prefs(ACTIVITY_FILTER));
		if(activityFilters)
		{
			user=activityFilters.userId;
			if(activityFilters.entityId)
			{
				entitytype=activityFilters.entityId;
				if(campaignHistory)
				{
					entitytype='ALL';
					$("#activities_date_range").hide();
				}
			}
			else if(campaignHistory)
			{
				entitytype='ALL';
				$("#activities_date_range").hide();
			}
			else
				entitytype='ALL';
		}

		else{
			if(campaignHistory)
			  {
				entitytype='ALL';
				$("#activities_date_range").hide();
			   }
			entitytype="ALL";
		}
		if(user)
		params += ("&user_id=" + user);
		params += ("&entity_type=" + entitytype);
		return params;
	}

	// Returns milliseconds from start date. For e.g., August 6, 2013 converts
	// to 1375727400000

	// Get task type and append it to params
	 user = $('#user-select').data("selected_item");

	 entitytype = $('#entity_type').data("selected_item");

	 //For change campaign activity url to activity url
	 document.location.hash = "activities";
	if (user)
		params += ("&user_id=" + user);
	// Get owner name and append it to params

	
	if (entitytype == 'TASK')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}

	else if (entitytype == 'DEAL')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else if (entitytype == 'USER')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}

	else if (entitytype == 'EVENT')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else if (entitytype == 'CONTACT')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else if (entitytype == 'DOCUMENT')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else if (entitytype == 'CALL')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else if (entitytype == 'TICKET')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else if (entitytype == 'CAMPAIGN')
	{
		params += ("&entity_type=" + entitytype);
		return params;
	}
	else
	{
		params += ("&entity_type=ALL");
		return params;
	}

	return params;
}

function initActivitiesDateRange()
{
	$('#activities_date_range').daterangepicker({ ranges : { 'Today' : [
			'today', 'today'
	], 'Yesterday' : [
			'yesterday', 'yesterday'
	], 'Last 7 Days' : [
			Date.today().add({ days : -6 }), 'today'
	], 'Last 30 Days' : [
			Date.today().add({ days : -29 }), 'today'
	], 'This Month' : [
			Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()
	], 'Last Month' : [
			Date.today().moveToFirstDayOfMonth().add({ months : -1 }), Date.today().moveToFirstDayOfMonth().add({ days : -1 })
	], 'This Quarter' : [
			Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() : 
			(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() :
			(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(9)).moveToFirstDayOfMonth(), 
			Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() : 
			(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() :
			(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(8)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
	], 'Last Quarter' : [
			Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(9)).moveToFirstDayOfMonth() : 
			(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() :
			(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth(), 
			Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(11)).moveToLastDayOfMonth() : 
			(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() :
			(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(8)).moveToLastDayOfMonth()
	], 'This Year' : [
			new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
	], 'Last Year' : [
			new Date(Date.today().setMonth(0)).add({ years : -1 }).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).add({ years : -1 }).moveToLastDayOfMonth()
	] }, locale : { applyLabel : 'Apply', cancelLabel : 'Cancel', fromLabel : 'From', toLabel : 'To', customRangeLabel : 'Custom', daysOfWeek : [
			'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'
	], monthNames : [
			'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
	], firstDay : parseInt(CALENDAR_WEEK_START_DAY) } }, function(start, end)
	{
		if (start && end)
		{
			$('#activities_date_range #range').html(start.toString('MMMM d, yyyy') + ' - ' + end.toString('MMMM d, yyyy'));

			renderActivityView(getActivityFilterParameters());
		}
		else
		{
			var from_date = Date.parse('today');
			var to_date = Date.today().add({ days : parseInt(-6) });
			$('#activities_date_range #range').html(to_date.toString('MMMM d, yyyy') + " - " + from_date.toString('MMMM d, yyyy'));
			renderActivityView(getActivityFilterParameters());

			$('.daterangepicker > .ranges > ul > li.active').removeClass("active");
		}
	});
	$('.daterangepicker > .ranges > ul').on("click", "li", function(e)
	{
		$('.daterangepicker > .ranges > ul > li').each(function(){
			$(this).removeClass("active");
		});
		$(this).addClass("active");
	});
}// UI Handlers for activities - event & task
/**
 * activity-modal.js is a script file to deal with common UI Handlers for
 * activities - event & task from client side.
 * 
 * @module Activities  
 * 
 * author: Rammohan
 */
$(function() {

	$("#activityTaskModal,#activityModal,#updateActivityModal").on("click", "#activityForm #allDay, #updateActivityForm #allDay", function(e){

			if($(this).is(':checked'))
			{	
				$('#activityForm #event-time-1').closest('.control-group').hide();
				$('#activityForm #event-date-2').closest('.row').hide();
			}
			else 
			{
				$('#activityForm #event-time-1').closest('.control-group').show();
				$('#activityForm #event-date-2').closest('.row').show();
			}
			
			if($(this).is(':checked'))
			{
				$('#updateActivityForm #update-event-time-1').closest('.control-group').hide();
				$('#updateActivityForm #update-event-date-2').closest('.row').hide();
			}
			else 
			{
				$('#updateActivityForm #update-event-time-1').closest('.control-group').show();
				$('#updateActivityForm #update-event-date-2').closest('.row').show();
			}
	});

	/**
	 * Saves the content of activity modal by verifying whether it is a task or
	 * event
	 */
	$("#activityTaskModal,#activityModal").on('click', '#task_event_validate', function(e) {
		e.preventDefault();

		console.log(this);
		// Save functionality for task by checking task or not
		if ($("#hiddentask").val() == "task") {

			save_task('taskForm', 'activityTaskModal', false, this);
		} else {
			var currentDiv = $('#activityModal').find("#current_div").val();
			// Save functionality for event
			save_event('activityForm', 'activityModal', false, this,currentDiv,function(data){
						//	eventCollectionView.collection.comparator ='start';
									eventCollectionView.collection.add(data.toJSON());
									eventCollectionView.collection.sort();
							
			});
		}
	}); // End of Task and Event Validation function

});var popover_call;
/**
 * 
 * Describes the given object is an array or not
 * 
 * @param {Object}
 *            a to verify array or not
 * @returns {Boolean} true if given param is array else false
 */
function isArray(a)
{
	return Object.prototype.toString.apply(a) === '[object Array]';
}

/**
 * Loads events from google calendar using tokens either from cookies or token
 * from backend when token in cookie is epired
 * 
 * @param callback
 */
function load_events_from_google(callback)
{
	var eventFilters;
	var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	

	if(eventData){
		eventFilters = eventData[CURRENT_AGILE_USER.id];
	}

	// If Event Filters are not defined, don't load Google Events.
	// This is default functionality.
	if( !(eventFilters) )	return;
	
	var agile_event = false;
	if (eventFilters)
	{		
		var type_of_cal = eventFilters.cal_type;
		var owners = eventFilters.owner_ids;
		if (owners && owners.length > 0)
		{
			$.each(owners, function(index, value)
			{
				if (value)
				{
					if (value.id == CURRENT_AGILE_USER.id)
						agile_event = true;
				}
			});
		}
		if(type_of_cal){
			var typelength = type_of_cal.length;										
			if(typelength > 0){
				//Google
				var inArray = type_of_cal.indexOf("google");
				if(inArray >= 0){
					//continue
				}else{
					return;
				}
			}
			else{
				return;
			}
		}
		else{
				return;
			}
//		if ((type_of_cal && type_of_cal.length != 2 && type_of_cal[0] == 'agile') || type_of_cal.length == 0)
//		{
//			return;
//		}
	}

	get_google_calendar_prefs(callback);

}

function get_google_calendar_prefs(callback)
{
		// Name of the cookie to store/ calendar prefs. Current user id is set
	// in cookie name to avoid
	// showing tasks in different users calendar if logged in same browser
	var google_calendar_cookie_name = "_agile_google_calendar_prefs_" + CURRENT_DOMAIN_USER.id;

	// Reads existing cookie
	var _agile_calendar_prefs_cookie = _agile_get_prefs(google_calendar_cookie_name);

	// If cookie is not null, then it check it token is still valid; checks
	// based on expiry time.
	if (_agile_calendar_prefs_cookie && _agile_calendar_prefs_cookie != "null")
	{
		var prefs = JSON.parse(_agile_calendar_prefs_cookie);


		// Checks if token expired. It considers expire before 2 minutes window
		// of actual expiry time.
		if (prefs.expires_at - (2 * 60 * 1000) >= new Date().getTime())
		{
			// Returns token to the callback accoring to specification of gcal
			return get_google_calendar_event_source(prefs, callback);
			
		}

		// Erases cookie if token is expired and sends request to backend to
		// acquire new token
		erase_google_calendar_prefs_cookie()

	}

	// Fetch new token from backen, saves in cookie, and token is returned to
	// gcal
	$.getJSON('/core/api/calendar-prefs/refresh-token', function(prefs)
	{
		if (!prefs)
			return;

		// Creates cookie
		_agile_set_prefs(google_calendar_cookie_name, JSON.stringify(prefs));
		return get_google_calendar_event_source(prefs, callback);
	});
}

/**
 * Erases calendar cookie
 */
function erase_google_calendar_prefs_cookie()
{
	var google_calendar_cookie_name = "_agile_google_calendar_prefs_" + CURRENT_DOMAIN_USER.id;
	_agile_delete_prefs(google_calendar_cookie_name);
	_agile_delete_prefs(google_calendar_cookie_name);
}

function get_calendar_ids_form_prefs(data)
{

		if(!data)
			return;

		var calendar_ids = ["primary"];

		if(data.prefs)
		{
			

			try
			{
				var prefs;
				if(typeof data.prefs != 'object')
					prefs = JSON.parse(data.prefs);
				else
					prefs = data.prefs;

				if(prefs.fields != null)
				calendar_ids = prefs.fields;		
			}
			catch (err)
			{
				console.log(err);
			}
		}

		return calendar_ids;
}

// Returns token in to gcal callback in specified format
function get_google_calendar_event_source(data, callback)
{

	if (callback && typeof (callback) === "function")
	{
		callback({ token : data.access_token, dataType : 'agile-gcal', className : "agile-gcal", calendarIds : get_calendar_ids_form_prefs(data)});
	}
	return true;
}

/**
 * Shows the calendar
 */
var fullCal;
function showCalendar(users)
{

	_init_gcal_options(users);
	put_thirdparty_calendar_links();
	
	var calendarView = (!_agile_get_prefs('calendarDefaultView')) ? 'month' : _agile_get_prefs('calendarDefaultView');
	$('#' + calendarView).addClass('bg-light');
	var contentHeight = 400;
	if (calendarView == "agendaDay" || calendarView == "agendaWeek")
	{
		contentHeight = 575;
	}
	fullCal = $('#calendar_event')
			.fullCalendar(
					{

						/**
						 * Renders the events displaying currently on
						 * fullCalendar
						 * 
						 * @method events
						 * @param {Object}
						 *            start fullCalendar current section start
						 *            day date object
						 * @param {Object}
						 *            end fullCalendar current section end day
						 *            date object
						 * @param {function}
						 *            callback displays the events on
						 *            fullCalendar
						 * 
						 */

						eventSources : [
								{ 	
									events : function(start, end, callback)
								{
									var eventFilters;
									var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	
	
									if(eventData){
										eventFilters = eventData[CURRENT_AGILE_USER.id];
									}																		
									
									var agile_event_owners = '';
									if (eventFilters)
									{										
										var type_of_cal = eventFilters.cal_type;
										var owners = eventFilters.owner_ids;

										$.each(type_of_cal, function(index, value)
										{
											if (value == 'agile')
												owners.push(CURRENT_AGILE_USER.id);
										});

										var typelength = type_of_cal.length;										
										if(typelength > 0){
											//Google
											var inArray = type_of_cal.indexOf("google");
											if(inArray >= 0){
												//contiune
											}
											
											//Office
											var inArray = type_of_cal.indexOf("office");
											if(inArray >= 0){
												addOffice365CalendarEvents();
											}
											
											//Agile
											var inArray = type_of_cal.indexOf("agile");
											if(inArray >= 0 ||( owners && owners.length > 0)){
												//continue
											}else{
												callback([]);
												return;
											}
										}
										
										

//										if ((type_of_cal.length == 1 && type_of_cal[0] == 'google' && owners.length == 1 && owners[0] == CURRENT_AGILE_USER.id) || type_of_cal.length == 0 && owners.length == 0)
//										{
//											$("#loading_calendar_events").hide();
//											return;
//										}
									}

									/*
									 * if (_agile_get_prefs('event-filters') &&
									 * eventFilters.type == 'google') {
									 * $("#loading_calendar_events").hide();
									 * return; }
									 */
									var start_end_array = {};
									start_end_array.startTime = start.getTime() / 1000;
									start_end_array.endTime = end.getTime() / 1000;
									console.log(start_end_array.startTime+" : "+start_end_array.endTime);
									_agile_set_prefs('fullcalendar_start_end_time', JSON.stringify(start_end_array));

									var eventsURL = '/core/api/events?start=' + start.getTime() / 1000 + "&end=" + end.getTime() / 1000;
									if (owners && owners.length > 0)
									{
										$.each(owners, function(index, value)
										{
											addEventsToCalendar(eventsURL + '&owner_id=' + value);
										});
									}

								},
								dataType: 'agile-events'

								},
								{
									dataType : 'agile-gcal',
									
								},
								
							
						],
						header : { left : 'prev', center : 'title', right : 'next' },
						defaultView : calendarView,
						slotEventOverlap : false,
						viewDisplay : function(view)
						{
							_agile_set_prefs('calendarDefaultView', view.name, 90);
							$(".fc-agenda-axis").addClass('bg-light lter');
						},
						loading : function(bool)
						{
							if (bool)
							{
								pushLoading();
								$("#loading_calendar_events").remove();
								$('.fc-header-left','#calendar_event')
										.append(
												'<span id="loading_calendar_events" style="margin-left:5px;vertical-align:middle;padding-top: 5px;position: absolute;">loading...</span>')
										.show();
								$('.fc-header-left','#calendar_event').show();

							}
							else
							{
								if(popLoading() <= 0)
								{
									// $('#loading').hide();
									$("#loading_calendar_events").hide();
									start_tour('calendar');	
								}
								
							}
							$(".fc-agenda-axis").addClass('bg-light lter');
							$(".ui-resizable-handle").hide();
						},
						selectable : true,
						selectHelper : true,
						editable : true,
						theme : false,
						contentHeight : contentHeight,
						firstDay : CALENDAR_WEEK_START_DAY,
						firstHour : 7,
						themeButtonIcons : { prev : 'fc-icon-left-single-arrow', next : 'fc-icon-right-single-arrow' },
						eventMouseover : function(event, jsEvent, view)
						{

							calendarView = (!_agile_get_prefs('calendarDefaultView')) ? 'month' : _agile_get_prefs('calendarDefaultView');
							var reletedContacts = '';
							var meeting_type = '';
							 	
								
								
								var leftorright = 'left';	
								var pullupornot = '';
								var popoverElement = '';
								var popover_min_width = 300;
								var that = $(this);	
								var that_event = jsEvent.currentTarget;
								if(that.data("data_fetched"))
								{
									event.contacts=that.data("data_fetched");
									calendar_Popover(event,calendarView,that,popover_min_width,that_event,leftorright,pullupornot,popoverElement,reletedContacts,meeting_type)
									return;
								}
								if(event.id!=undefined){
								popover_call=
								$.ajax({ 
									url : "/core/api/events/contacts-related?id="+event.id, 
									dataType : 'json',
									success : function(data){
											console.log(data);
											that.data("data_fetched",data);
											event.contacts=data;
												calendar_Popover(event,calendarView,that,popover_min_width,that_event,leftorright,pullupornot,popoverElement,reletedContacts,meeting_type)
									}		
							});
						}
							else
							{
								calendar_Popover(event,calendarView,that,popover_min_width,that_event,leftorright,pullupornot,popoverElement,reletedContacts,meeting_type);
							}
						},
						eventMouseout : function(event, jsEvent, view)
						{
							if(popover_call)
							popover_call.abort();
							$(this).parent().find('.fc-overlayw').hide();
							$(this).parent().find('.fc-overlayw').remove();
							$(this).find(".ui-resizable-handle").hide();
							$(jsEvent.currentTarget).css('z-index', 8);
							if (event.allDay)
							{
								$(jsEvent.currentTarget.parentElement).css('z-index', 8);
							}
						},
						eventAfterRender : function(event, element, view)
						{
							$(".ui-resizable-handle").hide();
							event = renderEventBasedOnOwner(event);
							var start_event = new Date(event.start).getTime() / 1000;
							var end_event = new Date(event.end).getTime() / 1000;
							if (end_event - start_event == 3600)
							{
								$(element).height('');
							}
							
							if(event.type == "officeCalendar"){
								$(element).height('');
							}
						},

						/**
						 * Shows event pop-up modal with pre-filled date and
						 * time values, when we select a day or multiple days of
						 * the fullCalendar
						 * 
						 * @method select
						 * @param {Object}
						 *            start start-date of the event
						 * @param {Object}
						 *            end end-date of the event
						 * @param {Boolean}
						 *            allDay
						 */
						select : function(start, end, allDay)
						{
							// Show a new event
							$('#activityModal').html(getTemplate("new-event-modal")).modal('show');
							highlight_event();

							// Set Date for Event
							//var dateFormat = 'mm/dd/yyyy';
							$('#task-date-1').val(getDateInFormat(start));
							$("#event-date-1").val(getDateInFormat(start));
							$("#event-date-2").val(getDateInFormat(end));

							// Set Time for Event
							if ((start.getHours() == 00) && (end.getHours() == 00) && (end.getMinutes() == 00))
							{
								$('#event-time-1').val('');
								$('#event-time-2').val('');
							}
							else
							{
								$('#event-time-1')
										.val(
												(start.getHours() < 10 ? "0" : "") + start.getHours() + ":" + (start.getMinutes() < 10 ? "0" : "") + start
														.getMinutes());
								$('#event-time-2').val(
										(end.getHours() < 10 ? "0" : "") + end.getHours() + ":" + (end.getMinutes() < 10 ? "0" : "") + end.getMinutes());
							}

						},
						/**
						 * Updates the event by changing start and end date,
						 * when it is dragged to another location on
						 * fullCalendar.
						 * 
						 * @method eventDrop
						 * @param {Object}
						 *            event1 event with new start and end date
						 * @param {Number}
						 *            dayDelta holds the number of days the
						 *            event was moved forward
						 * @param {Number}
						 *            minuteDelta holds the number of minutes
						 *            the event was moved forward
						 * @param {Boolean}
						 *            allDay weather the event has been dropped
						 *            on a day in month view or not
						 * @param {Function}
						 *            revertFunc sets the event back to it's
						 *            original position
						 */
						eventDrop : function(event1, dayDelta, minuteDelta, allDay, revertFunc)
						{
							
							if(!hasScope("MANAGE_CALENDAR") && (CURRENT_DOMAIN_USER.id != event1.owner.id)){
								revertFunc();
								$("#moveEventErrorModal").html(getTemplate("move-event-error-modal")).modal('show');
								return;
							}

							// Confirm from the user about the change
							showAlertModal("event_drop", "confirm", function(){
								event1 = revertEventColorBasedOnPriority(event1);
								var event = $.extend(true, {}, event1);

								// Update event if the user changes it in the
								// calendar
								event.start = new Date(event.start).getTime() / 1000;
								event.end = new Date(event.end).getTime() / 1000;
								if (event.end == null || event.end == 0)
									event.end = event.start;

								var jsoncontacts = event.contacts;
								var _contacts = [];
								for ( var i in jsoncontacts)
								{
									_contacts.push(jsoncontacts[i].id);

								}
								if(event.owner)
								event.owner_id = event.owner.id;
								delete event.contacts;
								delete event.owner;
								event
								event.contacts = _contacts;
								var eventModel = new Backbone.Model();
								eventModel.url = 'core/api/events';

								eventModel.save(event);
							},function(){
								revertFunc();
							});

							
						},
						/**
						 * Updates or deletes an event by clicking on it
						 * 
						 * @method eventClick
						 * @param {Object}
						 *            event to update or delete
						 */
						eventClick : function(event)
						{
							event = revertEventColorBasedOnPriority(event);

							if (isNaN(event.id))
								return;

							// Show edit modal for the event
							$("#updateActivityModal").html(getTemplate("update-activity-modal")).modal("show");


							// Deserialize
							deserializeForm(event, $("#updateActivityForm"));

							// Set time for update Event
							$('#update-event-time-1')
									.val(
											(event.start.getHours() < 10 ? "0" : "") + event.start.getHours() + ":" + (event.start.getMinutes() < 10 ? "0" : "") + event.start
													.getMinutes());
							$('#update-event-time-2').val(
									(event.end.getHours() < 10 ? "0" : "") + event.end.getHours() + ":" + (event.end.getMinutes() < 10 ? "0" : "") + event.end
											.getMinutes());

							// Set date for update Event
							var dateFormat = 'mm/dd/yyyy';
							$("#update-event-date-1").val(getDateInFormat(event.start));
							$("#update-event-date-2").val(getDateInFormat(event.end));

							// hide end date & time for all day events
							if (event.allDay)
							{
								$("#update-event-date-2").closest('.row').hide();
								$('#update-event-time-1').closest('.control-group').hide();
							}
							else
							{
								$('#update-event-time-1').closest('.control-group').show();
								$("#update-event-date-2").closest('.row').show();
							}

							if (event.type == "WEB_APPOINTMENT" && parseInt(new Date(event.start).getTime() / 1000) > parseInt(new Date().getTime() / 1000))
							{
								$("[id='event_delete']").attr("id", "delete_web_event");
								web_event_title = event.title;
								if (event.contacts.length > 0)
								{
									var firstname = getPropertyValue(event.contacts[0].properties, "first_name");
									if (firstname == undefined)
										firstname = "";
									var lastname = getPropertyValue(event.contacts[0].properties, "last_name");
									if (lastname == undefined)
										lastname = "";
									web_event_contact_name = firstname + " " + lastname;
								}
							}
							else
							{
								$("[id='delete_web_event']").attr("id", "event_delete");
							}
							if (event.description)
							{
								var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
								$("#event_desc").html(description);
								$("textarea#description").val(event.description);
							}
							else
							{
								var desc = '<div class="row-fluid">' + '<div class="control-group form-group m-b-none " id="addEventDescription">' + '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>' + '<div class="controls event_discription hide">' + '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>' + '</div></div></div>'
								$("#event_desc").html(desc);
							}
							
							App_Calendar.current_event = event;
							agile_type_ahead("event_relates_to_deals", $('#updateActivityModal'), deals_typeahead, false,null,null,"core/api/search/deals",false, true);

							// Fills owner select element
							populateUsersInUpdateActivityModal(event);

							// initializeEventModelEvents();
							return false;
						}

					});
}

function showEventFilters()
{
	$('#filter_options').show();

	if (_agile_get_prefs("agile_calendar_view"))
		$('#filter_options .calendar-view').hide();
	else
		$('#filter_options .list-view').hide();

	if (_agile_get_prefs('event-filters'))
	{
		var eventFilters = JSON.parse(_agile_get_prefs('event-filters'));
		$('#event-owner').val(eventFilters.owner_id);
		$('#event_type').val(eventFilters.type);
	}

}

function buildEventFilters()
{
	$.getJSON('/core/api/users/agileusers', function(users)
	{
		var html = '', html1 = '';
		if (users)
		{
			$.each(users, function(i, user)
			{
				if (CURRENT_DOMAIN_USER.id == user.domain_user_id)
					html1 = '<option value=' + user.id + '>Me</option>';
				else
				{
					if (user.domainUser)
						html += '<option value=' + user.id + '>' + user.domainUser.name + '</option>';
				}
			});
			html += '<option value="">Any</option>';
		}
		$('#event-owner').html(html1 + html);
	});
}

function loadDefaultFilters(callback)
{
	// Create a cookie with default option, if there is no cookie related to
	// event filter.
	if (!_agile_get_prefs('event-filters'))
	{
		$.getJSON('/core/api/users/current-agile-user', function(user)
		{
			if (CURRENT_DOMAIN_USER.id == user.domain_user_id)
			{
				var json = {};
				json.owner_id = user.id.toString();
				json.type = '';
				_agile_set_prefs('event-filters', JSON.stringify(json));
			}
			
			if (callback)
				callback();
		});
	}
}

$(function(){
	/**
	 * Hide the filters window when click on out side of the filters pop up.
	 */
	$(document).mouseup(function(e)
	{
		var container = $("#filter_options");

		if (!container.is(e.target) // if the target of the click isn't the
				// container...
				&& container.has(e.target).length === 0) // ... nor a
		// descendant of the
		// container
		{
			container.hide();
		}
	});

	// loadDefaultFilters();
	
});
function changeView(view)
{
	currentView = view;
	fullCal.fullCalendar('changeView', view);
};
function today()
{
	fullCal.fullCalendar('today');
}
function refreshcal(){
	fullCal.fullCalendar('refetchEvents');
}

/**
 * gets the agileusers to build calendar filters
 * @returns {Array}
 */
function getCalendarUsersDetails(callback)
{

	accessUrlUsingAjax('/core/api/users/agileusers', function(data){

		if(!data)
			 return callback(data);

		var json_users = [];
		$.each(data, function(i, user)
		{

			if (CURRENT_DOMAIN_USER.id == user.domain_user_id)
			{
				CURRENT_AGILE_USER = user;
				return;
			}
			
			if (user.domainUser)
			{
				var json_user = {};
				json_user.id = user.id;
				json_user.name = user.domainUser.name;
				json_user.domain_user_id = user.domainUser.id;
				if (hasScope("VIEW_CALENDAR")) {
					json_users.push(json_user);
				}
			}
		});
		return callback(json_users);

	});
}

/*
function multiple_property_list(item,propertyName)
{
	

	// Gets properties list field from contact
	var properties = item;
	var property_list = [];

	
	 * Iterates through each property in contact properties and checks for the
	 * match in it for the given property name and retrieves value of the
	 * property if it matches
	 
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName)
		{
			property_list.push(property);
		}
	});

	// If property is defined then return property value list
	return property_list;
}*/

function setUpStarRating(value){


		var element = "";
		for (var i = 0; i < 5; i++)
		{
			if (i < parseInt(value))
			{
				element = element.concat('<li style="display: inline;"><img src="'+updateImageS3Path("img/star-on.png")+'" alt="' + i + '"></li>');
				continue;
			}
			element = element.concat('<li style="display: inline;"><img src="'+updateImageS3Path("img/star-off.png")+'" alt="' + i + '"></li>');
		}
		return element;
}

function calendar_Popover(event,calendarView,that,popover_min_width,that_event,leftorright,pullupornot,popoverElement,reletedContacts,meeting_type){
									$('.fc-overlayw').hide();
								$('.fc-overlayw').remove();
									if (calendarView == "month")
									{
										console.log("month");

										popover_min_width = that.parents('.fc-view-month').find('.fc-widget-content').eq(0).width() * 2;
										var left =that_event.offsetLeft + that_event.offsetWidth + 10;
										var top = that_event.offsetTop;
										if (that.parents('.fc-view-month').find('.fc-border-separate:visible').width() - left < popover_min_width)
										{
											left = that_event.offsetLeft - popover_min_width - 10;
											leftorright = 'right';
										}
										if (that.parents('.fc-view-month').find('.fc-border-separate:visible').width() - popover_min_width - 20 < that_event.offsetWidth)
										{
											left = ((that_event.offsetLeft + that_event.offsetWidth + 10) / 2) - (popover_min_width / 2);
											top = that_event.offsetTop + that_event.offsetHeight + 10;
											leftorright = 'top';
										}

										var eventJSON = {};
										
										eventJSON.leftorright = leftorright;eventJSON.popover_min_width = popover_min_width;
										eventJSON.popover_min_width = popover_min_width;eventJSON.left = left;eventJSON.top = top;
										eventJSON.pullupornot = pullupornot;eventJSON.event = event;
										
							  

										if(event.type == "officeCalendar"){
											that.after($(getTemplate("office-calendar-mouseover-popover", eventJSON)));
										}else{
											that.after($(getTemplate("calendar-mouseover-popover", eventJSON)));
										}
										that.parent().find('.fc-overlayw').show();
										that.find(".ui-resizable-handle").show();
										
										if (that.parents('.fc-view-month').find('.fc-border-separate:visible').height() - that_event.offsetTop < that.parent().find('.fc-overlayw')
												.height())
										{
											that.parent().find('.fc-overlayw').css("top",
													top - that.parent().find('.fc-overlayw').height() + that_event.offsetHeight + 20 + "px");
											that.parent().find('.fc-overlayw').find('.arrow').css("top", that.parent().find('.fc-overlayw').height() - 31 + "px");
										}
										if (that.parents('.fc-view-month').find('.fc-border-separate:visible').width() - popover_min_width - 20 < that_event.offsetWidth)
										{
											that.parent().find('.fc-overlayw').find('.arrow').css("top", "-9px");
										}
										if ((that.parents('.fc-view-month').find('.fc-border-separate:visible').height() - that_event.offsetTop - that_event.offsetHeight - 10 < that
										.parent().find('.fc-overlayw').height() + 10) && (that.parents('.fc-view-month').find('.fc-border-separate:visible').width() - popover_min_width - 20 < that_event.offsetWidth))
										{
											that.parent().find('.fc-overlayw').find('.arrow').removeClass('top').addClass('bottom');
											left = ((that_event.offsetLeft + that_event.offsetWidth + 10) / 2) - (popover_min_width / 2);
											top = that_event.offsetTop - that.parent().find('.fc-overlayw').height() + 10;
											that.parent().find('.fc-overlayw').css({ "top" : top + "px", "lef" : left + "px" });
											that.parent().find('.fc-overlayw').find('.arrow').css("top",that.parent().find('.fc-overlayw').height() - 22 + "px");
										}
										
									}
	else if (calendarView == "agendaWeek")
			{
			console.log("agendaWeek");
popover_min_width = $('.fc-view-agendaWeek').find('.fc-widget-content').eq(0).width() * 2;
	var left = that_event.offsetLeft + that_event.offsetWidth + 10;
	var top = that_event.offsetTop;
		if ($('.fc-agenda-slots:visible').width() - left < popover_min_width)
			{
			left = that_event.offsetLeft - popover_min_width - 10;
			leftorright = 'right';
			}

	var eventJSON = {};
	eventJSON.leftorright = leftorright;eventJSON.popover_min_width = popover_min_width;
	eventJSON.left = left;eventJSON.top = top;
	eventJSON.pullupornot = pullupornot;eventJSON.event = event;
										
		if(event.type == "officeCalendar"){
			that.after(getTemplate("week-office-calendar-mouseover-popover", eventJSON));
			}else{
			that.after(getTemplate("week-calendar-mouseover-popover", eventJSON));
			}
			that.parent().find('.fc-overlayw').show();
			that.find(".ui-resizable-handle").show();
										
	if ($('.fc-agenda-slots:visible').height() - that_event.offsetTop < that.parent().find('.fc-overlayw').height())
		{
		that.parent().find('.fc-overlayw').css("top",
		top - that.parent().find('.fc-overlayw').height() + that_event.offsetHeight + 20 + "px");
		that.parent().find('.fc-overlayw').find('.arrow').css("top", that.parent().find('.fc-overlayw').height() - 31 + "px");
		}
			}
else if (calendarView == "agendaDay")
{
console.log("agendaDay");
var left = that_event.offsetLeft;
var top = that_event.offsetTop + that_event.offsetHeight + 10;
leftorright = 'top';
if ($('.fc-agenda-slots:visible').width() - that_event.offsetLeft < popover_min_width)
	{
	left = that_event.offsetLeft - that_event.offsetWidth - ($('.fc-agenda-slots:visible').width() - that_event.offsetLeft - that_event.offsetWidth);
	}
								
	var eventJSON = {};
	eventJSON.leftorright = leftorright;
	eventJSON.popover_min_width = popover_min_width;
	eventJSON.left = left;
	eventJSON.top = top;
	eventJSON.pullupornot = pullupornot;
	eventJSON.event = event;
	if(event.type == "officeCalendar"){
	that.after(getTemplate("day-office-calendar-mouseover-popover", eventJSON));
	}else{
	try{
	that.after(getTemplate("day-calendar-mouseover-popover", eventJSON));
	}catch(e){}
	}
	that.parent().find('.fc-overlayw').show();
	that.find(".ui-resizable-handle").show();
						
     that.parent().find('.fc-overlayw').find('.arrow').css({ "top" : "-9px", "left" : "11px" });
if ($('.fc-agenda-slots:visible').width() - that_event.offsetLeft < popover_min_width)
		{
		that.parent().find('.fc-overlayw').find('.arrow').css({ "top" : "-9px", "left" : popover_min_width - 15 + "px" });
		}
if ((that_event.offsetTop < that.parent().find('.fc-overlayw').height() + 10) && 
			($('.fc-agenda-slots:visible').height() - that_event.offsetHeight 
				< that.parent().find('.fc-overlayw').height() + 10))
			{
			that.parent().find('.fc-overlayw').css("top", that_event.offsetTop + 40 + "px");
			}
if ((that_event.offsetTop > that.parent().find('.fc-overlayw').height() + 10) &&
 ($('.fc-agenda-slots:visible').height() - (that_event.offsetHeight + that_event.offsetTop)
  < that.parent().find('.fc-overlayw').height() + 10))
{

that.parent().find('.fc-overlayw').find('.arrow').removeClass('top').addClass('bottom');
    
 that.parent().find('.fc-overlayw').css( "top", top - that.parent().find('.fc-overlayw') 
    	.height() -37 + "px"); 
    that.parent().find('.fc-overlayw').find('.arrow').css("top",that.parent()
    	.find('.fc-overlayw') .height() -3 + "px"); 
	
	if ($('.fc-agenda-slots:visible').width() - that_event.offsetLeft < popover_min_width)
	{
	that.parent().find('.fc-overlayw')
	.css("left",that_event.offsetLeft - that_event.offsetWidth - ($('.fc-agenda-slots:visible')
	.width() - that_event.offsetLeft - that_event.offsetWidth) + "px");
											}
										}
									}
							$(that_event).css('z-index', 9);
							if (event.allDay){
								$(that_event.parentElement).css('z-index', 9);
							}
							
}function append_contact_activities_log(base_model)
{

	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'li', });

	// add to the right box - overdue, today, tomorrow etc.
	var createdtime = get_activity_created_time(base_model.get('time'));

	// Today
	if (createdtime == 0)
	{
		$('#earllier').show();
		$('#earlier-heading').addClass("ref-head");

		var heading = $('#today-heading', this.el);

		$('#contact-activity-today-list-log-model-list', this.el).append(itemView.render().el);
		$('#contact-activity-today-list-log-model-list', this.el).parent('table').css("display", "block");
		$('#contact-activity-today-list-log-model-list', this.el).show();
		$('#today-heading', this.el).show();
	}

	if (createdtime == -1)
	{ 
		$('#earllier').show();
		$('#earlier-heading').addClass("ref-head");

		var heading = $('#tomorrow-heading', this.el);

		$('#contact-activity-yesterday-list-log-model-list', this.el).append(itemView.render().el);
		$('#contact-activity-yesterday-list-log-model-list', this.el).parent('table').css("display", "block");
		$('#contact-activity-yesterday-list-log-model-list', this.el).show();
		$('#yesterday-heading', this.el).show();
	}
	if (createdtime < -1)
	{

		var heading = $('#next-week-heading', this.el);

		$('#contact-activity-earlier-list-log-model-list', this.el).append(itemView.render().el);
		$('#contact-activity-earlier-list-log-model-list', this.el).parent('table').css("display", "block");
		$('#contact-activity-earlier-list-log-model-list', this.el).show();
		$('#earlier-heading', this.el).show();
	}

}/**
 * creates request url based on values selected from calenar LHS filters
 */

function createRequestUrlBasedOnFilter()
{
	var calendars_val = [];
	var calendars_user_val = [];
	var calendars_domain_user_ids = [];
	var event_list_type = '';

	$('.calendar_check').each(function()
	{
		if (this.checked)
			calendars_val.push($(this).val());

	});

	$('.calendar_user_check').each(function()
	{
		if (this.checked)
		{
			calendars_user_val.push($(this).val());
			calendars_domain_user_ids.push($(this).attr("data"));
		}

	});
	if (_agile_get_prefs("agile_calendar_view"))
	{

		event_list_type = $("#event_time").val();
	}

	var uniqueNames = [];
	$.each(calendars_user_val, function(i, el)
	{
		if ($.inArray(el, uniqueNames) === -1)
			uniqueNames.push(el);
	});
	calendars_user_val = uniqueNames;
	var json_obj = {};
	json_obj.cal_type = calendars_val;
	json_obj.owner_ids = calendars_user_val;
	json_obj.domain_user_ids = calendars_domain_user_ids;

	var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	
	eventData[CURRENT_AGILE_USER.id] = json_obj;

	/*
	 * if (event_list_type) json_obj.event_type = event_list_type;
	 */
	_agile_set_prefs('event-lhs-filters', JSON.stringify(eventData));

}

// this function will be called to read filters from cookie if not found creates
// cookie with default values
function buildCalendarLhsFilters(){

	var defaultPrefs = {};
	defaultPrefs.cal_type = ["agile"];
	defaultPrefs.owner_ids = [];
	defaultPrefs.domain_user_ids = [];		

	var eventFilters;
	var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	
	var prefs = {};

	if(eventData){
		eventFilters = eventData[CURRENT_AGILE_USER.id];
		if(!eventFilters){			
			eventFilters = defaultPrefs;						
		    prefs[CURRENT_AGILE_USER.id] = defaultPrefs;
		    _agile_set_prefs('event-lhs-filters', JSON.stringify(prefs));
		}else{
			 prefs[CURRENT_AGILE_USER.id] = eventFilters;
		}
	}else{
		 eventFilters = defaultPrefs;
		 prefs[CURRENT_AGILE_USER.id] = defaultPrefs;
		 _agile_set_prefs('event-lhs-filters', JSON.stringify(prefs));
	}		

	if (eventFilters)
	{		
		var type_of_cal = eventFilters.cal_type;
		var owners = eventFilters.owner_ids;
		var event_time = eventFilters.events_time;
		var list_event_type = eventFilters.event_type;

		if (type_of_cal)
		{
			$.each(type_of_cal, function(index, value)
			{
				$('.calendar_check').each(function()
				{ // loop through each checkbox
					if ($(this).val() == value)
						this.checked = true;
				});

			});
		}

		if (owners && owners.length > 0)
		{
			$.each(owners, function(index, value)
			{
				$('.calendar_user_check').each(function()
				{ // loop through each checkbox
					if ($(this).val() == value)
						this.checked = true;
				});

			});
		}

		/*
		 * if (_agile_get_prefs("agile_calendar_view")) {
		 * 
		 * if (list_event_type) $("#event_time").val(list_event_type); }
		 */
	}

}

// this function will be called to load full calendar based on filters
function loadFullCalednarOrListView()
{
	if (_agile_get_prefs("agile_calendar_view"))
	{
		var eventFilters;
		var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	

		if(eventData){
			eventFilters = eventData[CURRENT_AGILE_USER.id];
		}			

		if (eventFilters)
		{			

			if (eventFilters.event_type == "future")
			{
				_agile_set_prefs("agile_calendar_view", "calendar_list_view_future");
			}
			else
			{
				_agile_set_prefs("agile_calendar_view", "calendar_list_view");
			}
		}
		else
			_agile_set_prefs("agile_calendar_view", "calendar_list_view");

	}

	// if list view
	if (!_agile_get_prefs("agile_calendar_view"))
	{
		$('#calendar_event').html('');
		showCalendar();
	}
	else
	{

		loadAgileEvents();
		loadGoogleEvents();

	}
}

/**
 * when  no calenar selected i.e agile /google it enables checkboxes for both
 */
function checkBothCalWhenNoCalSelected()
{
	var selectedCal = [];
	$('.calendar_check').each(function()
	{
		if (this.checked)
			selectedCal.push($(this).val());

	});
	if (selectedCal && selectedCal.length == 0)
	{
		$('.calendar_check').each(function()
		{
			this.checked = true;

		});
		createRequestUrlBasedOnFilter();
		loadFullCalednarOrListView();
	}

}


/**
 * 
 * if google calendar sync is enabled then disappears link addtocalednar in lhs filters
 */
function putGoogleCalendarLink(calEnable)
{
		if (calEnable)
		{
			$("#google_cal").removeClass('hide');
			$("#google_cal_link").addClass('hide');
		}
		else
		{
			$("#google_cal").addClass('hide');
			$("#google_cal_link").removeClass('hide');
		}
}

function put_thirdparty_calendar_links()
{
	putOfficeCalendarLink(false);
	putGoogleCalendarLink(false);
	$.getJSON('core/api/calendar-prefs/list', function(data){
		console.log(data);
		$.each(data, function(index, preference){
			console.log(preference);
			if(preference.calendar_type == 'GOOGLE'){
				putGoogleCalendarLink(true);
			}else if(preference.calendar_type == 'OFFICE365'){
				var eventFilters = JSON.parse(_agile_get_prefs('event-lhs-filters'));
				eventFilters = eventFilters[CURRENT_AGILE_USER.id];

				var filtterList = eventFilters.cal_type;
				var display = false;
				if(filtterList.indexOf("office") >= 0){
					display = true;
				}else{
					display = false;
				}				
				$('input:checkbox[value="office"]').attr('checked', display);
				putOfficeCalendarLink(true);				
			}
		});
	})
}


function putOfficeCalendarLink(calEnable)
{
	if (calEnable){
		$("#office_cal").removeClass('hide');
		$("#office_cal_link").addClass('hide');
	} else {
		$("#office_cal").addClass('hide');
		$("#office_cal_link").removeClass('hide');
	}
}

/**
 * fetches and renders events in full calendar
 * @param ownerid
 */
function renderFullCalenarEvents(ownerid)
{
	var start_end_time = JSON.parse(_agile_get_prefs('fullcalendar_start_end_time'));

	var eventsURL = '/core/api/events?start=' + start_end_time.startTime + "&end=" + start_end_time.endTime;

	eventsURL += '&owner_id=' + ownerid;
	console.log('-----------------', eventsURL);
	addEventsToCalendar(eventsURL)

/*	$.getJSON(eventsURL, function(doc)
	{
		$.each(doc, function(index, data)
		{
			data = renderEventBasedOnOwner(data);
			$('#calendar_event').fullCalendar('renderEvent', data);
		});

		// Add event
		//$('#calendar_event').fullCalendar('addEventSource', doc);

		showLoadingOnCalendar(false);

	});*/

}

var functions = {};
function addEventsToCalendar(eventsURL)
{
		var resultMap = {};
		if(!eventsURL)
			return;
		showLoadingOnCalendar(true);
		$.getJSON(eventsURL, function(doc)
									{

										if(doc && doc.length > 0)
										$.each(doc, function(index, data)
										{
											// decides the color of event based
											// on owner id
											console.log(data);
											if(!resultMap[data.owner.id])
											{
												var array = [];
												resultMap[data.owner.id] = array;
											}

												data = renderEventBasedOnOwner(data);
												resultMap[data.owner.id].push(data);

										});

										console.log(resultMap);
										$.each(resultMap, function(index, eventArray){
												console.log(index);
												addEventSourceToCalendar(index, eventArray);
										});

										showLoadingOnCalendar(false)
							});
}

function addEventSourceToCalendar(key, eventArray)
{
			$('#calendar_event').fullCalendar('removeEventSource', functions["event_" + key]);

			functions["event_" + key] = function(start, end, callback)
			{
				console.log(this);
				console.log("function : " +  "event_" + functions["event_" + key])
				callback(eventArray);
			}

			
			//if(addScource)
			$('#calendar_event').fullCalendar('addEventSource', functions["event_" + key]);

			eventArray = [];
}

function removeGoogleEventSource()
{
	$.each(functions, function(key, value){
		if(key.indexOf('event_google') == 0)
		{
			//if(addScource)
			$('#calendar_event').fullCalendar('removeEventSource', functions[key]);
		}
	})	
}

function removeEventSource(key)
{
	//if(addScource)
	$('#calendar_event').fullCalendar('removeEventSource', functions["event_" + key]);
}

function addGoogleCalendarEvents()
{
	addAsyncCalendarEvents(loadUserEventsfromGoogle);
//	$('#calendar_event').fullCalendar('removeEventSource', tempFunction);

}

function addOffice365CalendarEvents(){
	addAsyncCalendarEvents(loadOfficeEvents);
}

function addAsyncCalendarEvents(asyncCallbackFunction)
{
	if(!asyncCallbackFunction || typeof asyncCallbackFunction != 'function')
	{
		return;
	}
	var tempFunction = function(start, end, callback)
	{
		asyncCallbackFunction(start, end);
		callback({});
		$('#calendar_event').fullCalendar('removeEventSource', tempFunction);
		return;
	}

	$('#calendar_event').fullCalendar('addEventSource', tempFunction);
}

/**
 * removed full calendar events based on ids
 * @param ownerid
 */
function removeFullCalendarEvents(domain_user_id)
{
	if(!domain_user_id)
		return;

	showLoadingOnCalendar(true);
	removeEventSource(domain_user_id);

	// Removes all events at once
	$('#calendar_event').fullCalendar('removeEvents', function(value, index) {
		if(value && value.owner && value.owner.id)
			return value.owner.id == domain_user_id;
		else
			return false;
	});

	showLoadingOnCalendar(false);


/*	$.getJSON(eventsURL, function(doc)
	{
		$.each(doc, function(index, data)
		{
			if(data.id)
				ids.push(data.id);	
		});

		// Removes all events at once
		$('#calendar_event').fullCalendar('removeEvents', function(value, index) {
			return $.inArray(value, ids) < 0;
		});

		
	});*/
}



/**
 * if agile calenar is unchecked then from cookie it removes all userids and puts only current userid
 * @param uncheckedagile
 * @returns {String}
 */
function getOwnerIdsFromCookie(uncheckedagile)
{
	var eventFilters;
	var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	

	if(eventData){
		eventFilters = eventData[CURRENT_AGILE_USER.id];
	}	

	var agile_event_owners = '';
	if (eventFilters)
	{
		var type_of_cal = eventFilters.cal_type;

		var owners = eventFilters.owner_ids;

		if (uncheckedagile && owners.length >= 1)
			owners = [];
		owners.push(CURRENT_AGILE_USER.id);
		if (owners && owners.length > 0)
		{
			$.each(owners, function(index, value)
			{
				if (index >= 1)
					agile_event_owners += ",";
				agile_event_owners += value;
			});
		}
	}
	return agile_event_owners;
}

/**
 * fetches google events
 */
function loadGoogleEventsandRender()
{
	var start_end_time = JSON.parse(_agile_get_prefs('fullcalendar_start_end_time'));
	$.getJSON('core/api/calendar-prefs/get', function(response)
	{
		console.log(response);
		if (response)
		{
			_agile_set_prefs('google_event_token', response.access_token);

			head.js('https://apis.google.com/js/client.js', '/lib/calendar/gapi-helper.js?t=27',
					function()
					{
						setupGC(function()
						{

							gapi.auth.setToken({ access_token : response.access_token, state : "https://www.googleapis.com/auth/calendar" });

							var startDate = new Date(start_end_time.startTime * 1000);
							var gDateStart = startDate.toISOString();
							var endDate = new Date(start_end_time.endTime * 1000);
							var gDateEnd = endDate.toISOString();
							var request = gapi.client.calendar.events.list({ 'calendarId' : 'primary', singleEvents : true, timeMin : gDateStart,
								timeMax : gDateEnd });
							request.execute(function(resp)
							{

								if (resp)
								{
									for (var i = 0; i < resp.items.length; i++)
									{
										var fc_event = google2fcEvent(resp.items[i]);

										if (fc_event)
											$('#calendar_event').fullCalendar('renderEvent', fc_event);

									}
								}

							});

						});

					});
		}

	});
}


/**
 * renders event to fullcalednar by changing color based on Owner id
 * @param data
 */
function renderAddedEventToFullCalenarBasedOnCookie(data)
{
	try
	{
		var renderEvent = false;
		var current_user_checked = false;
		var eventFilters;
		var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	

		if(eventData){
			eventFilters = eventData[CURRENT_AGILE_USER.id];
		}			

		if (eventFilters)
		{			
			var type_of_cal = eventFilters.cal_type;
			for ( var cal in type_of_cal)
			{
				if (type_of_cal[cal] == "agile")
					current_user_checked = true;
			}
		}
		if (data.owner.id == CURRENT_DOMAIN_USER.id && current_user_checked)
		{
			renderEvent = true;
		}

		if (eventFilters && !renderEvent)
		{
			var domain_users = eventFilters.domain_user_ids;
			if (domain_users && domain_users.length > 0)
			{
				$.each(domain_users, function(index, value)
				{
					if (value == data.owner.id)
						renderEvent = true;
				});
			}
		}
		if (renderEvent)
		{
			$('#calendar_event').fullCalendar('renderEvent', data);
		}
	}
	catch (err)
	{
		console.log("error");
	}
}


/**
 * sets color to event based on owner id
 * @param data
 * @returns {___anonymous8560_8563}
 */
function renderEventBasedOnOwner(data)
{
	try
	{
		if (data.owner)
		{
			if (data.owner.id == CURRENT_DOMAIN_USER.id)
			{
				if (data.color == 'red' || data.color == '#f05050')
					data.className = 'fc-b-l fc-b-2x fc-b-danger fc-border-height fc-event-month';
				else if (data.color == 'green' || data.color == '#bbb')
					data.className = 'fc-b-l fc-b-2x fc-b-info fc-border-height fc-event-month';
				else if (data.color == '#36C' || data.color == '#23b7e5' || data.color == 'blue')
					data.className = 'fc-b-l fc-b-2x fc-b-warning fc-border-height fc-event-month';
				data.color = '';
				data.backgroundColor = '#fff';
			}

			else
			{
				if (data.color == 'red' || data.color == '#f05050')
					data.className = 'high fc-b-l fc-b-2x fc-b-light fc-border-height fc-event-month';
				else if (data.color == 'green' || data.color == '#bbb')
					data.className = 'low fc-b-l fc-b-2x fc-b-light fc-border-height fc-event-month';
				else if (data.color == '#36C' || data.color == '#23b7e5' || data.color == 'blue')
					data.className = 'normal fc-b-l fc-b-2x fc-b-light fc-border-height fc-event-month';
				data.color = '';
				data.backgroundColor = '#fff';
			}
		}

	}
	catch (err)
	{
		console.log("error");
	}
	return data;
}


/**
 * while editing event in full calendar its priority will be set based on color of event
 * @param event
 * @returns {___anonymous10119_10123}
 */
function revertEventColorBasedOnPriority(event)
{
	if (event.className == "fc-b-l,fc-b-2x,fc-b-danger,fc-border-height,fc-event-month" || event.className == "high,fc-b-l,fc-b-2x,fc-b-light,fc-border-height,fc-event-month" || event.className == "fc-b-l fc-b-2x fc-b-danger fc-border-height fc-event-month" || event.className == "high fc-b-l fc-b-2x fc-b-light fc-border-height fc-event-month")
		event.color = "red";
	else if (event.className == "fc-b-l,fc-b-2x,fc-b-info,fc-border-height,fc-event-month" || event.className == "low,fc-b-l,fc-b-2x,fc-b-light,fc-border-height,fc-event-month" || event.className == "fc-b-l fc-b-2x fc-b-info fc-border-height fc-event-month" || event.className == "low fc-b-l fc-b-2x fc-b-light fc-border-height fc-event-month")
		event.color = "green";
	else if (event.className == "fc-b-l,fc-b-2x,fc-b-warning,fc-border-height,fc-event-month" || event.className == "normal,fc-b-l,fc-b-2x,fc-b-light,fc-border-height,fc-event-month" || event.className == "fc-b-l fc-b-2x fc-b-warning fc-border-height fc-event-month" || event.className == "normal fc-b-l fc-b-2x fc-b-light fc-border-height fc-event-month")
		event.color = "#36C";
	return event;

}


var loadingCounter = 0;
function pushLoading()
{
	if(loadingCounter < 0)
		loadingCounter = 0;
	loadingCounter ++ ;
	return loadingCounter;
}

function popLoading()
{
	loadingCounter--;
	return loadingCounter;
}
/**
 * shows loading symbol while fetching events
 * @param loading
 */
function showLoadingOnCalendar(loading)
{
	if (loading)
	{
		pushLoading();

		$("#loading_calendar_events").remove();
		$("#user_calendars *").attr('disabled','disabled');
		$("#user_cal_sub *").attr('disabled','disabled');

		$("#user_calendars *").addClass('disable-cp');
		$("#user_cal_sub *").addClass('disable-cp');

		$('.fc-header-left','#calendar_event').append(
				'<span id="loading_calendar_events" style="margin-left:5px;vertical-align:middle;padding-top: 5px;position: absolute;">loading...</span>')
				.show();
		$('.fc-header-left','#calendar_event').show();
	}
	else if(popLoading() <= 0)
	{
		$("#loading_calendar_events").hide();		
		$("#user_calendars *").removeAttr('disabled');
		$("#user_cal_sub *").removeAttr('disabled');

		$("#user_calendars *").removeClass('disable-cp');
		$("#user_cal_sub *").removeClass('disable-cp');
	}
}
/**
 * 
 * event.js is a script file to deal with the actions like creation, update and
 * deletion of events from client side.
 * 
 * @module Activities
 * 
 * author: Rammohan
 */

$(function(){

/**
	 * shows description field in new event model
	 */
	$("#updateActivityModal").on('click', '#add_event_desctiption', function(e)
	{
		e.preventDefault();
		$(".event_discription").removeClass("hide");
		$(this).hide();
		return;
	});


	$("#activityModal").on('click', '#add_event_desctiption', function(e)
	{
		e.preventDefault();
		$(".event_discription").removeClass("hide");
		$(this).hide();
		return;
	});

/**
	 * When clicked on update button of event-update-modal, the event will get
	 * updated by calling save_event function
	 * 
	 */
	$("#updateActivityModal").on('click', '#update_event_validate', function(e)
	{
		e.preventDefault();
		var eventId = $('#updateActivityModal').find("input[type='hidden']").val();
		var currentDiv = $('#updateActivityModal').find("#current_div").val();
		save_event('updateActivityForm', 'updateActivityModal', true, this,currentDiv, function(data)
		{
			console.log(data);
			var eventModel = eventCollectionView.collection.get(eventId);
			eventModel.set(data.toJSON(), { merge : true });
			eventCollectionView.render(true);
		});

	});



$("#updateActivityModal").on('click', '#delete_web_event', function(e)
	{
		e.preventDefault();

		if(hasScope("MANAGE_CALENDAR") || (CURRENT_DOMAIN_USER.id == App_Calendar.current_event.owner.id))
		{
			var event_id = $('#updateActivityForm input[name=id]').val();
			$("#updateActivityModal").modal('hide');
			$("#webEventCancelModel").modal('show');
			$("#cancel_event_title").html("Delete event &#39" + web_event_title + "&#39?");
			$("#event_id_hidden").html("<input type='hidden' name='event_id' id='event_id' value='" + event_id + "'/>");
		}
		else
		{
			$("#updateActivityModal").find('span.error-status').html('<div class="inline-block"><p class="text-base" style="color:#B94A48;"><i>You do not have permission to delete this Event.</i></p></div>');
			setTimeout(function()
			{
				$("#updateActivityModal").find('span.error-status').html('');
			}, 2000);
		}

	});


$("#updateActivityModal").on(
					'click',
					'#event_delete',
					function(e)
					{
						e.preventDefault();

						if ($(this).attr('disabled') == 'disabled')
							return;
						var save_button = $(this);
						/**
						 * Confirmation alert to delete an event
						 */
						showAlertModal("delete_event", "confirm", function(){
							var event_id = $('#updateActivityForm input[name=id]').val();
							

							disable_save_button(save_button);
							/**
							 * Shows loading symbol until model get saved
							 */
							// $('#updateActivityModal').find('span.save-status').html(getRandomLoadingImg());
							$
									.ajax({
										url : 'core/api/events/' + event_id,
										type : 'DELETE',
										success : function()
										{
											// if event deleted from today events
											// portlet, we removed that event from
											// portlet events collection
											if (App_Portlets.currentPosition && App_Portlets.todayEventsCollection && App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)])
											{
												App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].collection
														.remove(App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].collection.get(event_id));

												App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].render(true);

											}	
											else if (App_Portlets.currentPortletName && App_Portlets.currentPortletName == 'Mini Calendar')
										      {
													var a=new Date(parseInt($('.minical-portlet-event').attr('data-date')));	
													a.setHours(0,0,0,0);
													_agile_set_prefs("current_date_calendar",a);
											       $('.portlet_body_calendar').each(function(){
											       	var that=$(this);
											       	if(that.parents('.gs-w').attr('data-col')+that.parents('.gs-w').attr('data-row')==App_Portlets.currentPosition){
											       	 App_Portlets.eventCalendar=that;
											       	$('#calendar_container',that).fullCalendar( 'refetchEvents' );

											       App_Portlets.refetchEvents = true;
											   }
											       });
											       
											       //_agile_delete_prefs('current_date_calendar');
										      }
											else if (App_Deal_Details.dealDetailView && Current_Route == "deal/" + App_Deal_Details.dealDetailView.model.get('id'))
											{

												if (dealEventsView && dealEventsView.collection)
												{
													if (dealEventsView.collection.get(event_id))
													{
														dealEventsView.collection.remove(event_id);
														dealEventsView.render(true);
													}
												}
											}
											else if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
											{
												if (eventsView && eventsView.collection)
												{
													if (eventsView.collection.get(event_id))
													{
														eventsView.collection.remove(event_id);
														eventsView.render(true);
													}
												}
											}

											// $('#updateActivityModal').find('span.save-status
											// img').remove();
											enable_save_button(save_button);
											$("#updateActivityModal").modal('hide');

											var eventId = $('#updateActivityModal').find("input[type='hidden']").val();
											$('#calendar_event').fullCalendar('removeEvents', eventId);
										}, error : function(err)
										{
											enable_save_button(save_button);
											$('#updateActivityModal').find('span.error-status').html('<div class="inline-block"><p class="text-base" style="color:#B94A48;"><i>'+err.responseText+'</i></p></div>');
											setTimeout(function()
											{
												$('#updateActivityModal').find('span.error-status').html('');
											}, 2000);
											console.log('-----------------', err.responseText);
										} });
							if (_agile_get_prefs("agile_calendar_view"))
							{
								var eventModel = eventCollectionView.collection.get(event_id);
								eventModel.set(eventModel, { remove : true });
								document.location.reload();

							}
						});

						

					});

	

/**
	 * Highlights the event features (Shows event form and hides task form,
	 * changing color and font-weight)
	 */
		/**
	 * when web appointment event is deleted this event will be fired out
	 */
	$("#webEventCancelModel")
			.on(
					'click',
					'#cancel_delete',
					function(e)
					{
						e.preventDefault();

						var event_id = $('#webEventCancelForm input[name=event_id]').val();

						var parameter_value = $(this).attr("action_parameter");

						if (parameter_value == "donotdelete")
						{
							$("#webEventCancelModel").modal('hide');
							return;
						}
						var cancel_reason = $('#webEventCancelForm textarea[name=appointment_cancel_reason]').val();
						// variable
						var save_button = $(this);

						disable_save_button(save_button);
						$
								.ajax({
									url : 'core/api/events/cancelwebevent/?eventid=' + event_id + '&cancelreason=' + cancel_reason + '&action_parameter=' + parameter_value,
									type : 'DELETE',
									success : function()
									{
										// if event deleted from today events
										// portlet, we removed that event from
										// portlet events collection
										if (App_Portlets.currentPosition && App_Portlets.todayEventsCollection && App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)])
										{
											App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].collection
													.remove(App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].collection.get(event_id));

											App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].render(true);

										}
										else if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
										{
											var eventModel = eventsView.collection.get(event_id);
											eventsView.collection.remove(eventModel);
											enable_save_button(save_button);

											$("#webEventCancelModel").modal('hide');
											contact_details_tab.load_events();
											return;
										}

										// $('#updateActivityModal').find('span.save-status
										// img').remove();
										enable_save_button(save_button);

										$("#webEventCancelModel").modal('hide');

										$('#calendar_event').fullCalendar('removeEvents', event_id);
									} });
						if (_agile_get_prefs("agile_calendar_view"))
						{
							var eventModel = eventCollectionView.collection.get(event_id);
							eventModel.set(eventModel, { remove : true });
							document.location.reload();

						}

					});


	

});


function initializeEventListners(el)
{

/**
 * When Send Mail is clicked from Ical Modal, it hides the ical modal and shows
 * the ical-send email modal.
 */
$("#icalModal").off('click');
$("#icalModal").on('click', '#send-ical-email', function(event)
{
	event.preventDefault();

	$("#icalModal").modal('hide');


	// Removes previous modals if exist.
	if ($('#share-ical-by-email').size() != 0)
		$('#share-ical-by-email').remove();

	// Gets current user
	var CurrentuserModel = Backbone.Model.extend({ url : '/core/api/users/current-user', restKey : "domainUser" });

	var currentuserModel = new CurrentuserModel();

	currentuserModel.fetch({ success : function(data)
	{

		var model = data.toJSON();

		// Insert ical-url into model
		var icalURL = $('#icalModal').find('#ical-feed').text();
		model.ical_url = icalURL;

		getTemplate("share-ical-by-email", model, undefined, function(template_ui){
			if(!template_ui)
				  return;
			
			var emailModal = $(template_ui);
			var description = $(emailModal).find('textarea').val();
			description = description.replace(/<br\/>/g, "\r\n");
			$(emailModal).find('textarea').val(description);
			emailModal.modal('show');

			// Send ical info email
			send_ical_info_email(emailModal);
		}, null);

	} });
});


$("#calendar-listers").on('click', '.agendaDayWeekMonth', function()
{
	currentView = $(this).attr('id');
	fullCal.fullCalendar('changeView', currentView);
	$(this).parent().find('button').each(function()
	{
		if ($(this).attr('id') == currentView)
			$(this).addClass('bg-light');
		else
			$(this).removeClass('bg-light');
	});
	if (currentView == "agendaDay" || currentView == "agendaWeek")
	{
		fullCal.fullCalendar('option', 'contentHeight', 575);
	}
	else
	{
		fullCal.fullCalendar('option', 'contentHeight', 400);
	}

});

	$('#calendar-listers').on('click', '.agendaDayWeekMonth', function()
	{
		currentView = $(this).attr('id');
		fullCal.fullCalendar('changeView', currentView);
		$(this).parent().find('button').each(function()
		{
			if ($(this).attr('id') == currentView)
				$(this).addClass('bg-light');
			else
				$(this).removeClass('bg-light');
		});

	});

	/**
	 * Shows the event form fields in activity modal
	 */
	$("#calendar-listers").on('click', '.add-event', function(e)
	{
		e.preventDefault();

		$('#activityModal').html(getTemplate("new-event-modal")).modal('show');

		agile_type_ahead("event_relates_to_deals", $('#activityModal'), deals_typeahead, false,null,null,"core/api/search/deals",false, true);
		highlight_event();
		return;
	});

	
	

	// evnet filters

	$("#calendar-listers").on('click', '.calendar_check', function(e)
	{
		createRequestUrlBasedOnFilter();
		var calendar = $(this).val();
		var ownerids = '';
		if (calendar == "agile")
		{
			if (this.checked == true)
			{
				ownerids = getOwnerIdsFromCookie(true);
				renderFullCalenarEvents(ownerids);
			}

			else
			{
				removeFullCalendarEvents(CURRENT_DOMAIN_USER.id);
			}

		}

		if(calendar == 'google'){
			if (this.checked == true){
				//_init_gcal_options();
				addGoogleCalendarEvents();
			}else{
				removeGoogleEventSource();
			}
		}	

		if(calendar == 'office'){
			if(this.checked == true){
				addOffice365CalendarEvents();
			}else{
				removeEventSource('office');
			}
		}

	});

	$("#calendar-listers").on('click', '.calendar_user_check', function(e)
	{
		// checkBothCalWhenNoCalSelected();
		createRequestUrlBasedOnFilter();
		// loadFullCalednarOrListView();
		var user_id = $(this).val();
		var domain_user_id = $(this).attr('data');
		if (this.checked == true)
		{
			renderFullCalenarEvents(user_id);
		}
		else
		{
			removeFullCalendarEvents(domain_user_id);
		}

		// $('.select_all_users').removeAttr("checked");

	});

	$("#calendar-listers").on('click', '.select_all_users', function(event)
	{ // on click
		if (this.checked)
		{ // check select status
			$('.calendar_user_check').each(function()
			{
				this.checked = true;
			});
		}
		else
		{
			$('.calendar_user_check').each(function()
			{ // loop through each checkbox
				if ($(this).val() != CURRENT_AGILE_USER.id)
					this.checked = false;
			});
		}
		createRequestUrlBasedOnFilter();
		loadFullCalednarOrListView();
	});




}






$(function()
{
	/**
	 * Shows activity modal, and highlights the event form features (Shows event
	 * form and hides task form, changes color and font-weight)
	 * 
	 */
	
	  $("body").on('click', '#show-activity', function(e) { 
	  		e.preventDefault();

	  		$('#activityModal').html(getTemplate("new-event-modal")).modal('show');
	 		highlight_event();
	  		
	  });

	/**
	 * Sets the start time with current time and end time half an hour more than
	 * start time, when they have no values by the time the modal is shown.
	 */
	$('#activityModal, #activityTaskModal').on('shown.bs.modal', function()
	{
		// Show related to contacts list
		var el = $("#activityForm");
		$('#task-date-1').datepicker({ format : CURRENT_USER_PREFS.dateFormat , weekStart : CALENDAR_WEEK_START_DAY});
		$('#task-date-1').datepicker('update');

		agile_type_ahead("event_related_to", el, contacts_typeahead);

		agile_type_ahead("event_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
		var d1 = new Date ();
		var d2 = new Date ( d1 );
		d2.setHours(d1.getHours()+3)
		
		$('.new-task-timepicker').timepicker({ defaultTime : d2.format("HH:MM") , showMeridian : false });
		$('.new-task-timepicker').timepicker().on('show.timepicker', function(e)
		{
			if ($('.new-task-timepicker').prop('value') != "" && $('.new-task-timepicker').prop('value') != undefined)
			{
				if ($('.new-task-timepicker').prop('value').split(":")[0] != undefined)
					e.time.hours = $('.new-task-timepicker').prop('value').split(":")[0];
				if ($('.new-task-timepicker').prop('value').split(":")[0] != undefined)
					e.time.minutes = $('.new-task-timepicker').prop('value').split(":")[1];
			}
			$('.bootstrap-timepicker-hour').val(e.time.hours);
			$('.bootstrap-timepicker-minute').val(e.time.minutes);
		});
	
		/**
		 * Fills current time only when there is no time in the fields
		 */
		if ($('.start-timepicker', el).val() == '')
			$('.start-timepicker', el).val(get_hh_mm());

		if ($('.end-timepicker', el).val() == '')
			$('.end-timepicker', el).val(get_hh_mm(true));
		// sets the time in time picker if it is empty
		if ($('.new-task-timepicker', el).val() == '')
			$('.new-task-timepicker', el).val("12:00");

		activateSliderAndTimerToTaskModal(el);

	});

	/**
	 * To avoid showing previous errors of the modal.
	 */
	$('#updateActivityModal').on('show.bs.modal', function()
	{
		// Show related to contacts list
		var el = $("#updateActivityForm");
		agile_type_ahead("event_related_to", el, contacts_typeahead);
		
		agile_type_ahead("event_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);

		if ($('#allDay', el).is(':checked'))
		{
			$('#update-event-time-1', el).closest('.control-group').hide();
			$('#update-event-date-2', el).closest('.row').hide();
		}

		// Removes alert message of error related date and time.
		$('#' + this.id).find('.alert').css('display', 'none');

		// Removes error class of input fields
		$('#' + this.id).find('.error').removeClass('error');

		// $("input.date", el).datepicker('update');

	});

	$('#activityModal, #activityTaskModal, #updateActivityModal').on('shown.bs.modal', function(e)
	{
		if($(e.target).hasClass("date"))
			   return;

		// Update will highlight the date of in date picker
		$("input.date").each(function(index, ele){$(ele).datepicker('update');});

	});
		
	/**
	 * To avoid showing previous errors of the modal.
	 */
	$('#activityModal, #activityTaskModal, #updateActivityModal').on('show.bs.modal', function(e)
	{
		if($(e.target).hasClass("date"))
			   return;

		$(".event_discription").addClass("hide");
		$("textarea#description").val('');
		// Removes alert message of error related date and time.
		$('#' + this.id).find('.alert').css('display', 'none');

		// Removes error class of input fields
		$('#' + this.id).find('.error').removeClass('error');

		if($("#activityForm").length  > 0){
			var isOwnerListUploded = $("#event-owners-list", $("#activityForm")).val();
			if (isOwnerListUploded == null)
			{
				// Fills owner select element
				populateUsers("event-owners-list", $("#activityForm"), undefined, undefined, function(data)
				{
					$("#activityForm").find("#event-owners-list").html(data);
					$("#event-owners-list", $("#activityForm")).find('option[value=' + CURRENT_DOMAIN_USER.id + ']').attr("selected", "selected");
					$("#event-owners-list", $("#activityForm")).closest('div').find('.loading-img').hide();
				});
			}
		}
		
		/**
		 * Activates the date picker to the corresponding fields in activity modal
		 * and activity-update modal
		 */

		var eventDate = $('#event-date-1').datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY }).on('changeDate', function(ev)
		{
			// If event start date is changed and end date is less than start date,
			// change the value of the end date to start date.
			var eventDate2;
			if(CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1)
				eventDate2 = new Date(convertDateFromUKtoUS($('#event-date-2').val()));
			else
			 	eventDate2 = new Date($('#event-date-2').val());
			if (ev.date.valueOf() > eventDate2.valueOf())
			{
				$('#event-date-2').val($('#event-date-1').val());
			}

		});


		$('#event-date-2').datepicker({ format : CURRENT_USER_PREFS.dateFormat , weekStart : CALENDAR_WEEK_START_DAY});
		$('#update-event-date-1').datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY }).on('changeDate', function(ev)

		{
			// If event start date is changed and end date is less than start date,
			// change the value of the end date to start date.
			var eventDate2;
			if(CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1)
				eventDate2 = new Date(convertDateFromUKtoUS($('#update-event-date-2').val()));
			else
			 	eventDate2 = new Date($('#update-event-date-2').val());
			if (ev.date.valueOf() > eventDate2.valueOf())
			{
				$('#update-event-date-2').val($('#update-event-date-1').val());
			}

		});

		$('#update-event-date-2').datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY });


		/**
		 * Activates time picker for start time to the fields with class
		 * start-timepicker
		 */
		$('.start-timepicker').timepicker({ defaultTime : 'current', showMeridian : false }).on('hide.timepicker', function(e)
		{
			if ($('#activityModal #allDay').is(':checked'))
			{
				$('#event-time-1').closest('.control-group').hide();
				$('#event-date-2').closest('.row').hide();
			}

			// ChangeTime event is not working, so need to invoke user method.
			var endTime = changeEndTime($('.start-timepicker').val().split(":"), $('.end-timepicker').val().split(":"));
			$('.end-timepicker').val(endTime);

			e.stopImmediatePropagation();
			return false;
		});
		$('.start-timepicker').timepicker().on('show.timepicker', function(e)
		{
			if ($('.start-timepicker').prop('value') != "" && $('.start-timepicker').prop('value') != undefined)
			{
				if ($('.start-timepicker').prop('value').split(":")[0] != undefined)
					e.time.hours = $('.start-timepicker').prop('value').split(":")[0];
				if ($('.start-timepicker').prop('value').split(":")[0] != undefined)
					e.time.minutes = $('.start-timepicker').prop('value').split(":")[1];
			}
			$('.bootstrap-timepicker-hour').val(e.time.hours);
			$('.bootstrap-timepicker-minute').val(e.time.minutes);
		});

		/**
		 * Activates time picker for end time to the fields with class
		 * end-timepicker
		 */
		$('.end-timepicker').timepicker({ defaultTime : get_hh_mm(true), showMeridian : false });
		console.log(get_hh_mm(true));
		$('.end-timepicker').timepicker().on('show.timepicker', function(e)
		{
			if ($('.end-timepicker').prop('value') != "" && $('.end-timepicker').prop('value') != undefined)
			{
				if ($('.end-timepicker').prop('value').split(":")[0] != undefined)
					e.time.hours = $('.end-timepicker').prop('value').split(":")[0];
				if ($('.end-timepicker').prop('value').split(":")[0] != undefined)
					e.time.minutes = $('.end-timepicker').prop('value').split(":")[1];
			}
			$('.bootstrap-timepicker-hour').val(e.time.hours);
			$('.bootstrap-timepicker-minute').val(e.time.minutes);
		});

		/**
		 * Activates time picker for start time to the fields with class
		 * update-start-timepicker
		 */
		$('.update-start-timepicker').timepicker({ defaultTime : 'current', showMeridian : false }).on('hide.timepicker', function(e)
		{
			// ChangeTime event is not working, so need to invoke user method.
			var endTime = changeEndTime($('.update-start-timepicker').val().split(":"), $('.update-end-timepicker').val().split(":"));
			$('.update-end-timepicker').val(endTime); 
		});
		$('.update-start-timepicker').timepicker().on('show.timepicker', function(e)
		{
			if ($('.update-start-timepicker').prop('value') != "" && $('.update-start-timepicker').prop('value') != undefined)
			{
				if ($('.update-start-timepicker').prop('value').split(":")[0] != undefined)
					e.time.hours = $('.update-start-timepicker').prop('value').split(":")[0];
				if ($('.update-start-timepicker').prop('value').split(":")[0] != undefined)
					e.time.minutes = $('.update-start-timepicker').prop('value').split(":")[1];
			}
			$('.bootstrap-timepicker-hour').val(e.time.hours);
			$('.bootstrap-timepicker-minute').val(e.time.minutes);
		});

		/**
		 * Activates time picker for end time to the fields with class
		 * update-end-timepicker
		 */
		$('.update-end-timepicker').timepicker({ defaultTime : get_hh_mm(true), showMeridian : false });
		$('.update-end-timepicker').timepicker().on('show.timepicker', function(e)
		{
			if ($('.update-end-timepicker').prop('value') != "" && $('.update-end-timepicker').prop('value') != undefined)
			{
				if ($('.update-end-timepicker').prop('value').split(":")[0] != undefined)
					e.time.hours = $('.update-end-timepicker').prop('value').split(":")[0];
				if ($('.update-end-timepicker').prop('value').split(":")[0] != undefined)
					e.time.minutes = $('.update-end-timepicker').prop('value').split(":")[1];
			}
			$('.bootstrap-timepicker-hour').val(e.time.hours);
			$('.bootstrap-timepicker-minute').val(e.time.minutes);
		});

	});

	/**
	 * Hide event of update task modal. Removes the relatedTo field elements if
	 * any, when the modal is hidden in order to not to show them again when the
	 * modal is shown next
	 * 
	 */
	$('#updateActivityModal').on('hidden.bs.modal', function()
	{

		if ($(this).hasClass('in'))
		{
			return;
		}

		$("#updateActivityForm").each(function()
		{
			this.reset();
		});

		$("#updateActivityForm").find("li").remove();
		$('#update-event-time-1').closest('.control-group').show();
		$('#update-event-date-2').closest('.row').show();
	});
	
	$('#webEventCancelModel').on('hidden.bs.modal', function()
	{
		$("#webEventCancelForm").each(function()
		{
			this.reset();
		});
	});

});




/**
 * Highlights the event portion of activity modal (Shows event form and hides
 * task form, changes color and font-weight)
 */
function highlight_event()
{
	$("#hiddentask").val("event");
	$("#event").css({ "color" : "black" });
	$("#task").css({ "color" : "red" });
	$("#relatedTask").css("display", "none");
	$("#relatedEvent").css("display", "block");

	if ($("#taskForm").find("#task_related_to").closest(".controls").find("ul").children())
		$("#activityForm").find("#event_related_to").closest(".controls").find("ul").html(
				$("#taskForm").find("#task_related_to").closest(".controls").find("ul").children());

	// Date().format('mm/dd/yyyy'));
	$('input.date').val(getDateInFormat(new Date()));
}

/**
 * 
 * Validates the start time and end time of an event (start time should be less
 * than end time)
 * 
 * @method is_valid_range
 * @param {Number}
 *            startDate start date of an event
 * @param {Number}
 *            endDate end date of an event
 * @param {Number}
 *            startTime start time of an event
 * @param {Number}
 *            endTime end time of an event
 * @param {String}
 *            modalId the unique id for the modal to identify it
 */
function is_valid_range(startDate, endDate, startTime, endTime, modalName)
{
	if (endDate - startDate >= 86400000)
	{
		return true;
	}
	else if (startDate > endDate)
	{
		$('#' + modalName)
				.find(".invalid-range")
				.html(
						'<div class="alert alert-danger m-t-sm" style="margin-bottom:5px;"><a class="close" data-dismiss="alert" href="#">&times</a>Start date should not be greater than end date. Please change.</div>');

		return false;
	}
	else if (parseInt(startTime[0]) > parseInt(endTime[0]))
	{
		$('#' + modalName)
				.find(".invalid-range")
				.html(
						'<div class="alert alert-danger m-t-sm" style="margin-bottom:5px;"><a class="close" data-dismiss="alert" href="#">&times</a>Start time should not be greater than end time. Please change.</div>');

		return false;
	}
	else if (parseInt(startTime[0]) == parseInt(endTime[0]) && parseInt(startTime[1]) >= parseInt(endTime[1]))
	{
		$('#' + modalName)
				.find(".invalid-range")
				.html(
						'<div class="alert alert-danger m-t-sm" style="margin-bottom:5px;"><a class="close" data-dismiss="alert" href="#">&times</a>Start time should not be greater or equal to end time. Please change.</div>');

		return false;
	}
	else
		return true;
}

// Save event

/**
 * Creates or updates an event and renders the saved object by verifying if the
 * event is updated or saved as new one.
 * 
 * @method save_event
 * @param {String}
 *            formId the unique id for the form to identify it
 * @param {String}
 *            modalId the unique id for the modal to identify it
 * @param {Boolean}
 *            isUpdate the boolean value to identify weather saving the new one
 *            or updating the existing one
 * 
 */
function save_event(formId, modalName, isUpdate, saveBtn, el,callback)
{

	// Returns, if the save button has disabled attribute
	if ($(saveBtn).attr('disabled'))
		return;

	// Disables save button to prevent multiple click event issues
	disable_save_button($(saveBtn));

	// Save functionality for event
	if (!isValidForm('#' + formId))
	{

		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));
		return false;

	}

	var json = serializeForm(formId);

	if (json.allDay)
	{
		json.end = json.start;
		json.start_time = "00:00";
		json.end_time = "23:45";
	}// for all day, assume ending in last of that day.

	// For validation
	if (!is_valid_range(json.start * 1000, json.end * 1000, (json.start_time).split(":"), (json.end_time).split(":"), modalName))
	{

		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));
		return;
	}

	// Show loading symbol until model get saved
	// $('#' + modalName).find('span.save-status').html(getRandomLoadingImg());

	// Appending start time to start date
	var startarray = (json.start_time).split(":");
	json.start = new Date(json.start * 1000).setHours(startarray[0], startarray[1]) / 1000.0;

	// Appending end time to end date
	var endarray = (json.end_time).split(":");
	json.end = new Date(json.end * 1000).setHours(endarray[0], endarray[1]) / 1000.0;


	// Deleting start_time and end_time from json
	delete json.start_time;
	delete json.end_time;

	var eventModel = new Backbone.Model();
	eventModel.url = 'core/api/events';
	eventModel
			.save(
					json,
					{ success : function(data)
					{

						// Removes disabled attribute of save button
						enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled');

						$('#' + formId).each(function()
						{
							this.reset();
						});

						// $('#' + modalName).find('span.save-status
						// img').remove();
						$('#' + modalName).modal('hide');

						// $('#calendar').fullCalendar( 'refetchEvents' );
						var event = data.toJSON();
						event = renderEventBasedOnOwner(event);
						if (App_Portlets.currentPortletName && App_Portlets.currentPortletName == 'Mini Calendar' && el == "Mini Calendar")
					      {
							
						$('.portlet_body_calendar').each(function(){
										       	var that=$(this);
										       	if(that.parents('.gs-w').attr('data-col')+that.parents('.gs-w').attr('data-row')==App_Portlets.currentPosition){
										       	if($('.minical-portlet-event',that).attr('data-date')!=undefined){
								var a=new Date(parseInt($('.minical-portlet-event',that).attr('data-date')));	
								a.setHours(0,0,0,0);
								_agile_set_prefs("current_date_calendar",a);
							}
							else{
								var a=new Date(parseInt($('.minical-portlet-event-add',that).attr('data-date')));	
								a.setHours(0,0,0,0);
								_agile_set_prefs("current_date_calendar",a);
							}
										       	 App_Portlets.eventCalendar=that;
										       	$('#calendar_container',that).fullCalendar( 'refetchEvents' );
										       App_Portlets.refetchEvents = true;
										   }
										       });
					      }

					      else if (App_Portlets.currentPosition && App_Portlets.todayEventsCollection && App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)] && el == "Events Dashlet")
						{
							if (isUpdate)
								App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].collection.remove(json);

							// Updates events list view
							App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].collection.add(data);

							App_Portlets.todayEventsCollection[parseInt(App_Portlets.currentPosition)].render(true);

						}
						else if (Current_Route == 'calendar' && !_agile_get_prefs("agile_calendar_view"))
						{

							// When updating an event remove the old event from
							// fullCalendar
							if (isUpdate)

								$('#calendar_event').fullCalendar('removeEvents', json.id);

							// renders Event to full calendar based on Owner
							// checked or unchecked
							renderAddedEventToFullCalenarBasedOnCookie(event);
						}
						// Updates data to temeline
						else if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
						{

							/*
							 * Verifies whether the added task is related to the
							 * contact in contact detail view or not
							 */
							$.each(event.contacts, function(index, contact)
							{
								if (contact.id == App_Contacts.contactDetailView.model.get('id'))
								{

									// Add model to collection. Disabled sort
									// while adding and
									// called
									// sort explicitly, as sort is not working
									// when it is called
									// by add
									// function
									if (eventsView && eventsView.collection)
									{
										var owner = data.get("owner_id");

									  	if(!owner){
									  		owner = data.get("owner").id;
									  	}

										if (eventsView.collection.get(data.id))
										{
											if(hasScope("VIEW_CALENDAR") || CURRENT_DOMAIN_USER.id == owner){
												eventsView.collection.get(data.id).set(new BaseModel(data));
											}
											
										}
										else
										{
											if(hasScope("VIEW_CALENDAR") || CURRENT_DOMAIN_USER.id == owner){
												eventsView.collection.add(new BaseModel(data), { sort : false });
												eventsView.collection.sort();
											}
										}
									}

									// Activates "Timeline" tab and its tab
									// content in
									// contact detail view
									// activate_timeline_tab();
									// add_entity_to_timeline(data);

									return false;
								}

							});
						}
						
						
						else if (App_Deal_Details.dealDetailView && Current_Route == "deal/" + App_Deal_Details.dealDetailView.model.get('id'))
						{

							/*
							 * Verifies whether the added task is related to the
							 * contact in contact detail view or not
							 */
							$.each(event.deal_ids, function(index, deal_id)
							{
								if (deal_id == App_Deal_Details.dealDetailView.model.get('id'))
								{

									// Add model to collection. Disabled sort
									// while adding and
									// called
									// sort explicitly, as sort is not working
									// when it is called
									// by add
									// function
									if (dealEventsView && dealEventsView.collection)
									{
										var owner = data.get("owner_id");

									  	if(!owner){
									  		owner = data.get("owner").id;
									  	}

										if (dealEventsView.collection.get(data.id))
										{
											if(hasScope("VIEW_CALENDAR") || CURRENT_DOMAIN_USER.id == owner){
												dealEventsView.collection.get(data.id).set(new BaseModel(data));
											}
										}
										else
										{
											if(hasScope("VIEW_CALENDAR") || CURRENT_DOMAIN_USER.id == owner){
												dealEventsView.collection.add(new BaseModel(data), { sort : false });
												dealEventsView.collection.sort();
											}
										}
									}
									dealEventsView.render(true);
									return false;
								}

							});
						}
						
						else
							App_Calendar.navigate("calendar", { trigger : true });

						if (callback && typeof callback === 'function')
							callback(data);
					}, error : function(model, err)
					{
						enable_save_button($(saveBtn));
						$('#' + modalName).find('span.error-status').html('<div class="inline-block"><p class="text-base" style="color:#B94A48;"><i>'+err.responseText+'</i></p></div>');
						setTimeout(function()
						{
							$('#' + modalName).find('span.error-status').html('');
						}, 2000);
						console.log('-----------------', err.responseText);
					} });
}

/**
 * Get Hours and Minutes for the current time. It will be padded for 15 minutes
 * 
 * @method get_hh_mm
 * @param {Boolean}
 *            end_time to make end time 30 minutes more than start time
 * 
 */
function get_hh_mm(end_time, editFromContactPage)
{

	var hours = new Date().getHours();
	var minutes = new Date().getMinutes();

	if (minutes % 15 != 0)
		minutes = minutes - (minutes % 15);

	// Make end time 30 minutes more than start time
	if (end_time)
	{
		if (minutes == "30")
		{
			hours = hours + 1;
			minutes = 0;
		}
		else if (minutes == "45")
		{
			hours = hours + 1;
			minutes = 15;
		}
		else
			minutes = minutes + 30;
	}

	if (hours < 10)
	{
		hours = "0" + hours;
	}
	if (minutes < 10)
	{
		minutes = "0" + minutes;
	}

	return hours + ':' + minutes;
}

function fillTimePicker(end_time)
{
	if (end_time)
	{
		var hours = new Date(end_time * 1000).getHours();
		var minutes = new Date(end_time * 1000).getMinutes();
		if (hours < 10)
		{
			hours = "0" + hours;
		}
		if (minutes < 10)
		{
			minutes = "0" + minutes;
		}

		return hours + ':' + minutes;
	}
}

// Fills owner select element in update activity modal form
function populateUsersInUpdateActivityModal(event)
{

	// Fills owner select element
	populateUsers("event-owners-list", $("#updateActivityForm"), event, 'eventOwner', function(data)
	{
		$("#updateActivityForm").find("#event-owners-list").html(data);
		if (event.owner)
		{
			$("#event-owners-list", $("#updateActivityForm")).find('option[value="' + event['owner'].id + '"]').attr("selected", "selected");
		}
		$("#event-owners-list", $("#updateActivityForm")).closest('div').find('.loading-img').hide();
	});
}

// Checks start time > end time and will update end time. Adds 30min to end time
// if its < start time.
function changeEndTime(startTime, endTime)
{
	console.log("In changeEndTime");
	console.log(startTime);
	console.log(endTime);
	// var s0 = startTime[0];
 //    var s1=startTime[1];
    var reg = /[a-zA-Z]/;
   
  for(var i=0;i<startTime.length;i++)
  {
     if (reg.test(startTime[i])) {
   startTime[i]=00;
	}
	else if(!reg.test(startTime[i])){
		startTime[i] = startTime[i].substring(0,2);
	}


  }

   /*if (reg.test(s1)) {
   startTime[1]=00;
	}
	else if(!reg.test(s1)){
		startTime[1] = s1.substring(0,2);
	}*/

	if (startTime[0] > endTime[0] || (startTime[0] == endTime[0] && startTime[1] >= endTime[1]))
	{
		var hours = Number(startTime[0]);
		var minutes = Number(startTime[1]);

		if (minutes % 15 != 0)
			minutes = minutes - (minutes % 15);

		// Make end time 30 minutes more than start time
		if (minutes == "30")
		{
			if (hours == 23)
				hours = 0;
			else
				hours = hours + 1;
			minutes = 0;
		}
		else if (minutes == "45")
		{
			if (hours == 23)
				hours = 0;
			else
				hours = hours + 1;
			minutes = 15;
		}
		else
			minutes = minutes + 30;

		if (hours < 10)
		{
			hours = "0" + hours;
		}
		if (minutes < 10)
		{
			minutes = "0" + minutes;
		}

		console.log(hours + ':' + minutes);
		return hours + ':' + minutes;
	}
	else
		return endTime[0] + ':' + endTime[1];
}
(function($) {
	var event_souces = {}
	var element;

	function removeSources()
	{

	}

	function getSource(key)
	{
		event_souces[key]
	}

	function addSource(key, sources)
	{
		var isSourceAdded = false;
		if(event_souces[key])
		{
			isSourceAdded = true;
		}

			event_souces[key] = function(start, end, callback)
			{
				callback(sources);
			}

		// Add source if not added already
		if(!isSourceAdded)
			$(element).fullCalendar('addEventSource', getSource(key));

	}

})(jQuery);
/*!
 * FullCalendar v1.6.4 Google Calendar Plugin
 * Docs & License: http://arshaw.com/fullcalendar/
 * (c) 2013 Adam Shaw
 */

// or better


function loadUserEventsfromGoogle(start, end, callback){

	showLoadingOnCalendar(true);
		var isConfigured = load_events_from_google(function(data)
						{
							if (!data)
							{

								return;
							}

							return agile_transform_options(data, start, end);
						});

		if(!isConfigured)
			showLoadingOnCalendar(false);

	//	return;
}

function isDefined(x)
{
	 return typeof x !== "undefined"
}

var isSet1  =false;
function _init_gcal_options(users)
{
	if(isSet1)
		return ;

	var fc = $.fullCalendar;
	//fc.sourceFetchers = [];
	// Transforms the event sources to Google Calendar Events
	fc.sourceFetchers.push(_googleEventFetcher);
	isSet1 =  true;
}

function _googleEventFetcher(sourceOptions, start, end, callback)
{	
	if (sourceOptions.dataType == 'agile-gcal')
		{
			
				loadUserEventsfromGoogle(start, end);

			return	{};

			//	callback([]);
		}
	else if (sourceOptions.dataType == "agile-events")
		{
			addEventsToCalendar(sourceOptions.events(start, end, function(test){}));

			return {};
			//return true;
		//	callback([]);

		}

		console.log("--------------- Events -----------------------");
		console.log(sourceOptions.className)
		if($.isFunction(sourceOptions.events))
		{
			//	return sourceOptions.events(start, end, callback);
		//	sourceOptions.events(start, end, callback);
				return;
		}		
		return;
}

// Tranform agile
function agile_transform_options(sourceOptions, start, end)
{
	// Setup GC for First time
	// console.log(gapi.client.calendar);

	if (typeof gapi != "undefined" && isDefined(gapi) && isDefined(gapi.client) && isDefined(gapi.client.calendar))
	{
		_fetchGCAndAddEvents(sourceOptions, start, end);
		return;
	}

	_load_gapi(function()
	{
		_fetchGCAndAddEvents(sourceOptions, start, end);
		return;
	});
}

function _load_gapi(callback)
{
	head.js('https://apis.google.com/js/client.js', '/lib/calendar/gapi-helper.js?t=27', function()
		{
			setupGC(callback);
		});
}



// Setup Google Calendar
function setupGC(callback)
{
	var helper = new gapi_helper_prototype();



	// Configure Calendar
	helper.configure({ scopes : 'https://www.googleapis.com/auth/calendar', services : { calendar : 'v3' } });

	/*if((gapi_helper.listeners.calendarLoaded))
		callback();
	else*/
	helper.when('calendarLoaded', callback);
}

function _set_token_from_session(callback)
{
	if(typeof gapi === 'undefined')
	{
		_load_gapi(function()
		{
			get_google_calendar_prefs(function(sourceOptions){
				// Set the access token
				gapi.auth.setToken({ access_token : sourceOptions.token, state : "https://www.googleapis.com/auth/calendar" });
					callback();
				});
		});

		return;
	}

	// Set the access token
	var token = gapi.auth.getToken();

	if(token == null || token.access_token == null)
	{
		get_google_calendar_prefs(function(sourceOptions){
			// Set the access token
			gapi.auth.setToken({ access_token : sourceOptions.token, state : "https://www.googleapis.com/auth/calendar" });
			callback();
		});
		return;
	}
	return callback(gapi.auth.getToken());
}

function _resetGAPI()
{
	if(typeof gapi != 'undefined')
	{
		gapi.auth.setToken(undefined);
	}
}
function _fetchGoogleCalendarList(callback, retryCount)
{
	if(!retryCount)
			retryCount = 0;
	try
	{
		_set_token_from_session(function(data){
			var request = gapi.client.calendar.calendarList.list();
			request.execute(function(response){
				if(!response || response.code == '401')
				{
					if(retryCount < 2)
					{
						erase_google_calendar_prefs_cookie();
						gapi.auth.setToken(undefined);
						
						_set_token_from_session(function(){
							_fetchGoogleCalendarList(callback, ++retryCount)
						});
						return;
						//return _fetchGoogleCalendarList(callback, ++retryCount);
					}
				}
				else
					callback(response);
			});
		});

		return;
	}
	catch(err)
	{
	/*	console.log(err);
				if(retryCount > 2)
			return;

		return _fetchGoogleCalendarList(callback, ++retryCount);*/
	}
}

function _fetchGCAndAddEvents(sourceOptions, start, end)
{
	head.js('flatfull/lib/web-calendar-event/moment.min.js', function(){
		head.js('flatfull/lib/web-calendar-event/moment-timezone-with-data.js',function() {
			console.log(sourceOptions);
			// Set the access token
			gapi.auth.setToken({ access_token : sourceOptions.token, state : "https://www.googleapis.com/auth/calendar" });

			if(!sourceOptions.calendarIds)
			{
				sourceOptions.calendarIds = ["primary"];
			}

			showLoadingOnCalendar(false);
			$.each(sourceOptions.calendarIds, function(index, calendarId)
			{
				showLoadingOnCalendar(true);
				// Retrieve the events from primary
				var request = gapi.client.calendar.events.list({ 'calendarId' : calendarId, timeMin : ts2googleDate(start), timeMax : ts2googleDate(end),
					maxResults : 10000, // max results causes problems: http://goo.gl/FqwIFh
					singleEvents : true });

				request.execute(function(resp)
				{

					var google_events = [];
					for (var i = 0; i < resp.items.length; i++)
					{
						var fc_event = google2fcEvent(resp.items[i]);

						
						if (fc_event)
						if(fc_event.allDay==false){	
							var utcTime = new Date(fc_event.start).toUTCString();
	    					var tz = moment.tz(utcTime, CURRENT_USER_PREFS.timezone);
	      					fc_event.start = tz.format();
	      					
	      					utcTime = new Date(fc_event.end).toUTCString();
	    					tz = moment.tz(utcTime, CURRENT_USER_PREFS.timezone);
	      					fc_event.end = tz.format();
	      				}	
							google_events.push(fc_event);
						renderEventBasedOnOwner(fc_event);
						//$('#calendar_event').fullCalendar('renderEvent', fc_event);		
					}


					//$('#calendar_event').fullCalendar('renderEvents', google_events);
					addEventSourceToCalendar("google_" + calendarId, google_events);
					showLoadingOnCalendar(false);

					
					//$('#calendar_event').fullCalendar('removeEvents', function(value, i) {return false;});
					// Add event
					//$('#calendar_event').fullCalendar('renderEvents', google_events);
				});
			});
		});
	});
}

// Convert a timestamp into google date format
function ts2googleDate(ts)
{
	return $.fullCalendar.formatDate($.fullCalendar.parseDate(ts), 'u');
}

// Convert Google Event to Full Calendar Event
function google2fcEvent(google)
{
	var fc = { title : google.summary || "No title", start : google.start.date || google.start.dateTime, end : google.end.date || google.end.dateTime,
		allDay : google.start.date ? true : false, google : google, // keep a
		// reference
		// to the
		// original,
		// color: 'orange',
		className : 'b-l b-2x b-dark b-b-l-r-2x b-t-l-r-2x fc_border_height', backgroundColor : '#fff', editable : false // To
	// make
	// the
	// google
	// cal
	// events
	// uneditable.
	};
	if (fc.allDay)
	{
		// subtract 1 from end date: Google all-day end dates are exclusive
		// FullCalendar's are inclusive
		var end;
		if (fc.end.length > 10)
		{
			end = $.fullCalendar.parseDate(fc.end);
			fc.end = $.fullCalendar.formatDate(end, 'yyyy-mm-dd');
		}
		else
		{
			end = new Date(fc.end);
		}
		end.setDate(end.getDate() - 1);
		fc.end = end.format('yyyy-mm-dd');

	}
	return fc;
}

// https://groups.google.com/forum/#!msg/google-api-javascript-client/ZFcvHvh3dJQ/-zKhUD5NtKgJ
function getCalendarView() {
	App_Calendar.allTasksCalendarView = {};
	var calendarView = (!_agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id)) ? 'month' : _agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id);
	fullCalTasks = $('#task-calendar-based-condition')
			.fullCalendar(
					{

						/**
						 * Renders the events displaying currently on
						 * fullCalendar
						 * 
						 * @method events
						 * @param {Object}
						 *            start fullCalendar current section start
						 *            day date object
						 * @param {Object}
						 *            end fullCalendar current section end day
						 *            date object
						 * @param {function}
						 *            callback displays the events on
						 *            fullCalendar
						 * 
						 */

						events : function(start, end, callback)
						{
							var tasksURL = "core/api/tasks/calendar/"
							tasksURL += getParamsNew();
							tasksURL += '&start_time='+start.getTime() / 1000+'&end_time='+end.getTime() / 1000;
							$.ajax({
					            url: tasksURL,
					            dataType: 'json',
					            success: function(doc) {
					            	if(doc){
					            		var events = [];
						                $.each(doc, function(index, data) {
						                	setCalendarTaskColors(data);
			            				   	events.push(data);
						                });
										App_Calendar.allTasksCalendarView = new Base_Collection_View( { data: events });
						                callback(App_Calendar.allTasksCalendarView.collection.toJSON());
					            	}
					                hideTransitionBar();
					            }
					        });
						},
						header : { left : 'prev', center : 'title', right : 'next' },
						defaultView : calendarView,
						slotEventOverlap : false,
						viewDisplay : function(view)
						{
							_agile_set_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id, view.name, 90);
							$(".fc-agenda-axis").addClass('bg-light lter');
						},
						loading : function(bool)
						{
							if (bool)
							{
								pushLoading();
								$("#loading_calendar_events").remove();
								$('.fc-header-left','#task-calendar-based-condition')
										.append(
												'<span id="loading_calendar_events" style="margin-left:5px;vertical-align:middle;padding-top: 5px;position: absolute;">loading...</span>')
										.show();
								$('.fc-header-left','#task-calendar-based-condition').show();

							}
							else
							{
								if(popLoading() <= 0)
								{
									// $('#loading').hide();
									$("#loading_calendar_events").hide();
									start_tour('calendar');	
								}
								
							}
							$(".fc-agenda-axis").addClass('bg-light lter');
							$(".ui-resizable-handle").hide();
						},
						selectable : true,
						selectHelper : true,
						editable : true,
						theme : false,
						contentHeight : 400,
						firstDay : CALENDAR_WEEK_START_DAY,
						firstHour : 7,
						themeButtonIcons : { prev : 'fc-icon-left-single-arrow', next : 'fc-icon-right-single-arrow' },
						eventMouseover : function(event, jsEvent, view)
						{

							calendarView = (!_agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id)) ? 'month' : _agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id);
							var reletedContacts = '';
							var meeting_type = '';
							 	
								if(event.contacts != null){
									if (event.contacts.length > 0){
										reletedContacts += '<i class="icon-user text-muted m-r-xs"></i>';
									}
									for (var i = 0; i < event.contacts.length; i++)
									{
										if (event.contacts[i].entity_type == "contact_entity")
										{
											var last_name = getPropertyValue(event.contacts[i].properties, "last_name");
											if (last_name == undefined)
												last_name = "";
											if(event.contacts[i].type == 'COMPANY')
												reletedContacts += '<a class="text-info" href="#company/' + event.contacts[i].id + '">' + getPropertyValue(
													event.contacts[i].properties, "name") + '</a>';
											else
												reletedContacts += '<a class="text-info" href="#contact/' + event.contacts[i].id + '">' + getPropertyValue(
														event.contacts[i].properties, "first_name") + ' ' + last_name + '</a>';
										}else{
											reletedContacts += '<a class="text-info" href="#contact/' + event.contacts[i].id + '">' + getPropertyValue(
													event.contacts[i].properties, "name") + '</a>';
										}
										if (i != event.contacts.length - 1){
											reletedContacts += ', ';
										}
									}
								}
								
								var leftorright = 'left';	
								var pullupornot = '';
								var popoverElement = '';
								var popover_min_width = 300;
									
									if (event.meeting_type && event.description){
										meeting_type = '<i class="icon-comment-alt text-muted m-r-xs"></i><span>Meeting Type - ' + event.meeting_type + '</span><br/><span title=' + event.description + '>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + addDotsAtEnd(event.description) + '</span>';
									}else if (event.description){
										meeting_type = '<i class="icon-comment-alt text-muted m-r-xs"></i><span title=' + event.description + '>' + addDotsAtEnd(event.description) + '</span>';
									}
											
									if (calendarView == "month")
									{
										popover_min_width = $(this).parents('.fc-view-month').find('.fc-widget-content').eq(0).width() * 2;
										var left = jsEvent.currentTarget.offsetLeft + jsEvent.currentTarget.offsetWidth + 10;
										var top = jsEvent.currentTarget.offsetTop;
										if ($(this).parents('.fc-view-month').find('.fc-border-separate:visible').width() - left < popover_min_width)
										{
											left = jsEvent.currentTarget.offsetLeft - popover_min_width - 10;
											leftorright = 'right';
										}
										if ($(this).parents('.fc-view-month').find('.fc-border-separate:visible').width() - popover_min_width - 20 < jsEvent.currentTarget.offsetWidth)
										{
											left = ((jsEvent.currentTarget.offsetLeft + jsEvent.currentTarget.offsetWidth + 10) / 2) - (popover_min_width / 2);
											top = jsEvent.currentTarget.offsetTop + jsEvent.currentTarget.offsetHeight + 10;
											leftorright = 'top';
										}
										if(event.type == "officeCalendar"){
											var popoverElement = '<div class="fc-overlayw ' + leftorright + '" style="min-width:' + popover_min_width + 'px;max-width:' + popover_min_width + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute;z-index:10;display:none;">' + 
																 '<div class="panel bg-white b-a pos-rlt p-sm">' + 
																 '<span class="arrow ' + leftorright + ' ' + pullupornot + '" style="top:11px;"></span>' + 
																 '<div class="m-b-sm"><div class="pull-left text-flow-ellipsis p-b-xs" style="width:100%;">' + event.title + '</div></div>' +
																 '<div><i class="icon-clock text-muted m-r-xs"></i>' + event.start.format('dd-mmm-yyyy HH:MM') + '</div>' + 
																 '<div class="text-ellipsis">' + reletedContacts + '</div>' + 
																 '<div class="text-ellipsis">' + meeting_type + '</div>' + 
																 '</div>' + '</div>';
											$(this).after(popoverElement);
										}else{
											var popoverElement = '<div class="fc-overlayw ' + leftorright + '" style="width:100%;min-width:' + popover_min_width + 'px;max-width:' + popover_min_width + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute;z-index:10;display:none;">' + '<div class="panel bg-white b-a pos-rlt p-sm">' + '<span class="arrow ' + leftorright + ' ' + pullupornot + '" style="top:11px;"></span>' + '<div class="h4 font-thin m-b-sm"><div class="pull-left text-ellipsis p-b-xs" style="width:100%;">' + event.title + '</div></div>' + '<div class="line b-b b-light"></div>' + '<div><i class="icon-clock text-muted m-r-xs"></i>' + event.start
													.format('dd-mmm-yyyy HH:MM') + '<div class="pull-right" style="width:10%;"><img class="r-2x" src="' + event.eventOwner.pic + '" height="20px" width="20px" title="' + event.taskOwner.name + '"/></div></div>' + '<div class="text-ellipsis">' + reletedContacts + '</div>' + '<div class="text-ellipsis">' + meeting_type + '</div>' + '</div>' + '</div>';
											$(this).after(popoverElement);
										}
										
										if ($(this).parents('.fc-view-month').find('.fc-border-separate:visible').height() - jsEvent.currentTarget.offsetTop < $(this).parent().find('.fc-overlayw')
												.height())
										{
											$(this).parent().find('.fc-overlayw').css("top",
													top - $(this).parent().find('.fc-overlayw').height() + jsEvent.currentTarget.offsetHeight + 20 + "px");
											$(this).parent().find('.fc-overlayw').find('.arrow').css("top", $(this).parent().find('.fc-overlayw').height() - 31 + "px");
										}
										if ($(this).parents('.fc-view-month').find('.fc-border-separate:visible').width() - popover_min_width - 20 < jsEvent.currentTarget.offsetWidth)
										{
											$(this).parent().find('.fc-overlayw').find('.arrow').css("top", "-9px");
										}
										if (($(this).parents('.fc-view-month').find('.fc-border-separate:visible').height() - jsEvent.currentTarget.offsetTop - jsEvent.currentTarget.offsetHeight - 10 < $(
												this).parent().find('.fc-overlayw').height() + 10) && ($('.fc-border-separate:visible').width() - popover_min_width - 20 < jsEvent.currentTarget.offsetWidth))
										{
											$(this).parent().find('.fc-overlayw').find('.arrow').removeClass('top').addClass('bottom');
											left = ((jsEvent.currentTarget.offsetLeft + jsEvent.currentTarget.offsetWidth + 10) / 2) - (popover_min_width / 2);
											top = jsEvent.currentTarget.offsetTop - $(this).parent().find('.fc-overlayw').height() + 10;
											$(this).parent().find('.fc-overlayw').css({ "top" : top + "px", "lef" : left + "px" });
											$(this).parent().find('.fc-overlayw').find('.arrow').css("top", $(this).parent().find('.fc-overlayw').height() - 22 + "px");
										}
									}
									else if (calendarView == "agendaWeek")
									{
										popover_min_width = $('.fc-view-agendaWeek').find('.fc-widget-content').eq(0).width() * 2;
										var left = jsEvent.currentTarget.offsetLeft + jsEvent.currentTarget.offsetWidth + 10;
										var top = jsEvent.currentTarget.offsetTop;
										if ($('.fc-agenda-slots:visible').width() - left < popover_min_width)
										{
											left = jsEvent.currentTarget.offsetLeft - popover_min_width - 10;
											leftorright = 'right';
										}
										
										if(event.type == "officeCalendar"){
											var popoverElement = '<div class="fc-overlayw ' + leftorright + '" style="min-width:' + popover_min_width + 'px;max-width:' + popover_min_width + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute;z-index:10;display:none;">' + 
																 '<div class="panel bg-white b-a pos-rlt p-sm">' + 
																 '<span class="arrow ' + leftorright + ' ' + pullupornot + '" style="top:11px;"></span>' + 
																 '<div class="m-b-sm"><div class="pull-left text-flow-ellipsis p-b-xs" style="width:100%;">' + event.title + '</div></div>' +
																 '<div><i class="icon-clock text-muted m-r-xs"></i>' + event.start.format('dd-mmm-yyyy HH:MM') + '</div>' + 
																 '<div class="text-ellipsis">' + reletedContacts + '</div>' + 
																 '<div class="text-ellipsis">' + meeting_type + '</div>' + 
																 '</div>' + '</div>';
											$(this).after(popoverElement);
										}else{
											// var event_width =
											// jsEvent.currentTarget.offsetWidth;
											var popoverElement = '<div class="fc-overlayw ' + leftorright + '" style="width:100%;min-width:' + popover_min_width + 'px;max-width:' + popover_min_width + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute;z-index:10;display:none;">' + '<div class="panel bg-white b-a pos-rlt p-sm">' + '<span class="arrow ' + leftorright + ' ' + pullupornot + '" style="top:11px;"></span>' + '<div class="h4 font-thin m-b-sm"><div class="pull-left text-ellipsis p-b-xs" style="width:100%;">' + event.title + '</div></div>' + '<div class="line b-b b-light"></div>' + '<div><i class="icon-clock text-muted m-r-xs"></i>' + event.start
													.format('dd-mmm-yyyy HH:MM') + '<div class="pull-right" style="width:10%;"><img class="r-2x" src="' + event.eventOwner.pic + '" height="20px" width="20px" title="' + event.taskOwner.name + '"/></div></div>' + '<div class="text-ellipsis">' + reletedContacts + '</div>' + '<div class="text-ellipsis">' + meeting_type + '</div>' + '</div>' + '</div>';
											$(this).after(popoverElement);									
										}
										
										if ($('.fc-agenda-slots:visible').height() - jsEvent.currentTarget.offsetTop < $(this).parent().find('.fc-overlayw').height())
										{
											$(this).parent().find('.fc-overlayw').css("top",
													top - $(this).parent().find('.fc-overlayw').height() + jsEvent.currentTarget.offsetHeight + 20 + "px");
											$(this).parent().find('.fc-overlayw').find('.arrow').css("top", $(this).parent().find('.fc-overlayw').height() - 31 + "px");
										}
									}
									else if (calendarView == "agendaDay")
									{
										var left = jsEvent.currentTarget.offsetLeft;
										var top = jsEvent.currentTarget.offsetTop + jsEvent.currentTarget.offsetHeight + 10;
										leftorright = 'top';
										if ($('.fc-agenda-slots:visible').width() - jsEvent.currentTarget.offsetLeft < popover_min_width)
										{
											left = jsEvent.currentTarget.offsetLeft - jsEvent.currentTarget.offsetWidth - ($('.fc-agenda-slots:visible').width() - jsEvent.currentTarget.offsetLeft - jsEvent.currentTarget.offsetWidth);
										}
										
										if(event.type == "officeCalendar"){
											var popoverElement = '<div class="fc-overlayw ' + leftorright + '" style="min-width:' + popover_min_width + 'px;max-width:' + popover_min_width + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute;z-index:10;display:none;">' + 
																 '<div class="panel bg-white b-a pos-rlt p-sm">' + 
																 '<span class="arrow ' + leftorright + ' ' + pullupornot + '" style="top:11px;"></span>' + 
																 '<div class="m-b-sm"><div class="pull-left text-flow-ellipsis p-b-xs" style="width:100%;">' + event.title + '</div></div>' +
																 '<div><i class="icon-clock text-muted m-r-xs"></i>' + event.start.format('dd-mmm-yyyy HH:MM') + '</div>' + 
																 '<div class="text-ellipsis">' + reletedContacts + '</div>' + 
																 '<div class="text-ellipsis">' + meeting_type + '</div>' + 
																 '</div>' + '</div>';
											$(this).after(popoverElement);
										}else{
											try{	
											var popoverElement = '<div class="fc-overlayw ' + leftorright + '" style="width:100%;min-width:' + popover_min_width + 'px;max-width:' + popover_min_width + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute;z-index:10;display:none;">' + '<div class="panel bg-white b-a pos-rlt p-sm">' + '<span class="arrow ' + leftorright + ' ' + pullupornot + '" style="top:11px;"></span>' + '<div class="h4 font-thin m-b-sm"><div class="pull-left text-ellipsis p-b-xs" style="width:100%;">' + event.title + '</div></div>' + '<div class="line b-b b-light"></div>' + '<div><i class="icon-clock text-muted m-r-xs"></i>' + event.start
													.format('dd-mmm-yyyy HH:MM') + '<div class="pull-right" style="width:10%;"><img class="r-2x" src="' + event.eventOwner.pic + '" height="20px" width="20px" title="' + event.taskOwner.name + '"/></div></div>' + '<div class="text-ellipsis">' + reletedContacts + '</div>' + '<div class="text-ellipsis">' + meeting_type + '</div>' + '</div>' + '</div>';
											$(this).after(popoverElement);
											}catch(e){}
										}
										
										$(this).parent().find('.fc-overlayw').find('.arrow').css({ "top" : "-9px", "left" : "11px" });
										if ($('.fc-agenda-slots:visible').width() - jsEvent.currentTarget.offsetLeft < popover_min_width)
										{
											$(this).parent().find('.fc-overlayw').find('.arrow').css({ "top" : "-9px", "left" : popover_min_width - 15 + "px" });
										}
										if ((jsEvent.currentTarget.offsetTop < $(this).parent().find('.fc-overlayw').height() + 10) && ($('.fc-agenda-slots:visible')
												.height() - jsEvent.currentTarget.offsetHeight < $(this).parent().find('.fc-overlayw').height() + 10))
										{
											$(this).parent().find('.fc-overlayw').css("top", jsEvent.currentTarget.offsetTop + 40 + "px");
										}
										if ((jsEvent.currentTarget.offsetTop > $(this).parent().find('.fc-overlayw').height() + 10) && ($('.fc-agenda-slots:visible')
												.height() - (jsEvent.currentTarget.offsetHeight + jsEvent.currentTarget.offsetTop) < $(this).parent().find(
												'.fc-overlayw').height() + 10))
										{
											$(this).parent().find('.fc-overlayw').find('.arrow').removeClass('top').addClass('bottom');
											$(this).parent().find('.fc-overlayw').find('.arrow').css("top", $(this).parent().find('.fc-overlayw').height() - 22 + "px");
											$(this).parent().find('.fc-overlayw').css(
													"top",
													$('.fc-agenda-slots:visible').height() - jsEvent.currentTarget.offsetHeight - $(this).parent().find('.fc-overlayw')
															.height() + 7 + "px");
											if ($('.fc-agenda-slots:visible').width() - jsEvent.currentTarget.offsetLeft < popover_min_width)
											{
												$(this).parent().find('.fc-overlayw')
														.css(
																"left",
																jsEvent.currentTarget.offsetLeft - jsEvent.currentTarget.offsetWidth - ($('.fc-agenda-slots:visible')
																		.width() - jsEvent.currentTarget.offsetLeft - jsEvent.currentTarget.offsetWidth) + "px");
											}
										}
									}
							$(jsEvent.currentTarget).css('z-index', 9);
							if (event.allDay){
								$(jsEvent.currentTarget.parentElement).css('z-index', 9);
							}
							$(this).parent().find('.fc-overlayw').show();
						},
						eventMouseout : function(event, jsEvent, view)
						{
							$(this).parent().find('.fc-overlayw').remove();
							$(this).find(".ui-resizable-handle").hide();
							$(jsEvent.currentTarget).css('z-index', 8);
							if (event.allDay)
							{
								$(jsEvent.currentTarget.parentElement).css('z-index', 8);
							}
						},
						eventAfterRender : function(event, element, view)
						{
							$(".ui-resizable-handle").hide();
							event = renderEventBasedOnOwner(event);
							var start_event = new Date(event.start).getTime() / 1000;
							var end_event = new Date(event.end).getTime() / 1000;
							if (end_event - start_event == 3600)
							{
								$(element).height('');
							}
							$(element).find('.fc-event-bg').hide();
						},

						/**
						 * Shows event pop-up modal with pre-filled date and
						 * time values, when we select a day or multiple days of
						 * the fullCalendar
						 * 
						 * @method select
						 * @param {Object}
						 *            start start-date of the event
						 * @param {Object}
						 *            end end-date of the event
						 * @param {Boolean}
						 *            allDay
						 */
						select : function(start, end, allDay)
						{
							calendarView = (!_agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id)) ? 'month' : _agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id);
							showTaskModal(this);
							$('#task-date-1').val(getDateInFormatFromEpoc(start.getTime()));
							if(calendarView == 'agendaDay')
							{
								$('.new-task-timepicker').timepicker({ defaultTime : start.getHours()+':'+start.getMinutes(), showMeridian : false });
							}
						},
						/**
						 * Updates the event by changing start and end date,
						 * when it is dragged to another location on
						 * fullCalendar.
						 * 
						 * @method eventDrop
						 * @param {Object}
						 *            event1 event with new start and end date
						 * @param {Number}
						 *            dayDelta holds the number of days the
						 *            event was moved forward
						 * @param {Number}
						 *            minuteDelta holds the number of minutes
						 *            the event was moved forward
						 * @param {Boolean}
						 *            allDay weather the event has been dropped
						 *            on a day in month view or not
						 * @param {Function}
						 *            revertFunc sets the event back to it's
						 *            original position
						 */
						eventDrop : function(task1, dayDelta, minuteDelta, allDay, revertFunc)
						{

							// Confirm from the user about the change
							showAlertModal("event_drop", "confirm", function(){
								var task = $.extend(true, {}, task1);

								// Update task if the user changes it in the
								// calendar
								task.due = new Date(task.start).getTime() / 1000;
								var jsoncontacts = task.contacts;
								var _contacts = [];
								for ( var i in jsoncontacts)
								{
									_contacts.push(jsoncontacts[i].id);

								}
								if(task.taskOwner)
								task.owner_id = task.taskOwner.id;
								task.contacts = _contacts;
								var taskModel = new Backbone.Model();
								taskModel.url = 'core/api/tasks';

								taskModel.save(task);
							}, function(){
								revertFunc();
							});
							
						},
						/**
						 * Updates or deletes a task by clicking on it
						 * 
						 * @method eventClick
						 * @param {Object}
						 *            taskJson to update or delete
						 */
						eventClick : function(taskJson)
						{
							if (isNaN(taskJson.id))
								return;

							taskJson.due = taskJson.start.getTime() / 1000;

							// Show edit modal for the event
							$("#updateTaskModal").html(getTemplate("task-update-modal")).modal("show");

							loadProgressSlider($("#updateTaskForm"), function(el){
								// Fill form
								deserializeForm(taskJson, $("#updateTaskForm"));
								$('.update-task-timepicker').val(fillTimePicker(taskJson.due));

								categories.getCategoriesHtml(taskJson,function(catsHtml){
									$('#type',$("#updateTaskForm")).html(catsHtml);
									// Fills owner select element
									populateUsers("owners-list", $("#updateTaskForm"), taskJson, 'taskOwner', function(data)
									{
										$("#updateTaskForm").find("#owners-list").html(data);
										if (taskJson.taskOwner)
										{
											$("#owners-list", $("#updateTaskForm")).find('option[value=' + taskJson['taskOwner'].id + ']').attr("selected", "selected");
										}
								
										$("#owners-list", $("#updateTaskForm")).closest('div').find('.loading-img').hide();
									});
								});

								showNoteOnForm("updateTaskForm", taskJson.notes);

								// Creates normal time.
								displayTimeAgo($(".task-trello-list"));
							});
						}

					});
}

function initilizeTasksCalendarViewListeners()
{
	$("#content").on('click', '.taskDayWeekMonth', function()
	{
		currentView = $(this).attr('id');
		fullCalTasks.fullCalendar('changeView', currentView);
		$(this).parent().find('button').each(function()
		{
			if ($(this).attr('id') == currentView)
				$(this).addClass('bg-light');
			else
				$(this).removeClass('bg-light');
		});
		if (currentView == "agendaDay" || currentView == "agendaWeek")
		{
			fullCalTasks.fullCalendar('option', 'contentHeight', 575);
		}
		else
		{
			fullCalTasks.fullCalendar('option', 'contentHeight', 400);
		}

	});
}
function setCalendarTaskColors(data)
{	
	var due_date;
	if(data["due"])
	{
		due_date = new Date(data["due"] * 1000);
	}
	data["title"] = data["subject"];
	data["start"] = data["due"];
	data["end"] = data["due"] + 55;
	if(due_date && due_date.getHours() == 0 && due_date.getMinutes() == 0)
	{
		data["end"] = data["due"] + 1800;
	}
	data["allDay"] = false;
	if (data.priority_type == 'HIGH'){
		data.className = 'fc-b-l fc-b-2x fc-b-danger fc-border-height fc-event-month';
	}
   	else if (data.priority_type == 'NORMAL'){
   		data.className = 'fc-b-l fc-b-2x fc-b-info fc-border-height fc-event-month';
   	}
   	else if (data.priority_type == 'LOW'){
   		data.className = 'fc-b-l fc-b-2x fc-b-warning fc-border-height fc-event-month';
   	}
   	if(data["is_complete"] == true || data["is_complete"] == "true"){
   		data.backgroundColor = '#fff';
   	}
   	/*else if(data["due"] <= (getGMTEpochFromDate(new Date()) / 1000)){
   		data.backgroundColor = '#f05050';
   	}*/
   	else{
   		data.backgroundColor = '#ff6666';
   	}
   	data.color = '';
}
function taskCalendarToday()
{
	fullCalTasks.fullCalendar('today');
}/**
 * To show the dates or time in words of time-ago plugin.
 * @param element
 */
function includeTimeAgo(element){
	head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$("time", element).timeago();
			});
}

/**
 * To fill the tasklist ordered by default 
 */
function initOwnerslist() {
	
	// Click events to agents dropdown and department
	$("body").on("click", 'ul#owner-tasks li a, ul#type-tasks li a', function(e) {
				e.preventDefault();

				// Show selected name
				var name = $(this).html(), id = $(this).attr("href");

				$(this).closest("ul").data("selected_item", id);
				$(this).closest(".btn-group").find(".selected_name")
						.text(name);
				var url = getParams();
				updateData(url);
				
	});
	$("body").on("click", 'ul#owner-tasks li a', function(e) {
		
		$('.task-heading').html($(this).html() +'&nbsp<small class="tasks-count"></small> <span style="font-size: small;color: #525252;  background-color: rgb(255,255,204);  border: 1px solid rgb(211,211,211);border-radius: 3px;padding: 3px 5px 3px 5px;">Try our <a href="#tasks-new">new look</a></span>');
		//$('.task-heading').text($(this).html());
		pieTasks(getParams()); // Show tasks only when user changes My Tasks vs All Tasks
	});
	updateData(getParams() + "&owner=" + CURRENT_DOMAIN_USER.id + "&pending=" + true);
	pieTasks(getParams() + "&owner=" + CURRENT_DOMAIN_USER.id + "&pending=" + true);
}

var allTasksListView;

/**
 * updateData() method updates chat sessions on page for different query's from
 * user
 * 
 * @param params
 *            query string contains date, agentId & widgetId
 */
function updateData(params) {
	
	// Shows loading image untill data gets ready for displaying
	$('#task-list-based-condition').html(LOADING_HTML);
	
	// Creates backbone collection view
		this.App_Calendar.allTasksListView = new Base_Collection_View({
		url : '/core/api/tasks/based' + params,
		restKey : "task",
		sort_collection : false,
		//sortKey :'due',
		templateKey : "tasks-list",
		cursor : true, page_size : 25,
		individual_tag_name : 'tr',
		postRenderCallback : function(el) {
			$('.tasks-count').html(getCount(this.App_Calendar.allTasksListView.collection.toJSON()));

			$('.tasks-count').attr('data', getTaskCount(this.App_Calendar.allTasksListView.collection.toJSON()));
			includeTimeAgo(el);
		},
		appendItemCallback : function(el)
		{
			includeTimeAgo(el);
		}

	});

	// Fetches data from server
	this.App_Calendar.allTasksListView.collection.fetch();

	// Renders data to tasks list page.
	$('#task-list-based-condition').html(this.App_Calendar.allTasksListView.render().el);
}

/**
 * getParams() method returns a string(used as query param string) contains user
 * selected type and owners
 * 
 * @returns {String} query string
 */
function getParams() {

	var params = "?";

	// Get task type and append it to params
	var type = $('#type-tasks').data("selected_item");
	if (type)
		params += ("&type=" + type);
	// Get owner name and append it to params
	var owner = $('#owner-tasks').data("selected_item");
	if(owner == 'my-pending-tasks')
	{
		params += ("&pending=" + true);
		params += ("&owner=" + CURRENT_DOMAIN_USER.id);
		return params;
	}
	if (owner)
		params += ("&owner=" + owner);
	else if(owner == undefined)
		params += ("&owner=" + CURRENT_DOMAIN_USER.id);
	
	return params;
}

/**
 * Completes the selected row related entities from the database based on the url 
 * attribute of the table and fades out the rows from the table
 * 
 * @module Bulk operation for completed task
 * ---------------------------------------------
 * 
 */

$(function(){	
   /**
    * Validates the checkbox status of each row in table body
    * Customizes the delete operation
    * Deletes the entities
    */	
	$("body").on("click", '#bulk-complete', function(event) {
		event.preventDefault();
		var index_array = [];
		var data_array = [];
		var checked = false;
		var table = $('body').find('.showCheckboxes');

		$(table).find('tr .tbody_check').each(function(index, element){
			
			// If element is checked store it's id in an array 
			if($(element).is(':checked')){
				
				// Disables mouseenter once checked for delete(To avoid popover in deals when model is checked)
				$(element).closest('tr').on("mouseenter", false);
				index_array.push(index);
				data_array.push($(element).closest('tr').data().toJSON());
				checked = true;
			}
		});
		if(checked){
			$(this).after('<img class="bulk-complete-loading" style="padding-right:5px;margin-bottom:15px" src= "'+updateImageS3Path("img/21-0.gif")+'"></img>');
			bulk_complete_operation('/core/api/tasks/bulk/complete', index_array, table, data_array);
		}	
		else
            $('body').find(".select-none").html('<div class="alert alert-danger"><a class="close" data-dismiss="alert" href="#">&times;</a>You have not selected any records to complete. Please select at least one record to continue.</div>').show().delay(3000).hide(1);
	
		getDueTasksCount(function(count){

			var due_task_count= count;
			if(due_task_count != 0)
				$('#due_tasks_count').html(due_task_count);
			else
				$('#due_tasks_count').html("");
		});
		
	});
	
});

/**
 * Bulk operations - delete function
 * Deletes the entities by sending their ids as form data of ajax POST request 
 * and then fades out the rows from the table
 * @method bulk_delete_operation
 * @param {Steing} url to which the request has to be sent
 * @param {Array} id_array holds array of ids of the entities to be deleted
 * @param {Array} index_array holds array of row indexes to be faded out
 * @param {Object} table content as html object
 * @param {Array} data_array holds array of entities 
 */
function bulk_complete_operation(url, index_array, table, data_array){
	
	var tasks = [];
	$.each(data_array, function(index, task){
		var contacts = task.contacts;
		task.contacts = [];
		$.each(contacts, function(i, contact){
			task.contacts.push(contact.id);
			tasks.push(task);
		});
		task.is_complete = true;
		task.owner_id = task.taskOwner.id;
	});
	$.ajax({
		url: url,
		type: 'POST',
		data: JSON.stringify(tasks),
		contentType : 'application/json',
		success: function() {
			$(".bulk-complete-loading").remove();
			
			var tbody = $(table).find('tbody');
			// To remove table rows on delete 
			for(var i = 0; i < index_array.length; i++) 
				$(tbody).find('tr:eq(' + index_array[i] + ')').find("div:lt(3)").css("text-decoration","line-through");
		}
	});
}
		/**
 * task.js is a script file to deal with all the actions (CRUD) of tasks from
 * client side.
 * 
 * @module Activities
 * 
 * author: Rammohan
 */

$( document ).ready(function() {
	/**
	 * Makes the pending task as completed by calling complete_task function
	 */
	$("body").on("click", '.tasks-select', function(e)
	{
		e.stopPropagation();
		if ($(this).is(':checked'))
		{
			// Complete
			var taskId = $(this).attr('data');
			// complete_task(taskId, $(this));
			complete_task(taskId, App_Calendar.tasksListView.collection, $(this).closest('tr'))
		}
	});

	/**
	 * When clicked on update button of task-update-modal, the task will get
	 * updated by calling save_task function
	 */
	$('#updateTaskModal #update_task_validate').off('click');
	$("#updateTaskModal").on("click", '#update_task_validate', function(e)
	{
		e.preventDefault();
		save_task('updateTaskForm', 'updateTaskModal', true, this);
	});	

	/**
	 * Shows activity modal with all the task create fields.
	 */
	$("body").on("click", '.add-task', function(e)
	{
		e.preventDefault();

		// Show task modal with owners list.
		showTaskModal(this);
	});
	

	$('#updateTaskModal').on('shown.bs.modal', function()
	{

		var el = $("#updateTaskForm");
		agile_type_ahead("update_task_related_to", el, contacts_typeahead);

		agile_type_ahead("update_task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);

		$('.update-task-timepicker').timepicker({ defaultTime : get_hh_mm(true), showMeridian : false });
		$('.update-task-timepicker').timepicker().on('show.timepicker', function(e)
		{
			if ($('.update-task-timepicker').prop('value') != "" && $('.update-task-timepicker').prop('value') != undefined)
			{
				if ($('.update-task-timepicker').prop('value').split(":")[0] != undefined)
					e.time.hours = $('.update-task-timepicker').prop('value').split(":")[0];
				if ($('.update-task-timepicker').prop('value').split(":")[0] != undefined)
					e.time.minutes = $('.update-task-timepicker').prop('value').split(":")[1];
			}
			$('.bootstrap-timepicker-hour').val(e.time.hours);
			$('.bootstrap-timepicker-minute').val(e.time.minutes);
		});

		// Fill details in form
		setForm(el);
	});

	

});


function activateSliderAndTimerToTaskModal(el){

	console.log("activateSliderAndTimerToTaskModal");
	
	$('.new-task-timepicker').timepicker({ defaultTime : '12:00', showMeridian : false });
	$('.new-task-timepicker').timepicker().on('show.timepicker', function(e)
	{
		if ($('.new-task-timepicker').prop('value') != "" && $('.new-task-timepicker').prop('value') != undefined)
		{
			if ($('.new-task-timepicker').prop('value').split(":")[0] != undefined)
				e.time.hours = $('.new-task-timepicker').prop('value').split(":")[0];
			if ($('.new-task-timepicker').prop('value').split(":")[0] != undefined)
				e.time.minutes = $('.new-task-timepicker').prop('value').split(":")[1];
		}
		$('.bootstrap-timepicker-hour').val(e.time.hours);
		$('.bootstrap-timepicker-minute').val(e.time.minutes);
	});

	console.log("loadProgressSlider");

	// Loads progress slider in add task / update modal.
	loadProgressSlider($("#taskForm"));
	loadProgressSlider($("#updateTaskForm"));

	/**
	 * Date Picker Activates datepicker for task due element
	 */

	// $('#task-date-1').datepicker({ format : CURRENT_USER_PREFS.dateFormat , weekStart : CALENDAR_WEEK_START_DAY});
	$('#update-task-date-1').datepicker({ format : CURRENT_USER_PREFS.dateFormat , weekStart : CALENDAR_WEEK_START_DAY});


	/**
	 * When clicked on update button of task-update-modal, the task will get
	 * updated by calling save_task function
	 */
	$('#updateTaskModal #update_task_validate').off('click');
	$("#updateTaskModal").on("click", '#update_task_validate', function(e)
	{
		e.preventDefault();
		save_task('updateTaskForm', 'updateTaskModal', true, this);
	});	

}

function initializeTasksListeners(){
		
	activateSliderAndTimerToTaskModal();

	/**
	 * All completed and pending tasks will be shown in separate section
	 */
	/*
	 * $('#tasks-list').on('click', function(e) { this.tasksListView = new
	 * Base_Collection_View({ url : '/core/api/tasks/all', restKey : "task",
	 * templateKey : "tasks-list", individual_tag_name : 'tr' });
	 * this.tasksListView.collection.fetch();
	 * 
	 * $('#content').html(this.tasksListView.el);
	 * 
	 * });
	 */

	 $('#tasks-list-template').on('mouseenter', '.listed-task', function(e)
	{
		$(this).find(".task-actions").css("display", "block");
		$(this).find(".task-note-action").hide();
	});

	// Hide task actions
	$('#tasks-list-template').on('mouseleave', '.listed-task', function(e)
	{
		$(this).find(".task-actions").css("display", "none");
		$(this).find(".task-note-action").show();
	});
	
	$('#tasks-list-template').on('mouseenter', 'tr', function(e)
	{
		$(this).find("#task-list-actions").removeClass("hidden");
	});

	// Hide task actions
	$('#tasks-list-template').on('mouseleave', 'tr', function(e)
	{
		$(this).find("#task-list-actions").addClass("hidden");
	});
	/*
	 * Task Action: Delete task from UI as well as DB. Need to do this manually
	 * because nested collection can not perform default functions.
	 */
	$('#tasks-list-template').on('click', '.delete-task', function(event)
	{
		var that = this;
		showAlertModal("delete_task", "confirm", function(){
			if(!getTaskListId(that) && $(that).parent().attr('data')){
				deleteTask(getTaskId(that), $(that).parent().attr('data'), parseInt(getTaskListOwnerId(that)));
				$(that).parentsUntil('tr').parent('tr').remove();
			}
			else
				deleteTask(getTaskId(that), getTaskListId(that), parseInt(getTaskListOwnerId(that)));
		});

	});

	// Task Action: Mark task complete, make changes in DB.
	$('#tasks-list-template').on('click', '.is-task-complete', function(event)
	{
		event.preventDefault();
		if(!confirm("Are you sure to complete this task ?"))
			return;
		if(!getTaskListId(this)  && $(this).parent().attr('data')){
			completeTask(getTaskId(this), $(this).parent().attr('data'), parseInt(getTaskListOwnerId(this)));
		}
		else
			completeTask(getTaskId(this), getTaskListId(this), parseInt(getTaskListOwnerId(this)));
	});

	// Task Action: Open Task Edit Modal and display details in it.
	$('#tasks-list-template').on('click', '.edit-task', function(event)
	{
		event.preventDefault();
		if(!getTaskListId(this)  && $(this).parent().attr('data')){
			editTask(getTaskId(this), $(this).parent().attr('data'), parseInt(getTaskListOwnerId(this)));
		}
		else
			editTask(getTaskId(this), getTaskListId(this), parseInt(getTaskListOwnerId(this)));
	});
	
	

	/*
	 * In new/update task modal, on selection of status, show progress slider
	 * and change %
	 */
		
	$('#tasks-list-template').on('click', '.group-view', function(event)
	{
		event.preventDefault();
		console.log("group-view event");

		// Change UI and input field
		applyDetailsFromGroupView();
	});	

	$('#tasks-list-template').on('click', '.tasks-list-image', function(event)
			{
				event.preventDefault();
				// Change UI and input field
				var url = event.target.getAttribute('url');			
				routeToPage(url);
				event.stopPropagation();
				
			});	
	$('#tasks-list-template').on('click', '.view-task-details', function(event)
	{
		event.preventDefault();
		var route = $(this).parents('.agile-edit-row').attr('route');
		var data = $(this).siblings(".data").attr('data');
		if (data){
			Backbone.history.navigate(route + data, {
				trigger : true
			});
		} 

	});	
}

$("body").on("change", '.status', function()
	{
		console.log("status change event");
		
		// Change status UI and input field
		changeStatus($(this).val(), $(this).closest("form"));
	});	

/**
 * Highlights the task portion of activity modal (Shows task form and hides
 * event form, changes color and font-weight)
 */
function highlight_task()
{
	$("#hiddentask").val("task");
	$("#task").css({ "color" : "black" });
	$("#event").css({ "color" : "red" });
	$("#relatedEvent").css("display", "none");
	$("#relatedTask").css("display", "block");

	if ($("#activityForm").find("#event_related_to").closest(".controls").find("ul").children())
		$("#taskForm").find("#task_related_to").closest(".controls").find("ul").html(
				$("#activityForm").find("#event_related_to").closest(".controls").find("ul").children());

	// Date().format('mm/dd/yyyy'));
	$('input.date').val(getDateInFormat(new Date()));
	// datepicker('update');
}

/**
 * Creates or updates a task and adds the saved object to the suitable
 * collection by verifying the current window location.
 * 
 * @protected
 * @method save_task
 * @param {String}
 *            formId the unique id for the form to identify it
 * @param {String}
 *            modalId the unique id for the modal to identify it
 * @param {Boolean}
 *            isUpdate the boolean value to identify weather saving the new one
 *            or updating the existing one
 * 
 */
function save_task(formId, modalId, isUpdate, saveBtn)
{

	// Returns, if the save button has disabled attribute
	if ($(saveBtn).attr('disabled'))
		return;

	// Disables save button to prevent multiple click event issues
	disable_save_button($(saveBtn));// $(saveBtn).attr('disabled', 'disabled');

	if (!isValidForm('#' + formId))
	{

		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled');
		return false;
	}

	// Show loading symbol until model get saved
	// $('#' + modalId).find('span.save-status').html(LOADING_HTML);

	var json = serializeForm(formId);

	if (!isUpdate)
		json.due = new Date(json.due).getTime();
	
	if(isUpdate){
		
		if($('#'+formId).find('ul#notes').length>0){
			var notes = [];
			$('#'+formId+' li.task-note').each(function()
			{
				notes.push($(this).attr('data'));
			});

			console.log(notes);

			json.notes = notes;
		}
	}
	var startarray = (json.task_ending_time).split(":");
	json.due = new Date((json.due) * 1000).setHours(startarray[0], startarray[1]) / 1000.0;
	
	var newTask = new Backbone.Model();
	newTask.url = 'core/api/tasks';
	newTask
			.save(
					json,
					{ success : function(data)
					{

						// Removes disabled attribute of save button
						enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled');

						$('#' + formId).each(function()
						{
							this.reset();
						});

						// $('#' + modalId).find('span.save-status
						// img').remove();
						$('#' + modalId).modal('hide');

						var task = data.toJSON();

						getDueTasksCount(function(count){

								var due_task_count = count;

								if (due_task_count == 0)
									$(".navbar_due_tasks").css("display", "none");
								else
									$(".navbar_due_tasks").css("display", "inline-block");
								if(due_task_count !=0)
									$('#due_tasks_count').html(due_task_count);
								else
									$('#due_tasks_count').html("");

						});
						

						if (Current_Route == 'calendar')
						{
							if (isUpdate)
								App_Calendar.tasksListView.collection.remove(json);

							// Updates task list view
							if (!data.toJSON().is_complete && data.toJSON().owner_id == CURRENT_DOMAIN_USER.id)
								App_Calendar.tasksListView.collection.add(data);

							App_Calendar.tasksListView.render(true);

						}
						else if (Current_Route == 'tasks-old')
						{

							/*
							 * To do without reloading the page should check the
							 * condition of (Owner and Category)
							 */

							var old_owner_id = $('#content').find('.type-task-button').find(".selected_name").text();
							var old_type = $('#content').find('.owner-task-button').find(".selected_name").text();

							if (isUpdate)
								App_Calendar.allTasksListView.collection.remove(json);

							if ((old_owner_id == "All Categories" || old_owner_id.toUpperCase() == json.type) && (old_type == "All Tasks" || json.owner_id == CURRENT_DOMAIN_USER.id))
								App_Calendar.allTasksListView.collection.add(data);

							App_Calendar.allTasksListView.render(true);
						}
						else if (Current_Route == 'tasks')
						{
							var criteria = getCriteria();

							if (criteria == "LIST")
							{
								if (isUpdate)
									App_Calendar.allTasksListView.collection.get(json).set(new BaseModel(data));
								App_Calendar.allTasksListView.render(true);
								return;
							}

							if (criteria == "CALENDAR")
							{
								if (isUpdate){
									fullCalTasks.fullCalendar('removeEvents', task.id);
								}
								setCalendarTaskColors(task);
								if ($('#new-owner-tasks').data("selected_item") == "all-pending-tasks"){
									if(task["is_complete"] == false || task["is_complete"] == "false"){
										fullCalTasks.fullCalendar('renderEvent', task);
									}
								}
								else if ($('#new-owner-tasks').data("selected_item") == "my-pending-tasks"){
									if((task["is_complete"] == false || task["is_complete"] == "false") && task.taskOwner.id == CURRENT_DOMAIN_USER.id){
										fullCalTasks.fullCalendar('renderEvent', task);
									}
								}
								else if ($('#new-owner-tasks').data("selected_item") == CURRENT_DOMAIN_USER.id){
									if(task.taskOwner.id == CURRENT_DOMAIN_USER.id){
										fullCalTasks.fullCalendar('renderEvent', task);
									}
								}
								else{
									fullCalTasks.fullCalendar('renderEvent', task);
								}
								return;
							}

							updateTask(isUpdate, data, json);
						}
						// Updates data to temeline
						else if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
						{

							/*
							 * Verifies whether the added task is related to the
							 * contact in contact detail view or not
							 */
							$.each(task.contacts, function(index, contact)
							{
								if (contact.id == App_Contacts.contactDetailView.model.get('id'))
								{

									// Add model to collection. Disabled sort
									// while adding and called
									// sort explicitly, as sort is not working
									// when it is called by add
									// function
									if (tasksView && tasksView.collection)
									{
										if (tasksView.collection.get(data.id))
										{
											tasksView.collection.get(data.id).set(new BaseModel(data));
										}
										else
										{
											tasksView.collection.add(new BaseModel(data), { sort : false });
											tasksView.collection.sort();
										}
									}

									// Activates "Timeline" tab and its tab
									// content in
									// contact detail view
									// activate_timeline_tab();
									add_entity_to_timeline(data);

									return false;
								}
							});
						}
						else if (App_Portlets.currentPosition && App_Portlets.tasksCollection && App_Portlets.tasksCollection[parseInt(App_Portlets.currentPosition)] && (Current_Route == undefined || Current_Route == 'dashboard'))
						{
							if (isUpdate)
								App_Portlets.tasksCollection[parseInt(App_Portlets.currentPosition)].collection.remove(json);

							// Updates task list view
							App_Portlets.tasksCollection[parseInt(App_Portlets.currentPosition)].collection.add(data);

							App_Portlets.tasksCollection[parseInt(App_Portlets.currentPosition)].render(true);

						}
						else if (App_Deal_Details.dealDetailView && Current_Route == "deal/" + App_Deal_Details.dealDetailView.model.get('id'))
						{

							/*
							 * Verifies whether the added task is related to the
							 * deal in deal detail view or not
							 */
							$.each(task.deal_ids, function(index, deal_id)
							{
								if (deal_id == App_Deal_Details.dealDetailView.model.get('id'))
								{

									// Add model to collection. Disabled sort
									// while adding and called
									// sort explicitly, as sort is not working
									// when it is called by add
									// function
									if (dealTasksView && dealTasksView.collection)
									{
										if (dealTasksView.collection.get(data.id))
										{
											dealTasksView.collection.get(data.id).set(new BaseModel(data));
										}
										else
										{
											dealTasksView.collection.add(new BaseModel(data), { sort : false });
											dealTasksView.collection.sort();
										}
									}
									dealTasksView.render(true);
									return false;
								}
							});
						}
						else
						{

							if (App_Calendar.allTasksListView)
							{
								App_Calendar.allTasksListView.collection.remove(data.toJSON());
								App_Calendar.allTasksListView.collection.add(data.toJSON());
								App_Calendar.allTasksListView.render(true);
							}
							else if (App_Calendar.tasksListView)
							{
								App_Calendar.tasksListView.collection.remove(data.toJSON());
								App_Calendar.tasksListView.collection.add(data.toJSON());
								App_Calendar.tasksListView.render(true);
							}
							else
								App_Tasks.navigate("task/" + task.id, { trigger : true });
							taskDetailView = data;

							getTemplate("task-detail", data.toJSON(), undefined, function(template_ui){
								if(!template_ui)
									  return;
								$('#content').html($(template_ui));	
								task_details_tab.loadActivitiesView();
								initializeTaskDetailListeners();
							}, "#content");
						}
						
					} });
}

/**
 * Get due date of the task to categorize as overdue, today etc..
 * 
 * @method get_due
 * @param {Number}
 *            due of the task
 * 
 */
function get_due(due)
{
	// Get Todays Date
	var date = new Date();
	date.setHours(0, 0, 0, 0);

	date = date.getTime() / 1000;
	// console.log("Today " + date + " Due " + due);
	return Math.floor((due - date) / (24 * 3600));
}

function increaseCount(heading)
{
	var count = heading.find('.count').attr('count');

	count = count ? parseInt(count) + 1 : 1;
	heading.find('.count').attr('count', count);
	heading.find('.count').text("(" + count + ")");
	return count;
}
/**
 * Based on due date arranges the tasks UI
 * 
 * @method append_tasks
 * @param {Object}
 *            base_model task model
 * 
 */
function append_tasks(base_model)
{

	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'tr', });

	// add to the right box - overdue, today, tomorrow etc.
	var due = get_due(base_model.get('due'));
	if (due < 0)
	{

		var heading = $('#overdue-heading', this.el);
		var count = increaseCount(heading)

		if (count > 5)
		{
			return;
		}
		$('#overdue', this.el).append(itemView.render().el);
		if (count == 5)
			$('#overdue', this.el).append('<div style="float:right;padding-bottom:10px"><a href="#tasks">more</a></div>');
		$('#overdue', this.el).find('tr:last').data(base_model);
		$('#overdue', this.el).parent('table').css("display", "block");
		heading.show();
		$('#overdue', this.el).show();
	}

	// Today
	if (due == 0)
	{

		var heading = $('#today-heading', this.el);
		var count = increaseCount(heading);
		if (count > 5)
		{
			return;
		}
		if ($('#today > tr', this.el).length > 4)
			return;

		$('#today', this.el).append(itemView.render().el);
		if (count == 5)
			$('#today', this.el).append('<div style="float:right;padding-bottom:10px"><a href="#tasks">more</a></div>');
		$('#today', this.el).find('tr:last').data(base_model);
		$('#today', this.el).parent('table').css("display", "block");
		$('#today', this.el).show();
		$('#today-heading', this.el).show();
	}

	// Tomorrow
	if (due == 1)
	{
		var heading = $('#tomorrow-heading', this.el);
		var count = increaseCount(heading);
		if (count > 5)
		{
			return;
		}

		$('#tomorrow', this.el).append(itemView.render().el);
		if (count == 5)
			$('#tomorrow', this.el).append('<div style="float:right;padding-bottom:10px"><a href="#tasks">more</a></div>');
		$('#tomorrow', this.el).find('tr:last').data(base_model);
		$('#tomorrow', this.el).parent('table').css("display", "block");
		$('#tomorrow', this.el).show();
		$('#tomorrow-heading', this.el).show();
	}

	// Next Week
	if (due > 1)
	{
		var heading = $('#next-week-heading', this.el);
		var count = increaseCount(heading);
		if (count > 5)
		{
			return;
		}

		$('#next-week', this.el).append(itemView.render().el);
		if (count == 5)
			$('#next-week', this.el).append('<div style="float:right;padding-bottom:10px"><a href="#tasks">more</a></div>');
		$('#next-week', this.el).find('tr:last').data(base_model);
		$('#next-week', this.el).parent('table').css("display", "block");
		$('#next-week', this.el).show();
		$('#next-week-heading', this.el).show();
	}

}

// dash board tasks based on conditions..
function append_tasks_dashboard(base_model)
{

	var itemView = new Base_List_View({ model : base_model, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'tr',

	});

	var due = get_due(base_model.get('due'));

	var pendingTask = base_model.get("is_complete");

	if (pendingTask == false && due <= 0)
		$('#dashboard1-tasks-model-list', this.el).append(itemView.render().el);

}

/**
 * 
 * Turns the pending task as completed
 * 
 * @method complete_task
 * @param {Number}
 *            taskId to get the task from the collection
 * @param {Object}
 *            ui html Object to remove on success of the deletion
 * 
 */
function complete_task(taskId, collection, ui, callback)
{

	var taskJSON = collection.get(taskId).toJSON();
	// Replace contacts object with contact ids
	var contacts = [];
	$.each(taskJSON.contacts, function(index, contact)
	{
		contacts.push(contact.id);
	});

	console.log(taskJSON.notes);

	// Replace notes object with note ids
	var notes = [];
	$.each(taskJSON.notes, function(index, note)
	{
		notes.push(note.id);
	});

	console.log(notes);

	taskJSON.notes = notes;
	taskJSON.note_description = "";
	taskJSON.contacts = contacts;
	taskJSON.is_complete = true;
	taskJSON.status = "COMPLETED";
	taskJSON.progress = 100;
	taskJSON.owner_id = taskJSON.taskOwner.id;

	var new_task = new Backbone.Model();
	new_task.url = '/core/api/tasks';
	new_task.save(taskJSON, { success : function(model, response)
	{
		if(!Current_Route)
			  Current_Route = "/";

		if (Current_Route.indexOf("contact/") > -1)
		{
			collection.get(taskId).set(model);
		}
		else
		{
			collection.remove(model);
		}

		getDueTasksCount(function(due_task_count){

			if (due_task_count == 0)
			$(".navbar_due_tasks").css("display", "none");
			else
				$(".navbar_due_tasks").css("display", "inline-block");
			if(due_task_count !=0)
				$('#due_tasks_count').html(due_task_count);
			else
				$('#due_tasks_count').html("");
		
		});

		
		if (ui)
			ui.fadeOut(500);

		if (callback && typeof (callback) === "function")
		{
			// execute the callback, passing parameters as necessary
			callback(model);
		}
	} });

	// Set is complete flag to be true
	/*
	 * model.url = '/core/api/tasks'; model.set({'is_complete': true}, {silent:
	 * true}); // Destroy and hide the task model.save([],{success:
	 * function(model, response) { // Remove model from the collection
	 * App_Calendar.tasksListView.collection.remove(model);
	 * 
	 * //ui.closest('tr').slideUp('slow');
	 * 
	 * ui.fadeOut(2000); }} );
	 */

}

/**
 * 
 * @returns due tasks count upto today
 */
function getDueTasksCount(callback)
{
	accessUrlUsingAjax('core/api/tasks/overdue/uptotoday', function(response){
			if (!isNaN(response))
			{
				return callback(response);
			}
			return callback(0);

	});
}

/**
 * Show task modal with owners list and typeahead event.
 */
function showTaskModal(forAddTask)
{

	$('#activityTaskModal').html(getTemplate("new-task-modal")).modal('show');

	var el = $("#taskForm");

	agile_type_ahead("task_related_to", el, contacts_typeahead);
	// Deals type-ahead
	agile_type_ahead("task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
	
	highlight_task();
	categories.getCategoriesHtml(undefined,function(catsHtml){
		$('#type',el).html(catsHtml);
		// Fills owner select element
		populateUsers("owners-list", $("#taskForm"), undefined, undefined, function(data)
		{
			$("#taskForm").find("#owners-list").html(data);
			$("#owners-list", el).find('option[value=' + CURRENT_DOMAIN_USER.id + ']').attr("selected", "selected");
			$("#owners-list", $("#taskForm")).closest('div').find('.loading-img').hide();
	
			// Add selected task list details in add task modal
			addTasklListDetails(forAddTask);
		});
	});
}
var notesView;
var contactRelatedView;
var taskActivitiesView;
var dealRelatedView;
var task_details_tab = {
				load_timeline : function()
				{
								$('div.tab-content', App_Tasks.taskDetailView.el).find('div.active').removeClass('active');

								$('#time-line', App_Tasks.taskDetailView.el).addClass('active');
								if ($("#timeline", App_Tasks.taskDetailView.el).hasClass('isotope'))
								{
												$("#timeline", App_Task.taskDetailView.el).isotope('reLayout', function()
												{
												})
												return;
								}
								load_timeline_details(App_Tasks.taskDetailView.el, App_Tasks.taskDetailView.model.get('id'));
				},

				// loades notes on time line
				load_notes : function()
				{
								var id = taskDetailView.id;
								notesView = new Base_Collection_View({ url : '/core/api/tasks/' + id + "/notes", restKey : "note", templateKey : "task_notes",
												individual_tag_name : 'li', sortKey : "created_time", descending : true, postRenderCallback : function(el)
												{
																head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
																{
																				$(".note-created-time", el).timeago();
																})
												} });
								notesView.collection.fetch();
								$('#task_tab_detail').find('#notes').html(notesView.el);
				},

				loadTaskRelatedContactsView : function()
				{
								var id = taskDetailView.id;
								contactRelatedView = new Base_Collection_View({ url : '/core/api/tasks/' + id + "/contacts", templateKey : "task-related", individual_tag_name : 'tr',
												sortKey : "created_time", descending : true, postRenderCallback : function(el)
												{
													contactListener();

												} });
								contactRelatedView.collection.fetch();
								$('#task_tab_detail').find('#contacts').html(contactRelatedView.el);
				},

				loadActivitiesView : function()
				{
								var taskJSON = taskDetailView.toJSON();
								var domainUserId = taskJSON.domain
								taskActivitiesView = new Base_Collection_View({ url : '/core/api/activitylog/getActivityByEntityId?entity_id='+taskJSON.id+'', templateKey : "task-related-activity",
												individual_tag_name : 'li',sortKey : "time", descending : true,cursor : true, page_size : 25, postRenderCallback : function(el)
												{
																head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
																{
																				$(".event-created-time", el).timeago();
																})
												} });
								taskActivitiesView.collection.fetch();
								$('#task_tab_detail').find('#activity').html(taskActivitiesView.el);

				},

				loadTaskRelatedDealsView : function()
				{
								var id = taskDetailView.id;
								dealRelatedView = new Base_Collection_View({ url : '/core/api/tasks/' + id + "/deals", templateKey : "task-related-deals", individual_tag_name : 'tr',
												sortKey : "created_time", descending : true, postRenderCallback : function(el)
												{

												} });
								dealRelatedView.collection.fetch();
								$('#task_tab_detail').find('#deals').html(dealRelatedView.el);
				}, };

function initializeDomainsearchListner(el){
	
	$("#domain-search-listners").on("click", '#domain-search-results2', function(e) {
		e.preventDefault(e);
		
		var email = $('#domainSearchText2').val();
		console.log(" in all -domain users.js "+email);
		$("#domainSearchText").val(email);
		
			Backbone.history.navigate("getDomainUserDetails/"+email , {
                trigger: true
            });
	
	});
	
	
	$( "#domainSearchForm" ).submit(function( e ) 	{
		e.preventDefault(e);
		
		var email = $('#domainSearchText').val();
		console.log(" in all -domain users.js "+email);
		
			Backbone.history.navigate("getDomainUserDetails/"+email , {
                trigger: true
            });
	
	});

}


function initializeAdminpanelListner(el){
// takes searchbox value and navigate this to router
	
	
	// deltes user from domain from admin panel
	$("#admin-panel-listners").on("click", '.delete_user', function(e) {
		
		e.preventDefault();
		var $that = $(this);
		showAlertModal("delete_user", "confirm", function(){
			var id = $that.closest('a').attr("data");
			$.ajax({
				url: '/core/api/admin_panel/deleteuser?id='+id, 
				type : 'DELETE',
				success : function(data)
				{
					add_delete_user_info_as_note_to_owner(email);
					showAlertModal("user_deleted", undefined, function(){
						location.reload(true);
					});					
						           
				},
				error : function(response)
				{
					alert("error in deletion ");
				} });
		});
		
	});
	
	// navigates to domain details from all domain users
	$("#admin-panel-listners").on("click", '#all-domain-users-model-list > tr', function(e) 
			{
				e.preventDefault();

				// Reads the id
				var domainname = $(this).find('.data').attr('data');

				Backbone.history.navigate("getDomainUserDetails/"+domainname , {
	                trigger: true
	            });
				// App_Subscription.invoiceDetails(data);
			});
		/**
		 * If user clicks on delete, delete request is sent to
		 * "core/api/admin/delete/namespace"
		 */
	$("#admin-panel-listners").on("click", '.delete-namespace', function(e) {
			
					e.preventDefault();
					
				
					var namespace = $(this).closest('a').attr("data");
					
					if(namespace != "")
					{
							showAlertModal("delete_account", "confirm", function(){
								// Show loading in content
								$("#content").html(getRandomLoadingImg());
								/**
								 * Sends delete request to delete namespace
								 */
								$.ajax({
									type : "DELETE",
									url : "core/api/admin_panel/deletedomain/" + namespace,
									success : function(data)
									{
										alert("account deleted");
										Backbone.history.navigate("all-domain-users", { trigger : true });
									}
								});
							});
						
					
				   }
		});
	$("#admin-panel-listners").on("click", '.refundpopup', function(e) {
			e.preventDefault();
			
			var chargeid = $(this).attr("chargeid");
			var totalamount = $(this).attr("totalamount");
			var refundedAmount = $(this).attr("refundedAmount");
			$("#errormsg").html("");
			$("#amount").val(totalamount - refundedAmount);
			$("#hchargeid").val(chargeid);
			$("#totamount").val(totalamount);
			$("#partialrefund").button('reset');
			$("#refundModal").modal("show");
	        
	    });



		$("#partial-refund-footer").off('click').on("click", '#partialrefund', function(e) { 
			
			e.preventDefault();
			if (!isValidForm($("#admin-partial-refund")))
			{
			    return;
			}
			$(this).button('loading');
			var amount = $("#amount").val();
			var totalamount = $(".totamount").val();
			var chargeid=$("#hchargeid").val();
			if(parseFloat(amount) <= 0)
			{
				
				$("#errormsg").html("Amount should be > 0").show().delay(1500).hide(1);
				$("#partialrefund").button('reset');
				return;
			}
			
			if(parseFloat(amount)>parseFloat(totalamount))
			{
				$("#errormsg").html("Amount Should not exceed "+totalamount).show().delay(1500).hide(1);
				$("#partialrefund").button('reset');
				return;
			}
			
			amount = 100*amount;
			amount = parseInt(amount.toPrecision(12));	
			$.ajax({
				url: '/core/api/admin_panel/applypartialrefund?chargeid='+chargeid+'&amount='+amount, 
				type : 'GET',
				success : function(data)
				{	
					alert("successfully applied for refund");
					location.reload(true);
				},
				error : function(response)
				{
					$("#partialrefund").button('reset');
					showNotyPopUp("information", "error occured please try again", "top");
				}
			});
		
		});
		
		
		$("#admin-panel-listners").on("click", '#delete_userplan', function(e) { 
			e.preventDefault();
			showAlertModal("delete_subscription", "confirm", function(){
				var sub_id = $("#delete_userplan").attr("sub_id");
				var cus_id = $("#delete_userplan").attr("cus_id");
				$.ajax({url : 'core/api/admin_panel/deletesubscription?subscription_id='+sub_id+'&cus_id='+cus_id,
					type : 'DELETE',
					
					success: function()
					{
						add_cancel_subscription_info_as_note_to_owner(email);
						location.reload(true);
					},error : function(response)
					{

						console.log(response);
					}
				
				});
			});
			
		});
		$("#admin-panel-listners").on("click", '#delete_emailplan', function(e) { 
			e.preventDefault();
			showAlertModal("delete_subscription", "confirm", function(){
				var sub_id = $("#delete_emailplan").attr("sub_id");
				var cus_id = $("#delete_emailplan").attr("cus_id");
				$.ajax({url : 'core/api/admin_panel/deletesubscription?subscription_id='+sub_id+'&cus_id='+cus_id,
					type : 'DELETE',
					
					success: function()
					{
							add_cancel_subscription_info_as_note_to_owner(email);
							location.reload(true);
					},error : function(response)
					{

						console.log(response);
					}
					
				});
			});
			
		});
		
		$("#admin-panel-listners").on("click", '#unpause_mandrill', function(e)
		{
			e.preventDefault();
			var $that = $(this);
			showAlertModal("resume_mandrill", "confirm", function(){
				var domain = $that.attr('domain');
				$.ajax({
					url : 'core/api/admin_panel/resumeMandrill?domain='+domain,
					type : 'PUT',
					success : function(){
						location.reload(true);
					},
					error : function(response){
						console.log(response);
						showNotyPopUp("information", "Error occured please try again", "top");
					}
				});
			});
		});
}
/**
 * Fetches account prefs and render the template.
 * 
 * @param $account_activity -
 *            settings-account-activity template
 */
function load_admin_account_prefs($account_activity)
{
	var view = new Base_Model_View({ url : '/core/api/account-prefs', template : "admin-settings-account-prefs" });

	$account_activity.find('#admin-account-prefs').html(view.render().el);

}

/**
 * Fetches mandrill subaccount info and render them email activity template.
 * 
 * @param $account_activity -
 *            settings-account-activity template
 */
function load_account_email_activity($account_activity)
{
	// Email Activity
	var emailActivityModelView = new Base_Model_View({ url : 'core/api/emails/email-activity', template : 'admin-settings-email-activity', });

	$account_activity.find('#account-email-activity').html(emailActivityModelView.render().el);

}
var account_stats_integrations = {

	loadAccountStats : function(el) {

		$.ajax({
			url : 'core/api/namespace-stats/getdomainstats',
			type : 'GET',
			success : function(data) {
				console.log(data);

				getTemplate("account-stats-new", data, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$(el).find('#account-stats-new').html($(template_ui));	
				}, $(el).find('#account-stats-new'));
			},
			error : function(response) {
				console.log("error");
				console.log(response);
			}
		});
	},
	loadEmailStats : function(el) {

		$.ajax({
			url : 'core/api/emails/email-stats',
			type : 'GET',
			success : function(data) {
				console.log(data);
				getTemplate("email-stats-new", data, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$(el).find('#email-stats-new').html($(template_ui));	
				}, $(el).find('#email-stats-new'));
			},
			error : function(response) {
				console.log("error");
				console.log(response);
			}
		});
	},

	loadSMSStats : function(el) {
		$.ajax({
			url : 'core/api/sms-gateway/SMSlogs',
			type : 'GET',
			success : function(data) {
				console.log(data);
				if(data){
					data=JSON.parse(data);
				}
				getTemplate("sms-stats-new", data, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$(el).find('#sms-stats-new').html($(template_ui));	
				}, $(el).find('#sms-stats-new'));				
			},
			error : function(response) {
				console.log("error");
				console.log(response);
			}
			});

	},

	loadSyncTab : function(el) {
	
				getTemplate("sync-stats-new", {} , undefined, function(template_ui){
					if(!template_ui)
						  return;
					$(el).find('#sync-stats-new').html($(template_ui));	
				}, $(el).find('#sync-stats-new'));				
		
	}
};

function initializeStatsListners(el){
$('#email-stats-listners a[href="#account-stats-new"]').on('click', function(e) {
	e.preventDefault();
	$(el).find('#account-stats-new').html(LOADING_ON_CURSOR);
	account_stats_integrations.loadAccountStats(el);
});
$('#email-stats-listners a[href="#email-stats-new"]').on('click', function(e) {
	e.preventDefault();
	$(el).find('#email-stats-new').html(LOADING_ON_CURSOR);
	account_stats_integrations.loadEmailStats(el);
});
$('#email-stats-listners a[href="#sms-stats-new"]').on('click', function(e) {
	e.preventDefault();
	$(el).find('#sms-stats-new').html(LOADING_ON_CURSOR);
	account_stats_integrations.loadSMSStats(el);
});
$('#email-stats-listners a[href="#sync-stats-new"]').on('click', function(e) {
	e.preventDefault();
	$(el).find('#sync-stats-new').html(LOADING_ON_CURSOR);
	account_stats_integrations.loadSyncTab(el);
});
}
function syncAppData(){
	 showModalConfirmation(
		"Update Data",
		"This will update your data. Do you want to continue?",
		function()
		{		
	 	var domain = CURRENT_DOMAIN_USER.domain ; 
	 	$.ajax({
			url : 'core/api/custom-fields/syncappdata?domain='+domain,
			type : 'GET',
			success : function(data) {
				console.log(data);
				var yes = "";
				var no = "Ok"
				if(data == "success"){
					showModalConfirmation(
						"Update Data",
						"Update request is successfully scheduled.",
						function()
						{
							// No callback
							return;
						},function()
						{
							return;
						}, yes, no);
                  }
                  else if (data == "limitReached"){
                  	showModalConfirmation(
						"Update Data",
						"Update is allowed only once a month. Please try later.",
						function()
						{
							// No callback
							return;
						},function()
						{
							return;
						}, yes, no);
                  }
                  else{
                  	showModalConfirmation(
						"Update Data",
						"There seems to be an issue. Please try again later.",
						function()
						{
							// No callback
							return;
						},function()
						{
							return;
						}, yes, no);
                  }
			},
			error : function(response) {
				console.log("error");
				console.log(response);
			}
			});
	    }, function()
			{
				// No callback
				return;
			}, function()
			{
				return;
			}, "Ok", "Cancel");
}function bindAdminChangeAction(el, data)
{
	$('input[name="is_admin"]', el).on('change', function(e){
	var is_admin = $(this).is(":checked");
	if(_plan_restrictions.is_ACL_allowed[0]() || checkForSpecialUsers())
	{
		if(is_admin == false)
			$("input[type=checkbox]", $('div[name="newscopes"]', el)).removeAttr("disabled");
		else
			$("input[type=checkbox]", $('div[name="newscopes"]', el)).prop("checked", "checked" ).attr("disabled", "disabled");
		
		$('#calendar-privilege', el).trigger("change");
		$('#deals-privilege', el).trigger("change");
	}else{
		if(is_admin == true)
		{
			$("input[type=checkbox]", $('div[name="newscopes"]', el)).prop("checked", "checked" )
			$("input[type=checkbox]", $('div[name="newMenuScopes"]', el)).prop("checked", "checked" )
		}
	}
	});
	
	$("input[type=checkbox]", $('div[name="newscopes"]', el)).on('change', function(e){
		if(!this.checked){
			$(this).removeAttr("checked");
		}
	});
	
	var import_field = $('input[value="IMPORT_CONTACTS"]', el);
	
	if(!import_field)
		return;
	
	if(data && data.scopes)
		{
			if(jQuery.inArray("IMPORT_CONTACTS", data.scopes) >=0)
				$('input[value="CREATE_CONTACT"]', el).attr("checked", "checked" ).attr("disabled", "disabled");
		}
			
	import_field.on('change', function(e){
		var is_import_enabled = $(this).is(":checked");
		if(is_import_enabled == true)
			{
				$('input[value="CREATE_CONTACT"]', el).attr("checked", "checked" ).attr("disabled", "disabled");
			}
			
		else
			$('input[value="CREATE_CONTACT"]', el).removeAttr("disabled");
	});

	$('#deals-privilege', el).off('change');
	$(el).on('change', '#deals-privilege', function(e){
		if(!$('input[name="is_admin"]', el).is(':checked'))
		{
			if(!$(this).is(':checked')){
				$('input[value="VIEW_DEALS"]', el).attr("disabled", "disabled");
				$('input[value="MANAGE_DEALS"]', el).attr("disabled", "disabled");
			}
			else
			{
				if(_plan_restrictions.is_ACL_allowed[0]()){
					$('input[value="VIEW_DEALS"]', el).removeAttr("disabled");
					$('input[value="MANAGE_DEALS"]', el).removeAttr("disabled");
				}
			}
		}
	});

	$('#calendar-privilege', el).off('change');
	$(el).on('change', '#calendar-privilege', function(e){
		if(!$('input[name="is_admin"]', el).is(':checked'))
		{
			if(!$(this).is(':checked')){
				$('input[value="VIEW_CALENDAR"]', el).attr("disabled", "disabled");
				$('input[value="MANAGE_CALENDAR"]', el).attr("disabled", "disabled");
			}
			else{
				if(_plan_restrictions.is_ACL_allowed[0]()){
					$('input[value="VIEW_CALENDAR"]', el).removeAttr("disabled");
					$('input[value="MANAGE_CALENDAR"]', el).removeAttr("disabled");
				}
			}
		}
	});
	
}

// Allow acls for specific domains
function checkForSpecialUsers(){
	var specialUsers = ["savourychef","organicleads","cutrone","sunsationalswimschoo","aviation"];
	if($.inArray(CURRENT_DOMAIN_USER.domain, specialUsers) != -1)
		return true;
	else
		return false;
}
function get_allowed_domains()
{
	var allowed_domains_array = $("#allowed_domains_list").children();
	var allowed_domains = "";
	for ( var i = 0; i < allowed_domains_array.length; i++)
	{
		allowed_domains = allowed_domains ? allowed_domains + ", " + $(allowed_domains_array[i]).attr("data") : $(allowed_domains_array[i]).attr("data");
	}
	return allowed_domains;
}

function put_allowed_domains(allowed_domains)
{
	$.ajax({ url : "/core/api/api-key/allowed-domains?allowed_domains=" + encodeURIComponent(allowed_domains), method : "PUT",
		success : function(data)
		{
			$("#allowed_domains_list").empty();
			var domains_to_append = Handlebars.helpers.allowed_domain_list(data.allowed_domains);
			$("#allowed_domains_list").append(domains_to_append);
			$(".allowed-domain-delete").on('click', function(e) {
        e.preventDefault();
        $(this).closest("tr").remove();
        var allowed_domains = get_allowed_domains();
        put_allowed_domains(allowed_domains);
      });
			$("#update_allowed_domains").removeAttr("disabled");
			$("#new_allowed_domain").val("");
		} });
}

function is_duplicate_allowed_domain(new_allowed_domain, allowed_domains)
{
	allowed_domains = allowed_domains.split(",");
	for ( var i in allowed_domains)
	{
		allowed_domains[i] = allowed_domains[i].trim();
		if (allowed_domains[i] == new_allowed_domain)
			return true;
	}
	return false;
}
function get_blocked_ips()
{
	var blocked_ips_array = $("#blocked_ips_list").children();
	var blocked_ips = "";
	for ( var i = 0; i < blocked_ips_array.length; i++)
	{
		blocked_ips = blocked_ips ? blocked_ips + ", " + $(blocked_ips_array[i]).attr("data") : $(blocked_ips_array[i]).attr("data");
	}
	return blocked_ips;
}

function put_blocked_ips(blocked_ips)
{
	$.ajax({ url : "/core/api/api-key/blocked-ips?blocked_ips=" + encodeURIComponent(blocked_ips), method : "PUT",
		success : function(data)
		{
			$("#blocked_ips_list").empty();
			var ips_to_append = Handlebars.helpers.blocked_ips_list(data.blocked_ips);
			$("#blocked_ips_list").append(ips_to_append);
			$(".blocked-ip-delete").on('click', function(e) {
        e.preventDefault();
        $(this).closest("tr").remove();
        var blocked_ips = get_blocked_ips();
        put_blocked_ips(blocked_ips);
    });
			$("#update_blocked_ips").removeAttr("disabled");
			$("#new_blocked_ip").val("");
		} });
}

function is_duplicate_blocked_ip(new_blocked_ip, blocked_ips)
{
	blocked_ips = blocked_ips.split(",");
	for ( var i in blocked_ips)
	{
		blocked_ips[i] = blocked_ips[i].trim();
		if (blocked_ips[i] == new_blocked_ip)
			return true;
	}
	return false;
}

function is_valid_ip(blocked_ip)
{
	blocked_ip = blocked_ip.replace(/\*/g, "0");
	var ip_regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	return ip_regex.test(blocked_ip);
}
(function(categories, $, undefined) {
	
	categories.CATEGORIES = {};
	
	/**
	 * Check if the value of the given category is valid or not.
	 */
	categories.isValid = function(value, showAlert) {
			
		var r = '\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC';
		var regexString = '^['+r+']['+r+' 0-9_-]*$';
		var is_valid = new RegExp(regexString).test(value);
		if (showAlert && !is_valid)
			showAlertModal("activity_error");
		return is_valid;
	}
	
	/**
	 * Get the categories select box html string. Preselect the value if the value i given.
	 */
	categories.getCategoriesHtml = function(value, callback){
		var type = '';
		if(value!= undefined && value.type != undefined)
			type = value.type;
		categories.getCategories(function(cats){
			var html = '';
			$.each(cats, function(index,cat){
				//console.log(customfield);
				if(type == cat.name)
					html += '<option value="'+cat.name+'" selected="selected">'+cat.label+'</option>';
				else
					html += '<option value="'+cat.name+'">'+cat.label+'</option>';
			});
			if (callback && typeof (callback) === "function")
				callback(html);
		});
	};
	
	/**
	 * Gives the categories map required for the Group by categories view in the tasks.
	 */
	categories.getGroupingMap = function(callback){
		categories.getCategories(function(cats){
			var map = {};
			map.searchKey = "type";
			var array = [];
			$.each(cats,function(index,cat){
				array.push(cat.name);
			});
			map.type = array;
			if (callback && typeof (callback) === "function")
				callback(map);
		});
	};
	
	/**
	 * Gives the list of categories.
	 */
	categories.getCategories = function(callback){
		$.ajax({
			url: 'core/api/categories?entity_type=TASK',
			type: 'GET',
			dataType: 'json',
			success: function(cats){
				var obj = {};
				$.each(cats,function(index,cat){
					obj[cat.name] = cat.label;
				});
				
				categories.CATEGORIES = obj;
				
				if (callback && typeof (callback) === "function")
					callback(cats);
				
				return cats
			}
		});
	};
	
	/**
	 * Sends all the request related to categories, in queue.
	 */
	var sendReuestInQueue = function(url,data,successCallback,errorCallback){
		queuePostRequest("task_categories", url, data, function(data)
				{
					// If defined, execute the callback function
					if (successCallback && typeof (successCallback) === "function")
						successCallback(data);

				}, function(data)
				{
					// If defined, execute the callback function
					if (errorCallback && typeof (errorCallback) === "function")
						errorCallback(data);
				});
	};
	
	/**
	 * Save the category.
	 */
    var saveCategory = function(that){
    	
    	var label = $('#add_new_task_category').val();
    	// Returns, if the save button has disabled attribute
    	if ($(that).attr('disabled'))
    		return;
    	// Disables save button to prevent multiple click event issues
    	disable_save_button($(that));//$(saveBtn).attr('disabled', 'disabled');
    	
    	if (!categories.isValid(label)) {
    		if(label.length === 0)
    			$(that).parent().find('.save-status').html('<span style="color:red;">This field is required.</span>');
    		else
    			$(that).parent().find('.save-status').html('<span style="color:red;">Category name should start with an alphabet and can not contain special characters other than underscore, space and hyphen</span>');
    		setTimeout(function(){ 
    			$(that).parent().find('.save-status').html();
    			}, 3000);
    		// Removes disabled attribute of save button
    		enable_save_button($(that));//$(saveBtn).removeAttr('disabled');
    		return false;
    	}
    	
    	var cat = {};
    	cat.label = label;
    	cat.order = $('#admin-settings-categories-model-list').find('tr').length;
    	cat.entity_type='TASK';
    	console.log(cat);
    	// Saving that pipeline object
    	var category = new Backbone.Model();
    	category.url = '/core/api/categories';
    	category.save(cat, {
    		// If the milestone is changed, to show that change in edit popup if opened without reloading the app.
    		success : function(model, response) {
    			// Removes disabled attribute of save button
    			enable_save_button($(that));
    			App_Admin_Settings.categories();
    		},
			error: function(data,response){
				console.log(response,data);
				$(that).parent().find('.save-status').html('<span style="color:red;">'+response.responseText+'</span>');
				enable_save_button($(that));
			}
    	});
    	
    };
    
    /**
     * Delete the category with given id.
     */
    deleteCategory = function(id){
    	var url = '/core/api/categories/delete';
    	var data = {};
		data.id = id;
		console.log('------------',data);
		sendReuestInQueue(url,data,function(){
			App_Admin_Settings.categoryGridView.collection.remove(App_Admin_Settings.categoryGridView.collection.get(id));
	    	$('#category-delete-modal').modal('hide');
	    	$('#'+id).closest('tr').remove();
		});
    };
	
    /**
     * Save the order of the category when the user reodered the list.
     */
	categories.saveCategoryOrder = function(){
		var url = '/core/api/categories/order';
		var catIds = [];
		
		$('#admin-settings-categories-model-list').find('tr').each(function(index){
			catIds[index] = $(this).find('input[name="id"]').val();
		});
		var data = {};
		data.ids = JSON.stringify(catIds);
		console.log('------------',data);
		sendReuestInQueue(url,data);
	};
	
	/**
	 * For UI setup of categories tab.
	 */
	categories.setup_categories = function(el){
		head.js(LIB_PATH + 'lib/jquery-ui.min.js', function() {
			$(el).find('tbody').each(function(index){
				$(this).sortable({
				      containment : "#admin-settings-categories-model-list",
				      items:'tr',
				      helper: function(e, tr){
				          var $originals = tr.children();
				          var $helper = tr.clone();
				          $helper.children().each(function(index)
				          {
				            // Set helper cell sizes to match the original sizes
				            $(this).width($originals.eq(index).width());
				            $(this).css("background","#f5f5f5");
				            $(this).css("border-bottom","1px solid #ddd");
				          });
				          return $helper;
				      },
				     start: function(event, ui){
				    	  $.each(ui.item.children(),function(index,ele){
				    		  ui.helper.children().eq(index).width(ui.helper.children().eq(index).width()-$(this).width());
				    	  });
				    	  ui.helper.width(ui.helper.width());
				      },
				      sort: function(event, ui){
				    	  ui.helper.css("top",(ui.helper.offset().top+ui.item.offset().top)+"px");
				      },
				      forceHelperSize:true,
				      placeholder:'<tr><td></td></tr>',
				      forcePlaceholderSize:true,
				      handle: ".icon-move",
				      cursor: "move",
				      tolerance: "intersect",
				      
				      // When milestone is dropped its input value is changed 
				      update : function(event, ui) {
				    	  console.log($(ui.item).attr('data'));
				    	  categories.saveCategoryOrder();
				    	 // fill_ordered_milestone($(ui.item).closest('form').attr('id'));
				        }
			    });
			});
		});
	};
	
	/**
	 * Init all the category related click events. Call this only when the category page is opened.
	 */
	categories.init = function(){
		$('#category-tracks-accordion').on('click','.show_task_category_field',function(e){
		//$('.show_task_category_field').die().live('click',function(e){
			e.preventDefault();
			$(this).parent().hide();
			$('#task-category').find('.show_field').show();
			$('#add_new_task_category').focus();
		});
		
		$('#category-tracks-accordion').on('click','#add_task_category',function(e){
	    //$("#add_task_category").die().live('click', function(e){
	    	e.preventDefault();
	    	saveCategory(this);
	    });
	    
		$('#category-tracks-accordion').on('click','.category-delete',function(e){
	    //$('.category-delete').die().live('click',function(e){
	    	e.preventDefault();
	    	$('#delete-category-confirm-dialog input').val($(this).attr('id'));
	    	$('#category-name').text($(this).attr('data'));
	    	$('#category-delete-modal').modal('show');
	    });
	    
		$('body').on('click','#category-delete-confirm',function(e){
	   // $('#category-delete-confirm').die().live('click',function(e){
	    	e.preventDefault();
	    	var id = $('#delete-category-confirm-dialog input').val();
	    	deleteCategory(id);
	    });
	    
		$('#category-tracks-accordion').on('keypress','#add_new_task_category',function(e){
	    //$("#add_new_task_category").die().live("keypress",function(e){
	    	if(e.keyCode == 13)
	    	{
	    		$("#add_task_category").click();
	    	}
	    });
	    
	};
	
	
}(window.categories = window.categories || {}, $));function modalAlert(templateName,message,title){
	
	if(templateName == undefined || message == undefined || title == undefined)
		return;
	var alertJSON = {};
	alertJSON["title"] = title;
	alertJSON["message"] = message;
	
	getTemplate(templateName,alertJSON, undefined, function(template_ui){
		if(!template_ui)
			  return;
		var template = $(template_ui);
		template.modal('show');
	}, null);

	return;
}
function initializeIntegrationsTabListeners(localStorageItem, navigateURL){
	$("#admin-prefs-tabs-content .integrations_inner ul li").off("click");
	$("#admin-prefs-tabs-content").on("click",".tab-container ul li",function(){
		var temp = $(this).find("a").attr("href").split("#");
		_agile_set_prefs(localStorageItem, temp[1]);
		Backbone.history.navigate(navigateURL, { trigger : true });
	});
}Backbone.View.prototype.close = function()
{
	this.remove();
	this.unbind();
	if (this.onClose)
	{
		this.onClose();
	}
}

var BaseModel = Backbone.Model.extend({});

/**
 * Defines a backbone collection, which sorts the collection based on the
 * sortkey and parses based on the restKey
 */
var BaseCollection = Backbone.Collection.extend({ model : BaseModel,
/*
 * Initializes the collection sets restKey and sortKey
 */
initialize : function(models, options)
{
	this.restKey = options.restKey;
	if (options.sortKey)
		this.sortKey = options.sortKey;
	if (options.descending)
		this.descending = options.descending;

	// Set false if sorting is not required. Used when order returned
	// from server is to be preserved.
	this.sort_collection = options.sort_collection;
	if (this.sort_collection == false)
		this.comparator = false;
},
/*
 * Sorts the order of the collection based on the sortKey. When models are
 * fetched then comparator gets the value of the softKey in the model and sorts
 * according to it
 */
comparator : function(item)
{
	if (this.sortKey)
	{
		if (this.descending == true)
			return -item.get(this.sortKey);
		// console.log("Sorting on " + this.sortKey);
		return item.get(this.sortKey);
	}
	return item.get('id');
},
/*
 * Gets the corresponding objects based on the key from the response object
 */
parse : function(response)
{
	// console.log("parsing " + this.restKey + " " +
	// response[this.restKey]);

	if (response && response[this.restKey])
		return response[this.restKey];

	return response;
} });

/*
 * Creates an view object on the model, with events click on .delete, .edit,
 * .agile_delete and respective funtionalities are defined and binds to current
 * view.
 */
var Base_List_View = Backbone.View.extend({ events : { "click .delete" : "deleteItem", "click .edit" : "edit", "delete-checked .agile_delete" : "deleteItem",
	"click .delete-model" : "deleteModel",
	"click .delete-confirm" : "deleteConfirm"

},
/*
 * Binds events on the model
 */
initialize : function()
{
	_.bindAll(this, 'render', 'deleteItem', 'edit', 'deleteModel'); // every function
	// that uses 'this'
	// as the current
	// object should be
	// in here
	this.model.bind("destroy", this.close, this);

	this.model.bind("change", this.render, this);
	this.model.bind("popoverChange", this.test,this);

},
/*
 * On click on ".delete" model representing the view is deleted, and removed
 * from the collection
 */
deleteItem : function(e)
{
	e.preventDefault();
	this.model.destroy();
	this.remove();
}, 
deleteModel : function(e)
{
	e.preventDefault();
	showAlertModal("delete", "confirm", function(){
		$.ajax({ type: 'DELETE', url: this.model.url(),success : function() {
			location.reload(true);
			}
	    });
	});
	
},

deleteConfirm : function(e)
{
	var that = this;
	var confirmModal = $('#deleteConfirmationModal');

	confirmModal.html(getTemplate('modal-delete-confirm', {})).modal('show');

	$("#delete-confirm", confirmModal).click(function(e){
			e.preventDefault();
			var id=that.model.get("id");
			console.log(id);
		   // Show loading
		   $(this).addClass("disabled")
		   $.ajax({
    					url: 'core/api/users/'+id,
       					type: 'DELETE',
       					success: function()
       					{
       						console.log("success");
       						$('#deleteConfirmationModal').modal('hide');
       						that.remove();
						    if(!_billing_restriction.currentLimits.freePlan)
							   {
							    var message;
							    if(count > 1)
							     message = "Users have been deleted successfully. Please adjust your billing plan to avoid being billed for the deleted users.";
							    else
							     message = "User has been deleted successfully. Please adjust your billing plan to avoid being billed for the deleted user.";
							    showNotyPopUp('information', message, "top", 10000);
							   }


       					},
       					error : function(response)
						{
							console.log("error");
							confirmModal.find(".modal-footer").find("#delete-user").html('<small class="text-danger" style="font-size:15px;margin-right:172px;">Sorry, can not delete user having admin privilege.</small>');
							console.log(response);

						}

       			});
          
	});

},

edit : function(e)
{
	/*
	 * console.log(this.model); console.log("Editing " +
	 * this.model.get("edit_template")); // Edit
	 * if(this.model.get("edit_template")) { console.log("Moving to edit"); var
	 * editView = new Base_Model_View({ model: this.model, isNew: true,
	 * template: this.model.get("edit_template") }); var el =
	 * editView.render().el; $('#content').html(el); }
	 */
}, 
test : function(callback)
{
		var async = false;
	// if(callback && typeof (callback) == "function")
	// async = true;
	if (async)
	{
		var that = this
		// console.log(this.model.toJSON());
		getTemplate(that.options.template, that.model.toJSON(), undefined, function(el)
		{
			$(that.el).html(el);
			$(that.el).data(that.model);
			console.log($(that.el));
			callback(that.el);
		});
		return this;
	}

	$(this.el).html(getTemplate(this.options.template, this.model.toJSON()));

	return this;
},
render : function(callback)
{
	var async = false;
	// if(callback && typeof (callback) == "function")
	// async = true;
	if (async)
	{
		var that = this
		// console.log(this.model.toJSON());
		// startFunctionTimer("model getTemplate");
		getTemplate(that.options.template, that.model.toJSON(), undefined, function(el)
		{
			// endFunctionTimer("model getTemplate");
			$(that.el).html(el);
			$(that.el).data(that.model);
			console.log($(that.el));
			callback(that.el);
		});
		return this;
	}

	$(this.el).html(getTemplate(this.options.template, this.model.toJSON()));
	$(this.el).data(this.model);
	// Add model as data to it's corresponding row

	return this;
} });

/**
 * Base_Collection_view class defines a Backbone view, which binds the list of
 * models (Collections, backbone collection) i.e, defines view for the
 * collection.
 * <p>
 * Adds view to collection and binds sync (calls every time it attempts to read
 * or save a model to the server),
 * <p>
 * Whenever whenever save model operation is done, appendItem method in the
 * Base_Collection_view class is called on current view, since then sync is
 * binded with appendItem method. It appends the new model created to collection
 * and adds in the view
 * <p>
 * In View initialize function, new collection is created based on the options
 * (url, restkey, sortkey), passed while creating a new view. The collection
 * created in initialize is based on the BaseCollection (in base-colleciton.js),
 * which define the comparator and parse based on the restKey (to parse the
 * response) and sortKey (to sort the collection) passed to Base_Collection_View
 * <p>
 * Options to Base_collection_View are :
 * 
 * <pre>
 * 		resetKey :  Used to parse the response.
 * 		sortKey  : 	Used to sort the collection based in the sortkey value
 * 		url		 :	To fetch the collection and to perform CRUD operations on models 
 * 		cursor 	 :  To initialize the infiniscroll
 * </pre>
 */
var Base_Collection_View = Backbone.View
		.extend({

			/*
			 * Events defined on the view and related function(defines action to
			 * be performed on event). ".save" and ".delete" represents html
			 * elements in current view
			 */
			events : {
				"click .temp_collection_event" : "tempEvent"
			},

			/**
			 * Initializes the view, creates an empty BaseCollection and options
			 * restKey, sortKey, url and binds sync, reset, error to collection.
			 * Also checks if the collection in this view needs infiniscroll
			 * (checks for cursor option).
			 */
			initialize : function()
			{
				// startFunctionTimer("initialize");

				// Do not show transition bar 
				if(!this.options.no_transition_bar)
				    showTransitionBar();

				// Binds functions to view
				_.bindAll(this, 'render', 'appendItem', 'appendItemOnAddEvent', 'buildCollectionUI');

				if (this.options.data)
				{
					// Initializes the collection with restKey and sortkey
					this.collection = new BaseCollection(this.options.data, { restKey : this.options.restKey, sortKey : this.options.sortKey,
						descending : this.options.descending, sort_collection : this.options.sort_collection });
				}
				else
				{
					// Initializes the collection with restKey and sortkey
					this.collection = new BaseCollection([], { restKey : this.options.restKey, sortKey : this.options.sortKey,
						descending : this.options.descending, sort_collection : this.options.sort_collection });
				}

				/*
				 * Sets url to the collection to perform CRUD operations on the
				 * collection
				 */
				this.collection.url = this.options.url;

				this.model_list_template = $('<div class="model-list"></div>');

				/*
				 * Binds appendItem function to sync event of the collection
				 * i.e., Gets called every time it attempts to read or save a
				 * model to the server
				 */
				this.collection.bind('sync', this.appendItem);
				this.collection.bind('add', this.appendItemOnAddEvent);

				var that = this;

				/*
				 * Calls render when collection is reset
				 */
				this.collection.bind('reset', function()
				{
					that.render(true)
				});

				/*
				 * Binds error event to collection, so when error occurs the
				 * render is called with parameters force render and error
				 * response text to show in the template
				 */
				this.collection.bind('error', function(collection, response)
				{
					if (response.status == 401)
					{
						handleAjaxError();
						return;
					}
					that.render(true, response.responseText);
				});

				// Commented as it was creating a ripple effect
				// this.collection.bind('add', function(){that.render(true)});

				// endFunctionTimer("initialize");
				/*
				 * Calls render before fetching the collection to show loading
				 * image while collection is being fetched.
				 */
				this.render();

				/*
				 * If cursor options are passed when creating a view then
				 * inifiscroll (infiniscroll.js plug in) is initialized on the
				 * collection
				 */
				if (this.options.cursor)
				{
					/*
					 * If page size is not defined then sets page size to 20.
					 */
					this.page_size = this.options.page_size;
					this.global_sort_key = this.options.global_sort_key;
					this.request_method = this.options.request_method;
					this.post_data = this.options.post_data;
					if (!this.page_size)
						this.page_size = 20;

					/*
					 * stores current view object in temp variable, can be used
					 * to call render in infiniscroll, on successful fetch on
					 * scrolling
					 */
					var that = this;

					/**
					 * Initiazlizes the infi$target : this.options.scroll_target ? tarniscroll on the collection created
					 * in the view,
					 */
					this.infiniScroll = new Backbone.InfiniScroll(this.collection, { success : function()
					{
						/*
						 * If fetch is success then render is called, so
						 * addition models fetched in collection are show in the
						 * view
						 */
						$(".scroll-loading", that.el).remove();

						/**
						 *callback to be fired when next set is fetched. Added by Sasi on Jan/18/2016.
						 */
						if (that.options.infini_scroll_cbk)
							that.options.infini_scroll_cbk();

					}, untilAttr : 'cursor', param : 'cursor', strict : true, pageSize : this.page_size, target : this.options.scroll_target ? this.options.scroll_target: $(window),

					/*
					 * Shows loading on fetch, at the bottom of the table
					 */
					onFetch : function()
					{
						
						var element="table"; 
						if (that.options.scroll_symbol)
							element="section";
						if(that.options.custom_scrollable_element)
							element=that.options.custom_scrollable_element;
						$(element, that.el).after('<div class="scroll-loading" style="margin-left:50%">' + LOADING_ON_CURSOR + '</div>');
					} });

					/*
					 * Adds infiniscroll objects in to a map with current route
					 * as key, to manage the infiniscroll if view changes i.e.,
					 * to disable infiniscroll on different view if not
					 * necessary.
					 */
					addInfiniScrollToRoute(this.infiniScroll);

					// disposePreviousView(this.options.templateKey +
					// '-collection', this);

					// Store in a variable for us to access in the custom fetch
					// as this is different
					var page_size = this.page_size;
					var global_sort_key = this.global_sort_key;
					var request_method = this.request_method;
					var post_data = this.post_data;

					// Set the URL
					this.collection.fetch = function(options)
					{
						// startFunctionTimer("fetch time");
						options || (options = {})
						options.data || (options.data = {});
						options.data['page_size'] = page_size;
						if(global_sort_key && global_sort_key != null)
							options.data['global_sort_key'] = global_sort_key;
						if(request_method && request_method != null) {
							options.type = request_method;
							if(request_method.toLowerCase()=='post' && post_data && post_data != null) {
								$.each(post_data, function(key, value) {
									options.data[key] = value;
								});
							}
						}
						return Backbone.Collection.prototype.fetch.call(this, options);
					};

					// this.collection.url = this.collection.url + "?page_size="
					// + this.page_size;
				}

			},

			tempEvent: function(){
				console.log("tempEvent");
			},

			/**
			 * Takes each model and creates a view for each model using model
			 * template and appends it to model-list, This method is called
			 * whenever a model is added or deleted from the collection, since
			 * this method is binded with sync event of collection
			 * 
			 * @param base_model
			 *            backbone model object
			 */
			appendItem : function(base_model, append)
			{

				// This is required when add event is raised, in that case
				// updating document fragment does not update view. And on the
				// other hand, append item should definitely be called from
				// appendItemOnAddEvent because there are many places where
				// appenditem is overridden and that needs to be called on newly
				// added model
				if (append)
				{
					$(this.model_list_element).append(this.createListView(base_model).render().el);
					return;
				}

				console.log("appendItem");
				this.model_list_element_fragment.appendChild(this.createListView(base_model).render().el);
			},
			createListView : function(base_model)
			{
				// If modelData is set in options of the view then custom data
				// is added to model.
				if (this.options.modelData)
				{
					// console.log("Adding custom data");
					base_model.set(this.options.modelData);
				}

				/*
				 * Creates Base_List_View i.e., view is created for the model in
				 * the collection.
				 */
				var itemView = new Base_List_View({ model : base_model, template : (this.options.templateKey + '-model'),
					tagName : this.options.individual_tag_name });

				return itemView
			}, appendItemOnAddEvent : function(base_model)
			{
				this.appendItem(base_model, true);
				/*
				 * if(this.collection && this.collection.length) {
				 * if(this.collection.at(0).attributes.count)
				 * this.collection.at(0).attributes.count+=1; }
				 */

				// callback for newly added models
				var appendItemCallback = this.options.appendItemCallback;

				if (appendItemCallback && typeof (appendItemCallback) === "function")
					appendItemCallback($(this.el));

				if ($('table', this.el).hasClass('onlySorting'))
					return;

				append_checkboxes(this.model_list_element);

			},
			/**
			 * Renders the collection to a template specified in options, uses
			 * handlebars to populate collection data in to vew
			 * <p>
			 * To use this render, naming of the handlebars template script tags
			 * should be followed
			 * <p>
			 * 
			 * <pre>
			 * 	template-name + model-list :  To append all the models in to list
			 *  template-name + collection :	appends populated model-list to this template
			 *  template-name + model 	 :  Represent each model which is appended to model-list 
			 * </pre>
			 * 
			 * @param force_render
			 *            boolean forces the render to execute, unless it is
			 *            true view is not show and loading image is shown
			 *            instead
			 */
			render : function(force_render, error_message)
			{
				// If collection in not reset then show loading in the content,
				// once collection is fetched, loading is removed by render and
				// view gets populated with fetched collection.
				if (force_render == undefined)
				{	
					//Included by Sasi for tickets
					var html = (this.options.customLoader) ? getTemplate(this.options.customLoaderTemplate) : '';

					$(this.el).html(html);
					return this;
				}

				// Remove loading
				if ($(this.el).html() == getRandomLoadingImg())
					$(this.el).empty();

				// If error message is defined the append error message to el
				// and return
				if (error_message)
				{
					$(this.el).html('<div style="padding:10px;font-size:14px"><b>' + error_message + '<b></div>');
					return;
				}
				// endFunctionTimer("fetch time");
				// printCurrentDateMillis("render start");

				var _this = this;
				var ui_function = this.buildCollectionUI;
				// Populate template with collection and view element is created
				// with content, is used to fill heading of the table

				// startFunctionTimer("getTemplate");
				getTemplate((this.options.templateKey + '-collection'), this.collection.toJSON(), "yes", ui_function);

				if (this.page_size && (this.collection.length < this.page_size))
				{
					console.log("Disabling infini scroll");
					this.infiniScroll.destroy();
				}

				this.delegateEvents();
				return this;
			}, buildCollectionUI : function(result)
			{
				// endFunctionTimer("getTemplate")
				// startFunctionTimer("buildCollectionUI");
				$(this.el).html(result);
				// If collection is Empty show some help slate
				if (this.collection.models.length == 0)
				{
					// Add element slate element in collection template send
					// collection template to show slate pad
					fill_slate("slate", this.el, this.options.slateKey);
				}

				// Add row-fluid if user prefs are set to fluid (deprecated in BS3 Version its been commented)
				/*if (IS_FLUID)
				{
					$(this.el).find('div.row').removeClass('row').addClass('row');
				}*/

				// Used to store all elements as document fragment
				this.model_list_element_fragment = document.createDocumentFragment();

				this.model_list_element = $('#' + this.options.templateKey + '-model-list', $(this.el));

				var fragment = document.createDocumentFragment();

				/*
				 * Iterates through each model in the collection and creates a
				 * view for each model and adds it to model-list
				 */
				_(this.collection.models).each(function(item)
				{ // in case collection is not empty

					this.appendItem(item);
				}, this);

				$(this.model_list_element).append(this.model_list_element_fragment);

				// endFunctionTimer("buildCollectionUI");

				/*
				 * Few operations on the view after rendering the view,
				 * operations like adding some alerts, graphs etc after the view
				 * is rendered, so to perform these operations callback is
				 * provided as option when creating an model.
				 */
				var callback = this.options.postRenderCallback;

				/*
				 * If callback is available for the view, callback functions is
				 * called by sending el(current view html element) as parameters
				 */
				if (callback && typeof (callback) === "function")
				{
					// startFunctionTimer("postRenderCallback");
					// execute the callback, passing parameters as necessary
					callback($(this.el), this.collection);
				}
				
				hideTransitionBar();

				// Add checkboxes to specified tables by triggering view event
				$('body').trigger('agile_collection_loaded', [
					this.el
				]);

				// $(this.el).trigger('agile_collection_loaded', [this.el]);

				// For the first time fetch, disable Scroll bar if results are
				// lesser
				if (callback && typeof (callback) === "function"){}
					// endFunctionTimer("postRenderCallback");

				// printCurrentDateMillis("render end");

				return this;
			}, });
/**
*  Extended View of Base_Collection. It combines parent events to extended view events.
*/
Base_Collection_View.extend = function(child) {
	var view = Backbone.View.extend.apply(this, arguments);
	view.prototype.events = _.extend({}, this.prototype.events, child.events);
	return view;
};


/**
*  Extended View of list view. It combines parent events to extended view events.
*/
Base_List_View.extend = function(child) {
	var view = Backbone.View.extend.apply(this, arguments);
	view.prototype.events = _.extend({}, this.prototype.events, child.events);
	return view;
};
/* !JSCore */
/**
 * Base_Model_View represents view specified by backbone js
 * (http://backbonejs.org/#View), It is view backed by a models, Base_Model_View
 * binds events(click on ".save" and ".delete" html elements) which represents
 * view with logical actions i.e., actions can defined to perform on an event.
 * This binds a view backbone model to view's render function on change event of
 * model, model data is show in the view (used handlebars js to fill model data
 * to template), whenever there is a change in model data, view is updated with
 * new data, since change on model is binded to render function of the view.
 * <p>
 * While creating new Base_Model_View options can be passed, so view is
 * initialized based on the options. Options processed are
 * <p>
 * data : Data should be sent in JSON format (backbone model is created based on
 * data sent).
 * <p>
 * <p>
 * model : Backbone model should be sent.
 * <p>
 * <p>
 * url : Represents url property of the model.
 * <p>
 * <p>
 * isNew : To specify model model needs to be downloaded or not.
 * <p>
 * <p>
 * Window : Specifies which window to navigate after saving the form
 * <p>
 * <p>
 * reload : Boolean value, to specify whether to reload the page after save
 * <p>
 * $el represents the html element of view
 * </p>
 */
var Base_Model_View = Backbone.View
		.extend({

			/*
			 * Events defined on the view and related function(defines action to
			 * be performed on event). ".save" and ".delete" represents html
			 * elements in current view
			 */
			events : {
				"click .save" : "save",
				"click .saveAuthConform" : "save",
				"click .delete" : "deleteItem"
			},

			/**
			 * Sets options to view object(this.options), these options are
			 * passed when creating a view, in initialize function options are
			 * set to current view object. Also binds functions and model data
			 * to views.
			 */
			initialize : function() {
				showTransitionBar();
				/*
				 * Binds functions to current view object, every function that
				 * uses current view "this" should be bind to view
				 * object("this").
				 */
				_.bindAll(this, 'render', 'save', 'deleteItem', 'buildModelViewUI');

				/*
				 * If data is passed as an option to create a view, then
				 * backbone model object is created with data sent, data is
				 * represented as backbone model and bind to view.
				 */
				if (this.options.data != undefined)
					this.model = new Backbone.Model(this.options.data);
				/*
				 * If backbone model is passed as option the model is set to
				 * view
				 */
				else if (this.options.model)
					this.model = this.options.model;
				else
					this.model = new Backbone.Model({});

				/*
				 * Binds render function to change event on the view object
				 * which includes model object, whenever model is changed render
				 * is called to update the view.
				 */
				this.model.bind("change", this.onChange, this);
				
				this.model.bind('error', function(model, response){

					if(response.status == 401)
					{
						// Redirect to login page
						handleAjaxError();
						return;
					}
				});

				/*
				 * Sets URL to backbone model, if url is passed when creating a
				 * view. URL specified is used to fetch, save the model
				 */
				if (this.options.url) {
					this.model.url = this.options.url;
				}

				/*
				 * If "isNew" in options is true, model is not downloaded. which
				 * represents no model data needs to be shown in the view, but
				 * can be used to save data in url set for model. If isNew is
				 * not true and model is empty data needs to be fetched
				 */
				if ((!this.options.isNew)
						&& $.isEmptyObject(this.model.toJSON())) {
					console.log("to fetch");
					/*
					 * Stores view object in temp variable, to be used in
					 * success back for fetch to call render
					 */
					var that = this;

					/*
					 * Fetches model from the url property set, on success
					 * forces render to execute to show the data fetched in
					 * view.
					 */
					this.model.fetch({
						success : function(data) {
							/*
							 * Used true argument to render (forcing render to
							 * execute and show view.), which represent data is
							 * downloaded from server, If render called out
							 * "true" argument then loading image is show
							 * instead of showing data (because Showing view
							 * without downloading data causes flash effect on
							 * page, since on change in model i.e., data fetched
							 * render is called again)
							 */
							that.render(true);
						}
					});
				}
			},

			/**
			 * Defines action for click event on html element with class
			 * ".delete" in current view object, which sends delete request to
			 * server(to URL set to model in initialize function)
			 */
			deleteItem : function(e) {
				e.preventDefault();
				
				var deleteCallback = this.options.deleteCallback;
				var that = this;
				showAlertModal("delete", "confirm", function(){
					/*
					 * Sends delete request, and reloads view on success
					 */
					that.model.destroy({
						success : function(model, response) {
							
							// Delete callback
							if (deleteCallback && typeof (deleteCallback) === "function") {
								
								console.log(response)
								
								// execute the callback, passing parameters as necessary
								deleteCallback(model, response);
							}
							
							if(this.options.no_reload_on_delete)
								  return;

							location.reload(true);
						}
					});
				});
				
				
			},
			/**
			 * Defines action to be performed for click event on HTML element
			 * with class ".save" in current view/template, this can be used to
			 * save the model data in the view representing a form i.e., saveS
			 * the data in form, to the URL set in model.
			 */
			save : function(e) {
				e.preventDefault();

				var targetEle = e.currentTarget;

				// Check if target contains before_save class
				// If exist call saveAuth function
				if($(targetEle).hasClass("saveAuth"))
				{
					var saveAuth = this.options.saveAuth;
					if (saveAuth && typeof (saveAuth) === "function") {
						this.targetEle = targetEle;
						var isReturn = saveAuth(this.el);
						if(isReturn)
							return;
					}

				}

				if(this.targetEle)
					 targetEle = this.targetEle;
				
				// Saves tinymce content back to 
				// textarea before form serialization
				trigger_tinymce_save();

				
				/*
				 * Gets the form id from the view, this.el represents html
				 * element of the view.
				 */
				var $el = $(this.el);
				var formId = $(this.el).find('form').attr('id');
				
				var saveCallback = this.options.saveCallback;
				
				var errorCallback = this.options.errorCallback;
				
				// Represents form element
				var $form = $('#' + formId);
				console.log($form.find('.save'));
				// Returns, if the save button has disabled attribute 
				if($(targetEle).attr('disabled'))
					return;
				
								
				// Disables save button to prevent multiple click event issues
				disable_save_button($(targetEle));
				
				
				// Represents validations result of the form, and json
				// represents serialized data in the form
				var isValid, json;

				/**
				 * If view contains multiple forms, then data are all the forms
				 * in the view are serialized in to a JSON object, each form
				 * data is added to json object with key name attribute of the
				 * form as follows
				 * 
				 * <pre>
				 * 		{
				 * 			primary : {key:value ....} // Data of form with name &quot;primary&quot;
				 * 			secondary : {key : value} // Data for 2nd for with name secondary
				 * 			key1 : value1 // For forms with out a name, values 
				 * 						  //are set directly in JSON with field name
				 * 		}
				 * </pre>
				 */
				if ($(this.el).find('form').length > 1) {
					
					
					// Initialize variable json as a map
					json = {};

					/*
					 * Iterates through the forms in the view (this.el), each
					 * form is validated, if a form is not valid, isValid
					 * variable is set and returned. If form is valid then form
					 * data is serialized, and set in the JSON object with key
					 * as name of the form
					 */
					$.each($(this.el).find('form'),
							function(index, formelement) {

								/*
								 * If any form in multiple forms are not valid
								 * then returns, setting a flag form data is
								 * invalid
								 */
								if (!isValidForm($(formelement))) {
									isValid = false;
									return;
								}

								/*
								 * Form id and Mame of the form is read,
								 * required to serialize and set in JSON
								 */
								var form_id = $(formelement).attr('id');
								var name = $(formelement).attr('name');

								/*
								 * If name of the form is defined, set the
								 * serialized data in to JSON object with form
								 * name as key
								 */
								if (name) {
									json[name] = serializeForm(form_id);
								}
								/*
								 * If form name is not defined the set the
								 * serialized values to json, with filed names
								 * as key for the value
								 */
								else {
									$.each(serializeForm(form_id), function(
											key, value) {
										json[key] = value;
									});
								}
							});
				}

				/*
				 * Check isValid flag for validity(which is set in processing
				 * multiple forms), or checks validity of single form
				 */
				if (isValid == false || !isValidForm($form)) {
					
					// Removes disabled attribute of save button
					enable_save_button($(targetEle));
					
					return;
				}

				var form_custom_validate_cb = this.options.form_custom_validate;
				if(form_custom_validate_cb && !form_custom_validate_cb()){
					enable_save_button($(e.currentTarget));
					return;
				}

				// Clears all the fields in the form before saving
				this.model.clear({
					silent : true
				});

				/*
				 * If variable json is not defined i.e., view does not contacts
				 * multiple forms, so read data from single form
				 */
				if (!json)
					json = serializeForm(formId);

				/*
				 * Saves model data, (silent : true} as argument do not trigger
				 * change view so view is not reset.
				 */
				this.model.set(json, {
					silent : true
				});

				var window = this.options.window;
				var reload = this.options.reload;

				// Store Modal Id
				var modal = this.options.modal;

				var prePersist = this.options.prePersist;
				
				if (prePersist && typeof (prePersist) === "function") {
				    
				     prePersist(this.model);
				    }
				// Loading while saving
				//$save_info = $('<div style="display:inline-block"><img src="img/1-0.gif" height="15px" width="15px"></img></div>');
				//$(".form-actions", this.el).append($save_info);
				//$save_info.show();

				// Calls save on the model
				this.model
						.save(
								[],
								{
									/*
									 * Wait for the server before setting the
									 * new attributes on the model, to trigger
									 * change
									 */
									wait : true,
									/*
									 * On save success, performs the actions as
									 * specified in the options set when
									 * creating an view
									 */
									success : function(model, response) 
									{	
										track_with_save_success_model($(targetEle));

										// Removes disabled attribute of save button
										enable_save_button($(targetEle));
										
										if (saveCallback && typeof (saveCallback) === "function") {
											console.log(response)
											// execute the callback, passing parameters as necessary
											saveCallback(response);
										}
										// Reload the current page
										if (reload)
											location.reload(true);
										else if (window) 
										{
											/*
											 * If window option is 'back'
											 * navigate to previews page
											 */
											if (window == 'back') history.back(-1);
											
											// Else navigate to page set in
											// window attribute
											else Backbone.history.navigate( window, { trigger : true });
											

											// Reset each element
											$form.each(function() {
												this.reset();
											});

											// Hide modal if enabled
											if (modal) $(modal).modal('hide');
										}
										else {
											/* Hide loading on error
											if($save_info)
												$save_info.hide();

											/*
											 * Appends success message to form
											 * actions block in form, if window
											 * option is not set for view
											 *
											 *
											$save_info = $('<div style="display:inline-block"><small><p class="text-success"><i>Saved Successfully</i></p></small></div>');
											$(".form-actions", this.el).append($save_info);
											$save_info.show().delay(3000).hide(1);	
											*/
										}
									},

									/*
									 * If error occurs in saving a model, error
									 * message in response object is shown in
									 * the form
									 */
									error : function(model, response) {
										
										// Removes disabled attribute of save button
										enable_save_button($(targetEle));
										console.log(response);
										
										if (errorCallback && typeof (errorCallback) === "function") {
											errorCallback(response);
										     return;
										    }
										// Hide loading on error
										//$save_info.hide();

										// Show cause of error in saving
										$save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>'
												+ response.responseText
												+ '</i></p></small></div>');

										// Appends error info to form actions
										// block.
										$(targetEle).closest(".form-actions", this.el).append($save_info);
										

										// Hides the error message after 3
										// seconds
										if(response.status != 406)
											$save_info.show().delay(5000).hide(1);
									}
								}, { silent : true });
			},
			/**
			 * Render function, renders the view object with the model binded
			 * and show the view with model data filled in it. Render function
			 * shows loading image in the page if model is not download(if
			 * download is required). It is called whenever attributes of the
			 * model are changed, of when fetch is called on the model binded
			 * with current view.
			 * <p>
			 * And there are other cases when render should show to view in
			 * page.
			 * <p>
			 * 
			 * @param isFetched
			 *            Boolean, force render to show the view called with
			 *            'true' when model is download
			 */
			render : function(isFetched) {

				
				/**
				 * Renders and returns the html element of view with model data,
				 * few conditions are checked render the view according to
				 * requirement and to avoid unwanted rendering of view.
				 * conditions are
				 * <p>
				 * !this.model.isNew() = model is fetched from the server/ Sent
				 * to edit the model
				 * <p>
				 * <p>
				 * this.options.isNew = If model download form the server is not
				 * required
				 * <p>
				 * <p>
				 * !$.isEmptyObject(this.model.toJSON()) = if model is empty
				 * <p>
				 * isFetched = Force call to execute render(when fetch is
				 * success full render is called successfully)
				 * <p>
				 */
				if (!this.model.isNew() || this.options.isNew
						|| !$.isEmptyObject(this.model.toJSON()) || isFetched) {

					$(this.el).html(getRandomLoadingImg());
					/*
					 * Uses handlebars js to fill the model data in the template
					 */
					getTemplate(this.options.template, this.model
							.toJSON(), "yes", this.buildModelViewUI);
					
				}
				// Shows loading in the view, if render conditions are
				// satisfied
				else {
					if (this.options.template == "portlets-leader-board-body-model")
					{
						var sizey = this.options.portletSizeY;
	    				var topPos = 50*sizey;
	    				if(sizey==2 || sizey==3)
	    					topPos += 50;
	        			$(this.el).html("<div class='text-center v-middle opa-half' style='margin-top:"+topPos+"px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
					}
					else
					{
						$(this.el).html(getRandomLoadingImg());
					}
				}

				// Returns view object
				return this;
			}, 
			onChange: function()
			{
				if(this.options.change == false)
					return;
				

				this.render(true);
			}, 
			buildModelViewUI : function(content)
			{
				hideTransitionBar();
				$(this.el).on('DOMNodeInserted', function(e) {
					//alert("triggered");
					//$('form', this).focus_first();
					$(this).trigger('view_loaded');
				 });
			
				$(this.el).html(content);
				
				/*
				 * Few operations on the view after rendering the view,
				 * operations like adding some alerts, graphs etc after the
				 * view is rendered, so to perform these operations callback
				 * is provided as option when creating an model.
				 */
				var callback = this.options.postRenderCallback;
				
				/*
				 * If callback is available for the view, callback functions
				 * is called by sending el(current view html element) as
				 * parameters
				 */
				
				if (callback && typeof (callback) === "function") {
					
					// execute the callback, passing parameters as necessary
					callback($(this.el),this.model.toJSON());
				}

				
				// If isNew is not true, then serialize the form data
				if (this.options.isNew != true) {
					// If el have more than 1 form de serialize all forms
					if ($(this.el).find('form').length > 1)
						deserializeMultipleForms(this.model.toJSON(), $(
								this.el).find('form'));

					// If el have one form
					else if ($(this.el).find('form').length == 1)
						deserializeForm(this.model.toJSON(), $(this.el)
								.find('form'));
				}
				
				
				
				// Add row-fluid if user prefs are set to fluid (deprecated in BS3 so that commented)
			/*	if (IS_FLUID)
				{
					$(this.el).find('div.row').removeClass('row').addClass(
							'row-fluid');
				}
				*/
				$(this.el).trigger('agile_model_loaded');
			}
		});

/**
 * Functions Which take JQuery button elements and enable disable them.
 * 
 * Disable by setting original text in data-save-text attribute and adding disabled:disabled attribute,
 * Also set min width to current width so button can't collapse, but can expand if necessary
 * 
 * Enable by reverse of the above
 * 
 * @param elem - jQuery element corresponding to the button.
 */
function disable_save_button(elem)
{

	var loadingText = elem.attr("data-loading-text");
if(!loadingText)
	   loadingText = "Saving...";
	
	elem.css('min-width',elem.width()+'px')
		.attr('disabled', 'disabled')
		.attr('data-save-text',elem.html())
		.text(loadingText);
}

/**
 * Enables save button.
 * @param elem
 */
function enable_save_button(elem)
{
	elem.html(elem.attr('data-save-text')).removeAttr('disabled data-save-text');
}

/**
*  Extended View of Base_Model. It combines parent events to extended view events.
*/
Base_Model_View.extend = function(child) {
	var view = Backbone.View.extend.apply(this, arguments);
	view.prototype.events = _.extend({}, this.prototype.events, child.events);
	return view;
};/**
 * Infini scroll utility to control the scroll on all routes,
 * Called from base-collection when page requires infiniscroll function and from app.js when route is initialized
 */

/**
 * Map to store infini scroll object with route name as a key
 */
var INFINI_SCROLL_JSON = {};

/**
 * Adds infini_scroll object to JSON Object with current route as key. Destroys
 * infini scroll if already exists in map and sets new infini scroll object to
 * current route
 * 
 * @param inifni_scroll
 *            infiniscroll object
 */
function addInfiniScrollToRoute(infini_scroll) {
	var current_route = window.location.hash.split("#")[1];

	// Destroys infini scroll
	if (INFINI_SCROLL_JSON[current_route])
		INFINI_SCROLL_JSON[current_route].destroy();

	// Sets new infini scroll object w.r.t current route
	INFINI_SCROLL_JSON[current_route] = infini_scroll;
}

// Activates infiniScroll for routes
/**
 * Activates infiniScroll for current route(if required) and disables scroll in
 * other routes, to solve unnecessary requests on scroll. This method is called
 * when routes are initialized
 */
function activateInfiniScroll() {

	// Gets the current route from the url of the browser, splits at "#" (
	// current route is after "#" ).
	var current_route = window.location.hash.split("#")[1];

	// Disables all infini scrolls in the map
	$.each(INFINI_SCROLL_JSON, function(key, value) {
		value.disableFetch();
	});

	// Enables fetch if current route exists in INFINI_SCROLL_JSON map
	if (INFINI_SCROLL_JSON[current_route])
		INFINI_SCROLL_JSON[current_route].enableFetch();
}/**
 * Deletes the selected row related entities from the database based on the url 
 * attribute of the table and fades out the rows from the table
 * 
 * @module Bulk operations
 * ---------------------------------------------
 * author: Rammohan 
 */

$(function(){	
   /**
    * Validates the checkbox status of each row in table body
    * Customizes the delete operation
    * Deletes the entities
    */	
	$("body").on("click", "#delete-checked, .delete-checked-contacts", function(event){
		event.preventDefault();
		var id_array = [];
		var index_array = [];
		var data_array = [];
		var checked = false;
		var table = $('body').find('.showCheckboxes');

		$(table).find('tr .tbody_check').each(function(index, element){
			
			// If element is checked store it's id in an array. !$(element).attr('disabled') included by Sasi to avoid disabled checkboxes
			if($(element).is(':checked') && !$(element).attr('disabled')){
				// Disables mouseenter once checked for delete(To avoid popover in deals when model is checked)
				$(element).closest('tr').on("mouseenter", false);
				index_array.push(index);
				if(!$(element).closest('tr').hasClass("pseduo-row"))
				{
					id_array.push($(element).closest('tr').data().get('id'));
					data_array.push($(element).closest('tr').data().toJSON());
					checked = true;
				}
			}
		});
		if(checked){
			
			if(!hasScope('DELETE_CONTACT'))
			{
				showModalConfirmation("Bulk Delete", 
						"You do not have permission to delete contacts.", 
						function (){
							return;
						}, 
						function(){
							return;
						},
						function() {
							
						},
						"Cancel", "");
			}
			else
			{
				if($(table).hasClass('show-delete-modal')){

					var json = {};
					json.title = $(table).attr('data-bulk-delete-title');
					json.msg = $(table).attr('data-bulk-delete-msg');

					getTemplate("bulk-actions-delete-modal", json, undefined, function(template_ui){

						if(!template_ui)
							return;

						$('#ticketsModal').html($(template_ui)).modal('show').on('shown.bs.modal', function(){

							$('#ticketsModal').on('click', 'a.bulk-delete', function(e){

								$('#ticketsModal').modal('hide');
								$(this).after('<img class="bulk-delete-loading" style="padding-right:5px;margin-bottom:15px" src= "img/21-0.gif"></img>');
								bulk_delete_operation($(table).attr('url'), id_array, index_array, table, undefined, data_array);
							});
						});				
					});

					return;
				}

				// Customize the bulk delete operations
				if(!customize_bulk_delete(id_array, data_array))
					return;

				// Default message for all tables
				var confirm_msg = "Are you sure you want to delete?";
				
				// Appends campaign-name for active subscribers
				if($(table).attr('id') === "active-campaign")
					confirm_msg = "Delete selected contacts from " +$('#subscribers-campaign-name').text()+" Campaign?";
				var $that = $(this);
				// Shows confirm alert, if Cancel clicked, return false
				showAlertModal(confirm_msg, "confirm", function(){
					$that.append('<img class="bulk-delete-loading" style="padding-right:5px;margin-bottom:15px" src= "'+updateImageS3Path("img/21-0.gif")+'"></img>');
				
					var url = $(table).attr('url');
					if(SELECT_ALL && SELECT_ALL == true)
					{
						if($(table).attr('id') == "contacts-table" || $(table).attr('id') == "companies" ) {
							var dynamic_filter = getDynamicFilters();
							if(dynamic_filter == null) {								
								url = url + "&filter=" + encodeURIComponent(getSelectionCriteria());
							}
						}
					}
					
					// For Active Subscribers table
					if(SUBSCRIBERS_SELECT_ALL && SUBSCRIBERS_SELECT_ALL == true){
						if($(table).attr('id') == "active-campaign")
							url = url + "&filter=all-active-subscribers";
					}
					
					bulk_delete_operation(url, id_array, index_array, table, undefined, data_array);
				}, undefined, "Bulk Delete");
				
			}
						
		}	
		else
		{
			// if disabled return
			if($(this).attr('disabled') === "disabled")
				return;
			
			$('body').find(".select-none").html('<div class="alert alert-danger m-t-sm"><a class="close" data-dismiss="alert" href="#">&times;</a>You have not selected any records to delete. Please select at least one record to continue.</div>').show().delay(3000).hide(1);
		}
			
	});
	
	
	
	/**
	    * Validates the checkbox status of each row in table body
	    * Customizes the delete operation
	    * Deletes the entities
	    */	
		$("body").on("click", "#delete-checked-grid", function(event){
			event.preventDefault();
			var id_array = [];
			var index_array = [];
			var data_array = [];
			var checked = false;
			var table = $('body').find('.showCheckboxes');

			$(table).find('.tbody_check').each(function(index, element){
				
				// If element is checked store it's id in an array 
				if($(element).is(':checked')){
					
					console.log($(element).parent('div').attr('id'));
					index_array.push(index);
					console.log(index_array);
					if($(".grid-view").length!=0){
						id_array.push($(element).parent().parent().parent('div').attr('id'));
					}
					else
					id_array.push($(element).closest('div').attr('id'));
					if(Current_Route.indexOf('users')!=-1)
					data_array.push($(element).closest("div.data").parent('div').data().toJSON())
					checked = true;
				}
				
			});
			if(checked){
				
				if(!canRunBulkOperations())
				{
					showModalConfirmation("Bulk Delete", 
							"You may not have permission to delete some of the contacts selected. Proceeding with this operation will delete only the contacts that you are permitted to delete.<br/><br/> Do you want to proceed?",
							function (){
								// Customize the bulk delete operations
								if(!customize_bulk_delete(id_array, data_array))
										return;
				
								bulk_delete_operation($(table).attr('url'), id_array, index_array, table, true, data_array);
							}
							, function(){
								// No callback
								return;
								},
								function(){
					
								});
				}
			else
				{
					showAlertModal("bulk_delete", "confirm", function(){
						// Customize the bulk delete operations
						if(!customize_bulk_delete(id_array, data_array))
							return;
				
						bulk_delete_operation($(table).attr('url'), id_array, index_array, table, true, data_array);
					});
					
				}
				
				
			}	
			else
	            $('body').find(".select-none").html('<div class="alert alert-danger"><a class="close" data-dismiss="alert" href="#">&times;</a>You have not selected any records to delete. Please select at least one record to continue.</div>').show().delay(3000).hide(1);
				
		});

	$("body").on("click", "#deal-delete-checked", function(event){
		event.preventDefault();
		var id_array = [];
		var index_array = [];
		var data_array = [];
		var checked = false;
		var table = $('body').find('.showCheckboxes');
		var dealsCount = 0;
		$(table).find('tr .tbody_check').each(function(index, element){
			
			// If element is checked store it's id in an array 
			if($(element).is(':checked')){
				// Disables mouseenter once checked for delete(To avoid popover in deals when model is checked)
				$(element).closest('tr').on("mouseenter", false);
				index_array.push(index);
				dealsCount++;
				if(!$(element).closest('tr').hasClass("pseduo-row"))
				{
					id_array.push($(element).closest('tr').data().get('id'));
					data_array.push($(element).closest('tr').data().toJSON());
					checked = true;
				}
			}
		});
		if(checked){
			
			if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
			{
				showModalConfirmation("Bulk Delete", 
						"You may not have permission to delete some of the deals selected. Proceeding with this operation will delete only the deals that you are permitted to delete.<br/><br/> Do you want to proceed?", 
						function (){
					
					// Customize the bulk delete operations
					if(!customize_bulk_delete(id_array, data_array))
						return;
					
					
					//$(this).after('<img class="bulk-delete-loading" style="padding-right:5px;margin-bottom:15px" src= "'+updateImageS3Path("img/21-0.gif")+'"></img>');
					
					var url = $(table).attr('url');
					if(SELECT_ALL == true)
					{
						if($(table).attr('id') == "contacts-table" || $(table).attr('id') == "companies" ) {
							var dynamic_filter = getDynamicFilters();
							if(dynamic_filter == null) {								
								url = url + "&filter=" + encodeURIComponent(getSelectionCriteria());
							}
						}
					}
					
					// For Active Subscribers table
					if(SUBSCRIBERS_SELECT_ALL == true){	
						if($(table).attr('id') == "active-campaign")
							url = url + "&filter=all-active-subscribers";
					}
					
					bulk_delete_operation(url, id_array, index_array, table, undefined, data_array);
						}, 
						function(){
							
							return;
						},
						function() {
							
						});
			}
			else
			{
				showModalConfirmation("Bulk Delete", 
						"Delete "+dealsCount+" Deal(s)?", 
						function (){
							// Customize the bulk delete operations
							if(!customize_bulk_delete(id_array, data_array))
								return;
							
							
							//$(this).after('<img class="bulk-delete-loading" style="padding-right:5px;margin-bottom:15px" src= "'+updateImageS3Path("img/21-0.gif")+'"></img>');
							
							var url = $(table).attr('url');
							if(SELECT_ALL && SELECT_ALL == true)
							{
								if($(table).attr('id') == "contacts-table" || $(table).attr('id') == "companies" ) {
									var dynamic_filter = getDynamicFilters();
									if(dynamic_filter == null) {								
										url = url + "&filter=" + encodeURIComponent(getSelectionCriteria());
									}
								}
							}
							
							bulk_delete_operation(url, id_array, index_array, table, undefined, data_array);
						});
			}
						
		}	
		else
		{
			// if disabled return
			if($(this).attr('disabled') === "disabled")
				return;
			
			$('body').find(".select-none").html('<div class="alert alert-danger m-t-sm"><a class="close" data-dismiss="alert" href="#">&times;</a>You have not selected any records to delete. Please select at least one record to continue.</div>').show().delay(3000).hide(1);
		}
			
	});
	
});

/**
 * Customizes the bulk delete operation of certain tables. For example,
 * in case of users table, this code verifies if each user is an admin or not before deleting them. 
 * Doesn't delete admins.
 * 
 * @method customize_bulk_delete
 * @param {Array} id_array holds the array of ids
 * @param {Array} data_array holds the array of entities
 * @returns {Boolean} 
 */
function customize_bulk_delete(id_array, data_array){
	if(Current_Route == 'users'){
		$.each(data_array, function(index, model){
			if(model.is_admin){
				id_array.splice(id_array.indexOf(model.id), 1);
			}	
		});
		if(id_array.length == 0){
			$('body').find(".select-none").html('<div class="alert alert-danger"><a class="close" data-dismiss="alert" href="#">&times;</a>Sorry, can not delete user having <i>admin</i> privilege.</div>').show().delay(5000).hide(1);
			return false;
		}
	}
	return true;
}

/**
 * Bulk operations - delete function
 * Deletes the entities by sending their ids as form data of ajax POST request 
 * and then fades out the rows from the table
 * @method bulk_delete_operation
 * @param {Steing} url to which the request has to be sent
 * @param {Array} id_array holds array of ids of the entities to be deleted
 * @param {Array} index_array holds array of row indexes to be faded out
 * @param {Object} table content as html object
 * @param {Array} data_array holds array of entities 
 */
function bulk_delete_operation(url, id_array, index_array, table, is_grid_view, data_array){
	var json = {};
	var count = id_array.length;
	if(!SELECT_ALL)
		json.ids = JSON.stringify(id_array);
	var dynamic_filter = getDynamicFilters();
	if(dynamic_filter != null) {
		json.dynamic_filter = dynamic_filter;
	}
		
	$.ajax({
		url: url,
		type: 'POST',
		data: json,
		contentType : "application/x-www-form-urlencoded",
		success: function() {
			
			if(url=='core/api/tasks/bulk'){
				getDueTasksCount(function(count){
					var due_task_count= count;

					if(due_task_count==0)
						$(".navbar_due_tasks").css("display", "none");
					else
						$(".navbar_due_tasks").css("display", "block");
					if(due_task_count !=0)
						$('#due_tasks_count').html(due_task_count);
					else
						$('#due_tasks_count').html("");
				
				});
				
			}

			if(url=='core/api/dashboards/bulk')
			{
				if(App_Dashboards.dashboards_collection_view && App_Dashboards.dashboards_collection_view.collection)
				{
					$.each(id_array, function(index, id_val){
						App_Dashboards.dashboards_collection_view.collection.remove(id_val);
					});
				}
				if(CURRENT_USER_DASHBOARDS && CURRENT_USER_DASHBOARDS.length > 0)
				{
					$.each(id_array, function(index, id_val){
						$.each(CURRENT_USER_DASHBOARDS, function(index1, val)
						{
							if(id_val == this.id)
							{
								CURRENT_USER_DASHBOARDS.splice(index1, 1);
							}
						});
					});
				}
			}
			
			$(".bulk-delete-loading").remove();	
			if(url=='core/api/users/bulk' && !_billing_restriction.currentLimits.freePlan)
			{
				var message;
				if(count > 1)
					message = "Users have been deleted successfully. Please adjust your billing plan to avoid being billed for the deleted users.";
				else
					message = "User has been deleted successfully. Please adjust your billing plan to avoid being billed for the deleted user.";
				showNotyPopUp('information', message, "top", 10000);
			}
			if(count >= 100 || count == 0)
			{
				if($(table).attr('id') == "contacts-table")
				{
					showNotyPopUp('information', "Your contacts deletion will be processed shortly", "top", 5000);
					CONTACTS_HARD_RELOAD = true;
				}
				if($(table).attr('id') == "companies"){
					showNotyPopUp('information', "Your companies deletion will be processed shortly", "top", 5000);
					COMPANIES_HARD_RELOAD = true;
				}
			}
			
			if(!is_grid_view)
			{
				var tbody = $(table).find('tbody');
				
				// To remove table rows on delete 
				for(var i = 0; i < index_array.length; i++) 
					$(tbody).find('tr:eq(' + index_array[i] + ')').fadeOut(300, function() { $(this).remove(); });				
			}
			else
			{
				// To remove table rows on delete 
				for(var i = 0; i < id_array.length; i++) 
					$("."+id_array[i]).fadeOut(300, function() { $(this).remove(); });				
			}
			
			try{
			if(App_Workflows.workflow_list_view && Current_Route == "workflows")
				{
				for(i=0;i<id_array.length;i++){
				App_Workflows.workflow_list_view.collection.remove(id_array[i]);
				$(App_Workflows.workflow_list_view.el).find(id_array[i]).closest("tr").remove();
				}
			}
			}
			catch(err)
			{}

			$('.thead_check').attr("checked", false);
			
			switch(url){
				case 'core/api/tickets/groups/bulk':{

					if(id_array.length == App_Ticket_Module.groupsCollection.collection.length)
						App_Ticket_Module.ticketGroups();
					break;
				}
				case 'core/api/tickets/canned-messages/bulk':{
					if(id_array.length == App_Ticket_Module.cannedResponseCollection.collection.length)
						App_Ticket_Module.cannedResponses();
					break;
				}
				case 'core/api/tickets/filters/bulk':{

					  if(id_array.length == App_Ticket_Module.ticketFiltersList.collection.length)
						App_Ticket_Module.ticketFilters();

			    	  $.each(id_array, function(index, data){
				      	App_Ticket_Module.ticketFiltersList.collection.remove(data);
				      });

				      if(id_array.indexOf(Ticket_Filter_ID) != -1){
	                      var filterJSON = App_Ticket_Module.ticketFiltersList.collection.at(0).toJSON();
			 			  Ticket_Filter_ID = filterJSON.id;
			 		  }

					break;
				}
				case 'core/api/tickets/labels/bulk':{
					if(id_array.length == Ticket_Labels.labelsCollection.collection.length)
						App_Ticket_Module.ticketLabels();
					break;
				}
			}	
			
			// Show bulk operations only when thead check box is checked
			toggle_contacts_bulk_actions_dropdown(undefined, true,$('.thead_check').parents('table').attr('id'));
			
			// Removes the entities from timeline, if they are deleted from contact detail view
			if(App_Contacts.contactDetailView && Current_Route == "contact/"
				+ App_Contacts.contactDetailView.model.get('id')){
				
				// Activates "Timeline" tab and its tab content in contact detail view 
				activate_timeline_tab();
				
				$.each(data_array, function(index, data){
					var $removeItem = $( '#' + data.id );
					$('#timeline').isotope('remove', $removeItem);
				});
			}	
			
		}
	});
}

/**
 * Returns boolean value based on user action on confirmation message.
 * If OK is clicked returns true, otherwise false.
 * 
 * @param table - table object
 **/
function customize_delete_message(table)
{
	
	// Default message for all tables
	var confirm_msg = "Are you sure you want to delete?";
	
	// Appends campaign-name for active subscribers
	if($(table).attr('id') === "active-campaign")
		confirm_msg = "Delete selected contacts from " +$('#subscribers-campaign-name').text()+" Campaign?";

	// Shows confirm alert, if Cancel clicked, return false
	if(!confirm(confirm_msg))
		return false;
	
	// if OK clicked return true
	return true;
	
	
}/**
 * Performs operations like changing owner, adding tags and etc.. on contacts
 * bulk
 * 
 * @module Bulk operations
 * 
 * author: Rammohan
 */
var _BULK_CONTACTS = undefined;
var current_view_contacts_count = 0;
var SELECT_ALL = false;
var _BULKACTION_FILTER = undefined;

/** 
* Bulk actions collection view
*/
var Contacts_Events_Collection_View = Base_Collection_View.extend({
    events: {
    	/** Contacts bulk actions */
    	'click #bulk-owner' : 'bulkActionAddOwner',
    	'click #bulk-campaigns' : 'bulkActionAssignToCampaign',
    	'click #bulk-tags' : 'bulkActionAddTags',
    	'click #bulk-tags-remove' : 'bulkActionRemoveTags',
    	'click #bulk-email' : 'bulkActionSendEmail',
    	'click #bulk-contacts-export' : 'bulkActionExportContacts',
    	'click #bulk-companies-export' : 'bulkActionExportCompanies',
    	'click #select-all-available-contacts' : 'bulkActionSelectAvailContacts',
    	'click #select-all-revert' : 'bulkActionRevertAvailContacts',

    	/** Company bulk actions */
    	'click .default_company_filter' : 'bulkActionCompanyDefaultFilter',
    	'click #companies-filter' : 'bulkActionCompaniesFilter',
    	'click .company_static_filter' : 'bulkActionCompaniesStaticFilter',
    	'click #comp-sort-by-created_time-desc' : 'bulkActionCompaniesSortonTimeDesc',
    	'click #comp-sort-by-created_time-asc' : 'bulkActionCompaniesSortonTimeAsec',
    	'click .comp-sort-by-name' : 'bulkActionCompaniesSortByName',
    	'click #contact-actions-grid-delete' : 'contactActionsGridDelete',
    	
    	'click .filter' : 'filterResults',
    	'click .default_filter' : 'defaultFilterResults',
    	// 'click #companies-filter' : 'companyFilterResults',
    	'click .default_contact_remove_tag' : 'defaultContactRemoveTag',

    	//'click .contact-actions-delete-mobile' : 'onContactDelete'
    	'click .contact-type-image, .company-type-image' : 'navigateToProperContact'
    	
    },

    /*onContactDeleteAction : function(e){
    	e.preventDefault();
    	event.stopPropagation();
    	contact_delete_action.onContactDelete(e);
	},*/

    bulkActionCompaniesSortByName : function(e){

    	e.preventDefault();
			_agile_set_prefs('company_sort_field',$(e.currentTarget).attr('data'));
			COMPANIES_HARD_RELOAD=true;
			App_Companies.companies();
    },

	defaultContactRemoveTag: function(e)
	{
		e.preventDefault();
		// Navigate to show form
		Backbone.history.navigate("contacts", { trigger : true });
	},

    // Fetch filter result without changing route on click
	filterResults:  function(e)
	{

		contact_filters_util.filterResults(e);
	},

	/*
	 * If default filter is selected, removes filter cookies an load contacts
	 * with out any query condition
	 */
	defaultFilterResults:  function(e)
	{
		e.preventDefault();
		revertToDefaultContacts();
	},

	companyFilterResults: function(e)
	{
		contact_filters_util.companyFilterResults(e);
		
	},
    
	contactActionsGridDelete: function(e){
		
		e.preventDefault();
		var contact_id=$(e.currentTarget).attr('con_id');
    	var model=App_Contacts.contactsListView.collection.get(contact_id);
		$('#deleteGridContactModal').modal('show');

		$('#deleteGridContactModal').on("shown.bs.modal", function(){

				// If Yes clicked
		   $('#deleteGridContactModal').on('click', '#delete_grid_contact_yes', function(e) {
				e.preventDefault();
				// Delete Contact.
				$.ajax({
    					url: 'core/api/contacts/' + contact_id,
       					type: 'DELETE',
       					success: function()
       					{
       						$('#deleteGridContactModal').modal('hide');
       						App_Contacts.contactsListView.collection.remove(model);
       						if(App_Contacts.contact_custom_view)
       						App_Contacts.contact_custom_view.collection.remove(model);
       						CONTACTS_HARD_RELOAD=true;
       						App_Contacts.contacts();
       					}
       				});
			});


		   $('#deleteGridContactModal').on('click', '#delete_grid_contact_no', function(e) {
				e.preventDefault();
				if($(this).attr('disabled'))
			   	     return;
				$('#deleteGridContactModal').modal('hide');
			});

		});

    		
	},
	/*
	 * If default filter is selected, removes filter cookies an load contacts
	 * with out any query condition
	 */
	bulkActionCompanyDefaultFilter :  function(e)
	{
		e.preventDefault();
		company_list_view.revertToDefaultCompanies();
	},
	
	bulkActionCompaniesFilter : function(e)
	{

		e.preventDefault();
		_agile_delete_prefs('company_filter');
		//_agile_delete_prefs('contact_filter_type');

		//_agile_set_prefs('company_filter', "Companies");
		COMPANIES_HARD_RELOAD = true;
		App_Companies.companies(); // /Show Companies list, explicitly hard
		// reload
		return;
	},

	bulkActionCompaniesStaticFilter :  function(e)
	{

		e.preventDefault();
		_agile_delete_prefs('company_filter');
		//_agile_delete_prefs('dynamic_contact_filter');
		_agile_delete_prefs('dynamic_company_filter');

		var filter_id = $(e.currentTarget).attr('id');
		var filter_type = $(e.currentTarget).attr('filter_type');

		// Saves Filter in cookie
		_agile_set_prefs('company_filter', filter_id)
		//_agile_set_prefs('company_filter_type', filter_type)

		// Gets name of the filter, which is set as data
		// attribute in filter
		filter_name = $(e.currentTarget).attr('data');

		COMPANIES_HARD_RELOAD=true;
		App_Companies.companies();
		return;
		// /removed old code from below,
		// now filters will work only on contact, not company
	},
	
	bulkActionCompaniesSortonTimeDesc : function(e)
	{
		e.preventDefault();
		_agile_set_prefs('company_sort_field',$(e.currentTarget).attr('data'));
		COMPANIES_HARD_RELOAD=true;
		App_Companies.companies();
	},
	
	bulkActionCompaniesSortonTimeAsec : function(e){
		e.preventDefault();
		_agile_set_prefs('company_sort_field',$(e.currentTarget).attr('data'));
		COMPANIES_HARD_RELOAD=true;
		App_Companies.companies();
	},

    bulkActionAddOwner : function(e){
    	e.preventDefault();
    	contacts_bulk_actions.change_owner(e);
    },

    bulkActionAssignToCampaign : function(e){
    	e.preventDefault();
    	contacts_bulk_actions.assign_to_campaigns(e);
    },

    bulkActionAddTags :  function(e){
    	e.preventDefault();
    	contacts_bulk_actions.add_tags(e);
    },

    bulkActionRemoveTags :  function(e){
    	e.preventDefault();
    	contacts_bulk_actions.remove_tags(e);
    },
    bulkActionSendEmail : function(e){
    	e.preventDefault();
    	contacts_bulk_actions.send_email(e);
    },

    bulkActionExportContacts : function(e){
    	e.preventDefault();
    	contacts_bulk_actions.export_contacts(e);
    },

    bulkActionExportCompanies : function(e){
    	e.preventDefault();
    	contacts_bulk_actions.export_companies(e);
    },

    bulkActionSelectAvailContacts : function(e){
    	e.preventDefault();
    	contacts_bulk_actions.select_contacts(e);
    },

    bulkActionRevertAvailContacts : function(e){
    	e.preventDefault();

    	SELECT_ALL = false;
		_BULK_CONTACTS = undefined;
		
		var html = '';

		var resultCount = 0;
		var appCount = 0;
		var limitValue = 10000;		

		if(company_util.isCompany()){

			resultCount = App_Companies.companiesListView.collection.length;
			appCount = getAvailableContacts();

			if(localStorage.getItem("dynamic_company_filter") != null || localStorage.getItem("company_filter") != null) {				
				
				if(resultCount > limitValue){
					resultCount = limitValue + "+";
				}

				if(appCount > limitValue){
					appCount = limitValue + "+";
				}

			}

			html = "Selected " + resultCount + " companies. <a href='#'  id='select-all-available-contacts' class='c-p text-info'>Select all " + appCount + " companies</a>";
		}else{

			resultCount = App_Contacts.contactsListView.collection.length;
			appCount = getAvailableContacts();

			if(localStorage.getItem("dynamic_contact_filter") != null || localStorage.getItem("contact_filter") != null){	
				if(resultCount > limitValue){
					resultCount = limitValue + "+";
				}

				if(appCount > limitValue){
					appCount = limitValue + "+";
				}
			}

			html = "Selected " + resultCount + " contacts. <a href='#'  id='select-all-available-contacts' class='c-p text-info'>Select all " + appCount + " contacts</a>";
		}
		$('body').find('#bulk-select').html(html);
    },

    navigateToProperContact : function(e){
    	e.stopPropagation();
		var currentObjId = $(e.currentTarget).attr("id");
		if($(e.currentTarget).hasClass("contact-type-image"))
		{
			Backbone.history.navigate("contact/" + currentObjId, { trigger : true });
		}
		else
		{
			Backbone.history.navigate("company/" + currentObjId, { trigger : true });
		}
    } 

   
});

$(function(){
	 $('#deleteContactModal').on("click", ".delete-confirmed", function(e){

	 		var contactId = $(this).attr("data");
            var contactModel = App_Contacts.contactsListView.collection.get(contactId);

            contactModel.url = "core/api/contacts/" + contactId;		
			contactModel.destroy({success: function(model, response) {
				  Backbone.history.navigate("contacts",{trigger: true});
			}});
	 });
});


	


var contacts_bulk_actions = {

	/**
	 * Bulk operations - Change owner Shows all the users as drop down list to
	 * select one of them as the owner for the selected contacts.
	 */
	change_owner : function(e){
			load_bulk_operations_template(function(){

					if (!canRunBulkOperations())
					{
						showModalConfirmation(
								"Bulk Change Owner",
								"You may not have permission to update some of the contacts selected. " + "Proceeding with this operation will change the owner for only the contacts " + "you are allowed to update.<br/><br/> Do you want to proceed?",
								show_bulk_owner_change_page, function()
								{
									// No callback
									return;
								}, function()
								{

								});
					}
					else
					{
						show_bulk_owner_change_page();
					}

			});
	},

	/**
	 * Bulk operations - Adds to campaign Shows all the workflows as drop down
	 * list to select one of them to subscribe the selected contacts
	 */
	assign_to_campaigns : function(e){
		// Selected Contact ids
		var id_array = get_contacts_bulk_ids();

		// when SELECT_ALL is true i.e., all contacts are
		// selected.
		if (id_array.length === 0)
			count = getAvailableContacts();
		else
			count = id_array.length;

		var continueAction = true;
		if (!canRunBulkOperations())
		{
			continueAction = false;
			showModalConfirmation(
					"Bulk Assign Campaign",
					"You may not have permission to update some of the contacts selected. Proceeding with this operation will add only your contacts to the campaign.<br/><br/>Do you want to proceed?",
					show_bulk_campaign_assign_page, function()
					{
						// No callback
					}, function()
					{
						return;
					});
		}
		if (is_free_plan() && has_more_than_limit())
		{
			continueAction = false;
			showModalConfirmation(
					"Add to Campaign",
					"You can apply this bulk action only on 25 contacts in the FREE Plan. Please choose lesser number of contacts or upgrade your account.",
					function()
					{
						Backbone.history.navigate("subscribe", { trigger : true });
					}, function()
					{
						// No callback
						return;
					}, function()
					{
						return;
					}, "Upgrade", "Close");
		}
		if (!canSendEmails(count))
		{
			continueAction = false;
			var pendingEmails = getPendingEmails() + getEmailCreditsCount();
			var yes = "Yes";
			var no = "No"

			var message = "";
			var upgrade_link = ' You may <a href="#subscribe" class="action text-info" data-dismiss="modal" subscribe="subscribe" action="deny">purchase </a>more emails if this does not suffice your bulk action.';
			var title = "Low on Emails"
			if (pendingEmails <= 0)
			{
				title = "Low on Emails";
				yes = "";
				no = "Ok"
				message = "You have used up all emails in your quota. " + upgrade_link;
			}
			else
				message = "You have only " + pendingEmails + " emails left as per your quota. " + upgrade_link + " Continuing with this operation will stop sending emails once it crosses the quota.<br/><br/>" + "Do you want to proceed?";

			showModalConfirmation(title, message, show_bulk_campaign_assign_page, function(element)
			{

				// No callback
				if (!element)
					return;

				if ($(element).attr('subscribe'))
					Backbone.history.navigate("subscribe", { trigger : true });
				return;
			}, function(element)
			{
			}, yes, no);
			return;
		}
		else if (continueAction)
		{
			show_bulk_campaign_assign_page()
		}
	},

	/**
	 * Bulk operations - Adds tags' Shows the existing tags with help of
	 * typeahead to add tags to the selected contacts. Also we can add new tags.
	 */
	add_tags : function(e){

		load_bulk_operations_template(function(){

						if (!canRunBulkOperations())
						{
							showModalConfirmation(
									"Bulk Add Tag",
									"You may not have permission to update some of the contacts selected. Proceeding with this operation will add tag to only the contacts you are allowed to update.<br/><br/> Do you want to proceed?",

									show_add_tag_bulkaction_form, function()
									{
										// No callback
										return;
									}, function()
									{
										return;
									});
						}
						if (is_free_plan() && has_more_than_limit())
						{
							continueAction = false;
							showModalConfirmation(
									"Add tags",
									"You can apply this bulk action only on 25 contacts in the FREE Plan. Please choose lesser number of contacts or upgrade your account.",
									function()
									{
										Backbone.history.navigate("subscribe", { trigger : true });
									}, function()
									{
										// No callback
										return;
									}, function()
									{
										return;
									}, "Upgrade", "Close");
						}
						else
						{
							show_add_tag_bulkaction_form()
						}
					});
	},

	/**
	 * Bulk operations - Adds tags' Shows the existing tags with help of
	 * typeahead to add tags to the selected contacts. Also we can add new tags.
	 */
     remove_tags : function(e){
     	load_bulk_operations_template(function(){

					if (!canRunBulkOperations())
					{
						showModalConfirmation(
								"Bulk Remove Tag",
								"You may not have permission to update some of the contacts selected. Proceeding with this operation will delete tag to only the contacts you are allowed to update.<br/><br/> Do you want to proceed?",

								show_remove_tag_bulkaction_form, function()
								{
									// No callback
									return;
								}, function()
								{
									return;
								});
					}
					if (is_free_plan() && has_more_than_limit())
					{
						continueAction = false;
						showModalConfirmation(
								"Remove tags",
								"You can apply this bulk action only on 25 contacts in the FREE Plan. Please choose lesser number of contacts or upgrade your account.",
								function()
								{
									Backbone.history.navigate("subscribe", { trigger : true });
								}, function()
								{
									// No callback
									return;
								}, function()
								{
									return;
								}, "Upgrade", "Close");
					}
					else
					{
						show_remove_tag_bulkaction_form()
					}
				});
     },

     /**
	 * Bulk operations - Sends email to the bulk of contacts by filling up the
	 * send email details like from, subject and body.
	 */
     send_email : function(e){
     		load_bulk_operations_template(function(){

						// Selected Contact ids
						var id_array = get_contacts_bulk_ids();

						if (!canRunBulkOperations())
						{
							showModalConfirmation(
									"Bulk Email",
									"You may not be the owner for some of the contacts selected. Proceeding with this operation will send email to only your contacts.<br/><br/> Do you want to proceed?",
									function()
									{
										show_bulk_email_form(id_array)
									},
									function()
									{
										// No callback
										return;
									}, function()
									{
										return;
									});
						}
						if (is_free_plan() && has_more_than_limit())
						{
							showModalConfirmation(
									"Send Email",
									"You can apply this bulk action only on 25 contacts in the FREE Plan. Please choose lesser number of contacts or upgrade your account.",
									function()
									{
										Backbone.history.navigate("subscribe", { trigger : true });
									}, function()
									{
										// No callback
										return;
									}, function()
									{
										return;
									}, "Upgrade", "Close");
						}
						else
						{

							// when SELECT_ALL is true i.e., all contacts are
							// selected.
							if (id_array.length === 0)
								count = getAvailableContacts();
							else
								count = id_array.length;

							if (!canSendEmails(count))
							{
								var pendingEmails = getPendingEmails() + getEmailCreditsCount();

								var yes = "Yes";
								var no = "No"

								var message = "";
								var upgrade_link = 'Please<a href="#subscribe" class="action text-info" data-dismiss="modal" subscribe="subscribe" action="deny"> upgrade</a> your email subscription.';
								var emialErrormsg = '<div>To continue sending emails from your account, please<a href="#subscribe" class="action text-info" data-dismiss="modal" subscribe="subscribe" action="deny"> purchase</a>  more.</div>';
								var title = "Not Enough Emails Left"
								if (pendingEmails <= 0)
								{
									title = "Emails Limit";
									yes = "";
									no = "Ok"
									message = "<div>Sorry, your emails quota has been utilized.</div> " + emialErrormsg;
								}
								else
									message = "You have only " + pendingEmails + " emails remaining as per your quota. " + upgrade_link + " Continuing with this operation may not send the email to some contacts. <br/><br/>" + "Do you want to proceed?";

								showModalConfirmation(title, message, show_bulk_email_form, function(element)
								{

									// No callback
									if (!element)
										return;

									if ($(element).attr('subscribe'))
										Backbone.history.navigate("subscribe", { trigger : true });
								}, function(element)
								{
								}, yes, no);
								return;
							}

							show_bulk_email_form(id_array)
						}
					});
     },


	/**
	 * Bulk Operations - Exports selected contacts in a CSV file as an
	 * attachment to email of current domain user.
	 */
     export_contacts : function(e){

     				e.preventDefault();

						// Removes if previous modals exist.
						if ($('#contacts-export-csv-modal').size() != 0)
						{
							$('#contacts-export-csv-modal').remove();
						}

						// Selected Contact ids
						var id_array = get_contacts_bulk_ids();

						var count = 0;

						// when SELECT_ALL is true i.e., all contacts are
						// selected.
						if (id_array.length === 0)
							count = getAvailableContacts();
						else
							count = id_array.length;


						getTemplate('contacts-export-csv-modal', {}, undefined, function(template_ui){
							if(!template_ui)
								  return;
							var contacts_csv_modal = $(template_ui);
							contacts_csv_modal.modal('show');

							contacts_csv_modal.on('shown.bs.modal', function(){
									// If Yes clicked
									$("#contacts-export-csv-modal").on("click",'#contacts-export-csv-confirm', function(e)
									{
										e.preventDefault();

										if ($(this).attr('disabled'))
											return;

										$(this).attr('disabled', 'disabled');

										// Shows message
										$save_info = $('<img src="' + updateImageS3Path("img/1-0.gif") +'" height="18px" width="18px"></img>&nbsp;&nbsp;<span><small class="text-success" style="font-size:15px; display:inline-block"><i>Email will be sent shortly.</i></small></span>');
										$(this).parent('.modal-footer').find('.contacts-export-csv-message').append($save_info);
										$save_info.show();

										var url = '/core/api/contacts/export?action_type=EXPORT_CONTACTS_CSV';

										var json = {};
										json.contact_ids = id_array;
										json.data = JSON.stringify(CURRENT_DOMAIN_USER);
										postBulkOperationData(url, json, undefined, undefined, function()
										{

											// hide modal after 3 secs
											setTimeout(function()
											{
												contacts_csv_modal.modal('hide');
											}, 3000);

											// Uncheck contacts table and
											// hide bulk actions button.
											$('body').find('#bulk-actions').css('display', 'none');
											$('body').find('#bulk-select').css('display', 'none');
											$('body').find('#bulk-action-btns button').addClass("disabled");
											$('table#contacts-table').find('.thead_check').removeAttr('checked');
											$('table#contacts-table').find('.tbody_check').removeAttr('checked');
											$(".grid-checkboxes").find(".thead_check").removeAttr("checked");
                                            $(".contacts-grid-view-temp").find(".tbody_check").removeAttr("checked");

										}, "no_noty");
									});
							});			


						}, null);
						
     },

     /**
	 * Bulk Operations - Exports selected contacts in a CSV file as an
	 * attachment to email of current domain user.
	 */
	export_companies : function(e)
			{
				e.preventDefault();

				// Removes if previous modals exist.
				if ($('#companies-export-csv-modal').size() != 0)
				{
					$('#companies-export-csv-modal').remove();
				}

				// Selected Contact ids
				var id_array = get_contacts_bulk_ids();

				var count = 0;

				// when SELECT_ALL is true i.e., all contacts are
				// selected.
				if (id_array.length === 0)
					count = getAvailableContacts();
				else
					count = id_array.length;

				
				getTemplate('companies-export-csv-modal', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					var companies_csv_modal = $(template_ui);
					companies_csv_modal.modal('show');

					companies_csv_modal.on('shown.bs.modal', function(){
						// If Yes clicked
						$("#companies-export-csv-modal").on("click", '#companies-export-csv-confirm', function(e)
										{
											e.preventDefault();

											if ($(this).attr('disabled'))
												return;

											$(this).attr('disabled', 'disabled');

											// Shows message
											$save_info = $('<img src="img/1-0.gif" height="18px" width="18px"></img>&nbsp;&nbsp;<span><small class="text-success" style="font-size:15px; display:inline-block"><i>Email will be sent shortly.</i></small></span>');
											$(this).parent('.modal-footer').find('.companies-export-csv-message').append($save_info);
											$save_info.show();

											var url = '/core/api/bulk/update?action_type=EXPORT_COMPANIES_CSV';

											var json = {};
											json.contact_ids = id_array;
											json.data = JSON.stringify(CURRENT_DOMAIN_USER);
											postBulkOperationData(url, json, undefined, undefined, function()
											{

												// hide modal after 3 secs
												setTimeout(function()
												{
													companies_csv_modal.modal('hide');
												}, 3000);

												// Uncheck contacts table and
												// hide bulk actions button.
												$('body').find('#bulk-actions').css('display', 'none');
												$('body').find('#bulk-select').css('display', 'none');
												$('table#companies,table#contacts-table').find('.thead_check').removeAttr('checked');
												$('table#companies,table#contacts-table').find('.tbody_check').removeAttr('checked');

											}, "no_noty");
										});
						});
				}, null);
			},


select_contacts :  function(e)
			{
				e.preventDefault();
				SELECT_ALL = true;
				_BULK_CONTACTS = window.location.hash;
				
				var html = '';
				
				var resultCount = getAvailableContacts();
				var limitValue = 10000;

				if(company_util.isCompany()){
					if(localStorage.getItem("dynamic_company_filter") != null || localStorage.getItem("company_filter") != null){				
						if(resultCount > limitValue){
							resultCount = limitValue + "+";
						}
					}
					html = ' Selected All ' + resultCount + ' companies. <a hrer="#" id="select-all-revert" class="c-p text-info">Select chosen companies only</a>';
				}else{
					if(localStorage.getItem("dynamic_contact_filter") != null || localStorage.getItem("contact_filter") != null){				
						if(resultCount > limitValue){
							resultCount = limitValue + "+";
						}
					}
					html = ' Selected All ' + resultCount + ' contacts. <a hrer="#" id="select-all-revert" class="c-p text-info">Select chosen contacts only</a>';
				}
				
				$('body')
						.find('#bulk-select')
						.css('display', 'inline-block')
						.html(html);

				// On choosing select all option, all the visible
				// checkboxes in the table should be checked
				$.each($('.tbody_check'), function(index, element)
				{
					$(element).attr('checked', "checked");
				});
			},

};


function show_bulk_owner_change_page()
	{
		var filter, id_array = [];
		if (SELECT_ALL == true)
			filter = getSelectionCriteria();
		else
			id_array = get_contacts_bulk_ids();

		// Yes callback
		// Bind a custom event to trigger on loading the form
		$("body").off('fill_owners').on("fill_owners", function(event)
		{
			var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
			fillSelect('ownerBulkSelect', '/core/api/users/partial', 'domainUsers', 'no-callback ', optionsTemplate);
		});

		// Navigate to show form
		if(company_util.isCompany())
			Backbone.history.navigate("company-bulk-owner", { trigger : true });
		else
			Backbone.history.navigate("bulk-owner", { trigger : true });

		/**
		 * Changes the owner by sending the new owner name as path parameter and
		 * contact ids as form data of post request
		 */
		$("#changeOwnerToBulk").click(function(e)
		{
			e.preventDefault();

			var $form = $('#ownerBulkForm');

			// Button Disabled or Validate Form failed
			if ($(this).attr('disabled') == 'disabled' || !isValidForm($form))
			{
				return;
			}

			var saveButton = $(this);

			disable_save_button(saveButton);
			// Show loading symbol until model get saved
			// $('#ownerBulkForm').find('span.save-status').html(getRandomLoadingImg());

			var url;

			var new_owner = $('#ownerBulkSelect option:selected').prop('value');
			url = '/core/api/bulk/update?action_type=CHANGE_OWNER&owner=' + new_owner;
			var json = {};
			json.contact_ids = id_array;
			postBulkOperationData(url, json, $form, undefined, function(data)
			{
				enable_save_button(saveButton);
			}, 'Contacts owner change scheduled')
		});

	}

	function show_bulk_campaign_assign_page()
	{

		load_bulk_operations_template(function(){

			var id_array = [];
			var filter;
			if (SELECT_ALL == true)
				filter = getSelectionCriteria();
			else
				id_array = get_contacts_bulk_ids();

			console.log(filter);

	        $("body").off('fill_campaigns').on("fill_campaigns", function(event)
			{
				var optionsTemplate = "<option value='{{id}}'{{#if is_disabled}}disabled=disabled>{{name}} (Disabled){{else}}>{{name}}{{/if}}</option>";
 				fillSelect('campaignBulkSelect', '/core/api/workflows', 'workflow', 'no-callback ', optionsTemplate);
			});

			// Navigate to show form
			Backbone.history.navigate("bulk-campaigns", { trigger : true });

			/**
			 * Subscribes the selected contacts to a campaign by sending the
			 * workflow id and selected contacts' ids.
			 */
			$("#addBulkTocampaign").click(function(e)
			{
				e.preventDefault();

				var $form = $('#campaignsBulkForm');

				// Button Disabled or Validate Form Failed
				if ($(this).attr('disabled') == 'disabled' || !isValidForm($form))
				{
					return;
				}

				var saveButton = $(this);

				disable_save_button(saveButton);
				// Show loading symbol until model get saved
				// $('#campaignsBulkForm').find('span.save-status').html(getRandomLoadingImg());

				var workflow_id = $('#campaignBulkSelect option:selected').prop('value');
				var url = '/core/api/bulk/update?workflow_id=' + workflow_id + "&action_type=ASIGN_WORKFLOW";

				var json = {};
				json.contact_ids = id_array;
				postBulkOperationData(url, json, $form, undefined, function(data)
				{
					enable_save_button(saveButton);
				}, 'Campaign assigning scheduled');
			});
		});
		
	}

	function show_add_tag_bulkaction_form()
	{
		var id_array = get_contacts_bulk_ids();

		// var tags = get_tags('tagsBulkForm');

		 if (company_util.isCompany()) {
        Backbone.history.navigate("company-bulk-tags", {
            trigger: true
        })
    } else {

		Backbone.history.navigate("bulk-tags", { trigger : true });
	}

		setup_tags_typeahead();

	/*	$('#addBulkTags')
				.on(
						"focusout",
						function(e)
						{
							e.preventDefault();
							var tag_input = $(this).val().trim();
							$(this).val("");
							if (tag_input && tag_input.length >= 0 && !(/^\s*$/).test(tag_input))
							{
								$('#addBulkTags')
										.closest(".control-group")
										.find('ul.tags')
										.append(
												'<li class="tag" style="display: inline-block;" data="' + tag_input + '">' + tag_input + '<a class="close" id="remove_tag" tag="' + tag_input + '">&times</a></li>');
							}

						});  */
		/**
		 * Add the tags to the selected contacts by sending the contact ids and
		 * tags through post request to the appropriate url
		 */
		 $("#addTagsToContactsBulk").click(function(e)
		{
			e.preventDefault();

			var tags = get_tags('tagsBulkForm');

			// To add input field value as tags
			var tag_input = $('#addBulkTags').val().trim();
			$('#addBulkTags').val("");
			
			if(tag_input && tag_input.length>=0 && !(/^\s*$/).test(tag_input))
			{
				var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{name}}">{{name}}<a class="close" id="remove_tag" tag="{{name}}">&times</a></li>');
			 	// Adds contact name to tags ul as li element
			 	$('#addBulkTags').closest(".control-group").find('ul.tags').append(template({name : tag_input}));
			}	
			
			if(tag_input != "")
				tags[0].value.push(tag_input);

			if (tags[0].value.length > 0)
			{
				var tags_valid = true;
				$.each(tags[0].value, function(index, value)
					{
						if(!isValidTag(value, false)) {
							tags_valid = false;
							return false;
						}
					});
				if(!tags_valid) {
					$('.invalid-tags').show().delay(6000).hide(1);
					return false;
				}
				// Show loading symbol until model get saved
				var saveButton=$(this);

				disable_save_button(saveButton);
				
				//$('#tagsBulkForm').find('span.save-status').html(getRandomLoadingImg());

				var url = '/core/api/bulk/update?action_type=ADD_TAG';
				var json = {};
				json.data = JSON.stringify(tags[0].value);
				json.contact_ids = id_array;

				acl_util.canAddTag(json.data,function(result){
					postBulkOperationData(url, json, $('#tagsBulkForm'), undefined, function(data)
							{
								enable_save_button(saveButton);
								// Add the added tags to the collection of tags
								$.each(tags[0].value, function(index, tag)
								{
									tagsCollection.add({ "tag" : tag });
								});
							}, 'Tags add scheduled');
				}, function(error){
					enable_save_button(saveButton);
				});
			}
			else 
			{
				$('#addBulkTags').focus();
				$('.error-tags').show().delay(3000).hide(1);
				return;
			}
		});
	}

	function show_remove_tag_bulkaction_form()
	{
		var id_array = get_contacts_bulk_ids();

		// var tags = get_tags('tagsBulkForm');
		 if (company_util.isCompany()) {
        Backbone.history.navigate("company-bulk-tags-remove", {
            trigger: true
        })
    } else {

		Backbone.history.navigate("bulk-tags-remove", { trigger : true });
	}

		setup_tags_typeahead();

	/**	$('#removeBulkTags')
				.on(
						"focusout",
						function(e)
						{
							e.preventDefault();
							var tag_input = $(this).val().trim();
							$(this).val("");
							if (tag_input && tag_input.length >= 0 && !(/^\s*$/).test(tag_input))
							{
								$(this)
										.closest(".control-group")
										.find('ul.tags')
										.append(
												'<li class="tag" style="display: inline-block;" data="' + tag_input + '">' + tag_input + '<a class="close" id="remove_tag" tag="' + tag_input + '">&times</a></li>');
							}

						});
		
		 * Add the tags to the selected contacts by sending the contact ids and
		 * tags through post request to the appropriate url
		 */
		$("#removeTagsToContactsBulk").click(function(e)
						{
							e.preventDefault();

							var tags = get_tags('tagsRemoveBulkForm');

							// To add input field value as tags
							var tag_input = $('#removeBulkTags').val().trim();
							$('#removeBulkTags').val("");

							if (tag_input && tag_input.length >= 0 && !(/^\s*$/).test(tag_input))
							{
								var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{name}}">{{name}}<a class="close" id="remove_tag" tag="{{name}}">&times</a></li>');
							 	// Adds contact name to tags ul as li element
							 	$('#removeBulkTags').closest(".control-group").find('ul.tags').append(template({name : tag_input}));
								
							}

							// $('#addBulkTags').closest(".control-group").find('ul.tags').append('<li
							// class="tag" style="display: inline-block;"
							// data="'+tag_input+'">'+tag_input+'<a
							// class="close" id="remove_tag"
							// tag="'+tag_input+'">&times</a></li>');

							if (tag_input != "")
								tags[0].value.push(tag_input);

							if (tags[0].value.length > 0)
							{
								// Show loading symbol until model get saved
								var saveButton = $(this);

								disable_save_button(saveButton);

								// $('#tagsBulkForm').find('span.save-status').html(getRandomLoadingImg());

								var url = '/core/api/bulk/update?action_type=REMOVE_TAG';
								var json = {};
								json.data = JSON.stringify(tags[0].value);
								json.contact_ids = id_array;

								postBulkOperationData(url, json, $('#tagsRemoveBulkForm'), undefined, function(data)
								{
									enable_save_button(saveButton);
									// Add the added tags to the collection of
									// tags
									$.each(tags[0].value, function(index, tag)
									{
										tagsCollection.add({ "tag" : tag });
									});
								}, 'Tags delete scheduled');
							}
							else
							{
								$('#removeBulkTags').focus();
								$('.error-tags').show().delay(3000).hide(1);
								return;
							}
						});
	}


	function show_bulk_email_form(id_array)
	{
		var count = 0;

		// Selected Contact ids
		if(id_array && id_array.length == 0)
		id_array = get_contacts_bulk_ids();

        $("body").off('fill_emails').on("fill_emails", function(event)
		{

			var $emailForm = $('#emailForm');

			// Populate from address and templates
			populate_send_email_details();

			// Setup HTML Editor
			setupTinyMCEEditor('textarea#email-body', false, undefined, function()
			{

				// Reset tinymce content
				set_tinymce_content('email-body', '');
			});

			// when SELECT_ALL is true i.e., all contacts are selected.
			if (id_array.length === 0)
				count = getAvailableContacts();
			else
				count = id_array.length;

			// Shows selected contacts count in Send-email page.
			$emailForm.find('div#bulk-count').css('display', 'inline-block');
			
			if(company_util.isCompany())
				$emailForm.find('div#bulk-count p').html("Selected <b>" + count + " Companie(s)</b> for sending email.");
			else
				$emailForm.find('div#bulk-count p').html("Selected <b>" + count + " Contact(s)</b> for sending email.");

			// Hide to,cc and bcc
			$emailForm.find('input[name="to"]').closest('.control-group').attr('class', 'hidden');
			$emailForm.find('a#cc-link').closest('.control-group').attr('class', 'hidden');

			// Change ids of Send and Close button, to avoid normal send-email
			// actions.
			$emailForm.find('.form-actions a#sendEmail').removeAttr('id').attr('id', 'bulk-send-email');
			$emailForm.find('.form-actions a#send-email-close').removeAttr('id');

		});

		if(company_util.isCompany())
			Backbone.history.navigate("company-bulk-email", { trigger : true });
		else
			Backbone.history.navigate("bulk-email", { trigger : true });

		$("body #bulk-send-email").off("click");
		$("#bulk-send-email").click(function(e)
		{
			e.preventDefault();

			if ($(this).attr('disabled'))
				return;

			var $form = $('#emailForm');

			// Is valid
			if (!isValidForm($form))
				return;

			// Disables send button and change text to Sending...
			disable_send_button($(this));

			// Saves tinymce content to textarea
			save_content_to_textarea('email-body');

			// serialize form.
			var form_json = serializeForm("emailForm");

			var url = '/core/api/bulk/update?action_type=SEND_EMAIL';

			var json = {};
			json.contact_ids = id_array;
			json.data = JSON.stringify(form_json);
			
			var msg = "Emails have been queued for " + count + " contacts. They will be sent shortly.";
			if(company_util.isCompany())
				msg = "Emails have been queued for " + count + " companies. They will be sent shortly.";

			postBulkOperationData(url, json, $form, null, function()
			{
				enable_send_button($('#bulk-send-email'));
			}, msg);
		});
	}

/**
 * Gets an array of contact ids to perform bulk operations
 * 
 * @method get_contacts_bulk_ids
 * @returns {Array} id_array of contact ids
 */
function get_contacts_bulk_ids()
{
	var id_array = [];
	if (SELECT_ALL == true)
		return id_array;

	var table = $('body').find('.showCheckboxes');

	if ($(".grid-view").length != 0)
	{
		$(table).find('.tbody_check').each(function(index, element)
		{
			// If element is checked add store it's id in an array
			if ($(element).is(':checked'))
			{
				id_array.push($(element).parent().parent().parent('div').attr('id'));
			}
		});

		return id_array;
	}

	$(table).find('tr .tbody_check').each(function(index, element)
	{

		// If element is checked add store it's id in an array
		if ($(element).is(':checked'))
		{
			id_array.push($(element).closest('tr').data().get('id'));
		}
	});
	return id_array;
}

/**
 * Shows bulk actions drop down menu (of contacts table) only when any of the
 * check box is enabled.
 * 
 * @method toggle_contacts_bulk_actions_dropdown
 * @param {Object}
 *            clicked_ele clicked check-box element
 */
function toggle_contacts_bulk_actions_dropdown(clicked_ele, isBulk, isCampaign)
{
	SELECT_ALL = false;
	_BULK_CONTACTS = undefined;

	// For Active Subscribers table
	if (isCampaign === "active-campaign")
	{
		toggle_active_contacts_bulk_actions_dropdown(clicked_ele, isBulk);
		return;
	}

	var total_available_contacts = getAvailableContacts();

	console.log(_agile_get_prefs('contact_filter'));
	$('body').find('#bulk-select').css('display', 'none')
	if ($(clicked_ele).is(':checked'))
	{
		<!--$('body').find('#bulk-actions').css('display', 'inline-block');-->


		var resultCount = 0;
		var appCount = 0;
		var limitValue = 10000;		

		if(company_util.isCompany()){
			$("#bulk-action-btns button").removeClass("disabled");
			resultCount = App_Companies.companiesListView.collection.length;
			appCount = total_available_contacts;

			if (isBulk && appCount != resultCount){
				if(localStorage.getItem("dynamic_company_filter") != null || localStorage.getItem("company_filter") != null){				
					if(resultCount > limitValue){
						resultCount = limitValue + "+";
					}

					if(appCount > limitValue){
						appCount = limitValue + "+";
					}
				}

				$('body').find('#bulk-select').css('display', 'block')
				.html("Selected " + resultCount + " companies. <a id='select-all-available-contacts' class='c-p text-info' href='#'>Select all " + appCount + " companies</a>");
				$('#bulk-select').css("display","block");
			}
		}else{
			$("#bulk-action-btns button").removeClass("disabled");
			resultCount = App_Contacts.contactsListView.collection.length;
			appCount = total_available_contacts;

			if (isBulk && total_available_contacts != resultCount){
				if(localStorage.getItem("dynamic_contact_filter") != null || localStorage.getItem("contact_filter") != null){	
					if(resultCount > limitValue){
						resultCount = limitValue + "+";
					}

					if(appCount > limitValue){
						appCount = limitValue + "+";
					}
				}

				$('body').find('#bulk-select').css('display', 'block')
				.html("Selected " + resultCount + " contacts. <a id='select-all-available-contacts' class='c-p text-info' href='#'>Select all " + appCount + " contacts</a>");
				$('#bulk-select').css("display","block");
			}			
		}
		
	}
	else
	{
		if (isBulk)
		{
			if(company_util.isCompany())
			{
				$("#bulk-action-btns button").addClass("disabled");
				$("#companiesTabelView").removeClass("disabled");
			}
			else
			{
				$("#bulk-action-btns button").addClass("disabled");
				$("#contactTabelView").removeClass("disabled");
			}
				
			return;
		}

		var check_count = 0
		$.each($('.tbody_check'), function(index, element)
		{
			if ($(element).is(':checked'))
			{
				check_count++;
				return false;
			}
			// return;
		});

		if (check_count == 0)
		{
			
				$("#bulk-action-btns button").addClass("disabled");
		}
	}
}

/**
 * Returns number of available contacts, which is read from count field in first
 * contact in the collection. If count variable in not available in first
 * contact then collection length is returned
 * 
 * @returns
 */
function getAvailableContacts()
{
		if (company_util.isCompany() && App_Companies.companiesListView.collection.toJSON()[0] && App_Companies.companiesListView.collection.toJSON()[0].count)
		{
			//
			current_view_contacts_count = App_Companies.companiesListView.collection.toJSON()[0].count;
			return current_view_contacts_count;
		} else if (App_Contacts.contactsListView.collection.toJSON()[0] && App_Contacts.contactsListView.collection.toJSON()[0].count)
		{
			//
			current_view_contacts_count = App_Contacts.contactsListView.collection.toJSON()[0].count;
			return current_view_contacts_count;
		}
	 
	return App_Contacts.contactsListView.collection.toJSON().length;
}

/**
 * Returns selection criteria. Reads filter cookie, if filter cookie is not
 * available, it returns window hash(to check whether tag filter is applied on
 * it)
 * 
 * @returns
 */
function getSelectionCriteria()
{
	// Reads filter cookie$('.filter-criteria'

	var filter_id = undefined;
	
	if(company_util.isCompany())
		filter_id = $('.filter-criteria', $(App_Companies.companiesListView.el)).attr("_filter");
	else
		filter_id = $('.filter-criteria', $(App_Contacts.contactsListView.el)).attr("_filter");

	if (filter_id && _BULK_CONTACTS == "#contacts")
	{
		return filter_id;
	}
	
	if(_BULK_CONTACTS == "#companies"){
		if(filter_id)
			return filter_id;
		else
			return 'Companies';
	}

	// If filter cookie is not available then it returns either '#contacts' of
	// '#tags/{tag}' according to current window hash
	if (_BULK_CONTACTS)
	{
		return _BULK_CONTACTS;
	}
}

/**
 * Posts filter id. It takes url to post, the data
 * 
 * @param url
 * @param data
 * @param form
 * @param contentType
 * @param callback
 */
function postBulkOperationData(url, data, form, contentType, callback, error_message)
{
	var count = data.contact_ids.length;
	var dynamic_filter = getDynamicFilters();
	if (dynamic_filter != null)
	{
		data.dynamic_filter = dynamic_filter;
	}
	if (data.contact_ids && data.contact_ids.length == 0)
	{
		console.log(data.contact_ids);
		console.log(getSelectionCriteria());
		if (dynamic_filter == null)
		{
			url = url + "&filter=" + encodeURIComponent(getSelectionCriteria());
		}
		console.log(url);
	}
	else
		data.contact_ids = JSON.stringify(data.contact_ids);

	data.tracker = Math.floor(Math.random() * (10000 - 1)) + 1;
	contentType = contentType != undefined ? contentType : "application/x-www-form-urlencoded";
	
	// Ajax request to post data
	$.ajax({ url : url, type : 'POST', data : data, contentType : contentType, success : function(data)
	{

		$save_info = $('<div style="display:inline-block"><small><p class="text-success"><i>Task Scheduled.</i></p></small></div>');

		if (form !== undefined)
		{
			var save_msg = $(form).find('.form-actions');

			if (save_msg.find('.text-success'))
				save_msg.find('.text-success').parent().parent().remove(); // erase
																			// previous
																			// message.

			save_msg.append($save_info);
		}

		if (callback && typeof (callback) === "function")
			callback(data);

		if(!company_util.isCompany())
			// On save back to contacts list
			Backbone.history.navigate("contacts", { trigger : true });
		else
			Backbone.history.navigate("companies", { trigger : true });

		// If no_noty is given as error message, neglect noty
		if (error_message === "no_noty")
			return;

		if (!error_message)
		{
			showNotyPopUp('information', "Task scheduled", "top", 5000);
			return;
		}
		if(count > 20 || count == 0)
			showNotyPopUp('information', error_message, "top", 5000);
	} });
}

function getDynamicFilters()
{
	var dynamic_filter = null;
	
	if (company_util.isCompany())
	{
		if(!App_Companies.companiesListView || !App_Companies.companiesListView.post_data)
		{
			return null;
		}
		
		dynamic_filter = App_Companies.companiesListView.post_data.filterJson;
	}
	else
	{
		if(!App_Contacts.contactsListView || !App_Contacts.contactsListView.post_data)
		{
			return null;
		}
		
		dynamic_filter = App_Contacts.contactsListView.post_data.filterJson;;
	}

	if (!dynamic_filter || dynamic_filter == null)
	{
		return null;
	}
	else
	{
		if (JSON.parse(dynamic_filter).rules.length > 0)
		{
			return dynamic_filter;
		}
		else
		{
			return null;
		}
	}
}

function bulkOperationContactsCount()
{
	if (SELECT_ALL == true)
	{
		return getAvailableContacts();
	}

	else
	{
		var id_array = get_contacts_bulk_ids();
		return id_array.length;
	}
}

/**
 * Limit on free user bulk operations
 */
function has_more_than_limit()
{
	if (bulkOperationContactsCount() > 25)
		return true;

	return false;
}


function load_bulk_operations_template(callback){

	getTemplate("bulk-actions-company-owner", {}, undefined, function(template_ui){
				if(callback)
				   callback();

	}, null);

}
/**
 * table-checkboxes.js Prepends check-boxes to each row of desired tables (which are 
 * having showCheckboxes class), in order to perform bulk operations (Delete, Change owner etc..)
 * 
 * @module Bulk operations
 * ---------------------------------------------
 * author: Rammohan
 *  
 */
$(function(){	
	
   /**
    * Custom event to add check-boxes to specified tables
    * Prepends check-boxes to the tables which are having the class showCheckboxes, 
    * by triggering the event agile_collection_loaded from base-collection render event, while loading the collection.
    */ 	
	$('body').on('agile_collection_loaded', function(event, el) {
		//use class ignore-collection if any other table needs to be used inside the template.
		var table_element = $('table:not(.ignore-collection)', el);
		
		  // Adds class to tbody to edit the table by validating the route attribute 
		if($(table_element).find('tbody').attr('route'))
			$(table_element).find('tbody').addClass('agile-edit-row');
		
		if($(table_element).hasClass('onlySorting'))
		{	
		    sort_tables(table_element);
		    return;
		}
		
		/*if($('.grid-view', el).hasClass('showCheckboxes'))
		{
			if($(this).find('#delete-checked-grid').length == 0)
					var element = $('.showCheckboxes').after('<div class="row"><div class="span6 select-none"></div></div><a href="#" class="btn btn-danger left" id="delete-checked-grid" style="margin-bottom: 15px"> Delete</a>');		
			console.log(element);
			return;
		}*/
		
		
		var table = $(el).find('table.showCheckboxes');
		$(table).removeClass('table-bordered');
		$(table).closest('div.data-block').removeClass('data-block');
		
	
		//$(table).setAttribute('id', 'sort-table');

		var table_body_row = $(table).find('tbody tr');
		var table_header_row = $(table).find('thead tr');

		var table_headers = $(table_header_row).find('.thead_check');
		var table_cell = $(table_body_row).find('.tbody_check');

		
		// Remove, if rendere of a collection is called multiple times 
		if(table_headers.length == 0)
			$(table_header_row).prepend('<th style="width:5%;"><label class="i-checks i-checks-sm m-b-none"><input type="checkbox" class="thead_check" value=""><i></i></label></th>');
		
		if(table_cell.length == 0)
			$(table_body_row).prepend('<td class="v-middle checkbox" style="cursor:default;"><label class="i-checks i-checks-sm"><input type="checkbox" class="tbody_check" value=""><i></i></label></td>');	  
		
		$(el).find('#delete-checked').remove();
		
		if(!$(table_element).hasClass('noDelete')){
			
			$(table).after('<div><div class="select-none"></div></div><footer class="panel-footer"><a href="#" class="btn btn-danger btn-sm" id="delete-checked"> Delete</a></footer>');
			
		}
			
		if($(table_element).hasClass('no-sorting'))
		{	
		    console.log(table_element);
		    return;
		}

		// Sorts the tables based on their column values
		sort_tables(table_element);
	});

   /**
    * Select all - Enables/Disables all check-boxes of table body when table head check-box is clicked 
    * Changes the checking status of table body check-boxes according to 
    * the status of table head check-box
    */	
	$('body').on('click', '.thead_check', function(event){
		console.log( $(this).is(':checked'));
		if(!$(this).is(':checked'))
		{
			$('.tbody_check').prop('checked',false);
			
			if (Current_Route == 'deals')
				deal_bulk_actions.toggle_deals_bulk_actions_dropdown(undefined, true,$(this).parents('table').attr('id'));
			else if(Current_Route == 'users')			
				toggle_admin_user_bulk_actions_delete(this, true,$(this).parents('table').attr('id'));
			else
				toggle_contacts_bulk_actions_dropdown(undefined, true,$(this).parents('table').attr('id'));
			
		}
		else{
			$('.tbody_check').prop('checked',true);		
			$("#bulk-action-btns button").removeClass("disabled");
		}
		console.log($(this).is(':checked'));
		
		// Show bulk operations only when thead check box is checked
		if (Current_Route == 'deals')
			deal_bulk_actions.toggle_deals_bulk_actions_dropdown(this, true,$(this).parents('table').attr('id'));
		else if(Current_Route == 'users')			
				toggle_admin_user_bulk_actions_delete(this, true,$(this).parents('table').attr('id'));		

		else
			toggle_contacts_bulk_actions_dropdown(this, true,$(this).parents('table').attr('id'));
		
	});
	
   /**
    * Stops the propagation of default functionality (editing the entity) of parent to the check-box (tr)
    * and shows the bulk-actions drop down of contacts only when 
    * there is at least one check-box checked.
    */	
	$('body').on('click', '.tbody_check', function(event){
		event.stopPropagation();
		if (Current_Route == 'dashboards')
		{
			return;
		}

		if (Current_Route == 'deals')
			deal_bulk_actions.toggle_deals_bulk_actions_dropdown(this,false,$(this).parents('table').attr("id"));
		/*else if(Current_Route=='contacts' && _agile_get_prefs("agile_contact_view"))
			toggle_contacts_bulk_actions_dropdown(this,true,$(this).parents('table').attr("id"));*/
		else if(Current_Route == 'users')			
				toggle_admin_user_bulk_actions_delete(this, true,$(this).parents('table').attr('id'));
		else
			toggle_contacts_bulk_actions_dropdown(this,false,$(this).parents('table').attr("id"));
	});
});

function append_checkboxes(el)
{
	var checkbox_element = $('tr:last > td.select_checkbox', el);
	if(checkbox_element.length != 0)
	{
		if(SELECT_ALL == true || (Current_Route == 'deals' && SELECT_ALL_DEALS==true) || SUBSCRIBERS_SELECT_ALL == true)
		$('.tbody_check', checkbox_element).attr('checked', 'checked');
		
		return;
	}

	// If select all is chosen then all the upcomming models with in table should have checked checkboxes
	if(SELECT_ALL == true || (Current_Route == 'deals' && SELECT_ALL_DEALS==true) || SUBSCRIBERS_SELECT_ALL == true)
	{
		$('tr:last', el).prepend('<td><label class="i-checks i-checks-sm"><input class="tbody_check" type="checkbox" checked="checked"/><i></i></label></td>');
		var grid_view_element = $(".grid-view-checkbox", el);
		  if(grid_view_element.length != 0)
		      grid_view_element.prop("checked", "checked");
	}	

	else
		$('tr:last', el).prepend('<td><label class="i-checks i-checks-sm"><input class="tbody_check" type="checkbox"/><i></i></label></td>');	
}/**
 * Handles the click event of any row of any table (whose 'tbody' has the class
 * 'agile-edit-row').
 * 
 * The class 'agile-edit-row' is added to the tbody (in the custom event
 * 'agile_collection_loaded', which is triggered while loading the collection),
 * when only the tbody has an attribute 'route' (specifies the path where to
 * navigate on clicking the row)
 * 
 */

// For scrolling to recently edited contact in the list
var SCROLL_POSITION;

$(function() {

	$("body").on('click', '.agile-edit-row > tr > td:not(":first-child")',
			function(e) {
		e.preventDefault();
		
		var route = $(this).parents('.agile-edit-row').attr('route');
		if (route != "task/"){
			// Newly added code for displaying contacts and companies in same table with different routes.
			if($(this).closest('tr').find('[route]').length != 0)
				route = $(this).closest('tr').find('[route]').attr('route');
			
			var data = $(this).closest('tr').find('.data').attr('data');

		// Open route in seperate window with CTRL + CLICK
		if ((e.ctrlKey || e.metaKey) && (route != "workflow/" && route !=
			"webrule-edit/" && route != "user-edit/" && route != "ticket-group/")) {
            window.open("#" + route + data, '_blank');
            return;
        } 

		if(route == "contact/" || route == "company/")
			SCROLL_POSITION = window.pageYOffset;

					if (route == "contact/")
						SCROLL_POSITION = window.pageYOffset;

					console.log(data);

					if (data) {
						Backbone.history.navigate(route + data, {
							trigger : true
						});
					}
			}
			});
});
/**
 * Sorts the table based on its column values. For each table the sort_tables
 * function is called from the custom event 'agile_collection_loaded', which is
 * triggered form base-collection render function.
 * 
 * When the table is loaded, it is in its default order and no arrow marks
 * appeared at column headings. When the mouse is hovered on any heading of the
 * column an arrow mark (bright color) will be shown to indicate that the table
 * can be sorted on that column values. When the heading is clicked, the table
 * will get sorted on that particular column values and a permanent arrow mark
 * (shaded color) will be shown to indicate, the table is sorted on that
 * particular column values (up-arrow -> ascending order, down-arrow ->
 * descending order)
 * 
 * @method sort_tables
 * @param {Object}
 *            table as html object
 */
function sort_tables(table) {
	
	// head.js(LIB_PATH + "lib/jquery.tablesorter.min.js", function() {

	    // add parser through the tablesorter addParser method to sort tasks based on priority
	    $.tablesorter.addParser({ 
	        // set a unique id 
	        id: 'priority', 
	        is: function(s) { 
	            // return false so this parser is not auto detected 
	            return false; 
	        }, 
	        format: function(s) { 
	            // format your data for normalization 
	            return s.toLowerCase().replace(/high/,2).replace(/normal/,1).replace(/low/,0); 
	        }, 
	        // set type, either numeric or text 
	        type: 'numeric' 
	    }); 
	    
	    // add parser through the tablesorter addParser method to sort based on date
	    $.tablesorter.addParser({ 
	        // set a unique id 
	        id: 'time-ago', 
	        is: function(s) { 
	            // return false so this parser is not auto detected 
	            return false; 
	        }, 
	        format: function(s, table, cell, cellIndex) { 
	        	// format your data for normalization
	        	var time = cell.getElementsByTagName("time");
	        	if(time)
	              return $(time).attr("value"); 
	        }, 
	        // set type, either numeric or text 
	        type: 'numeric' 
	    });
	    
	    // add parser through the tablesorter addParser method to sort deal based on value
	    $.tablesorter.addParser({ 
	        // set a unique id 
	        id: 'money', 
	        is: function(s) { 
	            // return false so this parser is not auto detected 
	            return false; 
	        }, 
	        format: function(s, table, cell) { 
	            // format your data for normalization 
	            return cell.getAttribute("value"); 
	        }, 
	        // set type, either numeric or text 
	        type: 'numeric' 
	    }); 
	 
		
	    var table_id = $(table).attr('id');
	    if(table_id == 'deal-list')
	    	{
	    		sort_deals(table);
	    		return;
	    	}
/*	    if(table_id == "task-list")
	    	{
	    		sort_tasks(table);
	    		return;
	    	}*/
	    if(table_id == "document-list")
    	{
    		sort_documents(table);
    		return;
    	}
	    if(table_id == "case-list")
    	{
    		sort_cases (table);
    		return;
    	}
	    if(table_id == "schedule-updates")
    	{
    		sort_schedule_updates(table);
    		return;
    	} 
	    if(table_id == "contact-filter-list")
    	{
	    	sort_filters(table);
    		return;
    	}
	    
    	basic_table_sort(table);

	// });
}

function basic_table_sort(table)
{
	   
	$(table).tablesorter({
		// Disable the sorting property to the first column of the table
		// (first colon contains check-boxes)
		// pass the headers argument and assign a object
		headers : {
			0 : {
				// disable it by setting the property sorter to false
				sorter : false
			}
		}
	});
}

function sort_tasks(table)
{
	$(table).tablesorter({ 
        headers: {
        	0 : {sorter : false},
        	1 : {sorter : false},
        	2 : {sorter : 'text'},
        	3 : {sorter : 'text'},
            4: {sorter:'priority'},
			5 : {sorter : 'time-ago'},
			6 : {sorter : false}
        } 
    }); 
}

function sort_deals(table)
{
	$(table).tablesorter({ 
        headers: { 
        	0 : {sorter : false	},
        	1 : {sorter : 'text'},
        	2 : {sorter : false},
        	3 : {sorter : 'money'},
        	4 : {sorter : 'text'},
			5 : {sorter : 'time-ago'},
        	6 : {sorter : false}
        }
    });
}

function sort_documents(table)
{
	$(table).tablesorter({ 
        headers: { 
        	0 : {sorter : false	},
        	1 : {sorter : 'text'},
        	2 : {sorter : false},
			3 : {sorter : 'time-ago'},
			4 : {sorter : false	}
        }
    });
}

function sort_cases(table)
{
	$(table).tablesorter({ 
        headers: { 
        	0 : {sorter : false	},
        	1 : {sorter : false},
        	2 : {sorter : 'text'},
			3 : {sorter : 'time-ago'},
			4 : {sorter : false	},
			5 : {sorter : 'text'}
        }
    });
}

function sort_schedule_updates(table)
{
	$(table).tablesorter({ 
        headers: {
        	0 : {sorter : false},
        	1 : {sorter : 'text'},
        	2 : {sorter : 'text'},
        	3 : {sorter : 'time-ago'},
            4 : {sorter:'text'}			
        } 
    }); 
}

function sort_filters(table)
{
	$(table).tablesorter({ 
        headers: {
        	0 : {sorter : false},
        	1 : {sorter : 'text'},
        	2 : {sorter : false},        	    	
        } 
    }); 
}
/**
 * Case is modelled along the lines of Deals. So functionality and coding style
 * are very similar.
 * 
 * @author Chandan
 */
$(function(){

	$("#casesModal").on("show.bs.modal", function(c) {
        add_custom_fields_to_form({}, function(data)
		{
			var el_custom_fields = show_custom_fields_helper(data["custom_fields"], ["modal"]);
			$("#custom-field-case", $("#casesModal")).html($(el_custom_fields));

			var el = $("#casesForm");

			$('.contact_input', el).each(function(){
				agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), el), contacts_typeahead, undefined, 'type=PERSON');
			});

			$('.company_input', el).each(function(){
				agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), el), contacts_typeahead, undefined, 'type=COMPANY');
			});

		}, "CASE");
    });	

	$('#casesModal, #casesUpdateModal').on("shown.bs.modal", function()
	{
		// Add placeholder and date picker to date custom fields
		$('.date_input').attr("placeholder","Select Date");
    	$('.date_input').datepicker({
			format: CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY
		});

		// Enable the datepicker
		$('#close_date').datepicker({
			format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY
		});
	
	});
	
	$('#casesModal,#casesUpdateModal').on('click', '#cases_validate', function(e) 
	{
		e.preventDefault();

		// To know updated or added cases form names
		var modal_id = $(this).closest('.cases-modal').attr("id");
		var form_id = $(this).closest('.cases-modal').find('form').attr("id");
		var json = serializeForm(form_id);
		savecases(form_id, modal_id, this, json);
	});

});


// show add case modal
function initializeCasesListeners(el){
	
	$('#cases-listners').off();
	// $("#cases-listners #cases-model-list > tr").off('mouseenter');
	$("#cases-listners").on('mouseenter','#cases-model-list > tr', function(){

		var data = $(this).find('.data').attr('data');
		var currentCase = App_Cases.casesCollectionView.collection.get(data);
		var that = this;
		getTemplate('cases-detail-popover', currentCase.toJSON(), undefined, function(template_ui){
	 		if(!template_ui)
	    		return;
	    	var ele = $(template_ui);
			$(that).popover(
					{ "rel" : "popover", "trigger" : "hover", "placement" : 'right', "container" : 'body', "original-title" : currentCase.toJSON().name, "content" : ele,
						"html" : true, });
			$(that).popover('show');
			var $this = $('.popover').find("#cases_detail_popover-div");
      		$this.closest(".popover").addClass("cases_custom_popover");
		}, null);

	});

	/**
	 * On mouse out on the row hides the popover.
	 */
	 $("#cases-listners #cases-model-list > tr").off('mouseleave');
	 $('#cases-listners').on('mouseleave', '#cases-model-list > tr', function()
	{
		$(this).popover('hide');
	});

	$("#cases-listners .cases-add").off('click');
	$('#cases-listners').on('click', '.cases-add', function(e)
	{
		e.preventDefault();
		showCases();
	});

	
	$("#cases-listners #cases-model-list > tr > td:not(':first-child')").off('click');
	$('#cases-listners').on('click', '#cases-model-list > tr > td:not(":first-child")', function(e) 
	{
		e.preventDefault();
		updatecases($(this).closest('tr').data());
	});
}

/**
 * Show cases popup for editing
 * 
 * @param ele
 */
function updatecases(ele)
{	
	$("#casesUpdateModal").html(getTemplate("cases-update-modal", {})).modal("show");
	var value = ele.toJSON();

	add_recent_view(new BaseModel(value));

	var casesForm = $("#casesUpdateForm");
	deserializeForm(value, casesForm);

	// Call setupTypeAhead to get contacts
	agile_type_ahead("contacts-typeahead-input", casesForm, contacts_typeahead);

	add_custom_fields_to_form(value, function(data)
	{
		var el_custom_fields = show_custom_fields_helper(data["custom_fields"], [
			"modal"
		]);
		fill_custom_fields_values_generic($(el_custom_fields), value["custom_data"])
		$("#custom-field-case", casesForm).html(fill_custom_fields_values_generic($(el_custom_fields), value["custom_data"]));

		$('.contact_input', casesForm).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), casesForm), contacts_typeahead, undefined, 'type=PERSON');
		});

		$('.contact_input', casesForm).each(function(){
			var name = $(this).attr("name");
			for (var i = 0; i < value.custom_data.length; ++i)
			{
				if (value.custom_data[i].name == name)
				{
					var valJSON = $.parseJSON(value.custom_data[i].value);
					var referenceContactIds = "";
					$.each(valJSON, function(index, value){
						if(index != valJSON.length-1){
							referenceContactIds += value + ",";
						}else{
							referenceContactIds += value;
						}
					});
					setReferenceContacts(name, casesForm, valJSON, referenceContactIds);
				}
			}
		});

		$('.company_input', casesForm).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), casesForm), contacts_typeahead, undefined, 'type=COMPANY');
		});

		$('.company_input', casesForm).each(function(){
			var name = $(this).attr("name");
			for (var i = 0; i < value.custom_data.length; ++i)
			{
				if (value.custom_data[i].name == name)
				{
					var valJSON = $.parseJSON(value.custom_data[i].value);
					var referenceContactIds = "";
					$.each(valJSON, function(index, value){
						if(index != valJSON.length-1){
							referenceContactIds += value + ",";
						}else{
							referenceContactIds += value;
						}
					});
					setReferenceContacts(name, casesForm, valJSON, referenceContactIds);
				}
			}
		});

	}, "CASE");

	// Fills owner select element
	populateUsers("owners-list", casesForm, value, 'owner', function(data)
	{
		casesForm.find("#owners-list").html(data);
		if (value.owner)
		{
			$("#owners-list", casesForm).find('option[value=' + value['owner'].id + ']').attr("selected", "selected");
		}

	});
}

// Show new cases popup
function showCases()
{

	$("#casesModal").html(getTemplate("cases-new-modal", {}));
	var el = $("#casesForm");

	// Contacts type-ahead
	agile_type_ahead("contacts-typeahead-input", el, contacts_typeahead);

	// Fills owner select element
	populateUsers("owners-list", el, undefined, undefined, function(data)
	{

		$("#casesForm").find("#owners-list").html(data);
		$("#owners-list", $("#casesForm")).find('option[value=' + CURRENT_DOMAIN_USER.id + ']').attr("selected", "selected");
		
	});

	$("#casesModal").modal("show");
}

// Updates or Saves a cases
function savecases(formId, modalId, saveBtn, json)
{
	// Returns, if the save button has disabled attribute
	if ($(saveBtn).attr('disabled'))
		return;

	// Disables save button to prevent multiple click event issues
	disable_save_button($(saveBtn));// $(saveBtn).attr('disabled', 'disabled');

	if (!isValidForm('#' + formId))
	{
		enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled'); //
		// Removes disabled attribute of save
		// button
		return false;
	}

	// Shows loading symbol until model get saved
	// $('#' + modalId).find('span.save-status').html(getRandomLoadingImg());

	var newEntry = false; // test if this model is new, true => new model
	if (json.id === undefined)
		newEntry = true;

	json["custom_data"] = serialize_custom_fields(formId);

	var newcases = new Backbone.Model();
	newcases.url = 'core/api/cases';
	newcases.save(json, { success : function(data)
	{
		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled');

		// $('#' + modalId).find('span.save-status img').remove();
		$('#' + modalId).modal('hide');

		$('#' + formId).each(function()
		{
			this.reset();
		});

		var cases = data.toJSON();

		add_recent_view(new BaseModel(cases));

		// Updates data to timeline
		/* If(Contact-Details) page - then adjust timeline */
		if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
		{
			// Add model to collection. Disabled sort while adding and called
			// sort explicitly, as sort is not working when it is called by add
			// function
			if (casesView && casesView.collection)
			{
				if (casesView.collection.get(cases.id))
				{
					casesView.collection.get(cases.id).set(new BaseModel(cases));
				}
				else
				{
					casesView.collection.add(new BaseModel(cases), { sort : false });
					casesView.collection.sort();
				}
			}

			if (App_Contacts.contactDetailView.model.get('type') == 'COMPANY')
			{
				activate_timeline_tab(); // if this contact is of type
				// COMPANY, simply activate first
				// tab & fill details
				fill_company_related_contacts(App_Contacts.contactDetailView.model.id, 'company-contacts');
				return;
			}
			// / Now Only models which have type 'PERSON' will through below.

			// activate_timeline_tab(); // switch to first tab in Contact-Detail
			// View

			// Verifies whether the added case is related to the contact in
			// contact detail view or not

			/**
			 * Code to add Info of Case to timeline Not Fully Done, it was
			 * directly copied from Deals module.
			 * 
			 * If you wanna add Case to timeline, edit below
			 */
			$.each(cases.contacts, function(index, contact)
			{

				if (contact.id == App_Contacts.contactDetailView.model.get('id'))
				{

					// Activates "Timeline" tab and its tab content in
					// contact detail view
					// activate_timeline_tab();
					add_entity_to_timeline(data);
					/*
					 * If timeline is not defined yet, initiates with the data
					 * else inserts
					 */
					return false;
				}// end if
			}); // end each

			/*
			 * End of Adding data to timeline.
			 */
		}// end if
		/* end-if(Contact-Details) */
		/*
		 * If(Company-Details)
		 */
		else if (company_util.isCompany()) {
			company_util.updateCasesList(cases,true);
		}
		/*end-if(Company-Details) */
		else if (Current_Route == 'cases')
		{
			// On cases page.. adjust current model
			if (newEntry == true)
				App_Cases.casesCollectionView.collection.add(data);
			else
			{
				App_Cases.casesCollectionView.collection.remove(json);
				App_Cases.casesCollectionView.collection.add(data);
			}
			App_Cases.casesCollectionView.render(true);
		}
		else
			App_Calendar.navigate("cases", { trigger : true });
	}, error : function(data, response)
	{
		enable_save_button($(saveBtn));
	} });
}(function(company_util, $, undefined) {
	
	
	company_util.isCompany = function(){
		
		if(App_Companies.companyDetailView && Current_Route == "company/" + App_Companies.companyDetailView.model.get('id'))
			return true;
		if(App_Companies.companies && Current_Route == "companies")
			return true;
		if(Current_Route && Current_Route.indexOf('company')>-1)
			return true;
		
		return false;
	};
	
	company_util.updateDocumentsList = function(document, isCompany){

		// Add model to collection. Disabled sort while adding and called
		// sort explicitly, as sort is not working when it is called by add
		// function
		
		$.each(document.contacts, function(index, contact) {
			
			if (contact.id == App_Companies.companyDetailView.model.get('id'))
			{
				if (documentsView && documentsView.collection)
				{
					if(documentsView.collection.get(document.id))
					{
						documentsView.collection.get(document.id).set(new BaseModel(document));
					}
					else
					{
						documentsView.collection.add(new BaseModel(document), { sort : false });
						documentsView.collection.sort();
					}
				}
				
				return false;
			}
		});
	};
	
	company_util.updateCasesList = function(cases,isCompany){

		// Add model to collection. Disabled sort while adding and called
		// sort explicitly, as sort is not working when it is called by add
		// function
		if (casesView && casesView.collection)
		{
			if(casesView.collection.get(cases.id))
			{
				casesView.collection.get(cases.id).set(new BaseModel(cases));
			}
			else
			{
				casesView.collection.add(new BaseModel(cases), { sort : false });
				casesView.collection.sort();
			}
		}
		
		/*if(App_Companies.companyDetailView.model.get('type')=='COMPANY')
		{
			activate_timeline_tab();  // if this contact is of type COMPANY, simply activate first tab & fill details
			fill_company_related_contacts(App_Companies.companyDetailView.model.id,'company-contacts'); 
			return;
		}*/
	};
	
	company_util.updateDealsList = function(deal,isCompany, isUpdate){
		// Add model to collection. Disabled sort while adding and called
		// sort explicitly, as sort is not working when it is called by add
		// function
		var current = App_Companies.companyDetailView.model.toJSON();

		var owner = deal.owner_id;

	  	if(!owner){
	  		owner = deal.owner.id;
	  	}

		/*
		 * Verifies whether the added deal is related to the contact in
		 * contact detail view or not
		 */
		$.each(deal.contacts, function(index, contact) {
			
			if (contact.id == current.id) {
				
				
				if(hasScope("VIEW_DEALS") || CURRENT_DOMAIN_USER.id == owner){
					if (dealsView && dealsView.collection)
					{
						if(deal.archived == true)
						{
							dealsView.collection.remove(deal.id);
							dealsView.collection.sort();
						}
						else if(dealsView.collection.get(deal.id))
						{
							dealsView.collection.get(deal.id).set(new BaseModel(deal));
							$("#"+deal.id).closest("li").removeAttr("class");
							$("#"+deal.id).closest("li").addClass("deal-color");
							$("#"+deal.id).closest("li").addClass(deal.colorName);

						}
						else
						{
							dealsView.collection.add(new BaseModel(deal), { sort : false });
							dealsView.collection.sort();
						}
					}
				}
				if(!hasScope("VIEW_DEALS") && CURRENT_DOMAIN_USER.id != owner && isUpdate){
					dealsView.collection.remove(deal.id);
					dealsView.collection.sort();
				}
				
				
				return false;
			}
		});
	};
	
	company_util.displayGoogleMap = function(contact){
		
		if(contact == undefined)
			contact = App_Companies.companyDetailView.model.toJSON();

			var address = JSON.parse(getPropertyValue(contact.properties, "address"));
	
			// Gets the location (latitude and longitude) from the address
			var geocoder = new google.maps.Geocoder();
	
			// Latitude and longitude were not saved to the contact (chances to update the address)
			
			if(!address.address)address.address="";
			if(!address.city)address.city="";
			if(!address.state)address.state="";
			if(!address.country)address.country="";
			if(!address.zip)address.zip="";
			
			geocoder.geocode({
				'address' : '"'+ address.city + ', '
				+ address.state + ', ' + getNormalCountryNameFromShortName(address.country) + ', ' + address.zip + '"'
			}, function(results, status) {
				if (status == google.maps.GeocoderStatus.OK) {
					console.log(results);
					displayTimeZone(results);
	
					// Displays map portion
					$("#map").css('display', 'block');
					
					var myOptions = {
						zoom : 4,
						center : results[0].geometry.location,
						mapTypeId : google.maps.MapTypeId.ROADMAP
					}
	
					var map = new google.maps.Map(document.getElementById("map"),
							myOptions);
					
					var marker = new google.maps.Marker({
						map : map,
						position : results[0].geometry.location
					});
				}
			});
	};

	/**
	 * Searches the property fields in current contact with given property name, if
	 * property with given property name exists, then returns its value in a array
	 * 
	 * <p>
	 * This method is used when contact property has multiple values like email,
	 * phone, website etc
	 * </p>
	 * 
	 * @param propertyName
	 *            name of the property
	 * @returns {Array}
	 */
	company_util.agile_crm_get_company_properties_list = function(propertyName)
	{
		// Reads current contact model form the contactDetailView
		var company_model = App_Companies.companyDetailView.model;
	
		// Gets properties list field from contact
		var properties = company_model.get('properties');
		var property_list = [];
	
		/*
		 * Iterates through each property in contact properties and checks for the
		 * match in it for the given property name and retrieves value of the
		 * property if it matches
		 */
		$.each(properties, function(index, property)
		{
			if (property.name == propertyName)
			{
				property_list.push(property);
			}
		});
	
		// If property is defined then return property value list
		return property_list;
	
	};

	company_util.show_map = function(el){
	
		var company = App_Companies.companyDetailView.model.toJSON();
		var address = getPropertyValue(company.properties, "address");
	
		// Return, if no address is found 
		if (!address) 
			return;
		
		try
		{
			address = JSON.parse(address);
		}
		catch (err)
		{
			return;
		}
		
		
	
		// If all the address fields are empty, just return.
		if (!address.address && !address.city && !address.state
				&& !address.country)
			return;
		
		//reads the value from cookie or local store if the value is no it will return from here
		
		var map_view=_agile_get_prefs('MAP_VIEW');
		if(map_view=="disabled"){
			$("#map_view_action",el).html("<i class='icon-plus text-sm c-p' title='Show map' id='enable_map_view'></i>");
			return;
		}
			
	
		// If google map is already loaded display the map else load the
		// "google maps api"
		try {
			if (google.maps) {
				displayGoogleMap(company);
			}
		} catch (err) {
	
			var script = document.createElement("script");
			script.type = "text/javascript";
			script.src = "https://maps.googleapis.com/maps/api/js?&sensor=false&callback=company_util.displayGoogleMap";
			document.body.appendChild(script);
		}
	
	};
	
	company_util.starify = function(el){
	    head.js(LIB_PATH + 'lib/jquery.raty.min.js', function(){
	    	
	    	var company_model  =  App_Companies.companyDetailView.model;
	    	
	    	// If contact update is not allowed then start rating does not allow user to change it
	    	if(App_Companies.companyDetailView.model.get('owner') && !canEditContact(App_Companies.companyDetailView.model.get('owner').id))
	    	{
	    			$('#star', el).raty({
	    			 'readOnly': true,
	    			  score: App_Companies.companyDetailView.model.get('star_value')
	    			 });
	    		 return;
	    	}
	    	
	    	
	    	// Set URL - is this required?
	    	// contact_model.url = 'core/api/contacts';
	    	
	    	$('#star', el).raty({
	    		
	    		/**
	    		 * When a star is clicked, the position of the star is set as star_value of
	    		 * the contact and saved.    
	    		 */
	        	click: function(score, evt) {
	        	   
	        		/*// (commented- reloading as silent:true is not effecting) 
	        		  // alert('ID: ' + $(this).attr('id') + '\nscore: ' + score + '\nevent: ' + evt);
	        		contact_model.set('star_value', score, {silent: true});
	        	
	        		// Save model
	           		contact_model.save();*/
	           		
	        		App_Companies.companyDetailView.model.set({'star_value': score}, {silent : true});
	        		company_model =  App_Companies.companyDetailView.model.toJSON();
	        		var new_model = new Backbone.Model();
	        		new_model.url = 'core/api/contacts';
	        		new_model.save(company_model, {
	        			success: function(model){
	        			}
	        		});
	
	        	},
	        	
	        	/**
	        	 * Highlights the stars based on star_value of the contact
	        	 */
	        	score: company_model.get('star_value')
	            
	        });
	    });
	    
	};

}(window.company_util = window.company_util || {}, $));

/*****Companies List view******/

(function(company_list_view, $, undefined) {
	
	/**
	 * Gets the list of custom fields saved by the user, and shown in the Html
	 * element with "view-list" in the Html element sent to this method. It fetches
	 * the list of custom fields and on rendering the collection unordered list of
	 * created and appended in view-list element in contacts page. If custom view
	 * selected from the list, this function is called with button name from the
	 * customView function, which is set on the list button.
	 * 
	 * @param cel
	 *            html element
	 * @param button_name
	 *            name of the button (name of the view)
	 */
	function setupCompanyViews(cel, button_name) {

		// Creates a view for custom views
		getTemplate("company-view-collection", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
				
			var el = $(template_ui);
			$("#view-list", cel).html(el);
			updateSelectedSortKey($("#view-list", cel));

		}, $("#view-list", cel));
			
	}
	
	var updateSelectedSortKey = function(el) {
		var sort_key = _agile_get_prefs("company_sort_field");
		if(sort_key && sort_key != null) {
			var idSuffix = '-asc';
			if(sort_key.indexOf('-') == 0) {
				sort_key = sort_key.substring(1);
				idSuffix = '-desc'
			}
			var elementId = 'comp-sort-by-'+sort_key+idSuffix;
			$(el).find('#'+elementId).addClass('bold-text');
		}
	};
	
	/**
	 * Sets up contact filters list in contacts list page, also whether cookie is
	 * save with filter name to load filter results instead of all contacts
	 * 
	 * @method setupContactFilterList
	 * @param cel
	 *            Html form element to append filters list,
	 */
	var companyFiltersListView
	var setupCompanyFilterList = function(cel, tag_id)
	{
		if (tag_id)
			$('.filter-criteria', cel)
					.html(
							'<ul id="added-tags-ul" class="tagsinput p-n m-b-sm m-t-sm m-l-sm"><li  class="inline-block tag btn btn-xs btn-primary" data="developer"><span class="m-l-xs pull-left">' + decodeURI(tag_id) + '</span><a class="close default_contact_remove_tag m-l-xs pull-left">&times</a></li></ul>').attr("_filter", tag_id);
							
		setTimeout(function(){
					
			var filter_id = null;
			companyFiltersListView = new Base_Collection_View(
				{
					url : '/core/api/filters?type=COMPANY',
					sort_collection : false,
					restKey : "ContactFilter",
					templateKey : "company-filter-list",
					individual_tag_name : 'li',
					sort_collection : false,
					no_transition_bar : true,
					postRenderCallback : function(el)
					{
						var filter_name;
						// Set saved filter name on dropdown button
						if (filter_name = _agile_get_prefs('company_filter'))
						{
							// If is not system type get the name of the filter from
							// id(from cookie)
								filter_id = filter_name;
								if(companyFiltersListView.collection.get(filter_name))
										filter_name = companyFiltersListView.collection.get(filter_name).toJSON().name;
								

							el.find('.filter-dropdown').append(Handlebars.compile('{{name}}')({name : filter_name}));
						}

						if (!filter_name)
							return;

						var template = Handlebars.compile('<ul id="added-tags-ul" class="tagsinput p-n m-b-sm m-t-sm m-l-sm"><li class="inline-block tag btn btn-xs btn-primary" data="developer"><span class="inline-block m-r-xs v-middle">{{name}}</span><a class="close default_company_filter">&times</a></li></ul>');

					 	// Adds contact name to tags ul as li element
						$('.filter-criteria', cel).html(template({name : filter_name}));
						
						if(filter_id)
							$('.filter-criteria', cel).attr("_filter", filter_id);
						else
							$('.filter-criteria', cel).attr("_filter", filter_name);
							
					} });

				// Fetchs filters
				companyFiltersListView.collection.fetch();
			
				var filter_dropdown_element = companyFiltersListView.render().el;
			
				// Shows in contacts list
				$('#filter-list', cel).html(companyFiltersListView.render().el);
		}, 500);
				
	};
	
	company_list_view.revertToDefaultCompanies = function(){
		// Erase filter cookie. Erases both contact and company filter
		_agile_delete_prefs('company_filter');
		_agile_delete_prefs('dynamic_filter');
	
		if (App_Companies.companiesListView)
			App_Companies.companiesListView = undefined;
		//if (App_Contacts.contact_custom_view)
			//App_Contacts.contact_custom_view = undefined;
	
		// Loads contacts
		App_Companies.companies();
	};
	
	company_list_view.init = function(cel){
		setupCompanyFilterList(cel);
		setupCompanyViews(cel);
	};

}(window.company_list_view = window.company_list_view || {}, $));

/*****Company Details view******/

(function(company_detail_tab, $, undefined) {
	
	company_detail_tab.activateCurrentTab = function(ele){
		$('#contact-tab-content .tab-pane').removeClass('active');
		ele.addClass('active');
	};
	
	/**
	 * Changes, owner of the contact, when an option of change owner drop down
	 * is selected.   
	 */
	company_detail_tab.changeOwner = function(that){
		
		// Reads the owner id from the selected option
		var new_owner_id = that.attr('data');
		var new_owner_name = that.text();
		var current_owner_id = $('#contact-owner').attr('data');
		
		// Returns, if same owner is selected again 
		if(new_owner_id == current_owner_id)
			{
			  // Showing updated owner
			  show_owner();
			  return;
			}
		
		  var contactModel = new BaseModel();
		    contactModel.url = '/core/api/contacts/change-owner/' + new_owner_id + "/" + App_Companies.companyDetailView.model.get('id');
		    contactModel.save(App_Companies.companyDetailView.model.toJSON(), {success: function(model){

		    	// Replaces old owner details with changed one
				$('#contact-owner').text(new_owner_name);
				$('#contact-owner').attr('data', new_owner_id);
				
				// Showing updated owner
				show_owner(); 
				App_Companies.companyDetailView.model = model;
				
		    }});
   	};
	
	// Deletes a contact from database
	company_detail_tab.deleteCurrentCompany = function(){
		
    	showAlertModal("delete_company", "confirm", function(){
    		App_Companies.companyDetailView.model.url = "core/api/contacts/" + App_Companies.companyDetailView.model.id;
			App_Companies.companyDetailView.model.destroy({success: function(model, response) {
				  Backbone.history.navigate("companies",{trigger: true});
			}});
		});
	};
	
	
	company_detail_tab.addTagsToCompany = function(){
		 // Add Tags
		var new_tags = get_new_tags('companyAddTags');
		if(new_tags)new_tags=new_tags.trim();
		
		if(!new_tags || new_tags.length<=0 || (/^\s*$/).test(new_tags))
		{
			console.log(new_tags);
			return;
		}
		if (!isValidTag(new_tags, true)) {
			return;
		}
		$('#add-tags').css("display", "block");
		$("#addTagsForm").css("display", "none");
		console.log(new_tags);
		
		if(new_tags) {
			var json = App_Companies.companyDetailView.model.toJSON();
	    		
	    	
	    	// Reset form
	    	$('#addTagsForm input').each (function(){
   		  	  	$(this).val("");
   		  	});
	    	
	    	// Checks if tag already exists in contact
			if($.inArray(new_tags, json.tags) >= 0)
				return;
			//Check tag acl before adding tag.
			acl_util.canAddTag(new_tags.toString(),function(respnse){
		    	json.tagsWithTime.push({"tag" : new_tags.toString()});
	   			
		    	// Save the contact with added tags
		    	var contact = new Backbone.Model();
		        contact.url = 'core/api/contacts';
		        contact.save(json,{
		       		success: function(data){
		       			
		       			addTagToTimelineDynamically(new_tags, data.get("tagsWithTime"));
		       			
		       			// Get all existing tags of the contact to compare with the added tags
		       			var old_tags = [];
		       			$.each($('#added-tags-ul').children(), function(index, element){
		       				old_tags.push($(element).attr('data'));
	       				});
		       			
		       			// Updates to both model and collection
		       			App_Companies.companyDetailView.model.set(data.toJSON(), {silent : true});
		       			
		       			// Append to the list, when no match is found 
		       			if ($.inArray(new_tags, old_tags) == -1) {

		       				var template = Handlebars.compile('<li  class="tag inline-block btn btn-xs btn-default m-r-xs" style="color:#363f44" data="{{name}}"><span><a class="anchor m-r-xs custom-color" style="color:#363f44" href="#tags/{{name}}" >{{name}}</a><a class="close remove-company-tags" id="{{name}}" tag="{{name}}">&times</a></span></li>');

						 	// Adds contact name to tags ul as li element
							$('#added-tags-ul').append(template({name : new_tags}));
							$.each(data.get("tagsWithTime"), function(e, d) {
        						if (d.tag == new_tags) {
							            $('#added-tags-ul').find("li[data='"+new_tags+"']").attr('title',epochToHumanDate("mmmm dd, yyyy 'at' hh:MM tt",d.createdTime));
							        }
								    }
								    );

		       			}
		       			
		       			console.log(new_tags);
		       			// Adds the added tags (if new) to tags collection
		       			tagsCollection.add(new BaseModel({"tag" : new_tags}));
		       		}
		        });
			});
		}
	};
	
	company_detail_tab.load_company_deals = function ()
	{
		id = App_Companies.companyDetailView.model.id;
		dealsView = new Base_Collection_View({
			url: 'core/api/contacts/'+ id + "/deals" ,
            restKey: "opportunity",
            templateKey: "deals",
            individual_tag_name: 'li',
            sortKey:"created_time",
            descending: true,
            postRenderCallback: function(el) {
            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
            		$(".deal-created-time", el).timeago();
            		$(el).find('ul li').each(function(){
				    $(this).addClass("deal-color");
				    $(this).addClass($(this).find("input").attr("class"));
			        });
            	})
            }
        });
        dealsView.collection.fetch();
        $('#deals', App_Companies.companyDetailView.el).html(dealsView.el);
        company_detail_tab.activateCurrentTab($('#deals'));
        
	};
	company_detail_tab.load_company_cases = function()
	{
		id = App_Companies.companyDetailView.model.id;
		casesView = new Base_Collection_View({
			url: 'core/api/contacts/'+ id + "/cases" ,
            restKey: "cases",
            templateKey: "cases-contact",
            individual_tag_name: 'li',
            sortKey:"created_time",
            descending: true,
            postRenderCallback: function(el) {
            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
            		 $(".deal-created-time", el).timeago();
            	})
            }
        });
		casesView.collection.fetch();
        $('#cases', App_Companies.companyDetailView.el).html(casesView.el);
        company_detail_tab.activateCurrentTab($('#cases'));
	};
	
	company_detail_tab.load_company_notes = function()
	{
	    var id = App_Companies.companyDetailView.model.id;
	    notesView = new Base_Collection_View({
            url: '/core/api/contacts/' + id + "/notes",
            restKey: "note",
            templateKey: "notes",
            individual_tag_name: 'li',
            sortKey:"created_time",
            descending: true,
            postRenderCallback: function(el) {
            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
            		 $(".note-created-time", el).timeago();
              	})
            }
        });
        notesView.collection.fetch();
        $('#notes', App_Companies.companyDetailView.el).html(notesView.render().el);
        company_detail_tab.activateCurrentTab($('#notes'));
	};
	
	company_detail_tab.load_company_documents = function()
	{
		 id = App_Companies.companyDetailView.model.id;
		 documentsView = new Base_Collection_View({
	            url: '/core/api/documents/contact/' + id + "/docs",
	            restKey: "document",
	            templateKey: "contact-documents",
	            individual_tag_name: 'li',
	            sortKey:"uploaded_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".document-created-time", el).timeago();
	              	});
	            
	            }
	        });
		    documentsView.collection.fetch();
	        $('#documents', App_Companies.companyDetailView.el).html(documentsView.render().el);
	        company_detail_tab.activateCurrentTab($('#documents'));
	};
	

}(window.company_detail_tab = window.company_detail_tab || {}, $));

var existingDocumentsView;var comp_addr_prop ; 

// Documents actions
var contact_details_documentandtasks_actions = {

	    // Edit task
        edit_task : function(e){
        	var targetEl = $(e.currentTarget);

        	var id = $(targetEl).attr('data');
			var value = tasksView.collection.get(id).toJSON();

			$("#updateTaskModal").html(getTemplate("task-update-modal")).modal('show');

				loadProgressSlider($("#updateTaskForm"), function(el){

				deserializeForm(value, $("#updateTaskForm"));
				
				$('.update-task-timepicker').val(fillTimePicker(value.due));
				categories.getCategoriesHtml(value,function(catsHtml){
					$('#type',$("#updateTaskForm")).html(catsHtml);
					// Fills owner select element
					populateUsers("owners-list", $("#updateTaskForm"), value, 'taskOwner', function(data)
					{
						$("#updateTaskForm").find("#owners-list").html(data);
						if (value.taskOwner)
							$("#owners-list", $("#updateTaskForm")).find('option[value=' + value['taskOwner'].id + ']').attr("selected", "selected");
			
						$("#owners-list", $("#updateTaskForm")).closest('div').find('.loading-img').hide();
					});
				});

				// Add notes in task modal
				showNoteOnForm("updateTaskForm", value.notes);
			});
			// activateSliderAndTimerToTaskModal();
        },

        // Event edit in contact details tab
        edit_event : function(e){
        	var targetEl = $(e.currentTarget);

        	$("#updateActivityModal").html(getTemplate("update-activity-modal"));
        	
        	var id = $(targetEl).attr('data');
			var value = eventsView.collection.get(id).toJSON();
			deserializeForm(value, $("#updateActivityForm"));
			$('.update-start-timepicker').val(fillTimePicker(value.start));
			$('.update-end-timepicker').val(fillTimePicker(value.end));

			$("#updateActivityModal").modal('show');
			
			if (value.type == "WEB_APPOINTMENT" && parseInt(value.start) > parseInt(new Date().getTime() / 1000))
			{
				$("[id='event_delete']").attr("id", "delete_web_event");
				web_event_title = value.title;
				if (value.contacts.length > 0)
				{
					var firstname = getPropertyValue(value.contacts[0].properties, "first_name");
					if (firstname == undefined)
						firstname = "";
					var lastname = getPropertyValue(value.contacts[0].properties, "last_name");
					if (lastname == undefined)
						lastname = "";
					web_event_contact_name = firstname + " " + lastname;
				}
			}
			else
			{
				$("[id='delete_web_event']").attr("id", "event_delete");
			}
			if (value.description)
			{
				var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
				$("#event_desc").html(description);
				$("textarea#description").val(value.description);
			}
			else
			{
				var desc = '<div class="row-fluid">' + '<div class="control-group form-group m-b-none">' + '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>' + '<div class="controls event_discription hide">' + '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>' + '</div></div></div>'
				$("#event_desc").html(desc);
			}
			// Fills owner select element
			populateUsersInUpdateActivityModal(value);
        },

        complete_task : function(e){
        	var targetEl = $(e.currentTarget);

        	if ($(targetEl).is(':checked'))
			{
				var id = $(targetEl).attr('data');
				var that = targetEl;
				complete_task(id, tasksView.collection, undefined, function(data)
				{
					$(that).parent().siblings(".task-subject").css("text-decoration", "line-through");
					console.log($(that).parents('.activity-text-block').css("background-color", "#FFFAFA"));
					$(that).parent().replaceWith('<span style="margin-right:9px;"><i class="fa fa-check"></i></span>');
					tasksView.collection.add(data, { silent : true });
				});
			}
        },

        // For adding new deal from contact-details
        add_deal : function(e){
        		var targetEl = $(e.currentTarget);

        		var el = $("#opportunityForm");

        		if($('#color1', el).is(':hidden')){

			    	$('.colorPicker-picker', el).remove();

			    	$('#color1', el).colorPicker();
				}

				var colorcode = "#808080";
			    $('#color1' , el).attr('value', colorcode);
			    $('.colorPicker-picker', el).css("background-color", colorcode); 
			    // Disable color input field
			    $('.colorPicker-palette').find('input').attr('disabled', 'disabled');

				$("#opportunityModal").modal('show');

				add_custom_fields_to_form({}, function(data)
				{
					var el_custom_fields = show_custom_fields_helper(data["custom_fields"], [
						"modal"
					]);
					$("#custom-field-deals", $("#opportunityModal")).html($(el_custom_fields));

					$('.contact_input', el).each(function(){
						agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), el), contacts_typeahead, undefined, 'type=PERSON');
					});

					$('.company_input', el).each(function(){
						agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), el), contacts_typeahead, undefined, 'type=COMPANY');
					});

				}, "DEAL");

				// Fills owner select element
				populateUsers("owners-list", el, undefined, undefined, function(data)
				{

					$("#opportunityForm").find("#owners-list").html(data);
					$("#owners-list", $("#opportunityForm")).find('option[value=' + CURRENT_DOMAIN_USER.id + ']').attr("selected", "selected");
					$("#owners-list", $("#opportunityForm")).closest('div').find('.loading-img').hide();
				});
				// Contacts type-ahead
				agile_type_ahead("relates_to", el, contacts_typeahead);

				// Fills the pipelines list in select box.
				populateTrackMilestones(el, undefined, undefined, function(pipelinesList)
				{
					console.log(pipelinesList);
					$.each(pipelinesList, function(index, pipe)
					{
						if (pipe.isDefault)
						{
							var val = pipe.id + '_';
							if (pipe.milestones.length > 0)
							{
								val += pipe.milestones.split(',')[0];
								$('#pipeline_milestone', el).val(val);
								$('#pipeline', el).val(pipe.id);
								$('#milestone', el).val(pipe.milestones.split(',')[0]);
							}

						}
					});
				});

				populateLostReasons(el, undefined);

				populateDealSources(el, undefined);

				// Enable the datepicker

				$('#close_date', el).datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY});


				var json = null;
				if(company_util.isCompany()){
					json = App_Companies.companyDetailView.model.toJSON();
				} else {
					json = App_Contacts.contactDetailView.model.toJSON();
				}
				var contact_name = getContactName(json);

				var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');
  
			 	// Adds contact name to tags ul as li element
			 	$('.tags',el).html(template({name : contact_name, id : json.id}));
        },

       add_case : function(e){
       		var targetEl = $(e.currentTarget);

       		$("#casesModal").html(getTemplate("cases-new-modal", {}));
			var el = $("#casesForm");

			// Fills owner select element
			populateUsers("owners-list", el, undefined, undefined, function(data)
			{

				$("#casesForm").find("#owners-list").html(data);
				$("#owners-list", $("#casesForm")).find('option[value=' + CURRENT_DOMAIN_USER.id + ']').attr("selected", "selected");
				// Contacts type-ahead
				agile_type_ahead("contacts-typeahead-input", el, contacts_typeahead);

				var json = null;
				if(company_util.isCompany()){
					json = App_Companies.companyDetailView.model.toJSON();
				} else {
					json = App_Contacts.contactDetailView.model.toJSON();
				}
				var contact_name = getContactName(json);

				var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');
  
			 	// Adds contact name to tags ul as li element
			 	$('.tags',el).html(template({name : contact_name, id : json.id}));
				$("#casesModal").modal('show');
			});
       },

       add_contact : function(e){
       		// This is a hacky method. ( See jscore/contact-management/modals.js for
			// its use )
			// 'forceCompany' is a global variable. It is used to enforce Company
			// name on Add Contact modal.
			// Prevents user from removing this company from the modal that is
			// shown.
			// Disables typeahead, as it won't be needed as there will be no Company
			// input text box.
			var json = {}; 

			if(Current_Route.indexOf("company") > -1)
				 json = App_Companies.companyDetailView.model.toJSON();
			else 
				 json = App_Contacts.contactDetailView.model.toJSON();
			contact_company = json ;	
			forceCompany.name = getContactName(json); // name of Company
			forceCompany.id = json.id; // id of Company
			forceCompany.doit = true;
			comp_addr_prop = null ; 
			$.each(contact_company.properties , function(){
				if(this.name == "address" && this.subtype == "office")
					comp_addr_prop = JSON.parse(this.value);				
			}); 
			// yes force it. If this is false the
			// Company won't be forced.
			// Also after showing modal, it is set to false internally, so
			// Company is not forced otherwise.
			//$('#personModal').modal('show');
			$.ajax({
				url : 'core/api/custom-fields/scope?scope=CONTACT',
				type : 'GET',
				dataType : 'json',
				success : function(data){
					if(data.length > 0)
					{
						Backbone.history.navigate("contact-add" , {trigger: true});
						setTimeout(function(){ 
						$("#continueform").find("ul[name=contact_company_id]").html('<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="'+forceCompany.id+'"><span><a class="text-white m-r-xs" href="#contact/'+forceCompany.id+'">'+forceCompany.name+'</a><a class="close text-white" id="remove_tag">×</a></span></li>');
						console.log(comp_addr_prop);
						if(comp_addr_prop){
							$("#content .address-type").val("office");
							if(comp_addr_prop.address)
								$("#content #address").val(comp_addr_prop.address);
							if(comp_addr_prop.city)
								$("#content #city").val(comp_addr_prop.city);
							if(comp_addr_prop.state)
								$("#content #state").val(comp_addr_prop.state);
							if(comp_addr_prop.zip)
								$("#content #zip").val(comp_addr_prop.zip);
							if(comp_addr_prop.country)
								$("#content #country").val(comp_addr_prop.country);
							$("#content #remove_tag").addClass("companyAddress");
						}
						
						}, 800);
					}
					else
						$("#personModal").modal("show");
				}
			});
       },

       add_document : function(e){

       		$('#uploadDocumentModal').html(getTemplate("upload-document-modal", {})).modal('show');
		
			var el = $("#uploadDocumentForm");
			// Contacts type-ahead
			agile_type_ahead("document_relates_to_contacts", el, contacts_typeahead);

			// Deals type-ahead
			agile_type_ahead("document_relates_to_deals", el, deals_typeahead, false, null, null, "core/api/search/deals", false, true);

			var json = null;
			if(company_util.isCompany()){
				json = App_Companies.companyDetailView.model.toJSON();
			} else {
				json = App_Contacts.contactDetailView.model.toJSON();
			}
			var contact_name = getContactName(json);
			var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');
  
		 	// Adds contact name to tags ul as li element
		 	$('.tags',el).html(template({name : contact_name, id : json.id}));
		 },

       document_unlink : function(e){
       		var targetEl = $(e.currentTarget);

       		var id = $(targetEl).attr('data');
			var json = documentsView.collection.get(id).toJSON();

			// To get the contact id and converting into string
			var contact_id = "";
			
			if(company_util.isCompany())
				contact_id = App_Companies.companyDetailView.model.id + "";
			else
				contact_id = App_Contacts.contactDetailView.model.id + "";

			// Removes the contact id from related to contacts
			json.contact_ids.splice(json.contact_ids.indexOf(contact_id), 1);

			// Updates the document object and hides
			var newDocument = new Backbone.Model();
			newDocument.url = 'core/api/documents';
			newDocument.save(json, { success : function(data)
			{
				documentsView.collection.remove(json);
				documentsView.render(true);
			} });
       },

       show_document_list : function(e){

       		var targetEl = $(e.currentTarget);
       		var el = $(targetEl).closest("div");
			$(targetEl).css("display", "none");
			if(agile_is_mobile_browser()){
			el.find(".contact-document-select").css("display", "block");
			}
			else {
			el.find(".contact-document-select").css("display", "inline");	
			}
			var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
			fillSelect('document-select', 'core/api/documents', 'documents', function fillNew()
			{
				el.find("#document-select > option:first").after("<option value='new'>Add New Doc</option><option style='font-size: 1pt; background-color: #EDF1F2;'disabled>&nbsp;</option>");
				el.find("#document-select > option:first").remove();

			}, optionsTemplate, false, el);
	    },

       add_selected_document : function(e){
       		var targetEl = $(e.currentTarget);

       		var document_id = $(targetEl).closest(".contact-document-select").find("#document-select").val();

			var saveBtn = $(targetEl);

			// To check whether the document is selected or not
			if (document_id == "")
			{
				saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>This field is required.</span>");
				saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
				return;
			}
			else if (document_id == "new")
			{
				
				$('#uploadDocumentModal').html(getTemplate("upload-document-modal", {})).modal('show');
				var el = $("#uploadDocumentForm");

				// Contacts type-ahead
				agile_type_ahead("document_relates_to_contacts", el, contacts_typeahead);

				// Deals type-ahead
				agile_type_ahead("document_relates_to_deals", el, deals_typeahead, false, null, null, "core/api/search/deals", false, true);

				var json = null;
				if(company_util.isCompany()){
					json = App_Companies.companyDetailView.model.toJSON();
				} else {
					json = App_Contacts.contactDetailView.model.toJSON();
				}
				var contact_name = getContactName(json);

				var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');
	  
			 	// Adds contact name to tags ul as li element
			 	$('.tags',el).html(template({name : contact_name, id : json.id}));
			}
			else if (document_id != undefined && document_id != null)
			{
				if (!existingDocumentsView)
				{
					existingDocumentsView = new Base_Collection_View({ url : 'core/api/documents', restKey : "documents", });
					existingDocumentsView.collection.fetch({ success : function(data)
					{
						existing_document_attach(document_id, saveBtn);
					} });
				}
				else
					existing_document_attach(document_id, saveBtn);
			}
		},
};

/**
 * To attach the document to a contact
 * 
 * @param document_id
 * @param saveBtn
 */
function existing_document_attach(document_id, saveBtn)
{
	var json = existingDocumentsView.collection.get(document_id).toJSON();

	// To get the contact id and converting into string
	var contact_id = null;
	
	if(company_util.isCompany()){
		contact_id = App_Companies.companyDetailView.model.id + "";
	} else {
		contact_id = App_Contacts.contactDetailView.model.id + "";
	}

	// Checks whether the selected document is already attached to that contact
	if ((json.contact_ids).indexOf(contact_id) < 0)
	{
		json.contact_ids.push(contact_id);
		saveDocument(null, null, saveBtn, false, json);
	}
	else
	{
		saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>Linked Already</span>");
		saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
		hideTransitionBar();
		return;
	}
}
/**
 * contact-details-actions.js defines some of the functionalities (add note, task and 
 * campaign to a contact) of actions drop down menu of a contact in its detail view.
 * The remaining functionalities are defined through controller.
 * 
 * @module Contact management
 * @author Rammohan
 */
 var contact_detail_tab_actions = {
    /**
     * Displays activity modal with all task features,  to add a task 
     * related to the contact in contact detail view. Also prepends the 
     * contact name to related to field of activity modal.
     */ 
      add_task : function(e){

            
            $('#activityTaskModal').html(getTemplate("new-task-modal")).modal('show');

            var el = $("#taskForm");
            highlight_task();
            // Displays contact name, to indicate the task is related to the contact
            fill_relation(el);
            agile_type_ahead("task_related_to", el, contacts_typeahead);
            
            agile_type_ahead("task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);

            categories.getCategoriesHtml(undefined,function(catsHtml){
                $('#type',el).html(catsHtml);
                // Fills owner select element
                populateUsers("owners-list", $("#taskForm"), undefined, undefined,
                        function(data) {
                            $("#taskForm").find("#owners-list").html(data);
                            $("#owners-list", el).find('option[value='+ CURRENT_DOMAIN_USER.id +']').attr("selected", "selected");
                            $("#owners-list", $("#taskForm")).closest('div').find('.loading-img').hide();                   
                });
            });

           activateSliderAndTimerToTaskModal();
      },

      /**
     * Displays activity modal with all event features,  to add a event 
     * related to the contact in contact detail view. Also prepends the 
     * contact name to related to field of activity modal.
     */ 
      add_event : function(e){

            
            $('#activityModal').html(getTemplate("new-event-modal")).modal('show');

            var el = $("#activityForm");
            highlight_event();

            // Displays contact name, to indicate the task is related to the contact
            fill_relation(el);
            agile_type_ahead("event_related_to", el, contacts_typeahead);
            agile_type_ahead("task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
      },

      /**
     * Displays note modal, to add a note related to the contact in contact 
     * detail view. Also prepends the contact name to related to field of 
     * activity modal.  
     */ 
      add_note : function(e){
            console.log("execution");
            var targetEl = $(e.currentTarget);
            
            var el = $("#noteForm");
            
            // Displays contact name, to indicate the note is related to the contact
            fill_relation(el);

            if(!$(targetEl).attr("data-toggle"))
                 $('#noteModal').modal('show');
             
            agile_type_ahead("note_related_to", el, contacts_typeahead);
      },


    /**
     * Subscribes contact to a campaign. First loads a form with campaigns select 
     * option and then fills the select drop down with all the campaigns by triggering
     * a custom event (fill_campaigns_contact).
     */
      add_to_campaign : function(e){
            var targetEl = $(e.currentTarget);

            var contact_id = App_Contacts.contactDetailView.model.id;
            var optionsTemplate = "<option value='{{id}}'{{#if is_disabled}}disabled=disabled>{{name}} (Disabled){{else}}>{{name}}{{/if}}</option>";
            
            // Navigate to Add Campaigns page
            if($(targetEl).hasClass('contact-add-campaign'))
            {
            
                /*
                 * Custom event to fill campaigns. This is triggered from the controller
                 * on loading of the form. 
                 * This event is died to avoid execution of its functionality multiple
                 * times, if it is clicked multiple times (when it is clicked first time 
                 * it executes once, if again it is clicked it executes twice and so on).  
                 */
            
                $('body').off('fill_campaigns_contact').on('fill_campaigns_contact', function(event){
                    fillSelect('campaign-select','/core/api/workflows', 'workflow', 'no-callback ', optionsTemplate); 
	    		});
	    		
	    		// Navigate to controller to show the form and then to trigger the custom event
	    		Backbone.history.navigate("add-campaign", {
	                trigger: true
	            });
    			
    		}
    		
    		// If link clicked is within Campaigns tab, hide link and show form.
    		if($(this).hasClass('add-to-campaign'))
    		{
    			$(this).css('display','none');
    			
    			$('.show_campaigns_list').css('display','block');
    			
                // Navigate to controller to show the form and then to trigger the custom event
                Backbone.history.navigate("add-campaign", {
                    trigger: true
                });
                
            }
            
            // If link clicked is within Campaigns tab, hide link and show form.
            if($(targetEl).hasClass('add-to-campaign'))
            {
                $(targetEl).css('display','none');
                
                $('.show_campaigns_list').css('display','inline-block');
                
                fillSelect('campaign-select','/core/api/workflows', 'workflow', 'no-callback ', optionsTemplate); 
            }

            /*
             * Subscribes the contact to selected campaign from the drop down, when
             * the Add button is clicked
             */
            $('#subscribe-contact-campaign, #add-to-campaign').click(function(e){
                e.preventDefault();

                var $form;
                
                // Add Campaigns form in another page.
                if($(this).attr('id') === 'subscribe-contact-campaign')
                    $form = $('#contactCampaignForm');
                
                // For within Campaigns tab, campaigns list form
                if($(this).attr('id') === 'add-to-campaign')
                    $form = $('#add-to-campaign-form');
                
                // Verify form validation
                if(!isValidForm($form))
                    return;

                // Button disabled || Validate Form fails
                if($(this).attr('disabled') == 'disabled')
                    return;
                
                var saveButton=$(this);
                disable_save_button(saveButton);
                
                // Temporary variable to hide Campaigns list form within
                // Campaigns tab.
                var $add_to_campaign = $(this).attr('id');
                
                // Show loading symbol until model get saved
                //$('#contactCampaignForm').find('span.save-status').html(getRandomLoadingImg());
                
                var workflow_id = $('#campaign-select option:selected').prop('value');
                var workflow_name = $('#campaign-select option:selected').text();
                
                // If Active, don't add to campaign
                if(is_subscriber_active(workflow_id))
                {
                    var properties = App_Contacts.contactDetailView.model.get('properties');
                    
                    var name = "Contact";
                    
                    if(properties)
                        name = getPropertyValue(properties, "first_name");
                    
                    var message = name + " is already active in Campaign '" + workflow_name+"'.";
                    
                    showNotyPopUp("information", message, "top", 10000);
                    
                    enable_save_button(saveButton);
                    
                    return;
                }
                            
                var url = '/core/api/campaigns/enroll/' + agile_crm_get_contact()['id'] + '/' + workflow_id;
                
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: function(){
                
                        // Remove loading image
                        //$('#contactCampaignForm').find('span.save-status img').remove();
                        enable_save_button(saveButton);
                        
                        // Hides form and shows link within Campaigns tab.
                        if($add_to_campaign === 'add-to-campaign')
                        {
                            // Temp Flag inorder to show Active campaigns immediately.
                            // if true, downloads contact rather than fetching from collection
                            CONTACT_ASSIGNED_TO_CAMPAIGN = true;
                            
                            $('.show_campaigns_list').css('display','none');
                            
                            $('.add-to-campaign').css('display','inline-block');
                            
                            // Triggers Campaigns tab click, to update contact model
                            $('#contactDetailsTab a[href="#campaigns"]').trigger('click');
                            
                            return;
                            
                        }
                        
                        // Navigate back to contact detail view
                        Backbone.history.navigate("contact/" + agile_crm_get_contact()['id'], {
                            trigger: true
                        });
                    }
               });
            }); // End of Add button of form Event Handler

            // Click event of campaigns form close button
            $('#contact-close-campaign, #cancel-to-add-campaign').click(function(e){
                e.preventDefault();
                
                // Campaigns tab form
                if($(this).attr('id') === 'cancel-to-add-campaign')
                {
                    var $form = $('#add-to-campaign-form');
                    
                    // Reset form if any errors
                    var validator = $('form#add-to-campaign-form').validate();
                    validator.resetForm();
                    $form.find('div.controls').removeClass('single-error');
                    
                    // Hides form and show link
                    $('.show_campaigns_list').css('display','none');
                    $('.add-to-campaign').css('display','inline-block');
                    
                    return;
                }
                
                // Navigate back to contact detail view
                Backbone.history.navigate("contact/" + contact_id, {
                    trigger: true
                });
                
            }); // End of Close button of form Event Handler
      },

 };


/**
 * Prepends the name of the contact (which is in contact detail view),
 * to the pop-up modal's (task and note) related to field.
 * 
 * @method fill_relation
 * @param {Object} el
 * 			html object of the task or note form
 */
function fill_relation(el){
	var json = null;
	if(company_util.isCompany()){
		json = App_Companies.companyDetailView.model.toJSON();
	} else {
		json = App_Contacts.contactDetailView.model.toJSON();
	}
 	var contact_name = getContactName(json);//getPropertyValue(json.properties, "first_name")+ " " + getPropertyValue(json.properties, "last_name");
 	var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');
  

 	// Adds contact name to tags ul as li element
 	$('.tags',el).html(template({name : contact_name, id : json.id}));
      
}

function is_subscriber_active(workflow_id)
{
	var model = App_Contacts.contactDetailView.model;
	
	if(!model)
		return false;
	
	var contact = App_Contacts.contactDetailView.model.toJSON();
	
	var campaign_statuses = contact.campaignStatus;
	
	if(!campaign_statuses)
		return false;
	
	for(var i=0; i < campaign_statuses.length; i++)
	{
		if(campaign_statuses[i].status == workflow_id+"-ACTIVE")
			return true;
	}
	
	return false;
	
}var notesView;
var dealsView; 
var eventsView;
var tasksView;
var casesView;
var documentsView;
var campaignsView;
var mailsView;
var mailAccountsView;
var email_errors_divs = [];
var email_requests = [];

var contact_details_tab = {
		load_timeline : function()
		{
			$('div.tab-content', App_Contacts.contactDetailView.el).find('div.active').removeClass('active');
			
			$('#time-line', App_Contacts.contactDetailView.el).addClass('active');
			if($("#timeline", App_Contacts.contactDetailView.el).hasClass('isotope'))
			{
				$("#timeline", App_Contacts.contactDetailView.el).isotope( 'reLayout', function(){} )
				return;
			}
				load_timeline_details(App_Contacts.contactDetailView.el, App_Contacts.contactDetailView.model.get('id'));
		},
		load_notes : function()
		{
		    var id = App_Contacts.contactDetailView.model.id;
		    notesView = new Base_Collection_View({
	            url: '/core/api/contacts/' + id + "/notes",
	            restKey: "note",
	            templateKey: "notes",
	            individual_tag_name: 'li',
	            sortKey:"created_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".note-created-time", el).timeago();
	              	})
	              	contact_detail_page_infi_scroll($('#contact-dtl', App_Contacts.contactDetailView.el), notesView);
	            }
	        });
	        notesView.collection.fetch();
	        $('#notes', App_Contacts.contactDetailView.el).html(notesView.el);
		},
		load_events : function()
		{
			var id = App_Contacts.contactDetailView.model.id;
			eventsView = new Base_Collection_View({
	            url: '/core/api/contacts/' + id + "/events",
	            restKey: "event",
	            templateKey: "contact-events",
	            individual_tag_name: 'li',
	            sortKey:"created_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".event-created-time", el).timeago();
	              	});
	            	$('li',el).each(function(){
	            	if($(this).find('.priority_type').text().trim() == "High") {
            			$(this).css("border-left","3px solid #f05050");
            		}else if($(this).find('.priority_type').text().trim() == "Normal"){
            			$(this).css("border-left","3px solid #7266ba");
            		}else if($(this).find('.priority_type').text().trim() == "Low") {
            			$(this).css("border-left","3px solid #fad733");
            		}
	            	});
	            }
	        });
			eventsView.collection.fetch();
	        $('#events', App_Contacts.contactDetailView.el).html(eventsView.el);
		},
		load_documents : function()
		{
			 id = App_Contacts.contactDetailView.model.id;
			 documentsView = new Base_Collection_View({
		            url: '/core/api/documents/contact/' + id + "/docs",
		            restKey: "document",
		            templateKey: "contact-documents",
		            individual_tag_name: 'li',
		            sortKey:"uploaded_time",
		            descending: true,
		            postRenderCallback: function(el) {
		            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
		            		 $(".document-created-time", el).timeago();
		              	});
		            
		            }
		        });
			    documentsView.collection.fetch();
		        $('#documents', App_Contacts.contactDetailView.el).html(documentsView.el);
		},
		load_tasks : function()
		{
			   id = App_Contacts.contactDetailView.model.id;
				tasksView = new Base_Collection_View({
		            url: '/core/api/contacts/' + id + "/tasks",
		            restKey: "task",
		            templateKey: "contact-tasks",
		            individual_tag_name: 'li',
		            sortKey:"created_time",
		            descending: true,
		            postRenderCallback: function(el) {
		            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
		            		 $(".task-created-time", el).timeago();
		              	});
		            	$('li',el).each(function(){
		            		if($(this).find('.priority_type').text().trim()== "HIGH") {
		            			$(this).css("border-left","3px solid #f05050");
		            		}else if($(this).find('.priority_type').text().trim() == "NORMAL"){
		            			$(this).css("border-left","3px solid #7266ba");
		            		}else if($(this).find('.priority_type').text().trim() == "LOW") {
		            			$(this).css("border-left","3px solid #fad733");
		            		}
		            	});
		            }
		            
		        });
				tasksView.collection.fetch();
		        $('#tasks', App_Contacts.contactDetailView.el).html(tasksView.el);
		},
		load_deals : function ()
		{
			id = App_Contacts.contactDetailView.model.id;
			dealsView = new Base_Collection_View({
				url: 'core/api/contacts/'+ id + "/deals" ,
	            restKey: "opportunity",
	            templateKey: "deals",
	            individual_tag_name: 'li',
	            sortKey:"created_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".deal-created-time", el).timeago();
	            	$(el).find('ul li').each(function(){
				    $(this).addClass("deal-color");
				    $(this).addClass($(this).find("input").attr("class"));
			        });


	            	})
	            }
	        });
	        dealsView.collection.fetch();
	        $('#deals', App_Contacts.contactDetailView.el).html(dealsView.el);
		},
		load_cases : function()
		{
			id = App_Contacts.contactDetailView.model.id;
			casesView = new Base_Collection_View({
				url: 'core/api/contacts/'+ id + "/cases" ,
	            restKey: "cases",
	            templateKey: "cases-contact",
	            individual_tag_name: 'li',
	            sortKey:"created_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".deal-created-time", el).timeago();
	            	})
	            }
	        });
			casesView.collection.fetch();
	        $('#cases', App_Contacts.contactDetailView.el).html(casesView.el);
		},
		load_mail : function(mail_server_url,email_server)
		{	
			killAllPreviousRequests();
			$('#mail #mails-span', App_Contacts.contactDetailView.el).remove();
			$('#mails', App_Contacts.contactDetailView.el).html("");
			if(typeof mailsView !== 'undefined')
			{
				mailsView.render = null;
				mailsView.collection = null;
			}
			var contact = App_Contacts.contactDetailView.model;
			var json = contact.toJSON();
			// Get email of the contact in contact detail
			var email = getAllPropertyValuesByName(json.properties, "email", ",");			
			// Shows an error alert, when there is no email to the contact
			if (!email)
			{
				show_no_email_alert();
				return;
			}
			var contact_details_tab_scope = this;
			var has_email_configured = true;
			var has_shared_email_configured = true;			
			if(email_server && mail_server_url)
			{
				if($('#has_email_configured', App_Contacts.contactDetailView.el).html() === 'true')
					has_email_configured = true;
				else
					has_email_configured = false;
				if(email_server !== 'all')
					fetchMails(contact_details_tab_scope,has_email_configured,mail_server_url,email_server,email);
				else
				{
					var email_accounts_model = mailAccountsView.model.toJSON();
					fetchAllMails(contact_details_tab_scope,has_email_configured,email_accounts_model,email);
				}
			}
			else
			{
				loadMailTabView(contact_details_tab_scope,email_server,mail_server_url,email);
			}		
		},
		load_stats : function()
		{
			var contact = App_Contacts.contactDetailView.model;
			var json = contact.toJSON();
			 
			// Get email of the contact in contact detail
			var email = getAllPropertyValuesByName(json.properties, "email", ",");
			
			// Shows an error alert, when there is no email to the contact 
			if(!email){
				$('#stats', App_Contacts.contactDetailView.el).html('<div class="alert alert-danger m-sm"><a class="close" data-dismiss="alert" href="#">&times;</a>Sorry! this contact has no email to get the stats.</div>');
				return;	
			}

			get_web_stats_count_for_domain(function(count){

				// To avoid unnecessary JSAPI count, first verify in cookie
				if(!(_agile_get_prefs('_agile_jsapi') != null && _agile_get_prefs('_agile_jsapi') == "true") && (NO_WEB_STATS_SETUP && count == '0'))
				{
					$('#stats', App_Contacts.contactDetailView.el).html('<h4 class="webstats-msg space-normal  wrapper-sm font-normal m-none"><p>You have not yet setup the Javascript API on your website.</p><p>Please <a href="#analytics-code">set it up</a> to see the contact\'s site visits here.</p></h4>');
					return;
				}

				// Add tag if data is not 0
		        addTagAgile(CODE_SETUP_TAG);

				var statsView = new Base_Collection_View({
				url: 'core/api/web-stats?e=' + encodeURIComponent(email),
			//	data: statsCollection.toJSON(),
				templateKey: "stats",
	            individual_tag_name: 'li',
	            postRenderCallback: function(el)
	            {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function() { 
	        			$(".stats-created-time", el).each(function(index, element) {
	        				$(element).timeago();
	        			});
	    			});
	            	
	            	var first_model_element = $('#stats-model-list').find('li')[0];
	            	
	            	// Expand first li by default
	            	if(first_model_element)
	            		$(first_model_element).find('#show-page-views').trigger('click');
	            	
	            }
		        });
				
		        statsView.collection.fetch();
		        
		        // Organises collection based on created_time in decreasing order
		        statsView.collection.comparator = function(model)
		        {
		        	if (model.get('created_time'))
			            return -model.get('created_time');
			                                      
		        }
		        console.log($('#stats', App_Contacts.contactDetailView.el));
		        $('#stats', App_Contacts.contactDetailView.el).html(statsView.render().el);

			});
		},
		load_campaigns : function()
		{
			// Show Loader
			$('#campaigns', App_Contacts.contactDetailView.el).html("");
			getCampaignContact(function(){

				campaignsView = new Base_Collection_View({
					url: '/core/api/campaigns/logs/contact/' + App_Contacts.contactDetailView.model.id,
		            restKey: "logs",
		            templateKey: "campaigns",
		            individual_tag_name: 'li',
		            cursor : true,
		            page_size : 20,
		            sort_collection:false,
		            postRenderCallback: function(el) {            	

		            	$('#unsubscribe-modal', el).off('click');

		            	$('#unsubscribe-modal', el).on('click', function(e){
		            		e.preventDefault();	            	    

							show_resubscribe_modal();

		            	});

		            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
		              		 $("time.log-created-time", el).timeago();
		              	});
		            	contact_detail_page_infi_scroll($('#contact-dtl', App_Contacts.contactDetailView.el), campaignsView);
		            },
		            appendItemCallback : function(el)
					{
						includeTimeAgo(el);
					} 
		        });

				campaignsView.collection.fetch({
					success: function(){

						// Verify whether contact updated or not
						checkContactUpdated();
					}

				});	

	            $('#campaigns', App_Contacts.contactDetailView.el).html(campaignsView.el);
	        });
		},
		load_tickets: function(){
			loadServiceLibrary(function(){
				Tickets_Rest.loadTicketsByContactId(App_Contacts.contactDetailView.model.id);
			});
		}
};
/**
 * This method responsible for building mail tab UI in contact-details page.
 * First it loads configured email accounts and then loads emails from selected
 * email account. It has an option of showing all emails in one shot also.
 */
function loadMailTabView(contact_details_tab_scope,email_server,mail_server_url,email)
{
	var has_email_configured = true;
	var has_shared_email_configured = true;
	var model = "";
	var email_dropdown_html = "";
	var from_email = "";
    mailAccountsView = new Base_Model_View({ url : 'core/api/emails/synced-accounts', template : "email-account-types",change:false,
		postRenderCallback : function(el)
		{	
			model = mailAccountsView.model.toJSON();
			if(model.hasEmailAccountsConfigured)
				has_email_configured = true;
			else
				has_email_configured = false;
			if(model.hasSharedEmailAccounts)
				has_shared_email_configured = true;
			else
				has_shared_email_configured = false;
			//Reading cookie info, fetches mail server type and email from cookie 
			var cookie_info = fetch_mailserverurl_from_cookie(model);
			if(cookie_info && cookie_info.length == 4)
			{
				mail_server_url = cookie_info[0];
				email_dropdown_html = cookie_info[1];
				email_server = cookie_info[2];
				from_email = cookie_info[3];
				if(from_email)
					email_server_type = from_email;
			}
			//By default loads mails from Agile server
			if(!email_server || !mail_server_url || !from_email || (!has_email_configured && !has_shared_email_configured))
			{
				email_server = "agile";
				email_dropdown_html = '<i class="icon-cloud" style="margin-right:4px;font-size: 1.2em"></i>'+'Agile';
				email_server_type = "agilecrm";
			}
			//Fetching emails from All registered email accounts
			if(email_server ==='all' || mail_server_url === 'all')
				fetchAllMails(contact_details_tab_scope,has_email_configured,model,email)
			else
				fetchMails(contact_details_tab_scope,has_email_configured,mail_server_url,email_server,email);
			if(has_email_configured || has_shared_email_configured)
			{
				if(email_dropdown_html)
					$('#email-type-select',App_Contacts.contactDetailView.el).html(email_dropdown_html);	 
				$('#mail-account-types', App_Contacts.contactDetailView.el).css('display','block');
			} 						
		}
	});
	$('#mail-account-types', App_Contacts.contactDetailView.el).html(mailAccountsView.render().el);	 
}

/**
 * This function is used to get mails from specified server and email, 
 * if server or email is not specified then it fetches 
 * mails sent through Agile.
 */
function fetchMails(contact_details_tab_scope,has_email_configured,mail_server_url,email_server,email)
{	
	$('#mail', App_Contacts.contactDetailView.el).append('<span id="mails-span"> <img class="mails-loading p-r-xs m-b m-l-sm pull-left"  src= "'+updateImageS3Path("/img/ajax-loader-cursor.gif")+'"></img></span>');
	this.configured_sync_email = "";
	var cursor = true;

	// By default showing Agile emails
	if(email_server === 'agile')
	{
		mail_server_url = 'core/api/emails/agile-emails?search_email='+encodeURIComponent(email);
		email_server_type = "agilecrm";
		cursor = false;
	}
	else
		mail_server_url = mail_server_url + '&search_email='+encodeURIComponent(email);

	// Fetches mails collection
	mailsView = new Base_Collection_View({ url : mail_server_url , cursor : cursor, page_size : 10,
	templateKey : "email-social", sort_collection : true, sortKey : "date_secs", descending : true, individual_tag_name : "li",
	postRenderCallback : function(el)
	{
		$('#mail', App_Contacts.contactDetailView.el).find("#no-email").css('display','block');
		head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
		{
			$(".email-sent-time", el).each(function(index, element)
			{
				$(element).timeago();
			});
		});
		
		if(email_server_type!="agilecrm")
			contact_details_tab_scope.configured_sync_email = email_server_type;
	
		if(!has_email_configured)
			$('#email-prefs-verification',App_Contacts.contactDetailView.el).css('display', 'block');
		contact_detail_page_infi_scroll($('#contact-dtl', App_Contacts.contactDetailView.el), mailsView);
		$('#mail #mails-span', App_Contacts.contactDetailView.el).remove();
	}});
	mailsView.collection.fetch();
	$('#mails', App_Contacts.contactDetailView.el).html(mailsView.render().el);
}

function fetchAllMails(contact_details_tab_scope,has_email_configured,email_accounts_model,email)
{	
	var all_emails = [];
	var fetch_urls = email_accounts_model['fetchUrls'];
	$('#contact-dtl', App_Contacts.contactDetailView.el).unbind("scroll");
	loadAllMailsView(contact_details_tab_scope,has_email_configured,all_emails);
    fetchMailsFromAllAccounts(contact_details_tab_scope,has_email_configured,fetch_urls,email);
}

/**
 * 
 * This function is used to fetch mails from all configured email
 * accounts. It calls emails servers in asynchronous fashion.
 * After getting response from each server call, view automatically
 * gets sorted and rendered with new items
 
 * @param contact_details_tab_scope
 * @param has_email_configured
 * @param fetch_urls
 * @param email
 */
function fetchMailsFromAllAccounts(contact_details_tab_scope,has_email_configured,fetch_urls,email)
{
	var response_count = 0;
	if(fetch_urls)
	{
		if(fetch_urls.length > 0)
		{
			$('#mail-account-types', App_Contacts.contactDetailView.el).prepend('<span id="mails-span"> <img class="all-mails-loading p-r-xs m-b m-l-sm pull-left"  src= "'+updateImageS3Path("/img/ajax-loader-cursor.gif")+'"></img></span>');
			$('#mail-account-types', App_Contacts.contactDetailView.el).find('.all-mails-loading').css("display","block");
		}
		for(var i=0;i<fetch_urls.length;i++)
		{
			var xhr = $.ajax({ url : fetch_urls[i]+'&search_email='+encodeURIComponent(email),
				success : function(emails)
				{	
					response_count++;
					if(emails)
					{	if(ifNoError(emails[0]))
						{
							if(!mailsView)
							{				
								setTimeout(function(){
									mailsView.collection.add(emails);
									mailsView.render(true);
									showTransitionBar();
								},5000);
							}
							else
							{
								mailsView.collection.add(emails);
								mailsView.render(true);				
							}
						}
						if(response_count === fetch_urls.length)
						{
							showMailsInfoMessages();
						}
				    }
				},
			    error : function(response)
			    {
			    	response_count++;
			    	if(response_count === fetch_urls.length)
			    	{
			    		showMailsInfoMessages(response);
			    	}
			    }
			});
			email_requests.push(xhr);
		}
	}
}
/**
 * /**
 * This function is responsible for building mailsView.
 * Mails view consists mails fetched from emails servers.
 
 * @param contact_details_tab_scope
 * @param has_email_configured
 * @param fetched_emails
 * 
 */
function loadAllMailsView(contact_details_tab_scope,has_email_configured,fetched_emails)
{
	if(typeof mailsView !== 'undefined')
	{
		mailsView.render = null;
		mailsView = null;
	}
	this.configured_sync_email = "";
	mailsView = new Base_Collection_View({data : fetched_emails,
	templateKey : "email-social", sort_collection : true, sortKey : "date_secs", descending : true, individual_tag_name : "li",
	postRenderCallback : function(el)
	{
		head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
		{
			$(".email-sent-time", el).each(function(index, element)
			{
				$(element).timeago();
			});
		});
		
		if(email_server_type!="agilecrm")
			contact_details_tab_scope.configured_sync_email = email_server_type;
	
		if(!has_email_configured)
			$('#email-prefs-verification',App_Contacts.contactDetailView.el).css('display', 'block');
		//$('#mail #mails-span', App_Contacts.contactDetailView.el).remove();
	}});
	$('#mails', App_Contacts.contactDetailView.el).html(mailsView.render(true).el);
}

/**
 * This method is used read email_type_select cookie , parses cookie value
 * and evalutes if cookie informations has vaild now or not.
 * This cookie stores information about selected mail type and mail under mail tab.
 * @param model
 * @returns {Array}
 */
function fetch_mailserverurl_from_cookie(model)
{
	var cookie_value = _agile_get_prefs(email_server_type_cookie_name);
	var final_url = "";
	var cookie_info = [];
	if(cookie_value)
	{
		var values = cookie_value.split("|");
		if(values)
		{
			if(values.length === 2)
			{
				var email = values[0];
				var email_server = values[1];
				var html = "";
				var shared = false;
				if(email && email_server)
				{
					if(email_server.toLowerCase()==='all')
					{
						cookie_info[0] = 'all'
						cookie_info[1] = 'All Mail';
						cookie_info[2] = 'all';
						cookie_info[3] = 'all';
					}
					else if(email_server.toLowerCase()==='google')
					{
						var hasGmail = false;
						if(typeof model.gmailUserNames !== 'undefined' && model.hasOwnProperty('gmailUserNames'))
						{
							for(var i=0;i<model.gmailUserNames.length;i++)
							{
								if(model.gmailUserNames[i] === email)
								{
									hasGmail = true;
									break;
								}
							}
						}
						if(typeof model.sharedGmailUserNames !== 'undefined' && model.hasOwnProperty('sharedGmailUserNames'))
						{
							for(var i=0;i<model.sharedGmailUserNames.length;i++)
							{
								if(model.sharedGmailUserNames[i] === email)
								{
									hasGmail = true;
									shared = true;
									break;
								}
							}
						}
						if(hasGmail)
						{
							final_url = 'core/api/social-prefs/google-emails?from_email='+email;
							html = '<i class="icon-google-plus" style="margin-right:4px;font-size: 1.2em"></i>'+email;
							if(shared)
								html = html+ ' (Shared)';
						}
					}
					else if(email_server.toLowerCase()==='imap')
					{
						var hasImap = false;
						if(typeof model.imapUserNames !== 'undefined' && model.hasOwnProperty('imapUserNames'))
						{
							for(var i=0;i<model.imapUserNames.length;i++)
							{
								if(model.imapUserNames[i] === email)
								{
									hasImap = true;
									break;
								}
							}
						}
						if(typeof model.sharedImapUserNames !== 'undefined' && model.hasOwnProperty('sharedImapUserNames'))
						{
							for(var i=0;i<model.sharedImapUserNames.length;i++)
							{
								if(model.sharedImapUserNames[i] === email)
								{
									hasImap = true;
									shared = true;
									break;
								}
							}
						}
						if(hasImap)
						{
							final_url = 'core/api/imap/imap-emails?from_email='+email;
							html = '<i class="icon-envelope-alt" style="margin-right:4px;font-size: 1.2em"></i>'+email;
							if(shared)
								html = html+ ' (Shared)';
						}
					}
					else if(email_server.toLowerCase()==='exchange')
					{
						var hasExchange = false;
						if(typeof model.exchangeUserNames !== 'undefined' && model.hasOwnProperty('exchangeUserNames'))
						{
							for(var i=0;i<model.exchangeUserNames.length;i++)
							{
								if(model.exchangeUserNames[i] === email)
								{
									hasExchange = true;
									break;
								}
							}
						}
						if(typeof model.sharedExchangeUserNames !== 'undefined' && model.hasOwnProperty('sharedExchangeUserNames'))
						{
							for(var i=0;i<model.sharedExchangeUserNames.length;i++)
							{
								if(model.sharedExchangeUserNames[i] === email)
								{
									hasExchange = true;
									shared = true;
									break;
								}
							}
						}
						if(hasExchange)
						{
							final_url = 'core/api/office/office365-emails?from_email='+email;
							html = '<i class="icon-windows" style="margin-right:4px;font-size: 1.2em"></i>'+email;
							if(shared)
								html = html+ ' (Shared)';
						}
					}
					if(final_url)
					{
						cookie_info[0] = final_url
						cookie_info[1] = html;
						cookie_info[2] = email_server;
						cookie_info[3] = email;
					}
				}
			}// end of if cookie values == 2
		}
	}
	return cookie_info;
}

function contact_detail_page_infi_scroll(element_id, targetCollection)
{
	console.log("initialize_infinite_scrollbar",element_id);
	
	element_id.unbind("scroll");

	if (element_id == undefined || element_id == null)
	{
		console.log("no elmnt");
		return;
	}
	console.log(targetCollection);
	targetCollection.infiniScroll = new Backbone.InfiniScroll(targetCollection.collection, {
		target : element_id,
		untilAttr : 'cursor',
		param : 'cursor',
		strict : false,
		pageSize : targetCollection.page_size,
		success : function(colleciton, response)
		{
			console.log('in success');
			if (!colleciton.last().get("cursor"))
			{
				this.strict = true;
				targetCollection.infiniScroll.disableFetch();
			}
			// Remove loading icon
			$(targetCollection.infiniScroll.options.target).find('.scroll-loading').remove();
		},
		onFetch : function()
		{
			console.log('in fetch');
			// Add loading icon
			$(targetCollection.infiniScroll.options.target).append(
					'<div class="scroll-loading"> <img src="'+updateImageS3Path("/img/ajax-loader-cursor.gif") +'" style="margin-left: 44%;"> </div>');
		}
		});
}
function showMailsInfoMessages()
{
	showMailsErrorMessages();
	if(mailsView.collection.length > 20)
	{
		if(($('#all-emails-info',App_Contacts.contactDetailView.el).length === 0))
		{
			$('#mails',App_Contacts.contactDetailView.el).append('<div id="all-emails-info" class="alert alert-info">Showing relevant messages from all accounts. Maximum of 20 messages from each account </div>');
		}
	}
	$('#mail-account-types', App_Contacts.contactDetailView.el).find('.all-mails-loading').remove();
	$('#mail', App_Contacts.contactDetailView.el).find("#no-email").css('display','block');
}
function showMailsErrorMessages()
{
	for(var i=0;i<email_errors_divs.length;i++)
		$('#mails',App_Contacts.contactDetailView.el).prepend(email_errors_divs[i]);
	email_errors_divs = [];
}
function ifNoError(email)
{
	if(email && 'errormssg' in email && 'owner_email' in email)
	{
		var email_error_div = '<div class="alert alert-danger" > <a href="#" class="close" data-dismiss="alert">&times;</a><span class="text-dark">Unable to fetch emails from account "'+email.owner_email+'" Error:'+ email.errormssg+'</span>';
		email_errors_divs.push(email_error_div);
		return false;
	}
	return true;
}
function killAllPreviousRequests()
{
	for(var i=0;i<email_requests.length;i++)
	{
		var xhr = email_requests[i];
		xhr.abort();
	}
	email_requests = [];
}
function show_no_email_alert()
{
	$('#mail', App_Contacts.contactDetailView.el).html('<div class="alert alert-danger m-t-sm m-sm"><a class="close" data-dismiss="alert" href="#">&times;</a>Sorry! this contact has no email to get the mails.</div>');
}

function show_resubscribe_modal(){
	
	getTemplate('contact-detail-resubscribe-modal', {}, undefined, 
		function(template_ui){
							
					if(!template_ui)
							return;
					
					unsubscribe_status_updated = false;

					// Removes if previous modals exist.
					if ($('div#contact-detail-resubscribe-modal').size() != 0)
						$('div#contact-detail-resubscribe-modal').remove();

					var modal = $(template_ui).modal('show');

					modal.on('shown.bs.modal', function (e) {
		              

		              var el = $(template_ui);

		               $(this).find('.modal-body').css({
			              width:'auto', //probably not needed
			              height:'auto', //probably not needed 
			              'max-height':'100%'
       					});

		              
		              fillSelect('campaigns-list', '/core/api/workflows', 'workflow', function(collection)
						{
							
								$('#campaigns-list', el).empty();

								email_workflows_list = get_email_workflows(collection.toJSON());


								var modelTemplate = Handlebars.compile("{{#each this}}<option value='{{@key}}'>{{this}}</option>{{/each}}");
								var optionsHTML = modelTemplate(email_workflows_list);
								
								$('#campaigns-list', el).append(optionsHTML);

								// Remove image
								$('#campaigns-list', el).parent().find('.loading').remove();

								head.js(LIB_PATH + 'lib/bootstrap-multiselect/bootstrap-multiselect.min.js', CSS_PATH + 'css/bootstrap-multiselect/bootstrap-multiselect.css', function(){

									is_selected_all = false;
									$('#campaigns-list', el).multiselect({
										  onInitialized: function(select, container) {
			        								
		    								$(container).find('button').css({width: '252px'});
		    								// $(container).find('.multiselect-container').css({'position':'relative'});
		    								$(container).find('span').addClass('pull-left');
		    								$(container).find('b.caret').addClass('pull-right m-t-sm');
			    						},
										  nonSelectedText: 'Select Campaign',
										  selectAllValue: "ALL",
										  includeSelectAllOption: true,
										  maxHeight: 125,
										  disableIfEmpty: true,
										  buttonText: function(options){

										  		if(options.length == 0)
										  			return 'Select Campaign';

										  		return options.length + ' selected';
										  },
										  onSelectAll: function(checked){
										  		is_selected_all = checked;
										  		unsubscribe_contact();
										  		return;
										  },
										  onChange: function(option, checked) {

										  			if(!option)
										  				return;

													if(option.val() == 'ALL' && checked)
													{
														is_selected_all = true;
														unsubscribe_contact();
														return;
													}

													is_selected_all = false;

													unsubscribe_contact();
												},
										   onDropdownShow: function(event) {

											      var $menu = $(event.currentTarget).find(".dropdown-menu li label");
											      
											      $menu.css({ "width": "250px","white-space": "nowrap", "overflow": "hidden","text-overflow": "ellipsis"});
											  }
									});

									getCampaignContact(function(contact_json){

										getTemplate('contact-detail-unsubscribe-campaigns-list', {}, undefined, function(campaigns_list_template){

											$('#unsubscribe-campaigns-list', el).html(campaigns_list_template);
											$('div#contact-detail-resubscribe-modal .modal-body').html(el.find('form'));

											var $tooltip = $('[data-toggle="tooltip"]').tooltip();
											$tooltip.on('shown.bs.tooltip', function(){
											$(this).next('.tooltip').css({'padding-right': '2px'});

											});
										
										});
									});

									
									
									// Unsubscribe
									unsubscribe_contact();

									// Resubscribe
									resubscribe(el);
							});
				
						}, "<option value='{{id}}'>{{name}}</option>", true, el);

					});
	
					// Modal hidden
					modal.on('hidden.bs.modal', function(e){

						if(typeof unsubscribe_status_updated != 'undefined' && unsubscribe_status_updated)
							contact_details_tab.load_campaigns()
					});
	
			}, null);

}

function get_email_workflows(workflows){

	if(!workflows)
		return;

	var email_workflows = {};

	for (var i = 0, len = workflows.length; i < len; i++){
        
        var workflow = workflows[i];
        var rules = JSON.parse(workflow["rules"]);
        var nodes = rules["nodes"];

		// Iterate nodes to check SendEmail
		for(var j=0, length = nodes.length; j < length; j++){

			var node = nodes[j];

			if((node["NodeDefinition"]["name"] == "Send Email" || node["NodeDefinition"]["name"] == "Send E-mail") && node["NodeDefinition"]["workflow_tasklet_class_name"] == "com.campaignio.tasklets.agile.SendEmail")
			{
				email_workflows[workflow.id] = workflow.name;
				break;
			}
		}
    }

    return email_workflows;

}

/**
	 * Returns Active Campiagn ContactContact Model from contactDetailView collection
	 * 
	 */
function getCampaignContact(callback){

	    if(!(App_Contacts.contactDetailView && App_Contacts.contactDetailView.model))
	    	return;


		// To show Active Campaigns list immediately after campaign
		// assigned.
		if (CONTACT_ASSIGNED_TO_CAMPAIGN)
		{
			CONTACT_ASSIGNED_TO_CAMPAIGN = false;

			// fetches updated contact json
			$.ajax({
					 type : 'GET', 
					 url : '/core/api/contacts/' + App_Contacts.contactDetailView.model.get('id'),					
					 dataType : 'json',
					 success : function(response){
					 	// Updates Contact Detail model
						App_Contacts.contactDetailView.model.set(response);
						callback(response);
					}});
			return;
		}

		// if simply Campaigns tab clicked, use current collection
		callback(App_Contacts.contactDetailView.model.toJSON());
			
}

/**
 * contact-details-tabs.js fetches the contact (which is in contact detail view)
 * related details (notes, tasks, deals, campaigns and mails etc..) and presents
 * in tab content as specified, when the corresponding tab is clicked. Timeline
 * tab is activated by default to show all the details as vertical time-line.
 * 
 * @module Contact management
 * @author Rammohan
 */

var contact_tab_position_cookie_name = "contact_tab_position_" + CURRENT_DOMAIN_USER.id;

var CONTACT_ASSIGNED_TO_CAMPAIGN = false;

var NO_WEB_STATS_SETUP = true;

var email_server_type = "agilecrm";

var email_server_type_cookie_name = "email_server_type_" + CURRENT_DOMAIN_USER.id;

function fill_company_related_contacts(companyId, htmlId, context_el)
{
	$('#' + htmlId).html(LOADING_HTML);

	var companyContactsView = new Base_Collection_View({ url : 'core/api/contacts/related/' + companyId, templateKey : 'company-contacts',
		individual_tag_name : 'tr', cursor : true, page_size : 25, sort_collection : false, scroll_target : (context_el ? $("#infinite-scroller-company-details", context_el) : "#infinite-scroller-company-details"), postRenderCallback : function(el)
		{
			// var cel = App_Contacts.contactsListView.el;
			// var collection = App_Contacts.contactsListView.collection;
			contactListener();
		} });

	companyContactsView.collection.fetch();

	if(context_el)
		$('#' + htmlId, $(context_el)).html(companyContactsView.render().el);
	else
		$('#' + htmlId).html(companyContactsView.render().el);
}

var Contact_Details_Tab_Actions = {

	 /**
	 * Activates the Timeline tab-content to show the time-line with all
	 * details, which are already added to time-line, when the contact is
	 * getting to its detail view.
	 */
	  openTimeLine : function(e){
	  		
			save_contact_tab_position_in_cookie("timeline");

			contact_details_tab.load_timeline();
	  },

	  onEmailSubjectClick : function(e){
	  		
	  		var targetEl = $(e.currentTarget);

			var href = $(targetEl).attr("href");
			var id = $(targetEl).attr('id');
			$(".collapse-" + id).hide();
			$(href).collapse('toggle');

			$(href).on("hidden.bs.collapse", function()
			{
				$(".collapse-" + id).show();
			})
	  },

	  // Hide More link and truncated webstats and show complete web stats.
	  showPageViews : function(e){
		   $(e.currentTarget).closest('.activity-text-block').find('#complete-webstats').toggle();	  	
	  },

	  // to remove contact from active campaign.
	  removeActiveCampaigns : function(e){
	  	var targetEl = $(e.currentTarget);
	  	showAlertModal("Are you sure to remove " + $(targetEl).attr("contact_name") + " from " + $(targetEl).attr("campaign_name") + " campaign?", "confirm", function(){
			var $active_campaign = $(targetEl).closest('span#active-campaign');
			var campaign_id = $active_campaign.attr('data');
			var contact_id;

			// Fetch contact id from model
			if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
				contact_id = App_Contacts.contactDetailView.model.get('id');

			// Url to delete
			var deleteUrl = 'core/api/workflows/remove-active-subscriber/' + campaign_id + '/' + contact_id;

			$.ajax({ url : deleteUrl, type : 'DELETE', success : function(data)
			{

				var contact_json = App_Contacts.contactDetailView.model.toJSON();
				var campaign_status = contact_json.campaignStatus;

				// On success callback, remove from both UI and backbone contact
				// model.
				if (campaign_status !== undefined)
				{
					for (var i = 0, len = campaign_status.length; i < len; i++)
					{
						if (campaign_id === campaign_status[i].campaign_id)
						{
							// Remove from campaignStatus array of contact model
							campaign_status.splice(i, 1);
							break;
						}
					}
				}

				// Remove li
				$active_campaign.remove();

			} });
		},undefined, "Remove Active Campaign");

		
	  },

	  /**
	 * Fetches all the notes related to the contact and shows the notes
	 * collection as a table in its tab-content, when "Notes" tab is clicked.
	 */
	  showNotes : function(e){
		   save_contact_tab_position_in_cookie("notes");
		   contact_details_tab.load_notes();
	  
	  },

	  /**
	 * Fetches all the events related to the contact and shows the events
	 * collection as a table in its tab-content, when "Events" tab is clicked.
	 */
	  showEvents : function(e){
		   save_contact_tab_position_in_cookie("events");
		contact_details_tab.load_events();
	  },

	   replyToEmail : function(e){
		   
		   var targetEl = $(e.currentTarget);

				var from = $(targetEl).data('from');

				var $parent_element = $(targetEl).closest('#email-reply-div');

				var to_emails = $parent_element.find('.to-emails').data('to');
				var cc_emails = $parent_element.find('.cc-emails').data('cc');
				var bcc_emails = $parent_element.find('.bcc-emails').data('bcc');

				var email_sync_configured = contact_details_tab.configured_sync_email;

				var configured_email;

				if (email_sync_configured)
				{
					configured_email = email_sync_configured;
				}

				if (configured_email && to_emails)
				{
					// Merge both from and to removing configured email
					to_emails = get_emails_to_reply(from + ', ' + to_emails, configured_email);
				}

				if (configured_email && cc_emails)
				{

					cc_emails = get_emails_to_reply(cc_emails, configured_email);
				}

				if (configured_email && bcc_emails)
				{

					bcc_emails = get_emails_to_reply(bcc_emails, configured_email);
				}

				// Change url only without triggerring function
				App_Contacts.navigate('send-email');

				// Reply all emails
				reply_email = to_emails;

				// Removes leading and trailing commas
				reply_email = reply_email.replace(/(, $)/g, "");

				if (cc_emails)
					cc_emails = cc_emails.replace(/(, $)/g, "");

				if (bcc_emails)
					bcc_emails = bcc_emails.replace(/(, $)/g, "");

				// Trigger route callback
				App_Contacts.sendEmail(reply_email, "Re: " + $parent_element.find('.email-subject').text(),
						'<p></p><blockquote style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex;">' + $parent_element.find('.email-body')
								.html() + '</blockquote>', cc_emails, bcc_emails);

	  },

	  /**
	 * Delete functionality for activity blocks in contact details
	 */
	   deleteActivity : function(e){
		  	
		  	var targetEl = $(e.currentTarget);

		  	var model = $(targetEl).parents('li').data();

		  	var owner = model.get("owner_id");

		  	if(!owner && model.get("owner")){
		  		owner = model.get("owner").id;
		  	}

		  	if(!owner && Current_Route.indexOf("deal/") == 0 && App_Deal_Details.dealDetailView && App_Deal_Details.dealDetailView.model){
		  		owner = App_Deal_Details.dealDetailView.model.get("owner").id;
		  	}

		  	if(!hasScope("MANAGE_DEALS") && (CURRENT_DOMAIN_USER.id != owner) && model.get("entity_type") && model.get("entity_type") == "deal"){
		  		$('#deal_delete_privileges_error_modal').html(getTemplate("deal-delete-privileges-error-modal")).modal('show');
		  		return;
		  	}

		  	if(model.get("entity_type") && model.get("entity_type") == "note" && Current_Route.indexOf("deal/") == 0 && model.get("domainOwner") && !hasScope("MANAGE_DEALS") && (CURRENT_DOMAIN_USER.id != owner)){
		  		$('#deal_update_privileges_error_modal').html(getTemplate("deal-update-privileges-error-modal")).modal('show');
		  		return;
		  	}

		  	if(!hasScope("MANAGE_CALENDAR") && (CURRENT_DOMAIN_USER.id != owner) && model.get("entity_type") && model.get("entity_type") == "event"){
				$("#deleteEventErrorModal").html(getTemplate("delete-event-error-modal")).modal('show');
				return;
			}
			// Gets the id of the entity
			var entity_id = $(targetEl).attr('id');
			if (model && model.toJSON().type != "WEB_APPOINTMENT" || parseInt(model.toJSON().start) < parseInt(new Date().getTime() / 1000))
			{
				showAlertModal("delete", "confirm", function(){
					modelDelete(model, targetEl, function(){
						removeItemFromTimeline($("#" + entity_id, $("#timeline")));
					});
				});
				return;
			}
			modelDelete(model, targetEl);

			
	  },

	 
};

/**
 * Returns contact properties in a json
 * 
 * @method get_property_JSON
 * @param {Object}
 *            contactJSON contact as json object
 */
function get_property_JSON(contactJSON)
{
	var properties = contactJSON.properties;
	var json = {};
	$.each(properties, function(i, val)
	{
		json[this.name] = this.value;
	});
	console.log(json);
	return json;
}

/**
 * Populates send email details (from address, to address, signature and email
 * templates)
 * 
 * @method populate_send_email_details
 * @param {Object}
 *            el html object of send email form
 */
function populate_send_email_details(el)
{

	if(CURRENT_DOMAIN_USER && CURRENT_DOMAIN_USER.name)
	{
		//When name contains script word, we are getting that script as &#x73;cript from server side
		$("#emailForm", el).find('input[name="from_name"]').val(CURRENT_DOMAIN_USER.name.replace(/&#x73;+/g, 's'));
	}
	if(CURRENT_DOMAIN_USER && CURRENT_DOMAIN_USER.email)
	{
		//When email contains script word, we are getting that script as &#x73;cript from server side
		$("#emailForm", el).find('input[name="from"]').val(CURRENT_DOMAIN_USER.email.replace(/&#x73;+/g, 's'));
	}

	// Fill hidden signature field using userprefs
	// $("#emailForm").find( 'input[name="signature"]'
	// ).val(CURRENT_USER_PREFS.signature);

	// Prefill the templates
	var optionsTemplate = "<option value='{{id}}'> {{#if name}}{{name}}{{else}}{{subject}}{{/if}}</option>";
	fillSelect('sendEmailSelect', '/core/api/email/templates', 'emailTemplates', undefined, optionsTemplate, false, el, '- Fill from Template -');
}

/**
 * Activates "Timeline" tab and its tab-content in contact details and also
 * deactivates the other activated tabs.
 * 
 * @method activate_timeline_tab
 * 
 * Changed to activate first tab in the list ( on contact-details page , works
 * even on company-details page
 * @modified Chandan
 */
function activate_timeline_tab()
{
	$('#contactDetailsTab').find('li.active').removeClass('active');
	$('#contactDetailsTab li:first-child').addClass('active');

	$('div.tab-content').find('div.active').removeClass('active');
	$('div.tab-content > div:first-child').addClass('active');

	// $('#time-line').addClass('active'); //old original code for flicking
	// timeline

	if (App_Contacts.contactDetailView.model.get('type') == 'COMPANY')
	{
		fill_company_related_contacts(App_Contacts.contactDetailView.model.id, 'company-contacts');
	}
}

/**
 * Disables Send button of SendEmail and change text from Send to Sending...
 * 
 * @param elem -
 *            element to be disabled.
 * 
 */
function disable_send_button(elem)
{
	elem.css('min-width', elem.width() + 'px').attr('disabled', 'disabled').attr('data-send-text', elem.text()).text('Sending...');
}

/**
 * Enables disabled Send button and keep old text
 * 
 * @param elem -
 *            element to be enabled.
 * 
 */
function enable_send_button(elem)
{
	elem.text(elem.attr('data-send-text')).removeAttr('disabled data-send-text');
}

/**
 * Returns webstats count w.r.t domain
 */
function get_web_stats_count_for_domain(callback)
{
	// Returns web-stats count
	accessUrlUsingAjax('core/api/web-stats/JSAPI-status', function(resp){
			if(callback)
				 callback(resp);
	});
	
}

function save_contact_tab_position_in_cookie(tab_href)
{

	var position = _agile_get_prefs(contact_tab_position_cookie_name);

	if (position == tab_href)
		return;

	_agile_set_prefs(contact_tab_position_cookie_name, tab_href);
}

function load_contact_tab(el, contactJSON)
{
	timeline_collection_view = null;
	var position = _agile_get_prefs(contact_tab_position_cookie_name);
	if (position == null || position == undefined || position == "")
		position = "timeline";

	if(position == "timeline" && agile_is_mobile_browser())
			return;

	$('#contactDetailsTab a[href="#' + position + '"]', el).tab('show');

	if (!position || position == "timeline")
	{
		activate_timeline_tab()
		contact_details_tab.load_timeline();
		return;
	}

	if (contact_details_tab["load_" + position])
	{

		// Should add active class, tab is not enough as content might not be
		// shown in view.
		$(".tab-content", el).find("#" + position).addClass("active");
		contact_details_tab["load_" + position]();
	}

}

function get_emails_to_reply(emails, configured_email)
{
	var emails_array = emails.split(',');

	emails = "";

	for (var i = 0, len = emails_array.length; i < len; i++)
	{

		var email = emails_array[i].match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi)[0];

		// Skip configured email
		if (configured_email && email == configured_email)
			continue;

		// Skip current user email
		if (email == CURRENT_DOMAIN_USER.email)
			continue;

		emails += email;

		// Append comma without trailing
		if (i < len - 1)
			emails += ', ';

	}

	return emails;
}
function save_email_server_type_in_cookie(cookie_value)
{
	if (cookie_value)
	{
		var previous_cookie_value = _agile_get_prefs(email_server_type_cookie_name);
		if (previous_cookie_value === cookie_value)
			return;
		_agile_set_prefs(email_server_type_cookie_name, cookie_value, 30);
	}
}

function initializeSendEmailListeners(){

/**
	 * Populates subject and description using email templates, on select option
	 * change of "Fill From Templates" field.
	 */
	$('#send-email-listener-container').on('change', '.emailSelect', function(e)
	{
		e.preventDefault();

		// To remove previous errors
		$('#emailForm').find('.error').removeClass('error');
		$('#emailForm').find('.help-inline').css('display', 'none');

		var model_id = $('.emailSelect option:selected').prop('value');

		// When default option selected make subject and body empty
		if (!model_id)
		{
			// Fill subject and body of send email form
			$("#emailForm").find('input[name="subject"]').val("");

			set_tinymce_content('email-body', '');

			$("#emailForm").find('textarea[name="message"]').val("");
			
			$('.add-attachment-cancel').trigger("click");

			$('#eattachment_error').hide();
			return;
		}

		var emailTemplatesModel = Backbone.Model.extend({ url : '/core/api/email/templates/' + model_id, restKey : "emailTemplates" });
		var templateModel = new emailTemplatesModel();
		templateModel.fetch({ success : function(data)
		{
			var model = data.toJSON();

			var subject = model.subject;
			var text = model.text;

			// Apply handlebars template on send-email route
			if (Current_Route !== 'bulk-email' && Current_Route !== 'send-email')
			{

				// Get Current Contact
				/*
				 * var contact = App_Contacts.contactDetailView.model; var json =
				 * contact.toJSON();
				 */

				/*
				 * Get Contact properties json to fill the templates using
				 * handlebars
				 */
				var json = get_contact_json_for_merge_fields();
				var template;

				// Templatize it
				try
				{
					template = Handlebars.compile(subject);
					subject = template(json);
				}
				catch (err)
				{
					subject = add_square_brackets_to_merge_fields(subject);

					template = Handlebars.compile(subject);
					subject = template(json);
				}

				try
				{
					template = Handlebars.compile(text);
					text = template(json);
				}
				catch (err)
				{
					text = add_square_brackets_to_merge_fields(text);

					template = Handlebars.compile(text);
					text = template(json);
				}
			}

			// Fill subject and body of send email form
			$("#emailForm").find('input[name="subject"]').val(subject);

			// Insert content into tinymce
			set_tinymce_content('email-body', text);
			
			if (model.attachment_id && Current_Route != 'bulk-email' && Current_Route != 'company-bulk-email')
			{
				var el = $('.add-attachment-select').closest("div");
				$('.add-attachment-select').hide();
				el.find(".attachment-document-select").css("display", "inline");
				var optionsTemplate = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' size='{{size}}' url='{{url}}'>{{name}}</option>";
        		fillSelect('attachment-select','core/api/documents', 'documents',  function fillNew()
				{
					el.find("#attachment-select option:first").after("<option value='new'>Upload new doc</option>");
					$('#attachment-select').find('option[value='+model.attachment_id+']').attr("selected","selected");
					$('.add-attachment-confirm').trigger("click");

				}, optionsTemplate, false, el);
			}
			else if (model.attachment_id && (Current_Route == 'bulk-email' || Current_Route == 'company-bulk-email'))
			{
				$('.add-attachment-select').hide();
				$('#eattachment_error').show();
			}
			else if(!model.attachment_id && (Current_Route == 'bulk-email' || Current_Route == 'company-bulk-email'))
			{
				$('.add-attachment-select').hide();
				$('#eattachment_error').hide();
			}
			else if(!model.attachment_id)
			{
				$('.add-attachment-cancel').trigger("click");
				$('#eattachment_error').hide();
			}
		} });

	});

	/**
	 * Sends email to the target email. Before sending, validates and serializes
	 * email form.
	 */
	$('#send-email-listener-container').on('click', '#sendEmail', function(e)
					{
						e.preventDefault();

						if ($(this).attr('disabled'))
							return;
						var $form = $('#emailForm');
						// Is valid
						if (!isValidForm($form))
							return;

						var network_type = $('#attachment-select').find(":selected").attr('network_type');
						// checking email attachment type , email doesn't allow
						// google drive documents as attachments
						if (network_type)
						{
							if (network_type.toUpperCase() === 'GOOGLE')
								return;
						}

						// Saves tinymce content to textarea
						save_content_to_textarea('email-body');

						// serialize form.
						var json = serializeForm("emailForm");
						
						json.from = $(".email").find(":selected").val();
						if ((json.contact_to_ids).join())
							json.to += ((json.to != "") ? "," : "") + (json.contact_to_ids).join();

						if ((json.contact_cc_ids).join())
							json.cc += ((json.cc != "") ? "," : "") + (json.contact_cc_ids).join();

						if ((json.contact_bcc_ids).join())
							json.bcc += ((json.bcc != "") ? "," : "") + (json.contact_bcc_ids).join();

						if (json.to == "" || json.to == null || json.to == undefined)
						{
							// Appends error info to form actions block.
							$save_info = $('<span style="display:inline-block;color:#df382c;">This field is required.</span>');
							$('#emailForm').find("#to").closest(".controls > div").append($save_info);
							$('#emailForm').find("#to").focus();
							// Hides the error message after 3 seconds
							$save_info.show().delay(3000).hide(1);

							enable_send_button($('#sendEmail'));
							return;
						}

						// Is valid
						if (!isValidForm($('#emailForm')))
							return;

						// Disables send button and change text to Sending...
						disable_send_button($(this));

						// Navigates to previous page on sending email
						$
								.ajax({
									type : 'POST',
									data : JSON.stringify(json),
									dataType: 'json',
									contentType: "application/json",
									url : 'core/api/emails/contact/send-email',
									success : function()
									{

										// Enables Send Email button.
										enable_send_button($('#sendEmail'));

										window.history.back();

									},
									error : function(response)
									{
										enable_send_button($('#sendEmail'));

										// Show cause of error in saving
										$save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>' + response.responseText + '</i></p></small></div>');

										// Appends error info to form actions
										// block.
										$($('#sendEmail')).closest(".form-actions", this.el).append($save_info);

										// Hides the error message after 3
										// seconds
										if (response.status != 406)
											$save_info.show().delay(10000).hide(1);
									} });

					});

	/**
	 * Close button click event of send email form. Navigates to contact detail
	 * view.
	 */
	$('#send-email-listener-container').on('click', '#send-email-close', function(e)
	{
		e.preventDefault();

		window.history.back();
	});


$('#send-email-listener-container').on('click', '#cc-link, #bcc-link', function(e)
	{
		e.preventDefault();

		// Hide link
		$(this).hide();

		if ($(this).attr('id') === 'cc-link')
		{
			$('#email_cc').closest('.control-group').show();

			// Hide div.control-group to reduce space between subject
			if ($(this).parent().find('#bcc-link').css('display') === 'none')
				$(this).closest('.control-group').hide();

			return;
		}

		if ($(this).parent().find('#cc-link').css('display') === 'none')
			$(this).closest('.control-group').hide();

		$('#email_bcc').closest('.control-group').show();
	});

	$('#send-email-listener-container').on('click', '#from_email_link', function(e)
	{
		e.preventDefault();
		$(this).closest('.control-group').hide();
		$('#from_email').closest('.control-group').show();
		$('#from_name').closest('.control-group').show();
		return;
	});

}

function modelDelete(model, targetEl, callback){
	if (model && model.collection)
	{
		model.collection.remove(model);
	}

	if (model && model.toJSON().type == "WEB_APPOINTMENT" && parseInt(model.toJSON().start) > parseInt(new Date().getTime() / 1000))
	{
		web_event_title = model.toJSON().title;
		if (model.toJSON().contacts.length > 0)
		{
			var firstname = getPropertyValue(model.toJSON().contacts[0].properties, "first_name");
			if (firstname == undefined)
				firstname = "";
			var lastname = getPropertyValue(model.toJSON().contacts[0].properties, "last_name");
			if (lastname == undefined)
				lastname = "";
			web_event_contact_name = firstname + " " + lastname;
		}
		$("#webEventCancelModel").modal('show');
		$("#cancel_event_title").html("Delete event &#39" + web_event_title + "&#39");
		$("#event_id_hidden").html("<input type='hidden' name='event_id' id='event_id' value='" + entity_id + "'/>");
		return;
	}

	// Gets the id of the entity
	var entity_id = $(targetEl).attr('id');

	// Gets the url to which delete request is to be sent
	var entity_url = $(targetEl).attr('url');

	if (!entity_url)
		return;

	var id_array = [];
	var id_json = {};

	// Create array with entity id.
	id_array.push(entity_id);

	// Set entity id array in to json object with key ids,
	// where ids are read using form param
	id_json.ids = JSON.stringify(id_array);
	var that = targetEl;

	// Add loading. Adds loading only if there is no loaded image added
	// already i.e.,
	// to avoid multiple loading images on hitting delete multiple times
	if ($(targetEl).find('.loading').length == 0)
		$(targetEl).prepend($(LOADING_HTML).addClass('pull-left').css('width', "20px"));

	$.ajax({ url : entity_url, type : 'POST', data : id_json, success : function()
	{
		// Removes activity from list
		$(that).parents(".activity").fadeOut(400, function()
		{
			$(targetEl).remove();
		});
		if(callback && typeof(callback) === "function"){
			callback();
		}
	} });
}/*var noAnimationBruteForce = true;
var timeline_collection_view;
var MONTH_YEARS;
var month_years = [];

var timeline_view = Backbone.View.extend({ initialize : function()
{
	// Binds functions to view
	_.bindAll(this, 'render', 'appendItem', 'addItems');

	this.options.data = App_Contacts.contactDetailView.model.toJSON().tagsWithTime;
	this.options.data.push(App_Contacts.contactDetailView.model.toJSON());
	// this.options.data.push(App_Contacts.contactDetailView.model.toJSON().tagsWithTime);

	this.collection = new BaseCollection([], {});
	this.month_year_marker = [];
	this.month_year_marker_objects = [];
	configure_timeline_comparator(this.collection);
	this.collection.add(this.options.data, { silent : true });

	load_other_timline_entities();
	this.queue = new Queue;
	this.collection.bind('add', this.appendItem);

}, appendItem : function(model)
{
	if (model.get("entity_type"))
		if (model.get("entity_type") == "year-marker")
		{
			getTemplate("year-marker", model.toJSON(), "yes", function(template)
			{
				$('#timeline', App_Contacts.contactDetailView.el).isotope('insert', $(template));
			});
			return;
		}

	this.collection.add(model, { silent : true });
	var temp = [];
	temp.push(model.toJSON());
	var elements = getTemplate("timeline1", temp, undefined, function(result)
	{
		$('#timeline', App_Contacts.contactDetailView.el).isotope("insert", $(result));
	});

}, addItems : function(models)
{

	this.collection.add(models, { silent : true });
	// this.collection.add(this.month_year_marker_objects, {merge : true})
	this.buildTimlinePosts(models);

	// $("#timeline").append(getTemplate("timeline1", models));
	// $("#timeline").append($(getTemplate("timeline1", models)));
	
	 * getTemplate("timeline1", models, undefined, function(result){
	 * console.log($(result)); $("#timeline",
	 * App_Contacts.contactDetailView.el).isotope('insert', $(result),
	 * function(){ $("#timeline").isotope('reLayout'); }); })
	 * 
	 
}, render : function()
{
	// this.collection.add(this.month_year_marker_objects, {merge : true})
	this.buildTimlinePosts(this.collection.toJSON());
	
	 * if(this.collection.length > 20) { var i = 0; var length =
	 * this.collection.length; while(i < length) { var end = i + 20;
	 * 
	 * end = end > length ? length - 1 : end; if(end == i) break;
	 * console.log(this.collection); console.log(end + ", " + i);
	 * console.log(this.collection.toJSON().slice(i, end)); var _this = this;
	 * //console.log(getTemplate("timeline1", this.collection.toJSON()));
	 * getTemplate("timeline1", this.collection.toJSON().slice(i, end),
	 * undefined, function(result){
	 * 
	 * if(i == 0) { //var _this = this; $("#timeline",
	 * App_Contacts.contactDetailView.el).append(result);
	 * 
	 * //configure_timeline(); } else { var $newEls = $(result);
	 * //$("#timeline").append($newEls).isotope( 'appended', $newEls);
	 * $("#timeline",App_Contacts.contactDetailView.el).isotope('insert',
	 * $(result)); }
	 * 
	 * 
	 * 
	 * _this.queue.add_function(function(models){ alert(models); // return true; },
	 * _this.collection.toJSON().slice(i, end))
	 * 
	 * 
	 * 
	 * }); i += 20; } }
	 * 
	 * 
	 * 
	 * //configure_timeline();
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * //create_month_marker(MONTH_YEARS, true,
	 * App_Contacts.contactDetailView.model.el);
	 * 
	 * 
	 * 
	 * //$("#timeline").isotope('reLayout'); // Resizes the line height based on
	 * entities overall height /* $('#timeline').resize(function(){
	 * adjust_line(); alert("test"); });
	 
}, buildTimlinePosts : function(models)
{
	var length = models.length;
	if (!length)
		return;

	this.addToQueue(models)
	return;

	var i = 0;
	while (i < length)
	{
		var end = i + 50;

		end = end > length ? length : end;
		if (end == i)
			break;
		this.addToQueue(models.slice(i, end));
		i += 50;
	}
}, addToQueue : function(models)
{
	this.queue.add_function(quedfunction, models);
}

});

function quedfunction(models)
{
	var is_empty_queue;
	// timeline_collection_view.queue.running = true;
	getTemplate("timeline1", models, undefined, function(result)
	{
		$("#timeline").isotope('insert', $(result), function(ele)
		{
			timeline_collection_view.queue.running = false;
			timeline_collection_view.queue.next();
		});
	});
}

function load_timeline_details(el, contactId, callback1, noAnimation)
{
	noAnimationBruteForce = true;
	init_timeline();

}

function init_timeline()
{
	MONTH_YEARS = [];
	// Load plugins for timeline
	head.load("/lib/isotope.pkgd.js", LIB_PATH + "lib/jquery.event.resize.js", "css/misc/agile-timline.css", function()
	{

		configure_timeline();
		timeline_collection_view = new timeline_view();
		timeline_collection_view.render();
		remove_loading_img(App_Contacts.contactDetailView.el);
	});

}

function configure_timeline_comparator(collection)
{

	// Override comparator to sort models on time base
	collection.comparator = function(item)
	{
		var month_year = entity_created_month_year(item.toJSON());

		if (month_year)
			if (timeline_collection_view && timeline_collection_view.month_year_marker.indexOf(month_year) == -1)
			{

				timeline_collection_view.month_year_marker.push(month_year);

				var monthYear = month_year.split('-');
				var timestamp = getTimestamp(monthYear[0], monthYear[1]) / 1000;
				console.log("(((((((((((((((((((((((((((((((((((((" + monthArray[monthYear[0]].split(' ')[0]);
				var context = { year : monthArray[monthYear[0]].split(' ')[0], timestamp : timestamp, "entity_type" : "year-marker" };
				if (!collection.where({ "year" : monthArray[monthYear[0]].split(' ')[0] })[0])
					;
				collection.add(context);

				console.log(context);
				timeline_collection_view.month_year_marker_objects.push(context);
			}

		if (item.get('created_time'))
		{
			return item.get('created_time');
		}
		else if (item.get('createdTime'))
		{
			return item.get('createdTime') / 1000;
		}
		else if (item.get('time'))
		{
			return item.get('time') / 1000;
		}
		else if (item.get('date_secs'))
		{
			return item.get('date_secs') / 1000;
		}
		else if (item.get('timestamp'))
		{
			return timestamp;
		}

		return item.get('id');
	}
}

function configure_timeline()
{
	customize_isotope();

	var $container = $("#timeline", App_Contacts.contactDetailView.el);

	// Initializes isotope with options (sorts the data based on created time)
	$container.isotope({ itemSelector : ".item", transformsEnabled : true, layoutMode : 'spineAlign', spineAlign : { gutterWidth : 56 },
		getSortData : { timestamp : function($elem)
		{
			var time = parseFloat($elem.find('.timestamp').text());

			if (!time)
				return 0;
			// If time is in milliseconds then return time in seconds
			if ((time / 100000000000) > 1)
				return time / 1000;

			return time
		} }, sortBy : 'timestamp', sortAscending : false, itemPositionDataEnabled : true });
}

function load_other_timline_entities()
{
	var contact = App_Contacts.contactDetailView.model.toJSON();
	var contactId = contact['id'];
	
	load_related_entities(contactId);
	load_stats(contact);
	load_campaign_logs(contactId);

}

function load_campaign_logs(contactId)
{
	var url = '/core/api/campaigns/logs/contact/' + contactId;
	$
			.getJSON(
					url,
					function(data)
					{
						if (data.length == 0)
							return;
						var log_models = [];

						$
								.each(
										data,
										function(index, model)
										{

											// Add these log-types in timeline
											if (model.log_type == 'EMAIL_SENT' || model.log_type == 'EMAIL_OPENED' || model.log_type == 'EMAIL_CLICKED' || model.log_type == 'SET_OWNER' || model.log_type == 'SCORE' || model.log_type == 'ADD_DEAL' || model.log_type == 'TWEET')
											{
												log_models.push(model);
											}

										});

						timeline_collection_view.addItems(log_models);
					})
}

function load_stats(contact)
{
	
	 * Stores all urls (notes, deals and tasks) in an array to fetch data using
	 * same collection by changing its url.
	 

	var email = getPropertyValue(contact.properties, "email");


	// Go for mails when only the contact has an email
	if (email)
	{
		get_stats('core/api/emails/imap-email?e=' + encodeURIComponent(email) + '&c=10&o=0', contact, App_Contacts.contactDetailView.el, function(stats)
		{
			// Clone emails Array to not affect original emails

			var stats_processed = [];
			if (stats && stats.length > 0)
			{
				for(var i = 0; i < stats.length; i ++)
				{
					// if error occurs in imap (model is obtained with the error msg along with contact-email models),
					// ignore that model
					if(('errormssg' in stats[i]) || stats[i].status === "error")
						continue;
					
					stats_processed.push(stats[i]);
				}
				
				
				// Addes opened emails into timeline
				var opened_emails = getOpenedEmailsFromEmails(stats_processed);
				if (opened_emails.length > 0)
					stats_processed.push(opened_emails);

				timeline_collection_view.addItems(stats_processed);
			}
		})
	}
}

function load_related_entities(contactId)
{
	var entity_types = ["deals", "notes", "cases", "tasks"];

	$.getJSON('core/api/contacts/related-entities/' + contactId, function(data)
	{
		var entities = [];

		for ( var index in entity_types)
		{
			if (data[entity_types[index]].length == 0)
				continue;

			entities = entities.concat(data[entity_types[index]]);

		}

		timeline_collection_view.addItems(entities);
	});
}

function getOpenedEmailsFromEmails(emails)
{
	var opened_emails = [];
	$.each(emails, function(index, model)
	{
		if (model.email_opened_at && model.email_opened_at !== 0)
		{
			// Need createdTime key to sort in timeline.
			model.createdTime = (model.email_opened_at) * 1000;

			// Temporary entity to identify timeline template
			model.agile_email = "agile_email";

			// To avoid merging with emails template having date entity
			model.date = undefined;

			opened_emails.push(model);
		}
		
	});

	return opened_emails;
}

function getTimlineTemplate(models)
{

}

function add_entity_to_timeline(model)
{
	var list = [];
	list.push(model.toJSON())

	// console.log(model.get('id'));

	if (!timeline_collection_view.collection.get(model.get('id')))
	{
		timeline_collection_view.addItems(list);
		return;
	}

	update_entity_template(model);

}

function update_entity_template(model)
{
	$("#" + model.get("id"), $('#timeline', App_Contacts.contactDetailView.el)).html(getTemplate('timeline1', [
		model.toJSON()
	]));
}

function get_stats(email, contact, el)
{
	// If there are no web-stats - return
	if(!(_agile_get_prefs('_agile_jsapi') != null && _agile_get_prefs('_agile_jsapi') == "true") && (NO_WEB_STATS_SETUP && get_web_stats_count_for_domain() == '0'))
	{
		// Remove loading image of mails
		$('#time-line', el).find('.loading-img-stats').remove();
		
		return;
	}
	
	// Made global variable false and set cookie
	NO_WEB_STATS_SETUP = false;
	_agile_set_prefs('_agile_jsapi',true, 500);
	
	var StatsCollection = Backbone.Collection.extend({
		                        url:'core/api/web-stats?e='+ encodeURIComponent(email)
		                                             });
	
	this.statsCollection = new StatsCollection();
	statsCollection.fetch({
		success:function(data){
			
			is_mails_fetched = true;
			is_logs_fetched = false;
			is_array_urls_fetched = false;
			
			show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
			
         	$('#time-line', el).find('.loading-img-stats').remove();
			
			// Checks whether data is empty or not.
			if (data.toJSON() && data.toJSON().length > 0) {
				
				// Gets address of the contact from its browsing history
				var address = getPropertyValue(contact.properties, "address");
				
				if(!address)
				{
				var addressJSON = {};
				
				if(data.toJSON()[0].city != "")
				{
				    addressJSON.city = ucfirst(data.toJSON()[0].city);
				    addressJSON.state = ucfirst(data.toJSON()[0].region);
				    addressJSON.country = getCode(data.toJSON()[0].country);
				
					// If contact has no address property push the new one
					contact.properties.push({
					"name" : "address",
					"value" : JSON.stringify(addressJSON)
				                       });
					
					// Update contact with the browsing address
					var contactModel = new Backbone.Model();
					contactModel.url = 'core/api/contacts';
					contactModel.save(contact, {
						success : function(obj) {
						                        }
					                  });
				  }
				}
								
				timeline_collection_view.addItems(data);
				
				
				addTagAgile(CODE_SETUP_TAG);	
			}
			
		},
		error: function(){
			is_mails_fetched = true;
			show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
			
			// Remove loading image of mails
			$('#time-line', el).find('.loading-img-stats').remove();
		}
	});
	}

*//**
 * Removes an element from timeline
 * 
 * @param element
 *//*
function removeItemFromTimeline(element)
{
	console.log(element);
	$('#timeline').isotope('remove', element, function()
	{
		$("#timeline").isotope('reLayout')
	});
}

function addTagToTimelineDynamically(tags)
{	
	timeline_collection_view.addItems([tag]);
}*//**
 * Fetches all the entities (notes, deals, tasks, logs and mails) simultaneously, 
 * which are related to a contact (in contactDetailView) and initiates isotope 
 * with the first fetched details (to show in time-line) and inserts the next 
 * fetched data into time-line.
 *  
 * @method load_timeline_details 
 * @param {Object} el
 * 				html object of contact detail view
 * @param contactId
 * 				id of a contact in contact detail view
 *//*


 * Taken as global to verify whether timeline is defined or not while adding
 * entities (notes, tasks and etc..) related to a contact.
   
var timelineView;
function load_timeline_details1(el, contactId, callback1)
{
	// Sets to true, if the associated entity is fetched 
	var is_logs_fetched = false, is_mails_fetched = false, is_array_urls_fetched = false;
	
		*//**
		 * An empty collection (length zero) is created to add first fetched 
		 * details and then initializes isotope with this data 
		 *//* 
		timelineView =  new Base_Collection_View({
			templateKey: 'timeline',
			individual_tag_name: 'li',
		});
	
		
		*//**
		 * Another empty collection is created to add other data (apart from first fetched)
		 * which is fetched while the isotope is getting initialized with the first fetched 
		 * data, because it can not be inserted with out complete initialization of isotope.  
		 * 
		 *//*
		var timelineViewMore =  new Base_Collection_View({
			templateKey: 'timeline',
			individual_tag_name: 'li',
		});
		
		// Override comparator to sort models on time base
		timelineView.collection.comparator = function(item){
			if (item.get('created_time')) {
	            return item.get('created_time');
	        }
			if (item.get('createdTime')) {
				return item.get('createdTime')/1000;
		    }
	        if (item.get('time')) {
	        	return item.get('time')/1000;
	        }
	        if (item.get('date_secs')) {
	        	return item.get('date_secs')/1000;
	        }
	        return item.get('id');
		}
		
		var contact = App_Contacts.contactDetailView.model.toJSON();
		
		addTagsToTimeline(App_Contacts.contactDetailView.model, el);
		
		// Fetches logs related to the contact
		var LogsCollection = Backbone.Collection.extend({
			url: '/core/api/campaigns/logs/contact/' + contactId,
		});
		var logsCollection = new LogsCollection();
		logsCollection .fetch({
			success: function(){
				is_logs_fetched = true;
				show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
				
				// Remove logs related loading image
				$('#time-line', el).find('.loading-img-log').remove();
				if(logsCollection.length == 0)
					return;
	
				// If timeline is not defined yet, calls setup_timeline for the first time
				if(timelineView.collection.length == 0){
					$.each(logsCollection.toJSON(), function(index, model){
						
						// Add these log-types in timeline
						if(model.log_type == 'EMAIL_SENT' || model.log_type == 'EMAIL_OPENED' || model.log_type == 'EMAIL_CLICKED' 
							 || model.log_type == 'SET_OWNER' || model.log_type == 'SCORE'
								|| model.log_type == 'ADD_DEAL' || model.log_type == 'TWEET')
						{
							timelineView.collection.add(model, {silent : true});
						}
						
					});
								
					
					 * Calls setup_timeline with a callback function to insert other models 
					 * (fetched while initializing the isotope) if available.
					 
					setup_timeline(timelineView.collection.toJSON(), el, function(el){
						$.each(timelineViewMore.collection.toJSON(), function(index,data){
							var newItem = $(getTemplate("timeline", data));
							newItem.find('.inner').append('<a href="#" class="open-close"></a>');
							$('#timeline', el).isotope( 'insert', newItem);
						});
					});
				}else{
					var logs_array = [];	
					
					 * Already setup_timeline is called with the first fetched data. Adds all the
					 * logs of each campaign to an array and then inserts the array values 
					 * (avoids calling insertion and month marker multiple times).
					 * Inserts the data into timeline or adds to other collection (timelineViewMore) 
					 * by validating the status of isotope initialization.
					    
					$.each(logsCollection.toJSON(), function(index, model) {						
						
						// Add these log-types in timeline.
						if(model.log_type == 'EMAIL_SENT' || model.log_type == 'EMAIL_OPENED' || model.log_type == 'EMAIL_CLICKED' 
							 || model.log_type == 'SET_OWNER' || model.log_type == 'SCORE'
									|| model.log_type == 'ADD_DEAL' || model.log_type == 'TWEET')
						{
							logs_array.push(model);			
						    timelineView.collection.add(model, {silent : true});
						}
						
						//validate_insertion(JSON.parse(model.logs), timelineViewMore);
					});
					validate_insertion(logs_array, timelineViewMore);
				}
			
			}
		});
		
		*//** Emails Collection Starts**//*
		var contact = App_Contacts.contactDetailView.model;
		var json = contact.toJSON();
		 
		// Get email of the contact in contact detail
		var email = getPropertyValue(json.properties, "email");
		
		// Go for mails when only the contact has an email
		if(email){
			
			var EmailsCollection = Backbone.Collection.extend({
				url: 'core/api/emails/imap-email?e=' + encodeURIComponent(email) + '&c=10&o=0',
			});
			var emailsCollection = new EmailsCollection();
			emailsCollection .fetch({
				success: function(){
					is_mails_fetched = true;
					show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
					
					$('#time-line', el).find('.loading-img-email').remove();
					
					
					
					if(emailsCollection.toJSON()[0] && emailsCollection.toJSON()[0]['emails'] && emailsCollection.toJSON()[0]['emails'].length > 0){
					
						// Adds Personal Email Opened Track Data to timeline.
						add_personal_email_opened_to_timeline(emailsCollection.toJSON()[0]['emails'],el);

						// If timeline is not defined yet, calls setup_timeline for the first time
						if(timelineView.collection.length == 0 && emailsCollection.toJSON()[0]){

							// No callback function is taken as the email takes more time to fetch
							setup_timeline(timelineView.collection.toJSON(), el, function(el) {

								$.each(timelineViewMore.collection.toJSON(), function(index,data){
									
									// if error occurs in imap (model is obtained with the error msg along with contact-email models),
									// ignore that model
									if(('errormssg' in data) || data.status === "error")
										return true;
									
									var newItem = $(getTemplate("timeline", data));
									newItem.find('.inner').append('<a href="#" class="open-close"></a>');
									$('#timeline', el).isotope( 'insert', newItem);
								});
							});
						}else{
							    var emailsArray = [];
							    
								$.each(emailsCollection.toJSON()[0]['emails'], function(index, model){
									
									// if error occurs in imap (model is obtained with the error msg along with contact-email models),
									// ignore that model
									if(('errormssg' in model) || model.status === "error")
										return true;
									
									emailsArray.push(model);
								});
								
							validate_insertion(emailsArray, timelineViewMore);
							}
					}
				},
				error: function(){
					is_mails_fetched = true;
					show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
					
					// Remove loading image of mails
					$('#time-line', el).find('.loading-img-email').remove();
				}
			});
			
			// Gets address of the contact from its browsing history
			var address = getPropertyValue(json.properties, "address");
           
			//if(!address)
				//get_address_from_browsing_history(email, json,el);
			
			// Gets address from stats and save to contact
			get_stats(email,json,el);
		}else{
			is_mails_fetched = true;
			
			// Removes loading image of mails, if there is no email to contact  
			$('#time-line', el).find('.loading-img-email').remove();
			$('#time-line',el).find('.loading-img-stats').remove();
		}
		*//**End of Emails Collection**//*
		
		*//**
		 * Defines a collection to store the response of all the request urls (notes, deals 
		 * and tasks) in the array (fetchContactDetails).
		 *//* 
		
		var entity_types = ["deals", "notes", "cases", "tasks"]
		$.getJSON('core/api/contacts/related-entities/' + contactId, function(data){
			var entities = [];
			
			for(var index in entity_types)
			{
				entities = entities.concat(data[entity_types[index]]);
				
			}
			
			remove_loading_img(el);
			
			
			timelineView.collection.add(entities , {silent : true});
			
		
				// If timeline is not defined yet, calls setup_timeline for the first time
				if(timelineView.collection.length == 0){

					
					 * Calls setup_timeline with a callback function to insert other models 
					 * (fetched while initializing the isotope) if available.
					 
					setup_timeline(timelineView.collection.toJSON(), el, function(el) {
						
						$.each(timelineViewMore.collection.toJSON(), function(index,data){
							var newItem = $(getTemplate("timeline", data));
							newItem.find('.inner').append('<a href="#" class="open-close"></a>');
							$('#timeline', el).isotope( 'insert', newItem);
						});
					})
				}else{
					
					
					 * Already setup_timeline is called with the first fetched data.
					 * 
					 * Inserts the data into timeline or adds to other collection (timelineViewMore) 
					 * by validating the status of isotope initialization.
					 							
					validate_insertion(entities, timelineViewMore);
				}
		})
}	

*//**
 * Inserts the models into timeline, if isotope is defined (initialized 
 * completely) otherwise adds to a collection (timelineViewMore) to insert
 * them on complete initialization of isotope from setupTimelin callback
 * function.
 * 
 * @method validate_insertion
 * @param models
 * 			collection of models to add timeline
 * @param timelineViewMore
 * 			collection to add models
 * 			
 *//*
function validate_insertion(models, timelineViewMore){
	
	
	 * If isotope is not defined an exception will be raised, then
	 * it goes to catch block and adds the data to the collection
	 
	try{
		head.load(LIB_PATH + "lib/jquery.isotope.min.js", LIB_PATH + "lib/jquery.event.resize.js", "css/misc/agile-timline.css", function(){
		

			if($('#timeline').isotope()) {
				var month_years = [];
				$.each(models, function(index, model){
					var month_year = entity_created_month_year(model);

					if (month_years.indexOf(month_year) < 0 && MONTH_YEARS.indexOf(month_year) < 0){
						month_years[month_years.length] = month_year;
						MONTH_YEARS[MONTH_YEARS.length] = month_year;
					}	
					var newItem = $(getTemplate("timeline", model));
					newItem.find('.inner').append('<a href="#" class="open-close"></a>');
					$('#timeline').isotope( 'insert', newItem);
				});

				// add a month marker for each month that has a post
				create_month_marker(month_years, true, App_Contacts.contactDetailView.el);
			}
		});
		
	}catch(err){
		console.log(err);
		timelineViewMore.collection.add(models);
	}
}

*//**
 * Shows "no entities present" pad content for timeline by verifying
 * whether all the entities are fetched or not.
 *  
 * @param is_logs_fetched
 * @param is_mails_fetched
 * @param is_array_urls_fetched
 *//*
function show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched){
	if(!is_logs_fetched || !is_mails_fetched || !is_array_urls_fetched )
		return;
	
	if (timelineView.collection.length == 0)
		$("#timeline-slate").css('display', 'block');
}

// Stores month names with their maximum days to get time stamp (milliseconds)
var monthArray = ['January 31', 'February 28', 'March 31', 'April 30', 'May 31', 'June 30',
                  'July 31', 'August 31', 'September 30', 'October 31', 'November 30', 'December 31'];

// Stores "monthIndex-year" of timeline initiating entities
var MONTH_YEARS;

*//**
 * Get the timestamp (milliseconds) given month of the year.
 *//*
function getTimestamp(month_index, year){
	if((year % 4) == 0)
		monthArray[1] = 'February 29';
	return Date.parse(monthArray[month_index] + ', ' + year) + 86400000 - 1; 
}

*//**
 * Returns month index and full year of the given entity as "-" separated.
 * @param model
 * @returns {String}
 *//*
function entity_created_month_year(model){
	if(model.created_time)
		return month_year = new Date(model.created_time * 1000).getMonth() + '-' + new Date(model.created_time * 1000).getFullYear();
	if(model.createdTime)
		return month_year = new Date(model.createdTime).getMonth() + '-' + new Date(model.createdTime).getFullYear();
	else if(model.time)
		return month_year = new Date(model.time * 1000).getMonth() + '-' + new Date(model.time * 1000).getFullYear();
	else if(model.date_secs)
		return month_year = new Date(model.date_secs).getMonth() + '-' + new Date(model.date_secs).getFullYear();
}

*//**
 * Inserts or appends month marker to the timeline
 * @param month_years
 * @param is_insert
 *//*
function create_month_marker(month_years, is_insert, el){
	// add a year marker for each year that has a post
	$.each(month_years, function(i, val){
		var monthYear = val.split('-');
		var timestamp = getTimestamp(monthYear[0], monthYear[1]) / 1000;
		var context = {year: monthArray[monthYear[0]].split(' ')[0], timestamp: timestamp};
		if(is_insert){
			$('#timeline', el).isotope( 'insert', $(getTemplate("year-marker", context)));
		}	
		else{
			$('#timeline', el).append(getTemplate("year-marker", context));
		}	
	});
	$("#timline").isotope('reloadItems');
}


function add_entity_to_timeline(model)
{
	var list = [];
	list.push(model.toJSON())

	// console.log(model.get('id'));

	if (!timelineView.collection.get(model.get('id')))
	{
		timelineView.collection.add(model,  {silent : true})
		validate_insertion(list);
		return;
	}


	update_entity_template(model);

}

function update_entity_template(model)
{
	$("#" + model.get("id"), $('#timeline', App_Contacts.contactDetailView.el)).html(getTemplate('timeline', model.toJSON()));
}


*//**
 * Loads minified jquery.isotope plug-in and jquery.event.resize plug-in to 
 * initialize the isotope and appends the given models to the timeline, by 
 * loading their corresponding templates using handlebars
 * 
 * @method setup_timeline 
 * @param models
 * 			models to append timeline
 * @param el
 * 			html object of the contact detail view
 * @param callback
 * 			function to insert models into timeline on its initialization
 *//*
function setup_timeline(models, el, callback) {
	
	// Removes pad content of no data presents
	 $("#timeline-slate").css('display', 'none');
	 
	 MONTH_YEARS = [];
	
	// Load plugins for timeline	
	
		
	 head.load(LIB_PATH + "lib/jquery.isotope.min.js", LIB_PATH + "lib/jquery.event.resize.js", "css/misc/agile-timline.css", function(){
		
		 
		 * Defines the layout and its dimensions, container size and
		 * arrangement of data position added to timeline etc..
		  
		customize_isotope();
		
		
		 * Appends each model to timeline, by loading their corresponding
		 * templates using handlebars
		 
		$.each(models, function(index, model) {
			
			// saves the month and years so we can create month markers
			var month_year = entity_created_month_year(model);
			
					
			if (MONTH_YEARS.indexOf(month_year) < 0)
				MONTH_YEARS[MONTH_YEARS.length] = month_year;
			
			//console.log(MONTH_YEARS);
			
			// combine data & template
			$('#timeline', el).append(getTemplate("timeline", model));
		}); //each

		// add a month marker for each month that has a post
		create_month_marker(MONTH_YEARS, false, el);

		var $container = $("#timeline", el);
		
		// Initializes isotope with options (sorts the data based on created time)
		$('#timeline', el).imagesLoaded(function(){
			$container.isotope({
				itemSelector : '.item',
				transformsEnabled: true,
				layoutMode: 'spineAlign',
				spineAlign:{
					gutterWidth: 56
				},
				getSortData: {
					timestamp: function($elem){
						var time = parseFloat($elem.find('.timestamp').text());
						
						// If time is in milliseconds then return time in seconds
						if ((time / 100000000000) > 1)
							return time/1000;
						
						return time
					}
				},
				sortBy: 'timestamp',
				sortAscending: false,
				itemPositionDataEnabled: true
			});
		});
		
		// Using autoellipsis for showing 3 lines of message
		head.js(LIB_PATH + 'lib/jquery.autoellipsis.min.js', function(){
			$('#timeline', el).find("#autoellipsis").ellipsis();
			$('#timeline', el).isotope('reLayout');
		});
		
		// add open/close buttons to each post
		$('#timeline .item.post', el).each(function(){
			$(this).find('.inner').append('<a href="#" class="open-close"></a>');
		});
		// Resizes the line height based on entities overall height
		$('#timeline', el).resize(function(){
			adjust_line();
		});
		
		
		 * Calls the callback function to insert the data into timeline, which
		 * is not inserted due to initialization issues. 
		  
		if(callback && typeof(callback) === "function"){
			callback(el);
		}
		
	}); // head js
	
}


 * Keep the actual line from extending beyond the last item's date tab
 
function adjust_line(){
	var $lastItem = $('.item.last');
	var itemPosition = $lastItem.data('isotope-item-position');
	var dateHeight = $lastItem.find('.date').height();
	var dateOffset = $lastItem.find('.date').position();
	var innerMargin = parseInt($lastItem.find('.inner').css('marginTop'));
	var lineHeight = itemPosition.y + innerMargin + dateOffset.top + (dateHeight / 2);
	$('#line').height(lineHeight);
}

*//**
 * Defines the layout and its dimensions, container size and
 * arrangement of data position added to timeline etc..
 * 
 * @method customize_isotope
 *//*
function customize_isotope()
{
	// Resets the layout based on items 
	$.Isotope.prototype._spineAlignReset = function() {
		this.spineAlign = {
			colA: 0,
			colB: 0,
			lastY: -60
		};
	};

	
	 * Defines the dimentions of layout, and alters the position of data.
	 * It executes every tiem, when a modal is added or deleted from timeline.
	  
	$.Isotope.prototype._spineAlignLayout = function( $elems ) {
		var	instance = this,
			props = this.spineAlign,
			gutterWidth = Math.round( this.options.spineAlign && this.options.spineAlign.gutterWidth ) || 0,
			centerX = Math.round(this.element.width() / 2);

		$elems.each(function(i, val){
			var $this = $(this);
			$this.removeClass('last').removeClass('top');
			if (i == $elems.length - 1)
				$this.addClass('last');
			var x, y;
			if ($this.hasClass('year-marker')){
				var width = $this.width();
				x = centerX - (width / 2);
				if (props.colA >= props.colB){
					y = props.colA;
					if (y == 0) $this.addClass('top');
					props.colA += $this.outerHeight(true);
					props.colB = props.colA;
				}
				else{
					y = props.colB;
					if (y == 0) $this.addClass('top');
					props.colB += $this.outerHeight(true);
					props.colA = props.colB;
				}
			}
			else{
				$this.removeClass('left').removeClass('right');
				var isColA = props.colB >= props.colA;
				if (isColA)
					$this.addClass('left');
				else
					$this.addClass('right');
				x = isColA ?
						centerX - ( $this.outerWidth(true) + gutterWidth / 2 ) : // left side
						centerX + (gutterWidth / 2); // right side
				y = isColA ? props.colA : props.colB;
				if (y - props.lastY <= 60){
					var extraSpacing = 60 - Math.abs(y - props.lastY);
					$this.find('.inner').css('marginTop', extraSpacing);
					props.lastY = y + extraSpacing;
				}
				else{
					$this.find('.inner').css('marginTop', 0);
					props.lastY = y;
				}
				props[( isColA ? 'colA' : 'colB' )] += $this.outerHeight(true);
			}
			instance._pushPosition( $this, x, y );
		});
	};
	
	// Sets the container size based on spinAlignLayout function resulrs
	$.Isotope.prototype._spineAlignGetContainerSize = function() {
		var size = {};
		size.height = this.spineAlign[( this.spineAlign.colB > this.spineAlign.colA ? 'colB' : 'colA' )];
		return size;
	};
	$.Isotope.prototype._spineAlignResizeChanged = function() {
		return true;
	};
}	

*//**
 * Removes loading image from timeline view
 * 
 * @param el
 * 			html object of contact detail view
 *//*
function loading_img(el){
	$('#time-line', el).find('.loading-img').remove();
}

*//**
 * When contact has no address, based on its email, traces address from its
 * browsing history and stores as address property of the contact.
 * 
 * To get address of a contact with its email, you should run the java script
 * api provided at api & analytics (admin settings) by pushing the email of the
 * contact
 * 
 * @param {String}
 *            email of the contact
 * @param {Object}
 *            contact present in contact detail view
 * @param {Object}
 *            backbone element.
 *//*function get_stats(email, contact, el)
{
	// If there are no web-stats - return
	if(!(_agile_get_prefs('_agile_jsapi') != null && _agile_get_prefs('_agile_jsapi') == "true") && (NO_WEB_STATS_SETUP && get_web_stats_count_for_domain() == '0'))
	{
		is_mails_fetched = true;
		is_logs_fetched = false;
		is_array_urls_fetched = false;
		show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
		
		// Remove loading image of mails
		$('#time-line', el).find('.loading-img-stats').remove();
		
		return;
	}
	
	// Made global variable false and set cookie
	NO_WEB_STATS_SETUP = false;
	createCookie('_agile_jsapi',true, 500);
	
	var StatsCollection = Backbone.Collection.extend({
		                        url:'core/api/web-stats?e='+ encodeURIComponent(email)
		                                             });
	
	this.statsCollection = new StatsCollection();
	statsCollection.fetch({
		success:function(data){
			
			is_mails_fetched = true;
			is_logs_fetched = false;
			is_array_urls_fetched = false;
			
			show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
			
         	$('#time-line', el).find('.loading-img-stats').remove();
			
			// Checks whether data is empty or not.
			if (data.toJSON() && data.toJSON().length > 0) {
				
				// Gets address of the contact from its browsing history
				var address = getPropertyValue(contact.properties, "address");
				
				if(!address)
				{
				var addressJSON = {};
				
				if(data.toJSON()[0].city != "")
				{
				    addressJSON.city = ucfirst(data.toJSON()[0].city);
				    addressJSON.state = ucfirst(data.toJSON()[0].region);
				    addressJSON.country = getCode(data.toJSON()[0].country);
				
					// If contact has no address property push the new one
					contact.properties.push({
					"name" : "address",
					"value" : JSON.stringify(addressJSON)
				                       });
					
					// Update contact with the browsing address
					var contactModel = new Backbone.Model();
					contactModel.url = 'core/api/contacts';
					contactModel.save(contact, {
						success : function(obj) {
						                        }
					                  });
				  }
				}
								
				// If timeline is not defined yet, calls setup_timeline for the first time
				if(timelineView.collection.length == 0)
				{					
					$.each(data.toJSON(),function(index,model){					
						timelineView.collection.add(model,  {silent : true});
					});					
					
					// No callback function is taken as the stats takes more time to fetch
					setup_timeline(timelineView.collection.toJSON(), el);							
				}
				else
				{					
						$.each(data.toJSON(),function(index,model){
						var newItem = $(getTemplate("timeline", model));
						newItem.find('.inner').append('<a href="#" class="open-close"></a>');
						
						
						 * Inserts mails to timeline with out validating the isotope status,
						 * as it takes more time to fetch.
						   
						$('#timeline', el).isotope( 'insert', newItem);
						});
				}
				
				addTagAgile(CODE_SETUP_TAG);	
			}
			
		},
		error: function(){
			is_mails_fetched = true;
			show_timeline_padcontent(is_logs_fetched, is_mails_fetched, is_array_urls_fetched);
			
			// Remove loading image of mails
			$('#time-line', el).find('.loading-img-stats').remove();
		}
	});
	}
 
 function addTagsToTimeline(contact, el)
 {
 	if (timelineView.collection.length == 0)
 	{
 		timelineView.collection.add(contact, {silent : true});

 		// Add tags in timeline
 		$.each(contact.get('tagsWithTime'), function(index, tag)
 		{
 			// console.log(tag);
 			timelineView.collection.add(tag, {silent : true});
 		})
 		setup_timeline(timelineView.collection.toJSON(), el);

 	}
 	else
 	{
 		var newItem = $(getTemplate("timeline", contact));
 		var newItem = $(getTemplate("timeline", contact));

 		newItem.find('.inner').append('<a href="#" class="open-close"></a>');
 		
 		 * Inserts mails to timeline with out validating the isotope status, as
 		 * it takes more time to fetch.
 		 
 		$('#timeline', el).isotope('insert', newItem);
 	}
 }

 function addTagToTimelineDynamically(tags)
 {
	 alert("tags tag");
	 if(!timelineView || !timelineView.collection)
		 return;
	 
 	if (timelineView.collection.length == 0)
 	{
 		$.each(tags, function(index, tag)
 		{
 			timelineView.collection.add(tag, {silent : true});
 		});

 		setup_timeline(timelineView.collection.toJSON(), el);
 		return;
 	}

 	var tags_to_add = [];
 	$.each(tags, function(index, tag)
 	{
 		if (!timelineView.collection.where(tag).length == 0)
 			return;

 		timelineView.collection.add(tag, {silent : true});
 		tags_to_add.push(tag);
 	});

 	validate_insertion(tags_to_add);

 	
 	 * var newItem = $(getTemplate("timeline", tag));
 	 * 
 	 * newItem.find('.inner').append('<a href="#" class="open-close"></a>');
 	 * 
 	 * Inserts mails to timeline with out validating the isotope status, as it
 	 * takes more time to fetch.
 	 * 
 	 * $('#timeline', el).isotope( 'insert', newItem);
 	 

 }
 
 *//**
  * Adds Email Opened data having email opened time to timeline.
  * 
  * @param emails - Emails JSON.
  * 
  * @param el - Backbone el.
  **//*
 function add_personal_email_opened_to_timeline(emails,el)
 {
	// Temporary array to clone emails
	var emails_clone = [];
	
	// Clone emails Array to not affect original emails
	$.extend(true, emails_clone, emails);
	
	var emails_opened = [];
	 
	 if (timelineView.collection.length == 0)
	 	{
			 $.each(emails_clone,function(index, model){
				if(model.email_opened_at && model.email_opened_at !== 0)
			 	{
				 	// Need createdTime key to sort in timeline.
					model.createdTime = (model.email_opened_at) * 1000;
					
				 	// Temporary entity to identify timeline template
					model.agile_email = "agile_email";
				 	
					// To avoid merging with emails template having date entity
					model.date = undefined;
					
				 	timelineView.collection.add(model, {silent : true});
			 	}
			 });
			 
			 setup_timeline(timelineView.collection.toJSON(), el);
	 	}
	 else
		 {
		 $.each(emails_clone, function(index, model){
				if(model.email_opened_at && model.email_opened_at !== 0)
			 	{
					// Need createdTime key to sort in timeline.
					model.createdTime = (model.email_opened_at) * 1000;
				 	
					// Temporary entity to identify timeline template
					model.agile_email = "agile_email";
				 	
					// To avoid merging with emails template having date entity
					model.date = undefined;
				 	
					emails_opened.push(model);
			 	}
			 });
		 
		 validate_insertion(emails_opened);
		 }
 }

 *//**
  * Removes an element from timeline
  * 
  * @param element
  *//*
 function removeItemFromTimeline(element)
 {
 
	 try
	 {
		 var element = $('#timeline');
		 if(element.length == 0)
			 return;
		 $(element).isotope('remove', element, function()
				 {
			 		$("#timeline").isotope( 'reLayout')
				 });
	 }
	 catch(err)
	 {
		 console.log(err);
	 }
 }

*//**
 * Handles the events (click and mouseenter) of mail and log entities of 
 * tiemline 
 *//*
$(function () {
	
	 * Shows the mail details in detail on a popup modal, when '+'
	 * symbol is clicked 
	   
	$("#tl-mail-popover").live('click',function(e){
		e.preventDefault();
		
		var htmlstring = $(this).closest('div').attr("data");
		// var htmlstring = $(this).closest('div.text').html();
		// htmlstring = htmlstring.replace("icon-plus", "");

		$("#mail-in-detail").html("<div style='background:none;border:none;'>" + htmlstring + "</div>");
		
		$("#timelineMailModal").modal("show");
        
    });
	
	
	 * Shows the campaign log details on a popup modal
	  
	$("#tl-log-popover").live('click',function(e){
		e.preventDefault();
		
		var string = $(this).closest('div').attr("data");

		// Add div tag to the string to consider white spaces
		$("#log-in-detail").html("<div style='background:none;border:none;'>" + string + "</div>");
		
		$("#timelineLogModal").modal("show");
    });
	
	*//**
	 * Shows analytics popup modal with full details.
	 **//*
	$("#tl-analytics-popover").live('click',function(e){
		e.preventDefault();
		
		var string = $(this).closest('div.body').html();
		var pageViews = $(string).find('div.ellipsis-multi-line');

		$("#analytics-in-detail").html("<div'>" + $(pageViews).html() + "</div>");
		
		$("#timelineAnalyticsModal").modal("show");
	});
	
	
	 * Shows the list of mails(mail sent to) as popover, when mouse is entered on
	 * to address of the email
	   
	$("#tl-mail-to-popover").live('mouseenter',function(e){
		
		$(this).popover({
        	template:'<div class="popover"><div class="arrow"></div><div class="popover-inner" style="padding:1px;width:340px;border-radius:2px"><div class="popover-content"><p></p></div></div></div>'
        });
		
		var string = $(this).text();
		var html = new Handlebars.SafeString(string.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/,/g, ",</br>").replace("To:","To:</br>").replace("read more", ""));
		$(this).attr("data-content", html);
        $(this).popover('show');
    });
	
	// Resizes the item height and open close effect for timeline elements
	$('#timeline .item a.open-close').live("click", function(e){
		$(this).siblings('.body').slideToggle(function(){
			$('#timeline').isotope('reLayout');
		});
		$(this).parents('.post').toggleClass('closed');
		$('#expand-collapse-buttons a').removeClass('active');
		e.preventDefault();
	});
	
});*//**
 * Loads, minified jquery.raty plug-in to show stars to rate a contact in its  
 * detail view and highlights the (no.of) stars based on star_value of the contact.
 * 
 * @method starify 
 * @param {Object} el
 * 			html object of contact detail view
 */
function starify(el) {
    head.js(LIB_PATH + 'lib/jquery.raty.min.js', function(){
    	
    	var contact_model  =  App_Contacts.contactDetailView.model;
    	
    	// If contact update is not allowed then start rating does not allow user to change it
    	if(App_Contacts.contactDetailView.model.get('owner') && !canEditContact(App_Contacts.contactDetailView.model.get('owner').id))
    	{
    			$('#star', el).raty({
    			 'readOnly': true,
    			  score: App_Contacts.contactDetailView.model.get('star_value')
    			 });
    		 return;
    	}
    	
    	// Set URL - is this required?
    	// contact_model.url = 'core/api/contacts';    	
    	$('#star', el).raty({
    		
    		/**
    		 * When a star is clicked, the position of the star is set as star_value of
    		 * the contact and saved.    
    		 */
        	click: function(score, evt) {
        	         		
           		
        		App_Contacts.contactDetailView.model.set({'star_value': score}, {silent : true});
        		contact_model =  App_Contacts.contactDetailView.model.toJSON();
        		var new_model = new Backbone.Model();
        		new_model.url = 'core/api/contacts';
        		new_model.save(contact_model, {
        			success: function(model){
        			}
        		});

        	},
        	
        	/**
        	 * Highlights the stars based on star_value of the contact
        	 */
        	score: contact_model.get('star_value')
            
        });
    });
    
}

/**
 * Check whether there are any updates in the displaying contact.
 * If there are any updates, show the refresh contact button.
 */
function checkContactUpdated(){
	var contact_model  =  App_Contacts.contactDetailView.model;
	
	var contact_id = contact_model.id;
	var updated_time = contact_model.attributes.updated_time;

		queueGetRequest("contact_queue" + contact_id, "/core/api/contacts/" + contact_id + "/isUpdated?updated_time=" + updated_time, "", function success(data)
		{
			// If true show refresh contact button.
			if (data == 'true')
			{
				// Download
				var contact_details_model = Backbone.Model.extend({ 
					url : function(){
							return '/core/api/contacts/' + contact_id;
					}
				});
                
				var model = new contact_details_model();
				model.id = id;
				model.fetch({ success : function(data){
					
					var old_updated_time = contact_model.attributes.updated_time;
					
					var new_updated_time = model.attributes.updated_time;
					
					// Update Model
					if(old_updated_time != new_updated_time)
					{
						App_Contacts.contactDetailView.model.set(model);
//						$('#refresh_contact').hide();
					}

				    }
				});
				
				$('#refresh_contact').show();
			}
				
			
			
		}, function error(data)
		{
			// Error message is shown
			
		});
}

   function inlineCompanyNameChange(el){
    
    console.log("inlineCompanyNameChange");
    var companyInlineName = $("#company-inline-input").val();
      companyname = companyInlineName.trim();
    console.log(companyname);
    if(!companyname)
    {
      $("#company-inline-input").addClass("error-inputfield");
      return;
     }
     companyname=companyname.trim();
     if(agile_crm_is_model_property_changed("name", companyname)){
       // Update first name
      agile_crm_update_contact("name", companyname);
          
         }
         /* toggle fields*/
          $("#company-inline-input").addClass("hidden");
          $("#company-name-text").text(companyname).removeClass("hidden");
          $("#company-name-text").addClass("text-capitalize ");
          $("#company-inline-input").removeClass("error-inputfield");

  }

  function inlineNameChange(e,data){

      
           // Get actual name
          var first = $("#Contact-input-firstname").val();
          var last  = $("#Contact-input-lastname").val();
          firstName =first.trim();
          lastName =last.trim();
          if(!firstName)
          {
            $("#Contact-input-firstname").addClass("error-inputfield");
            return;
          }
          /*if(!lastName)
          {
            $("#Contact-input-lastname").addClass("error-inputfield");
            return;
          }*/
          if(agile_crm_is_model_property_changed("first_name", firstName)){
        // Update first name
              var model_id = App_Contacts.contactDetailView.model.toJSON().id;
              agile_crm_update_contact("first_name", firstName, function(contact_model)
              {
               if(model_id != contact_model.id)
                return;

              $("#Contact-input").addClass("hidden");
              $("#contactName").text(firstName+" "+lastName ).removeClass("hidden");
              $("#contactName").addClass("text-capitalize ");
              $("#Contact-input-firstname" ).removeClass("error-inputfield");
              $("#Contact-input-lastname" ).removeClass("error-inputfield");  
              return;
              });
              // Toggle fields
          }

          if(agile_crm_is_model_property_changed("last_name", lastName)){
               // Update last name
               agile_crm_update_contact("last_name", lastName,function(contact_model){
                
                if(model_id != contact_model.id)
                return;


                $("#Contact-input").addClass("hidden");
              $("#contactName").text(firstName+" "+lastName ).removeClass("hidden");
              $("#contactName").addClass("text-capitalize ");
              $("#Contact-input-firstname").removeClass("error-inputfield");
              $("#Contact-input-lastname").removeClass("error-inputfield");
              return ;
               });
               // Toggle fields
          }

          // Toggle fields
          $("#Contact-input").addClass("hidden");
          $("#contactName").text(firstName+" "+lastName).removeClass("hidden");
          $("#contactName").addClass("text-capitalize ");
          $("#Contact-input-firstname").removeClass("error-inputfield");
          $("#Contact-input-lastname").removeClass("error-inputfield"); 
    }



/**
 * Shows all the domain users names as ul drop down list 
 * to change the owner of a contact 
 */
function fill_owners(el, data, callback){
	var optionsTemplate = "<li><a href='javascript:void(0)' class='contact-owner-list' data='{{id}}'>{{name}}</a></li>";
	if(company_util.isCompany())
		optionsTemplate = "<li><a href='javascript:void(0)' class='company-owner-list' data='{{id}}'>{{name}}</a></li>";
	
    fillSelect('contact-detail-owner','/core/api/users/partial', 'domainUsers', callback, optionsTemplate, true); 
}

/**
 * To show owner on change
 */
function show_owner(){
	$('.contact-owner-pic').css('visibility', 'visible');
	$('#contact-owner').css('display', 'inline-block');
}

/**
 * To download vcard
 */
function qr_load(){
	head.js(LIB_PATH + 'lib/downloadify.min.js', LIB_PATH + 'lib/swfobject.js',  function(){
		  Downloadify.create('downloadify',{
		    filename: function(){
		      return agile_crm_get_contact_property("first_name") + ".vcf";
		    },
		    data: function(){
		      return $('#qr_code').attr('data');
		    },
		    /*onComplete: function(){ 
		      alert('Your File Has Been Saved!'); 
		    },
		    onCancel: function(){ 
		      alert('You have cancelled the saving of this file.');
		    },*/
		    onError: function(){ 
          showAlertModal("download_error");
		    },
		    transparent: false,
		    swf: 'media/downloadify.swf',
		    downloadImage: 'img/download.png',
		    width: 36,
		    height: 30,
		    transparent: true,
		    append: false
		  });
		});
}

/**
 * To navigate from one contact detail view to other
 */
function contact_detail_view_navigation(id, contact_list_view, el){
	console.log("collection >>>>>>>>>>>>>>>>");
	console.log(contact_collection);
	var contact_collection = contact_list_view.collection;
	var collection_length = contact_collection.length;
    var current_index = contact_collection.indexOf(contact_collection.get(id));
    var previous_contact_id;
    var next_contact_id;
    //fetch next set so that next link will work further.
    if(collection_length <= current_index+5) {
    	contact_list_view.infiniScroll.fetchNext();
    }
    if (collection_length > 1 && current_index < collection_length && contact_collection.at(current_index + 1) && contact_collection.at(current_index + 1).has("id")) {
     
    	next_contact_id = contact_collection.at(current_index + 1).id
    }

    if (collection_length > 0 && current_index != 0 && contact_collection.at(current_index - 1) && contact_collection.at(current_index - 1).has("id")) {

    	previous_contact_id = contact_collection.at(current_index - 1).id
    }

    if(previous_contact_id != null)
    	$('.navigation', el).append('<a style="float:left;" href="#contact/' + previous_contact_id + '" class="" onclick="clearContactWidetQueues(' + id + ')"><i class="icon icon-chevron-left"></i></a>');
    if(next_contact_id != null)
    	$('.navigation', el).append('<a style="float:right;" href="#contact/'+ next_contact_id + '" class="" onclick="clearContactWidetQueues(' + id + ')"><i class="icon icon-chevron-right"></i></a>');
	
}


/**
* Clear all contact related widget queue requests
*/
function clearContactWidetQueues(contactId){

	if(!contactId || !document.ajaxq)
		  return;
		
	queueClear("_widgets_" + contactId);
	queueClear("widgets_" + contactId);
	queueClear("widget_queue_"+contactId);

}

$(function(){
   $('body').on('mouseenter', '.tooltip_info', function(e){
		 $(this).tooltip({
			 html : true
		 });
		 $(this).tooltip('show');
	});

   // Makes the score section unselectable, when clicked on it
	$('#score').children().attr('unselectable', 'on');
	
});

/**
*  Contact detailed view event listeners
*/
var Contact_Details_Model_Events = Base_Model_View.extend({
   
    events: {
    	'click #change-owner-element>#contact-owner' : 'onChangeOwner',
    	'click .contact-owner-list' : 'onChangeOwnerSelected',
    	'click #change-owner-element>.contact-owner-add' : 'onAddContactOwner',
    	'click #contact-actions-delete' : 'onContactDetailsDelete',
    	'click .remove-tags' : 'onRemoveContactTag',
    	'click #add-tags' : 'onAddContactTag',
    	'click #contact-add-tags' : 'onAddContactTags',
    	'click #disable_map_view' : 'onDisableMapView',
    	'click #enable_map_view' : 'onEnableMapView',
    	'click #add' : 'onAddScore',
    	'click #minus' : 'onRemoveScore',
    	'click #lead-contactscore' : 'onGetScorebox',
    	'focusout #scorebox' : 'getScore',
	   	'keyup  #scorebox' : 'scoreValEnter',
	   	'click #lead-cscore' : 'onCompanyGetScorebox',
	   	'focusout #cscorebox' : 'getCompanyScore',
	   	'keyup  #cscorebox' : 'enterCompanyScore',
    	'click #cadd' : 'onCaddScore',
    	'click #cminus' :'onCremoveScore',

    	
    	
    	'click .email-subject' : 'onEmailSubjectClick',
    	'click #show-page-views' : 'openPageViews',
    	'click .remove-active-campaign' : 'onRemoveCampaigns',
    	'click #contactDetailsTab a[href="#timeline"]' : 'onTimeLineOpen',
    	'click #contactDetailsTab a[href="#notes"]' : 'openNotes',
    	'click #contactDetailsTab a[href="#events"]' : 'openEvents',
    	'click #contactDetailsTab a[href="#documents"]' : 'openDocuments',
    	'click #contactDetailsTab a[href="#tasks"]' : 'openTasks',
    	'click #contactDetailsTab a[href="#deals"]' : 'openDeals',
    	'click #contactDetailsTab a[href="#cases"]' : 'openCases',
    	'click #contactDetailsTab a[href="#mail"]' : 'openMails',
    	'click #contactDetailsTab a[href="#stats"]' : 'openWebStats',
    	'click #contactDetailsTab a[href="#campaigns"]' : 'openCampaigns',
    	'click #contactDetailsTab a[href="#tickets"]' : 'openTickets',
    	'click .agile-emails' : 'openEmails',
    	'click #email-reply' : 'repltToEmails',
    	'click .activity-delete' : 'deleteActivity',
    	'click #action_refresh_contact' : 'reloadContact',

    	'click .contact-add-task' : 'addTask',
    	'click .contact-add-event' : 'addEvent',
    	'click .contact-add-note' : 'addNote',
    	'click .contact-add-campaign,.add-to-campaign' : 'addToCampaign',

    	'click .task-edit-contact-tab' : 'editTask',
    	'click .event-edit-contact-tab' : 'editEvent',
    	'click .complete-task' : 'completeTask',
    	'click .contact-add-deal' : 'addDeal',
    	'click .deal-edit-contact-tab' : 'editDeal',
    	'click .contact-add-case' : 'addCase',
    	'click .cases-edit-contact-tab' : 'editCase',
    	'click .contact-add-contact' : 'addContact',
    	'click .contact-add-document' : 'addDocument',
    	'click .document-edit-contact-tab' : 'editDocument',
    	'click .document-unlink-contact-tab' : 'unlinkDocument',
    	'click .add-document-select' : 'listDocuments',
    	'click .add-document-cancel' : 'cancelDocuments',
    	'click .add-document-confirm' : 'addSelectedDocument',

    	'click #contacts-inner-tabs #next' : 'tabViewNext',
    	'click #contacts-inner-tabs #prev' : 'tabViewPrev',

    	/** Inliner edits input fields **/
    	'click #contactName'  : 'togglehiddenfield',
      'keydown #Contact-input-firstname' : 'contactNameChange',
      'keydown  #Contact-input-lastname' : 'contactNameChange',
    	'blur #Contact-input' : 'contact_inline_edit' ,       /** End of inliner edits **/

    	/** Company events **/
    	'click #contactDetailsTab a[href="#company-contacts"]' : 'listCompanyContacts',
    	'click #contactDetailsTab a[href="#company-deals"]' : 'listCompanyDeals',
    	'click #contactDetailsTab a[href="#company-cases"]' : 'listCompanyCases',
    	'click #contactDetailsTab a[href="#company-notes"]' : 'listCompanyNotes',
    	'click #contactDetailsTab a[href="#company-documents"]' : 'listCompanyDocuments',
    	'click #company-add-tags' : 'addCompanytags',
    	'keydown #companyAddTags' : 'companyAddTags',
    	'click #company-actions-delete' : 'companyDelete',
    	'click .company-owner-list' : 'companyOwnerList',
    	'click .remove-company-tags' : 'removeCmpanyTags',
    	'click #contact-actions-grid-delete' : 'contactActionsGridDelete',

		/** inliner edits input fields**/
		'click #company-name-text '  : 'toggleinline_company',
		'blur #company-Input input ' : 'companyInlineEdit',
    'keydown #company-inline-input' : 'companyNameChange'  
    },
    
    
   
  /*xedit enter key press event listening and calling the name name chanage method*/  
  contact_inline_edit :function(e){
    console.log("harsha");
  },
  contactNameChange : function(e)
  {
    if(e.keyCode == 13)
      inlineNameChange(e);
  },

/*
show and hide the input for editing the contact name and saving that
*/
	togglehiddenfield :function(e)
	{	
		
		$("#contactName").toggleClass("hidden");
		$("#Contact-input").toggleClass("hidden");
    console.log(this);
		if(!$("#Contact-input").hasClass("hidden"))
		{
			$("#Contact-input-lastname").focus();	
		}

	},


  companyNameChange : function(e)
  {
    if(e.keyCode == 13)
     inlineCompanyNameChange(e);
  },
	/*
	show and hide the input for editing the company name and save that
	*/
	toggleinline_company :function(e){
		$("#company-inline-input").toggleClass("hidden");
		$("#company-name-text").toggleClass("hidden");
		if(!$("#company-inline-input").hasClass("hidden"))
			$("#company-inline-input").focus();
	},
  companyInlineEdit : function (e){
    inlineCompanyNameChange(e);
  },
	
	contactActionsGridDelete: function(e){
		
		e.preventDefault();
		var contact_id=$(e.currentTarget).attr('con_id');
    	var model=App_Contacts.contactsListView.collection.get(contact_id);
		$('#deleteGridContactModal').modal('show');

		$('#deleteGridContactModal').on("shown.bs.modal", function(){

				// If Yes clicked
		   $('#deleteGridContactModal').on('click', '#delete_grid_contact_yes', function(e) {
				e.preventDefault();
				// Delete Contact.
				$.ajax({
    					url: 'core/api/contacts/' + contact_id,
       					type: 'DELETE',
       					success: function()
       					{
       						$('#deleteGridContactModal').modal('hide');
       						App_Contacts.contactsListView.collection.remove(model);
       						if(App_Contacts.contact_custom_view)
       						App_Contacts.contact_custom_view.collection.remove(model);
       						CONTACTS_HARD_RELOAD=true;
       						App_Contacts.contacts();
       					}
       				});
			});


		   $('#deleteGridContactModal').on('click', '#delete_grid_contact_no', function(e) {
				e.preventDefault();
				if($(this).attr('disabled'))
			   	     return;
				$('#deleteGridContactModal').modal('hide');
			});

		});

    		
	},

	/**
	 * Get the updated details of the contact and update the model.
	 */
	reloadContact :  function(e){
			var id =  App_Contacts.contactDetailView.model.id;
		var contact_details_model = Backbone.Model.extend({ url : function()
			{
				return '/core/api/contacts/' + this.id;
			} });

			var model = new contact_details_model();
			model.id = id;
			model.fetch({ success : function(data)
			{
				
				// Call Contact Details again
				App_Contacts.contactDetails(id, model);
				$('#refresh_contact').hide();

			} });
	},

   	/**
	 * Sets cookie when user changes email dropdown under mail tab. Cookie
	 * contains email server, email name from next time application loads from
	 * emails from this email server and email
	 */
	openEmails :  function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var email_server = $(targetEl).attr('email-server');
		var url = $(targetEl).attr('data-url');
		$('#email-type-select', App_Contacts.contactDetailView.el).html($(targetEl).html());
		// Here email_server_type means email/username of mail account
		email_server_type = $(targetEl).attr('email-server-type');
		if (email_server && url && (email_server != 'agile'))
			url = url.concat(email_server_type);

		var cookie_value = email_server_type + '|' + email_server;
		save_email_server_type_in_cookie(cookie_value);
		contact_details_tab.load_mail(url, email_server);
	},

	

    repltToEmails :  function(e)
			{
				e.preventDefault();
				Contact_Details_Tab_Actions.replyToEmail(e);
			},

	
	deleteActivity : function(e)
	{
		e.preventDefault();

		Contact_Details_Tab_Actions.deleteActivity(e);
	},


	/**
	 * Gets every conversation of the contact (if it has email) with the
	 * associated email (gmail or imap) in Email-preferences of this CRM, when
	 * "Mail" tab is clicked.
	 */
	openMails : function(e)
	{
		e.preventDefault();
		email_server_type = "agilecrm"
		save_contact_tab_position_in_cookie("mail");
		contact_details_tab.load_mail();
	},

	/**
	 * Gets the activities of a contact from browsing history, using its email.
	 * To do so the email should be run in analytics script provided by
	 * agileCRM.
	 */
	 openWebStats : function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("stats");
		contact_details_tab.load_stats();

	},

	/**
	 * Fetches all the logs of the campaigns that the contact is subscribed to
	 * and shows them in a table. Also shows a campaigns drop down list to
	 * subscribe the contact to the selected campaign.
	 */
	openCampaigns : function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("campaigns");
		contact_details_tab.load_campaigns();
	},

	/**
	 * Fetches all the logs of the campaigns that the contact is subscribed to
	 * and shows them in a table. Also shows a campaigns drop down list to
	 * subscribe the contact to the selected campaign.
	 */
	openTickets : function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("tickets");
		contact_details_tab.load_tickets();
	},


	/**
	 * Fetches all the deals related to the contact and shows the deals
	 * collection as a table in its tab-content, when "Deals" tab is clicked.
	 */
	openDeals : function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("deals");
		contact_details_tab.load_deals();
	},

	/**
	 * Fetches all the cases related to the contact and shows the collection.
	 */
	openCases :  function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("cases");

		contact_details_tab.load_cases();
	},

	/**
	 * Fetches all the notes related to the contact and shows the tasks
	 * collection as a table in its tab-content, when "Tasks" tab is clicked.
	 */
	openTasks :  function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("tasks");
		contact_details_tab.load_tasks();
	},


	/**
	 * Fetches all the documents related to the contact and shows the documents
	 * collection as a table in its tab-content, when "Documents" tab is
	 * clicked.
	 */
	openDocuments : function(e){
		e.preventDefault();
		save_contact_tab_position_in_cookie("documents");
		contact_details_tab.load_documents();
	},

	onTimeLineOpen : function(e){
		e.preventDefault();
		Contact_Details_Tab_Actions.openTimeLine(e);
	},
	onEmailSubjectClick : function(e){
		e.preventDefault();
		Contact_Details_Tab_Actions.onEmailSubjectClick(e);	
	},
	openPageViews : function(e){
		e.preventDefault();
		Contact_Details_Tab_Actions.showPageViews(e);	
	},
	onRemoveCampaigns : function(e){
		e.preventDefault();
		Contact_Details_Tab_Actions.removeActiveCampaigns(e);		

	},
	openNotes : function(e){
		e.preventDefault();
		Contact_Details_Tab_Actions.showNotes(e);	
	},
	openEvents : function(e){
		e.preventDefault();
		Contact_Details_Tab_Actions.showEvents(e);
	},

    // Change owner of the contact
    onChangeOwner : function(e){
         e.preventDefault();
         fill_owners(undefined, undefined, function(){

	    	$('#contact-owner').css('display', 'none');

	    	$('#change-owner-ul').css('display', 'inline-block');
	    	if($('#change-owner-element > #change-owner-ul').css('display') == 'inline-block')
	             $("#change-owner-element").find(".loading").remove();
		});
    },

    /**
	 * Changes, owner of the contact, when an option of change owner drop down
	 * is selected.   
	 */
    onChangeOwnerSelected : function(e){
      	e.preventDefault();
    	var targetEl = $(e.currentTarget);

    	$('#change-owner-ul').css('display', 'none');
		
		// Reads the owner id from the selected option
		var new_owner_id = $(targetEl).attr('data');
		var new_owner_name = $(targetEl).text();
		var current_owner_id = $('#contact-owner').attr('data');
		
		// Returns, if same owner is selected again 
		if(new_owner_id == current_owner_id)
			{
			  // Showing updated owner
			  show_owner();
			  return;
			}
		
		  var contactModel = new BaseModel();
		    contactModel.url = '/core/api/contacts/change-owner/' + new_owner_id + "/" + App_Contacts.contactDetailView.model.get('id');
		    contactModel.save(App_Contacts.contactDetailView.model.toJSON(), {success: function(model){

		    	// Replaces old owner details with changed one
				$('#contact-owner').text(new_owner_name);
				$('#contact-owner').attr('data', new_owner_id);
				
				// Showing updated owner
				show_owner(); 
				App_Contacts.contactDetailView.model = model;
				
		    }});
    	   
    },

    // Deletes a contact from database
    onContactDetailsDelete : function(e){

    	e.preventDefault();
      showAlertModal("delete_contact", "confirm", function(){
        App_Contacts.contactDetailView.model.url = "core/api/contacts/" + App_Contacts.contactDetailView.model.id;
        App_Contacts.contactDetailView.model.destroy({success: function(model, response) {
            Backbone.history.navigate("contacts",{trigger: true});
        }});
      });
		
    },

    /**
	 * Deletes a tag of a contact (removes the tag from the contact and saves the contact)
	 */ 
    onRemoveContactTag : function(e){

    	e.preventDefault();
    	var targetEl = $(e.currentTarget);

		var tag = $(targetEl).attr("tag");
		removeItemFromTimeline($("#" +  tag.replace(/ +/g, '') + '-tag-timeline-element', $('#timeline')).parent('.inner'))
		console.log($(targetEl).closest("li").parent('ul').append(getRandomLoadingImg()));
		
     	var json = App_Contacts.contactDetailView.model.toJSON();
     	
     	// Returns contact with deleted tag value
     	json = delete_contact_tag(json, tag);
     	var that = targetEl;
     	
     	// Unbinds click so user cannot select delete again
     	$(targetEl).unbind("click");
     	
        var contact = new Backbone.Model();
        contact.url = 'core/api/contacts';
        contact.save(json, {
       		success: function(data)
       			{ 	      		
       				$(that).closest("li").parent('ul').find('.loading').remove();
       				$(that).closest("li").remove();
       				
       			// Updates to both model and collection
	       			App_Contacts.contactDetailView.model.set(data.toJSON(), {silent : true});
	       			
	       		//	App_Contacts.contactDetailView.model.set({'tags' : data.get('tags')}, {silent : true}, {merge:false});
       				
       				// Also deletes from Tag class if no more contacts are found with this tag
       				$.ajax({
       					url: 'core/api/tags/' + tag,
       					type: 'DELETE',
       					success: function()
       					{
       						if(tagsCollection)
       							tagsCollection.remove(tagsCollection.where({'tag': tag})[0]);
       					}
       				});
       			}
        });
	
    },

    /**
	 * Shows a form to add tags with typeahead option
	 */ 
    onAddContactTag : function(e){
    	e.preventDefault();

		$(e.currentTarget).css("display", "none");
		$("#addTagsForm").css("display", "block");
		$("#addTags").focus();
		setup_tags_typeahead();
	
    },

    /**
	 * "click" event of add button of tags form in contact detail view
	 * Pushes the added tags into tags array attribute of the contact and saves it
	 */ 
	 onAddContactTags : function(e){
	 	e.preventDefault();
		
	    // Add Tags
		var new_tags = get_new_tags('addTags');
		if(new_tags)new_tags=new_tags.trim();
		
		if(!new_tags || new_tags.length<=0 || (/^\s*$/).test(new_tags))
		{
			console.log(new_tags);
			return;
		}
		if (!isValidTag(new_tags, true)) {
			return;
		}
		$('#add-tags').css("display", "block");
		$("#addTagsForm").css("display", "none");
		console.log(new_tags);
		
		if(new_tags) {
			var json = App_Contacts.contactDetailView.model.toJSON();
	    		
	    	
	    	// Reset form
	    	$('#addTagsForm input').each (function(){
   		  	  	$(e.currentTarget).val("");
   		  	});
	    	
	    	// Checks if tag already exists in contact
			if($.inArray(new_tags, json.tags) >= 0)
				return;
			acl_util.canAddTag(new_tags.toString(),function(respnse){
		    	json.tagsWithTime.push({"tag" : new_tags.toString()});
	   			
		    	// Save the contact with added tags
		    	var contact = new Backbone.Model();
		        contact.url = 'core/api/contacts';
		        contact.save(json,{
		       		success: function(data){
		       			
		       			addTagToTimelineDynamically(new_tags, data.get("tagsWithTime"));
		       			
		       			// Get all existing tags of the contact to compare with the added tags
		       			var old_tags = [];
		       			$.each($('#added-tags-ul').children(), function(index, element){
		       				old_tags.push($(element).attr('data'));
	       				});
		       			
		       			// Updates to both model and collection
		       			App_Contacts.contactDetailView.model.set(data.toJSON(), {silent : true});
		       			
		       			// Append to the list, when no match is found 
		       			if ($.inArray(new_tags, old_tags) == -1) {

		       				var template = Handlebars.compile('<li  class="tag inline-block btn btn-xs btn-default m-r-xs m-b-xs" style="color:#363f44" data="{{name}}"><span><a class="anchor m-r-xs custom-color" style="color:#363f44" href="#tags/{{name}}" >{{name}}</a><a class="close remove-tags" id="{{name}}" tag="{{name}}">&times</a></span></li>');

						 	// Adds contact name to tags ul as li element
							$('#added-tags-ul').append(template({name : new_tags}));
							    $.each(data.get("tagsWithTime"), function(e, d) {
        						if (d.tag == new_tags) {
							            $('#added-tags-ul').find("li[data='"+new_tags+"']").attr('title',epochToHumanDate("mmmm dd, yyyy 'at' hh:MM tt",d.createdTime));
							        }
    }
    );
		       			}
		       			
		       			console.log(new_tags);
		       			// Adds the added tags (if new) to tags collection
		       			tagsCollection.add(new BaseModel({"tag" : new_tags}));
		       		},
		       		error: function(model,response){
		       			console.log(response);
                showAlertModal(response.responseText, undefined, undefined, undefined, "Error");
		       		}
		        });
			});
		}
	 },

	 onAddContactOwner :  function(e){
         e.preventDefault();

    	fill_owners(undefined, undefined, function(){

        	$('.contact-owner-add').css('display', 'none');

        	$('#change-owner-ul').css('display', 'inline-block');
        	$('#change-owner-ul').addClass("open");
        	
        	if($('#change-owner-element > #change-owner-ul').css('display') == 'inline-block')
        		 $("#change-owner-element").find(".loading").remove();
    	});
    },

    onDisableMapView : function(e){
		e.preventDefault();
		_agile_set_prefs('MAP_VIEW','disabled');
		
		$("#map").css('display', 'none');
		$("#contacts-local-time").hide();
		$("#map_view_action").html("<i class='icon-plus text-sm c-p' title='Show map' id='enable_map_view'></i>");
		
    },

	onEnableMapView :  function(e){
		e.preventDefault();
		_agile_set_prefs('MAP_VIEW','enabled');
		
		if(company_util.isCompany())
			company_util.show_map();
		else
			show_map();
		
		
	},

	/**
	 * Adds score to a contact (both in UI and back end)
	 * When '+' symbol is clicked in contact detail view score section, the score
	 * gets increased by one, both in UI and back end
	 * 
	 */  
	onAddScore :  function(e){
	    e.preventDefault();
	    
	    // Convert string type to int
	    var add_score = parseInt($('#lead-contactscore').text());
	    
	    add_score = add_score + 1;
	    
	    // Changes score in UI
	    $('#lead-contactscore').text(add_score);
       $("#lead-contactscore").attr("title",add_score);
	    App_Contacts.contactDetailView.model.set({'lead_score': add_score}, {silent: true});
		var contact_model =  App_Contacts.contactDetailView.model.toJSON();
	    
	  /* // Refreshing the view ({silent: true} not working)
	    contact_model.url = 'core/api/contacts';
	    contact_model.set('lead_score', add_score, {silent: true});
	
	    // Save model
	    contact_model.save();*/
	    
		var new_model = new Backbone.Model();
		new_model.url = 'core/api/contacts';
		new_model.save(contact_model,{
			success: function(model){

			}
		});
		          
	},
		/**
	 * Getting the Score Input after pressing the Enter
	 */  
scoreValEnter: function(e){
	    e.preventDefault();
	   if(e.keyCode == 13){
	   		this.updateScoreValue();
	   }
	
	},
  
// On Clicking the score Score Input field appears
onGetScorebox:  function(e){
	    e.preventDefault();
	   //$('[data-toggle="tooltip"]').tooltip();
	   $("#scorebox").removeClass("hide");
	   $("#lead-contactscore").addClass("hide");
	   $("#scorebox").val($("#lead-contactscore").text());
	   $("#scorebox").focus();
	}, 

// on Mouse click Getting the Input field
getScore:  function(e){
		e.preventDefault();
		this.updateScoreValue();
	
	},

enterCompanyScore: function(e){
	    e.preventDefault();
	   if(e.keyCode == 13){
	   		this.updateCompanyScoreValue();
	   }	
	},

	onCompanyGetScorebox:  function(e){
	    e.preventDefault();
	   //$('[data-toggle="tooltip"]').tooltip();
	   $("#cscorebox").removeClass("hide");
	   $("#lead-cscore").addClass("hide");
	   $("#cscorebox").val($("#lead-cscore").text());
	   $("#cscorebox").focus();
	}, 

	getCompanyScore:  function(e){
		e.preventDefault();
		this.updateCompanyScoreValue();
	},

	onCaddScore :  function(e){
	     e.preventDefault();
	    
	     // Convert string type to int
	     var add_score = parseInt($('#lead-cscore').text());
	    
	     add_score = add_score + 1;
	    
	     // Changes score in UI
	     $('#lead-cscore').text(add_score);
       
	    App_Companies.companyDetailView.model.set({'lead_score': add_score}, {silent: true});
	 	var contact_model =  App_Companies.companyDetailView.model.toJSON();
	    
	   /* // Refreshing the view ({silent: true} not working)
	     contact_model.url = 'core/api/contacts';
	     contact_model.set('lead_score', add_score, {silent: true});
	
	     // Save model
	    contact_model.save();*/
	    
	 	var new_model = new Backbone.Model();
	 	new_model.url = 'core/api/contacts';
	 	new_model.save(contact_model,{
	 		success: function(model){

	 		}
	 	});		          
	 },
	   
	/**
	 * Subtracts score of a contact (both in UI and back end)
	 * When '-' symbol is clicked in contact detail view score section, the score
	 * gets decreased by one, both in UI and back end
	 * 
	 */
   
	onRemoveScore :  function(e){
		e.preventDefault();
		
		// Converts string type to Int
		var sub_score = parseInt($('#lead-contactscore').text());
		
		//if(sub_score <= 0)
		//	return;		
		sub_score = sub_score - 1;
		
		// Changes score in UI
		$('#lead-contactscore').text(sub_score);
		$("#lead-contactscore").attr("title",sub_score);
		// Changes lead_score of the contact and save it.
		App_Contacts.contactDetailView.model.set({'lead_score': sub_score}, {silent: true});
		var contact_model =  App_Contacts.contactDetailView.model.toJSON();

		var new_model = new Backbone.Model();
		new_model.url = 'core/api/contacts';
		new_model.save(contact_model,{
			success: function(model){
			}
		});
	},

		onCremoveScore :  function(e){
		 	e.preventDefault();
			
		 	// Converts string type to Int
		 	var sub_score = parseInt($('#lead-cscore').text());
			
		 	if(sub_score <= 0)
		 		return;
			
		 	sub_score = sub_score - 1;
			
		 	// Changes score in UI
		 	 $('#lead-cscore').text(sub_score);
			
		 // Changes lead_score of the contact and save it.
		 App_Companies.companyDetailView.model.set({'lead_score': sub_score}, {silent: true});
		var contact_model =  App_Companies.companyDetailView.model.toJSON();
			
		 var new_model = new Backbone.Model();
		new_model.url = 'core/api/contacts';
		new_model.save(contact_model,{
		 	success: function(model){

		 		}
		 	});
		 },



    addTask : function(e){
    	e.preventDefault();
        contact_detail_tab_actions.add_task(e);
    },
    addEvent : function(e){
    	e.preventDefault();
        contact_detail_tab_actions.add_event(e);
    }, 
    addNote :  function(e){
    	e.preventDefault();
         contact_detail_tab_actions.add_note(e);       
    }, 
    addToCampaign :  function(e){
    	e.preventDefault();
         contact_detail_tab_actions.add_to_campaign(e);
    }, 

    editTask : function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.edit_task(e);
	},

	editEvent : function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.edit_event(e);
		
	},

	completeTask :  function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.complete_task(e);
		
	},
	
	addDeal : function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.add_deal(e);

	},

	// For updating a deal from contact-details
	editDeal :  function(e)
	{
		e.preventDefault();
		var id = $(e.currentTarget).attr('data');
		updateDeal(dealsView.collection.get(id));
	},

	// For Adding new case from contacts/cases
	addCase :  function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.add_case(e);
	},

	// For updating a case from contact-details
	editCase : function(e)
	{
		e.preventDefault();
		var id = $(e.currentTarget).attr('data');
		updatecases(casesView.collection.get(id));
	},

	// Adding contact when user clicks Add contact button under Contacts tab in
	// Company Page
	addContact : function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.add_contact(e);
		
	},

	// For adding new document from contact-details
	addDocument :  function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.add_document(e);
	},

	// For updating document from contact-details
	editDocument : function(e)
	{
		e.preventDefault();
		var id = $(e.currentTarget).attr('data');
		updateDocument(documentsView.collection.get(id));
	},

	// For unlinking document from contact-details
	unlinkDocument :  function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.document_unlink(e);
		
	},

	/**
	 * For showing new/existing documents
	 */
	listDocuments :  function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.show_document_list(e);
	},

	/**
	 * To cancel the add documents request
	 */
	cancelDocuments :  function(e)
	{
		e.preventDefault();
		var el = $("#documents");
		el.find(".contact-document-select").css("display", "none");
		el.find(".add-document-select").css("display", "inline-block");
	},

	/**
	 * For adding existing document to current contact
	 */
	addSelectedDocument : function(e)
	{
		e.preventDefault();
		contact_details_documentandtasks_actions.add_selected_document(e);

	},


	tabViewNext :  function(e){
	  console.log("next clicked");
	    var target = $("#contactDetailsTab");
	    target.animate({ scrollLeft : (target.scrollLeft() + 270)},1000);
	  },
	  
	  tabViewPrev :  function(e){
		   console.log("prev clicked");
	    var target = $("#contactDetailsTab");
	    target.animate({ scrollLeft : (target.scrollLeft() - 270)},1000);
	  },

	  listCompanyContacts :  function(e)
	{
		e.preventDefault();
		fill_company_related_contacts(App_Companies.companyDetailView.model.id, 'company-contacts');
	},

	/**
	 * Fetches all the deals related to the contact and shows the deals
	 * collection as a table in its tab-content, when "Deals" tab is clicked.
	 */
	listCompanyDeals : function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("deals");
		company_detail_tab.load_company_deals();
	},

	/**
	 * Fetches all the cases related to the contact and shows the collection.
	 */
	listCompanyCases :  function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("cases");

		company_detail_tab.load_company_cases();
	},
		
	/**
	 * Fetches all the notes related to the contact and shows the notes
	 * collection as a table in its tab-content, when "Notes" tab is clicked.
	 */
	listCompanyNotes :  function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("notes");
		company_detail_tab.load_company_notes();
	},
	
	/**
	 * Fetches all the documents related to the contact and shows the documents
	 * collection as a table in its tab-content, when "Documents" tab is
	 * clicked.
	 */
	listCompanyDocuments : function(e)
	{
		e.preventDefault();
		save_contact_tab_position_in_cookie("documents");
		company_detail_tab.load_company_documents();
	},
	
	/**
	 * "click" event of add button of tags form in contact detail view
	 * Pushes the added tags into tags array attribute of the contact and saves it
	 */ 
	addCompanytags :  function(e)
	{	e.preventDefault();
		
	   company_detail_tab.addTagsToCompany();
	},
	
	companyAddTags : function(e) {
	 	if(e.which == 13 && !isTagsTypeaheadActive){
    		company_detail_tab.addTagsToCompany();
    		}
    	},
	
	// Deletes a contact from database
	companyDelete :  function(e)
	{	
		e.preventDefault();
		company_detail_tab.deleteCurrentCompany();
	},
	
	/**
	 * Changes, owner of the contact, when an option of change owner drop down
	 * is selected.   
	 */
	companyOwnerList :  function(e){
		var targetEl = $(e.currentTarget);

		$('#change-owner-ul').css('display', 'none');
		
		company_detail_tab.changeOwner($(targetEl));
	},
	
	/**
	 * Deletes a tag of a contact (removes the tag from the contact and saves the contact)
	 */ 
	removeCmpanyTags :  function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var tag = $(targetEl).attr("tag");
		//removeItemFromTimeline($("#" +  tag.replace(/ +/g, '') + '-tag-timeline-element', $('#timeline')).parent('.inner'))
		console.log($(targetEl).closest("li").parent('ul').append(getRandomLoadingImg()));
		
     	var json = App_Companies.companyDetailView.model.toJSON();
     	
     	// Returns contact with deleted tag value
     	json = delete_contact_tag(json, tag);
     	var that = targetEl;
     	
     	// Unbinds click so user cannot select delete again
     	$(targetEl).unbind("click");
     	
        var contact = new Backbone.Model();
        contact.url = 'core/api/contacts';
        contact.save(json, {
       		success: function(data)
       			{ 	      		
       				$(that).closest("li").parent('ul').find('.loading').remove();
       				$(that).closest("li").remove();
       				
       			// Updates to both model and collection
       				App_Companies.companyDetailView.model.set(data.toJSON(), {silent : true});
	       			
	       		//	App_Contacts.contactDetailView.model.set({'tags' : data.get('tags')}, {silent : true}, {merge:false});
       				
       				// Also deletes from Tag class if no more contacts are found with this tag
       				$.ajax({
       					url: 'core/api/tags/' + tag,
       					type: 'DELETE',
       					success: function()
       					{
       						if(tagsCollection)
       							tagsCollection.remove(tagsCollection.where({'tag': tag})[0]);
       					}
       				});
       			}
        });
	},
updateScoreValue :function(){
		var scoreboxval = parseInt($("#scorebox").val());
		var decimalcheck=$("#scorebox").val();
		//var txt=$("#scorebox").text();
		//var partxt=parseInt($("#scorebox").text());
		//if ((scoreboxval != prvs && (!isNaN(scoreboxval)))|| $("#scorebox").val().length==0)
		var contact_model =  App_Contacts.contactDetailView.model.toJSON();
		var prvs = ((contact_model.lead_score)? contact_model.lead_score:0);
		if ((scoreboxval != prvs && (decimalcheck%1==0))|| $("#scorebox").val()==""){ 
			if($("#scorebox").val()==""){scoreboxval=0;
			}					
			App_Contacts.contactDetailView.model.set({'lead_score': scoreboxval}, {silent: true});
			var contact_model =  App_Contacts.contactDetailView.model.toJSON();			
			var new_model = new Backbone.Model();
			new_model.url = 'core/api/contacts';
			new_model.save(contact_model,{
			success: function(model){
					}
				});							
		}
		if (isNaN(scoreboxval)|| scoreboxval!=decemialcheck){
      showAlertModal("number_validation", undefined, function(){
        scoreboxval=prvs;
        setleadScoreStyles(scoreboxval);
      });
      return;
		}
		else{
			if(scoreboxval== prvs){
			scoreboxval=prvs;
			}
		}
		setleadScoreStyles(scoreboxval);
	},

	updateCompanyScoreValue :function(){
		var scoreboxval = parseInt($("#cscorebox").val());
		var decimalcheck=$("#cscorebox").val();
		//var txt=$("#scorebox").text();
		//var partxt=parseInt($("#scorebox").text());
		//if ((scoreboxval != prvs && (!isNaN(scoreboxval)))|| $("#scorebox").val().length==0)
		var contact_model =  App_Companies.companyDetailView.model.toJSON();
		var prvs = ((contact_model.lead_score)? contact_model.lead_score:0);
		if ((scoreboxval != prvs && (decimalcheck%1==0) && (scoreboxval>=0))|| $("#cscorebox").val()==""){ 
			if($("#cscorebox").val()==""){scoreboxval=0;
			}					
			App_Companies.companyDetailView.model.set({'lead_score': scoreboxval}, {silent: true});
			var contact_model =  App_Companies.companyDetailView.model.toJSON();			
			var new_model = new Backbone.Model();
			new_model.url = 'core/api/contacts';
			new_model.save(contact_model,{
			success: function(model){
					}
				});							
		}
		if (isNaN(scoreboxval)|| scoreboxval!=decemialcheck||(scoreboxval<0)){
      showAlertModal("number_validation", undefined, function(){
        scoreboxval=prvs;
        setleadScoreStyles(scoreboxval);
      });
      return;
		}
		else{
			if(scoreboxval== prvs){
				scoreboxval=prvs;
			}
		}
		setleadScoreStyles(scoreboxval)
	}
});

$(function(){
	$("body").on("mouseenter", "#element", function(b) {
        b.preventDefault();
        $(this).popover({
            template: '<div class="popover" style="width:400px"><div class="arrow"></div><div class="popover-inner"><div class="popover-content"><p></p></div></div></div>'
        });
        $(this).popover("show")
    }
    );
    $("body").on("mouseenter", "#element-title", function(b) {
        b.preventDefault();
        $(this).popover("show")
    }
    );
});

/**
 * Check whether there are any updates in the displaying contact.
 * If there are any updates, show the refresh contact button.
 */
function checkCompanyUpdated(){
	var contact_model  =  App_Companies.companyDetailView.model;
	
	var contact_id = contact_model.id;
	var updated_time = contact_model.attributes.updated_time;

		queueGetRequest("contact_queue" + contact_id, "/core/api/contacts/" + contact_id + "/isUpdated?updated_time=" + updated_time, "", function success(data)
		{
			// If true show refresh contact button.
			if (data == 'true')
			{
				// Download
				var contact_details_model = Backbone.Model.extend({ 
					url : function(){
							return '/core/api/contacts/' + contact_id;
					}
				});
                
				var model = new contact_details_model();
				model.id = id;
				model.fetch({ success : function(data){
					
					var old_updated_time = contact_model.attributes.updated_time;
					
					var new_updated_time = model.attributes.updated_time;
					
					// Update Model
					if(old_updated_time != new_updated_time)
					{
						App_Companies.companyDetailView.model.set(model);
//						$('#refresh_contact').hide();
					}

				    }
				});
				
				$('#refresh_contact').show();
			}
				
			
			
		}, function error(data)
		{
			// Error message is shown
			
		});
}

function epochToHumanDate(format,date)
{
	if (!format)
			format = "mmm dd yyyy HH:MM:ss";

		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			console.log(new Date(parseInt(date)).format(format));
			return new Date(parseInt(date)).format(format, 0);
		}
		// date form milliseconds
		var d = "";
		try
		{
			d= new Date(parseInt(date) * 1000).format(format);
		}
		catch (err)
		{
			console.log("Invalid date for custom field.");
		}

		return d

}
function setleadScoreStyles(scoreboxval){
  $('#lead-score').attr("data-original-title", scoreboxval);
  $('#lead-score').text(scoreboxval).removeClass("hide");
  $("#scorebox").addClass("hide").val(scoreboxval);
  $("#lead-score").attr("title",scoreboxval);
}
/**
 * Shows error text, providing support for custom validation. Shows error
 * message in .errorClass, filling it with htmlText
 * 
 * @param modalId -
 *            id of modal, won't be used if modal hidden
 * @param formId -
 *            id of form,
 * @param htmlText -
 *            error message to display
 * @param errorClass -
 *            class in which to fill error text, i.e. htmlText
 */
function show_error(modalId, formId, errorClass, htmlText)
{
	var modal_elem = $('#' + modalId);
	var form_elem = $('#' + formId);

	if (modal_elem.css('display') !== 'none')
	{
		modal_elem.find('.' + errorClass).html(
				'<div class="alert alert-danger" ><a class="close" data-dismiss="alert" href="#">&times</a>' + htmlText + '</div>').show();
	}
	else if (form_elem.css('display') !== 'none')
	{
		form_elem.find('.' + errorClass).html(
				'<div class="alert alert-danger" ><a class="close" data-dismiss="alert" href="#">&times</a>' + htmlText + '</div>').show();
	}
}


function show_error_in_formactions(modalId, formId, errorClass, htmlText)
{
	var modal_elem = $('#' + modalId);
	var form_elem = $('#' + formId);

	// Show cause of error in saving
	var save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>' + htmlText + '</i></p></small></div>');

	// Hides the error message after 3
	// seconds

	if (modal_elem.css('display') !== 'none')
	{
		modal_elem.find('.' + errorClass).html(save_info).show().delay(3000).hide(1);
	}
	else if (form_elem.css('display') !== 'none')
	{
		form_elem.find('.' + errorClass).html(save_info).show().delay(3000).hide(1);
	}
}

/**
 * Serializes both contact (person or company) modal form (with basic
 * information) and its continue editing form (with detailed information) and
 * saves the serialized data into Contacts data base.
 * <p>
 * Each field (except tags field) value of the form is created as json object
 * (with name, type and value attributes) and pushed into "properties" array, if
 * any tags are exist, pushes them into tags array. Finally the object with
 * properties and tags is sent to save.
 * </p>
 * 
 * @method serialize_and_save_continue_contact
 * @param {Object}
 *            e default event to prevent
 * @param {String}
 *            form_id form to serialize the data
 * @param {String}
 *            modal_id modal to hide on save
 * @param {Boolean}
 *            continueContact verifies to show continue editing form
 * @param {Boolean}
 *            is_person verifies whether person or company
 * @param {String}
 *            id within which to search for tags, if ignored tags will be
 *            searched in form_id
 * @returns object get saved
 */
function serialize_and_save_continue_contact(e, form_id, modal_id, continueContact, is_person, saveBtn, tagsSourceId)
{

	// Prevents the default event, if any
	e.preventDefault();

	var $form = $('#' + form_id);

	// Returns, if the save button has disabled attribute, or form is invalid
	if ($(saveBtn).attr('disabled') || !isValidForm($form))
	{
		var ele = $(saveBtn).closest('form').find('.single-error').first();
		var container = $form;
		$('body').scrollTop(ele.offset().top - container.offset().top + container.scrollTop());
		return;
	}
	// Disables save button to prevent multiple click event issues
	disable_save_button($(saveBtn));

	// Read multiple values from contact form
	var properties = [];

	// Reads id, to update the contact
	var id = $('#' + form_id + ' input[name=id]').val();

	// Makes created time constant
	var created_time = $('#' + form_id + ' input[name=created_time]').val();

	// Object to save
	var obj = {};

	// Stores all the property objects
	var properties = [];

	// Contact should be fetched based on id from any of the following views. It
	// is required so other properties saved are not lost.
	if (id)
	{

		// If user refreshes in contact details page, then none of the list
		// views are defined so, contact will be fetched from detailed view
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model != null && App_Contacts.contactDetailView.model.get('id') == id)
			obj = App_Contacts.contactDetailView.model.toJSON();

		// If contact list view is defined, then contact is fetched from list.
		else if (App_Contacts.contactsListView && App_Contacts.contactsListView.collection.get(id) != null)
			obj = App_Contacts.contactsListView.collection.get(id).toJSON();

		// If contact list is under a selected custom view, then contact is
		// fetched from the custom view list.
		else if (App_Contacts.contact_custom_view && App_Contacts.contact_custom_view.collection.get(id) != null)
			obj = App_Contacts.contact_custom_view.collection.get(id).toJSON();

	}
	
	if (company_util.isCompany() && id)
	{


		// If user refreshes in company details page, then none of the list
		// views are defined so, company will be fetched from detailed view
		if (App_Companies.companyDetailView && App_Companies.companyDetailView.model != null && App_Companies.companyDetailView.model.get('id') == id)
			obj = App_Companies.companyDetailView.model.toJSON();


		// If company list view is defined, then company is fetched from list.
		else if (App_Companies.companiesListView && App_Companies.companiesListView.collection.get(id) != null)
			obj = App_Companies.companiesListView.collection.get(id).toJSON();

	}

	// Loads continue editing form
	var template;

	// Reads custom fields and pushes into properties
	var custom_field_elements = $('#' + form_id).find('.custom_field');
	var custom_fields_in_template = [];
	var contact_custom_fields_flag = true;

	$.each(custom_field_elements, function(index, element)
	{
		var id = $(element).attr('id'), name = $(element).attr('name');
		custom_fields_in_template.push(name);
		if($(element).hasClass("contact_input") || $(element).hasClass("company_input")){
			if ($(element).hasClass("required_field"))
			{
				if ($(this).parent().find("ul").find("li").length == 0)
				{
					$(this).parent().append('<span for="fname" generated="true" class="help-inline">This field is required.</span>');
					var that = this;
					setTimeout(function(){
						$(that).parent().find('span').remove();
					},1500);
					contact_custom_fields_flag = false;
				}
			}
			if (isValidContactCustomField(id))
				properties.push(custom_Property_JSON(name, 'CUSTOM', form_id));
		}else{
			if (isValidField(id))
				properties.push(custom_Property_JSON(name, 'CUSTOM', form_id));
		}
		
	});
	if (!contact_custom_fields_flag)
	{
		enable_save_button($(saveBtn));
		return;
	}

	if (is_person)
	{

		// Stores person's continue editing form template key
		template = 'continue-contact';
		obj.type = 'PERSON';
        /*@priyanka
        *saving first_name,last_name,picture and its TwitterId Pre-populate into the saving
        * person model and continue saving it will also appers with same field
        */
		// Creates properties of contact (person)
		if (isValidField(form_id + ' #fname'))
			properties.push(property_JSON('first_name', form_id + ' #fname'));

		if (isValidField(form_id + ' #lname'))
			properties.push(property_JSON('last_name', form_id + ' #lname'));

		// Add profile_img from both forms.
		// if(form_id == "personForm")
		if (isValidField(form_id + ' #image'))
			properties.push(property_JSON('image', form_id + ' #image'));
        //checking the condition for the when tweeterId is saving into the datastore
        if(isValidField(form_id +' #handle'))
        	properties.push({ "name" : "website", "value" :$('#handle').val(), "subtype" : "TWITTER" })

      
		// /give preference to autofilled company, ignore any text in textfield
		// for filling company name
		var company_el = $("#" + form_id + " [name='contact_company_id']").find('li');
		if (company_el && company_el.length)
		{
			var company_id = $(company_el.get(0)).attr('data');
			var company_name = $(company_el.get(0)).find('a:first').text();

			obj.contact_company_id = company_id;
			properties.push({ type : "SYSTEM", name : "company", value : company_name });
		}
		else if (isValidField(form_id + ' #contact_company'))
		{
			if ($form.find('#contact_company').prop('value').length > 100)
			{
				show_error(modal_id, form_id, 'duplicate-email', 'Company name too long. Please restrict upto 100 characters.');
				enable_save_button($(saveBtn));// Remove loading image
				return;
			}
			obj.contact_company_id = null;
			properties.push(property_JSON('company', form_id + ' #contact_company'));
		}
		else
			obj.contact_company_id = null;

		if (isValidField(form_id + ' #email'))
			properties.push(property_JSON('email', form_id + ' #email'));

		if (isValidField(form_id + ' #phone'))
			properties.push(property_JSON('phone', form_id + ' #phone'));
		
/*		if (isValidField(form_id + ' #skypePhone'))
			properties.push(property_JSON('skypePhone', form_id + ' #skypePhone'));*/

		if (isValidField(form_id + ' #job_title'))
			properties.push(property_JSON('title', form_id + ' #job_title'));

		if (tagsSourceId === undefined || !tagsSourceId || tagsSourceId.length <= 0)
			tagsSourceId = form_id;

		var tags = get_tags(tagsSourceId);

		if (tags != undefined && tags.length != 0)
		{
			obj.tags = [];

			var tags_valid = true;
			if (!obj['tagsWithTime'] || obj['tagsWithTime'].length == 0)
			{
				$.each(tags[0].value, function(index, value)
				{
					if (!isValidTag(value, false))
					{
						tags_valid = false;
						return false;
					}
				});
				obj['tagsWithTime'] = [];
				$.each(tags[0].value, function(index, value)
				{
					obj.tagsWithTime.push({ "tag" : value });
				});
			}
			else
			{
				var tag_objects_temp = [];
				$.each(tags[0].value, function(index, value)
				{
					var is_new = true;
					$.each(obj['tagsWithTime'], function(index, tagObject)
					{
						if (value == tagObject.tag)
						{
							tag_objects_temp.push(tagObject);
							is_new = false
							return false;
						}
					});

					if (is_new)
					{
						tag_objects_temp.push({ "tag" : value });
						// check if tags are valid if they are newly adding to
						// the contact.
						if (!isValidTag(value, false))
						{
							tags_valid = false;
							return false;
						}
					}
				});
				obj['tagsWithTime'] = tag_objects_temp;
			}
			if (!tags_valid)
			{
				$('.invalid-tags-person').show().delay(6000).hide(1);
				enable_save_button($(saveBtn));
				return false;
			}
		}
		if(obj.contact_company_id){
			$.ajax({
				url : "/core/api/contacts/"+obj.contact_company_id,
				type: 'GET',
				dataType: 'json',
				success: function(company){
					if(company){
						contact_company = company ;
						return serialize_contact_properties_and_save(e, form_id, obj, properties, modal_id, continueContact, is_person, saveBtn, tagsSourceId, id, created_time, custom_fields_in_template, template , company);
					}
				},
				error: function(){
					console.log("company fetch failed.");
					return serialize_contact_properties_and_save(e, form_id, obj, properties, modal_id, continueContact, is_person, saveBtn, tagsSourceId, id, created_time, custom_fields_in_template, template);
				}
			});
		}
		else
			return serialize_contact_properties_and_save(e, form_id, obj, properties, modal_id, continueContact, is_person, saveBtn, tagsSourceId, id, created_time, custom_fields_in_template, template);
			   
	}
	else
	{

		// Stores company's continue editing form template key
		template = 'continue-company';
		obj.type = 'COMPANY';
		// Creates properties of contact (company)

		if (isValidField('company_name'))
		{
			var companyName = $form.find('#company_name').prop('value');
			if (companyName.length > 100)
			{
				// Company name too long, show error and return;
				show_error(modal_id, form_id, 'duplicate-email', 'Company name too long. Please restrict upto 100 characters.');

				enable_save_button($(saveBtn));// Remove loading image
				return;
			}
			if (!id)
			{
				isCompanyExist(companyName, function(status){

					if (status)
					{
						show_error(modal_id, form_id, 'duplicate-email', 'Company name already exists.');

						enable_save_button($(saveBtn));// Remove loading image
						return;
					}
					else
					{
						properties.push(property_JSON('name', form_id + ' #company_name'));
						return serialize_contact_properties_and_save(e, form_id, obj, properties, modal_id, continueContact, is_person, saveBtn, tagsSourceId, id, created_time, custom_fields_in_template, template);
					}

				});

				return;
				
			}
			else
			{
				properties.push(property_JSON('name', form_id + ' #company_name'));
				return serialize_contact_properties_and_save(e, form_id, obj, properties, modal_id, continueContact, is_person, saveBtn, tagsSourceId, id, created_time, custom_fields_in_template, template);
			}
		}		
	}


}

function serialize_contact_properties_and_save(e, form_id, obj, properties, modal_id, continueContact, is_person, saveBtn, tagsSourceId, id, created_time, custom_fields_in_template, template ,contact_company){
		
		if (isValidField(form_id + ' #company_url'))
			properties.push(property_JSON('url', form_id + ' #company_url'));		
		if (tagsSourceId === undefined || !tagsSourceId || tagsSourceId.length <= 0)
			tagsSourceId = form_id;

		var tags = get_tags(tagsSourceId);
		if (tags != undefined && tags.length != 0)
		{
			obj.tags = [];

			var tags_valid = true;
			if (!obj['tagsWithTime'] || obj['tagsWithTime'].length == 0)
			{
				$.each(tags[0].value, function(index, value)
				{
					if(!isValidTag(value, false)) {
						tags_valid = false;
						return false;
					}
				});
				obj['tagsWithTime'] = [];
				$.each(tags[0].value, function(index, value)
				{
					obj.tagsWithTime.push({ "tag" : value });
				});
			}
			else
			{
				var tag_objects_temp = [];
				$.each(tags[0].value, function(index, value)
				{
					var is_new = true;
					$.each(obj['tagsWithTime'], function(index, tagObject)
					{
						if (value == tagObject.tag)
						{
							tag_objects_temp.push(tagObject);
							is_new = false
							return false;
						}
					});

					if (is_new) {
						tag_objects_temp.push({ "tag" : value });
						//check if tags are valid if they are newly adding to the contact.
						if(!isValidTag(value, false)) {
							tags_valid = false;
							return false;
						}
					}
				});
				obj['tagsWithTime'] = tag_objects_temp;
			}
			if(!tags_valid) {
				$('.invalid-tags-person').show().delay(6000).hide(1);
				enable_save_button($(saveBtn));
				return false;
			}
		}
	// }

	/*
	 * Reads the values of multiple-template fields from continue editing form
	 * of both person and company and pushes into properties
	 */
	$('#' + form_id + ' div.multiple-template').each(function(index, element)
	{

		/*
		 * Reads each field (city, state, country and etc..) as a json object
		 * and pushes into 'addressJSON' and then it is pushed into properties.
		 */
		if ($(element).attr('data') == 'address')
		{
			var addressJSON = {};
			var subtype;
			$.each($(element).find(":input,select"), function(index, subelement)
			{

				if ($(subelement).val() == undefined || $(subelement).val().length == 0)
					return;

				if ($(subelement).attr('name') == 'address-type')
					subtype = $(subelement).val();
				else
					addressJSON[$(subelement).attr('name')] = $(subelement).val();
			});

			if ($.isEmptyObject(addressJSON))
				return;

			properties.push({ "name" : $(element).attr('data'), "value" : JSON.stringify(addressJSON), "subtype" : subtype })
		}
		else
		{
			var inputElement = $(element).find('input');
			var selectElement = $(element).find('select');

			// If element has no value, don't push into properties
			if (inputElement.val() == undefined || inputElement.val().trim().length == 0)
				return;

			// Checks whether fields for hidden fields (Used for clone do not
			// save them)
			if (!$(element).find('input').parents('div.controls').hasClass('hide'))
				properties.push({ "name" : $(element).attr('data'), "value" : inputElement.val(), "subtype" : selectElement.val() })
		}
	});
	/*
	 * Check whether there are any properties in existing contact, which can get
	 * lost in contact update form. There are chances user adds a property(may
	 * be stripe id..) using developers API and contact image saved as CUSTOM type,
	 * in order not to loose them following verification is done
	 */
	if (obj.properties)
	{
		var properties_temp = properties;
		$
				.each(obj.properties,
						function(contact_property_index, contact_property)
						{
							$
									.each(properties_temp,
											function(new_property_index, new_property)
											{

												// If property name exists in
												// new property, no changes are
												// made considering property is
												// updated.
												if (new_property.name == contact_property.name)
												{

													return false;
												}

												// If property name is missing
												// in new properties then
												// preserving them.
												else if (new_property_index == (properties_temp.length - 1) && custom_fields_in_template
														.indexOf(contact_property.name) == -1 && contact_property.type == "CUSTOM" && contact_property.name == "image")
												{
													properties.push(contact_property);
												}
											
											});
						});
	}
	if(contact_company){
		var prop = null;
		$.each(contact_company.properties , function(){
			if(this.name == "address" && this.subtype == "office")
				prop = this.value;
			});
		if(prop){
			var addressFlag = false;
			$.each(properties, function(key, value){
		    console.log(key);
		    	if(key == "address"){
		    		addressFlag = true ;
		    		return false;
				}
			});
			if(!addressFlag){
				var form_element = $(e.target).attr('id')
				if(form_element == "person_validate" || form_element == "continue-contact"){						
					console.log(prop);
					properties.push({ "name" : "address", "value" : prop, "subtype" : "office"});
				}
			}
		}
	}
	// Stores json object with "properties" as value
	var propertiesList = [];
	propertiesList.push({ "name" : "properties", "value" : properties });

	// Convert array into JSON
	for (var i = 0; i < propertiesList.length; ++i)
	{
		obj[propertiesList[i].name] = propertiesList[i].value;
	}

	// Updates the old contact
	if (id != null)
		obj['id'] = id;


	obj["created_time"] = created_time;

	// Saves contact
	var contactModel = new BaseModel();
	contactModel.url = 'core/api/contacts';
	contactModel.save(obj, { success : function(data)
	{

		// Remove social search results from local storage after editing a
		// contact
		_agile_delete_prefs("Agile_linkedin_matches_" + data.get('id'));
		_agile_delete_prefs("Agile_twitter_matches_" + data.get('id'));

		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));

		if(is_person)
			add_contact_to_view(App_Contacts.contactsListView, data, obj.id);
		else
			add_contact_to_view(App_Companies.companiesListView, data, obj.id);

		// Adds the tags to tags collection
		if (tags != undefined && tags.length != 0)
		{
			$.each(tags[0].value, function(index, tag)
			{
				console.log(tagsCollection);
				tagsCollection.add(new BaseModel({ "tag" : tag }));
			});
		}

		// Removes person image form new-person-modal
		$('#' + modal_id).find('img.person-img').remove();

		// Loads continue editing form along with custom fields if any
		if (continueContact)
		{

			add_custom_fields_to_form(data.toJSON(), function(contact)
			{
				console.log(contact);
				deserialize_contact(contact, template);

			}, data.toJSON()["type"]);

		}
		else
		{
			if(is_person){
				// update contacts-details view
				if (App_Contacts.contactDetailView)
								App_Contacts.contactDetailView.model = data;

				// App_Contacts.contactDetails(data.id,data);
				// App_Contacts.navigate("contact/"+data.id);
				if(!CALL_CAMPAIGN.start && Current_Route != "contact/" + data.id)
				App_Contacts.navigate("contact/" + data.id, { trigger : true });
			} else {
				//Update all the existed contacts with mapped this company
				var companyJSON = data.toJSON();
				if(App_Contacts.contactsListView)
				{
					var realetd_contats = App_Contacts.contactsListView.collection.where({ contact_company_id : ""+companyJSON.id });
					$.each(realetd_contats, function(index, contactModel){
						$.each(contactModel.get("properties"), function(index, property){
							if(property.name == "company" && property.type == "SYSTEM")
							{
								$.each(companyJSON.properties, function(index, companyProperty){
									if (companyProperty.name == "name" && companyProperty.type == "SYSTEM"){
										property.value = companyProperty.value;
									}
								});
							}
						});
					});
				}

				// update contacts-details view
				if (App_Companies.companyDetailView)
					App_Companies.companyDetailView.model = data;

				if(Current_Route != "company/" + data.id)
				App_Companies.navigate("company/" + data.id, { trigger : true });
			}
		}

		// Hides the modal
		$('#' + modal_id).modal('hide');

		// Resets each element
		$('#' + form_id).each(function()
		{
			this.reset();
		});

		// Removes tags list(remove them from new person modal)
		$('.tagsinput', $("#" + modal_id)).empty();
		//added for call campaign - functionality after updating fom call campaign
			if(CALL_CAMPAIGN.start ){
				var id = $('#continueform input[name=id]').val();
				if(CALL_CAMPAIGN.contact_update){
					CALL_CAMPAIGN.current_count = CALL_CAMPAIGN.current_count - 1;
					CALL_CAMPAIGN.contact_update = false;
					dialNextCallAutomatically();
					Backbone.history.loadUrl("contact/" + id);
					$( window ).scrollTop( 0 );
					return;
				}else{
					var currentCampaignId = CALL_CAMPAIGN.contact_id_list[CALL_CAMPAIGN.current_count];
					if(id == currentCampaignId ){
						CALL_CAMPAIGN.current_count = CALL_CAMPAIGN.current_count-1;
						dialNextCallAutomatically();
					}
					
				}
				
				if(Current_Route != "contact/" + id)
				Backbone.history.navigate("contact/" + id, { trigger : true });	
				$( window ).scrollTop( 0 );
				
				
			}
	}, error : function(model, response)
	{

		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));

		// Shows error alert of duplicate contacts
		if (response.status == 400)
		{
			// 400 is our custom code, thrown when duplicate email detected.
			var dupEmail = response.responseText.split('|')[1];
			if (!dupEmail)
				dupEmail = "";
			// get the already existing email from response text.
			show_error(modal_id, form_id, 'duplicate-email', response.responseText);
		}
		else if (response.status == 403)
		{
			if(form_id == 'companyForm')
				show_error_in_formactions(modal_id, form_id, 'form-action-error', "You do not have permission to create Companies.");
			else if(form_id == 'continueCompanyForm')
				show_error_in_formactions(modal_id, form_id, 'form-action-error', "You do not have permission to update Companies.");
			else
				show_error_in_formactions(modal_id, form_id, 'form-action-error', response.responseText);
		}
		else
			show_error(modal_id, form_id, 'duplicate-email', response.responseText);
	} });

	return obj;

}

/**
 * Deserializes the contact to edit it. Loads the editing form using handlebars.
 * Fills the matched values, by iterating the properties.
 * 
 * @param {Object}
 *            contact contact object to edit
 * @param {String}
 *            template template key to load the form
 */
function deserialize_contact(contact, template)
{

	// Loads the form based on template value
	getTemplate(template, contact, undefined, function(template_ui){
		if(!template_ui)
			  return;
			
		var form = $('#content').html($(template_ui));	
		// Add placeholder and date picker to date custom fields
		$('.date_input').attr("placeholder", "Select Date");

		$('.date_input').datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY});

		// To set typeahead for tags
		setup_tags_typeahead();

		// Iterates through properties and ui clones
		$.each(contact.properties, function(index, element)
		{

			if (element.type == "CUSTOM" && element.name != "website")
				return;
			// Removes first input field
			$($('#' + form.attr('id') + ' div.multiple-template.' + element.name).closest('div.controls.second')).remove();
			var field_element = $('#' + form.attr('id') + ' div.multiple-template.' + element.name);

			// Generate and populate multiple fields
			fill_multi_options(field_element, element);
		});

		var fxn_display_company = function(data, item)
		{
			$("#content [name='contact_company_id']")
					.html(
							'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + data + '"><span><a class="text-white m-r-xs" href="#contact/' + data + '">' + item + '</a><a class="close" id="remove_tag">&times</a></span></li>');
			$("#content #contact_company").hide();
			if(data){							
				$.ajax({
					url : "/core/api/contacts/"+data,
					type: 'GET',
					dataType: 'json',
					success: function(company){
						if(company){
							console.log(company);
							contact_company = company ;
							var prop = null;
							$.each(contact_company.properties , function(){
								if(this.name == "address" && this.subtype == "office")
									prop = JSON.parse(this.value);
							});				
							if(prop){
								$("#content .address-type").val("office");
								if(prop.address)
									$("#content #address").val(prop.address);
								if(prop.city)
									$("#content #city").val(prop.city);
								if(prop.state)
									$("#content #state").val(prop.state);
								if(prop.zip)
									$("#content #zip").val(prop.zip);
								if(prop.country)
									$("#content #country").val(prop.country);
							}

						}

					}
				});
			}
		}
		agile_type_ahead("contact_company", $('#content'), contacts_typeahead, fxn_display_company, 'type=COMPANY', '<b>No Results</b> <br/> Will add a new one');

		if (contact.contact_company_id && contact.contact_company_id.length > 0)
		{
			for (var i = 0; i < contact.properties.length; ++i)
			{
				if (contact.properties[i].name == 'company')
				{
					$("#content #contact_company").hide();
					$("#content [name='contact_company_id']")
							.html(
									'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + contact.contact_company_id + '"><span><a class="text-white m-r-xs" href="#contact/' + contact.contact_company_id + '">' + contact.properties[i].value + '</a><a class="close" id="remove_tag">&times</a></span></li>');
				}
			}
		}

		// If contact is added from social suite, need to add website.
		// socialsuite_add_website();

		$('.contact_input', $('#content')).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), $('#content')), contacts_typeahead, undefined, 'type=PERSON');
		});

		$('.contact_input', $('#content')).each(function(){
			var name = $(this).attr("name");
			for (var i = 0; i < contact.properties.length; ++i)
			{
				if (contact.properties[i].name == name)
				{
					var valJSON = $.parseJSON(contact.properties[i].value);
					var referenceContactIds = "";
					$.each(valJSON, function(index, value){
						if(index != valJSON.length-1){
							referenceContactIds += value + ",";
						}else{
							referenceContactIds += value;
						}
					});
					setReferenceContacts(name, $('#content'), valJSON, referenceContactIds);
				}
			}
		});

		$('.company_input', $('#content')).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), $('#content')), contacts_typeahead, undefined, 'type=COMPANY');
		});

		$('.company_input', $('#content')).each(function(){
			var name = $(this).attr("name");
			for (var i = 0; i < contact.properties.length; ++i)
			{
				if (contact.properties[i].name == name)
				{
					var valJSON = $.parseJSON(contact.properties[i].value);
					var referenceContactIds = "";
					$.each(valJSON, function(index, value){
						if(index != valJSON.length-1){
							referenceContactIds += value + ",";
						}else{
							referenceContactIds += value;
						}
					});
					setReferenceContacts(name, $('#content'), valJSON, referenceContactIds);
				}
			}
		});
		

	}, "#content");

	
	
}

/**
 * Generates new field for each value in properties (especially for email, phone
 * and website)
 * 
 * @method fill_multi_options
 * @param {Object}
 *            field_element Html element having property name as class name
 * @param {Object}
 *            element property object
 * 
 */
function fill_multi_options(field_element, element)
{

	if (element.type == "CUSTOM" && element.name != "website")
		return;

	// Fills address fields
	if (element.name == 'address')
	{
		var json = JSON.parse(element.value);

		$.each($(field_element).find(":input,select"), function(index, sub_field_element)
		{
			var name = $(sub_field_element).attr('name');
			if (name == 'address-type')
				$(sub_field_element).val(element.subtype);
			else if (name == 'country')
			{
				if (json[name] && json[name].length > 2)
				{
					$("#country").remove();
					$(field_element).append('<input type="text" name="country" id="country" class="form-control m-b-sm" placeholder="country">');
					$("#country").val(json[name]);
				}
				else
					$(sub_field_element).val(json[name]);
			}
			else
				$(sub_field_element).val(json[name]);
		});
	}
	else
	{

		/*
		 * Fills other multiple-template fields (email, phone and website)
		 * Clones the fields into control-group and fills with associated values
		 */
		var append_to = $(field_element).parents('div.control-group');

		var html_element = append_to.children().siblings("div.controls:first").clone().removeClass('hide');

		$(html_element).find('input').val(element.value).attr('name', element.value);
		$(html_element).find('select').val(element.subtype);

		html_element.appendTo(append_to);
	}
}


/**
 * Creates json object for each custom field in contact form with name, type and
 * value as attributes.
 * 
 * @method custom_Property_JSON
 * @param name
 *            name of the field
 * @param form_id
 *            id of the form
 * @param type
 *            type of the element
 * @returns property json object
 */
function custom_Property_JSON(name, type, form_id)
{
	var json = {};

	// assign value after checking type, its different for checkbox
	json.name = name;
	json.type = type;

	var elem = $('#' + form_id).find('*[name="' + name + '"]');

	var elem_type = elem.attr('type'), elem_value;

	console.log(elem_type);


	if (elem_type == 'checkbox')
		elem_value = elem.is(':checked') ? 'on' : 'off';
	else if (elem.hasClass("date_input"))
		{
			if(CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1)
				elem_value = new Date(convertDateFromUKtoUS(elem.val())).getTime() / 1000;
			else
				elem_value = new Date(elem.val()).getTime() / 1000;
		}
	else if (elem.hasClass("contact_input") || elem.hasClass("company_input"))
	{
		var contact_values = [];
		$('ul[name="'+name+'"]', $('#'+form_id)).find('li').each(function(){
			contact_values.push($(this).attr("data"));
		});
		elem_value = JSON.stringify(contact_values);
	}
		else
			elem_value = elem.val();


	json.value = elem_value;

	return json;
}

// UI Handlers for Continue-contact and continue-company
$(function()
{

	$('body').on('click', '#content [name="contact_company_id"] a.close', function(e)
	{
		$("#content #contact_company").show();
		$("#content [name='contact_company_id']").html('');
		if(contact_company){
			var flag = false ; var prop = null;
			$.each(contact_company.properties , function(){
				if(this.name == "address" && this.subtype == "office")
					prop = JSON.parse(this.value);
				});
				if(prop){
					if(prop.address && $("#content #address").val() && $("#content #address").val() != prop.address)
						flag = true;
					else if(prop.city && $("#content #city").val() && $("#content #city").val() != prop.city)
						flag = true;
					else if(prop.state && $("#content #state").val() && $("#content #state").val() != prop.state)
						flag = true;
					else if(prop.zip && $("#content #zip").val() && $("#content #zip").val() != prop.zip)
						flag = true;
					else if(prop.country && $("#content #country").val() && $("#content #country").val() != prop.country)
						flag = true ;
					if(!flag){
						$("#content .address-type,#address,#city,#state,#zip,#country").val('');
						/*$("#content #address").val('');
						$("#content #city").val('');
						$("#content #state").val('');
						$("#content #zip").val('');
						$("#content #country").val('');*/
					}
				}
			}

	})

	// Clones multiple fields
	$('body').on('click', 'a.multiple-add', function(e)
	{
		e.preventDefault();

		// Clone the template
		$(this).parents("div.control-group").append($(this).parents().siblings("div.controls:first").clone().removeClass('hide').addClass('col-sm-offset-3'));
	});

	// Removes multiple fields
	$('body').on('click', 'a.multiple-remove', function(e)
	{
		e.preventDefault();

		// Get closest template and remove from the container
		$(this).closest("div.multiple-template").remove();
	});

	// Continue editing of new-person-modal
	$('#continue-contact').click(function(e)
	{
		serialize_and_save_continue_contact(e, 'personForm', 'personModal', true, true, this, 'tags_source_person_modal');
	});

	// Update button click event in continue-contact form
	$('body').on('click', '#update', function(e)
	{
		serialize_and_save_continue_contact(e, 'continueform', 'personModal', false, true, this, "tags_source_continue_contact");
	});

	// Close button click event in continue-contact form
	$('body').on('click', '#close', function(e)
	{
		e.preventDefault();
		var id = $('#continueform input[name=id]').val();
		//added for call campaign - functionality after updating fom call campaign
		if(CALL_CAMPAIGN.start && CALL_CAMPAIGN.contact_update){
			CALL_CAMPAIGN.contact_update = false;
			Backbone.history.loadUrl("#contact/" + id);
			$( window ).scrollTop( 0 );
			return;
		}
		if (id)
		{
			Backbone.history.navigate("contact/" + id, { trigger : true });
		}
	});

	// Continue editing in the new-company-modal (to avoid changing the route
	// event to be prevented.)
	$('#continue-company').click(function(e)
	{
		serialize_and_save_continue_contact(e, 'companyForm', 'companyModal', true, false, this);
	});

	// Update button click event in continue-company
	$('body').on('click', '#company-update', function(e)
	{
		serialize_and_save_continue_contact(e, 'continueCompanyForm', 'companyModal', false, false, this,'tags_source_continue_company');
	});
});

/**
 * Adds conatct to view, takes care of if its a COMPANY or PERSON.
 * 
 * @param appView -
 *            view whose collection to update
 * @param model -
 *            the model contact to add
 * @param isUpdate -
 *            if undefined, implies that its new one, else an update
 */
function add_contact_to_view(appView, model, isUpdate)
{
	if (!appView)
		return;

	if (model.get('type') == 'COMPANY')
	{
		//Change the entity type to company
		model.set({ "entity_type" : "company_entity" }, { silent : true });
		if (appView.collection.get(model.id) != null) // update existing model
			appView.collection.get(model.id).set(model);
		else if (company_util.isCompany()) // add model only if its in
			// company view
			add_model_cursor(appView.collection, model);
		else if (isUpdate)
			COMPANIES_HARD_RELOAD = true; // reload contacts next time,
		// because we may have updated
		// Company, so reflect in Contact
	}
	else
	{
		if (!_agile_get_prefs('company_filter')) // check if in contacts view
		{
			if (!_agile_get_prefs('contact_filter')) // add model only if its in
			// plain contact view, otherwise
			// always hard reload
			{
				if (appView.collection.get(model.id) != null) // update
					// existing
					// model
					appView.collection.get(model.id).set(model);
				else
					add_model_cursor(appView.collection, model);
			}
			else
				CONTACTS_HARD_RELOAD = true; // custom filter active, make
			// sure to reload from server
		}
	}
}

/**
 * Adds model to collection at second last position, so cursor is preserved.
 * 
 * @param app_collection -
 *            the collection to add to, must exist
 * @param mdl -
 *            the new model to be added
 */
function add_model_cursor(app_collection, mdl)
{
	if (app_collection.models.length >= 1)
		app_collection.add(mdl, { at : app_collection.models.length - 1 });
	else
		app_collection.add(mdl);

	if(app_collection.at(0).attributes.count){
		app_collection.at(0).attributes.count += 1;
	}		
}

/**
 * check for duplicated company
 */
function isCompanyExist(company, callback)
{
	$.get('core/api/contacts/company/validate?companyName=' + company, function(data){
		   if(data == "true"){
		   	    callback(true);
		   		return;
		   }

		   callback(false);
	});

}

/**
 * Sets refernce contacts to contacts, companies, deals and cases update forms
 * 
 * @param name -
 *            custom field name
 * @param ele -
 *            update from element
 * @param valJSON -
 *            list of custom fields
 * @param referenceContactIds -
 *            list of reference contact ids
 */
function setReferenceContacts(name, ele, valJSON, referenceContactIds)
{
	App_Contacts.referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });

	App_Contacts.referenceContactsCollection.collection.fetch({
		success : function(data){
			if (data && data.length > 0)
			{
				$.each(valJSON, function(index, value){
					var contact_name = getPropertyValue(data.get(value).get("properties"), "first_name");
					var last_name = getPropertyValue(data.get(value).get("properties"), "last_name");
					if(last_name)
					{
						contact_name += " "+last_name;
					}
					if(contact_name)
					{
						$("ul[name='"+name+"']", ele)
						.append(
								'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + value + '"><a class="text-white m-r-xs" href="#contact/' + value + '">' + contact_name + '</a><a class="close" id="remove_tag">&times</a></li>');
					}
					else
					{
						$("ul[name='"+name+"']", ele)
						.append(
								'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + value + '"><a class="text-white m-r-xs" href="#company/' + value + '">' + getPropertyValue(data.get(value).get("properties"), "name") + '</a><a class="close" id="remove_tag">&times</a></li>');
					}
					
				});
			}
			hideTransitionBar();
		}
	});
}
/**
 * logPhone.js script file defines the functionality of saving a logPhone in logPhone
 * database. If logPhone is related to a contact, which is in contact detail view
 * then the logPhone model is inserted into time-line.
 * 
 * @module Contact management
 * @author Prakash
 */
$(function()
{
	
	
	// This method is called when the add-note modal is closed .....
	//This will check if the if the activities is saved or not
		$('#logCallModal').on('hidden.bs.modal', function (e) {
			
			var widget = $("#callWidgetName",$("#phoneLogForm")).val();
			if(CallLogVariables.callActivitySaved || widget == ""){
				resetCallLogVariables();
				return;
			}
			var data ={};
			var direction = CallLogVariables.callType;
			if(direction == "outbound-dial" || direction == "Outgoing" || direction == "outgoing") {
				data.url = CallLogVariables.url + "savecallactivityById";
			}else{
				data.url = CallLogVariables.url + "savecallactivity";
			}
				data.id = CallLogVariables.id;
				data.callType = CallLogVariables.callType;
				data.number = CallLogVariables.phone;
				data.status = CallLogVariables.status;
				data.duration = CallLogVariables.duration;
				data.widget = CallLogVariables.callWidget
				saveLogPhoneActivity(data);
				resetCallLogVariables();
		});  
		
/**
 * select box change functionality on number change
 * @id = "logPhone_number_option"
 * 
 */	
	$('#logCallModal').on('click', '#logPhone_number_option', function(e)
	{
		var formName = $(this).parents("form").attr("id");
		
		if($("#"+formName + " #logPhone_number_error").is(":visible")){
			$("#"+formName + " #logPhone_number_error").hide();
		}	
		
		var opt = $(this).attr("value");
		var optHtml = $(this).html();
		$("#"+formName + " #contact_logPhone_number").html(optHtml);
		$("#"+formName + " #contact_logPhone_number").attr("value", opt);
		
	});
	
	/**
	 * select box change functionality on status change
	 * @id = "callStatus"
	 * 
	 */
	
	$('#logCallModal').on('click', '#statusValue', function(e)
			{
				var formName = $(this).parents("form").attr("id");
				var opt = $(this).attr("value");
				var optHtml = $(this).html();
				$("#"+formName + " #callStatus").html(optHtml);
				$("#"+formName + " #callStatus").attr("value", opt);
				if(opt == 'busy' || opt == 'failed' || opt == 'missed'){
					$("#hour").attr('disabled','disabled');
					$("#min").attr('disabled','disabled');
					$("#sec").attr('disabled','disabled');
				}else{
					$("#hour").removeAttr('disabled');
					$("#min").removeAttr('disabled');
					$("#sec").removeAttr('disabled');
				}
			});
	
	/**
	 * Saves logPhone model using "Bcakbone.Model" object, and adds saved data to
	 * time-line if necessary.
	 */
	$('#logCallModal').on('click', '#validate-logPhone', function(e)
	{
		e.preventDefault();

		// Returns, if the save button has disabled attribute
		if ($(this).attr('disabled'))
			return;
		
		var formName;
		var modalName;
		if($(this).attr('action') == "update"){
			formName = "phoneLogForm_update";
			modalName = "phoneLogModal_update";
		}else{
			formName = "phoneLogForm";
			modalName = "logCallModal";
		}
		
		var json = serializeForm(formName);
		
		if (!isValidForm("#" + formName))
		{
			return;
		}
		
		if(!json.subject){
			$("#"+formName +" #logPhone_subject_error").show().delay(5000).hide(1);
			return;
		}
		
		if($("#"+formName +" #contact_logPhone_number").attr("value") == "")
		{
			$("#"+formName +" #logPhone_number_error").show().delay(5000).hide(1);
			return;
		}
		
		if($("#"+formName +" #callStatus").attr("value") == ""){
			$("#"+formName +" #logPhone_status_error").show().delay(5000).hide(1);
			return;
		}

		 if ($("#"+formName +" #logPhone_relatedto_tag").children().length == 0) {
            $("#"+formName + " #log_relatedto_error").show().delay(5000).hide(1);
            return
        }

		json['status'] = $("#"+formName +" #callStatus").attr("value");
		
		var h = json.hour;
		var m = json.min;
		var s =	json.sec;
		var duration = 0;
			if(json['status'] == 'busy' || json['status'] == 'failed' || json['status'] == 'missed' ){
				duration = 0;
			}else{
				if(!h || !m || !s){
					$("#"+formName +" #logPhone_duration_error1").show().delay(5000).hide(1);
					return;
				}
				if(isNaN(h) || isNaN(m) || isNaN(s)){
					$("#"+formName +" #logPhone_duration_error1").show().delay(5000).hide(1);
					return;
				}else{
					if(h < 0){
						$("#"+formName +" #logPhone_duration_error1").show().delay(5000).hide(1);
						return;
					}else if(m >59 || m < 0 || s > 59 || s < 0){
						$("#"+formName +" #logPhone_duration_error").show().delay(5000).hide(1);
						return;
					}
					
					h = parseInt(h);
					m = parseInt(m);
					s = parseInt(s);
					duration = (h*3600)+(m*60)+(s*1);
					
					if(json['status'] == 'answered' || json['status'] == 'inquiry' || json['status'] == 'interest' || json['status'] == 'new opportunity' || json['status'] == 'meeting scheduled'){
						if(duration <= 0){
							$("#"+formName +" #logPhone_duration_error2").show().delay(5000).hide(1);
							return;
						}
					}
					
				}
			}
		

		disable_save_button($(this));
		json['phone'] = $("#"+formName +" #contact_logPhone_number").attr("value");
		json['duration'] = duration;
	//	json['contact_id'] =  $("#"+formName +" #contact_id").attr("value");
		console.log(json);
		saveLogPhone($("#"+formName), $("#"+modalName), this, json);
		
	});
	



	/**
	 * this method will call on click of update button in phone log modal
	 * this will update the edited logPhone
	 *
	 *
	 */
	
	
	$('body').on('click', '.edit-logPhone', function(e)
	{
		e.preventDefault();
		console.log($(this).attr('data'));  // data gives us the id for the particular logphone model
		var logPhone = notesView.collection.get($(this).attr('data'));

		// Clone modal, so we dont have to create a update modal.
		// we can clone add change ids and use it as different modal

		try{
			var logCallParam = {};
			logPhone = logPhone.toJSON();
			var contact = logPhone.contacts[0];
			var name = getContactName(contact);
			phone = getPhoneWithSkypeInArray(contact.properties);
			logCallParam['num'] = phone;
			logCallParam['action'] = "edit";
			$("#logCallModal").html(getTemplate("phoneLogModal",logCallParam));
			deserializeForm(logPhone, $("#phoneLogForm", "#logCallModal"));
			
			$("#phoneLogForm #contact_logPhone_number").html(logPhone.phone);
			$("#phoneLogForm #contact_logPhone_number").attr("value", logPhone.phone);
			$("#phoneLogForm #contact_logPhone_number").removeClass("add_logPhone");
			$("#phoneLogForm #contact_logPhone_number").css({"cursor": "auto","color":"#777"});
			
			$("#phoneLogForm #callStatus").attr("value", logPhone.status);
			$("#phoneLogForm #callStatus").html(toTitleCase(logPhone.status));

			if(logPhone.status == 'busy' || logPhone.status == 'failed' || logPhone.status == 'missed'){
				$("#phoneLogForm #hour").attr('disabled','disabled');
				$("#phoneLogForm #min").attr('disabled','disabled');
				$("#phoneLogForm #sec").attr('disabled','disabled');
			}
			
			$("#logCallModal").modal('show');
			agile_type_ahead("call_related_to", $("#phoneLogForm", '#logCallModal'), contacts_typeahead);
			/*var contact_html="";
			$.each(contacts,function(index,contact){
				contact_html=contact_html.concat('<li class="btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ contact.id +'">'+getContactName(contact)+'</li>');
	
			});
			$('#phoneLogForm #logPhone_relatedto_tag').html(contact_html);*/
			//$('#phoneLogForm #logPhone_relatedto_tag').html('<li class="btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ contact.id +'">'+getContactName(contact)+'</li>');
		}catch(e){
			$('#logCallModal').modal('hide');
			console.log ("an error has occured")
		}
	});
	
/**
	 * Shows logPhone modal and activates contacts
	 * 
	 * Here we are proiding two solution of save/edit and saveactivity
	 * 1) action : whether to add or edit
	 * 2)setting the value of saveactivity hidden text field : True is auto save the activity and false if dont save the activity
	 */
	$('body').on('click', '.show-logPhone', function(e)
	{
		e.preventDefault();
		
		try{
			var logCallParam = {};
			var contact = null;
			if(company_util.isCompany()){
				contact = App_Companies.companyDetailView.model.toJSON();
			} else {
				contact = App_Contacts.contactDetailView.model.toJSON();
			}
		//	contact = agile_crm_get_contact();
			name = getContactName(contact);
			phone = getPhoneWithSkypeInArray(contact.properties);
			
			logCallParam['num'] = phone;
			logCallParam['action'] = "add";
		
		
		$("#logCallModal").html(getTemplate("phoneLogModal",logCallParam));
		
		
		$('#phoneLogForm #logPhone_relatedto_tag').html('<li class="btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ contact.id +'">'+name+'</li>');
		
		$('#phoneLogForm #saveActivity').val("true");
		$("#logCallModal").modal('show');
		var el = $("#phoneLogForm");
		agile_type_ahead("call_related_to", el, contacts_typeahead);

		}catch(e){
			$('#logCallModal').modal('hide');
			console.log ("an error has occured")
		}

	});
	
	
	/**
	 * Shows edit page to add phone number
	 */
	$('#logCallModal').on('click', '.add_logPhone', function(e)
	{
		e.preventDefault();
		$(".add_logPhone_span","#phoneLogForm").hide();
		$("#contact-add-phone-span", "#phoneLogForm").show();
		
		/*		
		$("#logCallModal").modal('hide');
		routeToPage("contact-edit");
		
		setTimeout(function()
			{
				if($("#continueform #phone:visible").length < 1){
					setTimeout(function()
							{
								$("#continueform #phone:visible").trigger('focus');
							}, 2000);
				}
				$("#continueform #phone:visible").trigger('focus');
			}, 1500);*/
		
	});
	
	$('#logCallModal').on('click', '.contact_phone_add', function(e)
			{
				e.preventDefault();
				var contact;
				var is_person = false;
				var phone = $("#phoneLogForm #contact_phone").val().trim();
				if(!phone){
					$("#phoneLogForm #logPhone_number_error").show().delay(5000).hide(1);
					return;
				}
				var prop = property_JSON('phone', 'phoneLogForm #contact_phone');
				prop['subtype'] = "";
			if(company_util.isCompany()){
				contact = App_Companies.companyDetailView.model.toJSON();
			} else {
				contact = App_Contacts.contactDetailView.model.toJSON();
				is_person = true;
			}
			contact.properties.push(prop);
			
			var contactModel = new BaseModel();
			contactModel.url = "core/api/contacts";
			contactModel.save(contact,{success : function(data){
				console.log("contact " + data);
				$("#contact-add-phone-span").hide();
				$("#contact_logPhone_number").attr("value",prop.value);
				$(".add_logPhone_span","#phoneLogForm").show();
				$("#contact_logPhone_number").html(prop.value);
				if(is_person){
					App_Contacts.contactDetailView.model = data;
				}else{
					App_Companies.companyDetailView.model = data;
				}
					
				$("#phoneLogForm #contact_logPhone_number").removeClass("add_logPhone");
				$("#phoneLogForm #contact_logPhone_number").css({"cursor": "auto","color":"#777"});
			}
			
			})
			
				/*		
				$("#logCallModal").modal('hide');
				routeToPage("contact-edit");
				
				setTimeout(function()
					{
						if($("#continueform #phone:visible").length < 1){
							setTimeout(function()
									{
										$("#continueform #phone:visible").trigger('focus');
									}, 2000);
						}
						$("#continueform #phone:visible").trigger('focus');
					}, 1500);*/
				
			});
	
	

});


function saveLogPhone(form, modal, element, logPhone)
{

	console.log(logPhone);
	 $(".logPhone-save-status").html("");
	 
	var logPhoneModel = new Backbone.Model();
	logPhoneModel.url = 'core/api/notes';
	logPhoneModel.save(logPhone, { success : function(data)
	{

		// Removes disabled attribute of save button
		enable_save_button($(element));//$(element).removeAttr('disabled');

		form.each(function()
		{
			this.reset();
		});

		var logPhone = data.toJSON();

		if($("#saveActivity",form).val() == "true"){
			try{
				var contactDetailsObj;
				if(CallLogVariables.id){
					contactDetailsObj = CallLogVariables.id;
				}else{
					contactDetailsObj = agile_crm_get_contact();	
				}
				var data1 ={};
				data1.url = "/core/api/notes/save_logPhoneActivity";
				data1.id = contactDetailsObj.id;
				data1.callType = logPhone.callType;
				data1.number = logPhone.phone;
				data1.status = logPhone.status;
				data1.duration = logPhone.duration;
				data1.widget = $("#callWidgetName",form).val();
				CallLogVariables.callActivitySaved = true;
				saveLogPhoneActivity(data1);
			}catch(e){
				console.log("activities not saved AS CONTACT NOT FOUND");
			}
			
		}
		
		modal.modal('hide');

		
		// function
		if (notesView && notesView.collection)
		{
			console.log(notesView.collection.toJSON());
			if(notesView.collection.get(logPhone.id))
			{
				notesView.collection.get(logPhone.id).set(new BaseModel(logPhone));
			}
			else
			{
				notesView.collection.add(new BaseModel(logPhone), { sort : false });
				notesView.collection.sort();
			}
		}
		
		//updating in contact detail view
		if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
		{
			
				if (logPhone.contacts[0].id == App_Contacts.contactDetailView.model.get('id'))
				{

					add_entity_to_timeline(data);

					return false;
				}

		}
		
		
	},
	  error: function(){
		  $(".logPhone-save-status").html("Could not save. Please try again");
		    console.log('error');
		    enable_save_button($(element));
		  } });
}

function toTitleCase(str) {
    return str.replace(/(?:^|\s)\w/g, function(match) {
        return match.toUpperCase();
    });
}

function saveLogPhoneActivity(data){
	var direction = data.callType;
	if(direction == "outbound-dial" || direction == "Outgoing" || direction == "outgoing") {
		$.post( data.url,{
			id:data.id,
			direction: direction, 
			phone: data.number, 
			status : data.status,
			callWidget : data.widget,
			duration : data.duration 
			});
	}else{
		$.post( data.url,{
			direction: direction, 
			phone: data.number, 
			status : data.status,
			callWidget : data.widget,
			duration : data.duration 
			});
	}
}




/**
 * this method will dynamically populate the log call modal with the supplier params
 * this will update the edited logPhone
 *
 *
 */

function showDynamicCallLogs(data)
{
	try{
		console.log("parameter send" + data );
		var logCallParam = {};
		logCallParam['num'] = [data.number];
		logCallParam['action'] = "add";
		$("#logCallModal").html(getTemplate("phoneLogModal",logCallParam));
		
		$("#phoneLogForm #callStatus").attr("value", data.status);
		$("#phoneLogForm #callStatus").html(toTitleCase(data.status));
		$("input[name=callType][value="+data.callType+"]").attr('checked', 'checked');
		
		$("#logCallModal").modal('show');
		$('#phoneLogForm #subject').val(data.subject);
		var time = getTimeInArray(data.duration); //[hours,miiutes,second]
		$('#phoneLogForm #sec').val(time.pop());
		$('#phoneLogForm #min').val(time.pop());
		$('#phoneLogForm #hour').val(time.pop());
		$('#phoneLogForm #callWidgetName').val(data.widget);
		$('#phoneLogForm #saveActivity').val("true");
		$('#phoneLogForm #logPhone_relatedto_tag').html('<li class="btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ data.contId +'">'+data.contact_name+'</li>');
		$("#phoneLogForm").find("#description").focus();
		agile_type_ahead("call_related_to",  $("#phoneLogForm", '#logCallModal'), contacts_typeahead);
		
		CallLogVariables.callActivitySaved = false;
		CallLogVariables.id = data.contId;
		CallLogVariables.callType = data.callType;
		CallLogVariables.status = data.status;
		CallLogVariables.callWidget = data.widget;
		CallLogVariables.duration = data.duration;
		CallLogVariables.phone = data.number;
		CallLogVariables.url = data.url;
		
	}catch(e){
		$('#logCallModal').modal('hide');
		console.log ("an error has occured");
	}
}/**
 * modals.js script file defines the functionality of click events of some
 * buttons and "show" and "hide" events of person and company modals
 * 
 * @module Contact management
 * @author Rammohan
 */


var forceCompany={}; /* to force company on personModal,
						Should contain - 
							doit - true to force
							name - name of company
							id - id of company
						*/
$(function(){
	   
		/**
		 * "show" event of modal - 
		 * To handle UI before its drawn on screen, even before rolling onto screen.
		 * Clean modal.
		 * If forceCompany - hide company input & show non-cancellable company name tag.
		 * Else - enable things by default
		 */
		$("#personModal").off('show.bs.modal');
		$("#personModal").on('show.bs.modal',function(data)
		{
			if(forceCompany.doit==true)
			{

				var template = Handlebars.compile('<li class="tag"  style="display: inline-block;" data="{{id}}"><a href="#contact/{{id}}" id="contact_company_autofilled">{{name}}</a></li>');

			 	$("#personForm [name='contact_company_id']").html(template({name : forceCompany.name, id : forceCompany.id}));
				$("#personForm #contact_company").hide();
				//Force Company, disable input box so user can't enter a new Company.
				
				forceCompany.doit=false; // prevent forcing company next time
			}
			else
			{
				//default clean model
				$("#personForm [name='contact_company_id']").html('');
				$("#personForm #contact_company").show();
				$("#personForm #contact_company").val('');
				$("#personForm input").val('');
			}	
		});
		
		
		$("#companyModal").on('show.bs.modal', function(data) {
			var target = data.target;
			add_custom_fields_to_form({}, function(data){
				var el = show_custom_fields_helper(data["custom_fields"], ["modal"]);
			//	if(!value["custom_data"])  value["custom_data"] = [];
				
				$("#custom-field-deals", $(target)).html(el);
				// Add placeholder and date picker to date custom fields
				$('.date_input', $(target)).attr("placeholder","Select Date");
		    
				$('.date_input', $(target)).datepicker({
					format: CURRENT_USER_PREFS.dateFormat
				});

				$('.contact_input', $('#companyModal')).each(function(){
					agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), $('#companyModal')), contacts_typeahead, undefined, 'type=PERSON');
				});

				$('.company_input', $('#companyModal')).each(function(){
					agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), $('#companyModal')), contacts_typeahead, undefined, 'type=COMPANY');
				});
				
			}, "COMPANY")
			
			

		});
	
		/**
		 * "Shown" event of person modal 
		 * Activates tags typeahead to tags field, company typeahead too
		 */
		$("#personModal").on('shown.bs.modal', function(data){
			setup_tags_typeahead();

			var stat=$("#personForm #contact_company").css('display');
			if( stat!='none')
			{
				/**
				 * Activate company-typeahead only if required, i.e. there's a Company Input field
				 * Custom function for typeahead results, 
				 * show at contact_company_id, data=id-of-company-contact and data=company-name
				 */
				var fxn_display_company=function(data,item)
				{
					var template = Handlebars.compile('<li class="tag"  style="display: inline-block;" data="{{id}}"><a href="#contact/{{id}}" id="contact_company_autofilled">{{name}}</a></li>');

			 		$("#personForm [name='contact_company_id']").html(template({name : item, id : data}));
					$("#personForm #contact_company").hide();
				}
				agile_type_ahead("contact_company",$('#personForm'), contacts_typeahead,fxn_display_company,'type=COMPANY','<b>No Results</b> <br/> Will add a new one');
			}
		});
		
		/**
		 * Close clicked of company entered, this brings back text input field of company to fill again
		 */
		$('body').on('click', '#personForm [name="contact_company_id"] a.close', function(e){
			$("#personForm #contact_company").show();
		});
	
		/**
		 * Click event of "Save Changes" button in person modal
		 * Saves the contact using the function "serialize_and_save_continue_contact"
		 */
		$('body').on('click', '#person_validate', function(e){
	    	serialize_and_save_continue_contact(e, 'personForm', 'personModal', false, true, this, 'tags_source_person_modal');
	    });
	    
	    /**
		 * Navigates to controller to import contacts from a file
		 */
		$('body').on('click', '#import-link', function(e){
	    	Backbone.history.navigate("import",{trigger: true});	        
	    });
	    
	    /**
		 * Click event of "Save Changes" button in company modal
		 * Saves the contact using the function "serialize_and_save_continue_contact"
		 */
		$('body').on('click', '#company_validate', function(e){
	    	serialize_and_save_continue_contact(e, 'companyForm', 'companyModal', false, false, this);
	    });
	    
	    /**
	     * "Hidden" event of person modal
	     * Hides email alert error and removes validation errors
	     */ 
	    $('#personModal').on('hidden.bs.modal', function () {
	    	
	    	// Hides email error message
	    	$('#personModal').find(".alert").hide();
	    	
	    	// Removes validation error messages
	    	remove_validation_errors('personModal');
	    	$('#personModal input').val('');
	    });
	    
	    /**
	     * "Hidden" event of company modal
	     * Removes validation errors
	     */
	    $('#companyModal').on('hidden.bs.modal', function () {
	    	remove_validation_errors('companyModal');
	    	$('#companyModal input').val('');
	    });

	    //hide modal when click on upgrade
		$('body').on('click', '.hideCurrentModal', function(e){
	    	$(this).closest(".modal").hide();
	    	if($("body").hasClass("modal-open"))
	    		$("body").removeClass("modal-open");
	    });

	    $('#tutorialModal').on("hidden.bs.modal", function(e){
			var parent = $("#tutorialModal iframe").parent();
			var $iframe = parent.html();
			parent.html(" ");
			parent.html($iframe);

		});
});

/**
 * Removes validation messages (error or success) from any modal 
 * based on its id attribute
 * 
 * @method remove_validation_errors
 * @param modalId
 * 			specifies a modal
 */
function remove_validation_errors(modalId){
	$('#' + modalId).find("div.control-group").removeClass("error");
	$('#' + modalId).find("div.control-group").removeClass("success");
	$('#' + modalId).find("span.help-inline").remove();
}
/**
 * note.js script file defines the functionality of saving a note in Note
 * database. If note is related to a contact, which is in contact detail view
 * then the note model is inserted into time-line.
 * 
 * @module Contact management
 * @author Rammohan
 */
 var Agile_Old_Hash;
$(function()
{

	
	$(window).on("hashchange", function(e){
		var oldUrl = e.originalEvent.oldURL;
		if(!oldUrl){
			 return;
		}
		Agile_Old_Hash = oldUrl.split("#")[1];
	});

	$('body').on('click', '.edit-note', function(e)
	{
		e.preventDefault();
		console.log($(this).attr('data'));
		var note = notesView.collection.get($(this).attr('data'));
		console.log(note);

		// Clone modal, so we dont have to create a update modal.
		// we can clone add change ids and use it as different modal

		$('#noteUpdateModal').remove();

		var noteModal = $("#noteModal").clone();

		$("#noteForm > fieldset", noteModal).prepend('<input name="id" type="hidden"/>');
		$("#noteForm > fieldset", noteModal).prepend('<input name="created_time" type="hidden"/>');
		$("#noteForm", noteModal).parent().parent().find(".modal-header > h3").html('<i class="icon-edit"></i>&nbsp;Edit Note');
		$("#noteForm", noteModal).attr('id', "noteUpdateForm");
		noteModal.attr('id', "noteUpdateModal");
		agile_type_ahead("note_related_to", $("#noteUpdateForm", noteModal), contacts_typeahead);
		$("#note_validate", noteModal).attr("id", "note_update");
		deserializeForm(note.toJSON(), $("#noteUpdateForm", noteModal));

		noteModal.modal('show');
		// noteModal.modal('show');
	});

    $('body').on('click', '#note_update', function(e)
	{
		e.preventDefault();

		// Returns, if the save button has disabled attribute
		if ($(this).attr('disabled'))
			return;

		// Disables save button to prevent multiple click event issues
		disable_save_button($(this));//$(this).attr('disabled', 'disabled');

		if (!isValidForm('#noteUpdateForm'))
		{

			// Removes disabled attribute of save button
			enable_save_button($(this));
			return;
		}
		if($("#noteUpdateForm #note_relatedto_tag").children().length==0)
		{
			$("#noteUpdateForm #note_relatedto_error").show().delay(5000).hide(1);
			enable_save_button($(this));
			return;
		}

		// Shows loading symbol until model get saved
		//$('#noteUpdateModal').find('span.save-status').html(getRandomLoadingImg());

		var json = serializeForm("noteUpdateForm");
		
		
/*		if(json.id)
			{
				if(notesView && notesView.collection && notesView.collection.get(json.id))
					{
						notesView.collection.get(json.id).set(json, {silent:true});
					}
			}*/

		saveNote($("#noteUpdateForm"), $("#noteUpdateModal"), this, json);
	});
	/**
	 * Saves note model using "Bcakbone.Model" object, and adds saved data to
	 * time-line if necessary.
	 */
	$('body').on('click', '#note_validate', function(e)
	{
		e.preventDefault();

		// Returns, if the save button has disabled attribute
		if ($(this).attr('disabled'))
			return;
		
		if (!isValidForm('#noteForm'))
		{
			return;
		}
		if($("#noteForm #note_relatedto_tag").children().length==0)
		{
			$("#noteForm #note_relatedto_error").show().delay(5000).hide(1);
			return;
		}
		disable_save_button($(this));
		
		// Shows loading symbol until model get saved
		//$('#noteModal').find('span.save-status').html(getRandomLoadingImg());

		var json = serializeForm("noteForm");

		console.log(json.from_task);
		
		if(json.from_task == "true")
			saveNoteOfTask($("#noteForm"), $("#noteModal"), this, json);
		else		
		    saveNote($("#noteForm"), $("#noteModal"), this, json);
	});

	/**
	 * Shows note modal and activates contacts typeahead to its related to field
	 */
	$('body').on('click', '#show-note', function(e)
	{
		e.preventDefault();
		$("#noteModal").modal('show');

		var el = $("#noteForm");
		agile_type_ahead("note_related_to", el, contacts_typeahead);
	});
	//when click on emailbutton automatically it takes contact details

	

	/**
	 * "Hide" event of note modal to remove contacts appended to related to
	 * field and validation errors
	 */
	$('#noteModal').on('hidden.bs.modal', function()
	{
		// Removes appended contacts from related-to field
		$("#noteForm").find("li").remove();

		// Remove value of input field
		$("#from_task", "#noteForm").val("");
		$("#task_form", "#noteForm").val("");
		
		// Removes validation error messages
		remove_validation_errors('noteModal');
	});

	function saveNote(form, modal, element, note)
	{

		console.log(note);
		var noteModel = new Backbone.Model();
		noteModel.url = 'core/api/notes';
		noteModel.save(note, { success : function(data)
		{

			// Removes disabled attribute of save button
			enable_save_button($(element));//$(element).removeAttr('disabled');

			form.each(function()
			{
				this.reset();
			});

			// Removes loading symbol and hides the modal
			//modal.find('span.save-status img').remove();
			modal.modal('hide');

			var note = data.toJSON();

			console.log(note);
			// Add model to collection. Disabled sort while adding and called
			// sort explicitly, as sort is not working when it is called by add
			// function
			if (notesView && notesView.collection)
			{
			console.log(notesView.collection.toJSON());
				if(notesView.collection.get(note.id))
				{
					notesView.collection.get(note.id).set(new BaseModel(note));
				}
				else
				{
					notesView.collection.add(new BaseModel(note), { sort : false });
					notesView.collection.sort();
				}
			}
			/*
			 * Updates data (saved note) to time-line, when contact detail view
			 * is defined and the note is related to the contact which is in
			 * detail view.
			 */
			if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
			{
				$.each(note.contacts, function(index, contact)
				{
					if (contact.id == App_Contacts.contactDetailView.model.get('id'))
					{

						// Activates "Timeline" tab and its tab content in
						// contact detail view
						// activate_timeline_tab();
						add_entity_to_timeline(data);
						/*
						 * If timeline is not defined yet, initiates with the
						 * data else inserts
						 */
						return false;
					}

				});
			}
		} });
	}
});
/**
 * author:Ramesh
 */
	/**
	 * For showing existing documents and Add new doc option
	 * to attach in send-email form 
	 */
	function sendEmailAttachmentListeners(listener_container_id){
     	
	if(!listener_container_id)
		  listener_container_id = "send-email-listener-container";

	$('#' + listener_container_id).on('click', '.add-attachment-select', function(e){
		e.preventDefault();
		var el = $(this).closest("div");
		$(this).css("display", "none");
		el.find(".attachment-document-select").css("display", "inline");
		var optionsTemplate = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' size='{{size}}' url='{{url}}'>{{name}}</option>";
        fillSelect('attachment-select','core/api/documents', 'documents',  function fillNew()
		{
			el.find("#attachment-select option:first").after("<option value='new'>Upload new doc</option>");

		}, optionsTemplate, false, el); 
	});
	
	/**
	 * For adding existing document to current contact
	 */
	$('#' + listener_container_id).on('click', '.add-attachment-confirm', function(e){
		e.preventDefault();		
		var network_type = $('#attachment-select').find(":selected").attr('network_type');
		var document_size = $('#attachment-select').find(":selected").attr('size');
		if(typeof network_type !=='undefined' && network_type.toUpperCase() === 'GOOGLE')
		{
			$(this).closest("span").find(".attachment-status").html("<span style='color:#df382c;margin-top:10px; display:block'>Can not attach Google Drive doc to email. You can add a link instead in the email.</span>");
			//$(this).css({'border': '1px solid #df382c','outline': 'none'   });				             	            
		}
		else if(document_size >= 5242880){
			$(this).closest("span").find(".attachment-status").html("<span style='color:#df382c;margin-top:10px; display:block'>Document size exceeds the 5MB limit.</span>");
			//$(this).css({'border': '1px solid #df382c','outline': 'none'   });
		}
		else
		{
			$('#attachment-select').closest("span").find('.attachment-status').find("span").fadeOut(0);
			$('#attachment-select').css({"border":"1px solid #bbb"});
		    var document_id = $(this).closest(".attachment-document-select").find("#attachment-select").val();
		    var saveBtn = $(this);
			
	  		// To check whether the document is selected or not
		    if(document_id == "")
		    {
		    	saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>This field is required.</span>");
		    	saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
		    	return;
		    }	    	
		    else if(document_id == "new")
		    {	
		    	e.preventDefault();
				$(this).closest('form').find('#error').html("");
				var form_id = $(this).closest('form').attr("id");
				var id = $(this).find("a").attr("id");
				
				var newwindow = window.open("upload-attachment.jsp?id="+ form_id +"&t=" + CURRENT_USER_PREFS.template +"&d=" + CURRENT_DOMAIN_USER.domain, 'name','height=310,width=500');
				
				if (window.focus)
				{
					newwindow.focus();
				}
		    }
		    else if(document_id != undefined && document_id != null)
		    {
		    	var docName = $( "#attachment-select option:selected").text();
		    	$('#emailForm').find('#eattachment').css('display','block');
		    	$('#emailForm').find('#attachment_id').find("#attachment_fname").html('<a href='+$( "#attachment-select option:selected").attr('url')+'>'+docName+'</a>');
		    	$('#emailForm').find(".attachment-document-select").css('display','none');
		    	$('#emailForm').find('#eattachment_key').attr('name',"document_key");
		    	$('#emailForm').find('#eattachment_key').attr('value',document_id);
		    	$("#emailForm").find("#agile_attachment_name").attr("value", docName);
                $("#emailForm").find("#agile_attachment_url").attr("value", $("#attachment-select option:selected").attr("url"))
		    }
	    }
	});
	
	/**
	 * To cancel the add attachment request in send-email form
	 */
	$('#' + listener_container_id).on('click', '.add-attachment-cancel', function(e){
		e.preventDefault();
		var blobKey = $('#emailForm').find('#attachment_id').attr('name');
		if(typeof blobKey !== typeof undefined)
	    {
			if(blobKey.toLowerCase() === 'blob_key')
			{
				var blobKeyValue = $('#emailForm').find('#eattachment_key').attr("value");
				deleteBlob(blobKeyValue);
			}
	    }
		$('#attachment-select').closest("span").find('.attachment-status').find("span").fadeOut(0);
		$('#attachment-select').css({"border":"1px solid #bbb"});	 
		$('#attachment-select').find('option:first').attr('selected', 'selected');
		var el = $(this).closest("div");
		$('#emailForm').find('.attachment-document-select').css('display','none');
		$('#emailForm').find('#eattachment').css('display','none');
		$('#emailForm').find(".add-attachment-select").css("display", "inline");
		$('#emailForm').find('#eattachment_key').attr("name","name");
    	$('#emailForm').find('#eattachment_key').attr("value","value");
    	$("#emailForm").find("#agile_attachment_name").attr("value", "");
        $("#emailForm").find("#agile_attachment_url").attr("value", "")
        $('#enable_tracking').css("margin-top", "-7px");
	});
	
	}
    
    function deleteBlob(blob_key)
    {
    	$.ajax({url : '/core/api/emails/send-email/delete-blob/'+blob_key,
    		type : 'GET',
    		success : function()
    		{
    		},
    		error : function(response)
    		{
    		} 
    	});
    }

	

function load_timeline_details(el, contactId, callback1, noAnimation)
{
	noAnimationBruteForce = true;
	timeline_entity_loader.init(App_Contacts.contactDetailView.model.toJSON());

}


function add_entity_to_timeline(model)
{
	var list = [];
	list.push(model.toJSON())

	if(!timeline_collection_view)
		return;

	if (!timeline_collection_view.collection.get(model.get('id')))
	{
		timeline_collection_view.addItems(list);
		return;
	}

	update_entity_template(model);

}

function update_entity_template(model)
{
	getTemplate('timeline1', [model.toJSON()], undefined, function(template_ui){
 		if(!template_ui)
    		return;
		$("#" + model.get("id"), $('#timeline', App_Contacts.contactDetailView.el)).html($(template_ui).children()); 
	}, "#" + model.get("id"), $('#timeline', App_Contacts.contactDetailView.el));

}

/**
 * Removes an element from timeline
 * 
 * @param element
 */
function removeItemFromTimeline(element)
{
	try
	{
		$('#timeline').isotope('remove', element, function()
				{
					$("#timeline").isotope('reLayout')
				});
	}
	catch(err)
	{
		
	}
}

function addTagToTimelineDynamically(tag, collection)
{
	if(!timeline_collection_view || !timeline_collection_view.collection)
		return;
	
	$.each(collection, function(index, tagObject){
		if(tagObject.tag == tag)
			{
				timeline_collection_view.collection.add(new BaseModel(tagObject));
			}
	})
	console.log(collection);
	
}

function timline_fetch_data(url, callback)
{
	
}
var timeline_entity_loader = {

	init : function(contact)
	{
		this.active_connections = 0;
		MONTH_YEARS = [];
		var _this = this;
		// Load plugins for timeline
		head.load(FLAT_FULL_PATH + "lib/isotope.pkgd.js", FLAT_FULL_PATH + "lib/jquery.event.resize.js", FLAT_FULL_PATH + "css/misc/agile-timline.css", function()
		{
			// customize_isotope()
			configure_timeline();
			timeline_collection_view = new timeline_view();
			console.log(_this);
			_this.load_other_timline_entities(contact);

			timeline_collection_view.render(true);
			// timeline_collection_view.render();

		});
	},
	load_other_timline_entities : function(contact)
	{
		var contactId = contact['id'];

		this.load_related_entites(contactId);
		this.load_stats(contact);
		this.load_campaign_logs(contactId);
		
		this.get_stats(getPropertyValue(contact.properties, "email"), contact, App_Contacts.contactDetailView.el);
	},
	load_related_entites : function(contactId)
	{
		var entity_types = [
				"deals", "notes", "cases", "tasks","calls","events", "tickets"
		];

		var url = 'core/api/contacts/related-entities/' + contactId;
		this.timline_fetch_data(url, function(data)
		{
			var entities = [];

			for ( var index in entity_types)
			{
				if (data[entity_types[index]].length == 0)
					continue;

				entities = entities.concat(data[entity_types[index]]);

			}
			
			if(App_Contacts.contactDetailView.model.get('id') == contactId)
			timeline_collection_view.addItems(entities);
		});
	},
	load_stats : function(contact)
	{
		/*
		 * Stores all urls (notes, deals and tasks) in an array to fetch data
		 * using same collection by changing its url.
		 */

		var email = getAllPropertyValuesByName(contact.properties, "email", ",");

		// Go for mails when only the contact has an email
		if (email)
		{
			this.timline_fetch_data('core/api/emails/imap-email?e=' + encodeURIComponent(email) + '&c=10&o=0', function(stats)
			{
				console.log(stats);
				
				if(stats && stats["emails"])
				{
					var array = [];
					$.each(stats["emails"], function(index,data){
						// if error occurs in imap (model is obtained with the
						// error msg along with contact-email models),
						// ignore that model
						if(('errormssg' in data) || data.status === "error")
						return;
						
						array.push(data);
						
						});

					if(App_Contacts.contactDetailView.model.get('id') !== contact.id)
						return;

					var contact_emails = [];

					// Add open tracking
					var emails_opened = timeline_entity_loader.getOpenedEmailsFromEmails(stats["emails"]);

					if(emails_opened)
						contact_emails = emails_opened.concat(array);

					if(contact_emails)
						timeline_collection_view.addItems(contact_emails);
				}
				if(stats && stats["emailPrefs"]){
					killAllPreviousRequests();
					var fetch_urls = stats["emailPrefs"];
					var contact_social_emails = [];
					
					for(var i=0;i<fetch_urls.length;i++)
					{
						var xhr = $.ajax({ url : fetch_urls[i]+'&search_email='+encodeURIComponent(email),
							success : function(emails)
							{	
								if(emails)
								{	
									var mail_array = [];
									$.each(emails, function(index,data){
										// if error occurs in imap (model is obtained with the
										// error msg along with contact-email models),
										// ignore that model
										if(('errormssg' in data) || data.status === "error")
										return;
										mail_array.push(data);
										});
									
									if(mail_array.length > 0){
										timeline_collection_view.addItems(mail_array);
									}
							    }
							},
						    error : function(response)
						    {
						    }
						});
						email_requests.push(xhr);
					}
				}
				
				
			})
		}
	},
	load_campaign_logs : function(contactId)
	{
		var url = '/core/api/campaigns/logs/contact/' + contactId + '?cursor=0&page_size=100';
		this
				.timline_fetch_data(
						url,
						function(data)
						{
							if (!data || data.length == 0)
								return;
							var log_models = [];

							$
									.each(
											data,
											function(index, model)
											{

												// Add these log-types in
												// timeline
												if (model.log_type == 'EMAIL_SENT' || model.log_type == 'EMAIL_OPENED' || model.log_type == 'EMAIL_CLICKED' || model.log_type == 'SET_OWNER' || model.log_type == 'SCORE' || model.log_type == 'ADD_DEAL' || model.log_type == 'TWEET' 
													|| model.log_type == 'SMS_SENT' || model.log_type == 'SMS_FAILED' 
													|| model.log_type == 'SMS_LINK_CLICKED' || model.log_type == 'EMAIL_REPLIED')
												{
													log_models.push(model);
												}

											});
							if(App_Contacts.contactDetailView.model.get('id') == contactId)
							timeline_collection_view.addItems(log_models);
						})
	}, timline_fetch_data : function(url, callback)
	{
		//$("#timeline-loading-img", App_Contacts.contactDetailView.el).show();
		showTransitionBar();

		console.log(this.active_connections);
		// this.active_connections = true;
		++this.active_connections;
		var _this = this;
		$.getJSON(url, function(data)
		{
			
			console.log("success : " + _this.active_connections);
			--_this.active_connections;
			console.log("success : " + _this.active_connections)
			if (callback && typeof callback === "function")
				callback(data);
			
			if(!_this.active_connections)
				//$(".timeline-loading-img", App_Contacts.contactDetailView.el).hide();
				hideTransitionBar();
		}).error(function()
		{
			-- _this.active_connections;
			
			if(!_this.active_connections)
				//$(".timeline-loading-img", App_Contacts.contactDetailView.el).hide();
				hideTransitionBar();
		});
	}, getOpenedEmailsFromEmails : function(emails)
	{
		var opened_emails = [];
		$.each(emails, function(index, model)
		{
			if (model.email_opened_at && model.email_opened_at !== 0)
			{
				var json = {};

				// Need createdTime key to sort in timeline.
				json.createdTime = (model.email_opened_at) * 1000;

				// Temporary entity to identify timeline template
				json.agile_email = "agile_email";

				json.subject = model.subject;
				json.email_link_clicked_at = (model.email_link_clicked_at) * 1000;
				json.trackerId = model.trackerId;

				// // To avoid merging with emails template having date entity
				// json.date = undefined;

				opened_emails.push(json);
			}

		});

		return opened_emails;
	},

	get_stats : function(email, contact, el)
	{
		var that = this;
		get_web_stats_count_for_domain(function(count){

			// If there are no web-stats - return
			if (!(_agile_get_prefs('_agile_jsapi') != null && _agile_get_prefs('_agile_jsapi') == "true") && (NO_WEB_STATS_SETUP && count == '0'))
			{
				// Remove loading image of mails
				$('#time-line', el).find('.loading-img-stats').remove();

				return;
			}

			// Made global variable false and set cookie
			NO_WEB_STATS_SETUP = false;
			_agile_set_prefs('_agile_jsapi', true, 500);

			var StatsCollection = Backbone.Collection.extend({});

			that.timline_fetch_data('core/api/web-stats?e=' + encodeURIComponent(email), function(data)
			{

				that.statsCollection = new StatsCollection(data);
				data = that.statsCollection;

				is_mails_fetched = true;
				is_logs_fetched = false;
				is_array_urls_fetched = false;

				// show_timeline_padcontent(is_logs_fetched, is_mails_fetched,
				// is_array_urls_fetched);

				$('#time-line', el).find('.loading-img-stats').remove();

				// Checks whether data is empty or not.
				if (data.toJSON() && data.toJSON().length > 0)
				{

					// Gets address of the contact from its browsing history
					var address = getPropertyValue(contact.properties, "address");

					if (!address)
					{
						var addressJSON = {};

						if (data.toJSON()[0].city != "")
						{
							addressJSON.city = ucfirst(data.toJSON()[0].city);
							addressJSON.state = ucfirst(data.toJSON()[0].region);
							addressJSON.country = getCode(data.toJSON()[0].country);

							// If contact has no address property push the new one
							contact.properties.push({ "name" : "address", "value" : JSON.stringify(addressJSON) });

							// Update contact with the browsing address
							var contactModel = new Backbone.Model();
							contactModel.url = 'core/api/contacts';
							contactModel.save(contact, { success : function(obj)
							{
							} });
						}
					}
					if(App_Contacts.contactDetailView.model.get('id') == contact.id)
					timeline_collection_view.addItems(data.toJSON());

					addTagAgile(CODE_SETUP_TAG);
				}
			});

		});
	}

}
// Stores month names with their maximum days to get time stamp (milliseconds)
var monthArray = [
		'January 31', 'February 28', 'March 31', 'April 30', 'May 31', 'June 30', 'July 31', 'August 31', 'September 30', 'October 31', 'November 30',
		'December 31'
];

// Stores "monthIndex-year" of timeline initiating entities
var MONTH_YEARS;

/**
 * Removes loading image from timeline view
 * 
 * @param el
 *            html object of contact detail view
 */
function remove_loading_img(el)
{
	$('#time-line', el).find('.loading-img').remove();
}

/**
 * Returns month index and full year of the given entity as "-" separated.
 * 
 * @param model
 * @returns {String}
 */
function entity_created_month_year(model)
{
	if (model.entity_type == "event" && model.start)
		return month_year = new Date(model.start * 1000).getMonth() + '-' + new Date(model.start * 1000).getFullYear();
	if (model.created_time)
		return month_year = new Date(model.created_time * 1000).getMonth() + '-' + new Date(model.created_time * 1000).getFullYear();
	if (model.createdTime)
		return month_year = new Date(model.createdTime).getMonth() + '-' + new Date(model.createdTime).getFullYear();
	else if (model.time)
		return month_year = new Date(model.time * 1000).getMonth() + '-' + new Date(model.time * 1000).getFullYear();
	else if (model.date_secs)
		return month_year = new Date(model.date_secs*1).getMonth() + '-' + new Date(model.date_secs*1).getFullYear();
}

/**
 * Get the timestamp (milliseconds) given month of the year.
 */
function getTimestamp(month_index, year)
{
	if ((year % 4) == 0)
		monthArray[1] = 'February 29';
	return Date.parse(monthArray[month_index] + ', ' + year) + 86400000 - 1;
}
/**
 * Defines the layout and its dimensions, container size and
 * arrangement of data position added to timeline etc..
 * 
 * @method customize_isotope
 */

function customize_isotope()
{
	// Resets the layout based on items 
	$.Isotope.prototype._spineAlignReset = function() {
		this.spineAlign = {
			colA: 0,
			colB: 0,
			lastY: -60
		};
	};

	/*
	 * Defines the dimentions of layout, and alters the position of data.
	 * It executes every tiem, when a modal is added or deleted from timeline.
	 */ 
	$.Isotope.prototype._spineAlignLayout = function( $elems ) {
		var	instance = this,
			props = this.spineAlign,
			gutterWidth = Math.round( this.options.spineAlign && this.options.spineAlign.gutterWidth ) || 0,
			centerX = Math.round(this.element.width() / 2);
		
		Date.prototype.monthNames = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];

		Date.prototype.getMonthName = function() {
            return this.monthNames[this.getMonth()];
        };
        var currentDate = new Date();
        
		$elems.each(function(i, val){
			var $this = $(this);
			$this.removeClass('last').removeClass('top');
			if (i == $elems.length - 1)
				$this.addClass('last');
			var x, y;
			if ($this.hasClass('year-marker')){
				var width = $this.width();
				x = centerX - (width / 2);
				if (props.colA >= props.colB){
					y = props.colA;
					if (y == 0){
						$this.addClass('top');
						if($this.find('.year').text()==currentDate.getMonthName()){
							$this.find('.inner2').addClass('inner2-top');
							$this.find('.inner2').removeClass('inner2');
							$this.find('.year').text('Now'); 
						}
					}
					props.colA += $this.outerHeight(true);
					props.colB = props.colA;
				}
				else{
					y = props.colB;
					if (y == 0){
						$this.addClass('top');
						if($this.find('.year').text()==currentDate.getMonthName()){
							$this.find('.inner2').addClass('inner2-top');
							$this.find('.inner2').removeClass('inner2');
							$this.find('.year').text('Now');
						}
					}
					props.colB += $this.outerHeight(true);
					props.colA = props.colB;
				}
			}
			else{
				var colorNumber = ((i+1)%4) + 1;
				$this.removeClass('color1').removeClass('color2').removeClass('color3').removeClass('color4');
				$this.addClass('color'+colorNumber);
					
				$this.removeClass('left').removeClass('right');
				var isColA = props.colB >= props.colB;
				if (isColA)
					$this.addClass('right');
				else
					$this.addClass('right');
				x = isColA ?
						centerX + (gutterWidth / 2): // right side
						centerX + (gutterWidth / 2); // right side
				y = isColA ? props.colB : props.colB;
				if (y - props.lastY <= 60){
					var extraSpacing = 60 - Math.abs(y - props.lastY);
					$this.find('.inner').css('marginTop', 0);
					props.lastY = y + extraSpacing;
				}
				else{
					$this.find('.inner').css('marginTop', 0);
					props.lastY = y;
				}
				props[( isColA ? 'colB' : 'colB' )] += $this.outerHeight(true);
				/*alert("$this.attr('id')---"+$this.attr('id'));
				alert("$this.height()---"+$this.height());*/
				/*if($this.attr('id')!=""){
					$("<style type='text/css' id='"+$this.attr('id')+"' />").appendTo("head");
					$("#"+$this.attr('id')).text(".post.right.color"+colorNumber+":before{padding-bottom: "+($this.height())+"px;}");
				}else{
					$this.attr('id','color'+i);
					$("<style type='text/css' id='"+$this.attr('id')+"' />").appendTo("head");
					$("#"+$this.attr('id')).text(".post.right.color"+colorNumber+":before{padding-bottom: "+($this.height())+"px;}");
					$this.attr('id','');
					alert("$this.height()-----"+$this.height());
				}*/
			}
			instance._pushPosition( $this, x, y );
		});
	};
	
	// Sets the container size based on spinAlignLayout function resulrs
	$.Isotope.prototype._spineAlignGetContainerSize = function() {
		var size = {};
		size.height = this.spineAlign[( this.spineAlign.colB > this.spineAlign.colA ? 'colB' : 'colB' )];
		return size;
	};
	$.Isotope.prototype._spineAlignResizeChanged = function() {
		return true;
	};
}	

function configure_timeline(el)
{
	var cnt = 0;
	customize_isotope();

	var $container = $("#timeline", (el ? el : App_Contacts.contactDetailView.el));
	var elemen="";

	// Initializes isotope with options (sorts the data based on created time)
	$container.isotope({ itemSelector : ".item", transformsEnabled : true, layoutMode : 'spineAlign', spineAlign : { gutterWidth : 56 },
		getSortData : { timestamp : function($elem)
		{
			elemen = parseFloat($elem.find('.timestamp').text());
			var time = parseFloat($elem.find('.timestamp').text());

			if (!time)
				return 0;
			// If time is in milliseconds then return time in seconds
			if ((time / 100000000000) > 1)
				return time / 1000;

			return time
		} }, sortBy : 'timestamp', sortAscending : false, itemPositionDataEnabled : true, onLayout: function($elem){
			$elem.removeClass('special');
			setTimeout(function(){
				$elem.addClass('special');
				$elem.addClass($elem.attr('id')+'');
				if($elem.attr('id')!=undefined){
					$elem.addClass('special');
					$elem.addClass($elem.attr('id')+'');
					var eleHeight = parseInt($elem.height())+10;
					if($elem.hasClass('color1'))
						$('head').append('<style>.post.right.color1.special:before{padding-bottom:'+eleHeight+'px;}</style>');
					if($elem.hasClass('color2'))
						$('head').append('<style>.post.right.color2.special:before{padding-bottom:'+eleHeight+'px;}</style>');
					if($elem.hasClass('color3'))
						$('head').append('<style>.post.right.color3.special:before{padding-bottom:'+eleHeight+'px;}</style>');
					if($elem.hasClass('color4'))
						$('head').append('<style>.post.right.color4.special:before{padding-bottom:'+eleHeight+'px;}</style>');
				}
			},1000);
		} });
}
/**
 * Handles the events (click and mouseenter) of mail and log entities of 
 * tiemline 
 */
$(function () {
	/*
	 * Shows the mail details in detail on a popup modal, when '+'
	 * symbol is clicked 
	 */ 
	$('body').on('click', '#tl-mail-popover', function(e){
		e.preventDefault();
		
		var htmlstring = $(this).closest('div').attr("data");
		// var htmlstring = $(this).closest('div.text').html();
		// htmlstring = htmlstring.replace("icon-plus", "");

		$("#mail-in-detail").html("<div style='background:none;border:none;'>" + htmlstring + "</div>");
		
		$("#timelineMailModal").modal("show");
        
    });
	
	/*
	 * Shows the campaign log details on a popup modal
	 */
	$('body').on('click', '#tl-log-popover', function(e){
		e.preventDefault();
		
		var string = $(this).closest('div').attr("data");

		// Add div tag to the string to consider white spaces
		$("#log-in-detail").html("<div style='background:none;border:none;'>" + string + "</div>");
		
		$("#timelineLogModal").modal("show");
    });
	
	/**
	 * Shows analytics popup modal with full details.
	 **/
	$('body').on('click', '#tl-analytics-popover', function(e){
		e.preventDefault();
		
		var string = $(this).closest('div.body').html();
		var pageViews = $(string).find('div.ellipsis-multi-line');

		$("#analytics-in-detail").html("<div'>" + $(pageViews).html() + "</div>");
		
		$("#timelineAnalyticsModal").modal("show");
	});
	
	/*
	 * Shows the list of mails(mail sent to) as popover, when mouse is entered on
	 * to address of the email
	 */ 
	$('body').on('mouseenter', '#tl-mail-to-popover', function(e){
		
		$(this).popover({
        	template:'<div class="popover"><div class="arrow"></div><div class="popover-inner" style="padding:1px;width:340px;border-radius:2px"><div class="popover-content"><p></p></div></div></div>'
        });
		
		var string = $(this).text();
		//var html = new Handlebars.SafeString(string.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/,/g, ",</br>").replace("To:","To:</br>").replace("read more", ""));
		$(this).attr("data-content", string);
        $(this).popover('show');
    });
	
	// Resizes the item height and open close effect for timeline elements
	$('body').on('click', '#timeline .item a.open-close', function(e){
		$(this).siblings('.body').slideToggle(function(){
			$('#timeline').isotope('reLayout');
		});
		$(this).parents('.post').toggleClass('closed');
		$('#expand-collapse-buttons a').removeClass('active');
		e.preventDefault();
	});
	
});
var noAnimationBruteForce = true;
var timeline_collection_view;
var MONTH_YEARS;
var month_years = [];

var timeline_view = Backbone.View.extend({ initialize : function()
{
	// Binds functions to view
	_.bindAll(this, 'render', 'appendItem', 'addItems');

	this.options.data = [];
	// this.options.data.concat();
	this.options.data.push(App_Contacts.contactDetailView.model.toJSON());

	console.log(App_Contacts.contactDetailView.model.toJSON().tagsWithTime);
	console.log(this.options.data);
	// this.options.data.push(App_Contacts.contactDetailView.model.toJSON().tagsWithTime);

	this.collection = new BaseCollection([], {});
	this.month_year_marker = [];
	this.month_year_marker_objects = [];
	configure_timeline_comparator(this.collection);

	this.collection.add(App_Contacts.contactDetailView.model.toJSON().tagsWithTime, { silent : true });
	this.collection.add(this.options.data, { silent : true });

	// load_other_timline_entities();
	this.queue = new Queue;
	// this.render();
	this.collection.bind('add', this.appendItem);

}, appendItem : function(model)
{
	if (model.get("entity_type"))
		if (model.get("entity_type") == "year-marker")
		{
			getTemplate("year-marker", model.toJSON(), "yes", function(template)
			{
				$('#timeline', App_Contacts.contactDetailView.el).isotope('insert', $(template));
			});
			return;
		}

	this.collection.add(model, { silent : true });
	var temp = [];
	temp.push(model.toJSON());
	var elements = getTemplate("timeline1", temp, undefined, function(result)
	{
		$('#timeline', App_Contacts.contactDetailView.el).isotope("insert", $(result));
	});

}, addItems : function(models)
{
	this.collection.add(models, { silent : true });
	this.buildTimlinePosts(models);

}, render : function()
{
	this.buildTimlinePosts(this.collection.toJSON());

}, buildTimlinePosts : function(models)
{
	var length = models.length;
	if (!length)
		return;

	this.addToQueue(models)
	return;

	var i = 0;
	while (i < length)
	{
		var end = i + 50;

		end = end > length ? length : end;
		if (end == i)
			break;
		this.addToQueue(models.slice(i, end));
		i += 50;
	}
}, addToQueue : function(models)
{
	this.queue.add_function(quedfunction, models);
}

});

function quedfunction(models)
{
	var is_empty_queue;
	// timeline_collection_view.queue.running = true;
	getTemplate("timeline1", models, undefined, function(result)
	{
		$("#timeline", $(App_Contacts.contactDetailView.el)).isotope('insert', $(result), function(ele)
		{
			timeline_collection_view.queue.running = false;
			timeline_collection_view.queue.next();
		});
	});
}

function configure_timeline_comparator(collection)
{

	// Override comparator to sort models on time base
	collection.comparator = function(item)
	{
		var month_year = entity_created_month_year(item.toJSON());

		if (month_year)
			if (timeline_collection_view && timeline_collection_view.month_year_marker.indexOf(month_year) == -1)
			{

				timeline_collection_view.month_year_marker.push(month_year);

				var monthYear = month_year.split('-');
				var timestamp = getTimestamp(monthYear[0], monthYear[1]) / 1000;
				var context = { year : monthArray[monthYear[0]].split(' ')[0], timestamp : timestamp, "entity_type" : "year-marker" };
				if (!collection.where({ "year" : monthArray[monthYear[0]].split(' ')[0] })[0])
					;
				collection.add(context);

				console.log(context);
				timeline_collection_view.month_year_marker_objects.push(context);
			}

		if (item.get('created_time') && item.get('entity_type') != "event")
		{
			return item.get('created_time');
		}
		if (item.get('entity_type') == "event")
		{
			return item.get('start');
		}
		else if (item.get('createdTime'))
		{
			return item.get('createdTime') / 1000;
		}
		else if (item.get('time'))
		{
			return item.get('time') / 1000;
		}
		else if (item.get('date_secs'))
		{
			return item.get('date_secs') / 1000;
		}
		else if (item.get('timestamp'))
		{
			return timestamp;
		}

		return item.get('id');
	}
}
var Queue = (function(){

    function Queue() {};

    Queue.prototype.running = false;

    Queue.prototype.queue = [];
    Queue.prototype.running = false;

    Queue.prototype.add_function = function(callback, models) { 
        var _this = this;
        
        //add callback to the queue
        this.queue.push(function(){
            callback(models);
        });
        
        
        if(!this.running)
        {
        	this.next();
        }

        return this; // for chaining fun!
    }
    

    Queue.prototype.next = function() {
       // this.running = false;
        //get the first element off the queue
        var shift = this.queue.shift();
        
        if(shift) {
           this.running = true;
            shift(); 
        }
    }

    Queue.prototype.pop = function() {

       this.queue.pop();
    }

    return Queue;

})();var timer = undefined;

  	$(function(){
  	

		$('body').on('click','.contactcoloumn',function(e){
			var json = serializeForm("contact-static-fields");
			console.log(json)
			$.ajax({
					url : 'core/api/contact-view-prefs',
					type : 'PUT',
					contentType : 'application/json',
					dataType : 'json',
					data :JSON.stringify(json),
					success : function(data)
						{
							
							location.reload()
						} 
					});

					
			
		});

		$("body").on('click','#contactTabelView',function(el){
			
			if(_agile_get_prefs("contactTabelView"))
				_agile_delete_prefs("contactTabelView");
			else
				_agile_set_prefs("contactTabelView","true");
			CONTACTS_HARD_RELOAD = true;
			App_Contacts.contacts();
	});
		$("body").on('click','#companiesTabelView',function(el){

		if(_agile_get_prefs("companyTabelView"))
			_agile_delete_prefs("companyTabelView");
		else
			_agile_set_prefs("companyTabelView","true");

		COMPANIES_HARD_RELOAD = true;
		App_Companies.companies();

		});

 		$("body").on("click", ".toggle-contact-filters", function(b) {
            if (_agile_get_prefs("hide_contacts_lhs_filter")) {
                _agile_delete_prefs("hide_contacts_lhs_filter");
                $(this).attr("data-original-title", "Hide Filters").tooltip("hide");
            } else {
                _agile_set_prefs("hide_contacts_lhs_filter", true);
                $(this).attr("data-original-title", "Show Filters").tooltip("hide");
            }
            
        });

		 $("body").on("click", ".toggle-company-filters", function(b) {
            if (_agile_get_prefs("companiesFilterStatus") == "display:none") 
            {
                _agile_delete_prefs("companiesFilterStatus");
                $(this).attr("data-original-title", "Hide Filters").tooltip("hide");
            } else {
                _agile_set_prefs("companiesFilterStatus", "display:none");
                $(this).attr("data-original-title", "Show Filters").tooltip("hide");
            }
            
        });


			$('body').on('click','.companycoloumn',function(e){
				var array = serializeForm('companies-static-fields');
				
				$.ajax({
					url : 'core/api/contact-view-prefs/company',
					type : 'PUT',
					contentType : 'application/json',
					dataType : 'json',
					data :JSON.stringify(array),
					success : function(data)
						{
							location.reload()
							
						} 
					});
			});

	$('body').off('mouseover','.popover_contact');
		$('body').on('mouseover','.popover_contact',function(e){
			//e.stopPropagation();
			var left=e.pageX;
            var that=$(this);

			timer=setTimeout(function() {

			if (!insidePopover)	{
		
					 $('.popover').remove();				 		
		
					var contact_id=$(that).attr('data')
		 //App_Contacts.contact_popover=$(that).attr('data');
		  $.ajax({
				type : 'GET',
				url :  '/core/api/contacts/' + contact_id,
				dataType : 'json',
				success : function(data) {
					if(data!=undefined){
					App_Contacts.contact_popover=new Backbone.Model(data);
		 		getTemplate("contacts-custom-view-popover", data, undefined, function(template_ui){
						if(!template_ui)
							  return;
								$(that).popover(
        {
            "rel": "popover",
            "trigger": "manual",
            "placement": "auto right",
            "html": "true",
            "content": template_ui,
            "container" : 'body'
            });
								$(that).popover('show');
						 $('.popover-content').html(template_ui);		
						
						$('.popover').addClass("contact_popover fadeInLeft  animated");
						addTagsTypeaheadLhs($('#addTagsForm-popover').find('#addTagsOnPopover'));
						attachEvents(that,App_Contacts.contact_popover);
						contact_list_starify('.popover',undefined);
						
					});
		 	}
		 		//that.find('.data').attr('data');
		 	}
		 	});
		}
		 	
		 }, 1000);
});



	$('body').off('mouseout','.popover_contact');
		$('body').on('mouseout','.popover_contact',function(e){
			var that=$(this).parent();
				setTimeout(function() {
		if (!insidePopover){
			if($('.popover').length!=0)
			{
			$(that).popover('hide');
			$('.popover').remove();
			}
		}
					
	}, 200);
	 clearTimeout(timer);
			});
	});
function contactListener(el)
{
	$('#contacts-custom-view-model-list , #contacts-custom-view-table-model-list,#companies-custom-view-model-list , #companies-custom-view-table-model-list').off('mouseenter','tr > td:not(":first-child")');
		$('#contacts-custom-view-model-list , #contacts-custom-view-table-model-list,#companies-custom-view-model-list , #companies-custom-view-table-model-list').on('mouseenter','tr > td:not(":first-child")',function(e){
			//e.stopPropagation();
				var left=e.pageX;
				left=left-100;
				var top=0;
            var that=$(this).parent();
            if($(this).hasClass("contact-type-custom-field-td") || $(this).hasClass("company-type-custom-field-td") || $(this).hasClass("contact-type-image") || $(this).hasClass("company-type-image"))
            {
            	return;
            }
             popoverEnter(that,left,top,true);

		
});
		$('#contacts-custom-view-model-list , #contacts-custom-view-table-model-list,#companies-custom-view-model-list , #companies-custom-view-table-model-list').off('mouseleave','tr > td:not(":first-child")');
	$('#contacts-custom-view-model-list , #contacts-custom-view-table-model-list,#companies-custom-view-model-list , #companies-custom-view-table-model-list').on('mouseleave','tr > td:not(":first-child")',function(){
		var that=$(this).parent();
		popout(that);
		
	});


	$(el).off('mouseenter','tr');
		$(el).on('mouseenter','tr',function(e){
			//e.stopPropagation();
			//var left=e.pageX;
            var that=$(this);
             popoverEnter(that,undefined,0,undefined);
});


		$(el).off('mouseleave','tr');
	$(el).on('mouseleave','tr',function(){
		var that=$(this);
		popout(that);
		
	});
	

	$('#company-contacts-model-list').off('mouseenter','tr > td');
		$('#company-contacts-model-list').on('mouseenter','tr > td',function(e){
			var left=e.pageX;
			left=left-100;
            var that=$(this).parent();
             popoverEnter(that,left,0,undefined);
});
		$('#company-contacts-model-list').off('mouseleave','tr > td');
	$('#company-contacts-model-list').on('mouseleave','tr > td',function(){
	var that=$(this).parent();
		popout(that);
		
	});
	
	$('#task-related-model-list').off('mouseenter','tr > td');
		$('#task-related-model-list').on('mouseenter','tr > td',function(e){
			var left=e.pageX;
			left=left-100;
            var that=$(this).parent();
             popoverEnter(that,left,0,undefined);
			
});
		$('#task-related-model-list').off('mouseleave','tr > td');
	$('#task-related-model-list').on('mouseleave','tr > td',function(){
		var that=$(this).parent();
		popout(that);
		
	});
	
	$('#deal-related-model-list').off('mouseenter','tr > td');
		$('#deal-related-model-list').on('mouseenter','tr > td',function(e){
			var left=e.pageX;
			left=left-100;
            var that=$(this).parent();
             popoverEnter(that,left,0,undefined);
});
		$('#deal-related-model-list').off('mouseleave','tr > td');
	$('#deal-related-model-list').on('mouseleave','tr > td',function(){
	var that=$(this).parent();
		popout(that);
		
	});

	
	$('#workflow-other-subscribers-model-list').off('mouseenter','td.data .table-resp');
		$('#workflow-other-subscribers-model-list').on('mouseenter','td.data .table-resp',function(e){
			var left=e.pageX;
            var that=$(this).parents('tr');
            left=left-100;
            if(insidePopover==true){
 			insidePopover=false;
 			$("time.campaign-started-time").timeago();
				$("time.campaign-completed-time").timeago();

 		}
             popoverEnter(that,left,0,undefined,true);
		
			});
		$('#workflow-other-subscribers-model-list').off('mouseleave','td.data .table-resp');
	$('#workflow-other-subscribers-model-list').on('mouseleave','td.data .table-resp',function(){
		var that=$(this).parents('tr');
		popout(that);
		
	});

	$('#')

	
}

var insidePopover=false;

function attachEvents(tr,Contact_collection,listView,campaigns_view) {
	$('.popover').off('mouseenter','.popover-content');
	$('.popover').on('mouseenter', '.popover-content',function() {
		
		insidePopover=true;
	
	});
	$('.popover').off('mouseleave','.popover-content');
	$('.popover').on('mouseleave','.popover-content', function() {
		insidePopover=false;
		$(tr).popover('hide');
		$('.popover').remove();
	});
	
$('.popover').off('click', '#add-score')
$('.popover').on('click', '#add-score', function(e){
	    e.preventDefault();
	    var that=$(this);
	    // Convert string type to int
	    var add_score = parseInt($('#lead-score',$(this).parents('#score')).text());
	    var temp_model;
	    add_score = add_score + 1;
	    
	    // Changes score in UI
	    $('#lead-score',$(this).parents('#score')).text(add_score);
	    $('#lead-score',$(this).parents('#score')).attr('title',add_score);
     if(listView!=undefined) 
     	temp_model= Contact_collection.set('lead_score', add_score);
   else {
   	temp_model= Contact_collection.set('lead_score', add_score,{silent: true});
   temp_model.trigger('popoverChange');
		}
		var contact_model =  temp_model.toJSON();

	    
	  /* // Refreshing the view ({silent: true} not working)
	    contact_model.url = 'core/api/contacts';
	    contact_model.set('lead_score', add_score, {silent: true});
	
	    */// Save model
	   //contact_model.save();
	    
		var new_model = new Backbone.Model();
		new_model.url = 'core/api/contacts';
		new_model.save(contact_model,{
			success: function(model){
			}
		});
		          
	});

$('.popover').off('click', '#minus-score')
$('.popover').on('click', '#minus-score', function(e){
	    e.preventDefault();
	    var that=$(this);
	     var temp_model;
	    // Convert string type to int
	    var sub_score = parseInt($('#lead-score',$(this).parents('#score')).text());
		
		//if(sub_score <= 0)
		//	return;
		
		sub_score = sub_score - 1;
		
		// Changes score in UI
		$('#lead-score',$(this).parents('#score')).text(sub_score);
		 $('#lead-score',$(this).parents('#score')).attr('title',sub_score);
		
       if(listView!=undefined) 
       	temp_model=Contact_collection.set('lead_score', sub_score);
       else{
       temp_model= Contact_collection.set('lead_score', sub_score,{silent:true});
       temp_model.trigger('popoverChange');
   }
		var contact_model =  temp_model.toJSON();

	    
	  /* // Refreshing the view ({silent: true} not working)
	    contact_model.url = 'core/api/contacts';
	    contact_model.set('lead_score', add_score, {silent: true});
	
	    */// Save model
	   //contact_model.save();
	    
		var new_model = new Backbone.Model();
		new_model.url = 'core/api/contacts';
		new_model.save(contact_model,{
			success: function(model){
			}
		});
		          
	});


 $('.popover').off('click', '#lead-score')
$('.popover').on('click', '#lead-score', function(e){
       e.preventDefault();
	   //$('[data-toggle="tooltip"]').tooltip();
	   $("#contactscorebox").removeClass("hide");
	   $("#lead-score").addClass("hide");
	   $("#contactscorebox").val($("#lead-score").text());
	   $("#contactscorebox").focus();

});

$('.popover').off('focusout', '#contactscorebox')
$('.popover').on('focusout', '#contactscorebox', function(e){
      e.preventDefault();
		contactPopupScoreValue();

});

$('.popover').off('keyup', '#contactscorebox')
$('.popover').on('keyup', '#contactscorebox', function(e){
      e.preventDefault();
		if(e.keyCode == 13){
	   		contactPopupScoreValue();
	   }	

});

$('.popover').off('click', '#company-minus-score')
$('.popover').on('click', '#company-minus-score', function(e){
	    e.preventDefault();
	    var that=$(this);
	     var temp_model;
	    // Convert string type to int
	    var sub_score = parseInt($('#lead-score',$(this).parents('#score')).text());

	    if (sub_score <= 0) {
            return
        }

		
		//if(sub_score <= 0)
		//	return;
		
		sub_score = sub_score - 1;
		
		// Changes score in UI
		$('#lead-score',$(this).parents('#score')).text(sub_score);
		 $('#lead-score',$(this).parents('#score')).attr('title',sub_score);
		
       if(listView!=undefined) 
       	temp_model=Contact_collection.set('lead_score', sub_score);
       else{
       temp_model= Contact_collection.set('lead_score', sub_score,{silent:true});
       temp_model.trigger('popoverChange');
   }
		var contact_model =  temp_model.toJSON();

	    
	  /* // Refreshing the view ({silent: true} not working)
	    contact_model.url = 'core/api/contacts';
	    contact_model.set('lead_score', add_score, {silent: true});
	
	    */// Save model
	   //contact_model.save();
	    
		var new_model = new Backbone.Model();
		new_model.url = 'core/api/contacts';
		new_model.save(contact_model,{
			success: function(model){
			}
		});
		          
	});

$('.popover').off('click', '#add-tags-popover')
$('.popover').on('click', '#add-tags-popover', function(e){
	e.preventDefault();
		  var that=$(this);
		$(e.currentTarget).css("display", "none");
		$("#addTagsForm-popover").css("display", "table");
		$("#addTags-popover").focus();

			setup_tags_typeahead(function(e){
    				json = Contact_collection.toJSON();
    			
    			// Checks if tag already exists in contact
    			if($.inArray(e, json.tags) >= 0)
    				return;

    			json.tagsWithTime.push({"tag" : e});
    			
    			
    			saveEntity(json, 'core/api/contacts', function(data){
    				$("#addTagsForm-popover").css("display", "none");
        		    $("#add-tags-popover").css("display", "block");
        		   
        		    if(listView!=undefined) 
        		    	Contact_collection.set(data.toJSON());
        		    else 
        		    { Contact_collection.set(data.toJSON(),{silent:true});
      				 Contact_collection.trigger('popoverChange'); }
        		    	    var old_tags = [];
	       			$.each($('#added-tags-popover').children(), function(index, element){
       					
	       				old_tags.push($(element).html());
       				});
       				if ($.inArray(e, old_tags) == -1) 
		       				$('#added-tags-popover').append('<span class="label bg-light dk text-tiny">'+e+'</span>');
	    			
    	     		
	       			
    			});
    	        return;
		});
	});
$('.popover').off('click', '#contact-add-tags-popover')
$('.popover').on('click', '#contact-add-tags-popover', function(e){
e.preventDefault();
		
		var that=$(this);
	    // Add Tags

		var new_tags = get_new_tags('addTagsOnPopover');
		if(new_tags)new_tags=new_tags.trim();
		
		if(!new_tags || new_tags.length<=0 || (/^\s*$/).test(new_tags))
		{
			console.log(new_tags);
			return;
		}
		if (!isValidTag(new_tags, true)) {
			return;
		}
		$('#add-tags-popover').css("display", "block");
		$("#addTagsForm-popover").css("display", "none");
		console.log(new_tags);
		
		if(new_tags) {
			var json = Contact_collection.toJSON();
	    		
	    	
	    	// Reset form
	    	$('#addTagsForm-popover input').each (function(){
   		  	  	$(this).val("");
   		  	});
	    	
	    	// Checks if tag already exists in contact
			if($.inArray(new_tags, json.tags) >= 0)
				return;
			acl_util.canAddTag(new_tags.toString(),function(respnse){
		    	json.tagsWithTime.push({"tag" : new_tags.toString()});
	   			
		    	// Save the contact with added tags
		    	var contact = new Backbone.Model();
		        contact.url = 'core/api/contacts';
		        contact.save(json,{
		       		success: function(data){
		       			
		       			// Updates to both model and collection
		       			 if(listView!=undefined) 
		       			 	Contact_collection.set(data.toJSON());
		       			 	else
		       			 		{
		       			Contact_collection.set(data.toJSON(),{silent:true});
      				 Contact_collection.trigger('popoverChange');
      				}
		       				 var old_tags = [];
	       			$.each($('#added-tags-popover').children(), function(index, element){
       					
	       				old_tags.push($(element).html());
       				});
       				if ($.inArray(e, old_tags) == -1) 
		       				$('#added-tags-popover').append('<span class="label bg-light dk text-tiny">'+new_tags+'</span>');

		       			console.log(new_tags);
		       			// Adds the added tags (if new) to tags collection
		       			tagsCollection.add(new BaseModel({"tag" : new_tags}));
		       		},
		       		error: function(model,response){
		       			console.log(response);
		       			showAlertModal(response.responseText, undefined, undefined, undefined, "Error");
		       		}
		        });
			});
		}
	});

	$('.popover').off('click', '#contact-owner-popover');
$('.popover').on('click', '#contact-owner-popover', function(e){
	var that=$(this);
	  e.preventDefault();
	  var optionsTemplate = "<li><a href='javascript:void(0)' class='contact-owner-list-popover' data='{{id}}'>{{name}}</a></li>";
         fillSelect('contact-detail-owner-popover','/core/api/users/partial', 'domainUsers', function()
			{
									$(that).css('display', 'none');
	    	$(that).parent().find('#change-owner-ul-popover').css('display', 'inline-block');
	    	if($(that).parent().find('#change-owner-ul-popover').css('display') == 'inline-block')
	             $(that).parent().find(".loading").remove();
		}, optionsTemplate, true);
	    
		//});
});
$('.popover').off('click', '.contact-owner-list-popover');
$('.popover').on('click', '.contact-owner-list-popover', function(e){
	e.preventDefault();
	var that=$(this);
    	var targetEl = $(e.currentTarget);
    	$('#change-owner-ul-popover').css('display', 'none');
		
		// Reads the owner id from the selected option
		var new_owner_id = $(targetEl).attr('data');
		var new_owner_name = $(targetEl).text();
		var current_owner_id = $('#contact-owner-popover').attr('data');
		
		// Returns, if same owner is selected again 
		if(new_owner_id == current_owner_id)
			{
			  // Showing updated owner
			  $('#contact-owner-popover').css('display', 'inline-block');
			  return;
			}
		
		  var contactModel = new BaseModel();
		    contactModel.url = '/core/api/contacts/change-owner/' + new_owner_id + "/" + Contact_collection.get('id');
		    contactModel.save( Contact_collection.toJSON(), {success: function(model){
		    	// Replaces old owner details with changed one
				$('#contact-owner-popover').text(new_owner_name);
				$('#contact-owner-popover').attr('data', new_owner_id);
				$('#contact-owner-popover').attr('title' , new_owner_name);
				
				// Showing updated owner
				$('#contact-owner-popover').css('display', 'inline-block'); 
				 if(listView!=undefined) 
				 	Contact_collection.set(model.toJSON());
				 	else
				 	{
				Contact_collection.set(model.toJSON(),{silent:true});
      				 Contact_collection.trigger('popoverChange');
      				}
				
		    }});
});

}

function contactPopupScoreValue()
{

	    var scoreboxval = parseInt($("#contactscorebox").val());
		var decimalcheck=$("#contactscorebox").val();
		var contact_model =  App_Contacts.contact_popover.toJSON();
		var prvs = ((contact_model.lead_score)? contact_model.lead_score:0);
		if (((contact_model.type=="PERSON" && scoreboxval != prvs && (decimalcheck%1==0))|| $("#contactscorebox").val()=="")||((contact_model.type=="COMPANY" && (scoreboxval>0) && scoreboxval != prvs && (decimalcheck%1==0))|| $("#contactscorebox").val()=="")){ 
			if($("#contactscorebox").val()==""){scoreboxval=0;
			}					
			App_Contacts.contact_popover.set({'lead_score': scoreboxval}, {silent: true});
			var contact_model =  App_Contacts.contact_popover.toJSON();			
			var new_model = new Backbone.Model();
			new_model.url = 'core/api/contacts';
			new_model.save(contact_model,{
			success: function(model){
					}
				});							
		}
         if(contact_model.type=="COMPANY" && (isNaN(scoreboxval)|| scoreboxval!=decimalcheck||(scoreboxval<0)))
         {
         	alert("Please enter a valid number.");
			scoreboxval=prvs;

         }
         
         

		else if (isNaN(scoreboxval)|| scoreboxval!=decimalcheck){
			alert("Please enter a valid number.");
			scoreboxval=prvs;
		}
	
		else{
			if(scoreboxval== prvs){
			scoreboxval=prvs;
			}
		}
		$('#lead-score').attr("data-original-title", scoreboxval);
		$('#lead-score').text(scoreboxval).removeClass("hide");
	   	$("#contactscorebox").addClass("hide").val(scoreboxval);
	   	$("#lead-score").attr("title",scoreboxval);
	}



function agile_crm_get_List_contact_properties_list(propertyName)
{
	// Reads current contact model form the contactDetailView
	var contact_model = App_Contacts.contact_popover;

	// Gets properties list field from contact
	var properties = contact_model.get('properties');
	var property_list = [];

	/*
	 * Iterates through each property in contact properties and checks for the
	 * match in it for the given property name and retrieves value of the
	 * property if it matches
	 */
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName)
		{
			property_list.push(property);
		}
	});

	// If property is defined then return property value list
	return property_list;
}


function contact_list_starify(el,listView) {
    head.js(LIB_PATH + 'lib/jquery.raty.min.js', function(){
    	
    	var contact_model  =  App_Contacts.contact_popover;
    	
    	// If contact update is not allowed then start rating does not allow user to change it
    	if(App_Contacts.contact_popover && App_Contacts.contact_popover.get('owner') && !canEditContact(App_Contacts.contact_popover.get('owner').id))
    	{
    			$('#star', el).raty({
    			 'readOnly': true,
    			  score: App_Contacts.contact_popover.get('star_value')
    			 });
    		 return;
    	}
    	
    	// Set URL - is this required?
    	// contact_model.url = 'core/api/contacts';    	
    	$('#star', el).raty({
    		
    		/**
    		 * When a star is clicked, the position of the star is set as star_value of
    		 * the contact and saved.    
    		 */
        	click: function(score, evt) {
        	         		
           		if(listView!=undefined) 
        		App_Contacts.contact_popover.set({'star_value': score});
      				 else{
      				 	App_Contacts.contact_popover.set({'star_value': score},{silent:true});
      				 App_Contacts.contact_popover.trigger('popoverChange');
      				 }
        		contact_model =  App_Contacts.contact_popover.toJSON();
        		var new_model = new Backbone.Model();
        		new_model.url = 'core/api/contacts';
        		new_model.save(contact_model, {
        			success: function(model){
        			}
        		});
},
        	
        	/**
        	 * Highlights the stars based on star_value of the contact
        	 */
        	score: contact_model.get('star_value')
            
        });
    });
    
}

function popoverEnter(that,left,top,listView,campaigns_view)
{


 
     

			timer=setTimeout(function() {
						 	
						  	
				if (!insidePopover)	{
		
					 $('.popover').remove();	

		 App_Contacts.contact_popover=$(that).data();
		 try{
		 		getTemplate("contacts-custom-view-popover",  App_Contacts.contact_popover.toJSON(), undefined, function(template_ui){
						if(!template_ui)
							  return;
								$(that).popover(
        {
            "rel": "popover",
            "trigger": "manual",
            "placement": "auto top",
            "html": "true",
            "content": template_ui,
            "container" : 'body'
            });
								$(that).popover('show');
							$('.popover').addClass("contact_popover fadeInLeft animated");
							$('.popover-content').html(template_ui);
							if(left!=undefined)
							$('.popover').css('left', left + "px");
						if(top!=undefined){
						if (window.innerHeight - $(that).offset().top + $(window).scrollTop()>= 250)
       	  top = $(that).offset().top + 20 + 'px';
        else
         top = $(that).offset().top-$('.popover').height() + 'px';
     $('.popover').css('top',top);}
                        	
							 attachEvents(that,App_Contacts.contact_popover,listView,campaigns_view);
						contact_list_starify('.popover',listView);
						
					});
		 		that.find('.data').attr('data');
		 	}
		 	catch(e){
		 		return false;
		 	}
		 	}
		 }, 1000);
}

function popout(that)
{
		
	setTimeout(function() {
		if (!insidePopover){
			if($('.popover').length!=0)
			{
			$(that).popover('hide');
			$('.popover').remove();
			}
		}
					
	}, 200);
	 clearTimeout(timer);
}
/**
 * custom-field.js is a script file to deal with the UI of the custom fields,
 * and also contains a function which adds custom_fields attribute to the
 * desired entity with all the custom fields as values.
 * 
 * @module Custom fields
 * 
 * author: Yaswanth
 */
function initializeCustomFieldsListeners(){
	/**
	 * Loads the respective modal (Text or Date or List or Check-box modal) based
	 * on the id attribute of the clicked link to save the custom fields.
	 */
	$('#custom-fields-accordion').on('click', '.fieldmodal', function(event){
		event.preventDefault();
		var type = $(this).attr("type");
		
		showCustomFieldModel({"scope" : type, "position" : $(this).parent().parent().find('table > tbody > tr').length+1});
		
	});
	
	
	$('#custom-fields-accordion').on('change', '#admin-settings-customfields-model-list > tr > td:not(":first-child")', function(e){
		e.preventDefault();
		var custom_field = $(this).closest('tr').data();
		console.log(custom_field);
		showCustomFieldModel(custom_field.toJSON());
	});
	$('#custom-fields-accordion').on('click', '#edit-custom-field', function(e){
		e.preventDefault();
		var custom_field = $(this).closest('tr').data();
		console.log(custom_field);
		showCustomFieldModel(custom_field.toJSON());
	});
	$('#custom-fields-accordion').on('click', '#delete-custom-field', function(e){
		e.preventDefault();
		var $that = $(this);
		showAlertModal("delete_custom_field", "confirm", function(){
			var custom_field = $that.closest('tr').data();
			console.log(custom_field);
			var currentElement=$that;
			$.ajax({ type : 'DELETE', url : '/core/api/custom-fields/' + custom_field.id, contentType : "application/json; charset=utf-8",
				success : function(data){
					if(custom_field.get("scope")=="CONTACT")
						App_Admin_Settings.contactCustomFieldsListView.collection.remove(custom_field.id);
					else if(custom_field.get("scope")=="COMPANY")
						App_Admin_Settings.companyCustomFieldsListView.collection.remove(custom_field.id);
					else if(custom_field.get("scope")=="DEAL")
						App_Admin_Settings.dealCustomFieldsListView.collection.remove(custom_field.id);
					else if(custom_field.get("scope")=="CASE")
						App_Admin_Settings.caseCustomFieldsListView.collection.remove(custom_field.id);
					currentElement.closest('tr').remove();
				}, dataType : 'json' });
		});
	});
}

function showCustomFieldModel(data)
{
	var modelViewCount = 0;
	var isNew = false;
	isNew = !data.id;
	// Creating model for bootstrap-modal
	var modelView = new Base_Model_View({
		url : '/core/api/custom-fields',
		template : 'custom-field-add-modal',
	//	window : 'custom-fields',
		data : data,
		//reload : true,
		modal : "#custom-field-add-modal",
		isNew : isNew,
		postRenderCallback : function(el) {
			console.log($("#custom-field-add-modal", el));
			//This code will scroll to top to see the modal.
			
			if(!modelViewCount){
				modelViewCount++;	
				$("#custom-field-add-modal", el).modal('show');
			}
			
			//Customizing the style to display the custom field modal in center for screen.
			var modalWidth = $('#custom-field-add-modal').width();
		     $('#custom-field-add-modal').css("left", "50%");
		     $('#custom-field-add-modal').css("width", modalWidth);
		     $('#custom-field-add-modal').css("margin", (modalWidth/2)*-1);
		     bindCustomFiledChangeEvent(el);
		},
		saveCallback : function(model)
		{
			console.log(model);
			//var custom_field_model_json = App_Admin_Settings.customFieldsListView.collection.get(model.id);
			var custom_field_model_json;
			if(model.scope=="CONTACT")
				custom_field_model_json = App_Admin_Settings.contactCustomFieldsListView.collection.get(model.id);
			else if(model.scope=="COMPANY")
				custom_field_model_json = App_Admin_Settings.companyCustomFieldsListView.collection.get(model.id);
			else if(model.scope=="DEAL")
				custom_field_model_json = App_Admin_Settings.dealCustomFieldsListView.collection.get(model.id);
			else if(model.scope=="CASE")
				custom_field_model_json = App_Admin_Settings.caseCustomFieldsListView.collection.get(model.id);
			
			
			if(custom_field_model_json)
			{
				//App_Admin_Settings.customFieldsListView.collection.remove(custom_field_model_json);
				custom_field_model_json.set(model);
			/*	if(model.scope=="CONTACT")
					App_Admin_Settings.contactCustomFieldsListView.render(true);
				else if(model.scope=="COMPANY")
					App_Admin_Settings.companyCustomFieldsListView.render(true);
				else if(model.scope=="DEAL")
					App_Admin_Settings.dealCustomFieldsListView.render(true);
				else if(model.scope=="CASE")
					App_Admin_Settings.caseCustomFieldsListView.render(true);*/
			}
			
			else
			{
				if(model.scope=="CONTACT"){
					App_Admin_Settings.contactCustomFieldsListView.collection.add(model);
				}else if(model.scope=="COMPANY"){
					App_Admin_Settings.companyCustomFieldsListView.collection.add(model);
					App_Admin_Settings.companyCustomFieldsListView.render(true);
				}else if(model.scope=="DEAL"){
					App_Admin_Settings.dealCustomFieldsListView.collection.add(model);
					App_Admin_Settings.dealCustomFieldsListView.render(true);
				}else if(model.scope=="CASE"){
					App_Admin_Settings.caseCustomFieldsListView.collection.add(model);
					App_Admin_Settings.caseCustomFieldsListView.render(true);
				}
				/*App_Admin_Settings.customFieldsListView.collection.add(model);
				if(App_Admin_Settings.customFieldsListView.collection.length == 1)
					App_Admin_Settings.customFieldsListView.render(true);*/
			}

			$("#custom-field-add-modal").modal('hide');
			$("body").removeClass("modal-open").css("padding-right", "");
		},
		errorCallback : function(response)
		{
			if(response.responseText.indexOf("Sorry") == 0)
			{
				$('#duplicate-custom-field-err').html("<i>"+response.responseText+"</i>");
				$('#duplicate-custom-field-err').removeClass("hide");
			}
			else
			{
				var errorJSON = {};
				errorJSON["TEXTAREA"] = "Text Area";
				errorJSON["TEXT"] = "Text Field";
				errorJSON["DATE"] = "Date Field";
				errorJSON["CHECKBOX"] = "Checkbox";
				errorJSON["LIST"] = "List";
				errorJSON["NUMBER"] = "Number";
				errorJSON["FORMULA"] = "Formula";
				errorJSON["CONTACT"] = "Contact";
				errorJSON["COMPANY"] = "Company";

				if($('#label', $('#textModalForm')).is(':disabled'))
				{
					$('#duplicate-custom-field-type-err').html("<i>"+errorJSON[response.responseText]+" type custom field exists with same label. Choose same type.</i>");
				}
				else
				{
					$('#duplicate-custom-field-type-err').html("<i>"+errorJSON[response.responseText]+" type custom field exists with same label. Choose same type or different label.</i>");
				}
				$('#duplicate-custom-field-type-err').removeClass("hide");
			}
			setTimeout(function(){
				$('#duplicate-custom-field-err').addClass("hide");
				$('#duplicate-custom-field-type-err').addClass("hide");
			},3000);
		}
	});

	$('#custom-field-modal').html(modelView.render(true).el);
	$("#custom-field-type").trigger("change");
}


function bindCustomFiledChangeEvent(el){
	$('#custom-field-add-modal',el).on('change', '#custom-field-type', function(e){
		e.preventDefault();
		var value = $(this).val();
		if(value == "LIST")
		{
			$("#custom-field-data").hide();
			$("input",  $("#custom-field-data")).removeAttr("name");
			$("#custom-field-list-values").show();
			$("input",  $("#custom-field-list-values")).attr("name", "field_data");
			$("#custom-field-formula-data").hide();
			$("textarea",  $("#custom-field-formula-data")).removeAttr("name");
			$('.required-and-searchable').show();
		}
		else if(value == "TEXTAREA")
		{
			$("#custom-field-data").show();
			$("input",  $("#custom-field-data")).attr("name", "field_data");
			$("#custom-field-list-values").hide();
			$("input",  $("#custom-field-list-values")).removeAttr("name");
			$("#custom-field-formula-data").hide();
			$("textarea",  $("#custom-field-formula-data")).removeAttr("name");
			$('.required-and-searchable').show();
		}
		else if(value == "FORMULA")
		{
			$("#custom-field-data").hide();
			$("input",  $("#custom-field-data")).removeAttr("name");
			$("#custom-field-list-values").hide();
			$("input",  $("#custom-field-list-values")).removeAttr("name");
			$("#custom-field-formula-data").show();
			$("textarea",  $("#custom-field-formula-data")).attr("name", "field_data");
			$('.required-and-searchable').hide();
		}
		else
		{
			$("#custom-field-data").hide();
			$("#custom-field-list-values").hide();
			$("#custom-field-formula-data").hide();
			$('.required-and-searchable').show();
		}
		
	});
}

/**
 * Adds custom fields to the the desired entity and then calls the callback to
 * update the custom fields to that entity.
 * 
 * @method add_custom_fields_to_form
 * @param context
 *            entity to fill up with the custom fields
 * @param callback
 *            will be called with the modified entity as parameter, when it is a
 *            function
 * 
 */
function add_custom_fields_to_form(context, callback, scope) {

	if(scope == undefined || scope == "CONTACT")
		$("#content").html(LOADING_HTML);
	var url = "core/api/custom-fields/scope?scope=" + (scope == undefined ? "CONTACT" : scope);
	var custom_fields = Backbone.Model.extend({
		url : url
	});

	new custom_fields().fetch({
		success : function(custom_field_data) {

			var custom_fields_list = [];

			$.each(custom_field_data.toJSON(), function(index, value) {
				custom_fields_list.push(value);
			});
			
			App_Contacts.custom_fields = custom_fields_list;
			// var contact = contact.toJSON();
			context['custom_fields'] = custom_fields_list;
			
			if (callback && typeof (callback) === "function") {
				// execute the callback, passing parameters as necessary
				callback(context);
			}

		}
	});

}

/**
 * Called from handlebars
 * Generates suitable html string for each custom field entity depending upon it's type 
 * and does concatenation. For example, if the type of the field is list then a 'select drop down' 
 * is generated. Similarly, html strings are generated based on other filed types.
 * If the custom field has the attribute is_required as true, then it's associated html
 * string also contains the "required" class. 
 * 
 * @method show_custom_fields_helper
 * @param custom_fields
 * @param properties
 * @returns {String}
 */
function show_custom_fields_helper(custom_fields, properties){

	var el = "";
	var isModal = false;
	if(properties.length > 0){
		if(properties[0] && properties[0] == 'modal'){
			isModal = true;
		}
	}
	
	// Text as default
	var field_type = "text";
		
	// Create Field for each custom field  to insert into the desired form 
	$.each(custom_fields, function(index, field)
	{
		if(!field.field_type)
			return;
		
		var label_style = "";
		var modal_label_style = "";
		var modal_control_style = "";
		var modal_checkbox = "";
		var field_style = "";
		var div_col9_style = "";
		var div_col3_style = "";
		var checkbox_style ="";
		var max_len = 500;
		if(field.scope == "CONTACT"){
			label_style = "col-sm-3 word-break-all";
			field_style = "col-sm-10";
			div_col9_style = "col-sm-9 company_input";
			div_col3_style = "col-sm-3";
			modal_checkbox = "col-sm-offset-3 modal-cbx-m-t";
		}else if(field.scope == "COMPANY"){
			label_style = "control-label col-sm-3 word-break-all";
			modal_label_style = "control-label col-sm-3 word-break-all"; 
			modal_control_style = "col-sm-7";
			div_col9_style = "company_input";
			checkbox_style = "col-sm-3";
			modal_checkbox = "col-sm-offset-3 modal-cbx-m-t";
		}else if(field.scope == "DEAL"){
			label_style = "control-label col-sm-3 word-break-all";
			modal_label_style = "control-label col-sm-3 word-break-all";
			modal_control_style = "col-sm-7";
			checkbox_style = "col-sm-3";
			modal_checkbox = "col-sm-offset-3 modal-cbx-m-t";
		}else if(field.scope == "CASE"){
			label_style = "control-label col-sm-3 word-break-all";
			modal_label_style = "control-label col-sm-3 word-break-all";
			modal_control_style = "col-sm-7";
			checkbox_style = "col-sm-3";
			modal_checkbox = "col-sm-offset-3";
		}
		
		// If field type is list create a select dropdown
		if(field.field_type.toLowerCase() == "list")
		{
			var list_values = [],list_options = '<option value="">Select</option>';
			
			// Split values at ";" to separate values of field_data (list options)
			if(field.field_data)
					list_values = field.field_data.split(";");
				
				// Create options based on list values
				$.each(list_values,function(index, value){
					if(value != "")
						list_options = list_options.concat('<option value="'+value+'">'+value+'</option>');
				});
				
				// Create select drop down by checking it's required nature
				if(field.is_required){
					
					if(isModal){
						el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
								+field.field_label
								+'<span class="field_req">*</span></label><div class="controls '+modal_control_style+'"><span><select class="'
								+field.field_type.toLowerCase()
								+' custom_field required form-control '+field_style+'" id='
								+field.id
								+' name="'
								+field.field_label
								+'">'
								+list_options
								+'</select></span></div></div>');											
					}else{
						el = el.concat('<div class="control-group form-group "><label class="control-label '+label_style+'">'
								+field.field_label
								+' <span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col9_style+'"><select class="'
								+field.field_type.toLowerCase()
								+' custom_field required form-control '+field_style+'" id='
								+field.id
								+' name="'
								+field.field_label
								+'">'
								+list_options
								+'</select></div></div>');
					}
					
				}else{
					if(isModal){
						el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
								+field.field_label
								+'</label><div class="controls '+modal_control_style+'"><select class="'
								+field.field_type.toLowerCase()
								+' custom_field form-control '+field_style+'" id='
								+field.id
								+' name="'
								+field.field_label+'">'
								+list_options+'</select></div></div>');
					}else{
						el = el.concat('<div class="control-group form-group ">	<label class="control-label '+label_style+'">'
									+field.field_label
									+'</label><div class="controls col-sm-9 '+div_col9_style+'"><select class="'
									+field.field_type.toLowerCase()
									+' custom_field form-control '+field_style+'" id='
									+field.id
									+' name="'
									+field.field_label+'">'
									+list_options+'</select></div></div>');
					}
				}
				
			return;
		}
		else if(field.field_type.toLowerCase() == "checkbox")
			{
				field_type = "checkbox";
				
				if(field.scope=="DEAL"){
					if(field.is_required){
						if(isModal){
							el = el.concat('<div class="control-group form-group modal-cbx-m-t"><div class="checkbox '+modal_checkbox+' col-sm-6"><label class="i-checks i-checks-sm ">'
									+'<input type="'
									+field_type
									+'" class="'
									+field.field_type.toLowerCase()
									+'_input custom_field required" id='
									+field.id+' name="'
									+field.field_label
									+'" style="margin: 0px 5px;"><i></i>'+field.field_label+'</label><div class="field_req inline-block">*</div><span for="'+field.field_label+'" generated="true" class="help-inline"></span></div></div>');

						}else{
							el = el.concat('<div class="control-group form-group ">	<label class="i-checks i-checks-sm '+label_style+'">'
									+'<span class="field_req">*</span><input type="'
									+field_type
									+'" class="'
									+field.field_type.toLowerCase()
									+'_input custom_field required" id='
									+field.id+' name="'
									+field.field_label
									+'" style="margin: 0px 5px;"><i></i>'+field.field_label+'</label></div>');
						}
					}else{
						if(isModal){
							el = el.concat('<div class="control-group form-group modal-cbx-m-t"><div class="checkbox '+modal_checkbox+' col-sm-6"><label class="i-checks i-checks-sm">'

									+'<input type="'
									+field_type
									+'" class="'
									+field.field_type.toLowerCase()
									+'_input custom_field" id='
									+field.id+' name="'
									+field.field_label
									+'" style="margin: 0px 5px;"><i></i>'+field.field_label+'</label></div></div>');
						}else{
							el = el.concat('<div class="control-group form-group "><label class="i-checks i-checks-sm '+label_style+'">'
									+'<input type="'
									+field_type
									+'" class="'
									+field.field_type.toLowerCase()
									+'_input custom_field" id='
									+field.id+' name="'
									+field.field_label
									+'" style="margin: 0px 5px;"><i></i>'+field.field_label+'</label></div>');
						}
					}
					return;
				}
				
				if(field.is_required){
					if(isModal){
						el = el.concat('<div class="control-group form-group modal-cbx-m-t"><div class="checkbox '+modal_checkbox+' col-sm-6">'

								+'<label class="i-checks i-checks-sm"><input type="'
								+field_type
								+'" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field required" id='
								+field.id+' name="'
								+field.field_label
								+'"><i></i>'+field.field_label+'</label><div class="field_req inline-block">*</div><span for="'+field.field_label+'" generated="true" class="help-inline"></span></div></div>');
					}else{
						el = el.concat('<div class="control-group form-group ">	<label class="control-label '+checkbox_style+" "+label_style+'">'
								+field.field_label
								+' <span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col3_style+' m-t-xs"><label class="i-checks i-checks-sm"><input type="'
								+field_type
								+'" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field required" id='
								+field.id+' name="'
								+field.field_label
								+'"><i></i></label></div></div>');
					}
				}
				else{
					if(isModal){
						el = el.concat('<div class="control-group form-group modal-cbx-m-t"><div class="checkbox '+modal_checkbox+' col-sm-6"><label class="i-checks i-checks-sm">'

								+'<input type="'
								+field_type
								+'" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field" id='
								+field.id+' name="'
								+field.field_label
								+'"><i></i>'+field.field_label+'</label></label></div></div>');
					}else{
						el = el.concat('<div class="control-group form-group "><label class="control-label '+checkbox_style+" "+label_style+'">'
								+field.field_label
								+'</label><div class="controls col-sm-9 '+div_col3_style+' m-t-xs"><label class="i-checks i-checks-sm"><input type="'
								+field_type
								+'" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field" id='
								+field.id+' name="'
								+field.field_label
								+'"><i></i></label></div></div>');
					}
				}
				return;
			}
		else if(field.field_type.toLowerCase() == "textarea")
		{
			field_type = "textarea";
			var rows = 3;
			
			if(field.field_data)
				rows = parseInt(field.field_data);
				
			if(field.is_required){
				if(isModal){
					el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
							+field.field_label
							+'<span class="field_req">*</span></label><div class="controls '+modal_control_style+'"><textarea rows="'
							+rows+'" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field required form-control resize-vertical field_length" id='
							+field.id+' name="'
							+field.field_label
							+'" max_len="'+max_len+'"></textarea></div></div>');
				}else{
					el = el.concat('<div class="control-group form-group "><label class="control-label '+label_style+'">'
							+field.field_label
							+'<span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col9_style+'"><textarea rows="'
							+rows+'" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field required form-control resize-vertical field_length" id='
							+field.id+' name="'
							+field.field_label
							+'"  max_len="'+max_len+'"></textarea></div></div>');
				}
			}else{
				if(isModal){
					el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
							+field.field_label
							+'</label><div class="controls '+modal_control_style+'"><textarea rows="'
							+rows+'" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field form-control resize-vertical field_length" id='
							+field.id+' name="'
							+field.field_label
							+'"  max_len="'+max_len+'"></textarea></div></div>');
				}else{
					el = el.concat('<div class="control-group form-group "><label class="control-label '+label_style+'">'
							+field.field_label
							+'</label><div class="controls col-sm-9 '+div_col9_style+'"><textarea rows="'
							+rows+'" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field form-control resize-vertical field_length" id='
							+field.id+' name="'
							+field.field_label
							+'"  max_len="'+max_len+'"></textarea></div></div>');
				}
			}
			return;
		}
		else if(field.field_type.toLowerCase() == "number")
		{
			field_type = "number";
			if(field.is_required){
				if(isModal){
					el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
						+field.field_label
						+'<span class="field_req">*</span></label><div class="controls custom-number-controls '+modal_control_style+'"><input type="number" class="'
						+field.field_type.toLowerCase()
						+'_input custom_field required form-control field_length" id="'
						+field.id+'" name="'
						+field.field_label
						+'" value="0" max_len="'+max_len+'"></input>'
						+'</div></div>');
				}else{
					el = el.concat('<div class="control-group form-group ">	<label class="control-label '+label_style+'">'
							+field.field_label
							+' <span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col3_style+' custom-number-controls"><input type="number" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field required form-control field_length" id="'
							+field.id+'" name="'
							+field.field_label
							+'" value="0" max_len="'+max_len+'"></input>'
							+'</div></div>');
				}
			}else{
				if(isModal){
					el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
						+field.field_label
						+'</label><div class="controls custom-number-controls '+modal_control_style+'"><input type="number" class="'
						+field.field_type.toLowerCase()
						+'_input custom_field form-control field_length" id="'
						+field.id+'" name="'
						+field.field_label
						+'" value="0" max_len="'+max_len+'"></input>'
						+'</div></div>');
				}else{
					el = el.concat('<div class="control-group form-group ">	<label class="control-label '+label_style+'">'
							+field.field_label
							+'</label><div class="controls col-sm-9 '+div_col3_style+' custom-number-controls"><input type="number" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field form-control field_length" id="'
							+field.id+'" name="'
							+field.field_label
							+'" value="0" max_len="'+max_len+'"></input>'
							+'</div></div>');
				}
			}
				
			return;
		}
		else if(field.field_type.toLowerCase() == "formula")
		{
			//If custom field is formula we return without appending anything	
			return;
		}
		else if(field.field_type.toLowerCase() == "contact")
		{
			field_type = "contact";
			if(field.is_required){
				if(isModal){
					el = el.concat('<div class="control-group form-group " id="custom_contact_'+field.id+'"><label class="control-label word-break-all col-sm-3">'
								+field.field_label
								+'<span class="field_req">*</span></label><div class="controls col-sm-7">'
								+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_contact"></ul>'
								+'<input type="text" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field required_field form-control field_length typeahead typeahead_contacts" id='
								+field.id+' name="'+field.field_label
								+'" max_len="'+max_len+'" placeholder="Contact Name"></div></div>');
				}else{
					el = el.concat('<div class="control-group form-group " id="custom_contact_'+field.id+'"><label class="control-label '+label_style+'">'
							+field.field_label
							+' <span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col9_style+'">'
							+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_contact"></ul>'
							+'<input type="text" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field required_field form-control field_length typeahead typeahead_contacts" id='
							+field.id+' name="'+field.field_label
							+'" max_len="'+max_len+'" placeholder="Contact Name"></div></div>');
				}
			}else{
				if(isModal){
					el = el.concat('<div class="control-group form-group " id="custom_contact_'+field.id+'"><label class="control-label word-break-all col-sm-3">'
								+field.field_label
								+'</label><div class="controls col-sm-7">'
								+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_contact"></ul>'
								+'<input type="text" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field form-control field_length typeahead typeahead_contacts" id='
								+field.id+' name="'
								+field.field_label
								+'" max_len="'+max_len+'" placeholder="Contact Name"></div></div>');
				}else{
					el = el.concat('<div class="control-group form-group " id="custom_contact_'+field.id+'"><label class="control-label '+label_style+'">'
							+field.field_label
							+'</label><div class="controls col-sm-9 '+div_col9_style+'">'
							+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_contact"></ul>'
							+'<input type="text" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field form-control field_length typeahead typeahead_contacts" id='
							+field.id+' name="'
							+field.field_label
							+'" max_len="'+max_len+'" placeholder="Contact Name"></div></div>');
				}
			}
				
			return;
		}
		else if(field.field_type.toLowerCase() == "company")
		{
			field_type = "company";
			if(field.is_required){
				if(isModal){
					el = el.concat('<div class="control-group form-group " id="custom_company_'+field.id+'"><label class="control-label word-break-all col-sm-3">'
								+field.field_label
								+'<span class="field_req">*</span></label><div class="controls col-sm-7">'
								+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_company"></ul>'
								+'<input type="text" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field required_field form-control field_length typeahead typeahead_contacts" id='
								+field.id+' name="'+field.field_label
								+'" max_len="'+max_len+'" placeholder="Company Name"></div></div>');
				}else{
					el = el.concat('<div class="control-group form-group " id="custom_company_'+field.id+'">	<label class="control-label '+label_style+'">'
							+field.field_label
							+' <span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col9_style+'">'
							+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_company"></ul>'
							+'<input type="text" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field required_field form-control field_length typeahead typeahead_contacts" id='
							+field.id+' name="'+field.field_label
							+'" max_len="'+max_len+'" placeholder="Company Name"></div></div>');
				}
			}else{
				if(isModal){
					el = el.concat('<div class="control-group form-group " id="custom_company_'+field.id+'"><label class="control-label word-break-all col-sm-3">'
								+field.field_label
								+'</label><div class="controls col-sm-7">'
								+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_company"></ul>'
								+'<input type="text" class="'
								+field.field_type.toLowerCase()
								+'_input custom_field form-control field_length typeahead typeahead_contacts" id='
								+field.id+' name="'
								+field.field_label
								+'" max_len="'+max_len+'" placeholder="Company Name"></div></div>');
				}else{
					el = el.concat('<div class="control-group form-group " id="custom_company_'+field.id+'"><label class="control-label '+label_style+'">'
							+field.field_label
							+'</label><div class="controls col-sm-9 '+div_col9_style+'">'
							+'<ul name="'+field.field_label+'" class="contacts tagsinput tags p-n m-n custom_company"></ul>'
							+'<input type="text" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field form-control field_length typeahead typeahead_contacts" id='
							+field.id+' name="'
							+field.field_label
							+'" max_len="'+max_len+'" placeholder="Company Name"></div></div>');
				}
			}
				
			return;
		}

		// If the field is not of type list or checkbox, create text field (plain text field or date field)
		if(field.is_required){
			if(isModal){
				el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
							+field.field_label
							+'<span class="field_req">*</span></label><div class="controls '+modal_control_style+'"><input type="text" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field required form-control field_length" id='
							+field.id+' name="'+field.field_label
							+'" max_len="'+max_len+'"></div></div>');
			}else{
				el = el.concat('<div class="control-group form-group ">	<label class="control-label '+label_style+'">'
						+field.field_label
						+' <span class="field_req">*</span></label><div class="controls col-sm-9 '+div_col9_style+'"><input type="text" class="'
						+field.field_type.toLowerCase()
						+'_input custom_field required form-control field_length" id='
						+field.id+' name="'+field.field_label
						+'" max_len="'+max_len+'"></div></div>');
			}
		}else{
			if(isModal){
				el = el.concat('<div class="control-group form-group "><label class="control-label word-break-all '+modal_label_style+'">'
							+field.field_label
							+'</label><div class="controls '+modal_control_style+'"><input type="text" class="'
							+field.field_type.toLowerCase()
							+'_input custom_field form-control field_length" id='
							+field.id+' name="'
							+field.field_label
							+'" max_len="'+max_len+'"></div></div>');
			}else{
				el = el.concat('<div class="control-group form-group "><label class="control-label '+label_style+'">'
						+field.field_label
						+'</label><div class="controls col-sm-9 '+div_col9_style+'"><input type="text" class="'
						+field.field_type.toLowerCase()
						+'_input custom_field form-control field_length" id='
						+field.id+' name="'
						+field.field_label
						+'" max_len="'+max_len+'"></div></div>');
			}
		}
	});

	return el;
}

/**
 * It builds UI for showing custom fields in the contacts-merge feature
 */
function show_custom_fields_helper_for_merge(custom_fields, contacts) {
	var el = "";
	$.each(custom_fields,function(index, field) {
		var elements = [];
		for (var i = 0; i < contacts.length; i++) {
			if(i===0){
				var checked = false;
				elements.push('<tr><td style="background-color:#f3f3f3">'
						+ field.field_label + '</td>');
			}
			var contact_field = contacts[i];
			for (var j = 0; j < contact_field.properties.length; j++) {
				var property = contact_field.properties[j];
				if (property.type == "CUSTOM"
					&& property.name == field.field_label) {
					var value = property.value;
					if (value) {
						checked = true;
						if (field.field_type.toLowerCase() == "date") {
							try {
								value = new Date(
										property.value * 1000)
								.format('mm/dd/yyyy');

							} catch (err) {
							}
						}
						if (i === 0) {
							var ele = '<td>'
								+ '<input type="radio" name="'
								+ field.field_label
								+ '" class="'
								+ field.field_type
								.toLowerCase()
								+ '" checked="checked" fieldtype="custom" oid="'
								+ contact_field.id
								+ '" id="'
								+ field.id
								+ '" field="'
								+ field.field_label
								+ '" data="'
								+ value + '">'
								+ value + '</td>';
							elements.push(ele);
							break;
						} else {
							var ele = '<td>'
								+ '<input type="radio" name="'
								+ field.field_label
								+ '" class="'
								+ field.field_type
								.toLowerCase()
								+ '" fieldtype="custom" oid="'
								+ contact_field.id
								+ '" id="'
								+ field.id
								+ '" field="'
								+ field.field_label
								+ '" data="'
								+ value + '">'
								+ value + '</td>';
							elements.push(ele);
							break;
						}
					}// end of if loop checking value is null or not
				}
				else if (j === contact_field.properties.length - 1) {
					var ele = '<td></td>';
					elements.push(ele);
				}
			} // end of contact properties for loop
			if(i===contacts.length-1){
				if(checked){
					for(var i=0;i<elements.length;i++){
						el = el.concat(elements[i]);
					}
					el = el.concat('</tr>');
				}
				elements.length = 0;
			}
		}// end of contacts for loop
	});
	return el;
}

/**
 * De-serializes custom fields (fills the matched custom field values of the entity 
 * (for list and check-box fields) to the generated html string above) and return 
 * string to handlebars register helper to return as handlebars safestring.
 * 
 * @method fill_custom_field_values
 * @param {String} form 
 * 				html string of custom field values
 * @param {Object} content json object including custom fields
 * @returns {String} prefilled html string with matched custom field values
 */
function fill_custom_field_values(form, content)
{
	console.log(content);
	$.each(content, function(index , property){
		if(property.type == "CUSTOM")
			{
				fill_custom_data(property, form);
			}
			
	});
	return $('<div>').append(form).html();
}

function fill_custom_fields_values_generic(form, content)
{
	$.each(content, function(index , property){
		fill_custom_data(property, form);
	});
	
	return $('<div>').append(form).html();
}

function fill_custom_data(property, form)
{
	if(!property.value)
		return;
	var element = $(form).find('*[name="' + property.name + '"]');
	console.log(element);
	// If custom field is deleted or not found with property name return
	if(!element[0])
		{
			return;
		}
	console.log($(element[0]).hasClass("date_input"))
		var tagName = element[0].tagName.toLowerCase();
		var type = element.attr("type");
		 console.log(property.value)
		 console.log($(element[0]));
	if(tagName == "input")
		{
			if(type == "checkbox" && property.value == "on")
				{
					element.attr("checked", "checked"); 
					return;
				}
			else if($(element[0]).hasClass("date_input"))
				{
				try {
					var dateString = new Date(property.value);
					if(dateString == "Invalid Date")
						element.attr("value", getDateInFormatFromEpoc(property.value));
					else
						element.attr("value", getDateInFormat(dateString));
					return;
				} catch (err) {

				}
				}
			
			element.attr("value", property.value);
			console.log(element.val());
		}
	if(tagName == "textarea")
		{
			element.html(property.value);							
		}
	if(tagName == "select")
		{
			if(property.value)
			element.find('option[value="'+property.value.trim()+'"]').attr("selected", "selected");
		}	
}

function serialize_custom_fields(form)
{
	var custom_field_elements =  $("#" + form).find('.custom_field');
	
	console.log(custom_field_elements.length);
   var arr = [];
    $.each(custom_field_elements, function(index, element){
    	name = $(element).attr('name');
    	
    	var json = {};
    	json.name = name;
    	var elem_type = $(element).attr('type')
    	json.value =  $(element).val();
    	
    	if(elem_type=='checkbox')json.value = $(element).is(':checked')?'on':'off';
    	if($(element).hasClass("date_input") && ($(element).val() !=undefined && $(element).val().trim() !=""))
    		if(CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1)
    			json.value = en.dateFormatter({raw: "MM/dd/yyyy"})(new Date(convertDateFromUKtoUS(this.value)));
    		else
    			json.value = en.dateFormatter({raw: "MM/dd/yyyy"})(new Date(this.value));
    	
    	if(($(element).hasClass("contact_input") || $(element).hasClass("company_input")) && isValidContactCustomField($(element).attr('id')))
    	{
    		var contact_values = [];
			$('ul[name="'+name+'"]', $('#'+form)).find('li').each(function(index){
				contact_values.push($(this).attr("data"));
			});
			json.value = JSON.stringify(contact_values);
    	}

    	
    	if(!json.value)
    		return;
        arr.push(json);
    });
   return arr;
}
function groupingCustomFields(base_model){
	var templateKey = "admin-settings-customfields-"+base_model.get("scope").toLowerCase();
	if(base_model.get("scope")=="CONTACT"){
		App_Admin_Settings.contactCustomFieldsListView = new Base_Collection_View({ url : '/core/api/custom-fields/scope/position?scope='+base_model.get("scope"), sortKey : "position", restKey : "customFieldDefs",
			templateKey : templateKey, individual_tag_name : 'tr',
			postRenderCallback : function(custom_el){
				enableCustomFieldsSorting(custom_el,'custom-fields-'+base_model.get("scope").toLowerCase()+'-tbody','admin-settings-customfields-'+base_model.get("scope").toLowerCase()+'-model-list');
				bindModelSearchable(App_Admin_Settings.contactCustomFieldsListView.collection)
			}});
		function bindModelSearchable(collection)
		{
			$.each(collection, function (i, m){
				
			})
		}
		function appendItem(base_model)
		{
			addCustomFieldToSearch(base_model,  base_model.get("scope"));
		};

		function removeItem(base_model)
		{
			removeCustomFieldFromSortOptions(base_model, base_model.get("scope"));
		};

		function updateItem(base_model){
				updateCustomFieldToSearch(base_model, base_model.get("scope"));
		};
		App_Admin_Settings.contactCustomFieldsListView.collection.bind('add', appendItem);
		App_Admin_Settings.contactCustomFieldsListView.collection.bind('remove', removeItem);
		App_Admin_Settings.contactCustomFieldsListView.collection.bind('change', updateItem);
		App_Admin_Settings.contactCustomFieldsListView.collection.fetch();
		$('#customfields-contacts-accordion', this.el).append($(App_Admin_Settings.contactCustomFieldsListView.render().el));
	}else if(base_model.get("scope")=="COMPANY"){
		App_Admin_Settings.companyCustomFieldsListView = new Base_Collection_View({ url : '/core/api/custom-fields/scope/position?scope='+base_model.get("scope"), sortKey : "position", restKey : "customFieldDefs",
			templateKey : templateKey, individual_tag_name : 'tr',
			postRenderCallback : function(custom_el){
				enableCustomFieldsSorting(custom_el,'custom-fields-'+base_model.get("scope").toLowerCase()+'-tbody','admin-settings-customfields-'+base_model.get("scope").toLowerCase()+'-model-list');
			}});
		App_Admin_Settings.companyCustomFieldsListView.collection.fetch();
		$('#customfields-companies-accordion', this.el).append($(App_Admin_Settings.companyCustomFieldsListView.render().el));
	}else if(base_model.get("scope")=="DEAL"){
		App_Admin_Settings.dealCustomFieldsListView = new Base_Collection_View({ url : '/core/api/custom-fields/scope/position?scope='+base_model.get("scope"), sortKey : "position", restKey : "customFieldDefs",
			templateKey : templateKey, individual_tag_name : 'tr',
			postRenderCallback : function(custom_el){
				enableCustomFieldsSorting(custom_el,'custom-fields-'+base_model.get("scope").toLowerCase()+'-tbody','admin-settings-customfields-'+base_model.get("scope").toLowerCase()+'-model-list');
			}});
		App_Admin_Settings.dealCustomFieldsListView.collection.fetch();
		$('#customfields-deals-accordion', this.el).append($(App_Admin_Settings.dealCustomFieldsListView.render().el));
	}else if(base_model.get("scope")=="CASE"){
		App_Admin_Settings.caseCustomFieldsListView = new Base_Collection_View({ url : '/core/api/custom-fields/scope/position?scope='+base_model.get("scope"), sortKey : "position", restKey : "customFieldDefs",
			templateKey : templateKey, individual_tag_name : 'tr',
			postRenderCallback : function(custom_el){
				enableCustomFieldsSorting(custom_el,'custom-fields-'+base_model.get("scope").toLowerCase()+'-tbody','admin-settings-customfields-'+base_model.get("scope").toLowerCase()+'-model-list');
			}});
		App_Admin_Settings.caseCustomFieldsListView.collection.fetch();
		$('#customfields-cases-accordion', this.el).append($(App_Admin_Settings.caseCustomFieldsListView.render().el));
	}
}
function enableCustomFieldsSorting(el,connClass,connId){
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function(){
		$('.'+connClass).sortable({
			axis: "y" ,
			containment: '.'+connClass,
			scroll: false,
			items:'tr',
			helper: function(e, tr){
			    var $originals = tr.children();
			    var $helper = tr.clone();
			    $helper.children().each(function(index)
			    {
			      // Set helper cell sizes to match the original sizes
			      $(this).width($originals.eq(index).width()+50);
			      $(this).css("background","#f5f5f5");
			      $(this).css("border-bottom","1px solid #ddd");
			      $(this).css("max-width",($originals.eq(index).width()+50)+"px");
			    });
			    return $helper;
			},
			/*start: function(event, ui){
				//alert(ui.width());
				$.each(ui.item.children(),function(index,ele){
					ui.helper.children().eq(index).width(ui.helper.children().eq(index).width()-$(this).width());
				});
				ui.helper.width(ui.helper.width());
			},*/
			sort: function(event, ui){
				ui.helper.css("top",(ui.helper.offset().top+ui.item.offset().top)+"px");
			},
			forceHelperSize:true,
			placeholder:'<tr><td></td></tr>',
			forcePlaceholderSize:true,
			handle: ".icon-move",
			cursor: "move",
			tolerance: "intersect"
		});
		
		/*
		 * This event is called after sorting stops to save new positions of
		 * custom fields
		 */
		$('.'+connClass,el).on("sortstop",function(event, ui){
			var models=[];
			$('#'+connId+' > tr').each(function(column){
				var model_id = $(this).data().id;
				
				models.push({ id : model_id, position : column+1 });
			});
			// Saves new positions in server
			$.ajax({ type : 'POST', url : '/core/api/custom-fields/positions', data : JSON.stringify(models),
				contentType : "application/json; charset=utf-8", dataType : 'json' });
		});
	});
}
/*$('#formulaData').live("change",function(e){
	var source = $(this).val();
	var tpl;
	var compiled=true;
	try{
		tpl = Handlebars.precompile(source);
	}catch(err){
		err.message;
		compiled=false;
		return false;
	}
});*/BLOB_KEY = undefined;

var CONTACTS_IMPORT_VIEW = Base_Model_View.extend({
	events : {
		"click .upload-contacts-ele" :  "initializeImportButton",
		"#import-cancel" : "importCancel"
	},
	initializeImportButton : function(e)
	{
		e.preventDefault();
		var element = e.target;

		// get hidden value file type
		var type = $(element).parents('form').children("#type").val();

		var newwindow = window.open("upload-contacts.jsp?type=" + type + "", 'name', 'height=310,width=500');

		if (window.focus)
		{
			newwindow.focus();
		}
	},
	importCancel : function(e)
	{
		// Sends empty JSON to remove
		// contact uploaded
		App_Contacts.importContacts.render(true);
	}


});

function initializeImportEvents(id){

if(!id)
	  id = "content";

	$('#' + id  + " .upload").off('click');
	$('#' + id).on('click', '.upload', function(e)
	{
		// get hidden value file type
		var type = $(this).parents('form').children("#type").val();
		e.preventDefault();

		var newwindow = window.open("upload-contacts.jsp?type=" + type + "", 'name', 'height=310,width=500');

		if (window.focus)
		{
			newwindow.focus();
		}
		return false;
	});


// Cancels import, removes the contacts uploaded in to
	// table, still calls
	// fileUploadInit,
	// so user can uploadimport-comp again if required
	$('#' + id  + " #import-cancel").off('click');
	$('#' + id).on('click', '#import-cancel', function(e){

		// Sends empty JSON to remove
		// contact uploaded
		var $firstDiv = $('#content').children().first();
		App_Contacts.importContacts.render(true);
	});
	
	// cancel option for deals import
	$('#' + id  + " #deal-cancel").off('click');
	$('#' + id).on('click', '#deal-cancel', function(e){

				// Sends empty JSON to remove
				// contact uploaded
				var $firstDiv = $('#content').children().first();

				getTemplate('import-deals', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$firstDiv.html($(template_ui));	
					initializeImportEvents($firstDiv.attr('id'));

				}, $firstDiv);				
			});

$('#' + id  + " #import-contacts").off('click');
$('#' + id).on('change', '.contacts-import-select', function(e) {
    
    importContactsValidate();

});
$('#' + id).on('click', '#import-contacts', function(e)
					{

						if ($(this).attr('disabled'))
							return;
						if(!importContactsValidate())
						      return false;
						 else		
							$(this).attr('disabled', true);

						var properties = [];

						/*
						 * Iterates through all tbody tr's and reads the table
						 * heading from the table, push the table name as
						 * property name and value as property value as
						 * ContactField properties.
						 */
						var model = {};

						// Add Tags
						var tags = get_tags('import-contact-tags');
						console.log(tags);
						var tags_valid = true;
						if (tags != undefined)
						{
							$.each(tags[0].value, function(index, value)
							{
								if(!isValidTag(value, false)) {
									tags_valid = false;
									return false;
								}
								if (!model.tags)
									model.tags = [];

								console.log(model);

								model.tags.push(value);
							});
						}
						if(!tags_valid) {
							getTemplate("import-contacts-validation-message", upload_valudation_errors.invalid_tag, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}
						
						$(this).attr('disabled', true);

						/*
						 * After validation checks are passed then loading is
						 * shown
						 */
						$waiting = $('<div style="display:inline-block;padding-left:5px"><small><p class="text-success"><i><span id="status-message">Please wait</span></i></p></small></div>');
						$waiting.insertAfter($('#import-cancel'));

						$('td.import-contact-fields').each(function(index, element)
						{

							console.log(this);
							console.log(index);
							// Empty property map (Represents
							// ContactField in contact.java)

							var property = {};

							// Read the name of the property from
							// table heading
							var select = $(this).find('select');
							console.log(select);
							var name = $(select).val();
							var type = $(select).find(":selected").attr('class') == 'CUSTOM' ? 'CUSTOM' : 'SYSTEM';
							console.log("name :" + name + ", type" + type);

							if (name.indexOf("properties_") != -1)
							{
								name = name.split("properties_")[1];
								property["type"] = type;
								if (name.indexOf('address-') != -1)
								{
									var splits = name.split("-");
									name = "address";
									property["subtype"] = "home";
									property["type"] = type;
									console.log(splits);
									// Set the value and name fields
									property["value"] = splits[1];
								}

								// Reads the sub type of the fields
								else if (name.indexOf("-") != -1)
								{
									var splits = name.split("-");
									name = splits[1];
									var subType = splits[0];
									if(subType=="GOOGLE"){
										property["subtype"] = "GOOGLE-PLUS";
									}else{
									property["subtype"] = subType;
									console.log($(select).attr('class'));
									property["type"] = type;
									}
								}

								// Set the value and name fields
								if (!property["value"])
									property["value"] = name;

								property["name"] = name;
								console.log(property);
								if (name.indexOf("_ignore_") != -1)
									property = {};
							}
							else
							{
								property["name"] = name;
							}

							// Push in to properties array (represents
							// ContactField array)
							properties.push(property);

						});

						model.properties = properties;
						model.type = "PERSON";

						// Shows Updating
						/*$waiting.find('#status-message').html(getRandomLoadingImg());*/

						// Represents prototype of contact, which specifies the
						// order of properties
						var contact = model;

						console.log(contact);

						// Sends request to save the contacts uploaded from csv,
						// present in the blobstore. Contact is sent to save
						// each row in csv file in to a contact
						$.ajax({ type : 'POST', url : "/core/api/contacts/import/"+ BLOB_KEY + "/CONTACTS", data : JSON.stringify(contact),
							contentType : "application/json", success : function(data)
							{
								// Navigate to contacts page
								// Sends empty JSON to remove
								// contact uploaded
								var $firstDiv = $('#content').first();

								App_Contacts.importContacts.model.fetch({
									success : function(data)
									{
										showNotyPopUp('information', "Contacts are now being imported. You will be notified on email when it is done", "top", 5000);
										addTagAgile(IMPORT_TAG);
										console.log(data);
									}

								})
/*
								getTemplate("import-contacts", {}, undefined, function(template_ui){
									if(!template_ui)
										  return;
									$firstDiv.html($(template_ui));

									initializeImportEvents($firstDiv.attr('id'));
									showNotyPopUp('information', "Contacts are now being imported. You will be notified on email when it is done", "top", 5000);
									addTagAgile(IMPORT_TAG);

								}, $firstDiv);*/

								
							}});

					})


/**
 * validation for csv import companies
 */
$('#' + id  + " #import-comp").off('click');
$('#' + id).on('click', '#import-comp', function(e)
				{

					if ($(this).attr('disabled'))
						return;

					var upload_valudation_errors = { "company_name_missing" : { "error_message" : "Company Name is mandatory. Please select Company name." },
						"company_name_duplicated" : { "error_message" : "Company Name is Duplicated." },
							"invalid_tag" : { "error_message" : "Tag name should start with an alphabet and can not contain special characters other than underscore and space." }
					}
					var models = [];

					// Hide the alerts
					$(".import_contact_error").hide();

					// Headings validation jitendra: 28-08-14
					/*
					 * Reads all the table heading set after importing contacts
					 * list from CSV and ensures that company_name which are
					 * mandatory fields. Checks if duplicate table headings are
					 * set. If validations failed the error alerts a explaining
					 * the cause are shown
					 */
					company_count = 0;
					$(".import-select").each(function(index, element)
					{
						var value = $(element).val()
						if (value == "properties_name")
							company_count += 1;

					})

					if (company_count == 0)
					{
						getTemplate("import-company-validation-message", upload_valudation_errors.company_name_missing, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");						
						return false;
					}

					else if (company_count > 1)
					{
						getTemplate("import-company-validation-message", upload_valudation_errors.company_name_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");	

						return false;
					}


					/*
					 * Iterates through all tbody tr's and reads the table
					 * heading from the table, push the table name as property
					 * name and value as property value as ContactField
					 * properties.
					 */
					var model = {};

					// Add Tags
					// Add Tags
					var tags = get_tags('import-contact-tags');
					console.log(tags);
					var tags_valid = true;
					if (tags != undefined)
					{
						$.each(tags[0].value, function(index, value)
						{
							if(!isValidTag(value, false)) {
								tags_valid = false;
								return false;
							}
							if (!model.tags)
								model.tags = [];

							console.log(model);

							model.tags.push(value);
						});
					}
					if(!tags_valid) {
						getTemplate("import-contacts-validation-message", upload_valudation_errors.invalid_tag, undefined, function(template_ui){
							if(!template_ui)
								  return;
							$('#import-validation-error').html($(template_ui));	
						}, "#import-validation-error");

						return false;
					}
					

					$(this).attr('disabled', true);

					/*
					 * After validation checks are passed then loading is shown
					 */
					$waiting = $('<div style="display:inline-block;padding-left:5px"><small><p class="text-success"><i><span id="status-message">Please wait</span></i></p></small></div>');
					$waiting.insertAfter($('#import-cancel'));

					var properties = [];

					$('td.import-contact-fields').each(function(index, element)
					{

						console.log(this);
						console.log(index);
						// Empty property map (Represents
						// ContactField in contact.java)

						var property = {};

						// Read the name of the property from
						// table heading
						var select = $(this).find('select');
						console.log(select);
						var name = $(select).val();
						var type = $(select).find(":selected").attr('class') == 'CUSTOM' ? 'CUSTOM' : 'SYSTEM';
						console.log("name :" + name + ", type" + type);

						if (name.indexOf("properties_") != -1)
						{
							name = name.split("properties_")[1];
							property["type"] = type;
							if (name.indexOf('address-') != -1)
							{
								var splits = name.split("-");
								name = "address";
								property["subtype"] = "office";
								property["type"] = type;
								console.log(splits);
								// Set the value and name fields
								property["value"] = splits[1];
							}

							// Reads the sub type of the fields
							else if (name.indexOf("-") != -1)
							{
								var splits = name.split("-");
								
								name = splits[1];
								var subType = splits[0];
								if(subType=="GOOGLE"){
									property["subtype"] = "GOOGLE-PLUS";
								}else{
								property["subtype"] = subType;
								console.log($(select).attr('class'));
								property["type"] = type;
								}
							}

							// Set the value and name fields
							if (!property["value"])
								property["value"] = name;

							property["name"] = name;
							console.log(property);
							if (name.indexOf("_ignore_") != -1)
								property = {};
						}
						else
						{
							property["name"] = name;
						}

						// Push in to properties array (represents
						// ContactField array)
						properties.push(property);

					});

					model.properties = properties;
					model.type = "COMPANY";

					// Shows Updating
					/*$waiting.find('#status-message').html(getRandomLoadingImg());*/

					// Represents prototype of contact, which specifies the
					// order of properties
					var contact = model;

					console.log(contact);

					// Sends request to save the contacts uploaded from csv,
					// present in the blobstore. Contact is sent to save
					// each row in csv file in to a contact
					$.ajax({ type : 'POST', url : "/core/api/upload/save?type=Companies&key=" + BLOB_KEY, data : JSON.stringify(contact),
						contentType : "application/json", success : function(data)
						{
							// Navigate to contacts page
							// Sends empty JSON to remove
							// contact uploaded
							var $firstDiv = $('#content').first();

							App_Contacts.importContacts.render(true);
							showNotyPopUp('information', "Companies are now being imported. You will be notified on email when it is done", "top", 5000);
						}, });

				});

/**
 * import deals validations
 */
$('#' + id  + " #import-deals").off('click');
$('#' + id).on('click', '#import-deals', function(e)
				{

					if ($(this).attr('disabled'))
						return;

					var upload_valudation_errors = {
							"deal_name_missing" : { "error_message" : "'Deal Name' is mandatory!" },
							"deal_duplicated" : { "error_message" : "'Name' already exists!" },
							"deal_value_duplicated" : { "error_message" : "'Value' already exists!" },
							"deal_track_duplicated" : { "error_message" : "'Track' already exists!" },
							"deal_milestone_duplicated" : {"error_message" : "'Milestone' already exists!"},
							"deal_related_contact_duplicated" : {"error_message" : "'Related to' already exists!" },
							"deal_probability_duplicated" : {"error_message" : "'Probability' already exists!"},
							"deal_close_date_duplicated" : {"error_message" : "'Close date' already exists!"},
							"deal_note_duplicated" : {"error_message" : "'Note' already exists!"},
							"deal_description_duplicated" : {"error_message":"'Description' already exists!"},
					}
					var models = [];

					// Hide the alerts
					$(".import_contact_error").hide();

					// Headings validation jitendra: 28-08-14
					/*
					 * Reads all the table heading set after importing contacts
					 * list from CSV and ensures that company_name which are
					 * mandatory fields. Checks if duplicate table headings are
					 * set. If validations failed the error alerts a explaining
					 * the cause are shown
					 */
					deal_count = 0, value_count = 0, probability_count = 0, milestone_count = 0, track_count = 0,	close_date_count=0,related_count=0,note_count=0,description_count = 0;
					$(".import-select").each(function(index, element)
					{
						var value = $(element).val();
						if (value == "properties_name")
							deal_count += 1;
						if (value == "properties_value")
							value_count += 1;
						if (value == "properties_probability")
							probability_count += 1;
						if (value == "properties_milestone")
							milestone_count += 1;
						if (value == "properties_track")
							track_count += 1;
						if(value == "properties_closeDate")
										close_date_count +=1;
						if(value == "properties_relatedTo")
										related_count +=1;
						if(value == "properties_note")
										note_count +=1;
						if(value == "properties_description")
										description_count +=1;
										

					});

					if (deal_count == 0)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_name_missing, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}
			

					else if (deal_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
						$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");
						return false;
					}

					else if (value_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_value_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}

					else if (track_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_track_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}

					else if (milestone_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_milestone_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}
					
					else if (related_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_related_contact_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}

					else if (probability_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_probability_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}
					
					else if (close_date_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_close_date_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}
					
					else if (note_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_note_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}
					
					else if (description_count > 1)
					{
						getTemplate("import-deal-validation-message", upload_valudation_errors.deal_description_duplicated, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));
						}, "#import-validation-error");

						return false;
					}

					$(this).attr('disabled', true);

					/*
					 * After validation checks are passed then loading is shown
					 */
					$waiting = $('<div style="display:inline-block;padding-left:5px"><small><p class="text-success"><i><span id="status-message">Please wait</span></i></p></small></div>');
					$waiting.insertAfter($('#import-cancel'));

					var properties = [];

					/*
					 * Iterates through all tbody tr's and reads the table
					 * heading from the table, push the table name as property
					 * name and value as property value as ContactField
					 * properties.
					 */
					var model = {};

					// Add Tags

					$('td.import-contact-fields').each(function(index, element)
					{

						console.log(this);
						console.log(index);
						// Empty property map (Represents
						// ContactField in contact.java)

						var property = {};

						// Read the name of the property from
						// table heading
						var select = $(this).find('select');
						console.log(select);
						var name = $(select).val();
						var type = $(select).find(":selected").attr('class') == 'CUSTOM' ? 'CUSTOM' : 'SYSTEM';
						console.log("name :" + name + ", type" + type);

						if (name.indexOf("properties_") != -1)
						{
							name = name.split("properties_")[1];
							property["type"] = type;

							// Set the value and name fields
							if (!property["value"])
								property["value"] = name;

							property["name"] = name;
							console.log(property);
							if (name.indexOf("_ignore_") != -1)
								property = {};
						}
						else
						{
							property["name"] = name;
						}

						// Push in to properties array (represents
						// ContactField array)
						properties.push(property);

					});

					model.properties = properties;

					// Shows Updating
					$waiting.find('#status-message').html(getRandomLoadingImg());

					// Represents prototype of contact, which specifies the
					// order of properties
					var Opportunity = model;

					console.log(Opportunity);

					// Sends request to save the contacts uploaded from csv,
					// present in the blobstore. Contact is sent to save
					// each row in csv file in to a contact
					$.ajax({ type : 'POST', url : "/core/api/upload/save?type=Deals&key=" + BLOB_KEY, data : JSON.stringify(Opportunity),
						contentType : "application/json", success : function(data)
						{
							// Navigate to contacts page
							// Sends empty JSON to remove
							// contact uploaded

							showNotyPopUp('information', "Deals are now being imported. You will be notified on email when it is done", "top", 5000);
							location.href = agileWindowOrigin() + "#deals";
							// Calls vefiryUploadStatus with data returned
							// from the url i.e., key of the memcache
							// verifyUploadStatus(data);
						}, });

				});

}
// Validation function for import contacts.
function importContactsValidate() 
                    {

						var upload_valudation_errors = {
							"first_name_missing" : { "error_message" : "First Name is mandatory. Please select first name." },
							"last_name_missing" : { "error_message" : "Last Name is mandatory. Please select last name." },
							"email_missing" : { "error_message" : "Email is mandatory. Please select Email." },
							"first_name_duplicate" : { "error_message" : " You have assigned First Name to more than one element. Please ensure that first name is assigned to only one element. " },
							"last_name_duplicate" : { "error_message" : "You have assigned Last Name to more than one element. Please ensure that last name is assigned to only one element." },
							"company_duplicate" : { "error_message" : "You have assigned Company to more than one element. Please ensure that company is assigned to only one element." },
							"job_title_duplicate" : { "error_message" : "You have assigned job description to more than one element. Please ensure that job description is assigned to only one element." },
							"invalid_tag" : { "error_message" : "Tag name should start with an alphabet and can not contain special characters other than underscore and space." },
							}

						var models = [];

						// Hide the alerts
						$(".import_contact_error").hide();

						// Headings validation Rammohan: 10-09-12
						/*
						 * Reads all the table heading set after importing
						 * contacts list from CSV and ensures that first_name
						 * and last_name fields are set, which are mandatory
						 * fields. Checks if duplicate table headings are set.
						 * If validations failed the error alerts a explaining
						 * the cause are shown
						 */

						var fist_name_count = 0, last_name_count = 0, emails_count = 0, company_count = 0, job_title_count = 0;
						$(".import-select").each(function(index, element)
						{
							var value = $(element).val()
							if (value == "properties_first_name")
								fist_name_count += 1;
							else if (value == "properties_last_name")
								last_name_count += 1;
							else if (value == "properties_company")
								company_count += 0;
							else if (value.indexOf("-email") != -1)
								emails_count += 1;
							else if (value == "properties_title")
								job_title_count += 1;
						})

						if (fist_name_count == 0)
						{
							getTemplate("import-contacts-validation-message", upload_valudation_errors.first_name_missing, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$("#import-validation-error").html($(template_ui));	
								initializeImportEvents($firstDiv.attr('id'));

							}, "#import-validation-error");
							
							return false;
						}
						else if (emails_count == 0)
						{
							getTemplate("import-contacts-validation-message", upload_valudation_errors.email_missing, undefined, function(template_ui){
								if(!template_ui)
									  return;

								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}
						/*
						 * else if(lastNameCount.length == 0) {
						 * $("#import-validation-error").html(getTemplate("import-contacts-validation-message",
						 * upload_valudation_errors.last_name_missing)); return
						 * false; }
						 */
						else if (fist_name_count > 1)
						{
							getTemplate("import-contacts-validation-message", upload_valudation_errors.first_name_duplicate, undefined, function(template_ui){
								if(!template_ui)
									  return;
									
								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}
						else if (last_name_count > 1)
						{
							getTemplate("import-contacts-validation-message", upload_valudation_errors.last_name_duplicate, undefined, function(template_ui){
								if(!template_ui)
									  return;
									
								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}
						else if (company_count > 1)
						{
							getTemplate("import-contacts-validation-message", upload_valudation_errors.company_duplicate, undefined, function(template_ui){
								if(!template_ui)
									  return;
									
								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}
						else if (job_title_count > 1)
						{
							getTemplate("import-contacts-validation-message", upload_valudation_errors.job_title_duplicate, undefined, function(template_ui){
								if(!template_ui)
									  return;
									
								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}

						

						var properties = [];

						/*
						 * Iterates through all tbody tr's and reads the table
						 * heading from the table, push the table name as
						 * property name and value as property value as
						 * ContactField properties.
						 */
						var model = {};

						// Add Tags
						var tags = get_tags('import-contact-tags');
						var tags_valid = true;
						if (tags != undefined)
						{
							$.each(tags[0].value, function(index, value)
							{
								if(!isValidTag(value, false)) {
									tags_valid = false;
									return false;
								}
								if (!model.tags)
									model.tags = [];

								console.log(model);

								model.tags.push(value);
							});
						}
						if(!tags_valid) {
							getTemplate("import-contacts-validation-message", upload_valudation_errors.invalid_tag, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$('#import-validation-error').html($(template_ui));	
							}, "#import-validation-error");

							return false;
						}
						return true;

					}


/**
 * Receives blobkey from the CSV upload popup after storing in blobstore, and
 * request is set to process the CSV and return first 10 contacts where user can
 * set the fields
 * 
 * @param key
 */
function parseCSV(key, type)
{

	BLOB_KEY = key;
	$("#upload_contacts").after(getRandomLoadingImg());

	$.getJSON('core/api/upload/process?blob-key=' + key, function(data)
			{
				var template;
				console.log(data);
				if (data == undefined)
					return;
				constructCustomfieldOptions(type, function(fields, el)
				{
					/*
					 * $('#custom_fields', template).each(function(index,
					 * element) { $(element).html(el); });
					 */
					data["custom_fields"] = fields.toJSON();
					var template_name = "";

					if (type == "contacts")
						  template_name = "import-contacts-2";
					else if(type == "company")
					  	  template_name = "import-companies";
					else if(type == "deals")
					  	  template_name = "import-deals2";

					
					var $firstDiv = $('#content').children().first();
					getTemplate(template_name, data, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$firstDiv.html($(template_ui));
						initializeImportEvents($firstDiv.attr('id'));
						setup_tags_typeahead();

					}, $firstDiv);					
				})

			})
			.error(
					function(response)
					{
						// Show cause of error in saving
						$save_info = $('<div style="display:inline-block;margin-left:5px"><small><p style="color:#B94A48; font-size:14px"><i>' + response.responseText + '</i></p></small></div>');

						$(".loading").remove();
						// block.
						$("#upload_contacts").after($save_info);

						// Hides the error message after 3
						// seconds
						$save_info.show().delay(3500).hide(1);
					})
}

/**
 * Loads custom fields available and creates options
 * 
 * @param callback
 */
function constructCustomfieldOptions(type, callback)
{

	var custom_fields;
	if (type == "contacts")
	{
		custom_fields = Backbone.Collection.extend({ url : 'core/api/custom-fields/byscope?scope=CONTACT' });
	}
	else if (type == "company")
	{
		custom_fields = Backbone.Collection.extend({ url : 'core/api/custom-fields/byscope?scope=COMPANY' });
	}
	else if (type == "deals")
	{
		custom_fields = Backbone.Collection.extend({ url : 'core/api/custom-fields/byscope?scope=DEAL' });
	}

	new custom_fields().fetch({ success : function(data)
	{
		var el = "";
		$.each(data.toJSON(), function(index, field)
		{
			el = el + '<option value ="' + field.field_label + '" id="' + field.field_type + '">' + field.field_label + '</option>'
		})
		if (callback && typeof (callback) === "function")
			callback(data, el);
	} });

}/**
 * Defines actions on events on imports contacts element, which does validation
 * on the import template, whether contact have first_name last_name which are
 * mandatory fields. If first naRme and last name are not specified or specified
 * same label for different fields then error message is shown and will not send
 * request to save.
 */







function initializeImportListeners(){

	$('#prefs-tabs-content #xero_sync_prefs').off();
	$('#prefs-tabs-content').on('click', '#xero_sync_prefs', function(e){
		e.preventDefault();
		var disable = $(this).attr('disabled');
		if(disable)
			return false;
		$(this).attr("disabled", "disabled");
		$(this).text("Syncing");
		
		var xeroPrefs = serializeForm("quickbook-form");
		xeroPrefs['inProgress'] = true;
		
		App_Widgets.xero_import_settings.model.set(xeroPrefs, {silent:true});
		var url = App_Widgets.xero_import_settings.model.url;

		$(this).after(getRandomLoadingImg());
		App_Widgets.xero_import_settings.model.url = url + "?sync=true"
		App_Widgets.xero_import_settings.model.save({}, {success : function(data){
		
			App_Widgets.xero_import_settings.render(true);
			App_Widgets.xero_import_settings.model.url = url;	
				show_success_message_after_save_button("Sync Initiated", App_Widgets.xero_import_settings.el);
				showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
			}});
		
	});
	

	//oauth request for xero
$('#prefs-tabs-content #xeroconnect').off();
$('#prefs-tabs-content').on('click', '#xeroconnect', function(e){
	var callbackURL = window.location.href;
	console.log(callbackURL);

	// For every request of import, it will ask to grant access
	window.location = "/scribe?service=xero&return_url=" + encodeURIComponent(callbackURL);
	return false;
});
}

function show_success_message_after_save_button(message, el)
{
	
	/*
	 * Appends success message to form
	 * actions block in form, if window
	 * option is not set for view
	 *
	 */
	$save_info = $('<div class="p-t-xs"><small><p style="color:#B94A48; font-size:14px" class="text-success"><i>'+message+'</i></p></small></div>');
	$(".form-actions", el).append($save_info);
	$save_info.show().delay(3000).hide(1);	
		
}




//Compute the edit distance between the two given strings
function getEditDistance(a, b) {
  if(a.length === 0) return b.length; 
  if(b.length === 0) return a.length; 
 
  var matrix = [];
 
  // increment along the first column of each row
  var i;
  for(i = 0; i <= b.length; i++){
    matrix[i] = [i];
  }
 
  // increment each column in the first row
  var j;
  for(j = 0; j <= a.length; j++){
    matrix[0][j] = j;
  }
 
  // Fill in the rest of the matrix
  for(i = 1; i <= b.length; i++){
    for(j = 1; j <= a.length; j++){
      if(b.charAt(i-1) == a.charAt(j-1)){
        matrix[i][j] = matrix[i-1][j-1];
      } else {
        matrix[i][j] = Math.min(matrix[i-1][j-1] + 1, // substitution
                                Math.min(matrix[i][j-1] + 1, // insertion
                                         matrix[i-1][j] + 1)); // deletion
      }
    }
  }
 
  return matrix[b.length][a.length];
};/**
 * This file is used for filters shown in lhs of contacts page.
 */

var scrambled_index = 0;
function scramble_filter_input_names(el)
{
	$(el).find("input[type=text],input[type=number]").each(function()
	{
		$(this).attr('name', 'temp-' + scrambled_index);
		$(this).attr('id', 'temp-' + scrambled_index);
		scrambled_index += 1;
	});
}

function setupLhsFilters(cel, is_company)
{
	var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
	if (is_company)
	{
		getTemplate("companies-lhs-filters", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$('#lhs_filters_conatiner', cel).html($(template_ui));

			setTimeout(function(){
				fillSelect('owner_select', '/core/api/users/partial', undefined, function()
				{
					if (!COMPANY_CUSTOM_FIELDS)
					{
						$.getJSON("core/api/custom-fields/searchable/scope?scope=COMPANY", function(fields)
						{
							COMPANY_CUSTOM_FIELDS = fields;
							loadCustomFiledsFilters(fields, cel, is_company);
							return;
						})
					}
					else
					{
						loadCustomFiledsFilters(COMPANY_CUSTOM_FIELDS, cel, is_company);
					}
				
				}, optionsTemplate, false, $('#lhs_filters_conatiner', cel));
			}, 500);

		}, $('#lhs_filters_conatiner', cel));

		

	}
	else
	{

		getTemplate("contacts-lhs-filters", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$('#lhs_filters_conatiner', cel).html($(template_ui));
			
			setTimeout(function(){
				fillSelect('owner_select', '/core/api/users/partial', undefined, function()
				{
					fillSelect('campaign_select_master', '/core/api/workflows', undefined, function()
					{
						// loading image is added to hidden select by fillselect
						// remove it manually.
						$('#campaign_select_master').next('.loading').remove();
						$('#campaign_select').html($('#campaign_select_master').html());
						if (!SEARCHABLE_CONTACT_CUSTOM_FIELDS)
						{
							$.getJSON("core/api/custom-fields/searchable/scope?scope=CONTACT", function(fields)
							{
								SEARCHABLE_CONTACT_CUSTOM_FIELDS = fields;
								loadCustomFiledsFilters(fields, cel, is_company);
								return;
							})
						}
						else
						{
							loadCustomFiledsFilters(SEARCHABLE_CONTACT_CUSTOM_FIELDS, cel, is_company);
						}
						$('[data-toggle="tooltip"]').tooltip();
						//showDynamicFilters();
					}, optionsTemplate, false, $('#lhs_filters_conatiner', cel));
				}, optionsTemplate, false, $('#lhs_filters_conatiner', cel));
			}, 500);

		}, $('#lhs_filters_conatiner', cel));

		

	}

}

function loadCustomFiledsFilters(fields, cel, is_company)
{
	getTemplate("contacts-lhs-filters-custom", fields, undefined, function(template_ui){
		if(!template_ui)
			  return;
		$('#custom-filter-fields', cel).html($(template_ui));

		// $('#custom-filter-fields', cel).find("input.date").datepicker({ format :
		// 'mm/dd/yyyy'});
		addTagsTypeaheadLhs($('#tags-lhs-filter-table', cel).find("div.lhs-contact-filter-row").find('#RHS'));
		$("input.date", cel).datepicker({ format :CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY, autoclose : true });
		// $('#custom-filter-fields', cel).find("input.date").datepicker({ format :
		// 'mm/dd/yyyy'});

		scramble_filter_input_names(cel);
		if (is_company && _agile_get_prefs('dynamic_company_filter'))
		{
			deserializeLhsFilters($('#lhs-contact-filter-form'), _agile_get_prefs('dynamic_company_filter'));
		}
		if (!is_company && _agile_get_prefs('dynamic_contact_filter'))
		{
			deserializeLhsFilters($('#lhs-contact-filter-form'), _agile_get_prefs('dynamic_contact_filter'));
		}

		$.each(fields, function()
		{
			if(this.field_type == "CONTACT")
			{
				var id = this.id;
				var fxn_display_contact = function(data, item)
				{
					if($("ul[id='in_"+id+"']", cel).find("li[data="+data+"]").length == 0)
					{
						$("ul[id='in_"+id+"']", cel)
							.append(
									'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + data + '"><a class="text-white m-r-xs" href="#contact/' + data + '">' + item + '</a><a class="close" id="remove_contact_in_lhs">&times</a></li>');
							$("#in_"+id).parent().find("input").trigger('custom_blur');
					}
				}
				agile_type_ahead($("#in_"+this.id).parent().find("input").attr("id"), cel, contacts_typeahead, fxn_display_contact, 'type=PERSON');
				var fxn_display_contact = function(data, item)
				{
					setTimeout(function(){
						$("#is_"+id).parent().find("input").attr("data", data);
						$("#is_"+id).parent().find("input").val(item);
						$("#is_"+id).parent().find("input").trigger('custom_blur');
					},10);
				}
				agile_type_ahead($("#is_"+this.id).parent().find("input").attr("id"), cel, contacts_typeahead, fxn_display_contact, 'type=PERSON');
			}
			else if(this.field_type == "COMPANY")
			{
				var id = this.id;
				var fxn_display_contact = function(data, item)
				{
					if($("ul[id='in_"+id+"']", cel).find("li[data="+data+"]").length == 0)
					{
						$("ul[id='in_"+id+"']", cel)
							.append(
									'<li class="inline-block tag btn btn-xs btn-primary m-r-xs m-b-xs" data="' + data + '"><a class="text-white m-r-xs" href="#company/' + data + '">' + item + '</a><a class="close" id="remove_contact_in_lhs">&times</a></li>');
							$("#in_"+id).parent().find("input").trigger('custom_blur');
					}
				}
				agile_type_ahead($("#in_"+this.id).parent().find("input").attr("id"), cel, contacts_typeahead, fxn_display_contact, 'type=COMPANY');
				var fxn_display_contact = function(data, item)
				{
					setTimeout(function(){
						$("#is_"+id).parent().find("input").attr("data", data);
						$("#is_"+id).parent().find("input").val(item);
						$("#is_"+id).parent().find("input").trigger('custom_blur');
					},10);
				}
				agile_type_ahead($("#is_"+this.id).parent().find("input").attr("id"), cel, contacts_typeahead, fxn_display_contact, 'type=COMPANY');
			}
		});

	}, $('#custom-filter-fields', cel));
	
}

function submitLhsFilter()
{
	$("#contacts-view-options").css( 'pointer-events', 'none' );
	var formData = serializeLhsFilters($('#lhs-contact-filter-form'))
	// erase filter cookies
	var contact_type = formData.contact_type;
	if(contact_type == 'COMPANY') {
		_agile_delete_prefs('company_filter');
		_agile_delete_prefs('dynamic_company_filter');
		if (formData != null && (formData.rules.length > 0 || formData.or_rules.length > 0))
		{
			_agile_set_prefs('dynamic_company_filter', JSON.stringify(formData));
			//_agile_set_prefs('company_filter', "Companies");
		}
		COMPANIES_HARD_RELOAD=true;
		App_Companies.companies(undefined, undefined, undefined, true);
	} else if(contact_type == 'VISITOR') {
		_agile_delete_prefs('visitor_filter');
		_agile_delete_prefs('dynamic_visitors_filter');
		if (formData != null && formData.rules.length > 0)
			_agile_set_prefs('dynamic_visitors_filter', JSON.stringify(formData));

		VISITORS_HARD_RELOAD=true;
		App_VisitorsSegmentation.visitorssegmentation(getTimeWebstats(),true);
	}else {
		
		_agile_delete_prefs('contact_filter');
		_agile_delete_prefs('contact_filter_type');
		_agile_delete_prefs('dynamic_contact_filter');
		if (formData != null && (formData.rules.length > 0 || formData.or_rules.length > 0))
			_agile_set_prefs('dynamic_contact_filter', JSON.stringify(formData));
		CONTACTS_HARD_RELOAD=true;
		App_Contacts.contacts(undefined, undefined, undefined, true);
	}
}


function contactFiltersListeners(container_id){

	$('[data-toggle="tooltip"]').tooltip();

if(!container_id)
	  container_id = 'contacts-listener-container';

$('#' + container_id).on('click', 'a.filter-multiple-add-lhs', function(e)
{
	e.preventDefault();
	var fieldName = $(this).data('name');
	var htmlContent = $('#' + fieldName + '-lhs-filter-table').find("div.hide.master-" + fieldName + "-add-div").clone();
	htmlContent.removeClass('hide').addClass("lhs-contact-filter-row");
	if (fieldName == 'tags')
	{
		addTagsTypeaheadLhs(htmlContent);
	}
	scramble_filter_input_names(htmlContent);
	$(htmlContent).appendTo('#' + fieldName + '-lhs-filter-table');
	$('#' + fieldName + '-lhs-filter-table').find("div.lhs-contact-filter-row:last").find('#RHS:visible').find(':not(input.date)').focus();
});

// Filter Contacts- Remove Multiple
$('#' + container_id).on('click', 'i.filter-tags-multiple-remove-lhs', function(e)
{
	var container = $(this).parents('.lhs-contact-filter-row');
	$(container).find('#RHS').children().val("").trigger('blur').trigger('custom_blur').trigger('change').trigger('custom_change');
	$(this).closest('div.lhs-contact-filter-row').remove();

});

// Filter Contacts- Remove Multiple
$('#' + container_id).on('click', 'a.clear-filter-condition-lhs', function(e)
{
	
	$(this).addClass('hide');
	var container = $(this).parents('.lhs-contact-filter-row');
	$(container).find('#RHS:not(.no-filter-action)').children().val("").attr('prev-val', "");
	$(container).find('#RHS').children().val("").attr('prev-val', "").attr('data', "");
	$(container).find('#RHS_NEW').filter(visibleFilter).children().val("").attr('prev-val', "");
	$(container).find('select[name="CONDITION"]').val($(container).find('select[name="CONDITION"] option:first').val()).attr('prev-val', "");
	$(container).find('select[name="CONDITION"]').trigger('change');
	$(container).find('a#lhs-filters-header').find('i').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o');
	$(container).find('a#lhs-filters-header').next().addClass('hide');
	if($(container).find('#RHS').find('ul.custom_contacts').find('li'))
	{
		$(container).find('#RHS').find('ul.custom_contacts').find('li').remove();
	}
	if($(container).find('#RHS').find('ul.custom_companies').find('li'))
	{
		$(container).find('#RHS').find('ul.custom_companies').find('li').remove();
	}
	submitLhsFilter();
});

$('#' + container_id).on('click', '#clear-lhs-contact-filters', function(e)
{
	e.preventDefault();
	console.log("clicked");

	_agile_delete_prefs('dynamic_contact_filter');
	CONTACTS_HARD_RELOAD = true;
	App_Contacts.contacts();
});

$('#' + container_id).on('click', '#clear-lhs-company-filters', function(e)
{
	e.preventDefault();
	_agile_delete_prefs('dynamic_company_filter');
	COMPANIES_HARD_RELOAD=true;
	App_Companies.companies();
});
$('#' + container_id).on('click', '#clear-lhs-segmentation-filters', function(e)
{
	e.preventDefault();
	_agile_delete_prefs('dynamic_visitors_filter');
	_agile_delete_prefs('duration');
	_agile_delete_prefs('visitor_filter');
	_agile_delete_prefs("visitor_repeat_filter");
	VISITORS_HARD_RELOAD=true;
	 App_VisitorsSegmentation.visitorssegmentation();
});

$('#' + container_id).on('click', '#lhs-filters-header', function(e)
{
	e.preventDefault();
	$(this).find('i').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o');
	$(this).next().toggleClass('hide');
	$(this).next().find('.lhs-contact-filter-row:visible').find('#RHS').filter(visibleFilter).find(':not(input.date)').focus();
});

$('#' + container_id).on('change', '#lhs-contact-filter-form select[name="CONDITION"]', function(e)
{
	var selected = $(this).val();
	if ($(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().hasClass('custom_contacts') || 
		$(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().hasClass('custom_companies'))
	{
		$(this).parent().find("div.IN").removeClass("hide");
		$(this).parent().find("div.EQUALS").addClass("hide");
		$(this).parent().find("div.EQUALS").find("input").val("").attr("data", "");
		return;
	}
	if ($(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().hasClass('custom_contact') || 
		$(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().hasClass('custom_company'))
	{
		$(this).parent().find("div.IN").addClass("hide");
		$(this).parent().find("div.EQUALS").removeClass("hide");
		if (!$(this).parent().find("div.EQUALS").find("input").val())
		{
			return;
		}
	}
	$(this).parent().find('div.condition_container').addClass('hide');
	$(this).parent().find('div.condition_container.' + selected).removeClass('hide');
	$(this).parent().find('div.condition_container.' + selected).find('#RHS :not(input.date)').focus();
	var rhs = $(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().val();
	if ($(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().hasClass('custom_contact') || 
		$(this).parent().find('div.condition_container.' + selected).find('#RHS').children().first().hasClass('custom_company'))
	{
		rhs = $(this).parent().find('div.condition_container.' + selected).find('#RHS').find('input').attr("data");
	}
	var rhs_new_exist = false;
	var rhs_new = "";
	if ($(this).parent().find('div.condition_container.' + selected).find('#RHS_NEW') != undefined)
	{
		rhs_new_exist = true;
		rhs_new = $(this).parent().find('div.condition_container.' + selected).find('#RHS_NEW').children().first().val();
	}
	if (rhs != "" && (rhs != undefined || selected == "DEFINED" || selected == "NOT_DEFINED") && (!rhs_new_exist || rhs_new != ""))
	{
		submitLhsFilter();
	}
});


$('#' + container_id).on('custom_blur keyup', '#lhs-contact-filter-form #RHS input.filters-tags-typeahead:not(.date)', function(e)
{
	console.log("I am in blur " + $(this).val());
	if (e.type == 'custom_blur' || e.type == 'focusout' || e.keyCode == '13')
	{
		var prevVal = $(this).attr('prev-val');
		var currVal = $(this).val().trim();
		if (prevVal == currVal)
		{
			return;
		}
		else
		{
			$(this).attr('prev-val', currVal);
		}
		if ($(this).parent().next().attr("id") == "RHS_NEW")
		{
			if ($(this).parent().next().find('input').val() != "" && currVal != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
		else
		{
			if (currVal == "")
			{
				var container = $(this).parents('.lhs-contact-filter-row');
				$(container).find('a.clear-filter-condition-lhs').addClass('hide');
			}
			submitLhsFilter();
			$(this).blur();
		}
	}
});

$('#' + container_id).on('custom_blur', '#lhs-contact-filter-form #RHS input.typeahead_contacts:not(.date)', function(e)
{
	console.log("I am in blur " + $(this).val());
	var prevVal = $(this).attr('prev-val');
	var currVal = $(this).val().trim();
	$(this).attr('prev-val', currVal);
	submitLhsFilter();
	$(this).blur();
});

// Filter Contacts- Remove Multiple
$('#' + container_id).on('click', '#remove_contact_in_lhs', function(e)
{
	$(this).parent().remove();
	submitLhsFilter();
});

$('#' + container_id).on('blur keyup', '#lhs-contact-filter-form #RHS input:not(.date,.filters-tags-typeahead,.typeahead_contacts)', function(e)
{   
	if(!$('#lhs_filters_segmentation #error-message').hasClass("hide")){$('#lhs_filters_segmentation #error-message').addClass("hide");}
	console.log("I am in blur " + $(this).val());
	if (e.type == 'focusout' || e.keyCode == '13')
	{
		var prevVal = $(this).attr('prev-val');
		var currVal = $(this).val().trim();
		if (prevVal == currVal)
		{
			return;
		}
		else
		{
			$(this).attr('prev-val', currVal);
		}
		if ($(this).parent().next().attr("id") == "RHS_NEW")
		{
			if ($(this).parent().next().find('input').val() != "" && currVal != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
		else
		{
			if (currVal == "")
			{
				var container = $(this).parents('.lhs-contact-filter-row');
				$(container).find('a.clear-filter-condition-lhs').addClass('hide');
			}
			submitLhsFilter();
			$(this).blur();
		}
	}
});

$('#' + container_id).on('change keyup', '#lhs-contact-filter-form #RHS input.date', function(e)
{
	if (e.type == 'change' || e.keyCode == '13')
	{
		var prevVal = $(this).attr('prev-val');
		var currVal = $(this).val().trim();
		if (prevVal == currVal)
		{
			return;
		}
		else
		{
			$(this).attr('prev-val', currVal);
		}
		if ($(this).parent().next().attr("id") == "RHS_NEW")
		{
			if ($(this).parent().next().find('input').val() != "" && currVal != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
		else
		{
			if (currVal == "")
			{
				var container = $(this).parents('.lhs-contact-filter-row');
				$(container).find('a.clear-filter-condition-lhs').addClass('hide');
			}
			submitLhsFilter();
			$(this).blur();
		}
	}
});

$('#' + container_id).on('change', '#lhs-contact-filter-form #RHS select', function(e)
{
	if ($(this).parent().next().attr("id") == "RHS_NEW")
	{
		if ($(this).val() != "" && $(this).parent().next().children().val() != "")
		{
			submitLhsFilter();
		}
		if ($(this).val() == "" && $(this).parent().next().children().val() == "")
		{
			var container = $(this).parents('.lhs-contact-filter-row');
			$(container).find('a.clear-filter-condition-lhs').addClass('hide');
			submitLhsFilter();
		}
	}
	else
	{
		var prevVal = $(this).attr('prev-val');
		var currVal = $(this).val().trim();
		if (prevVal == currVal)
		{
			return;
		}
		else
		{
			$(this).attr('prev-val', currVal);
		}
		if ($(this).val() == "")
		{
			var container = $(this).parents('.lhs-contact-filter-row');
			$(container).find('a.clear-filter-condition-lhs').addClass('hide');
		}
		submitLhsFilter();
	}
	$(this).blur();
});

$('#' + container_id).on('change', '#lhs-contact-filter-form #RHS_NEW select', function(e)
{
	if ($(this).parent().prev().attr("id") == "RHS")
	{
		if ($(this).val() != "" && $(this).parent().prev().children().val() != "")
		{
			submitLhsFilter();
		}
		if ($(this).val() == "" && $(this).parent().prev().children().val() == "")
		{
			submitLhsFilter();
		}
	}
	else
	{
		submitLhsFilter();
	}
	$(this).blur();
});

$('#' + container_id).on('blur keyup', '#lhs-contact-filter-form #RHS_NEW input:not(.date)', function(e)
{
	if (e.type == 'focusout' || e.keyCode == '13')
	{
		var prevVal = $(this).attr('prev-val');
		var currVal = $(this).val().trim();
		if (prevVal == currVal)
		{
			return;
		}
		else
		{
			$(this).attr('prev-val', currVal);
		}
		if ($(this).parent().prev().attr("id") == "RHS")
		{
			if ($(this).parent().prev().find('input').val() != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
		else
		{
			if (currVal != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
	}
});

$('#' + container_id).on('change keyup', '#lhs-contact-filter-form #RHS_NEW input.date', function(e)
{
	if (e.type == 'change' || e.keyCode == '13')
	{
		var prevVal = $(this).attr('prev-val');
		var currVal = $(this).val().trim();
		if (prevVal == currVal)
		{
			return;
		}
		else
		{
			$(this).attr('prev-val', currVal);
		}
		if ($(this).parent().prev().attr("id") == "RHS")
		{
			if ($(this).parent().prev().find('input').val() != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
		else
		{
			if (currVal != "")
			{
				submitLhsFilter();
				$(this).blur();
			}
		}
	}
});


     $('#' + container_id).on('click', '#contacts-left-filters-toggle', function(e)
		{
			e.preventDefault();

			if ($('#contacts-lhs-filters-toggle').is(':visible'))
			{
				$('#contacts-lhs-filters-toggle').hide("slow");
				_agile_set_prefs(CONTACTS_DYNAMIC_FILTER_COOKIE_STATUS, "hide");
			}
			else
			{
				$('#contacts-lhs-filters-toggle').show("slow");
				_agile_set_prefs(CONTACTS_DYNAMIC_FILTER_COOKIE_STATUS, "show");
			}

		});

    $("body").off("click", "#companies-left-filters-toggle");
 	$('body').on('click', '#companies-left-filters-toggle', function(e)
		{

			e.preventDefault();

			if ($('#companies-lhs-filters-toggle').is(':visible'))
			{
				$('#companies-lhs-filters-toggle').hide("slow");
				_agile_set_prefs('companiesFilterStatus','display:none');
				e.preventDefault();
			}
			else
			{
				$('#companies-lhs-filters-toggle').show("slow");
				_agile_set_prefs('companiesFilterStatus','');
				e.preventDefault();
			}

		});
 	$("body").off("click", "#segmentation-left-filters-toggle");
 	$('body').on('click', '#segmentation-left-filters-toggle', function(e)
		{

			e.preventDefault();

			if ($('#segmentation-lhs-filters-toggle').is(':visible'))
			{
				$('#segmentation-lhs-filters-toggle').hide();
				_agile_set_prefs('segmentationFilterStatus','display:none');
				e.preventDefault();
			}
			else
			{
				$('#segmentation-lhs-filters-toggle').show();
				_agile_set_prefs('segmentationFilterStatus','');
				e.preventDefault();
			}

		});
     	


      $('#' + container_id).on('click', '.contacts-view', function(e)
    		{
				e.preventDefault();

    				var data=$(this).attr("data");
    				if(data=="list"){
    					CONTACTS_HARD_RELOAD=true;
    					_agile_delete_prefs("agile_contact_view");
    				}
    				else if(data=="grid"){
    					_agile_set_prefs("agile_contact_view","grid-view");
    					CONTACTS_HARD_RELOAD=true;
    				}
    				if(window.location.hash.indexOf("tags")==1){
    					App_Contacts.contacts(window.location.hash.substr(window.location.hash.lastIndexOf("/")+1));
    					return;
    				}
    				App_Contacts.contacts();
    	   });

    $('#' + container_id).on('click', '#save-segment-filter', function(e)
            {
            	if(!_agile_get_prefs("dynamic_visitors_filter") && !_agile_get_prefs("visitor_filter")){
            		$('#error-message').removeClass('hide'); 
            		return;
            	}
                e.preventDefault();
                var segmentView = new Base_Model_View({
                template : "segment-save-filter-modal",
                url : '/core/api/web-stats/filters',
                postRenderCallback: function(
                                el, collection) {
                  
                   addModalEvent("segmentsModal",collection);
                    if(!collection[0]){ 
                   	$("#saveSegmentFilterForm .choose-segment-filter").prop("disabled",true);
               		$("#saveSegmentFilterForm .replace-segment label").css('cursor','default');
               		$("#saveSegmentFilterForm .replace-segment label").css('color','grey');

               		}           

                 },

                saveCallback: function(model){

                    $('#segmentsModal').modal('hide');                   
                    setupSegmentFilterList('',model.id);
                    $('body').removeClass('modal-open').animate({ scrollTop: 0 }, "slow");
                },
                prePersist : function(model)
                {
                    var json = {};
                    if(_agile_get_prefs("dynamic_visitors_filter"))
                    	json.segmentConditions=_agile_get_prefs("dynamic_visitors_filter").toString();
                    else if(_agile_get_prefs("visitor_filter")){
                    	json.filter_id=_agile_get_prefs("visitor_filter");
                    	_agile_set_prefs("visitor_repeat_filter",true);
                    }
                    var formJSON = model.toJSON();

                    if(formJSON['save-type'] == 'replace'){
                        json.id = $('[name="filter-collection"]').val();
                        if(model.attributes.name == '')
                        	model.attributes.name=$('[name="filter-collection"]').find('option:selected').text();

                    }

                    model.set(json, { silent : true });
                }                       
                            
            });         

            $('#segmentsModal').html(segmentView.render().el).modal('show');
            
        });
	$('#content').on('change',"#tags-filter" , function() {
	  	if(this.value == "DEFINED" || this.value == "NOT_DEFINED" ){
	  		$(this).parent().removeAttr("style");
	  	}else
	  		$(this).parent().css("min-height","90px");

	});

}
/**
 * Added tags typeahead on fields
 * 
 * @param element
 */
function addTagsTypeaheadLhs(element)
{
	var tags_array = [];

	// 'TAGS' are saved in global variable when they are fetched to show stats
	// in contacts page. If it is undefined, tags are fetched from DB an then
	// type ahead is built
	if (!TAGS)
	{
		var TagsCollection = Backbone.Collection.extend({ url : '/core/api/tags', sortKey : 'tag' });

		tagsCollection = new TagsCollection();

		tagsCollection.fetch({ success : function(data)
		{
			TAGS = tagsCollection.models;
			addTagsTypeaheadLhsFilters(tagsCollection.toJSON(), element);

		} });
		return;
	}

	// Adds typeahead to given element
	addTagsTypeaheadLhsFilters(tagsCollection.toJSON(), element);
}

// With tags JSON sent type ahead is built on input fields
function addTagsTypeaheadLhsFilters(tagsJSON, element)
{
	var tags_array = [];

	$.each(tagsJSON, function(index, element)
	{
		if ($.inArray(element.tag.toString(), tags_array) == -1)
		{
			tags_array.push(element.tag.toString());
		}
	});

	// $("input", element).attr("data-provide","typeahead");
	$("input", element).typeahead({ "source" : tags_array, updater : function(item)
	{
		console.log("I am in updater " + item);
		this.$element.val(item);
		this.$element.trigger('custom_blur');
		this.hide();
		return item;
	} }).attr('placeholder', "Enter Tag");
}

function bindChangeEvent(ele){

	console.log("I am in change " + $(ele).val());
	var prevVal = $(ele).attr('prev-val');
	var currVal = $(ele).val().trim();
	if (prevVal == currVal)
	{
		return;
	}
	else
	{
		$(ele).attr('prev-val', currVal);
	}
	if ($(ele).parent().next().attr("id") == "RHS_NEW")
	{
		if ($(ele).parent().next().find('input').val() != "" && currVal != "")
		{
			submitLhsFilter();
			// $(ele).blur();
		}
	}
	else
	{
		if (currVal == "")
		{
			var container = $(ele).parents('.lhs-contact-filter-row');
			$(container).find('a.clear-filter-condition-lhs').addClass('hide');
		}
		submitLhsFilter();
		// $(ele).blur();
	}


}

//for segmentation lhs filters
 function setupAnalyticsLhsFilters (cel){   
	
		getTemplate("segmentation-lhs-filters", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$('#lhs_filters_segmentation', cel).html($(template_ui));
			$("input.date", cel).datepicker({ format :CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY, autoclose : true });
			 setTimeout(function() {
			if(_agile_get_prefs('dynamic_visitors_filter')!=null)	
				deserializeLhsFilters($('#lhs-contact-filter-form'), _agile_get_prefs('dynamic_visitors_filter'));
			
			if(_agile_get_prefs('duration')!=null)
    			deserializeRhsFilters(_agile_get_prefs('duration'));
    		},500)
   
			initWebstatsDateRange();
									
		}, $('#lhs_filters_segmentation', cel));
  }

function displayTimeZone(results)
{
	console.log("In displayTimeZone");
		
	var latitude;
	var longitude;
	var i = 0;
	$.each(results[0].geometry.location, function(idx, obj) {
		console.log(obj);
		if(i==0)
		  latitude = obj;
		else if(i==1) 
		  longitude = obj;
		i++;
	});

	if(!latitude || !longitude)
		return;
	
	$.ajax({ 
		url : "/core/api/contacts/gettz/" + latitude() + "/" + longitude(), 
		type : 'GET', 
		dataType : 'text', 
		success : function(data)
	   {
		if (data == null || data == "")
			return;

		$(".contacts-time").html("Local time: "+data);
		$("#contacts-local-time").show();
		$("#map_view_action").html("<i class='icon-minus text-sm c-p' title='Hide map' id='disable_map_view'></i>");

	   }, error : function(jqXHR, textStatus, errorThrown)
	   {
		console.log("jqXHR: " + jqXHR.status + "\ntextStatus: " + textStatus + "\nerrorThrown: " + errorThrown);
	   } 
	   });
}
/**
 * contactTableView is customized function (customization of appendedItem

 * function in Base_Collection_View), when custom view is selected, this
 * function is called whenever a new contact is added or contact list is fetched
 * (called on each contact model from Base_collection_View render function) .
 * when a custom view is selected then collection view is initialized with
 * modelData option for view is "custom view" object, since model data is custom
 * view object, it includes fields_set which defines the order of the files
 * (first_name, last_name, job title, organization..etc). This function iterates
 * through fields_set in CustomView object and loads the template according to
 * the field (Template are set for each field with name 'contacts-custom-view-' +
 * field name) and creates a view model template which is appended to collection
 * template.
 * 
 * @param base_model
 */
var CURRENT_VIEW_OBJECT;
var CONTACTS_SORT_LIST={"created_time":"Created Date","lead_score":"Score","star_value":"Star Value","first_name":"First Name","last_name":"Last Name","last_contacted":"Contacted Date",}


var ifFromRender=false;
function contactTableView(base_model,customDatefields,view,customContactfields,customCompanyfields) {
	
	var templateKey = 'contacts-custom-view-model';
	var gridViewEl = _agile_get_prefs("agile_contact_view");
	if (gridViewEl) {
		templateKey = 'contacts-grid';
	}

	// if(agile_is_mobile_browser())


	// Creates list view for
	var itemView = new Base_List_View({
		model : base_model,
		template : templateKey,
		tagName : view.options.individual_tag_name
	});


	itemView.model.unbind('change')
	itemView.renderRow = function(el, isFromRender)
	{
	// Reads the modelData (customView object)
	var modelData = view.options.modelData;

	// Reads fields_set from modelData
	var fields = modelData['fields_set'];

	// Converts base_model (contact) in to JSON
	var contact = base_model.toJSON();
	var el = itemView.el;

	if (!gridViewEl || window.location.hash=="#companies") {

		if(agile_is_mobile_browser()){

			getTemplate('contacts-custom-view-basic_info-mobile', contact, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$(el).append($(template_ui));
					}, null);

		}else {
				// Clears the template, because all the fields are appended, has to be reset
				// for each contact
				// $('#contacts-custom-view-model-template').empty();
				
				// Iterates through, each field name and appends the field according to
				// order of the fields
				if(isFromRender!=true)
					$(el).html($(el).find('td').first());
				$.each(fields, function(index, field_name) {
					if(field_name.indexOf("CUSTOM_") != -1)
					{
						field_name = field_name.split("CUSTOM_")[1]; 			
						var property = getProperty(contact.properties, field_name);
						var json = {};
						if(!property)
						{
							json.id = contact.id;
							getTemplate('contacts-custom-view-custom', json, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$(el).append($(template_ui));
							}, null);
							return;
						}
						if(isDateCustomField(customDatefields,property)){
							console.log('got true');
							json = property;
							json.id = contact.id;
							getTemplate('contacts-custom-view-custom-date', json, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$(el).append($(template_ui));
							}, null);
						}
						else if(isContactTypeCustomField(customContactfields,property)){
							var contactIdsJSON = JSON.parse(property.value);
							var referenceContactIds = "";
							$.each(contactIdsJSON, function(index, val){
								referenceContactIds += val+",";
							});
							App_Contacts.referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });
							getTemplate('contacts-custom-view-custom-contact', {}, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$(el).append($(template_ui).attr("contact_id", contact.id));
							}, null);
							App_Contacts.referenceContactsCollection.collection.fetch({
								success : function(data){
									if (data && data.length > 0)
									{
										getTemplate('contacts-custom-view-custom-contact', data.toJSON(), undefined, function(template_ui){
											if(!template_ui)
												  return;
											$(el).find("td[contact_id="+contact.id+"]").html($(template_ui).html());
											var ellipsis_required = false;
											$(el).find("td[contact_id="+contact.id+"]").find(".contact-type-image").each(function(index, val){
												if(index > 3)
												{
													ellipsis_required = true;
													$(this).remove();
												}
											});
											if(ellipsis_required)
											{
												$(el).find("td[contact_id="+contact.id+"]").find("div:first").append("<div class='m-t' style='font-size:20px;'>...</div>");
											}
										}, null);
									}
									hideTransitionBar();
								}
							});
						}
						else if(isCompanyTypeCustomField(customCompanyfields,property)){
							var contactIdsJSON = JSON.parse(property.value);
							var referenceContactIds = "";
							$.each(contactIdsJSON, function(index, val){
								referenceContactIds += val+",";
							});
							App_Contacts.referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });
							getTemplate('contacts-custom-view-custom-company', {}, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$(el).append($(template_ui).attr("company_id", contact.id));
							}, null);
							App_Contacts.referenceContactsCollection.collection.fetch({
								success : function(data){
									if (data && data.length > 0)
									{
										getTemplate('contacts-custom-view-custom-company', data.toJSON(), undefined, function(template_ui){
											if(!template_ui)
												  return;
											$(el).find("td[company_id="+contact.id+"]").html($(template_ui).html());
											var ellipsis_required = false;
											$(el).find("td[company_id="+contact.id+"]").find(".company-type-image").each(function(index, val){
												if(index > 3)
												{
													ellipsis_required = true;
													$(this).remove();
												}
											});
											if(ellipsis_required)
											{
												$(el).find("td[company_id="+contact.id+"]").find("div:first").append("<div class='m-t' style='font-size:20px;'>...</div>");
											}
										}, null);
									}
									hideTransitionBar();
								}
							});
						}
						else
						{
							json = property;
							json.id = contact.id;
							getTemplate('contacts-custom-view-custom', json, undefined, function(template_ui){
								if(!template_ui)
									  return;
								$(el).append($(template_ui));
							}, null);
							
						}
						return;
					}
					
					getTemplate('contacts-custom-view-' + field_name, contact, undefined, function(template_ui){
						if(!template_ui)
							  return;

						
						$(el).append($(template_ui));
					}, null);
				});

		}
	
		

	} else  {
		getTemplate('contacts-grid-model', contact, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$(el).append($(template_ui));
			}, null);
	}
				
	
	//contactListener();
	}
	itemView.render = function(el)
	{
		isFromRender=true;
		this.renderRow(el,isFromRender);
	}

	itemView.model.bind('change', itemView.renderRow, itemView);
	itemView.render();
	// Appends model to model-list template in collection template
	$(('#'+view.options.templateKey+'-model-list'), view.el).append(itemView.el);

	// Sets data to tr
	$(('#'+view.options.templateKey+'-model-list'), view.el).find('tr:last').data(
			base_model);
	$(('#'+view.options.templateKey+'-model-list'), view.el).find('tr:last').data();
	var c  = $(("#" + view.options.templateKey + "-model-list"), view.el).closest('table').find("tr:first").find("th:first").text()
	if(c == "Basic info")
	{
		$(("#" + view.options.templateKey + "-model-list"), view.el).closest('table').removeClass("contactsimage");
		$(("#" + view.options.templateKey + "-model-list"), view.el).closest('table').addClass("contactsimage");
	}

}

// Check whether the given fields list has the property name.
function isDateCustomField(customDatefields,property){
	var count = 0;
	$.each(customDatefields,function(index,field){
		if(field.field_label==property.name)
			count++;
	});
	return count>0;
}

/**
 * Gets the list of custom fields saved by the user, and shown in the Html
 * element with "view-list" in the Html element sent to this method. It fetches
 * the list of custom fields and on rendering the collection unordered list of
 * created and appended in view-list element in contacts page. If custom view
 * selected from the list, this function is called with button name from the
 * customView function, which is set on the list button.
 * 
 * @param cel
 *            html element
 * @param button_name
 *            name of the button (name of the view)
 */
function setupViews(cel, button_name) {

	// Creates a view for custom views
	/*head.load(CSS_PATH + 'css/bootstrap_submenu.css',  function()
	{*/
		getTemplate("contact-view-collection", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			
			var el = $(template_ui);
			$("#view-list", cel).html(el);
			
			// If button_name is defined, then view is selected then the name of
			// the view is show in the custom view button.
			if (button_name)
				$("#view-list", cel).find('.custom_view').append(button_name);
			

			//updates the selected sort item to bold
			//updateSelectedSortKey($(".contacts-toolbar", cel));
			//addClickEventsForSorting($("#view-list", cel));
			if(_agile_get_prefs('company_filter') || _agile_get_prefs('contact_filter_type') == 'COMPANY')
			{
				$('#contact-view-model-list>li').css('display','none');
				$('#contact-view-model-list>li:first').css('display','list-item');
			}

		}, $("#view-list", cel));

		setUpContactSortFilters(cel);
	// });
}


var COMPANY_CUSTOM_SORT_VIEW = undefined;
function setUpCompanySortFilters(el)
{
	if(COMPANY_CUSTOM_SORT_VIEW)
	{
		$("#contact-sorter", el).html(COMPANY_CUSTOM_SORT_VIEW.render(true).el);
		//CUSTOM_SORT_VIEW.init();
		//CUSTOM_SORT_VIEW.preSelectFields();
		return;	
	}

	var view = COMPANY_SORT_FIELDS_VIEW.view();
	COMPANY_CUSTOM_SORT_VIEW = new view ({
		data : sort_company_configuration.getCompanySortableFields(),
		templateKey : "contact-view-sort",
		sortPrefsName : "company_sort_field",
		individual_tag_name : "li",
		sort_collection : false,
		postRenderCallback: function(el)
		{
			COMPANY_CUSTOM_SORT_VIEW.postProcess();
		}
	});

	
	COMPANY_CUSTOM_SORT_VIEW.init();
	$("#contact-sorter", el).html(COMPANY_CUSTOM_SORT_VIEW.render(true).el);
	

	getSearchableCustomFields("COMPANY", function(data){
		COMPANY_CUSTOM_SORT_VIEW.addAll(data);
	})
	
}

var CUSTOM_SORT_VIEW = undefined;
function setUpContactSortFilters(el)
{
	if(CUSTOM_SORT_VIEW)
	{
		$("#contact-sorter", el).html(CUSTOM_SORT_VIEW.render(true).el);
		//CUSTOM_SORT_VIEW.init();
		//CUSTOM_SORT_VIEW.preSelectFields();
		return;	
	}

	var view = CONTACT_SORT_FIELDS_VIEW.view();
	CUSTOM_SORT_VIEW = new view ({
		data : sort_configuration.getContactSortableFields(),
		templateKey : "contact-view-sort",
		sortPrefsName : "sort_by_name",
		individual_tag_name : "li",
		sort_collection : false,
		postRenderCallback: function(el)
		{
			CUSTOM_SORT_VIEW.postProcess();
		}
	});

	
	CUSTOM_SORT_VIEW.init();
	$("#contact-sorter", el).html(CUSTOM_SORT_VIEW.render(true).el);
	

	getSearchableCustomFields("CONTACT", function(data){
		CUSTOM_SORT_VIEW.addAll(data);
	})
	
}

function setUpCompanyFields(el)
{
	var companyfields = [] ; 
	$('#companies-static-fields-group', el).html(getTemplate("companies-custom-fields"));
	$.ajax({ type : 'GET', url : '/core/api/custom-fields/', contentType : "application/json; charset=utf-8",
				success : function(data)
				{
					console.log(data)
					for(var i=0 ; i<data.length ;i++)
					{
						if(data[i].scope == 'COMPANY')
						{
						getTemplate("companies-custom-fields-append", data[i], undefined, function(template_ui){
     							if(!template_ui)
    					  		return;
    						$("#custom-fields-group",el).append(template_ui);

 							});
						}

					}
					$.ajax({
					url : 'core/api/contact-view-prefs/company',
					type : 'GET',
					dataType : 'json',
					
					success : function(data)
						{
						var customfields = $("#companies-static-fields");
						deserializecontactsForm(data.fields_set, customfields);
						console.log(data);
					}
				});
				}, dataType : 'json' });

			


}

function addCustomFieldToSearch(base_model, scope)
{
	var sort_view;
	if(scope == "COMPANY"){
		sort_view = COMPANY_CUSTOM_SORT_VIEW;
	}else{
		sort_view = CUSTOM_SORT_VIEW;
	}

	if(!sort_view)
		return;

	if(!base_model)
		return;

	if(!base_model.get("searchable"))
		return;

	sort_view.collection.add(base_model);
}

function updateCustomFieldToSearch(base_model, scope)
{
	var sort_view;
	if(scope == "COMPANY"){
		sort_view = COMPANY_CUSTOM_SORT_VIEW;
	}else{
		sort_view = CUSTOM_SORT_VIEW;
	}

	if(!sort_view)
		return;

	if(!base_model)
		return;

	var searchable  = base_model.get("searchable");

	if(searchable){
		addCustomFieldToSearch(base_model, scope);
	}else{
		removeCustomFieldFromSortOptions(base_model, scope);
	}
}

function removeCustomFieldFromSortOptions(base_model, scope)
{
	var sort_view;
	if(scope == "COMPANY"){
		sort_view = COMPANY_CUSTOM_SORT_VIEW;
	}else{
		sort_view = CUSTOM_SORT_VIEW;
	}
	
	if(!base_model)
		return;

	// if(!base_model.get("searchable"))
	// 	return;

	if(!sort_view)
		return;
	
	var model = sort_view.collection.get(base_model.get('id'));

	if(model){
		sort_view.collection.remove(base_model.get('id'));
		sort_view.render(true);
		// if(scope == "COMPANY"){
		// 	var selectedCompanyFilter = _agile_get_prefs('company_sort_field');
		// 	var currentField = model.attributes.search_key + "_AGILE_CUSTOM_"+ model.attributes.field_type;
		// 	if(selectedCompanyFilter == selectedCompanyFilter){
		// 		_agile_set_prefs('company_sort_field', "-created_time");
		// 	}
		// }
		
	}
}

function getSearchableCustomFields(scope, callback)
{
	if(!scope)
	  scope = "CONTACT";

	$.getJSON("core/api/custom-fields/searchable/scope?scope=" + scope, function(data){
		if(callback && typeof callback === 'function')
			callback(data);
	});
}

function updateSelectedSortKey(el) {
	var sort_key = _agile_get_prefs("sort_by_name");
	$('.sort-field-check').addClass('display-none');
	$('.sort-by-check').addClass('display-none');
	if(sort_key && sort_key != null) {
		var sort = sort_key.split("-")
		if(sort[0] == "")
			$(".sort-by[data='-']").find('i').removeClass('display-none');
		else
			$(".sort-by[data='']").find('i').removeClass('display-none');
		if(sort.length > 1)
			sort_key = sort[1];
		$(".sort-field[data='"+sort_key+"']").find('i').removeClass('display-none');
		printSortNameByData(sort_key);
		
	}else{
		$(".sort-by[data='']").find('i').removeClass('display-none');
		$(".sort-field[data='created_time']").find('i').removeClass('display-none');
		printSortNameByData('created_time');
	}
}

function printSortNameByData(data){
	 $(".contacts-toolbar").find(".sort-field-txt").html(CONTACTS_SORT_LIST[data]);
}

	function addClickEventsForSorting(el) {
		// Fetch sort result without changing route on click
		$('.contacts-toolbar').on('click', 'a.sort-field', function(e){
			e.preventDefault();
			// Gets name of the attribut to sort, which is set as data
			// attribute in the link
			var sort_field = $(this).attr('data');
			printSortNameByData(sort_field);
			var sort_key = _agile_get_prefs('sort_by_name');
			if(sort_key != undefined && sort_key != null && sort_key[0] == "-")
				sort_field = "-"+sort_field;
			_agile_set_prefs('sort_by_name', sort_field);
			
			CONTACTS_HARD_RELOAD=true;
			// If filter is not set then show view on the default contacts
			// list
			if(!App_Contacts.tag_id)
			{
				App_Contacts.contacts(undefined, undefined, undefined, true);
				return;
			}
			
			// If tag filter is applied send tags fetch url and tag_id, which is tobe shown on contacts table.
			App_Contacts.contacts(App_Contacts.tag_id, undefined, undefined, true);
			return;
			
		});

		$('.contacts-toolbar').on('click', 'a.sort-by', function(e){
			e.preventDefault();


			var sort_by = $(this).attr("data");
			var sort_field = _agile_get_prefs('sort_by_name');
			if(sort_field == null || sort_field == undefined)
				sort_field = "created_time";
			if(sort_field[0] == "-")
				sort_field = sort_field.slice(1);
			_agile_set_prefs('sort_by_name', sort_by+sort_field);
			
			CONTACTS_HARD_RELOAD=true;
			// If filter is not set then show view on the default contacts
			// list
			if(!App_Contacts.tag_id)
			{
				App_Contacts.contacts(undefined, undefined, undefined, true);
				return;
			}
			
			// If tag filter is applied send tags fetch url and tag_id, which is tobe shown on contacts table.
			App_Contacts.contacts(App_Contacts.tag_id, undefined, undefined, true);
			return;

			
		});


		/*$(el).find('.sort').on("click", function(e)
		{

			e.preventDefault();
			_agile_delete_prefs('sort_by_name');

			// Gets name of the attribut to sort, which is set as data
			// attribute in the link
			sort_by = $(this).attr('data');
			
			// Saves Sort By in cookie
			_agile_set_prefs('sort_by_name', sort_by);
			$('.sort').removeClass('bold-text');
			$(this).addClass('bold-text');

			CONTACTS_HARD_RELOAD=true;
			// If filter is not set then show view on the default contacts
			// list
			if(!App_Contacts.tag_id)
			{
				App_Contacts.contacts(undefined, undefined, undefined, true);
				return;
			}
			
			// If tag filter is applied send tags fetch url and tag_id, which is tobe shown on contacts table.
			App_Contacts.contacts(App_Contacts.tag_id, undefined, undefined, true);
			return;
		});*/

	}

/**
 * Init function to define actions on events on the custom view list
 * 
 */
$(function() {

	/*
	 * If any custom view is selected, sets the cookie saves the id of the
	 * custom view, to show custom view even after refreshing. Also Load the
	 * contacts with custom view by reading the custom view id from the element
	 * which is selected and calls customView function is called to to custom
	 * view of contacts
	 */
	$('body').on('click', '.ContactView', function(e){

				e.preventDefault();
				
				if(App_Contacts.contactViewModel)
					App_Contacts.contactViewModel = undefined;

				if(App_Contacts.contact_custom_view)
					App_Contacts.contact_custom_view = undefined;
				
				// Gets id of the view
				var id = $(this).attr('id');

				// Saves contact_view id as cookie, so on refreshing shows the
				// custom view based on the cookie, and cookie deleted if
				// default view is selected
				_agile_set_prefs("contact_view", id);

				/*
				 * Even when custom view is selected, have to check if user sets
				 * any filter so custom view should be shown on the filter
				 * results instead of showing view on default contacts, so if
				 * contact_filter cookie is set the sets the url to filter with
				 * filter id from cookie, then results are fetched from custom
				 * views
				 */
				if (filter_id = _agile_get_prefs('contact_filter')) {
					App_Contacts.customView(id, undefined,
							'core/api/filters/query/' + filter_id);
					return;
				}
				
				if(_agile_get_prefs('company_filter'))
      			{
					//App_Contacts.customView(_agile_get_prefs("contact_view"), undefined, "core/api/contacts/companies")
      				App_Contacts.contacts();
					return;
      			}

				// If filter is not set then show view on the default contacts
				// list
				if(!App_Contacts.tag_id)
				{
					App_Contacts.customView(id);
					return;
				}
				
				// If tag filter is applied send tags fetch url and tag_id, which is tobe shown on contacts table.
				App_Contacts.customView(id, undefined, 'core/api/tags/' + App_Contacts.tag_id, App_Contacts.tag_id);
				
			});

	// If default view is selected, contacts are loaded with default view and
	// removes the view cookie set when view is selected
	$('body').on('click', '.DefaultView', function(e){
		e.preventDefault();
		
		if(company_util.isCompany())
			return;

		// Erases the cookie
		_agile_delete_prefs("contact_view");
		_agile_delete_prefs("agile_contact_view");
		
		// Undefines current global view object
		if(App_Contacts.contactViewModel)
		App_Contacts.contactViewModel = undefined;

		if(App_Contacts.contactsListView)
			App_Contacts.contactsListView = undefined;
		
		// If filter is not set then show view on the default contacts
		// list
		if(!App_Contacts.tag_id)
		{
			App_Contacts.contacts();
			return;
		}
		
		// If tag filter is applied send tags fetch url and tag_id, which is tobe shown on contacts table.
		App_Contacts.contacts(App_Contacts.tag_id);

	});
	
	// If grid view is selected, contacts are loaded with grid view and
	// creates the grid view cookie 
	$('body').on('click', '.GridView', function(e){
		e.preventDefault();
		
		// Erases the cookie
		_agile_delete_prefs("contact_view");
		// Creates the cookie
		_agile_set_prefs("agile_contact_view", "grid_view");
		
		if(App_Contacts.contactsListView)
			App_Contacts.contactsListView = undefined;

		// Loads the contacts
		App_Contacts.contacts(undefined, undefined, true);


	});


});

// Check whether the given fields list has the property name.
function isContactTypeCustomField(customContactfields,property){
	var count = 0;
	$.each(customContactfields,function(index,field){
		if(field.field_label==property.name && field.field_type == "CONTACT")
			count++;
	});
	return count>0;
}
// Check whether the given fields list has the property name.
function isCompanyTypeCustomField(customCompanyfields,property){
	var count = 0;
	$.each(customCompanyfields,function(index,field){
		if(field.field_label==property.name && field.field_type == "COMPANY")
			count++;
	});
	return count>0;
}
$(function()
{
				$('body').on('click', '#freshbooks', function(e)
				{
								e.preventDefault();
								var url = $('#freshbooks_url').val();
								var token = $('#freshbooks_apiKey').val();
								if (isBlank(url))
								{
												// alert("Please Enter Freshbooks Domain Name");
												$("#domainerror").removeClass('hide');
												$("#freshbooks_url").focus();
												$("#freshbooks_url").keypress(function(){
																$("#domainerror").addClass('hide');
												});
												return false;
								}
								else if (new RegExp("([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?").test(url))
								{
												showAlertModal("freshbook_domain_error", undefined, function(){
													$("#domainerror").removeClass('hide');
													$("#freshbooks_url").focus();
													$("#freshbooks_url").keypress(function(){
																	$("#domainerror").addClass('hide');
													});
										
												});
												return false;		
								}

								if (isBlank(token))
								{
												$("#apierror").removeClass('hide');
												$('#freshbooks_apiKey').focus();
												$("#freshbooks_apiKey").keypress(function(){
																$("#apierror").addClass('hide');
												});
												return false;
								}else if(token.length !=32){
												$("#apierror").removeClass('hide');
												$('#freshbooks_apiKey').focus();
												$("#freshbooks_apiKey").keypress(function(){
																$("#apierror").addClass('hide');
												});
												return false;
								}
								$.ajax({ 
									url : 'core/api/freshbooks/save/' + token + '/' + url + '', 
									success : function(data) {
												if (data)
												{
													console.log(data);
												}
									   
												var location = window.location.hash;
												if ( location == "#sync/freshbooks/setting" )
												{
													window.location.reload();
												} else if( location == "#sync/freshbooks" ) {
													DATA_SYNC_FORCE_FETCH=true;
													window.location = agileWindowOrigin() + "#sync/freshbooks/setting";
												} else {
													DATA_SYNC_FORCE_FETCH=true;
													window.location = agileWindowOrigin() + "#sync";
												}
											} 
									});
				});
				
	 function isBlank(str) {
				    return (!str || /^\s*$/.test(str));
				}

				function isBlank(str)
				{
								return (!str || /^\s*$/.test(str));
				}

});$(function()
{
	$('body').on('click', '#import_salesforce', function(e)
			{
				e.preventDefault();
				var newwindow = window.open("import_salesforce.jsp?id=import_from_salesforce", 'name', 'height=420,width=500');
				if (window.focus)
				{
					newwindow.focus();
				}
				return false;
			})

});$(function()
{
	
			

});$(function()
{
	

});
$(function(){
	
	$('body').on('click', '#zoho-import', function(e)
			{
				e.preventDefault();
				var newwindow = window.open("import_zoho.jsp", 'name', 'height=420,width=500');
				if (window.focus)
				{
					newwindow.focus();
				}
				return false;
			});
	

	

	$('body').on('click', '#zoho-prefs-delete', function(e)
	{
		e.preventDefault();
		var disable = $(this).attr("disabled");
		if (disable)
			return;
		$(this).attr("disabled", "disabled");
		$(this).after(getRandomLoadingImg());
		console.log(App_Widgets.zoho_sync.model.destroy({ success : function()
		{
			App_Widgets.stripe_sync.model.clear();
			App_Widgets.stripe_sync.render(true);
		} }));

	});
	

	
});/**
 * Loads the "google map API" by appending the url as script to html document
 * body and displays the map (using callback of url) based on the address of the
 * contact. If the google map is already loaded, just displays the map.
 * 
 * Geocoder is used to get the latitude and longitude of the given address
 * 
 * @method show_map
 * @param {object}
 *            el html object of the contact detail view
 * @param {Object}
 *            contact going to be shown in detail
 */
function show_map(el) {
	var contact = App_Contacts.contactDetailView.model.toJSON();
	var address = getPropertyValue(contact.properties, "address");

	// Return, if no address is found 
	if (!address) 
		return;
	
	try
	{
		address = JSON.parse(address);
		if(!address)
			return;
	}
	catch (err)
	{
		return;
	}
	
	

	// If all the address fields are empty, just return.
	if (!address.address && !address.city && !address.state
			&& !address.country)
		return;
	
	//reads the value from cookie or local store if the value is no it will return from here
	
	var map_view=_agile_get_prefs('MAP_VIEW');
	if(map_view=="disabled"){
		$("#map_view_action").html("<i class='icon-plus text-sm c-p' title='Show map' id='enable_map_view'></i>");
		return;
	}
		

	// If google map is already loaded display the map else load the
	// "google maps api"
	try {
		if (google.maps) {
			display_google_map();
		}
	} catch (err) {

		load_gmap_script();
	}
}

/**
 * Loads "google maps api", by appending the related url (with a callback
 * function to display map) as script element to html document body
 */
function load_gmap_script() {
	
	var script = document.createElement("script");
	script.type = "text/javascript";
	script.src = "https://maps.googleapis.com/maps/api/js?&sensor=false&callback=display_google_map";
	document.body.appendChild(script);
}

/**
 * Displays related map of the given contact address.
 * 
 * Validates the status code returned by the geocoder, if it is ok proceeds
 * further to display the map using latitude and longitude of results object.
 * 
 */
function display_google_map() {

	var contact = App_Contacts.contactDetailView.model.toJSON();
	var address = JSON.parse(getPropertyValue(contact.properties, "address"));

	// Gets the location (latitude and longitude) from the address
	var geocoder = new google.maps.Geocoder();

	// Latitude and longitude were not saved to the contact (chances to update the address)
	
	if(!address.address)address.address="";
	if(!address.city)address.city="";
	if(!address.state)address.state="";
	if(!address.country)address.country="";
	if(!address.zip)address.zip="";
	
	geocoder.geocode({
		'address' : '"'+ address.address + ', '+ address.city + ', '
		+ address.state + ', ' + getNormalCountryNameFromShortName(address.country) + ', ' + address.zip + '"'
	}, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			console.log(results);
			displayTimeZone(results);

			// Displays map portion
			$("#map").css('display', 'block');
			
			var myOptions = {
				zoom : 4,
				center : results[0].geometry.location,
				mapTypeId : google.maps.MapTypeId.ROADMAP
			}

			var map = new google.maps.Map(document.getElementById("map"),
					myOptions);
			
			var marker = new google.maps.Marker({
				map : map,
				position : results[0].geometry.location
			});
		}
	});
}

function getNormalCountryNameFromShortName(name){
	if (!name)
		return;

	var name_json = {  "AF" : "Afghanistan",
		    "AX" : "Aland Islands",
		    "AL" : "Albania",
		    "DZ" : "Algeria",
		    "AS" : "American Samoa",
		    "AD" : "Andorra",
		    "AO" : "Angola",
		    "AI" : "Anguilla",
		    "AQ" : "Antarctica",
		    "AG" : "Antigua And Barbuda",
		    "AR" : "Argentina",
		    "AM" : "Armenia",
		    "AW" : "Aruba",
		    "AU" : "Australia",
		    "AT" : "Austria",
		    "AZ" : "Azerbaijan",
		    "BS" : "Bahamas",
		    "BH" : "Bahrain",
		    "BD" : "Bangladesh",
		    "BB" : "Barbados",
		    "BY" : "Belarus",
		    "BE" : "Belgium",
		    "BZ" : "Belize",
		    "BJ" : "Benin",
		    "BM" : "Bermuda",
		    "BT" : "Bhutan",
		    "BO" : "Bolivia",
		    "BA" : "Bosnia And Herzegovina",
		    "BW" : "Botswana",
		    "BV" : "Bouvet Island",
		    "BR" : "Brazil",
		    "IO" : "British Indian Ocean Territory",
		    "BN" : "Brunei Darussalam",
		    "BG" : "Bulgaria",
		    "BF" : "Burkina Faso",
		    "BI" : "Burundi",
		    "KH" : "Cambodia",
		    "CM" : "Cameroon",
		    "CA" : "Canada",
		    "CV" : "Cape Verde",
		    "KY" : "Cayman Islands",
		    "CF" : "Central African Republic",
		    "TD" : "Chad",
		    "CL" : "Chile",
		    "CN" : "China",
		    "CX" : "Christmas Island",
		    "CC" : "Cocos (Keeling) Islands",
		    "CO" : "Colombia",
		    "KM" : "Comoros",
		    "CG" : "Congo",
		    "CD" : "Congo, Democratic Republic",
		    "CK" : "Cook Islands",
		    "CR" : "Costa Rica",
		    "CI" : "Cote D\"Ivoire",
		    "HR" : "Croatia",
		    "CU" : "Cuba",
		    "CY" : "Cyprus",
		    "CZ" : "Czech Republic",
		    "DK" : "Denmark",
		    "DJ" : "Djibouti",
		    "DM" : "Dominica",
		    "DO" : "Dominican Republic",
		    "EC" : "Ecuador",
		    "EG" : "Egypt",
		    "SV" : "El Salvador",
		    "GQ" : "Equatorial Guinea",
		    "ER" : "Eritrea",
		    "EE" : "Estonia",
		    "ET" : "Ethiopia",
		    "FK" : "Falkland Islands (Malvinas)",
		    "FO" : "Faroe Islands",
		    "FJ" : "Fiji",
		    "FI" : "Finland",
		    "FR" : "France",
		    "GF" : "French Guiana",
		    "PF" : "French Polynesia",
		    "TF" : "French Southern Territories",
		    "GA" : "Gabon",
		    "GM" : "Gambia",
		    "GE" : "Georgia",
		    "DE" : "Germany",
		    "GH" : "Ghana",
		    "GI" : "Gibraltar",
		    "GR" : "Greece",
		    "GL" : "Greenland",
		    "GD" : "Grenada",
		    "GP" : "Guadeloupe",
		    "GU" : "Guam",
		    "GT" : "Guatemala",
		    "GG" : "Guernsey",
		    "GN" : "Guinea",
		    "GW" : "Guinea-Bissau",
		    "GY" : "Guyana",
		    "HT" : "Haiti",
		    "HM" : "Heard Island & Mcdonald Islands",
		    "VA" : "Holy See (Vatican City State)",
		    "HN" : "Honduras",
		    "HK" : "Hong Kong",
		    "HU" : "Hungary",
		    "IS" : "Iceland",
		    "IN" : "India",
		    "ID" : "Indonesia",
		    "IR" : "Iran, Islamic Republic Of",
		    "IQ" : "Iraq",
		    "IE" : "Ireland",
		    "IM" : "Isle Of Man",
		    "IL" : "Israel",
		    "IT" : "Italy",
		    "JM" : "Jamaica",
		    "JP" : "Japan",
		    "JE" : "Jersey",
		    "JO" : "Jordan",
		    "KZ" : "Kazakhstan",
		    "KE" : "Kenya",
		    "KI" : "Kiribati",
		    "KR" : "Korea",
		    "KW" : "Kuwait",
		    "KG" : "Kyrgyzstan",
		    "LA" : "Lao People\"s Democratic Republic",
		    "LV" : "Latvia",
		    "LB" : "Lebanon",
		    "LS" : "Lesotho",
		    "LR" : "Liberia",
		    "LY" : "Libyan Arab Jamahiriya",
		    "LI" : "Liechtenstein",
		    "LT" : "Lithuania",
		    "LU" : "Luxembourg",
		    "MO" : "Macao",
		    "MK" : "Macedonia",
		    "MG" : "Madagascar",
		    "MW" : "Malawi",
		    "MY" : "Malaysia",
		    "MV" : "Maldives",
		    "ML" : "Mali",
		    "MT" : "Malta",
		    "MH" : "Marshall Islands",
		    "MQ" : "Martinique",
		    "MR" : "Mauritania",
		    "MU" : "Mauritius",
		    "YT" : "Mayotte",
		    "MX" : "Mexico",
		    "FM" : "Micronesia, Federated States Of",
		    "MD" : "Moldova",
		    "MC" : "Monaco",
		    "MN" : "Mongolia",
		    "ME" : "Montenegro",
		    "MS" : "Montserrat",
		    "MA" : "Morocco",
		    "MZ" : "Mozambique",
		    "MM" : "Myanmar",
		    "NA" : "Namibia",
		    "NR" : "Nauru",
		    "NP" : "Nepal",
		    "NL" : "Netherlands",
		    "AN" : "Netherlands Antilles",
		    "NC" : "New Caledonia",
		    "NZ" : "New Zealand",
		    "NI" : "Nicaragua",
		    "NE" : "Niger",
		    "NG" : "Nigeria",
		    "NU" : "Niue",
		    "NF" : "Norfolk Island",
		    "MP" : "Northern Mariana Islands",
		    "NO" : "Norway",
		    "OM" : "Oman",
		    "PK" : "Pakistan",
		    "PW" : "Palau",
		    "PS" : "Palestinian Territory, Occupied",
		    "PA" : "Panama",
		    "PG" : "Papua New Guinea",
		    "PY" : "Paraguay",
		    "PE" : "Peru",
		    "PH" : "Philippines",
		    "PN" : "Pitcairn",
		    "PL" : "Poland",
		    "PT" : "Portugal",
		    "PR" : "Puerto Rico",
		    "QA" : "Qatar",
		    "RE" : "Reunion",
		    "RO" : "Romania",
		    "RU" : "Russian Federation",
		    "RW" : "Rwanda",
		    "BL" : "Saint Barthelemy",
		    "SH" : "Saint Helena",
		    "KN" : "Saint Kitts And Nevis",
		    "LC" : "Saint Lucia",
		    "MF" : "Saint Martin",
		    "PM" : "Saint Pierre And Miquelon",
		    "VC" : "Saint Vincent And Grenadines",
		    "WS" : "Samoa",
		    "SM" : "San Marino",
		    "ST" : "Sao Tome And Principe",
		    "SA" : "Saudi Arabia",
		    "SN" : "Senegal",
		    "RS" : "Serbia",
		    "SC" : "Seychelles",
		    "SL" : "Sierra Leone",
		    "SG" : "Singapore",
		    "SK" : "Slovakia",
		    "SI" : "Slovenia",
		    "SB" : "Solomon Islands",
		    "SO" : "Somalia",
		    "ZA" : "South Africa",
		    "GS" : "South Georgia And Sandwich Isl.",
		    "ES" : "Spain",
		    "LK" : "Sri Lanka",
		    "SD" : "Sudan",
		    "SR" : "Suriname",
		    "SJ" : "Svalbard And Jan Mayen",
		    "SZ" : "Swaziland",
		    "SE" : "Sweden",
		    "CH" : "Switzerland",
		    "SY" : "Syrian Arab Republic",
		    "TW" : "Taiwan",
		    "TJ" : "Tajikistan",
		    "TZ" : "Tanzania",
		    "TH" : "Thailand",
		    "TL" : "Timor-Leste",
		    "TG" : "Togo",
		    "TK" : "Tokelau",
		    "TO" : "Tonga",
		    "TT" : "Trinidad And Tobago",
		    "TN" : "Tunisia",
		    "TR" : "Turkey",
		    "TM" : "Turkmenistan",
		    "TC" : "Turks And Caicos Islands",
		    "TV" : "Tuvalu",
		    "UG" : "Uganda",
		    "UA" : "Ukraine",
		    "AE" : "United Arab Emirates",
		    "GB" : "United Kingdom",
		    "US" : "United States",
		    "UM" : "United States Outlying Islands",
		    "UY" : "Uruguay",
		    "UZ" : "Uzbekistan",
		    "VU" : "Vanuatu",
		    "VE" : "Venezuela",
		    "VN" : "Viet Nam",
		    "VG" : "Virgin Islands, British",
		    "VI" : "Virgin Islands, U.S.",
		    "WF" : "Wallis And Futuna",
		    "EH" : "Western Sahara",
		    "YE" : "Yemen",
		    "ZM" : "Zambia",
		    "ZW" : "Zimbabwe"};

	name = name.trim();

	if (name_json[name])
		return name_json[name];

	return name;

}
/**
 * Deletes the selected row related entities from the database based on the url
 * attribute of the table and fades out the rows from the table
 * 
 * author: Ramesh
 * 
 */

var dup_contacts1_array = [];

$(function()
{
				$('body').on('click', '#duplicate-contacts-cancel', function(event)
				{
								event.preventDefault();
								dup_contacts1_array.length = 0;
								var master_record = App_Contacts.contactDetailView.model.toJSON();
								Backbone.history.navigate("contact/" + master_record.id, { trigger : true });
				});

				$('body').on('click', '#contact-merge-cancel', function(event)
				{
								event.preventDefault();
								dup_contacts1_array.length = 0;
								var master_record = App_Contacts.contactDetailView.model.toJSON();
								Backbone.history.navigate("duplicate-contacts/" + master_record.id, { trigger : true });
								// Backbone.history.navigate("contacts", {
								// trigger : true
								// });
				});

				/**
				 * Validates the checkbox status of each row in duplicate contacts table and
				 * sends these contacts to merge contacts page
				 * 
				 */
				$('body').on('click', '#duplicate-contacts-checked-grid', function(event)
																				{
																								event.preventDefault();
																								var index_array = [];
																								var data_array = [];
																								var checked = false;
																								var table = $('body').find('.showCheckboxes');
																								$(table).find('.tbody_check').each(function(index, element)
																								{
																												// If element is checked store it's id in an
																												// array
																												if ($(element).is(':checked'))
																												{
																																dup_contacts1_array.push($(element).closest('tr').find('td.data').attr('data'));
																																checked = true;
																												}
																								});
																								if (checked)
																								{
																												if (dup_contacts1_array.length > 2)
																												{
																																showAlertModal("contacts_merge_limit", undefined, function(){
																																	dup_contacts1_array.length = 0;
																																	
																																});
																																return;
																												}
																												Backbone.history.navigate("merge-contacts", { trigger : true });
																								}
																								else
																												$('body')
																																				.find(".select-none")
																																				.html(
																																												'<div class="alert alert-danger m-t-sm"><a class="close" data-dismiss="alert" href="#">&times;</a>You have not selected any records to merge. Please select at least one record to continue.</div>')
																																				.show().delay(3000).hide(1);
																				});

				/**
				 * Merges the selected duplicate contacts properties with the Master contact
				 * object and deletes the duplicate contact objects from the datastore
				 * 
				 */
				$('body').on('click', '#merge-contacts-model', function(event)
				{
								event.preventDefault();
								var confirm_message = "Delete 1 duplicate contact and merge data to master record?"
								if(dup_contacts1_array.length > 1)
									confirm_message = "Delete " + dup_contacts1_array.length + " duplicate contacts and merge data to master record?";
								var $that = $(this)
								showAlertModal(confirm_message, "confirm", function(){
									$that.attr('disabled', 'disabled');
									$('#contact-merge-cancel').attr('disabled', 'disabled');
									$('#contact-merge-cancel').after('<img class="contact-merge-loading p-r-xs m-b"  src= "'+updateImageS3Path("img/21-0.gif")+'"></img>');
									var checked = false;
									var selected_fields = [];
									var table = $('body').find('#merge-contacts-table');
									var tbody = $(table).find('tbody');
									var phones = [];
									var emails = [];
									var websites = [];
									var tags = [];
									var custom_fields = [];
									var remove_fields = [];
									var master_record = App_Contacts.contactDetailView.model;
									var master_record_dup = JSON.parse(JSON.stringify(master_record.toJSON()));
									var master_id = master_record.id;
									console.log(master_record.toJSON());

									tbody.children().each(function(index, element)
									{
													$(element).find("[type=radio]:checked").each(function(index, element)
													{
																	if ($(element).attr("oid") != master_id)
																	{
																					var fieldName = $(element).attr("field");
																					var fieldValue = $(element).attr("data");
																					var fieldType = $(element).attr("fieldtype");
																					if (typeof fieldType !== typeof undefined && fieldType !== false)
																					{
																									if (fieldValue)
																									{
																													custom_field = {};
																													custom_field['name'] = fieldName;
																													custom_field['value'] = fieldValue;
																													custom_field['type'] = 'CUSTOM';
																													custom_fields.push(custom_field);
																									}
																									else
																									{
																													remove_field = {};
																													remove_field['name'] = fieldName;
																													remove_field['type'] = 'CUSTOM';
																													remove_fields.push(remove_field);
																									}
																					}
																					else
																					{
																									if (fieldValue)
																									{
																													selected_field = {};
																													selected_field['name'] = fieldName;
																													selected_field['value'] = fieldValue;
																													selected_fields.push(selected_field);
																													if (fieldName.toLowerCase() == 'company')
																													{
																																	var company_id = $(element).attr("company_id");
																																	master_record.set({ "contact_company_id" : company_id });
																													}
																									}
																									else
																									{
																													remove_field = {};
																													remove_field['name'] = fieldName;
																													remove_field['type'] = 'SYSTEM';
																													remove_fields.push(remove_field);
																									}
																					}
																	}
													});
													$(element).find("[type=checkbox]:checked").each(function(index, element)
													{
																	var fieldName = $(element).attr("field");
																	var fieldValue = $(element).attr("data");
																	var fieldType = $(element).attr("fieldtype");
																	if (fieldName === "email")
																	{
																					var subtype = $(element).attr("subtype");
																					email = {};
																					email['value'] = fieldValue;
																					if (subtype)
																									email['subtype'] = subtype;
																					emails.push(email);
																	}
																	else if (fieldName === "website")
																	{
																					var subtype = $(element).attr("subtype");
																					website = {};
																					website['value'] = fieldValue;
																					if (subtype)
																									website['subtype'] = subtype;
																					websites.push(website);
																	}
																	else if (fieldName === "phone")
																	{
																					var subtype = $(element).attr("subtype");
																					phone = {};
																					phone['value'] = fieldValue;
																					if (subtype)
																									phone['subtype'] = subtype;
																					phones.push(phone);
																	}
																	else if (fieldName === "tags")
																	{
																					tags.push(fieldValue);
																	}
													});
									});
									var properties = master_record_dup.properties;
									master_record.set({ "tags" : tags });
									merge_duplicate_contacts(master_record, properties, selected_fields, custom_fields, remove_fields, websites, emails, phones);
								},undefined, "Detete duplicate Contacts");

								
				});
});

function merge_duplicate_contacts(master_record, properties, selected_fields, custom_fields, remove_fields, websites, emails, phones)
{
				for (var i = properties.length - 1; i >= 0; i--)
				{
								if (properties[i].name.toLowerCase() === 'email' || properties[i].name.toLowerCase() === 'website' || properties[i].name.toLowerCase() === 'phone')
								{
												properties.splice(i, 1);
								}
				}
				for (var i = 0; i < remove_fields.length; i++)
				{
								for (var j = 0; j < properties.length; j++)
								{
												var property = properties[j];
												if (property.name.toLowerCase() === remove_fields[i].name.toLowerCase() && property.type.toLowerCase() === remove_fields[i].type.toLowerCase())
												{
																properties.splice(j, 1);
																break;
												}
								}
				}
				for (var j = 0; j < selected_fields.length; j++)
				{
								var element = selected_fields[j];
								for (var k = 0; k < properties.length; k++)
								{
												if (properties[k].name.toLowerCase() === element['name'].toLowerCase())
												{
																properties[k].value = element['value'];
																break;
												}
												else if (k == properties.length - 1)
												{
																var object = {};
																object['name'] = element['name'];
																object['value'] = element['value'];
																object['type'] = 'SYSTEM';
																properties.push(object);
																break;
												}
								}
				}
				if (custom_fields.length > 0)
				{
								for (var i = 0; i < custom_fields.length; i++)
								{
												var element = custom_fields[i];
												for (var j = 0; j < properties.length; j++)
												{
																if (properties[j].name.toLowerCase() === element['name'].toLowerCase() && properties[j].type === 'CUSTOM')
																{
																				properties[j].value = element['value'];
																				break;
																}
																else if (j == properties.length - 1)
																{
																				if (custom_fields[i].value)
																				{
																								var object = {};
																								object['name'] = custom_fields[i].name;
																								object['value'] = custom_fields[i].value;
																								object['type'] = 'CUSTOM';
																								properties.push(object);
																								break;
																				}
																}
												}
								}
				}
				if (emails.length > 0)
				{
								for (var i = 0; i < emails.length; i++)
								{
												var object = {};
												object['name'] = 'email';
												object['value'] = emails[i].value;
												object['type'] = 'SYSTEM';
												if (emails[i].subtype)
																object['subtype'] = emails[i].subtype;
												properties.push(object);
								}
				}
				if (phones.length > 0)
				{
								for (var i = 0; i < phones.length; i++)
								{
												var object = {};
												object['name'] = 'phone';
												object['value'] = phones[i].value;
												object['type'] = 'SYSTEM';
												if (phones[i].subtype)
																object['subtype'] = phones[i].subtype;
												properties.push(object);
								}
				}
				if (websites.length > 0)
				{
								for (var i = 0; i < websites.length; i++)
								{
												var object = {};
												object['name'] = 'website';
												object['value'] = websites[i].value;
												object['type'] = 'SYSTEM';
												if (websites[i].subtype)
																object['subtype'] = websites[i].subtype;
												properties.push(object);
								}
				}
				master_record.set({ "properties" : properties });
				merge_related_entity_in_master_record(master_record,dup_contacts1_array);
}


function merge_related_entity_in_master_record(master_record,duplicate_contacts){
				master_record.save({}, { url : '/core/api/contacts/merge/'+duplicate_contacts.toString(), success : function()
								{
												$(".contact-merge-loading").remove();
												CONTACTS_HARD_RELOAD = true;
												var id = master_record.toJSON().id;
												Backbone.history.navigate("contact/" + id, { trigger : true });
								} });
}
/**
 * Contact sorting.
 */
var agile_contact_sort_configuration = [

	buildProperty("Created Date", "created_time"),

	// score 
	buildProperty("Score", "lead_score"),

	// Star value
	buildProperty("Star Value", "star_value", "-star_value"),


	// First name
	buildProperty("First Name", "first_name"),

	// Last name
	buildProperty("Last Name", "last_name"),

	// Last contacted
	buildProperty("Contacted Date", "last_contacted")
];

function buildProperty (field_label, field_value)
{
	var property = {
		"id" : field_value,
		"field_label" : field_label,
		"field_value" : field_value,	
		"search_key" : field_value
	}

	return property;
}

var sort_configuration = {
	getContactSortableFields : function()
	{
		return agile_contact_sort_configuration;
	},
	getCustomFieldSortableFields : function()
	{

	}
};

/**
 * Companies sorting.
 */
var agile_company_sort_configuration = [

	buildProperty("Created Date", "created_time"),

	// Star value
	buildProperty("Star Value", "star_value"),

	// Name
	buildProperty("Name", "name"),
	//Score
	buildProperty("Score", "lead_score")
];

var sort_company_configuration = {
	getCompanySortableFields : function()
	{
		return agile_company_sort_configuration;
	},
	getCustomFieldSortableFields : function()
	{

	}
};/**
* This is just like an abstract class, doesn't
contain all implementation; it is responsibility of child views to extend
*/
(function(contact_sort_configuration, $, undefined) {
	
contact_sort_configuration.SORT_FIELDS_VIEW = function(sort_options, custom_options)
{
	sort_options = sort_options || {};
	custom_options = custom_options || {};
	var sort_defaults = {
			// Default configurations
			sortPrefsName : "sort_by_name",
			orderBy : "created_time",
			sortBy : "-",
			is_custom_field : false,
			isAlreadyselected : false,
			built_key : this.sortBy + this.orderBy,
			selectedModel : undefined,
			original_with_order : this.final_sort_key,
		}
		sort_defaults.built_key = sort_defaults.sortBy + sort_defaults.orderBy;

		console.log(sort_defaults);

	sort_defaults = _.defaults(sort_options, sort_defaults);
	//custom_properties_defaults = _.defaults(custom_options, custom_properties_defaults);


	var setDefaultSelection = function(view)
	{
		//alert("ehere");
	}

	return Base_Collection_View.extend({
		events : {
			//"click a.sort-field" : "sort_collection_config",
			"click a.order-by" : "orderBy"
		},
		init : function(e)
		{	
			this.options.sort_options = this.options.sort_options || {};

			this.options.sort_options = _.defaults(sort_defaults, this.options.sort_options);
			
			// Gets sort key from local storage
			var sort_key = _agile_get_prefs(this.options.sortPrefsName);

			//var sort_key = "created_time";

			if(this.options.sort_options.selectedModel)	
				this.setPropertiesByModel(this.options.sort_options.selectedModel);
			else
				this.setProperties(sort_key)

			this.preSelectFields();
		},
		postProcess : function(el)
		{
			this.preSelectFields();
			if(this.options.sort_options.selectedModel)
				this.printSortNameByData(this.options.sort_options.selectedModel);

		},
		setDefaults : function()
		{
			this.options.sort_options = _.defaults(sort_defaults, this.options.sort_options);
			this.setProperties(this.options.sort_options.built_key);
		},
		setSortOrder : function(sortBy)
		{
			this.options.sortBy = sortBy;
			this.updateLocalStorage(this.options.sortBy + this.options.sort_options.built_key);
		},
		setPropertiesByModel : function(base_model)
		{
			// Clones properties
			var clone_properties = _.defaults({}, sort_defaults);
			clone_properties.orderBy = base_model.get("search_key");
			clone_properties.sortBy = this.options.sortBy;
			clone_properties.is_custom_field = base_model.get("scope") ? true : false;
			if(clone_properties.is_custom_field)
				clone_properties.built_key =  clone_properties.orderBy +"_AGILE_CUSTOM_" + base_model.get("field_type");
			else
				clone_properties.built_key =  clone_properties.orderBy;

			clone_properties.selectedModel = base_model;

			clone_properties.isAlreadyselected = true;

			this.options.sort_options = _.defaults(clone_properties, this.options.sort_options);

			if(this.options.sortBy)
				this.updateLocalStorage(this.options.sortBy + this.options.sort_options.built_key);
			else
				this.updateLocalStorage(this.options.sort_options.built_key);

			this.setDefault(base_model);
		},
		setProperties : function(newKey)
		{
			// Returns if key is not defined
			if(!newKey || !newKey.trim())
				return;

			// Clones properties
			var clone_properties = _.defaults({}, sort_defaults);

			var sortBy = "";
			var orderBy = "";
			var selectedModel = undefined;

			/**
			* If sort key is not defined default sortkey is picked. If default sort key is defined in list config, it is picked from there,
			* otherwise, 'created_time' is considered as default one.
			*/
			if(newKey[0] == "-")
			{
				sortBy = "-";
				orderBy = newKey.split( /-(.+)/)[1];	
			}
			else
			{
				sortBy = "";
				orderBy = newKey;

			}

			clone_properties.is_custom_field = false;
			if(orderBy.indexOf("_AGILE_CUSTOM_"))
			{
				var temp = orderBy.split("_AGILE_CUSTOM_");
				orderBy = temp[0];
				clone_properties.is_custom_field = true;
			}
			
			clone_properties.orderBy = orderBy;
			var searchResults = this.collection.where({"search_key" : orderBy});
			selectedModel = searchResults.length > 0 ? searchResults[0] : selectedModel;

			this.options.sort_options = clone_properties;
			this.options.sortBy = sortBy;
			if(selectedModel)
			{
				this.setPropertiesByModel(selectedModel);
				this.setSortOrder(sortBy);
			}
		},
		preSetProperties : function(e)
		{
			//this.init();
			//this.preSelectFields();
		},
		preSelectFields : function(e)
		{
			//$('.sort-field-check', this.el).addClass('display-none');
			$('.sort-by-check', this.el).addClass('display-none');

			if(this.options.sortBy == "-")
			{
				$(".order-by[data='-']", this.el).find('i').removeClass('display-none');
			}
			else
			{
				$(".order-by[data='']", this.el).find('i').removeClass('display-none');				
			}
		},
		resetLocalStorage : function(e)
		{
			// Can be implemented in child views. 
			//This is left blank to make this class re-usable for both contacts and companies listing

		},
		updateLocalStorage : function(sort_by)
		{
			// abstract method;
			_agile_set_prefs(this.options.sortPrefsName, sort_by);
		},
		printSortNameByData : function(model)
		{
			 $(".contacts-toolbar", this.el).find(".sort-field-txt").html(model.get("field_label"));
		},
		orderBy : function(e)
		{
			sort_by = $(e.currentTarget).attr('data');

			if(this.options.sortBy == sort_by)
				return;

			this.setSortOrder(sort_by);

			

			this.setSortOrder(sort_by);

			this.preSelectFields();
			this.sort_collection();
		},
		sort_collection_config : function(model)
		{
			this.resetLocalStorage();
			if(!model)
				return;

			this.setPropertiesByModel(model);

			this.sort_collection();
		},
		setDefault : function (model)
		{
			var collection = this.collection.where({"selected" : true});
			if(collection.length != 0 )
			{
				$.each(collection, function(i, v){
					v.set("selected", false);
				});	
			}
			if(!model)
				return;

			model.set("selected" , true);
			this.printSortNameByData(model);
		},
		sort_collection : function()
		{
			// Can be implemented in child views. 
			//This is left blank to make this class re-usable for both contacts and companies listing
		},
		isMatchingEntity : function(base_model)
		{
			if(this.options.sort_options.isAlreadyselected)
				return false;

			if(base_model.get("search_key") == this.options.sort_options.orderBy)
			{
				return true;
			}

			return false;
		},
		addAll : function(fields_list)
		{
			var foundField = false;
			if(!fields_list || fields_list.length == 0)
			{
			//	foundField = this.options.sort_options.is_custom_field;
			}
			var collection = this.collection;
			var that = this;
			$.each(fields_list, function(index, value){
				if(that.options.sort_options.is_custom_field && that.options.sort_options.orderBy == value["search_key"] && !foundField)
					foundField = true;
				collection.add(value);
			});
			
			if(this.options.sort_options.is_custom_field && !foundField)
			{
				this.setDefaults();
				this.sort_collection();
			}
		},	
		appendItem : function(base_model, append)
			{	
				if(this.isMatchingEntity(base_model))
				{
					this.setPropertiesByModel(base_model);
				}

				// This is required when add event is raised, in that case
				// updating document fragment does not update view. And on the
				// other hand, append item should definitely be called from
				// appendItemOnAddEvent because there are many places where
				// appenditem is overridden and that needs to be called on newly
				// added model
				//if (append)
			//	{

					// Adds to respective div based on type of field
					var el = this.createListView(base_model).render().el;

					if(base_model.get("scope"))
					{
						this.custom_field_element = $("#sort-divider", this.el);
						$("#custom-fields", this.el).removeClass("display-none");
						$(this.custom_field_element).before(el);
					}
					else
					{
							$(!this.system_field_element)
								this.system_field_element = $("#custom-fields", this.el);

							$(this.system_field_element).before(el);
					}
					
		//			return;
		//		}

				//this.model_list_element_fragment.appendChild(this.createListView(base_model).render().el);
		},
		createListView : function(base_model)
			{
				// If modelData is set in options of the view then custom data
				// is added to model.
				if (this.options.modelData)
				{
					// console.log("Adding custom data");
					base_model.set(this.options.modelData);
				}

				var view = this.getListView();
				/*
				 * Creates Base_List_View i.e., view is created for the model in
				 * the collection.
				 */
				var itemView = new view({ model : base_model, template : (this.options.templateKey + '-model'),
					tagName : this.options.individual_tag_name, collectionView : this});


				return itemView
		},
		getListView : function ()
		{
			if(this.options.list_view)
				return this.options.list_view;

			this.options.list_view = Base_List_View.extend({
				events : {
					"click a.sort-field" : "sort_collection_config",
				},
				sort_collection_config : function (e, model)
				{
					e.preventDefault();
			
					console.log(model);
					this.options.collectionView.sort_collection_config(this.model);

				//	this.options.collectionView.printSortNameByData(this.model);
				}
			});

			return this.options.list_view;
		}
	});
}

}(window.contact_sort_configuration = window.contact_sort_configuration || {}, $));

function getSortFieldsConfig()
{
	return SORT_FIELDS_VIEW;
}(function(COMPANY_SORT_FIELDS_VIEW, $, undefined) {
	var config = null;
	COMPANY_SORT_FIELDS_VIEW.view = function ()
	{
		if(config)
			return config;

		config = contact_sort_configuration.SORT_FIELDS_VIEW().extend ({
			resetLocalStorage :function(e)
			{
				_agile_delete_prefs(this.options.sortPrefsName);
			},
			updateLocalStorage : function(sort_by)
			{
				_agile_set_prefs(this.options.sortPrefsName, sort_by);
			},
			sort_collection : function(e)
			{
				COMPANIES_HARD_RELOAD=true;						
				App_Companies.companies();				
			}
		});

		return config;
	}
}(window.COMPANY_SORT_FIELDS_VIEW = window.COMPANY_SORT_FIELDS_VIEW || {}, $));(function(CONTACT_SORT_FIELDS_VIEW, $, undefined) {
	var config = null;
	CONTACT_SORT_FIELDS_VIEW.view = function ()
	{
		if(config)
			return config;

		config = contact_sort_configuration.SORT_FIELDS_VIEW().extend ({
			resetLocalStorage :function(e)
			{
				_agile_delete_prefs('sort_by_name');
			},
			updateLocalStorage : function(sort_by)
			{
				_agile_set_prefs('sort_by_name', sort_by);
			},
			sort_collection : function(e)
			{
				CONTACTS_HARD_RELOAD=true;
					
				// If filter is not set then show view on the default contacts
				// list
				if(!App_Contacts.tag_id)
				{
					App_Contacts.contacts(undefined, undefined, undefined, true);
					return;
				}
					
				// If tag filter is applied send tags fetch url and tag_id, which is tobe shown on contacts table.
				App_Contacts.contacts(App_Contacts.tag_id, undefined, undefined, true);
			}
		});

		return config;
	}
}(window.CONTACT_SORT_FIELDS_VIEW = window.CONTACT_SORT_FIELDS_VIEW || {}, $));/**
 * Sets dashboard. call methods to fetch contact, deals, tasks, workflows and
 * subscription details
 * 
 * @param el
 */
function setup_dashboard(el)
{
	// Sets up subscription details
	show_dashboard_subscription_details(el);

	// Show recently view contacts by current user
	show_dashboard_contacts(el);

	// Shows deals, tasks, workflows
	show_dashboard_tasks(el);
	show_dashboard_deals(el);
	show_dashboard_workflows(el);
	initBlogSync();
}

/*
 * Gets the Blog posts
 */
function initBlogSync()
{
	head
			.js(
					LIB_PATH + 'lib/jquery.feeds.min.js',
					function()
					{

						$('#blog_sync_container')
								.feeds(
										{
											feeds : { blog : "https://www.agilecrm.com/blog/feed/" },
											max : 3,
											entryTemplate : function(entry)
											{
												return '<strong>' + '<a href="' + entry.link + '" title = "' + entry.title + '" target="_blank" >' + entry.title + '</a></strong><div class="text-xs l-h-xs m-b-xs text-light">' 
												+ new Date(entry.publishedDate).format('mmm d, yyyy') + '</div><p class="p-t-xs m-b">' 
												+ entry.contentSnippet.replace('<a', '<a target="_blank"') + '</p>';
											} });
					});

}

/**
 * Fetches recently viewed contacts bu current user. It fetches last viewed 5
 * contacts
 * 
 * @param el
 */
function show_dashboard_contacts(el)
{
	var my_recent_contacts = new Base_Collection_View({ url : 'core/api/contacts/recent?page_size=5', restKey : "contacts", templateKey : "dashboard-contacts",
		individual_tag_name : 'tr', sort_collection : false, });
	my_recent_contacts.collection.fetch();

	$('#recent-contacts', el).html(my_recent_contacts.render().el);
}

/**
 * Fetches tasks due tasks
 * 
 * @param el
 */
function show_dashboard_tasks(el)
{
	var task_dashboard_list_view = new Base_Collection_View({ url : '/core/api/tasks/my/dashboardtasks', restKey : "task", sortKey : "due",
		templateKey : "dashboard1-tasks", individual_tag_name : 'tr', postRenderCallback : function(el)
		{
			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$(".task-due-time", el).timeago();
			});
		} });

	task_dashboard_list_view.appendItem = append_tasks_dashboard;
	task_dashboard_list_view.collection.fetch();
	$('#my-tasks').html(task_dashboard_list_view.el);
}

/**
 * Fetches upcomming deals related to current user
 * 
 * @param el
 */
function show_dashboard_deals(el)
{
	var my_deals = new Base_Collection_View({ url : 'core/api/opportunity/my/upcoming-deals', restKey : "opportunity", templateKey : "dashboard-opportunities",
		individual_tag_name : 'tr', page_size : 5, sortKey : "created_time", descending : true, postRenderCallback : function(el)
		{
			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$(".deal-close-time", el).timeago();
			})
		} });
	my_deals.collection.fetch();
	$('#my-deals').html(my_deals.el);
}

/**
 * Fetches recent workflow logs
 * 
 * @param el
 */
function show_dashboard_workflows(el)
{
	var workflow_list_view = new Base_Collection_View({ url : '/core/api/campaigns/logs/recent?page_size=5', restKey : "workflow",
		templateKey : "dashboard-campaign-logs", individual_tag_name : 'tr', page_size : 10, sortKey : 'time', descending : true,
		postRenderCallback : function(el)
		{
			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$("time.log-created-time", el).timeago();
			});
		} });

	workflow_list_view.collection.fetch();
	$('#my-logs').html(workflow_list_view.el);
}

/**
 * Shows subscription details. It fetches subscription object, checks number of
 * users registered and number of users allowed according to subscription and
 * shows message accordingly
 * 
 * @param el
 */

function show_dashboard_subscription_details(el)
{
	/**
	 * Fetches subscription object
	 */
	var view = new Base_Model_View({ url : 'core/api/subscription', template : "dashboard-account-info", });

	view.model.fetch({ success : function(data)
	{
		if (!$.isEmptyObject(data.toJSON()))
		{
			$("#subscription-stats").html(view.render(true).el);
			return;
		}

		/**
		 * Fetches number of users present in current domain
		 */
		$.get('core/api/users/count', function(count)
		{
			var plandata = {};
			plandata.users_count = count;
			plandata.plan = "free";

			console.log(plandata);
			getTemplate('user-billing', plandata, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$("#subscription-stats").html($(template_ui));	
			}, "#subscription-stats");

		});
	} })
}

$(function()
{
	$('body').on('click', '#dashboard-contacts-model-list > tr, #dashboard-campaign-logs-model-list > tr', function(e)
	{

		var id = $(this).find(".data").attr("data");

		App_Contacts.navigate("contact/" + id, { trigger : true });
	});

});
    
function setup_dashboardTimeline(url)
{
	if(!url)
		url = "core/api/timeline/contact";
head.js(LIB_PATH + 'lib/storyjs-embed.js', function(){
createStoryJS({
       	type:       'default',
        width:      '1170',
        height:     '350',
      //  source:     'https://docs.google.com/spreadsheet/pub?key=0AqHV0BeH8amcdGxyS0cxS0NNandSaV9oTXRhWTdEbmc&output=html',
        source : url,
        embed_id:   'my-timeline' ,    // ID of the DIV you want to load the timeline into
        js :	'lib/timeline-min.js',
        css : 	'css/dashboard-timeline.css'
		});
	});
}
/**
 *  DataSync inner model view events
 */

var DATA_SYNC_URL="core/api/contactprefs"
var DataSync_Event_Modal_View = Base_Model_View.extend({

    events: {
        'click #import_shopify': 'importShopify',
        'change #sync-type': 'googleContactsSyncTypeChange',
        'click .save-contact-prefs': 'syncGoogleContacts',
        'click #stripe-import-prefs-delete': 'importStripePrefsDelete',
        'click #stripe_sync_prefs': 'syncStripePrefs',
        'click #shopify-setting': 'syncShopify',
        'click #quickbook_sync_prefs': 'syncQuickbooks',
        'click #freshbooks_sync_prefs': 'syncFreshbooks',
        'click #data-sync-type':'enableDataSyncWidget',
    },

    /**
     * For adding new case
     */
    importShopify: function(e) {
        e.preventDefault();
        var ele = $(e.currentTarget);

        var shopName = $('#shop').val();
        if (shopName == "") {
            showAlertModal("empty_shop", undefined, function(){
              $('#shop').focus();
              
            });
            return false;
        }
        var domain = agileWindowOrigin();

        e.preventDefault();
        var callbackURL = window.location.href;
        var url = "/scribe?service_type=shopify&url=sync&window_opened=true&shop=" + shopName + "&domain=" + domain + "";

        // For every request of import, it will ask to grant access
        window.open(url + "&return_url=" + encodeURIComponent(callbackURL), 'dataSync', 'height=1000,width=500');
    },

     enableDataSyncWidget: function(e) {
        e.preventDefault();
        var ele = $(e.currentTarget);

        var sync_type=$(ele).attr('sync_type');
        if(sync_type=='STRIPE'){
            var callbackURL = agileWindowOrigin() + "/#sync/stripe-import";
            // For every request of import, it will ask to grant access
            window.open( "/scribe?service=stripe_import&window_opened=true&return_url=" + encodeURIComponent(callbackURL),'dataSync','height=1000,width=500');
            return false;

        }else if(sync_type=='QUICKBOOK'){

          window.open('/OAuthServlet?service=quickbook-import&window_opened=true&return_url=' + encodeURIComponent(window.location.href) + 'quickbooks','dataSync','height=1000,width=500');
          return;
        }else if(sync_type=='OFFICE365'){
            
        }
    },

    syncShopify: function(e) {

        e.preventDefault();
        var ele = $(e.currentTarget);
        /*var disabled = $(this).attr("disabled");
        if (disabled) {
            return false;
        } else {
            $(ele).attr("disabled", "disabled");
            $(ele).text("Syncing");
        }

*/        $(ele).attr("disabled", "disabled");
       
                      
        var syncPrefs = serializeForm("shopify-contact-import-form");
        syncPrefs["inProgress"] = true;
             getSyncModelFromName('SHOPIFY', function(mod) {
              if(mod!=undefined){
                if(mod.inProgress==true)
                {
                     show_success_message_after_save_button("Sync in progress", App_Datasync.dataSync.el);
                      setTimeout(function() {
            $(ele).removeAttr("disabled");
            },3000);
                     return false;
                }
          }

       

            var model = new Backbone.Model(mod);
            model.set(syncPrefs, {
                silent: true
            });

            var url = DATA_SYNC_URL + "/SHOPIFY";

          //  $(ele).after(getRandomLoadingImg());
            model.url = url + "?sync=true"
            model.save({}, {
                success: function(data) {
                    show_success_message_after_save_button("Sync initiated", App_Datasync.dataSync.el);
                    setTimeout(function() {
                 $(ele).removeAttr("disabled");
                     },3000);
                    showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                }
            });
        },true);


    },

    /**
     * For adding new case
     */
    googleContactsSyncTypeChange: function(e) {

        e.preventDefault();
        var ele = $(e.currentTarget);

        var value = $(ele).val();
        if (value == "AGILE_TO_CLIENT" || value == "TWO_WAY") {
            $("#sync_to_group_controlgroup").show();
            $("#my_contacts_sync_group").show();
            if (value == "AGILE_TO_CLIENT") {
                $("#sync_from_group_controlgroup").hide();
                return;
            }

            $("#sync_from_group_controlgroup").show();
        } else {
            $("#sync_from_group_controlgroup").show();
            $("#sync_to_group_controlgroup").hide();
            $("#my_contacts_sync_group").hide();
        }
    },

    syncGoogleContacts: function(e) {

        var ele = $(e.currentTarget);
        var disabled = $(ele).attr("disabled");
       // if (disabled)
         //   return;

        if (!isValidForm("#google-contacts-import-form")) {
            return;
        };

        //$(ele).attr("disabled", "disabled");
       // $(ele).text("Syncing");

        //	return;
         $(ele).attr("disabled", "disabled");

        var syncPrefs = serializeForm("google-contacts-import-form");
        syncPrefs["inProgress"] = true;



        getSyncModelFromName('GOOGLE', function(mod) {

             if(mod.inProgress==true)
                {
                     show_success_message_after_save_button("Sync in progress", App_Datasync.dataSync.el);
                     setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                     return false;
                }
        
            var model = new Backbone.Model(mod);
            model.set(syncPrefs, {
                silent: true
            });

            var url = DATA_SYNC_URL + "/GOOGLE";
          //  $(ele).after(getRandomLoadingImg());
            model.url = url + "?sync=true"
            model.save({}, {
                success: function(data) {
                    show_success_message_after_save_button("Sync initiated", App_Datasync.dataSync.el);
                    setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                    showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                }
            });
        },true);
    },

    importStripePrefsDelete: function(e) {

        e.preventDefault();

        var ele = $(e.currentTarget);
        var disable = $(ele).attr("disabled");
        if (disable)
            return;
        $(ele).attr("disabled", "disabled");
       // $(ele).after(getRandomLoadingImg());

        getTemplate('admin-settings-import-stripe-contact-sync', {}, undefined, function(template_) {
            if (!template_)
                return;
            $('#prefs-tabs-content').find('#stripe').html($(template_));
        });


    },

    syncStripePrefs: function(e) {
        e.preventDefault();
        var ele = $(e.currentTarget);
        //var disabled = $(ele).attr("disabled");
       /* if (disabled) {
            return false;
        } else {
            $(ele).attr("disabled", "disabled");
            $(ele).text("Syncing");
        }*/
        $(ele).attr("disabled", "disabled");
                   

        var syncPrefs = serializeForm("stripe-prefs-form");
        syncPrefs["inProgress"] = true;
        getSyncModelFromName('STRIPE', function(mod) {

             if(mod.inProgress==true)
                {
                     show_success_message_after_save_button("Sync in progress", App_Datasync.dataSync.el);
                     setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                     return false;
                }
        
            var model = new Backbone.Model(mod);
            model.set(syncPrefs, {
                silent: true
            });

            var url = DATA_SYNC_URL + "/STRIPE";

           // $(ele).after(getRandomLoadingImg());
            model.url = url + "?sync=true"
            model.save({}, {
                success: function(data) {
                    show_success_message_after_save_button("Sync initiated", App_Datasync.dataSync.el);
                    setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                    showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                }
            });
        },true);
    },

    syncQuickbooks: function(e) {
        e.preventDefault();
        var ele = $(e.currentTarget);

       /*var disable = $(ele).attr('disabled');
        if(disable)
            return false;
        $(ele).attr("disabled", "disabled");
        $(ele).text("Syncing");*/
         $(ele).attr("disabled", "disabled");
        
        var quickbookPrefs = serializeForm("quickbook-form");
        quickbookPrefs['inProgress'] = true;


          getSyncModelFromName('QUICKBOOK', function(mod) {

             if(mod.inProgress==true)
                {
                     show_success_message_after_save_button("Sync in progress", App_Datasync.dataSync.el);
                     setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                     return false;
                }
        
            var model = new Backbone.Model(mod);
            model.set(quickbookPrefs, {
                silent: true
            });

            var url = DATA_SYNC_URL + "/QUICKBOOK";

         //   $(ele).after(getRandomLoadingImg());
            model.url = url + "?sync=true"
            model.save({}, {
                success: function(data) {
                    show_success_message_after_save_button("Sync initiated", App_Datasync.dataSync.el);
                    setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                    showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                }
            });
        },true);

    },

    syncFreshbooks: function(e) {
        e.preventDefault();
        var ele = $(e.currentTarget);

                //var disable = $(ele).attr('disabled');
                    //if(disable)
                    //return false;
                    $(ele).attr("disabled", "disabled");
                   
                   // $(ele).text("Syncing");*/
                    
                    var freshbooks_prefs = serializeForm("freshbooks-form");
                    freshbooks_prefs['inProgress'] = true;
                     getSyncModelFromName('FRESHBOOKS', function(mod) {

                         if(mod.inProgress==true)
                {
                     show_success_message_after_save_button("Sync in progress", App_Datasync.dataSync.el);
                     setTimeout(function() {
                      $(ele).removeAttr("disabled");
                      },3000);
                     return false;
                }
        
                        var model = new Backbone.Model(mod);
                        model.set(freshbooks_prefs, {
                            silent: true
                        });

                        var url = DATA_SYNC_URL + "/FRESHBOOKS";

                       // $(ele).after(getRandomLoadingImg());
                        model.url = url + "?sync=true"
                        model.save({}, {
                            success: function(data) {
                                show_success_message_after_save_button("Sync initiated", App_Datasync.dataSync.el);
                            setTimeout(function() {
                                 $(ele).removeAttr("disabled");
                                     },3000);
                            
                                showNotyPopUp("information", "Contacts sync initiated", "top", 1000);
                            }
                        });
                    },true);
                    
    }

});




/**
binds all click events  for google calendar model
*/

	var GoogleCalendar_Event_Modal_View = Base_Model_View.extend({

    events: {
        'click #sync-google-calendar': 'syncGoogleCalendarEnable',
        'click #sync-google-calendar-delete': 'deleteGoogleCalendarPrefs',
       
    },

      syncGoogleCalendarEnable: function(e) {

        e.preventDefault();

       // URL to return, after fetching token and secret key from LinkedIn
		var callbackURL = agileWindowOrigin() + "/#sync/calendar-setup";

		// For every request of import, it will ask to grant access
		window.open("/scribe?service=google_calendar&window_opened=true&return_url=" + encodeURIComponent(callbackURL),'dataSync','height=1000,width=500');

    },


     deleteGoogleCalendarPrefs: function(e) {

     	e.preventDefault();
      var $that = $(this);
      showAlertModal("delete_calendar_prefs", "confirm", function(){
        var ele = $(e.currentTarget);

        var disabled = $that.attr("disabled");
        if (disabled)
          return;

        $(ele).attr("disabled", "disabled");

        $(ele).after(getRandomLoadingImg());
        App_Datasync.calendar_sync_google.model.url = "/core/api/calendar-prefs/type/GOOGLE"
        App_Datasync.calendar_sync_google.model.destroy({ success : function()
        {

          App_Datasync.calendar_sync_google.model.clear();
          App_Datasync.calendar_sync_google.render(true);
          erase_google_calendar_prefs_cookie();
                _resetGAPI();
        } });
      });
       

    }
}); var dealrelatedView;
var dealNotesView;
var dealActivitiesView;
var existingDealDocumentsView;
var dealTasksView;
var dealEventsView;

var deal_details_tab = {
		
		
		
		loadDealRelatedContactsView : function()
		{
			 var id = App_Deal_Details.dealDetailView.model.id;
			 if(id){
			dealrelatedView = new Base_Collection_View({
	            url: '/core/api/opportunity/' + id + "/related_to",
	            templateKey: "deal-related",
	            individual_tag_name: 'tr',
	            sortKey:"created_time",
	            cursor : true,
	            descending: true,
	            postRenderCallback: function(el) {
	            	contactListener();
	            	
	            }
	        });
			dealrelatedView.collection.fetch();
	        $('#dealrelated').html(dealrelatedView.el);
			 }
		},
		load_deal_notes : function()
		{
		    var id = App_Deal_Details.dealDetailView.model.id;
		    if(id){
		    dealNotesView = new Base_Collection_View({
	            url: '/core/api/opportunity/' + id + "/notes",
	            restKey: "note",
	            templateKey: "deal-notes",
	            individual_tag_name: 'li',
	            sortKey:"created_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".note-created-time", el).timeago();
	              	})
	            }
	        });
		    dealNotesView.collection.fetch();
	        $('#dealnotes').html(dealNotesView.el);
		    }
		},
		
		load_deal_docs : function()
		{
			 var id = App_Deal_Details.dealDetailView.model.id;
			 if(id){
			 dealDocsView = new Base_Collection_View({
		            url: '/core/api/documents/opportunity/' + id + "/docs",
		            restKey: "document",
		            templateKey: "deal-docs",
		            individual_tag_name: 'li',
		            sortKey:"uploaded_time",
		            descending: true,
		            postRenderCallback: function(el) {
		            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
		            		 $(".document-created-time", el).timeago();
		              	})
		            }
		        });
			 dealDocsView.collection.fetch();
		        $('#dealdocs').html(dealDocsView.el);
			 }
		},
		
		load_deal_activities : function()
		{
		    var id = App_Deal_Details.dealDetailView.model.id;
		    if(id){
		    dealActivitiesView = new Base_Collection_View({
	            url: '/core/api/opportunity/' + id + "/activities",
	            templateKey: "deal-detail-activities",
	            individual_tag_name: 'li',
	            scroll_symbol:'scroll',
	            sortKey:"time",
	            descending: true,
	            cursor : true,
	            page_size : 20,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".note-created-time", el).timeago();
	              	})
	            }
	        });
		    dealActivitiesView.collection.fetch();
	        $('#dealactivities').html(dealActivitiesView.el);
		    }
		},

		load_deal_tasks : function()
		{
			 var id = App_Deal_Details.dealDetailView.model.id;
			 if(id){
			 dealTasksView = new Base_Collection_View({
		            url: '/core/api/opportunity/' + id + "/tasks",
		            restKey: "task",
		            templateKey: "deal-tasks",
		            individual_tag_name: 'li',
		            sortKey:"id",
		            descending: true,
		            postRenderCallback: function(el) {
		            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
		            		 $(".task-created-time", el).timeago();
		              	})
		              	$('li',el).each(function(){
		            		if($(this).find('.priority_type').text().trim()== "HIGH") {
		            			$(this).css("border-left","3px solid #f05050");
		            		}else if($(this).find('.priority_type').text().trim() == "NORMAL"){
		            			$(this).css("border-left","3px solid #7266ba");
		            		}else if($(this).find('.priority_type').text().trim() == "LOW") {
		            			$(this).css("border-left","3px solid #fad733");
		            		}
		            	});
		            }
		        });
			 dealTasksView.collection.fetch();
			 $('#dealtasks').html(dealTasksView.el);
			 }
		},

		load_deal_events : function()
		{
			var id = App_Deal_Details.dealDetailView.model.id;
			if(id){
			dealEventsView = new Base_Collection_View({
	            url: '/core/api/opportunity/' + id + "/events",
	            restKey: "event",
	            templateKey: "deal-events",
	            individual_tag_name: 'li',
	            sortKey:"created_time",
	            descending: true,
	            postRenderCallback: function(el) {
	            	head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
	            		 $(".event-created-time", el).timeago();
	              	});
	            	$('li',el).each(function(){
	            	if($(this).find('.priority_type').text().trim() == "High") {
            			$(this).css("border-left","3px solid #f05050");
            		}else if($(this).find('.priority_type').text().trim() == "Normal"){
            			$(this).css("border-left","3px solid #7266ba");
            		}else if($(this).find('.priority_type').text().trim() == "Low") {
            			$(this).css("border-left","3px solid #fad733");
            		}
	            	});
	            }
	        });
			dealEventsView.collection.fetch();
	        $('#dealevents').html(dealEventsView.el);
			}
		},
		
};



/** 
 * To attach the document to a contact
 * @param document_id
 * @param saveBtn
 */
function existing_deal_document_attach(document_id, saveBtn)
{
    var json = existingDealDocumentsView.collection.get(document_id).toJSON();
	
	// To get the contact id and converting into string
	var deal_id = App_Deal_Details.dealDetailView.model.id + "";
    
    // Checks whether the selected document is already attached to that contact
    if((json.deal_ids).indexOf(deal_id) < 0)
    {
    	json.deal_ids.push(deal_id);
    	saveDocument(null, null, saveBtn, false, json);
    }
    else
    {
    	saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>Linked Already</span>");
    	saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
    	return;
    }
}
/**
 * contact-details-tabs.js fetches the contact (which is in contact detail view)
 * related details (notes, tasks, deals, campaigns and mails etc..) and presents
 * in tab content as specified, when the corresponding tab is clicked. Timeline
 * tab is activated by default to show all the details as vertical time-line.
 * 
 * @module deal management
 * @author jagadeesh
 */

	/*
    get actual name and update the name of the deal
    */
 function inlineDealNameChange(e){

    	
    	var dealName = $("#inline-input").val();
    	var lastname = $("#deals-inline").text();
    	name = dealName.trim();


    	if(!name)
    	{
    		$("#inline-input").addClass("error-inputfield");
          	 return;
    	}

    	if(lastname != name)
    	{
    		name = name.trim();

    		dealNameEdit(name);
    	}

    	else
    	{
    		$("#inline-input").addClass("hidden");
			$("#deals-inline").removeClass("hidden");
			return;
    	}

    	

    }

var deal_tab_position_cookie_name = "deal_tab_position";
var id;

/**
* Deal modal actions
*/
var Deal_Modal_Event_View = Base_Model_View.extend({
    events: {
    	'click #deal-details-tab a[href="#dealnotes"]' : 'openDealNotes',
    	'click #deal-details-tab a[href="#dealrelated"]' : 'openDealContacts',
    	'click #deal-details-tab a[href="#dealactivities"]' : 'openDealActivities',
    	'click #deal-details-tab a[href="#dealdocs"]' : 'openDealDocs',
    	'click #deal-details-tab a[href="#dealtasks"]' : 'openDealTasks',
    	'click #deal-details-tab a[href="#dealevents"]' : 'openDealEvents',
    	'click #deal-owner' : 'showOwnerList',

    	'click #opportunity-actions-delete' : 'opportunityDelete',
    	'click .deal-edit-note' : 'dealNoteEdit',
    	'click .activity-delete': 'deleteActivity',

    	'click #dealshow-note' : 'dealShowNoteModal',
    	'click .deal-owner-list' : 'openDealOwnersList',
    	'click .deal-add-contact' : 'addDealContact',
    	'click .deal-detail-edit-deal' : 'editDeal',
    	'click .deal-note' : 'showDealNote',
    	'click #dealdetail-archive' : 'dealArchive',
    	'click .deal-restore-detail-view' : 'dealRestoreView',
    	'click .document-edit-deal-tab' : 'dealDocumentEdit',
    	'click .document-unlink-deal-tab' : 'dealUnlinkDocument',
    	'click .add-deal-document-select' : 'dealDocumentsList',
    	'click .add-deal-document-confirm' : 'dealAddDocumentConfirm',
    	'click .add-deal-document-cancel' : 'dealAddDocumentCancel',
    	'click .deal-add-task' : 'dealAddtask',
    	'click .task-edit-deal-tab' : 'dealEditTask',
    	'click .deal-task-delete' : 'dealDeleteTask',
    	'click .complete-deal-task' : 'dealCompleteTask',
    	'click .deal-add-event' : 'dealAddEvent',
    	'click .event-edit-deal-tab' : 'dealEditEvent',
		'click .deal-event-delete' : 'dealEditDelete', 
		'click .activity-delete' : 'deleteActivity',
		//agile-x-edit
		'click #deals-inline' : 'dealInlineEdit', 	
    	'blur #inline-input' : 'dealinlineedit',
    	'keydown #inline-input' : 'dealNameChange'
    },
    dealinlineedit : function(e){
    	inlineDealNameChange();
    },

    dealNameChange : function(e)
    {
    	if(e.keyCode == 13)
    	inlineDealNameChange();
    },

    
    

    /*deals inline edit function
    shows and hides the inline input for editing
    */
    dealInlineEdit : function(e){
    	e.preventDefault();
    	$("#deals-inline").toggleClass("hidden");
    	$("#inline-input").toggleClass("hidden");
    	if(!$("#inline-input").hasClass("hidden"))
			$("#inline-input").focus();
    },

	/**
	 * Fetches all the notes related to the deal and shows the notes collection
	 * as a table in its tab-content, when "Notes" tab is clicked.
	 */
	openDealNotes :  function(e)
	{
		e.preventDefault();

		save_deal_tab_position_in_cookie("dealnotes");
		deal_details_tab.load_deal_notes();
	},
	deleteActivity : function(e)
	{
		e.preventDefault();

		Contact_Details_Tab_Actions.deleteActivity(e);
	},

	/**
	 * Fetches all the contacts related to the deal and shows the contacts
	 * collection as a table in its tab-content, when "contacts" tab is clicked.
	 */
	openDealContacts : function(e)
	{
		e.preventDefault();
		save_deal_tab_position_in_cookie("dealrelated");
		deal_details_tab.loadDealRelatedContactsView();
	},

	/**
	 * Fetches all the notes related to the contact and shows the tasks
	 * collection as a table in its tab-content, when "Tasks" tab is clicked.
	 */
	openDealActivities : function(e)
	{
		e.preventDefault();

		save_deal_tab_position_in_cookie("dealactivities");
		deal_details_tab.load_deal_activities();
	},

	/**
	 * Fetches all the docs related to the deal and shows the docs collection as
	 * a table in its tab-content, when "Documents" tab is clicked.
	 */
	openDealDocs : function(e)
	{		e.preventDefault();
		save_deal_tab_position_in_cookie("dealdocs");
		deal_details_tab.load_deal_docs();
	},
	
	/**
	 * Fetches all the tasks related to the deal and shows the docs collection as
	 * a table in its tab-content, when "Tasks" tab is clicked.
	 */
	openDealTasks: function(e)
	{
		e.preventDefault();
		save_deal_tab_position_in_cookie("dealtasks");
		deal_details_tab.load_deal_tasks();
	},

	/**
	 * Fetches all the events related to the deal and shows the docs collection as
	 * a table in its tab-content, when "Events" tab is clicked.
	 */
	openDealEvents : function(e)
	{
		e.preventDefault();
		save_deal_tab_position_in_cookie("dealevents");
		deal_details_tab.load_deal_events();
	},

	deleteActivity: function(b) {
        b.preventDefault();
        Contact_Details_Tab_Actions.deleteActivity(b)
    },
    
	showOwnerList: function(e)
	{
		e.preventDefault();
		fill_deal_owners(undefined, undefined, function()
		{
			if(hasScope("MANAGE_DEALS") || $(this).attr("data") == CURRENT_DOMAIN_USER.id)
			{
				$('#deal-owner').css('display', 'none');
			}
			else
			{
				$("#deal_update_privileges_error_modal").modal("show");
			}
			$('#change-deal-owner-ul').css('display', 'inline-block');

			if ($('#change-deal-owner-ul').css('display') == 'inline-block')
				$("#change-owner-element").find(".loading").remove();

		});

	},


	opportunityDelete : function(e)
	{
		e.preventDefault();

		showAlertModal("delete_opportunity", "confirm", function(){
			var targetEl = $(e.currentTarget);
			var id = $(targetEl).closest('.deal_detail_delete').attr('data');

			$.ajax({ url : 'core/api/opportunity/' + id, type : 'DELETE', success : function(data)
			{
				Backbone.history.navigate("#deals", { trigger : true });
			}, error : function(response)
			{
				//alert("some exception occured please try again");
				showAlertModal(response.responseText, undefined, undefined, undefined, "Error");
			} });
		});
	},

	dealNoteEdit:  function(e)
	{

		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var note = dealNotesView.collection.get($(targetEl).attr('data'));
		console.log(note);
		deserializeForm(note.toJSON(), $("#dealnoteUpdateForm", $('#dealnoteupdatemodal')));
		fill_relation_deal($('#dealnoteUpdateForm'));
		$('#dealnoteupdatemodal').modal('show');

	},
	

	/**
	 * Shows note modal and activates contacts typeahead to its related to field
	 */
	dealShowNoteModal: function(e)
	{
		if (App_Deal_Details.dealDetailView.model.get('archived') == true)
			return;

		e.preventDefault();
		$("#deal-note-modal").modal('show');

	},

	/**
	 * Changes, owner of the contact, when an option of change owner drop down
	 * is selected.
	 */
	openDealOwnersList: function(e)
	{

		$('#change-deal-owner-ul').css('display', 'none');
		var targetEl = $(e.currentTarget);

		// Reads the owner id from the selected option
		var new_owner_id = $(targetEl).attr('data');
		var new_owner_name = $(targetEl).text();
		var current_owner_id = $('#deal-owner').attr('data');
		// Returns, if same owner is selected again
		if (new_owner_id == current_owner_id)
		{
			// Showing updated owner
			show_deal_owner();
			return;
		}

		var dealModel = new BaseModel();
		dealModel.url = '/core/api/opportunity/change-owner/' + new_owner_id + "/" + App_Deal_Details.dealDetailView.model.get('id');
		dealModel.save(App_Deal_Details.dealDetailView.model.toJSON(), { success : function(model)
		{

			$('#deal-owner').text(new_owner_name);
			$('#deal-owner').attr('data', new_owner_id);

			// Showing updated owner
			show_deal_owner();
			App_Deal_Details.dealDetailView.model = model;
			App_Deal_Details.dealDetailView.render(true)
			Backbone.history.navigate("deal/" + model.toJSON().id, { trigger : true });

		} });

	},

	addDealContact: function(e)
	{
		e.preventDefault();
		console.log(App_Deal_Details.dealDetailView.model.toJSON());
		var currentdeal = App_Deal_Details.dealDetailView.model;
		updateDeal(currentdeal);

		//setTimeout(function()
		//{
		//	$('#opportunityUpdateForm').find("input[name='relates_to']").focus();
		//}, 800);

		$('#opportunityUpdateModal').addClass('focusRelatedTo');

	},

	editDeal:  function(e)
	{
		e.preventDefault();
		console.log(App_Deal_Details.dealDetailView.model.toJSON());
		var currentdeal = App_Deal_Details.dealDetailView.model;
		updateDeal(currentdeal);

	},

	showDealNote: function(e)
	{
		e.preventDefault();

		var el1 = $("#dealnoteForm");

		// Displays contact name, to indicate the note is related to the contact
		fill_relation_deal(el1);
		$('#deal-note-modal').modal('show');
	},

	dealArchive: function(e)
	{
		e.preventDefault();

		var currentDeal = App_Deal_Details.dealDetailView.model.toJSON();
		$("#archived-deal-id", $("#deal_archive_confirm_modal")).val(currentDeal.id);
		$("#archived-deal-milestone", $("#deal_archive_confirm_modal")).val(currentDeal.milestone);
		$("#deal_archive_confirm_modal").modal('show');

	},

	dealRestoreView: function(e)
	{
		e.preventDefault();

		var currentDeal = App_Deal_Details.dealDetailView.model.toJSON();

		$("#restored-deal-id", $("#deal_restore_confirm_modal")).val(currentDeal.id);
		$("#restored-deal-milestone", $("#deal_restore_confirm_modal")).val(currentDeal.milestone);
		$("#deal_restore_confirm_modal").modal('show');

	},

	//For updating document from contact-details
	dealDocumentEdit: function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var id = $(targetEl).attr('data');
		updateDocument(dealDocsView.collection.get(id));
	},

	// For unlinking document from contact-details
	dealUnlinkDocument: function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var id = $(targetEl).attr('data');
		var json = dealDocsView.collection.get(id).toJSON();
		
		// To get the contact id and converting into string
		var deal_id = App_Deal_Details.dealDetailView.model.id + "";
		
	    // Removes the contact id from related to contacts
		json.deal_ids.splice(json.deal_ids.indexOf(deal_id),1);
		
		// Updates the document object and hides 
		var newDocument = new Backbone.Model();
		newDocument.url = 'core/api/documents';
		newDocument.save(json, {
			success : function(data) {
				dealDocsView.collection.remove(json);
				dealDocsView.render(true);
			}
		});
	},

	/**
	 * For showing new/existing documents
	 */
	dealDocumentsList: function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var el = $(targetEl).closest("div");
		$(targetEl).css("display", "none");
		el.find(".deal-document-select").css("display", "block");
		var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
	    fillSelect('document-select','core/api/documents', 'documents',  function fillNew()
		{
			el.find("#document-select > option:first").after("<option value='new'>Add New Doc</option><option style='font-size: 1pt; background-color: #EDF1F2;'disabled>&nbsp;</option>");
			el.find("#document-select > option:first").remove();
		}, optionsTemplate, false, el); 
	},

	/**
	 * For adding existing document to current contact
	 */
	dealAddDocumentConfirm: function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

	    var document_id = $(targetEl).closest(".deal-document-select").find("#document-select").val();
		var saveBtn = $(targetEl);
		
			// To check whether the document is selected or not
	    if(document_id == "")
	    {
	    	saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>This field is required.</span>");
	    	saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
	    	return;
	    }	    	
	    else if(document_id == "new")
	    {
	    	
	    	$('#uploadDocumentModal').html(getTemplate("upload-document-modal", {})).modal('show');
			
			var el = $("#uploadDocumentForm");
			// Contacts type-ahead
			agile_type_ahead("document_relates_to_contacts", el, contacts_typeahead);
			
			// Deals type-ahead
			agile_type_ahead("document_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);

	    	var deal_json = App_Deal_Details.dealDetailView.model.toJSON();
	    	var deal_name = deal_json.name;

	    	var template = Handlebars.compile('<li class="tag"  style="display: inline-block; vertical-align: middle; margin-right:3px;" data="{{id}}">{{name}}</li>');
  
		 	// Adds contact name to tags ul as li element
		 	$('.deal_tags',el).html(template({name : deal_name, id : deal_json.id}));
	    }
	    else if(document_id != undefined && document_id != null)
	    {
			if(!existingDealDocumentsView)
			{
				existingDealDocumentsView = new Base_Collection_View({ 
					url : 'core/api/documents',
					restKey : "documents",
				});
				existingDealDocumentsView.collection.fetch({
				    success: function(data){
				    		existing_deal_document_attach(document_id, saveBtn);
				    	}
			        });
			}
			else
				existing_deal_document_attach(document_id, saveBtn);
	    }

	},

	/**
	 * To cancel the add documents request
	 */
	dealAddDocumentCancel: function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var el = $(targetEl).closest("div");
		el.find(".deal-document-select").css("display", "none");
		el.find(".add-deal-document-select").css("display", "inline");
	},

	
	dealAddtask:  function(e){ 
    	e.preventDefault();
    	$('#activityTaskModal').html(getTemplate("new-task-modal")).modal('show');

		var	el = $("#taskForm");
		highlight_task();
		// Displays contact name, to indicate the task is related to the contact
		fill_relation_deal_task(el);

		agile_type_ahead("task_related_to", el, contacts_typeahead);

        agile_type_ahead("task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
		categories.getCategoriesHtml(undefined,function(catsHtml){
		   $('#type',el).html(catsHtml);
		   // Fills owner select element
		   populateUsers("owners-list", $("#taskForm"), undefined, undefined,
		     function(data) {
		      $("#taskForm").find("#owners-list").html(data);
		      $("#owners-list", el).find('option[value='+ CURRENT_DOMAIN_USER.id +']').attr("selected", "selected");
		      $("#owners-list", $("#taskForm")).closest('div').find('.loading-img').hide();     
		   });
		  });

       activateSliderAndTimerToTaskModal();
    },

    dealEditTask: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var id = $(targetEl).attr('data');
		var value = dealTasksView.collection.get(id).toJSON();

		$("#updateTaskModal").html(getTemplate("task-update-modal")).modal('show');
			loadProgressSlider($("#updateTaskForm"), function(el){
			deserializeForm(value, $("#updateTaskForm"));
			
			$('.update-task-timepicker').val(fillTimePicker(value.due));
			agile_type_ahead("task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
			categories.getCategoriesHtml(value,function(catsHtml){
			   $('#type',el).html(catsHtml);			   
				// Fills owner select element
				populateUsers("owners-list", $("#updateTaskForm"), value, 'taskOwner', function(data)
				{
					$("#updateTaskForm").find("#owners-list").html(data);
					if (value.taskOwner)
						$("#owners-list", $("#updateTaskForm")).find('option[value=' + value['taskOwner'].id + ']').attr("selected", "selected");

					$("#owners-list", $("#updateTaskForm")).closest('div').find('.loading-img').hide();
				});
			});
			// Add notes in task modal
			showNoteOnForm("updateTaskForm", value.notes);
		});
			
		// activateSliderAndTimerToTaskModal();

	},
	/**
	 * Delete functionality for tasks blocks in deal details
	 */
	dealDeleteTask: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var model = $(targetEl).parents('li').data();

		if (model && (model.toJSON().type != "WEB_APPOINTMENT" || parseInt(model.toJSON().start) < parseInt(new Date().getTime() / 1000)))
		{
			showAlertModal("delete", "confirm", function(){
				modelDelete(model, targetEl, function(){
					if(dealTasksView && dealTasksView.collection.length==0){
						$('#dealtasks').html(dealTasksView.render(true).el);
					}
				});
			});
			return;
		}
		modelDelete(model, targetEl, function(){
			if(dealTasksView && dealTasksView.collection.length==0){
				$('#dealtasks').html(dealTasksView.render(true).el);
			}
		});
		
	},

	dealCompleteTask: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		if ($(targetEl).is(':checked'))
		{
			var id = $(targetEl).attr('data');
			var that = targetEl;
			complete_task(id, dealTasksView.collection, undefined, function(data)
			{
				$(that).parent().siblings(".task-subject").css("text-decoration", "line-through");
				console.log($(that).parents('.activity-text-block').css("background-color", "#FFFAFA"));
				$(that).parent().replaceWith('<span style="margin-right:9px;"><i class="fa fa-check"></i></span>');
				dealTasksView.collection.add(data, { silent : true });
			});
		}
	},

	/**
	 * Displays activity modal with all event features,  to add a event 
	 * related to the deal in deal detail view. Also prepends the 
	 * deal name to related to field of activity modal.
	 */ 
    dealAddEvent: function(e){ 
    	e.preventDefault();

    	$('#activityModal').html(getTemplate("new-event-modal")).modal('show');

    	var	el = $("#activityForm");

		highlight_event();
		// Displays contact name, to indicate the task is related to the contact
		fill_relation_deal_task(el);
		agile_type_ahead("event_related_to", el, contacts_typeahead);
        agile_type_ahead("task_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);

    },

    // Event edit in contact details tab
	dealEditEvent: function(e)
					{
						e.preventDefault();
						var targetEl = $(e.currentTarget);

						$("#updateActivityModal").html(getTemplate("update-activity-modal"));
						
						var id = $(targetEl).attr('data');
						var value = dealEventsView.collection.get(id).toJSON();
						deserializeForm(value, $("#updateActivityForm"));

						$('.update-start-timepicker').val(fillTimePicker(value.start));
						$('.update-end-timepicker').val(fillTimePicker(value.end));

						$("#updateActivityModal").modal('show');

						

		if (value.type == "WEB_APPOINTMENT" && parseInt(value.start) > parseInt(new Date().getTime() / 1000))
		{
			$("[id='event_delete']").attr("id", "delete_web_event");
			web_event_title = value.title;
			if (value.contacts.length > 0)
			{
				var firstname = getPropertyValue(value.contacts[0].properties, "first_name");
				if (firstname == undefined)
					firstname = "";
				var lastname = getPropertyValue(value.contacts[0].properties, "last_name");
				if (lastname == undefined)
					lastname = "";
				web_event_contact_name = firstname + " " + lastname;
			}
		}
		else
		{
			$("[id='delete_web_event']").attr("id", "event_delete");
		}
		if (value.description)
		{
			var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
			$("#event_desc").html(description);
			$("textarea#description").val(value.description);
		}
		else
		{
			var desc = '<div class="row-fluid">' + '<div class="control-group form-group m-b-none">' + '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>' + '<div class="controls event_discription hide">' + '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>' + '</div></div></div>'
			$("#event_desc").html(desc);
		}
		// Fills owner select element
		populateUsersInUpdateActivityModal(value);
	},

	/**
	 * Delete functionality for events blocks in deal details
	 */
	dealEditDelete: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget)

		var model = $(targetEl).parents('li').data();

		var owner = model.get("owner_id");

	  	if(!owner && model.get("owner")){
	  		owner = model.get("owner").id;
	  	}

		if(!hasScope("MANAGE_CALENDAR") && (CURRENT_DOMAIN_USER.id != owner) && model.get("entity_type") && model.get("entity_type") == "event"){
			$("#deleteEventErrorModal").html(getTemplate("delete-event-error-modal")).modal('show');
			return;
		}

		if (model && (model.toJSON().type != "WEB_APPOINTMENT" || parseInt(model.toJSON().start) < parseInt(new Date().getTime() / 1000)))
		{
			showAlertModal("delete", "confirm", function(){
				modelDelete(model, targetEl, function(){
					if(dealEventsView && dealEventsView.collection.length==0)
						$('#dealevents').html(dealEventsView.render(true).el);
				});
			});
			return;
		}
		modelDelete(model, targetEl, function(){
			if(dealEventsView && dealEventsView.collection.length==0)
				$('#dealevents').html(dealEventsView.render(true).el);
		});
	},

});

function save_deal_tab_position_in_cookie(tab_href)
{

	var position = _agile_get_prefs(deal_tab_position_cookie_name);

	if (position == tab_href)
		return;

	_agile_set_prefs(deal_tab_position_cookie_name, tab_href);
}

function load_deal_tab(el, dealJSON)
{
	// timeline_collection_view = null;
	var position = _agile_get_prefs(deal_tab_position_cookie_name);
	if (position)
	{
		if (position == "dealactivities")
		{
			$('#deal-details-tab a[href="#dealactivities"]', el).tab('show');

			deal_details_tab.load_deal_activities();
		}
		else if (position == "dealrelated")
		{
			$('#deal-details-tab a[href="#dealrelated"]', el).tab('show');

			deal_details_tab.loadDealRelatedContactsView();
		}
		else if (position == "dealnotes")
		{
			$('#deal-details-tab a[href="#dealnotes"]', el).tab('show');

			deal_details_tab.load_deal_notes();
		}
		else if (position == "dealdocs")
		{
			$('#deal-details-tab a[href="#dealdocs"]', el).tab('show');

			deal_details_tab.load_deal_docs();
		}
		else if (position == "dealtasks")
		{
			$('#deal-details-tab a[href="#dealtasks"]', el).tab('show');

			deal_details_tab.load_deal_tasks();
		}
		else if (position == "dealevents")
		{
			$('#deal-details-tab a[href="#dealevents"]', el).tab('show');

			deal_details_tab.load_deal_events();
		}
	}
	else
	{

		$('#deal-details-tab a[href="#dealactivities"]', el).tab('show');

		deal_details_tab.load_deal_activities();
	}

}


$(function(){
 	/**
	 * Saves note model using "Bcakbone.Model" object, and adds saved data to
	 * time-line if necessary.
	 */
	$('#deal-note-modal').on('click', '#dealnote_validate', function(e)
	{

		e.preventDefault();

		// Returns, if the save button has disabled attribute
		if ($(this).attr('disabled'))
			return;

		if (!isValidForm('#dealnoteForm'))
		{
			return;
		}

		disable_save_button($(this));

		// Shows loading symbol until model get saved
		// $('#noteModal').find('span.save-status').html(getRandomLoadingImg());

		var json = serializeForm("dealnoteForm");

		console.log(json);

		saveDealNote($("#dealnoteForm"), $("#deal-note-modal"), this, json);
	});

	$('#dealnoteupdatemodal').on('click', '#dealnote_update', function(e)
	{

		e.preventDefault();

		// Returns, if the save button has disabled attribute
		if ($(this).attr('disabled'))
			return;

		// Disables save button to prevent multiple click event issues
		disable_save_button($(this));// $(this).attr('disabled', 'disabled');

		if (!isValidForm('#dealnoteUpdateForm'))
		{

			// Removes disabled attribute of save button
			enable_save_button($(this));
			return;
		}

		// Shows loading symbol until model get saved
		// $('#noteUpdateModal').find('span.save-status').html(getRandomLoadingImg());

		var json = serializeForm("dealnoteUpdateForm");

		saveDealUpdateNote($("#dealnoteUpdateForm"), $("#dealnoteupdatemodal"), this, json);

	});

});

		function initilizeDealNotesListeners()
		{
			/**
			 * "Hide" event of note modal to remove contacts appended to related to
			 * field and validation errors
			 */
			$('#deal-note-modal').off('hidden.bs.modal');
			$('#deal-note-modal').on('hidden.bs.modal', function()
			{
				// Removes appended contacts from related-to field
				$("#dealnoteForm").find("li").remove();

				// Remove value of input field
				$("#from_task", "#dealnoteForm").val("");
				$("#task_form", "#dealnoteForm").val("");

				$("#subject", "#dealnoteForm").val("");
				$("#description", "#dealnoteForm").val("");
				
				// Removes validation error messages
				remove_validation_errors('dealnoteModal');
			});
		}


	
		function saveDealNote(form, modal, element, note)
		{
			initilizeDealNotesListeners();
			console.log(note);
			var noteModel = new Backbone.Model();
			noteModel.url = 'core/api/opportunity/deals/notes';
			noteModel.save(note, { success : function(data)
			{

				// Removes disabled attribute of save button
				enable_save_button($(element));//$(element).removeAttr('disabled');

				form.each(function()
				{
					this.reset();
				});

				// Removes loading symbol and hides the modal
				//modal.find('span.save-status img').remove();
				modal.modal('hide');


				App_Deal_Details.dealDetailView.model = data;
				App_Deal_Details.dealDetailView.render(true)
				Backbone.history.navigate("deal/"+data.toJSON().id , {
		            trigger: true
		        });
				
			
				
			},
			error : function(model, err)
			{
				enable_save_button($(element));
				modal.find('span.error-status').html("<i style='color:#B94A48;'>"+err.responseText+"</i>");
				setTimeout(function()
				{
					modal.find('span.error-status').html('');
				}, 2000);
				console.log('-----------------', err.responseText);
			} });
		}
		
		function saveDealUpdateNote(form, modal, element, note)
		{

			console.log(note);
			var noteModel = new Backbone.Model();
			noteModel.url = 'core/api/opportunity/deals/notes';
			noteModel.save(note, { success : function(data)
			{

				// Removes disabled attribute of save button
				enable_save_button($(element));//$(element).removeAttr('disabled');

				form.each(function()
				{
					this.reset();
				});

				// Removes loading symbol and hides the modal
				//modal.find('span.save-status img').remove();
				modal.modal('hide');


				App_Deal_Details.dealDetailView.model = data;
				App_Deal_Details.dealDetailView.render(true)
				Backbone.history.navigate("deal/"+data.toJSON().id , {
		            trigger: true
		        });
				
			
				
			},
			error : function(model, err)
			{
				enable_save_button($(element));
				modal.find('span.error-status').html("<i style='color:#B94A48;'>"+err.responseText+"</i>");
				setTimeout(function()
				{
					modal.find('span.error-status').html('');
				}, 2000);
				console.log('-----------------', err.responseText);
			} });
		}

// Magic Menu JavaScript Document

function initializeThemeSettingsListeners(){
	$('#theme-and-layout').on('click', '#saveTheme', function(e)
	{
		e.preventDefault();
		$(".theme-save-status").css("display","none");
		var saveBtn = $(this);

		// Returns, if the save button has disabled
		// attribute
		if ($(saveBtn).attr('disabled'))
			return;

		// Disables save button to prevent multiple click
		// event issues
		disable_save_button($(saveBtn));
		var form_id = $(this).closest('form').attr("id");

		if (!isValidForm('#' + form_id)) {
			// Removes disabled attribute of save button
			enable_save_button($(saveBtn));
			return false;
		}
		var json = serializeForm(form_id);
		console.log("theme_info" + json);
		$.ajax({
			url : '/core/api/user-prefs/saveTheme',
			type : 'PUT',
			data : json,
			success : function() {
				enable_save_button($(saveBtn));
			},
			error : function() {
				enable_save_button($(saveBtn));
			}
		});
	});

	$('#theme-and-layout').on('change', '#menuPosition', function(e){
	CURRENT_USER_PREFS.menuPosition = $(this).val();
	$(".theme-save-status").css("display","inline");
	if($(this).val() == 'top')
	{
		$(".app").addClass("app-aside-dock");
		$(".fixedicons#planView,.fixedicons#helpView").removeClass('fixedicons').addClass('dockedicons');
		
	}
	else
	{
		$(".app").removeClass("app-aside-dock");
		$(".dockedicons#planView,.dockedicons#helpView").removeClass('dockedicons').addClass('fixedicons');
		var pos = $("#aside").offset();
		$(".fixedicons#planView,.fixedicons#helpView").css("left",pos.left);
		if($(this).val() == 'left')
			$("#wrap").removeClass("app-aside-folded");
		else if($(this).val() == 'leftcol')
			$("#wrap").addClass("app-aside-folded");
	}
});

$('#theme-and-layout').on('change', '#layout', function(e){
	CURRENT_USER_PREFS.layout = $(this).val();
	$(".theme-save-status").css("display","inline");
	if($(this).val() == 'fluid')
	{
		$(".app").removeClass("container");
		var pos = $("#aside").offset();
		$(".fixedicons#planView,.fixedicons#helpView").css("left",pos.left);
	}
	else if($(this).val() == 'fixed')
	{
		$(".app").addClass("container");
		var pos = $("#aside").offset();
		$(".fixedicons#planView,.fixedicons#helpView").css("left",pos.left);
	}
});

$('#theme-and-layout').on('change', '#animations', function(e){
	CURRENT_USER_PREFS.animations = $(this).is(':checked');
	$(".theme-save-status").css("display","inline");
	if($(this).is(':checked'))
	{
		$("body").removeClass("disable-anim");
		$("#theme-and-layout").removeClass("custom-animated");
	}
	else
	{
		$("body").addClass("disable-anim");

	}
});

//retrieve the current radio button value	
$('#theme-and-layout').on('change', '.magicMenu input:radio', function(e){
		CURRENT_USER_PREFS.theme = $(this).val();
		$(".theme-save-status").css("display","inline");
		var asideClassName = $(this).attr("target-aside-class");
		var logoClassName = $(this).attr("target-logo-class");
		var topBarClassName = $(this).attr("target-topbar-class");
		
		
		$(".app-aside,#navbar,.navbar-header").removeClassPrefix("bg-").removeClass("dk").removeClass("dker").removeClass("b-r");
		$(".app-aside").addClass(asideClassName);
		$(".navbar-header").addClass(logoClassName);
		$("#navbar").addClass(topBarClassName);
	});

	
}

$(function(){

// window options funda

	
/*	
$("#check-fix-head").on('click',function(){
	if( ($("#check-fix-aside").is(":checked"))  &&  ($("#check-dock-aside").is(":checked")) ) {
		$("#check-fix-head").attr("checked",true);
		return false;
	}
	if ( $(this).is(":checked") ) {
	$(".app").addClass("app-header-fixed");
	}
	else {
	$(".app").removeClass("app-header-fixed");
    }
	
	});

$("#check-fix-aside").on('click',function(){
	if ( $(this).is(":checked") ) {
	$(".app").addClass("app-aside-fixed");
	}
	else {
	$(".app").removeClass("app-aside-fixed");
    }
	if( ($(this).is(":checked"))  &&  ($("#check-dock-aside").is(":checked")) ) {
		$("#check-fix-aside").attr("checked",true);
		$("#check-fix-head").attr("checked",true);
		$(".app").addClass("app-header-fixed");
	}
	});

$("#check-dock-aside").on('click',function(){
	if ( $("#check-fix-aside").is(":checked")) {
		$("#check-fix-head").attr("checked",true);
		$(".app").addClass("app-header-fixed");
	}
	if ( $(this).is(":checked") ) {
	$(".app").addClass("app-aside-dock");
	$(".fixedicons#planView,.fixedicons#helpView").removeClass('fixedicons').addClass('dockedicons');
	}
    else {
    $(".app").removeClass("app-aside-dock");
	$(".dockedicons#planView,.dockedicons#helpView").removeClass('dockedicons').addClass('fixedicons');
	var pos = $("#aside").offset();
	$(".fixedicons#planView,.fixedicons#helpView").css("left",pos.left);
    }
});



$("#check-box-layout").live('click',function(){
	if ( $(this).is(":checked") ) {
	$(".app").addClass("container");
	var pos = $("#aside").offset();
	$(".fixedicons#planView,.fixedicons#helpView").css("left",pos.left);
	

	}
	else {
	$(".app").removeClass("container");
	var pos = $("#aside").offset();
	$(".fixedicons#planView,.fixedicons#helpView").css("left",pos.left);
	
	}
    });

// Rainbow menu funda
	
	$(".toggle-inactive").on('click',function(){
		$(this).toggleClass("active");
		$(this).parent().toggleClass("active");
		$(".magicMenu span.text-center").addClass("active");
	});
	
	*/



$.fn.removeClassPrefix = function(prefix) {
    this.each(function(i, el) {
        var classes = el.className.split(" ").filter(function(c) {
            return c.trim().lastIndexOf(prefix, 0) !== 0;
        });
        el.className = $.trim(classes.join(" "));
    });
    return this;
};



});
	 


$("#mobile-menu").on("click",function(){
	$("#aside").toggleClass("off-screen");
});

$("#mobile-menu-settings").on("click",function(){
	$("#navbar").toggleClass("show");
});
	

	 
	

$('#app-aside-folded').on('click', function(e) {
	e.preventDefault();
	/*$('.app-aside-folded-inactive .hidden-folded ,.app-aside-folded .navi > ul > li > a span').css('display','none');
	
	if ($('#wrap').hasClass("app-aside-folded") ) {
	
		setTimeout(function(){
	$(".app-aside-folded-inactive .hidden-folded,.app-aside-folded .navi > ul > li > a span").fadeIn();
	
		},600);
    
	}*/
	$('#wrap').toggleClass('app-aside-folded');
    if( $('#wrap').hasClass('app-aside-folded')) {
		console.log("folded");
		$("#app-aside-folded i").removeClass("fa-dedent");
		$("#app-aside-folded i").addClass("fa-indent");
		$(".app-aside-folded:not(.app-aside-dock) .navi > ul > li#documentsmenu > a span").text("Docs");
	}
	else {
		$("#app-aside-folded i").removeClass("fa-indent");
		$("#app-aside-folded i").addClass("fa-dedent");
		$(".navi > ul > li#documentsmenu > a span").text("Documents");
	}
	
	//contactInnerTabsInvoke();

	$('.highcharts-container').each(function(chart) {
		$(this).parent().highcharts().reflow();
	});
	
    
	});










	
$(document).ready(function(){



//addDescriptionInfo();
	
 $("#addDescriptionLink").click(function(e){
 e.preventDefault();
 $(this).hide();
   $("#addDescriptionInfo").toggle();
   });

 $("#activityTaskModal").on("click", "#taskDescriptionLink", function(e){
 e.preventDefault();
 $(this).hide();
   $("#taskDescriptionInfo").toggle();
   });

$("#activityModal").on("click", "#eventDescriptionLink", function(e){
 e.preventDefault();
 $(this).hide();
   $(".eventDescriptionInfo").toggle();
   });
//addDescriptionInfo();
	
	

   $("#contact-results li").click(function(){
   $("#mobile-menu-settings").trigger('click');
   });



   
 




 	 $('.aside-wrap').off('ul li');
	 if(agile_is_mobile_browser()){

	 /*	$('body').on('click',function(e){
		setTimeout(function(){
		if(e.target.id != 'searchText' && !$(e.target).closest('button').hasClass('search-menu-mobile'))  {
		$('.search-mobile').addClass('hide');
		$('.add-modal-mobile , #search-menu-mobile').addClass('visible-xs');
		$('.navbar-brand').removeClass('hide');
		}
		},500);
	});*/

	 	$('body').on('click','.add-modal-mobile',function(){
	 		
		if($('#aside').hasClass('off-screen')) {
			$("#mobile-menu").trigger('click');
		}
		
		});


	// search bar in mobile 
		$('#search-menu-mobile').on('click touchstart',function(){
		$('.search-mobile').removeClass('hide');
		$('.add-modal-mobile , #search-menu-mobile').removeClass('visible-xs');
		$('.navbar-brand').addClass('hide');
		}); 	



	 	$('.aside-wrap ul li').bind('touchstart',function(){
 		$('.aside-wrap ul li').removeClass('active');
 		$(this).addClass('active');
 		}).bind('touchleave touchend',function(){
 			setTimeout(function(){
 		$('.aside-wrap ul li').removeClass('active');
 		},500);
 		});

 		
		}

	$('#menu1 a').click(function(e){
		console.log(e.target);
	});	

	
	

	if(( $(window).width() ) < 768 ) {


	// if the tabs are in wide columns on larger viewports
    $('.content-tabs').tabCollapse();

    // initialize tab function
    $('.nav-tabs a').click(function(e) {
        e.preventDefault();
        $(this).tab('show');
    });

    $('#navbar').removeClass('bg-white-only');

	/*$('body').on('click','#mobile-dropdown-click-sort',function(){
			$("#contact-sort-views").css("display","block");
   	return false;
	});

	 $('body').on('click','#view-list .dropdown-toggle' , function(){
         $("#contact-sort-views").css("display","none");
    });
   	
   	$('body').on('click','#contact-sort-views',function(){
        $(this).css('display','none');
    });	*/

	/*$('#recent-menu').off('li');
	$('#recent-menu').on('click', 'li', function(e){
		e.preventDefault();
		$('#mobile-menu-settings').trigger('click');
	});
*/

	
	$('body').on('mousedown','.navi-wrap li a , #navbar li a',function(e){
		e.preventDefault();
		$(this).css('opacity','0.5');
	});

	$('body').on('mouseup','.navi-wrap li a , #navbar li a',function(e){
		e.preventDefault();
		$(this).css('opacity','1');
	});

	$('body').on('touchstart','.magicMenu .i-checks',function(e){
		e.preventDefault();
		$(this).find('input[type="radio"]').trigger('click');
	});

   $('body').on('touchstart','.i-checks',function(e){
   	e.preventDefault();
   $(this).find('input[type="checkbox"]').trigger('click');
   });

   $('body').on('click','#mobile-menu-settings',function(){
    if($('#navbar').hasClass('show')){
    	$('body').css('overflow-y','hidden');
    }
    else {
    	$('body').css('overflow-y','auto');
    }
	});

    $('.agile-menu .fa-history').removeClass('text-md  text-muted');
   
   	$('body').on('click','#navbar li a:not(".dropdown-toggle")',function(){
   		$('body').css('overflow-y','auto');
   	});
   


	$('body').on('click','.navbar-brand',function(){
     $("#navbar").removeClass('show');
     $("#aside").removeClass('off-screen');
     $('body').css('overflow-y','auto');
	});	
	
	$(".navi-wrap li a").click(function(){
	  $("#mobile-menu").delay(2000).trigger("click");
	});
	

   $("#mobile-menu-settings").on("click",function(){
   if( $("#aside").hasClass("off-screen") ) {
   $("#aside").removeClass("off-screen");
   }
   });

  

   $("#searchText").keyup(function(e){
    if(e.which == 13) {
   	$("#mobile-menu-settings").trigger('click');
   }
   });


   $("#mobile-menu").on("click",function(){
   if( $("#navbar").hasClass("show")) {
   	$("#navbar").removeClass("show");
   	$('body').css('overflow-y','auto');
   }
   });

   $("#navbar li a:not(.dropdown-menu)").on("click" , function(){
   if($(this).hasClass("dropdown-toggle")) {
	
    }
   else {
   	$("#navbar").removeClass("show");
   }
   });

   $("#documentsmenu span").text("Documents");
   
   }

	$(".person").on("click", function(e){
		e.preventDefault();
		addContactBasedOnCustomfields();
		
	});

	$("#referrals_link").on("click", function(e){
		e.preventDefault();
		Agile_GA_Event_Tracker.track_event("Refer");
		load_facebook_lib_for_referrals();
		$.ajax({
			url : 'core/api/refer',
			type : 'GET',
			dataType : 'json',
			success : function(data){
				REFER_DATA = data;
				getTemplate("refer-modal", {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#referModal').html($(template_ui));
					getTemplate("refer-modal-body", data, undefined, function(template_ui1){
						if(!template_ui1)
							  return;
						$('#referModal').find(".modal-body").html($(template_ui1));
						$('#referModal').modal("show");
					}, null);
				}, null);
			}
		});
		
	});

    $('body').on('click', function (e) {
	    $('.popover').each(function () {
	        //the 'is' for buttons that trigger popups
	        //the 'has' for icons within a button that triggers a popup
	        if ((!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0 && !e.target.closest(".need_help")) || e.target.hasAttribute("rep")) {
	            $(this).popover('hide');
	        }
	    });
	});
	// initializing need help popover for header page
   $(".need_help").popover({ placement : 'left',
					html:true,
					container: 'body'
				}).on("click", function(){
						var $this = $('.popover').find("#need_help_header");
						$this.closest(".popover").addClass("custom_popover");

    			   }); 

   });


//checks if there are any custom fields and if if present navigates to contact-add page otherwise opens person-modal
function addContactBasedOnCustomfields(){
 	$.ajax({
				url : 'core/api/custom-fields/required/scope?scope=CONTACT',
				type : 'GET',
				dataType : 'json',
				success : function(data){
					if(data.length > 0)
					{
						Backbone.history.navigate("contact-add" , {trigger: true});
						
					}
					else
						$("#personModal").modal("show");
				}
			});
 }









	
	
	
	
	
/**
 * Deserialize.js It deserializes the form with the data, it is used while
 * editing data, it pre fills the form with the data to be edited.
 * 
 * deserializeForm(data, form) function iterates through data and finds the
 * element with respect to the name attribute of the field to fill the basic
 * fields i.e., input field, check box, select filed. This function includes
 * functionalities to deserialize the fields designed with custom functionality.
 * 
 * @param data
 *            data to be filled in form
 * @param form
 *            html form element
 */
function deserializeForm(data, form)
{

	// Iterates through the data(which is to be populated in the form) and finds
	// field elements in the form based on the name of the field and populates
	// it. i represents key of the map, el is the value corresponding to key

	// Reset tags html
    // $(form).find(".contacts.tags").html("");

	$
			.each(
					data,

					function(i, el)
					{

						// Finds the element with name attribute same as the key
						// in the JSON data
						var fel = form.find('*[name="' + i + '"]'), type = "", tag = "";

						// If Fields exist with the field name, process the
						// fields to fill the data in the form
						if (fel.length > 0)
						{

							// Reads the tag name of the field
							tag = fel[0].tagName.toLowerCase();

							// If tag of the element is of type select of
							// textarea fills the data
							if (tag == "select" || tag == "textarea")
							{ // ...
								$(fel).val(el);
							}

							/*
							 * If tag of the field is input type, checks whether
							 * input field is a date field, to generate date
							 * based on epoch time and fills in the input
							 * field(date fields uses bootstrap datepicker in
							 * the fileds)
							 */
							else if (tag == "input")
							{
								type = $(fel[0]).attr("type");

								/*
								 * If field has class date, calculates the date
								 * and fills in the input field, formats with
								 * datepicker
								 */
								if (fel.hasClass('date'))
								{
									try
									{
										fel.val(getDateInFormatFromEpoc(el));
									}
									catch (err)
									{

									}

									fel.datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY});

								}

								/*
								 * If type of the field is text of password or
								 * hidden fills the data
								 */
								else if (type == "text" || type == "password" || type == "hidden" || type == "number" || type == "url")
								{
									fel.val(el);
								}
								else if (tag == "select")
								{
									fel.val(el).trigger('change');
								}

								// Checks the checkbox if value of the filed is
								// true
								else if (type == "checkbox")
								{
									if (el)
									{
										if (el == true)
											fel.attr("checked", "checked");
									}
									else
									{
										fel.removeAttr("checked");
									}
								}

								/*
								 * If type of the field is "radio", then filters
								 * the field based on the value and checks it
								 * accordingly
								 */
								else if (type == "radio")
								{
									fel.filter('[value="' + el + '"]').attr("checked", "checked");
								}
							}

							/*
							 * Deserialize multiselect, select box to select
							 * multiple values, used for contact custom views.
							 * This is for the fields which uses
							 * jquery.multi-select.js, it provides multiSelect()
							 * function to fill the select
							 */
							else if (fel.hasClass('multiSelect') && tag == 'ul')
							{

								/*
								 * Iterates through options of the select and
								 * call multiSelect function to select the
								 * option
								 */
								$.each(el, function(index, option)
								{
									$('#multipleSelect', form).multiSelect('select', option);
								});
							}


							/*
							 * Deserialize tags, tags are represented by list
							 * elements prepended the respective input field. If
							 * field has class tagsinput and tag is ul and
							 * attribute of the field is contacts, then is field
							 * is considered as the tags field, it de-serializes
							 * the contact tags
							 */
							else if (fel.hasClass('tagsinput') && tag == "ul" && fel.hasClass('contacts'))
							{
								// Iterates through contacts to create a tag
								// element for each contact
								$
										.each(
												data.contacts,

												function(index, contact)
												{
													var tag_name;

													/*
													 * tag_id represents
													 * contact.id, values of the
													 * tags(li) are contact ids
													 */
													var tag_id = contact.id;

													/*
													 * tag_name represent the
													 * name of the contact
													 * first_name and last_name
													 */
													tag_name = getContactName(contact);
													
													var hrefLink = '#contact/'+contact.id;
													if(contact.type == 'COMPANY')
														hrefLink = '#company/'+contact.id;

													/*
													 * Creates a tag for each
													 * contact and appends to
													 * tags input field with
													 * class "tagsinput", tag
													 * value is contact id and
													 * name of li element is
													 * contact full name
													 */	
													 var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}"  style="display: inline-block; "><a class="text-white v-middle" href="{{link}}">{{name}}</a><a class="close m-l-xs" id="remove_tag">&times</a></li>');

												 	// Adds contact name to tags ul as li element
												 	fel.append(template({name : tag_name, id : tag_id, link : hrefLink}));

												});
							}

							/*
							 * Deserialize related deals, related deals are
							 * represented by list deals prepended the
							 * respective input field. If field has class
							 * dealtagsinput and deal_tag is ul and attribute of
							 * the field in an entity, then this field is
							 * considered as the tags field, it de-serializes
							 * the related deals.
							 */
							else if (fel.hasClass('tagsinput') && tag == "ul" && fel.hasClass('deals'))
							{
								// Iterates through contacts to create a tag
								// element for each contact
								$
										.each(
												data.deals,

												function(index, deal)
												{
													var tag_name;

													/*
													 * tag_id represents
													 * contact.id, values of the
													 * tags(li) are contact ids
													 */
													var tag_id = deal.id;

													/*
													 * tag_name represent the
													 * name of the contact
													 * first_name and last_name
													 */
													tag_name = deal.name.split(" ").join("");

													/*
													 * Creates a tag for each
													 * contact and appends to
													 * tags input field with
													 * class "tagsinput", tag
													 * value is contact id and
													 * name of li element is
													 * contact full name
													 */
													 var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}"><a href="#deal/{{id}}" class="text-white v-middle">{{name}}</a><a class="close m-l-xs" id="remove_tag">&times</a></li>');

												 	// Adds contact name to tags ul as li element
												 	fel.append(template({name : tag_name, id : tag_id}));
												});
							}

							/*
							 * Deserialize multiselect, select box to select
							 * multiple values, used for contact custom views.
							 * This is for the fields which uses
							 * jquery.multi-select.js, it provides multiSelect()
							 * function to fill the select
							 */
							else if (fel.hasClass('multiSelect') && tag == 'ul')
							{

								/*
								 * Iterates through options of the select and
								 * call multiSelect function to select the
								 * option
								 */
								$.each(el, function(index, option)
								{
									$('#multipleSelect', form).multiSelect('select', option);
								});
							}

							/**
							 * Deserialize multiple checkboxes.
							 */
							else if (fel.hasClass('multiple-checkbox'))
							{

								/*
								 * Iterates through options of the select and
								 * call multiSelect function to select the
								 * option
								 */
								for (var i = 0; i < el.length; i++)
								{
									$('input:checkbox[value="' + el[i] + '"]', fel).attr("checked", "checked");
								}
							}

							else if (fel.hasClass('multiple-checkbox-adminprefs'))
							{

								/*
								 * Iterates through options of the select and
								 * call multiSelect function to select the
								 * option
								 */
								for (var i = 0; i < el.length; i++)
								{
									$('input:checkbox[value="' + el[i] + '"]', fel).attr("checked", "checked");
								}
							}

							/*
							 * Deserialize chained select, chained select is
							 * used for creating filters. It is logical chaining
							 * of the input fields, If form contains an element
							 * with class "chainedSelect" the deserializes the
							 * chained select. Chained select fields can be
							 * multiple, if value include multiple rules a
							 * chained select field should is added to the form
							 * and populates with the value
							 */
							else if (fel.hasClass('chainedSelect'))
							{

								// deserializeChainedSelect(form, el);
							}
						}

					});
}





function deserializecontactsForm(data, form)
{

	$.each(data,function(i, el)
					{
						var fel = form.find('*[name="' + el + '"]'), type = "", tag = "";

						// If Fields exist with the field name, process the
						// fields to fill the data in the form
						if (fel.length > 0)
						{

							$('input:checkbox[value="' + el + '"]', form).attr("checked", "checked");
						}
					});
}

// To deserialize multiple forms in content
/**
 * Desrializes the multiple forms, It calls deserializeForm for each form in the
 * element passed. Called from base-model when there are multiple forms with
 * single save option.
 * 
 * @param data
 *            data to be filled in forms
 * @param form
 *            html element with multiple forms
 */
function deserializeMultipleForms(data, form)
{
	// Iterates through each form element in the form and calls
	// deseriazlie of each form with respective data element
	// based on key(i.e., name of the form)
	$.each(form, function(index, form_element)
	{
		// Reads the name of the form element
		var key = $(form_element).attr('name');

		// If form have attribute name deserializes with particular object
		if (key && data[key])
		{
			deserializeForm(data[key], $(form_element));
		}

		// If data with the key is not available then calls
		// deserialize on the data directly, since form values
		// can be directly available in the JSON object
		else
			deserializeForm(data, $(form_element));
	});
}

function deserializeChainedSelect(form, el, el_self)
{

	// Iterates through JSON array of rules, to fill
	// a chained select
	$.each(el, function(index, data)
	{

		// Finds the rule html element
		var rule_element = ($(form).find('.chained'))[0];

		/*
		 * If more than one rule clones the fields and relate with
		 * jquery.chained.js
		 */
		if (index > 0)
		{
			var parent_element = $(rule_element).parent();

			/*
			 * Gets the Template for input and select fields
			 */
			rule_element = $($(el_self).clone().find('.chained'))[0];

			// Add remove icon for rule
			$(rule_element).find("i.filter-contacts-multiple-remove").css("display", "inline-block");

			var remove_icon = $(rule_element).find("i.filter-contacts-multiple-remove").css("display", "inline-block");

			// Loads jquery chained plugin for chaining
			// the input fields
			// head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js',

			// function ()
			// {

			/*
			 * Chains dependencies of input fields with jquery.chained.js based
			 * on the rule element
			 */
			chainFilters(rule_element);

			$(parent_element).append(rule_element);
			deserializeChainedElement(data, rule_element);

			// });

			return;
		}

		deserializeChainedElement(data, rule_element);
	})
}

function deserializeChainedElement(data, rule_element)
{
	$(rule_element).removeClass('hide');
	// hide campaign status filter.
	/*
	 * if(data && data.LHS && data.LHS != 'campaign_status') {
	 * $(rule_element).find('#LHS
	 * select').find("optgroup[label='Activities']").remove(); }
	 */
	$.each(data, function(i, value)
	{
		var input_element = ($(rule_element).find('*[name="' + i + '"]').children())[0];
		if (!input_element)
			return;

		// If input field set is value for input field, checks it chained select
		// elements
		// date fields should be filled with date
		if (input_element.tagName.toLowerCase() == "input")
		{

			// Fills date in to fields and initialize datepicker on the field
			if ($(input_element).hasClass('date'))
			{
			//	value = getLocalTimeFromGMTMilliseconds(value);

				$(input_element).val(getDateInFormatFromEpocForContactFilters(value));


				$(input_element).datepicker({ format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY });


				$(input_element).datepicker('update');

				return;
			}
			if (($(input_element).closest('td').siblings('td.lhs-block').find('option:selected').attr("field_type") == "CONTACT" || $(input_element).closest('td').siblings('td.lhs-block').find('option:selected').attr("field_type") == "COMPANY") && value != "Contact" && value != "Company")
			{
				var referenceContactModel = Backbone.Model.extend({ url : '/core/api/contacts/references?references='+value });
				var model = new referenceContactModel();
				model.fetch({
					success : function(data){
						$(input_element).val(getPropertyValue(data.get(0).properties, "first_name"));
					}
				});
				return;
			}
			$(input_element).val(value);
			return;
		}

		// Gets related select field
		var option_element = $("option", input_element);

		// Iterates through options in select field
		$.each(option_element, function(index, element)
		{
			// Selects the option
			if ($(element).prop('value') == value)
			{
				$(element).attr("selected", "selected");
				var url = $(element).attr("url");
				if (url)
				{
					$(element).attr("data", data.RHS);
					console.log($(element));
				}
				$(input_element).trigger("change");
				return;
			}
		});
	});

}

function deserializeChainedElementWebrule(data, rule_element)
{
	$.each(data, function(i, value)
	{
		if (value.value)
			value = value.value;
		var input_element_set = $(rule_element).find('*[name="' + i + '"]').children();

		var input_element = input_element_set[0];
		if (!input_element)
			return;

		var tag_name = input_element.tagName.toLowerCase();
		if (tag_name != "input" && tag_name != "textarea" && tag_name != "select" && input_element_set.length > 1)
			$.each(input_element_set, function(index, input)
			{
				if (index == 0)
					return;
				tag_name = input.tagName.toLowerCase();
				if (tag_name == "input" || tag_name == "textarea" || tag_name == "select")
				{
					input_element = input;
					return false;
				}

			})

		if (!input_element)
			return;

		// If input field set is value for input field, checks it chained select
		// elements
		// date fields should be filled with date
		if (input_element.tagName.toLowerCase() == "input" || input_element.tagName.toLowerCase() == "textarea")
		{
			$(input_element).val(value);
			if ($(input_element).hasClass('custom_html'))
			{

				if (value.value)
				{
					$(input_element).val(value.value);
				}
				// setupHTMLEditor($(input_element), value.value);
				// }
				// else
				// setupHTMLEditor($(input_element), value);
			}

			return;
		}

		// Gets related select field
		var option_element = $("option", input_element);

		// Iterates through options in select field
		$.each(option_element, function(index, element)
		{
			// Selects the option
			if ($(element).prop('value') == value)
			{
				if ((value == "UNSUBSCRIBE_CAMPAIGN" || value == "ASSIGN_CAMPAIGN") && data['RHS'])
				{
					$(element).attr('data', data['RHS']);
				}
				$(element).attr("selected", "selected");
				$(input_element).trigger("change");
				return;
			}
		});
	});
}

function deserializeChainedSelect1(form, el, element)
{

	var self = $(element).find('.webrule-actions')[0];

	var rule_element_default = $(self).html();

	// Finds the rule html element
	var rule_element = ($(form).find('.webrule-actions'))[0];

	// Iterates through JSON array of rules, to fill
	// a chained select
	$.each(el, function(index, data)
	{

		/*
		 * If more than one rule clones the fields and relate with
		 * jquery.chained.js
		 */
		if (index > 0)
		{

			/*
			 * Gets the Template for input and select fields
			 */

			// Loads jquery chained plugin for chaining
			// the input fields
			// head.js('lib/agile.jquery.chained.min.js',
			// function ()
			// {
			var new_rule_element = $(rule_element_default).clone();

			// Add remove icon for rule
			$(new_rule_element).find("i.webrule-multiple-remove").css("display", "inline-block");

			var actions = [];
			actions.push(data);
			/*
			 * Chains dependencies of input fields with jquery.chained.js based
			 * on the rule element
			 */
			chainWebRules(new_rule_element, el, false, actions);

			deserializeChainedElementWebrule(data, new_rule_element);

			$(rule_element).append(new_rule_element);

			// });
			// return;
			return;
		}

		deserializeChainedElementWebrule(data, rule_element);
	})
}

function deserializeLhsFilters(element, data)
{
	var json_object = JSON.parse(data);
	var tagsConditionsCount = 0;
	var campaignConditionsCount = 0;
	$.each(json_object.rules, function(index, filter)
	{
		var LHS = filter.LHS;
		var CONDITION = filter.CONDITION;
		var RHS_VALUE = filter.RHS;
		var RHS_NEW_VALUE = filter.RHS_NEW;
		var fieldName = LHS.replace(/ +/g, '_');
		fieldName = fieldName.replace(/#/g, '\\#').replace(/@/g, '\\@');
		var currentElemnt = $(element).find('#' + fieldName + '_div');
		$('.custom_contact').each(function(){
			if ($(this).attr("name") == LHS)
			{
				var that = this;
				var referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+RHS_VALUE, sort_collection : false });

				referenceContactsCollection.collection.fetch({
					success : function(data){
						var name = "";
						if(getPropertyValue(data.get(RHS_VALUE).get("properties"), "first_name")){
							name += getPropertyValue(data.get(RHS_VALUE).get("properties"), "first_name");
						}
						if(getPropertyValue(data.get(RHS_VALUE).get("properties"), "last_name")){
							name += " "+getPropertyValue(data.get(RHS_VALUE).get("properties"), "last_name");
						}
						$(that).parent().find("input").val(name);
						$(that).parent().find("input").attr("data", RHS_VALUE);
						hideTransitionBar();
					}
				});
			}
		});
		$('.custom_company').each(function(){
			if ($(this).attr("name") == LHS)
			{
				var that = this;
				var referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+RHS_VALUE, sort_collection : false });

				referenceContactsCollection.collection.fetch({
					success : function(data){
						$(that).parent().find("input").val(getPropertyValue(data.get(RHS_VALUE).get("properties"), "name"));
						$(that).parent().find("input").attr("data", RHS_VALUE);
						hideTransitionBar();
					}
				});
			}
		});
		if (LHS == 'tags' || LHS == 'campaign_status')
		{
			$('#' + LHS + '_div').parent().find('a').addClass('bold-text');
			$('#' + LHS + '_div').removeClass('hide');
			$('#' + LHS + '_div').prev().find('i').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o');
			if ((tagsConditionsCount == 0 && LHS == 'tags') || (campaignConditionsCount == 0 && LHS == 'campaign_status'))
			{
				currentElemnt = $('#' + LHS + '-lhs-filter-table').find("div.lhs-contact-filter-row:last")
				$('#' + LHS + '_div').prev().find('i').toggleClass('fa-plus').toggleClass('fa-minus');
			}
			else
			{
				var htmlContent = $('#' + LHS + '-lhs-filter-table').find("div.hide.master-" + LHS + "-add-div").clone();
				htmlContent.removeClass('hide').addClass('lhs-contact-filter-row');
				addTagsDefaultTypeahead(htmlContent);
				$(htmlContent).appendTo('#' + LHS + '-lhs-filter-table');
				currentElemnt = $('#' + LHS + '-lhs-filter-table').find("div.lhs-contact-filter-row:last");
			}
			if (LHS == 'tags')
			{
				tagsConditionsCount++;
			}
			if (LHS == 'campaign_status')
			{
				campaignConditionsCount++;
			}
		}
		else
		{
			$(currentElemnt).prev().find('i').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o');
		}
		$(currentElemnt).parent().find("a#lhs-filters-header").addClass('bold-text');
		$(currentElemnt).find('a.clear-filter-condition-lhs').removeClass('hide');
		$(currentElemnt).removeClass('hide');
		$(currentElemnt).find('[name="CONDITION"]').val(CONDITION);
		$(currentElemnt).find('[name="CONDITION"]').trigger('change');
		var RHS_ELEMENT = $(currentElemnt).find('.' + CONDITION).find('#RHS').children();
		var RHS_NEW_ELEMENT = $(currentElemnt).find('.' + CONDITION).find('#RHS_NEW').children();
		if ($(RHS_ELEMENT).hasClass("date"))
		{
			RHS_VALUE = getLocalTimeFromGMTMillisecondsforDynamicFilters(RHS_VALUE);

			$(RHS_ELEMENT).val(getDateInFormatFromEpoc(RHS_VALUE));
			$(RHS_ELEMENT).attr('prev-val', getDateInFormatFromEpoc(RHS_VALUE));
		} else {

			$(RHS_ELEMENT).val(RHS_VALUE);
			$(RHS_ELEMENT).attr('prev-val', RHS_VALUE);
		}
		if (RHS_NEW_ELEMENT)
		{
			if ($(RHS_NEW_ELEMENT).hasClass("date"))
			{
				RHS_NEW_VALUE = getLocalTimeFromGMTMillisecondsforDynamicFilters(RHS_NEW_VALUE);

				$(RHS_NEW_ELEMENT).val(getDateInFormatFromEpoc(RHS_NEW_VALUE));
				$(RHS_NEW_ELEMENT).attr('prev-val', getDateInFormatFromEpoc(RHS_NEW_VALUE));
			} else {

				$(RHS_NEW_ELEMENT).val(RHS_NEW_VALUE);
				$(RHS_NEW_ELEMENT).attr('prev-val', RHS_NEW_VALUE);
			}
		}

	});
	if(json_object.or_rules)
	{
		$('.custom_contacts').each(function(){
			var referenceContactIds = "";
			var referenceContactIdsArray = [];
			var that = this;
			$.each(json_object.or_rules, function(index, filter){
				var LHS = filter.LHS;
				var CONDITION = filter.CONDITION;
				var RHS_VALUE = filter.RHS;
				var RHS_NEW_VALUE = filter.RHS_NEW;
				var fieldName = LHS.replace(/ +/g, '_');
				fieldName = fieldName.replace(/#/g, '\\#').replace(/@/g, '\\@');
				var currentElemnt = $(element).find('#' + fieldName + '_div');
				if($(that).attr("name") == LHS)
				{
					referenceContactIds += filter.RHS + ",";
					referenceContactIdsArray.push(filter.RHS);

					$(currentElemnt).parent().find("a#lhs-filters-header").addClass('bold-text');
					$(currentElemnt).find('a.clear-filter-condition-lhs').removeClass('hide');
					$(currentElemnt).removeClass('hide');
					$(currentElemnt).find('[name="CONDITION"]').val("IN");
					$(currentElemnt).find('[name="CONDITION"]').trigger('change');
					$(currentElemnt).prev().find('i').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o');
				}
			});
			if(referenceContactIds)
			{
				var referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });

				referenceContactsCollection.collection.fetch({
					success : function(data){
						$.each(referenceContactIdsArray, function(index){
							var contactId = referenceContactIdsArray[index];
							var name = "";
							if (getPropertyValue(data.get(contactId).get("properties"), "first_name")){
								name = getPropertyValue(data.get(contactId).get("properties"), "first_name");
							}
							if (getPropertyValue(data.get(contactId).get("properties"), "last_name")){
								name += " "+getPropertyValue(data.get(contactId).get("properties"), "last_name");
							}
 							$(that).append('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+data.get(contactId).id+'"><a href="#contact/'+data.get(contactId).id+'" class="text-white v-middle">'+name+'</a><a class="close m-l-xs" id="remove_contact_in_lhs">×</a></li>');
						});
						hideTransitionBar();
					}
				});
			}
			
		});

		$('.custom_companies').each(function(){
			var referenceContactIds = "";
			var referenceContactIdsArray = [];
			var that = this;
			$.each(json_object.or_rules, function(index, filter){
				var LHS = filter.LHS;
				var CONDITION = filter.CONDITION;
				var RHS_VALUE = filter.RHS;
				var RHS_NEW_VALUE = filter.RHS_NEW;
				var fieldName = LHS.replace(/ +/g, '_');
				fieldName = fieldName.replace(/#/g, '\\#').replace(/@/g, '\\@');
				var currentElemnt = $(element).find('#' + fieldName + '_div');
				if($(that).attr("name") == LHS)
				{
					referenceContactIds += filter.RHS + ",";
					referenceContactIdsArray.push(filter.RHS);

					$(currentElemnt).parent().find("a#lhs-filters-header").addClass('bold-text');
					$(currentElemnt).find('a.clear-filter-condition-lhs').removeClass('hide');
					$(currentElemnt).removeClass('hide');
					$(currentElemnt).find('[name="CONDITION"]').val("IN");
					$(currentElemnt).find('[name="CONDITION"]').trigger('change');
					$(currentElemnt).prev().find('i').toggleClass('fa-plus-square-o').toggleClass('fa-minus-square-o');
				}
			});
			if(referenceContactIds)
			{
				var referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });

				referenceContactsCollection.collection.fetch({
					success : function(data){
						$.each(referenceContactIdsArray, function(index){
							var contactId = referenceContactIdsArray[index];
 							$(that).append('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+data.get(contactId).id+'"><a href="#company/'+data.get(contactId).id+'" class="text-white v-middle">'+getPropertyValue(data.get(contactId).get("properties"), "name")+'</a><a class="close m-l-xs" id="remove_contact_in_lhs">×</a></li>');
						});
						hideTransitionBar();
					}
				});
			}
			
		});
	}
	
}


var Form_Collection_Events = Base_Collection_View.extend({

	events: {
		'click .codeshare' : 'codePublish',
	},

	codePublish : function(e){
		
		$("#modal-backdrop").hide();
		e.preventDefault();

		//full source code
		var $codeShareModalEl = $("#codeShareModal");
		
		getTemplate("formbuilder-codeshare",{}, undefined, function(ui){
			$codeShareModalEl.html(ui).modal("show");
		 	
		 	var currentModel = App_Forms.formsListView.collection.get($(e.currentTarget).data("formid"));
		 	//addding form id in source code
		 	currentModel.attributes.formHtml=currentModel.get("formHtml").replace("name=\"_agile_form_id\" value=\"\">", "name=\"_agile_form_id\" value=\""+currentModel.id+"\">");
		 	$codeShareModalEl.find("#fullsourceArea").text(currentModel.get("formHtml"));

		 	//permanent link
		 	var link = window.location.protocol + "//" +window.location.host+ "/forms/"+$(e.currentTarget).data("formid");
		 	$codeShareModalEl.find("#linkArea").text(link);

		 	//iframe code
		 	var iframe =  "<iframe width=\"100%\" height=\"100%\" src=\""+link+"\" frameborder=\"0\"></iframe>";
		 	$codeShareModalEl.find("#iframeArea").text(iframe);

		 	//embed code
		 	var embed = "<div id=\""+window.location.hostname.split(".")[0]+"_"+$(e.currentTarget).data("formid")+"\" class=\"agile_crm_form_embed\"><span style=\"display:none\">Fill out my <a href=\""+link+"\">online form</a></span></div>";
			$codeShareModalEl.find("#embedCodeArea").text(embed);
		});

	},
});

$('body').on('mouseenter','#forms-model-list tr', function(e){
         $(this).find('#formcode_manager').removeClass('hide');
    });

$('body').on('mouseleave','#forms-model-list tr', function(e){
         $(this).find('#formcode_manager').addClass('hide');
    });

$('#codeShareModal').on('focus','.form-control',function(){
	var $this = $(this);
    $this.select();

    // Work around Chrome's little problem
    $this.mouseup(function() {
        // Prevent further mouseup intervention
        $this.unbind("mouseup");
        return false;
    });
});
/**
 * Serialize.js is used to serialize the forms, It returns a map, with field
 * values in form mapped against field names in the form as keys. It uses jquery
 * serializeArray method to serialize field value, and also provides custom
 * serializations for fields, to get custom values form the fields.
 * 
 * @param form_id
 *            Sends form id to be serialized
 * @returns JSON returns serialized form values
 */

function serializeForm(form_id) {
	var arr = $('#' + form_id).serializeArray(), obj = {};

	/*
	 * Serializes check box, though serialization for check box is available in
	 * SerializeArray which return "on", if checked. Since it is required to
	 * return true, if check box field is checked, so serialization is
	 * customized for checkbox.
	 */
	arr = arr.concat($('#' + form_id + ' input[type=checkbox]').map(function() {
		return {
			"name" : this.name,
			"value" : $(this).is(':checked')
		}
	}).get());

	// Change the dates properly from human readable strings to epoch
	/*
	 * Date fields, fields html elements with class "date" are serialized
	 * returns epoch time.
	 */
	arr = arr.concat($('#' + form_id + ' input.date').map(function() {
		if(CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1)
			return {
				"name" : this.name,
				"value" : getFormattedDateObjectWithString(this.value).getTime() / 1000
			};
		else
			return {
				"name" : this.name,
				"value" : getFormattedDateObjectWithString(this.value).getTime() / 1000
			};
	}).get());
	
	arr = arr.concat($('#' + form_id + ' select.multi-select').map(function() {
		console.log($(this).val());
		return {
			"name" : this.name,
			"value" : $(this).val()
		};
	}).get());
	console.log(arr);

	
	//Included to set content editable data
	arr = arr.concat($('#' + form_id + ' div[contenteditable="true"]').map(function() {

		var $editable_div = $('div[contenteditable="true"]');

		return {
			"name" : $editable_div.attr('data-name'),
			"value" : $editable_div.html()
		};
	}).get());

	// Serialize cc_emails
	arr = arr.concat($('#' + form_id + ' [name="cc_emails"]').map(function() {

        var array = [];
        $.each($(this).children(), function(g, h) {

    		if($(h).attr("data"))
        		array.push(($(h).attr("data")).toString());
	    });

	    return { name: 'cc_emails', value: array };

	}).get());

	// Serialize sortable widget data
	arr = arr.concat($('#' + form_id + ' .selected_columns').map(function() {

	    return { name: $(this).attr('name'), value: $(this).sortable("toArray") };

	}).get());

	//Serialize attachments list
	//arr = arr.concat(Ticket_Attachments.serializeList(form_id));

	arr = arr.concat($('#' + form_id + ' .array-input-fields').map(function() {
		console.log($(this).val());
		return {
			"name" : this.name,
			"value" : $(this).val()
		};
	}).get());


	// Serialize tags
	arr = arr.concat(get_tags(form_id));

	// Serialize notes
	arr = arr.concat(get_notes(form_id));
	
	// Serialize tags
	arr = arr.concat(get_related_deals(form_id));
	
	/*
	 * Multiple select, If field is of type muti select then this returns set of
	 * values selected with the name of the field. To use this multi select,
	 * field element should have a class "multiSelect" and value in ms-value/
	 * Multi select is used for creating a custom view, it uses
	 * jquery.multiselect
	 */
	arr = arr.concat($('#' + form_id + ' .multiSelect').map(function() {
		var fields_set = [];

		// Gets list of options, selected and pushes the field values in to an
		// array fields_set
		$.each($(this).children('li'), function(index, data) {
			fields_set.push(($(data).attr('ms-value')))
		});

		// The array of selected values are mapped with the field name and
		// returned as a key value pair
		return {
			"name" : $(this).attr('name'),
			"value" : fields_set
		};
	}).get());

	arr = arr.concat($('#' + form_id + ' .chosen-select').map(function() {
		var fields_set = [];

		// The array of selected values are mapped with the field name and
		// returned as a key value pair
		return {
			"name" : $(this).attr('name'),
			"value" : $(this).val()
		};
	}).get());

	arr = arr.concat($('#' + form_id + ' .multiple-input').map(function() {
		var fields_set = [];

		// Gets list of options, selected and pushes the field values in to an
		// array fields_set
		$.each($(this).find('input'), function(index, data) {
			if($(data).val())
				fields_set.push($(data).val());
		});


		// The array of selected values are mapped with the field name and
		// returned as a key value pair
		return {
			"name" : $(this).attr('name'),
			"value" : fields_set
		};
	}).get());

	
	
	arr = arr.concat($('#' + form_id + ' .multiple-checkbox').map(function() {
		var fields_set = [];

		$('input:checkbox:checked', this).each(function(index, element_checkbox){
			fields_set.push($(element_checkbox).val());
		});
		
		console.log(fields_set);

		// The array of selected values are mapped with the field name and
		// returned as a key value pair
		return {
			"name" : $(this).attr('name'),
			"value" : fields_set
		};
	}).get());

	arr = arr.concat($('#' + form_id + ' .multiple-checkbox-adminprefs').map(function() {
		var fields_set = [];

		$('input:checkbox:checked', this).each(function(index, element_checkbox){
			if(!($(this).closest(".multiple-checkbox")) == undefined){
				console.log("admin-prefs");
			}
			else if (($(this).closest(".multiple-checkbox")).length == 0 )
			fields_set.push($(element_checkbox).val());
		});
		
		console.log(fields_set);

		// The array of selected values are mapped with the field name and
		// returned as a key value pair
		return {
			"name" : $(this).attr('name'),
			"value" : fields_set
		};
	}).get());



	/*
	 * Chained select, Chained select is used for filters, which uses logical
	 * input relation, field show have a class name "chained". Iterates through
	 * fields under element with class "chained", finds "div" element in it
	 */
	// Stores build rules based on chained select
	
	var chained_selects = $('#' + form_id + ' .chained-table:visible');
	$.each(chained_selects, function(index, element){
		var json_array = [];
	arr = arr.concat($(element).find('.chained:visible').map(function() {
		
		var json_object = serializeChainedElement(this);
		json_array.push(json_object);
	
		// Maps json array with name "rules"
		return {
			"name" : $(this).attr('name'),
			"value" : json_array
		};

	}).get());
	});

	// Converts array built from the form fields into JSON
	for ( var i = 0; i < arr.length; ++i) {
		obj[arr[i].name] = arr[i].value;
	}

	// obj[ $('#' + form_id + ' select').attr('name') ] = $('#' + form_id + '
	// select').val();
	return obj;
}

function serializeChainedElement(element)
{
	var json_object = {};
	$.each($(element).find('div').children(), function(index, data) {
		
		var tagName = $(data)[0].tagName;
		
		if(!(tagName == "TEXTAREA" || tagName == "INPUT" || tagName == "SELECT"))
			return;
		// Gets the name of the tr
		var name = $(data).parent().attr('name');
		var value;

		// If type of the field is "date" then return epoch time
		if ($(data).hasClass("date")) {
			var date = getFormattedDateObjectWithString($(data).val());

			value = getGMTEpochFromDateForCustomFilters(date);
		}
		else if ($(data).hasClass("contact_custom_field") || $(data).hasClass("company_custom_field")) {
			value = $(data).attr("data");
		}

		// Value of input/select
		else
			{
			if(!json_object[name])
				value = $(data).val();
			}

		// Set if value of input/select is valid
		if (value != null && value != "")
			json_object[name] = value;
		// Pushes each rule built from chained select in to an JSON array
	});
	if(json_object.CONDITION == "BETWEEN") {
	    var newdate = (json_object.RHS_NEW + (24 * 60 * 60 * 1000) - 1);
       json_object.RHS_NEW = newdate;
	}
	if(json_object.nested_condition == "BETWEEN") {
	    var newdate = (json_object.nested_rhs + (24 * 60 * 60 * 1000) - 1);
       json_object.nested_rhs = newdate;
	}
	return json_object;
}


$(function(){
	//Focus first element
	$.fn.focus_first = function() {
		
		var elem = $(this).find('input:visible').not('.hide').get(0);
		var textarea = $('textarea:visible', this).get(0);
		if (textarea && elem) {
			if (textarea.offsetTop < elem.offsetTop) {
				elem = textarea;
			}
		}
  
		if (elem) {
			$(elem).focus();
		}
		return this;
	}
	
	$('.modal').on('shown.bs.modal', function(event){
		var modalClassLength =  event.target.classList.length;
		if(event.target.classList[modalClassLength - 2] == "focusRelatedTo"){
			$('#opportunityUpdateForm').find("input[name='relates_to']").focus();
		}
		else {
		$('form', this).focus_first();
		}	
	});
});

function serializeLhsFilters(element)
{
	var json_array = [];
	var json_array_1 = [];
	var filters = {};
	$(element).find('a#lhs-filters-header').removeClass('bold-text');
	$.each($(element).find('.lhs-contact-filter-row'), function(index, data) {
		var json_object = {};
		var currentElement = $(data)[0];
		var RHS_VALUE, RHS_NEW_VALUE;
		var CONDITION = $(currentElement).find('[name="CONDITION"]').val();
		
		var RHS_ELEMENT = $(currentElement).find('.'+CONDITION).find('#RHS').children();
		var RHS_NEW_ELEMENT = $(currentElement).find('.'+CONDITION).find('#RHS_NEW').children();
		if($(RHS_ELEMENT).val() != undefined) {			
			RHS_VALUE = $(RHS_ELEMENT).val().trim();
		}
		if ($(RHS_ELEMENT).hasClass("date") && RHS_VALUE && RHS_VALUE != "") {
			var date = getFormattedDateObjectWithString($(RHS_ELEMENT).val());

			RHS_VALUE = getGMTEpochFromDateForDynamicFilters(date);
		}
		if ($(RHS_ELEMENT).hasClass("custom_contact") || $(RHS_ELEMENT).hasClass("custom_company")) {
			RHS_VALUE = $(RHS_ELEMENT).parent().find("input").attr("data");
		}
		if ($(RHS_ELEMENT).hasClass("custom_contacts") || $(RHS_ELEMENT).hasClass("custom_companies")) {
			$(RHS_ELEMENT).find("li").each(function(){
				var json_object_1 = {};
				var RHS_VALUE_1 = $(this).attr("data");
				var LHS_1 = $(currentElement).find('[name="LHS"]').val();
				if(RHS_VALUE_1)
				{
					json_object_1["LHS"] = LHS_1;
					json_object_1["CONDITION"] = "EQUALS";
					json_object_1["RHS"] = RHS_VALUE_1;
					json_object_1["RHS_NEW"] = "";
					json_array_1.push(json_object_1);
					var fieldName = LHS_1.replace(/ +/g, '_');
					fieldName = fieldName.replace(/#/g, '\\#').replace(/@/g, '\\@').replace(/[\/]/g,'\\/');
					var currentElemnt = $(element).find('#'+fieldName+'_div');
					$(currentElemnt).parent().find("a#lhs-filters-header").addClass('bold-text');
					$(currentElemnt).find('a.clear-filter-condition-lhs').removeClass('hide');
				}
			});
			
		}
		RHS_NEW_VALUE = $(RHS_NEW_ELEMENT).val();
		if ($(RHS_NEW_ELEMENT).hasClass("date") && RHS_NEW_VALUE && RHS_NEW_VALUE !="") {
			var date = getFormattedDateObjectWithString($(RHS_NEW_ELEMENT).val());
		if(CONDITION != "BETWEEN") {
			RHS_NEW_VALUE = getGMTEpochFromDateForDynamicFilters(date);
		}
		else {
			date = new Date(getGMTEpochFromDateForDynamicFilters(date) + (24 * 60 * 60 * 1000) - 1);
			RHS_NEW_VALUE = date.getTime();
		}
			
			
		}
		if(RHS_NEW_VALUE && typeof RHS_NEW_VALUE == "string") {
			RHS_NEW_VALUE = RHS_NEW_VALUE.trim();
		}
		
		// Set if value of input/select is valid
		if ((RHS_VALUE && RHS_VALUE != null && RHS_VALUE != "") || CONDITION =="DEFINED" || CONDITION =="NOT_DEFINED") {
			//if rhs_new exists and is empty dont consider this condition.
			if(RHS_NEW_ELEMENT && RHS_NEW_ELEMENT.length > 0 ) {
				if(!RHS_NEW_VALUE || RHS_NEW_VALUE == null || RHS_NEW_VALUE == "") {
					//in jquery each return is equivalent to continue.
					return;
				}
			}
			var LHS = $(currentElement).find('[name="LHS"]').val();
			json_object["LHS"] = LHS;
			json_object["CONDITION"] = CONDITION;
			json_object["RHS"] = RHS_VALUE;
			json_object["RHS_NEW"] = RHS_NEW_VALUE;
			json_array.push(json_object);
			var fieldName = LHS.replace(/ +/g, '_');
			fieldName = fieldName.replace(/#/g, '\\#').replace(/@/g, '\\@').replace(/[\/]/g,'\\/');
			var currentElemnt = $(element).find('#'+fieldName+'_div');
			$(currentElemnt).parent().find("a#lhs-filters-header").addClass('bold-text');
			$(currentElemnt).find('a.clear-filter-condition-lhs').removeClass('hide');
		}
		// Pushes each rule built from chained select in to an JSON array
	});
	filters["rules"] = json_array;
	if(json_array_1)
	{
		filters["or_rules"] = json_array_1;
	}
	filters["contact_type"] = $(element).find('#contact_type').val();
	return filters;
}

/**
 * validate.js is used to validate the forms in the application, isValidFom
 * method validates the form element
 * 
 * @param form
 * @returns
 */
function isValidForm(form) {

    jQuery.validator.addMethod("choosen-select-input", function(value, element){


    		if(!$('#bulk-labels').length)
    			return true;
    		
        	var label_value=$("#bulk-labels .chosen-select").val();

           	if(label_value)
            	return true;			
			
			return false;
		}," This field is required.");
	
	// Internal regex of jQuery validator allows for special characters in e-mails for ticketing.
	// This regex solves that, overriding 'email'
	jQuery.validator.addMethod("tickets_email", function(value, element){
		
		if(this.optional(element))
			return true;
		
		return /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
	}," Please enter a valid email.");


	// Credit card validation to check card is valid for next 3 months
	jQuery.validator.addMethod("atleastThreeMonths", function(value, element) {

			// Gets the exp_month field because expiry should be
			// checked both on month and year
			var month = $(element).siblings('select.exp_month')
					.val(), year = value;

			// date selected
			var date = new Date().setFullYear(year, month - 1);

			// Get number of milliseconds per day
			var one_day = 1000 * 60 * 60 * 24;

			// Calculates number of days left from the current date,
			// if number of days are greater than 90 then returns
			// true
			return this.optional(element)
					|| (((date - new Date().getTime()) / one_day) > 90);
		}, "Card should be atleast 3 months valid");
	
	// Validates multiple emails separated by comma entered in textbox
	jQuery.validator.addMethod("multipleEmails", function(value, element) {
        
		if (this.optional(element)) // return true on optional element
            return true;
        
        var emails = value.split(/[,]+/); // split element by , 
        valid = true;
        
        for (var i in emails) {
            value = emails[i];
            valid = valid &&
                    jQuery.validator.methods.email.call(this, $.trim(value), element);
        }
        
        return valid;
    }, "Please enter valid email each separated by comma.");

	
	jQuery.validator.addMethod("noSpecialChars", function(value, element) {
		return isAlphaNumeric(value);
	//	console.log(params);
		
	}, "Should start with an alphabet and special characters are not allowed.");

	// Internal regex of jQuery validator allows for special characters in e-mails.
	// This regex solves that, overriding 'email'
	jQuery.validator.addMethod("email", function(value, element){
		
		if(this.optional(element))
			return true;
		
		return /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
	}," Please enter a valid email.");

	// Phone number validation
	jQuery.validator.addMethod("phone", function(value, element){
		
		if(this.optional(element))
			return true;
		
		//return /^(\()?(\d{3})([\)-\. ])?(\d{3})([-\. ])?(\d{4})$/.test(value);
		return /^[^a-zA-Z]+$/.test(value);
	}," Please enter a valid phone number.");
	
	// Phone number validation
	jQuery.validator.addMethod("allow-char-phone", function(value, element){
		
		if(this.optional(element))
			return true;
		
		//return /^(\()?(\d{3})([\)-\. ])?(\d{3})([-\. ])?(\d{4})$/.test(value);
		return /^((\+)(\d)+)$/.test(value);
	},"Please enter valid phone number (+xxxxxxxxxx)");
	
	jQuery.validator.addMethod("multi-tags", function(value, element){
		
		var	tag_input = $(element).val()
		$(element).val("");
		if(tag_input && tag_input.length>=0 && !(/^\s*$/).test(tag_input))
		{
			var template = Handlebars.compile('<li class="tag" style="display: inline-block;" data="{{name}}">{{name}}<a class="close" id="remove_tag" tag="{{name}}">&times</a></li>');

		 	// Adds contact name to tags ul as li element
			$(element).closest(".control-group").find('ul.tags').append(template({name : tag_input}));
		}
		
		return $(element).closest(".control-group").find('ul.tags > li').length > 0 ? true : false;
	}," This field is required.");

	//IP validation
	jQuery.validator.addMethod("ipValidation", function(value, element){
		
		if(this.optional(element))
			return true;

		if(!value)
			 return false;
			
		return is_valid_ip(value.trim());
	
	}," Please enter a valid IP Address.");

	
	jQuery.validator.addMethod("formulaData", function(value, element){
		var source = $(element).val();
		var tpl;
		var compiled=true;
		try{
			tpl = Handlebars.precompile(source);
		}catch(err){
			err.message;
			compiled=false;
		}
		return compiled ? true : false;
	}," Please enter a valid formula.");
	
	//Number validation
	jQuery.validator.addMethod("number_input", function(value, element){
		
		if(value=="")
			return false;
		
		return /^[0-9\-]+$/.test(value);
	}," Please enter a valid number.");

	//Positive Number validation
	jQuery.validator.addMethod("positive_number", function(value, element){
		
		if(value=="")
			return true;

		if(isNaN(value))
		{
			return false;
		}
		if(!isNaN(value) && parseFloat(value) >= 0)
		{
			return true;
		}

	}," Please enter a value greater than or equal to 0.");


	
	jQuery.validator.addMethod("multi-select", function(value, element){
		var counter = 0;
		$(element).find(':selected').each( function( i, selected ) {
			counter++;
		});
		var limit = $(element).attr('limit');
		if(counter>limit)
			return false;
		return true;
	}," You can select maximum 3 folders only.");

	jQuery.validator.addMethod("checkedMultiSelect", function(value, element){
		
		var counter = $(element).find('option:selected').length;
		
		if(counter == 0)
			return false;

		return true;
	},"Please select atleast one option.");

	jQuery.validator.addMethod("checkedMultiCheckbox", function(value, element){
		
		console.log("value = " + value);
		console.log("element = " + element);

		var counter = $(element).find('input:checked').length;
		
		if(counter == 0)
			return false;

		return true;
	},"Please select atleast one option.");

	jQuery.validator.addMethod("date", function(value, element){
		if(value=="")
			return true;

		return !/Invalid|NaN/.test(getFormattedDateObjectWithString(value));

			
	}," Please enter a valid date.");

	jQuery.validator.addMethod("isHttpsURL", function(value, element){
		var urlregex = new RegExp("^(https:\/\/){1}([0-9A-Za-z]+\.)");
  		return urlregex.test(value);		
	}," Please enter a valid https URL");

	jQuery.validator.addMethod("date_input", function(value, element){
		if(value=="")
			return true;

		return !/Invalid|NaN/.test(getFormattedDateObjectWithString(value));

		
	}," Please enter a valid date.");

    
	jQuery.validator.addMethod("field_length", function(value, element){
		if(value=="")
			return true;
		var counter = 0;
		var max_len = $(element).attr('max_len');
		if(max_len == "")
			return true;
		if(value.length > max_len)
			return false;
		return true;
	}, function(params, element) {
		  return 'Maximum length is ' + $(element).attr("max_len") + ' chars only.'
		}	
	);
    

	// domain name validation
	jQuery.validator.addMethod("domain_format", function(value, element){
		
		return /^[a-zA-Z][a-zA-Z0-9-_\.]{3,20}$/.test(value);
	}," Name should be between 4-20 characters in length. Both letters and numbers are allowed but it should start with a letter.");
    

    jQuery.validator.addMethod("customFieldSpecialCharacter", function(value, element){
		
		var custvals = /^\s*[a-zA-Z0-9\s]+\s*$/;
		return custvals.test(value);
	}," Label should not contain special characters");
    jQuery.validator.addMethod("tickets_group_name", function(value, element){

		return /^[a-zA-Z0-9._]*$/.test(value);
	},"Please use only letters (a-z & A-Z), numbers, '.' and '_'.");


	//Image keyword validation for custom fields
	jQuery.validator.addMethod("custom_field_keyword", function(value, element){
		
		if(value=="image")
		{
			return false;
		}
		else
		{
			return true;
		}

	},"<b>image</b> is a keyword in the system and it can't be added as a custom field.");

	jQuery.validator.addMethod("verified-email", function(value, element){
		if($(element).find("option").length !=0){
 				if(typeof($(element).find("option[value=\""+value+"\"]").attr("unverified")) == "undefined")
 					return true;
 				
 					return false;
 		}
 	}," From email is not verified. Please verify it.");

	$(form).validate({
		ignoreTitle: true,
		rules : {
			atleastThreeMonths : true,
			multipleEmails: true,
			email: true,
			checkedMultiSelect: true,
			phone: true
		},
		debug : true,
		errorElement : 'span',
		errorClass : 'help-inline',
		ignore: ':hidden:not(.checkedMultiSelect)',

		// Higlights the field and addsClass error if validation failed
		highlight : function(element, errorClass) {
			$(element).closest('.controls').addClass('single-error');
		},

		// Unhiglights and remove error field if validation check passes
		unhighlight : function(element, errorClass) {
			$(element).closest('.controls').removeClass('single-error');
		},
		invalidHandler : function(form, validator) {
			var errors = validator.numberOfInvalids();
		},
		errorPlacement: function(error, element) {
    		if (element.hasClass('checkedMultiSelect')) {
     			 error.appendTo($(element).parent());
    			} 
    		else if(element.hasClass("choosen-select-input")){
                 error.appendTo($("#bulk-labels .chosen-container"));
              }
    			else {
      				error.insertAfter(element);
    			}    
         }
	});

	// Return valid of invalid, to stop from saving the data
	return $(form).valid();
}

function isNotValid(value) {
    if (value == undefined) return true;
    if (value.length == 0) return true;
    return false;
}


function isValidField(id) {
    var value = $('#' + id).val();
    return !isNotValid(value);
}


function isAlphaNumeric(subdomain) {
	subdomain = subdomain.toString();
  
  var regularExpression  = new RegExp(/^[A-Za-z][a-zA-Z0-9]{3,20}$/);
  if(!regularExpression.test(subdomain)) {
        error = "Domain should start with an alphabet and special characters are not allowed.";
		return false;
    }
  return true;
}

function isAlphaNumeric(subdomain) {
	subdomain = subdomain.toString();
	
  var regularExpression  = new RegExp(/^[A-Za-z#@][A-Za-z0-9_:&@;/\s/g]*$/);
  if(!regularExpression.test(subdomain)) {
		return false;
    }
  return true;
}

function isValidContactCustomField(id) {
    var name = $('#' + id).attr("name");
    if($('ul[name="'+name+'"]').find("li").length == 0) {
    	return false;
    }else {
    	return true;
    }
}

var isDateChanged=false;
function gmap_date_range(el, callback){
	
	  
		// Bootstrap date range picker.
	   var date = new Date();
	   date.setDate(date.getDate()-1);
		$('#gmap_date_range', el).daterangepicker({ranges : { 'Today' : [
				'today', 'today'
		], 'Yesterday' : [
				'yesterday', 'yesterday'
		], 'Last 7 Days' : [
				Date.today().add({ days : -6 }), 'today'
		], 'Last 30 Days' : [
				Date.today().add({ days : -29 }), 'today'
		], 'This Month' : [
				Date.today().moveToFirstDayOfMonth(), Date.today().moveToLastDayOfMonth()
		], 'Last Month' : [
				Date.today().moveToFirstDayOfMonth().add({ months : -1 }), Date.today().moveToFirstDayOfMonth().add({ days : -1 })
		], 'This Quarter' : [
				Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() : 
				(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() :
				(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(9)).moveToFirstDayOfMonth(), 
				Date.today().getMonth() < 3 ? new Date(Date.today().setMonth(2).moveToLastDayOfMonth()) : 
				(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() :
				(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(8)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
		], 'Last Quarter' : [
				Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(9)).moveToFirstDayOfMonth() : 
				(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth() :
				(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(3)).moveToFirstDayOfMonth() : new Date(Date.today().setMonth(6)).moveToFirstDayOfMonth(), 
				Date.today().getMonth() < 3 ? new Date(Date.today().add({ years : -1 }).setMonth(11)).moveToLastDayOfMonth() : 
				(Date.today().getMonth() >= 3 && Date.today().getMonth() < 6) ? new Date(Date.today().setMonth(2)).moveToLastDayOfMonth() :
				(Date.today().getMonth() >= 6 && Date.today().getMonth() < 9) ? new Date(Date.today().setMonth(5)).moveToLastDayOfMonth() : new Date(Date.today().setMonth(8)).moveToLastDayOfMonth()
		], 'This Year' : [
				new Date(Date.today().setMonth(0)).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).moveToLastDayOfMonth()
		], 'Last Year' : [
				new Date(Date.today().setMonth(0)).add({ years : -1 }).moveToFirstDayOfMonth(), new Date(Date.today().setMonth(11)).add({ years : -1 }).moveToLastDayOfMonth()
		] } }, function(start, end)
		{
			window.toDate=start;
			window.fromDate=end;
			$('#gmap_date_range span').html(start.toString('MMMM d, yyyy') + ' - ' + end.toString('MMMM d, yyyy'));
			gmap_search_by_date($('#gmap_date_range span').text());
		});
		
		if(callback && typeof(callback) == "function"){
			callback();
		}
		$('.daterangepicker > .ranges > ul').on("click", "li", function(e)
		{
			$('.daterangepicker > .ranges > ul > li').each(function(){
				$(this).removeClass("active");
			});
			$(this).addClass("active");
		});
}

function gmap_search_by_date(DateRange){
	isDateChanged=true;
	console.clear();
	
    var User_Domain = CURRENT_DOMAIN_USER.domain;
	//var User_Domain = "our";
	var options = "&";
	
	// Get Date Range
	var range = DateRange.split("-");

	// Returns milliseconds from start date. For e.g., August 6, 2013 converts
	// to 1375727400000
	var start_date = Date.parse($.trim(range[0])).valueOf();
	start_date=convertToUTCTime(start_date,'start');

	// Returns milliseconds from end date.
	var end_date = Date.parse($.trim(range[1])).valueOf();
	end_date=convertToUTCTime(end_date,'end');
	
	
	
	// Adds start_time, end_time and timezone offset to params.
	options += ("start_date=" + start_date + "&end_date=" + end_date);

	// Add Timezone offset
	var d = new Date();
	options += ("&time_zone=" + d.getTimezoneOffset());
	//var DateRangeUrl = "core/api/gmap/daterange?user_domain=" + encodeURIComponent(User_Domain) + options;
	var visitorBySessionUrl="core/api/gmap/daterangebysession?user_domain=" + encodeURIComponent(User_Domain) + options;
	var DateRangeUrl="core/api/gmap/daterangebysession?user_domain=" + encodeURIComponent(User_Domain) + options;
	
	//Check which tab is active and make a respective call
	if($('ul.nav-tabs li.active').attr('id') == 'gmap-map-tab'){
		map.setZoom(2);
		$("#map-tab-waiting").fadeIn();
		setTimeout(function(){
			gmap_add_marker(DateRangeUrl);
        },1000)
        
	}else{
		gmap_create_table_view(visitorBySessionUrl);
	}
	
	$("li#gmap-table-tab").off().on("click", function(){
		window.pauseMap=true;
		
		if((! $(this).closest('ul').parent('div').find('div.tab-content').find('div#gmap-table-view').find('tbody').length || isDateChanged) &&  ! $(this).hasClass('active')){
			isDateChanged=false;
			gmap_create_table_view(visitorBySessionUrl);
		}
	     
	  });
$("li#gmap-map-tab").off().on("click", function(){
	    window.pauseMap=false;
	    
		if(isDateChanged && ! $(this).hasClass('active')){
			isDateChanged=false;
			map.setZoom(2);
			setTimeout(function(){
				gmap_add_marker(DateRangeUrl);
	        },1000)
		}else{
			$("#map-tab-waiting").fadeIn();
			getMarkers();
		}
			
		
	  });
	
	

}

function convertToUTCTime(localTime,whatTime){
	try{
		
		var time = new Date(localTime);
		if(whatTime == 'start')
		time.setHours(0,0,0,0);
		else if(whatTime == 'end')
		time.setHours(23,59,59,999);
		var utc_start = new Date(time.getUTCFullYear(), time.getUTCMonth(), time.getUTCDate(),  time.getUTCHours(), time.getUTCMinutes(), time.getUTCSeconds(), time.getUTCMilliseconds());
		return utc_start.getTime();
	}catch(err){
		console.log("Error converting local  time to utc"+err);
	}
}


function gmap_initialize(el)
		{
			console.log("Map API has been loaded.");
			var script = document.createElement("script");
			script.type = "text/javascript";
			script.src = "https://jawj.github.io/OverlappingMarkerSpiderfier/bin/oms.min.js";
			document.body.appendChild(script);
			// Enable the visual refresh
			google.maps.visualRefresh = true;
			
			var mapProp = {
				center:new google.maps.LatLng(39.0000, 22.0000),
				zoom:7,
				mapTypeId:google.maps.MapTypeId.ROADMAP
			};
			
			window.map=new google.maps.Map(document.getElementById("google_map"),mapProp);
			window.map.setZoom(2);
			window.gmap_marker_list = [];
			
			gmap_date_range(el, function(){
				var $today = new Date();
				var $yesterday = new Date($today);
				$yesterday.setDate($today.getDate() - 1);
				var from_date = $yesterday;
				var to_date = $yesterday;
				if(window.toDate != undefined && window.toDate != '')
					to_date=window.toDate;
				else
					window.toDate=to_date;
				if(window.fromDate != undefined && window.fromDate != '')
					from_date=window.fromDate;
				else
				window.fromDate=from_date;
				
				$('#gmap_date_range span').html(to_date.toString('MMMM d, yyyy') + " - " + from_date.toString('MMMM d, yyyy'));
				gmap_search_by_date($('#gmap_date_range span').text());
			});
//			if(window.map != undefined){
//				document.getElementById("add_marker").disabled = false;
//			}
		}
		
// DOM listener to call initialize function after window load.
//google.maps.event.addDomListener(window, 'load', initialize);

// another way of calling initialize function and loading Google Maps API script.
function gmap_load_script(el)
{
	var script = document.createElement("script");
	script.type = "text/javascript";
	script.src = "https://maps.googleapis.com/maps/api/js?v=3&sensor=false&callback=gmap_initialize";
	document.body.appendChild(script);
}
	
		
/**Global variable holds the time interval to make rest call */
var INTERVAL=2000;
/** Global variable holds the latitudes and longitudes,used by the marker to plot a location */
var myLatlng = [];

/**Global variable to hold markers */
var marker = [];

/** It holds the unique sid's : just to have a unique visits as mysql query doesnot group sid's*/
var markerStore={};

var offSet=0; 
var limit=200;

/** Global variable to hold REST API call url*/
var url;
/**Global variable to hold clusterer object */
var markerCluster;
/**Single instance will be used for all the marker infowindow's
*/
var infowindow;


 /**spiderifier object */
var oms;
 
 
/** Function to retrieve visitors data with offset: called on every 5 seconds */
function getMarkers() {
	console.log(window.pauseMap);
	if(! window.pauseMap){
		
	$.getJSON( url+'&cursor='+offSet+'&page_size='+limit, function( res ) {
			
			if(res != ""){
				/** Call a function to plot the markers with recieved marker data*/
				plotMarkers(res);
				offSet=offSet+limit;
		        setTimeout(getMarkers,INTERVAL);
			}else
				$("#map-tab-waiting").fadeOut();
			
		});
		
	}else
		$("#map-tab-waiting").fadeOut();
	
		
	}

/** Function which takes response from server and create a marker,infowindow adds it to Clusterer and Spiderifier */
function plotMarkers(Locations){

	                  for (var i=0;i < Locations.length;i++)
	                  {   
	                	  
	                	  /**Check if we have duplicate markers : markers with same sid is pretend to be a duplicate marker here */
	                	  if(! markerStore.hasOwnProperty(Locations[i].sid)) {
	                	    var User_Location = (Locations[i].city_lat_long).split(",");
	                        myLatlng[i] = new google.maps.LatLng(User_Location[0],User_Location[1]);
	                        var parsedString = Locations[i].parsedUserAgent.replace(/\\/g, '');
	                        var machine;
	                        try
	                		{
	                        	machine=JSON.parse(parsedString);
	                		}
	                		catch (err)
	                		{
	                			console.log("Error in parsing json");
	                			continue;
	                		}
	                        var parsedOS=normalize_os(machine.os);
	                        var email=Locations[i].email;
	                        var markerImageUrl=gmap_set_icons(email,30);
	                        
	                        var icon = {
	                        	     url: markerImageUrl
	                        	 };
	                        
	                         if(email == undefined || email == "")
	                        	 email="Unknown Visitor";
	                         var strVar="";
	                         strVar += "<div style=\"width:230px;min-height: 61px;background-color: #fff;\">";
	                         strVar += "  <div style=\"float:left;\">";
	                         strVar += "    ";
	                         strVar += "  <img alt=\"null\" class=\"photo\" src='"+markerImageUrl+"' style=\"width: 61px;border-radius:8px\">";
	                         strVar += "  <\/div>";
	                         strVar += "  <div style=\"width: 230px;padding-left: 70px;\">";
	                         strVar += "    <div class=\"emailLink\" emailAttr="+email+" style=\"";
	                         strVar += "    margin: 7px 0px 0;";
	                         strVar += "    font-size: 14px;";
	                         strVar += "    white-space: nowrap;";
	                         strVar += "    text-overflow: ellipsis;";
	                         strVar += "    width: 100%;";
	                         strVar += "    overflow: hidden;";
	                         strVar += "    color: #363f44;";
	                         strVar += "\"><a>"+email+"</a><br>"+timeSince(Locations[i].visit_time)+"<br>"+capitalizeFirstLetter(Locations[i].city)+" , "+Locations[i].country+"<\/div>";
	                         strVar += "    <p style=\"";
	                         strVar += "    margin: 3px 0 0px;float:right"; 
	                         strVar += "\"><a href=\"#\" style=\"";
	                         strVar += "    text-decoration: none;";
	                         strVar += "    color: #23b7e5;";
	                         strVar += "\"><img class='inline m-r-xs r r-2x' style='width:12px;' src='../../../img/web-stats/devices/"+machine.device_type+".png'><img class='inline m-r-xs r r-2x' style='width:12px;' src='../../../img/web-stats/os/"+parsedOS+".png'><img class='inline m-r-xs r r-2x' style='width:12px;' src='../../../img/web-stats/browsers/"+machine.browser_name+".png'><\/a>";
	                         strVar += "    <\/p>";
	                         strVar += "  <\/div>";
	                         strVar += "  <\/div>";
	                         
	                         marker[i] = new google.maps.Marker({
	                              position: myLatlng[i],
	                              map: map,
	                              draggable:false,
	                              icon:icon,
	                              content:strVar
	                          });
	                         
	                         markerStore[Locations[i].sid] = marker[i];
	                         
	                         oms.addMarker(marker[i]);
	                          
	                          /**Marker click event*/ 
	                          google.maps.event.addListener(marker[i], 'click', function() {
	                        	    infowindow.setContent(this.content);
	                        	    infowindow.open(map,this);
	                        	});

	                  }
	                  }
	                  
	                  /**If the marker cluster is not  yet initialized then do it once with existing markers */
	                  if(markerCluster == undefined){
	                	  
	                	  
	                      /**Initializing marker clusterer*/ 
	  	      		    markerCluster = new MarkerClusterer(map,marker,{maxZoom:15});
	  	      		    
	  	      		    
	  	      		    /**Listener to show the spiderify markers on clicking the clusterer count directly*/ 
	  	      		    google.maps.event.addListener(markerCluster, 'click', function(cluster) {

	  	      		        var markers = cluster.getMarkers();

	  	      		        if(prepareMarkers(markers)){
	  	      		             //to wait for map update
	  	      		            setTimeout(function(){
	  	      		                google.maps.event.trigger(markers[markers.length-1], 'click');
	  	      		            },1000)
	  	      		        }
	  	      		        return true;
	  	      		    });
	  	      		    

	  	      		    function prepareMarkers(markers){
	  	      		    var cont=0;
	  	      		    var latitudMaster=markers[0].getPosition().lat();
	  	      		    var longitudMaster=markers[0].getPosition().lng();
	  	      		    for(var i=0;i<markers.length;i++){
	  	      		        if(markers[i].getPosition().lat() === latitudMaster & markers[i].getPosition().lng() === longitudMaster ){
	  	      		            cont++;
	  	      		        }else{
	  	      		            return false;
	  	      		        }
	  	      		    }
	  	      		    if(cont==markers.length){
	  	      		        return true;
	  	      		    }else if(cont<markers.length){
	  	      		        return false;
	  	      		    }
	  	      		}
	                	  
	                  }else{
	                	  markerCluster.addMarkers(marker,false);
	                	  
	                  }
	              
	                  
	                  /**Listener to close the infowindow if opened on clicking a map*/ 
	                  google.maps.event.addListener(map, 'click', function(){
	                	  if(infowindow){
	                		  infowindow.close();
	                	  }
	                  });
	
	
	
}

$(document).on('click','div.emailLink',function(){
	var emailToSend=$(this).attr('emailAttr');
	if(emailToSend != '' && emailToSend != undefined){
		var visitorBySessionUrl="core/api/contacts/search/email/"+emailToSend;
		$.getJSON(visitorBySessionUrl,function(res){
			if(res != '' && res != undefined){
				var contactId=res.id;
				window.location.href='#contact/'+contactId;
			}else{
				console.log("Response is empty");
				$('#noContactMessage').fadeIn();
				setTimeout(function(){
					$('#noContactMessage').fadeOut();
		            },5000)
			}
		});
	}
	
	
});

/**
 This method is being called from gmap-date-sort.js as soon as map object created
*/   
function gmap_add_marker(DateRangeUrl){
	
	
	google.maps.visualRefresh = true;
	
	var mapProp = {
		center:new google.maps.LatLng(39.0000, 22.0000),
		zoom:2,
		mapTypeId:google.maps.MapTypeId.ROADMAP
	};
	
	
	/**Creating a new instance everytime the date were modified ,this is required to reresh the markers and clusters*/
	window.map=new google.maps.Map(document.getElementById("google_map"),mapProp);
	map.setOptions({ minZoom: 2});
	
	/**Reset all the global variables */
	offSet=0;
	myLatlng = [];
	marker = [];
	markerStore={};
	markerCluster=undefined;
	infowindow=undefined;
	oms=undefined;
	
	
	
	/**Single instance will be used for all the marker infowindow's
	*/
	infowindow = new google.maps.InfoWindow({maxWidth: 230});
	
    /** Spiderify intialization*/
	oms= new OverlappingMarkerSpiderfier(map, {keepSpiderfied:true,nearbyDistance:40,legWeight:0});
	url=DateRangeUrl;
	
	
	/**Initiate the Rest call to get the data from server */
	getMarkers(url);
	
	
}


$(document).on('click','.agile-row > tr > td', function(e) {
	if($(this).hasClass('referer')){
		var refererUrl=$(this).find('a').attr('href');
		window.open(refererUrl);
		
	}else{
		var route = $('.agile-edit-row').attr('route');
		// Newly added code for displaying contacts and companies in same table with different routes.
		if($(this).closest('tr').find('[route]').length != 0)
		route = $(this).closest('tr').find('[route]').attr('route');
		var data = $(this).closest('tr').find('.data-contact').attr('data');
		if(route == "contact/" || route == "company/")
		SCROLL_POSITION = window.pageYOffset;
		console.log(data);
		if (data) {
		Backbone.history.navigate(route + data, {
		trigger : true
		});
		}
	}

	}); 

/**It just formats the first letter of a string with capital letter ,Only used here for city.*/ 
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

/**Function which returns either a default image or an SVG image based on the email*/
function gmap_set_icons(email,width){
	
	if (email == undefined || email == "")
		return LIB_PATH_FLATFULL + 'images/anonymous_visitor.png';
	return prepareLettergravatar(email);
	
}

/**Formats the device,OS and Browser to a required format*/ 
function normalize_os(data){
	
	if (data === undefined || data.indexOf('_') === -1)
		return data;

	// if '_' exists splits
	return data.split('_')[0];
}


/**This is a slight modification to the existing "initial" plugin used in the application ,could not reuse that but had to use as an another function*/
function prepareLettergravatar(email){

	var colors = ["#1abc9c", "#16a085", "#f1c40f", "#f39c12", "#2ecc71", "#27ae60", "#e67e22", "#d35400", "#3498db", "#2980b9", "#e74c3c", "#c0392b", "#9b59b6", "#8e44ad", "#bdc3c7", "#34495e", "#2c3e50", "#95a5a6", "#7f8c8d", "#ec87bf", "#d870ad", "#f69785", "#9ba37e", "#b49255", "#b49255", "#a94136"];
	try{
		 var settings = {
			        // Default settings
			        "name":email,
			        "charCount": 1,
			        "textColor": "#ffffff",
			        "height": 32,
			        "width": 32,
			        "fontSize": 18,
			        "fontWeight": 170,
			        "fontFamily": "HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif"
			    };

			    settings.name = "" + settings.name;
			    var c = settings.name.substr(0, settings.charCount).toUpperCase();
			    var cobj = $('<text text-anchor="middle"></text>').attr({
			        'y': '50%',
			        'x': '50%',
			        'dy' : '0.35em',
			        'pointer-events':'auto',
			        'fill': settings.textColor,
			        'font-family': settings.fontFamily
			    }).html(c).css({
			        'font-weight': settings.fontWeight,
			        'font-size': settings.fontSize+'px',
			    });

			    var colorIndex = null;
			    if(c.length > 1)
			    	colorIndex = Math.abs(Math.floor((((c.charCodeAt(0) - 65) + (c.charCodeAt(1) - 65))/2)  % colors.length));
			    else
			    	colorIndex = Math.abs(Math.floor((c.charCodeAt(0) - 65) % colors.length));

			    var svg = $('<svg></svg>').attr({
			        'xmlns': 'http://www.w3.org/2000/svg',
			        'pointer-events':'none',
			        'width': settings.width,
			        'height': settings.height
			    }).css({
			        'background-color': colors[colorIndex],
			        'width': settings.width+'px',
			        'height': settings.height+'px'
			    });

			    svg.append(cobj);
			   // svg.append(group);
			    var svgHtml = window.btoa(unescape(encodeURIComponent($('<div>').append(svg.clone()).html())));
			    return 'data:image/svg+xml;base64,' + svgHtml;
		
	}catch(e){
		
		console.log("Error in letter gravatar function"+e);
	}
}

/**Formats the given  date to "time Ago"*/
function timeSince(dateStr) {
	var date=new Date();
	 try
		{
		 var find = '-';
		 var re = new RegExp(find, 'g');
		 dateStr = dateStr.replace(re, '/');
		 dateStr = dateStr.match(/[^:]+(\:[^:]+)?/g);
		 date = new Date(dateStr[0]+' UTC');
		}
		catch (err)
		{
			console.log("Error in parsing date");
		}

    var seconds = Math.floor((new Date() - date) / 1000);

    var interval = Math.floor(seconds / 31536000);

    if (interval > 1) {
        return interval + " years ago";
    }
    interval = Math.floor(seconds / 2592000);
    if (interval > 1) {
        return interval + " months ago";
    }
    interval = Math.floor(seconds / 86400);
    if (interval > 1) {
        return interval + " days ago";
    }
    interval = Math.floor(seconds / 3600);
    if (interval > 1) {
        return interval + " hours ago";
    }
    interval = Math.floor(seconds / 60);
    if (interval > 1) {
        return interval + " minutes ago";
    }
    return Math.floor(seconds) + " seconds ago";
}


		


function gmap_create_table_view(Search_Url){
	
	 var gmapContactsListView = new Base_Collection_View({ 
		url : Search_Url,	// ""
		templateKey : "gmap-table", 
		individual_tag_name : "tr",
		cursor : true, page_size : 25,
		sort_collection:false,
		postRenderCallback : function(el)
		{
			console.log("post callback");
		} });
	 gmapContactsListView.collection.fetch();
	$('#gmap-table-view').html(gmapContactsListView.el);
}
var TEMPLATE_LIB_PATH = "";

/**
 * Downloads the template synchronously (stops other browsing actions) from the
 * given url and returns it
 * 
 * @param {String}
 *            url location to download the template
 * @returns down-loaded template content
 */
function downloadTemplate(url, callback)
{

	var dataType = 'html', template_url = CLOUDFRONT_PATH;


	// If Precompiled is enabled, we change the directory to precompiled. If
	// pre-compiled flat is set true then template path is sent accordingly
	if (HANDLEBARS_PRECOMPILATION)
	{
		url = "tpl/min/precompiled/" + FLAT_FULL_UI +  url;
	}
	else
		url = "tpl/min/" + FLAT_FULL_UI +  url;

	// If JS
	if (url.endsWith("js") && HANDLEBARS_PRECOMPILATION)
	{
		dataType = 'script';
		template_url = template_url.replace("flatfull/", "");
		url = template_url + url;
	}

	// Extract the filename from the url
	var fname = url.split("/");
	fname = fname.length > 0 ? fname[fname.length - 1] : fname;
	
	url += "?_=" + _agile_get_file_hash(fname);
	
	// If callback is sent to this method then template is fetched synchronously
	var is_async = false;
	if (callback && typeof (callback) === "function")
		is_async = true;

	console.log(url + " " + dataType + " " + is_async);

	var is_cached = !LOCAL_SERVER;

	jQuery.ajax({ url : url, dataType : dataType, cache:is_cached, success : function(result)
	{
		// If HTMl, add to body
		if (dataType == 'html')
			$('body').append((result));

		if (is_async)
			callback(result);
	}, async : is_async });

	return "";
}

if (typeof String.prototype.endsWith !== 'function') {
    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}
// We store one template compiled - if repetitive templates are called, we save time on compilations
var Handlebars_Compiled_Templates = {};

/**
 * Loads the template (script element with its id attribute as templateName
 * appended with "-template". For example if the templateName is "tasks", then
 * the script element id should be as "tasks-template") from html document body.
 * 
 * Compiles the loaded template using handlebars and replaces the context
 * related property names (which are under mustache like {{name}}) in the
 * template, with their associated values, on calling the context with the
 * compiled template.
 * 
 * @method getTemplate
 * @param {String}
 *            templateName name of the tempate to be loaded
 * @param {Object}
 *            context json object to call with the compiled template
 * @param {String}
 *            download verifies whether the template is found or not
 * 
 * @param {callback}
 *            To decide whether templates should be downloaded synchronously or
 *            asynchronously.
 * 
 * @returns compiled html with the context
 */
function getTemplate(templateName, context, download, callback, loading_place_holder)
{
	var is_async = callback && typeof (callback) == "function";

	// Check if it is (compiled template) present in templates
	if (Handlebars_Compiled_Templates[templateName])
	{
		if (callback)
			return callback(Handlebars_Compiled_Templates[templateName](context));
		else
			return Handlebars_Compiled_Templates[templateName](context);
	}
	else
		Handlebars_Compiled_Templates = {};

	// Check if source is available in body
	if (HANDLEBARS_PRECOMPILATION)
	{
		var template = Handlebars.templates[templateName + "-template"];

		// If teplate is found
		if (template)
		{
			// If callback is sent then template is downloaded asynchronously
			// and content is sent in callback
			if (is_async)
			{
				callback(template(context));
				return;
			}

			// console.log("Template " + templateName + " found");
			return template(context);
		}
	}
	else
	{
		var source = $('#' + templateName + "-template").html();
		if (source)
		{
			var template = Handlebars.compile(source);
			Handlebars_Compiled_Templates[templateName] = template;

			// If callback is sent then template is downloaded asynchronously
			// and content is sent
			if (is_async)
			{
				callback(template(context));
				return;
			}
			return template(context);
		}
	}

	// Check if the download is explicitly set to no
	if (download == 'no')
	{
		console.log("Not found " + templateName);
		return;
	}

	// Shows loader icon if there is a loader placeholder
	if(loading_place_holder)
	{
		try{
			var loaderEl = $(getRandomLoadingImg());
			$(loading_place_holder).html(loaderEl.css("margin", "10px"));
		}catch(err){}
	}
		   

	// Stores urls of templates to be downloaded.
	var template_relative_urls = getTemplateUrls(templateName);

	if (is_async)
	{
		load_templates_async(templateName, context, template_relative_urls, callback);
		return;
	}

	load_templates_sync(template_relative_urls);

	return getTemplate(templateName, context, 'no');
}

/**
 * If the template is not found in document body, then template paths are built
 * based on template name and download requests are sent. if it is down-loaded
 * append it to the document body. And call the function (getTemplate) again by
 * setting the download parameter to "no"
 */
function getTemplateUrls(templateName)
{
	// Stores template URLS
	var template_relative_urls = [];

	if (templateName.indexOf("settings") == 0)
	{
		template_relative_urls.push("settings.js");
	}
	if (templateName.indexOf("admin-settings") == 0)
	{
		template_relative_urls.push("admin-settings.js");
	}
	if (templateName.indexOf("continue") == 0)
	{
		template_relative_urls.push("continue.js");
	}
	if (templateName.indexOf("all-domain") == 0)
	{
		template_relative_urls.push("admin.js");
	}
	if (templateName.indexOf("contact-detail") == 0 || templateName.indexOf("timeline") == 0 || templateName.indexOf("company-detail") == 0)
	{
		template_relative_urls.push("contact-detail.js");
		if (HANDLEBARS_PRECOMPILATION)
			template_relative_urls.push("contact-detail.html");
	}
	if (templateName.indexOf("contact-filter") == 0 || templateName.indexOf("filter-contacts") == 0)
	{
		template_relative_urls.push("contact-filter.js");
	}
	if (templateName.indexOf("contact-view") == 0 || templateName.indexOf("contact-custom") == 0 || templateName.indexOf("contacts-custom") == 0 || templateName
			.indexOf("contacts-grid") == 0 || templateName.indexOf("company-view") == 0 || templateName.indexOf("companies-custom") == 0)
	{
		template_relative_urls.push("contact-view.js");
	}
	if (templateName.indexOf("bulk-actions") == 0)
	{
		template_relative_urls.push("bulk-actions.js");
	}
	if (templateName.indexOf("case") == 0)
	{
		template_relative_urls.push("case.js");
	}
	if (templateName.indexOf("document") == 0)
	{
		template_relative_urls.push("document.js");
	}	
	if (templateName.indexOf("voice-mail") == 0)
	{
		template_relative_urls.push("voice-mail.js");
	}
	if (templateName.indexOf("gmap") == 0)
	{
		template_relative_urls.push("gmap.js");
	}
	if (templateName.indexOf("report") == 0)
	{
		template_relative_urls.push("report.js");
	}
	if (templateName.indexOf("webrule") == 0)
	{
		template_relative_urls.push("web-rules.js");
	}
	if (templateName.indexOf("workflow") == 0 || templateName.indexOf("campaign") == 0 || templateName.indexOf("trigger") == 0 || templateName
			.indexOf("automation") == 0)
	{
		template_relative_urls.push("workflow.js");
	}
	if (templateName.indexOf("purchase") == 0 || templateName.indexOf("subscription") == 0 || templateName.indexOf("subscribe") == 0 || templateName
			.indexOf("invoice") == 0)
	{
		template_relative_urls.push("billing.js");
	}

	if (templateName.indexOf("widget") == 0)
	{
		template_relative_urls.push("widget.js");
	}
	if (templateName.indexOf("helpscout") == 0)
	{
		template_relative_urls.push("helpscout.js");
	}
	else if (templateName.indexOf("clickdesk") == 0)
	{
		template_relative_urls.push("clickdesk.js");
	}
	else if (templateName.indexOf("zendesk") == 0)
	{
		template_relative_urls.push("zendesk.js");
	}
	else if (templateName.indexOf("freshbooks") == 0)
	{
		template_relative_urls.push("freshbooks.js");
	}
	else if (templateName.indexOf("linkedin") == 0)
	{
		template_relative_urls.push("linkedin.js");
	}
	else if (templateName.indexOf("rapleaf") == 0)
	{
		template_relative_urls.push("rapleaf.js");
	}
	else if (templateName.indexOf("stripe") == 0)
	{
		template_relative_urls.push("stripe.js");
	}
	else if (templateName.indexOf("twilioio") == 0)
	{
	template_relative_urls.push("twilioio.js");
	}
	else if (templateName.indexOf("twilio") == 0)
	{
		template_relative_urls.push("twilio.js");
	}	
	else if (templateName.indexOf("sip") == 0)
	{
	template_relative_urls.push("sip.js");
	}
	else if (templateName.indexOf("twitter") == 0)
	{
		template_relative_urls.push("twitter.js");
	}
	else if (templateName.indexOf("googleplus") == 0)
	{
		template_relative_urls.push("googleplus.js");
	}	
	else if (templateName.indexOf("paypal") == 0)
	{
		template_relative_urls.push("paypal.js");
	}
	else if (templateName.indexOf("xero") == 0)
	{
		template_relative_urls.push("xero.js");
	}
	else if (templateName.indexOf("braintree") == 0)
	{
		template_relative_urls.push("braintree.js");
	}
	else if (templateName.indexOf("quickbooks") == 0)
	{
		template_relative_urls.push("quickbooks.js");
	}
	else if (templateName.indexOf("facebook") == 0)
	{
		template_relative_urls.push("facebook.js");
	}
	else if (templateName.indexOf("callscript") == 0)
	{
	template_relative_urls.push("callscript.js");
	}
	if (templateName.indexOf("chargify") == 0)
	{
		template_relative_urls.push("chargify.js");
	}
	if (templateName.indexOf("shopify") == 0)
	{
		template_relative_urls.push("shopify.js");
	}
	if (templateName.indexOf("socialsuite") == 0)
	{
		if(HANDLEBARS_PRECOMPILATION)
			template_relative_urls.push("socialsuite-all.js");
		else
		{
			template_relative_urls.push("socialsuite.js");
		}

		if (HANDLEBARS_PRECOMPILATION)
			template_relative_urls.push("socialsuite.html");
	}


	if (templateName.indexOf("portlet") == 0)
	{
		template_relative_urls.push("portlets.js");
	}
	if (templateName.indexOf("deal-detail") == 0)
	{
		template_relative_urls.push("deal-detail.js");
	}
	if (templateName.indexOf("fbpagetab") == 0)
	{
		template_relative_urls.push("facebookpage.js");
	}
	if (templateName.indexOf("landingpages") == 0)
	{
		template_relative_urls.push("landingpages.js");
	}
	if (templateName.indexOf("emailbuilder") == 0)
	{
		template_relative_urls.push("emailbuilder.js");
	}
	if (templateName.indexOf("segmentation") == 0)
	{
		template_relative_urls.push("segmentation.js");
	}
	if (templateName.indexOf("ticket") == 0)
	{
		template_relative_urls.push("tickets.js");
	}
	if (templateName.indexOf("billing-settings") == 0 || templateName.indexOf("creditcard-update") == 0)
	{
		template_relative_urls.push("settings.js");
	}
	if (templateName.indexOf("bria") == 0)
	{
		template_relative_urls.push("bria.js");
	}
	if (templateName.indexOf("skype") == 0)
	{
		template_relative_urls.push("skype.js");
	}
	if(templateName.indexOf("formbuilder") == 0)
	{
		template_relative_urls.push("formbuilder.js")
	}
	if (templateName.indexOf("uservoice") == 0)
	{
		template_relative_urls.push("uservoice.js");
	}
    if (templateName.indexOf("dashboard") == 0)
	{
		template_relative_urls.push("dashboards.js");
	}
	if (templateName.indexOf("refer") == 0)
	{
		template_relative_urls.push("referals.js");
	}
	if (templateName.indexOf("helpcenter") == 0)
	{
		template_relative_urls.push("helpcenter.js");
	}
	
	return template_relative_urls;
}

/**
 * Takes list of templates to downloaded and pops URL from list and sends
 * request to download asynchronously. After last URL in list is removed and
 * download request is sent, on callback of downloaded URL, new request is sent
 * to fetch next template URL in the list. Continues sending requests till list
 * is empty.
 * 
 * @param templateName
 * @param context
 * @param template_relative_urls
 * @param callback
 */
function load_templates_async(templateName, context, template_relative_urls, callback)
{
	// Removes last url from the list to fetch template.
	var url = template_relative_urls.pop();

	// URL is undefined when list is empty which means all templates specified
	// in array are downloaded. As list is empty get template is called with
	// download parameter 'no' which fills and sends template in callback
	if (!url)
	{
		getTemplate(templateName, context, 'no', callback);
		return;
	}

	// Fetches template and call current method in recursion to download other
	// templates in list
	downloadTemplate(url, function()
	{
		{
			// Recursion call to download other templates
			load_templates_async(templateName, context, template_relative_urls, callback);
		}
	});
}

/**
 * Sends request to download template synchronously
 * 
 * @param template_relative_urls
 */
function load_templates_sync(template_relative_urls)
{
	for ( var index in template_relative_urls)
		downloadTemplate(template_relative_urls[index]);
}

String.prototype.endsWith = function(suffix)
{
	return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

/**
 * Iterates the given "items", to find a match with the given "name", if found
 * returns the value of its value attribute
 * 
 * @param {Object}
 *            items array of json objects
 * @param {String}
 *            name to get the value (of value atribute)
 * @returns value of the matched object
 */
function getPropertyValue(items, name)
{
	if (items == undefined)
		return;

	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name){
			if(items[i].value!=null)
			 items[i].value=items[i].value.trim();
			return items[i].value;
		}
		}
}


/**
 * appends , between contact fields
 * @param items
 * @param name
 * @returns {String}
 */

function getPropertyValueByCheckingExistance(items, companyname,jobtitle)
{
	if (items == undefined)
		return;

	var companyExists=false;
	var jobTitleExists=false;
	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == companyname){
			if(items[i].value){
				companyExists=true;
			}
			
		}
		else if (items[i].name == jobtitle){
			if(items[i].value){
				jobTitleExists=true;
			}
			
		}
	}
	if(companyExists&&jobTitleExists)
		return ',';
}



function getMarginLength(items, companyname)
{
	if (items == undefined)
		return;

	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == companyname)
			return '3px';
	}
	return '0px';
}


/**
 * checks the contact properties existance
 * @param items
 * @param name
 * @param name1
 * @returns {String}
 */
function checkPropertyValueExistance(items,name,name1){

	if (items == undefined)
		return "none";

	var valueExists=false;
	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name || items[i].name == name1){
			if(items[i].value){
				valueExists=true;
			}
			
		}
	}
	if(valueExists==true)
		return 'block';
	else
		return 'none';
}

/**
 * Iterates the given "items", to find all matches with the given "name" and
 * concats each matched value by given separator
 * 
 * @param {Object}
 *            items array of json objects
 * @param {String}
 *            name to get the value (of value atribute)
 * @param {String}
 *            separator to combine matched values like ,(comma) etc
 * 
 * @returns matched values combined by separator or undefined
 */
function getAllPropertyValuesByName(items, name, separator)
{
	if (items == undefined)
		return;

	var val = "";

	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name)
		{
			var va = items[i].value;
			val += va + separator;
		}
	}

	// Removes trailing separators
	var regex = new RegExp("(^" + separator + ")|(" + separator + "$)", "g");
	val = val.replace(regex, "");

	console.log(val);
	return val;
}

/**
 * Returns contact property based on the name of the property
 * 
 * @param items :
 *            porperties in contact object
 * @param name :
 *            name of the property
 * @returns
 */
function getProperty(items, name)
{
	if (items == undefined)
		return;

	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name)
			return items[i];
	}
}

/**
 * Returns contact property based on its property name and subtype
 */
function getPropertyValueBySubtype(items, name, subtype)
{
	if (items == undefined)
		return;

	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name && items[i].subtype == subtype)
			return items[i].value;
	}
}

/**
 * Returns contact property based on the sub type (LINKEDIN, TWITTER, URL, SKYPE
 * etc..) of the property
 * 
 * @param items :
 *            properties list
 * @param name :
 *            name of the property
 * @param type :
 *            type of the property
 * @param subtype :
 *            subtype of property
 * @returns
 */
function getPropertyValueBytype(items, name, type, subtype)
{
	if (items == undefined)
		return;

	// Iterates though each property object and compares each property by name
	// and its type
	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name)
		{
			if (type && type == items[i].type)
			{
				if (subtype && subtype == items[i].subtype)
					return items[i].value;
			}

			if (subtype && subtype == items[i].subtype)
			{
				return items[i].value;
			}
		}
	}
}

function getPropertyValueInCheckbox(items, name, id, checked)
{
	if (items == undefined)
		return;
	var el = "";
	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name === name)
		{		
			if(name === "website"){
			  if(checked === 'checked'){			  
				  el = el.concat('<label class="i-checks i-checks-sm"><input type="checkbox" field="'+name+ '" subtype="'+get_subtype_value(items[i])+ '" data="'+items[i].value+ '" oid="'+id+ '" checked="'+checked+ '"><i></i></label>' + items[i].value);
			  }
			  else{
				  el = el.concat('<label class="i-checks i-checks-sm"><input type="checkbox" field="'+name+ '" subtype="'+get_subtype_value(items[i])+ '" data="'+items[i].value+ '" oid="'+id+ '"><i></i></label>' + items[i].value);
			  }
			  el = el.concat(get_website_icon(items[i]));
			}
			else if(name === "phone"){
				 if(checked === 'checked'){			  
					  el = el.concat('<label class="i-checks i-checks-sm"><input type="checkbox" field="'+name+ '" subtype="'+get_subtype_value(items[i])+ '" data="'+items[i].value+ '" oid="'+id+ '" checked="'+checked+ '"><i></i></label>' + items[i].value );
				 }
				 else{
					  el = el.concat('<label class="i-checks i-checks-sm"><input type="checkbox" field="'+name+ '" subtype="'+get_subtype_value(items[i])+ '" data="'+items[i].value+ '" oid="'+id+ '"><i></i></label>' + items[i].value );
				 }
			 el = el.concat(get_subtype(items[i]));
			}
			else if(name === "email"){
				if(checked === 'checked')
					el = el.concat('<label class="i-checks i-checks-sm"><input type="checkbox" field="'+name+ '" subtype="'+get_subtype_value(items[i])+ '" data="'+items[i].value+ '" oid="'+ id + '" checked="'+checked+ '"><i></i></label>' + items[i].value);
				else{
					el = el.concat('<label class="i-checks i-checks-sm"><input type="checkbox" field="'+name+ '" subtype="'+get_subtype_value(items[i])+ '" data="'+items[i].value+ '" oid="'+ id + '"><i></i></label>' + items[i].value);
				}
				el = el.concat(get_subtype(items[i]));
			}
		}
	}
	return el;
}

function get_website_icon(item){
	var icon = get_social_icon(item.subtype);
	var str = "<i class=\"".concat(icon).concat("\"").concat(" style=\"font-size: 1.3em !important; margin-left:10px \"></i> <br>");
	return str;
}

function get_social_icon(name){
	if (!name)
	return "fa fa-globe";

    var icon_json = { "TWITTER" : "fa fa-twitter", "LINKEDIN" : "fa fa-linkedin-square", "URL" : "fa fa-globe", "GOOGLE-PLUS" : "fa fa-google-plus-square",
	"FACEBOOK" : "fa fa-facebook-square", "GITHUB" : "fa fa-github", "FEED" : "icon-rss", "XING" : "fa fa-xing-square", "SKYPE" : "icon-skype",
	"YOUTUBE" : "fa fa-youtube-square", "FLICKR" : "fa fa-flickr" };

    name = name.trim();

    if (icon_json[name])
	return icon_json[name];

    return "fa fa-globe";
}

function get_subtype(item){
	
	if(item.subtype!=undefined && item.subtype!=""){
		var str = "<span style=\"margin:3px 0px 3px 10px\">".concat(item.subtype).concat("</span> <br>");
		return str;
	}
	else
		return "<br>";
}

function get_subtype_value(item){
	
	if(item.subtype!=undefined && item.subtype!=""){
		var str = item.subtype;
		return str;
	}
	else
	   return "";
}


/**
 * Returns list of custom properties. used to fill custom data in fields in
 * continue contact
 * 
 * @param items
 * @returns
 */
function getContactCustomProperties(items)
{
	if (items == undefined)
		return items;

	var fields = [];
	var fieldName='';
	var datajson={};
	for (var i = 0; i < items.length; i++)
	{
		if (items[i].type == "CUSTOM" && items[i].name != "image")
		{
			if(fieldName=='')
				fieldName=items[i].name;
			fields.push(items[i]);
			datajson[''+items[i].name]=items[i].value;
		}
	}
	
	//Added for formula type custom field
	var type='';
	if(App_Contacts.customFieldsList!=undefined && App_Contacts.customFieldsList!=null){
		for(var i=0;i<App_Contacts.customFieldsList.collection.models.length;i++){
			if(App_Contacts.customFieldsList.collection.models[i].get("field_label")==fieldName){
				type = App_Contacts.customFieldsList.collection.models[i].get("scope");
				break;
			}
		}
	}
	
	var formulaFields=[];
	var allCustomFields=[];
	var finalFields=[];
	
	if(App_Contacts.customFieldsList!=undefined && App_Contacts.customFieldsList!=null){
		if(type=='')
			type='CONTACT';
		for(var i=0;i<App_Contacts.customFieldsList.collection.models.length;i++){
			var json={};
			if(App_Contacts.customFieldsList.collection.models[i].get("scope")==type && App_Contacts.customFieldsList.collection.models[i].get("field_type")=="FORMULA"){
				var tplEleData = Mustache.render(App_Contacts.customFieldsList.collection.models[i].get("field_data"),datajson);
				var evalFlag = true;
				var tplEleDataAftEval;
				try{
					tplEleDataAftEval = eval(tplEleData)
				}catch(err){
					console.log(err.message);
					evalFlag = false;
				}
				if(!evalFlag)
					tplEleDataAftEval = tplEleData;
				if(evalFlag && tplEleDataAftEval!=undefined && tplEleDataAftEval!=null){
					json.name=App_Contacts.customFieldsList.collection.models[i].get("field_label");
					json.type="CUSTOM";
					json.position=App_Contacts.customFieldsList.collection.models[i].get("position");
					json.value=tplEleDataAftEval;
					json.field_type=App_Contacts.customFieldsList.collection.models[i].get("field_type");
					allCustomFields.push(json);
					
					formulaFields.push(json);
				}
			}else if(App_Contacts.customFieldsList.collection.models[i].get("scope")==type){
				json.name=App_Contacts.customFieldsList.collection.models[i].get("field_label");
				json.type="CUSTOM";
				json.position=App_Contacts.customFieldsList.collection.models[i].get("position");
				json.field_type=App_Contacts.customFieldsList.collection.models[i].get("field_type");
				allCustomFields.push(json);
			}
		}
	}
	if(fields.length>0){
		if(allCustomFields.length>0){
			for(var i=0;i<allCustomFields.length;i++){
				var isFieldExist = false;
				if(allCustomFields[i].field_type=="FORMULA"){
					if($.inArray(allCustomFields[i], finalFields)==-1)
						finalFields.push(allCustomFields[i]);
				}else{
					for(var j=0;j<fields.length;j++){
						if(allCustomFields[i].name==fields[j].name){
							if($.inArray(fields[j], finalFields)==-1){
								for(var m=0;m<allCustomFields.length;m++){
									if(fields[j].name == allCustomFields[m].name && (allCustomFields[m].field_type == "CONTACT" || allCustomFields[m].field_type == "COMPANY")){
										fields[j].custom_field_type = allCustomFields[m].field_type
									}
								}
								finalFields.push(fields[j]);
							}	
							isFieldExist = true;
							break;
						}
						if(!isFieldExist){
							if($.inArray(fields[j], finalFields)==-1)
							{
								for(var m=0;m<allCustomFields.length;m++){
									if(fields[j].name == allCustomFields[m].name && (allCustomFields[m].field_type == "CONTACT" || allCustomFields[m].field_type == "COMPANY")){
										fields[j].custom_field_type = allCustomFields[m].field_type
									}
								}
								finalFields.push(fields[j]);
							}
								
						}
					}
				}
			}
		}else{
			for(var k=0;k<fields.length;k++){
				if($.inArray(fields[k], finalFields)==-1)
					finalFields.push(fields[k]);	
			}
		}
		
	}else{
		for(var k=0;k<formulaFields.length;k++){
			if($.inArray(formulaFields[k], finalFields)==-1)
				finalFields.push(formulaFields[k]);	
		}
	}
	
	return finalFields;
}


/**
 * Returns list of custom properties. used to fill custom data in fields in
 * continue contact
 * 
 * @param items
 * @returns
 */
function getCompanyCustomProperties(items)
{
	if (items == undefined)
		return items;

	var fields = [];
	var fieldName='';
	var datajson={};
	for (var i = 0; i < items.length; i++)
	{
		if (items[i].type == "CUSTOM" && items[i].name != "image")
		{
			if(fieldName=='')
				fieldName=items[i].name;
			fields.push(items[i]);
			datajson[''+items[i].name]=items[i].value;
		}
	}
	
	//Added for formula type custom field
	var type='';
	if(App_Companies.customFieldsList!=undefined && App_Companies.customFieldsList!=null){
		for(var i=0;i<App_Companies.customFieldsList.collection.models.length;i++){
			if(App_Companies.customFieldsList.collection.models[i].get("field_label")==fieldName){
				type = App_Companies.customFieldsList.collection.models[i].get("scope");
				break;
			}
		}
	}
	
	var formulaFields=[];
	var allCustomFields=[];
	var finalFields=[];
	
	if(App_Companies.customFieldsList!=undefined && App_Companies.customFieldsList!=null){
		if(type=='')
			type='CONTACT';
		for(var i=0;i<App_Companies.customFieldsList.collection.models.length;i++){
			var json={};
			if(App_Companies.customFieldsList.collection.models[i].get("scope")==type && App_Companies.customFieldsList.collection.models[i].get("field_type")=="FORMULA"){
				var tplEleData = Mustache.render(App_Companies.customFieldsList.collection.models[i].get("field_data"),datajson);
				var evalFlag = true;
				var tplEleDataAftEval;
				try{
					tplEleDataAftEval = eval(tplEleData)
				}catch(err){
					console.log(err.message);
					evalFlag = false;
				}
				if(!evalFlag)
					tplEleDataAftEval = tplEleData;
				if(evalFlag && tplEleDataAftEval!=undefined && tplEleDataAftEval!=null){
					json.name=App_Companies.customFieldsList.collection.models[i].get("field_label");
					json.type="CUSTOM";
					json.position=App_Companies.customFieldsList.collection.models[i].get("position");
					json.value=tplEleDataAftEval;
					json.field_type=App_Companies.customFieldsList.collection.models[i].get("field_type");
					allCustomFields.push(json);
					
					formulaFields.push(json);
				}
			}else if(App_Companies.customFieldsList.collection.models[i].get("scope")==type){
				json.name=App_Companies.customFieldsList.collection.models[i].get("field_label");
				json.type="CUSTOM";
				json.position=App_Companies.customFieldsList.collection.models[i].get("position");
				json.field_type=App_Companies.customFieldsList.collection.models[i].get("field_type");
				allCustomFields.push(json);
			}
		}
	}
	if(fields.length>0){
		if(allCustomFields.length>0){
			for(var i=0;i<allCustomFields.length;i++){
				var isFieldExist = false;
				if(allCustomFields[i].field_type=="FORMULA"){
					finalFields.push(allCustomFields[i]);
				}else{
					for(var j=0;j<fields.length;j++){
						if($.inArray(fields[j], finalFields)==-1){
							if(allCustomFields[i].name==fields[j].name){
								for(var m=0;m<allCustomFields.length;m++){
									if(fields[j].name == allCustomFields[m].name && (allCustomFields[m].field_type == "CONTACT" || allCustomFields[m].field_type == "COMPANY")){
										fields[j].custom_field_type = allCustomFields[m].field_type
									}
								}
								finalFields.push(fields[j]);
								isFieldExist = true;
								break;
							}
						}
						if(!isFieldExist){
							if($.inArray(fields[j], finalFields)==-1)
							{
								for(var m=0;m<allCustomFields.length;m++){
									if(fields[j].name == allCustomFields[m].name && (allCustomFields[m].field_type == "CONTACT" || allCustomFields[m].field_type == "COMPANY")){
										fields[j].custom_field_type = allCustomFields[m].field_type
									}
								}
								finalFields.push(fields[j]);
							}
								
						}
					}
				}
			}
		}else{
			for(var k=0;k<fields.length;k++){
				if($.inArray(fields[k], finalFields)==-1)
					finalFields.push(fields[k]);	
			}
		}
		
	}else{
		for(var k=0;k<formulaFields.length;k++){
			if($.inArray(fields[k], finalFields)==-1)
				finalFields.push(formulaFields[k]);	
		}
	}
	
	return finalFields;
}

/**
 * Turns the first letter of the given string to upper-case and the remaining to
 * lower-case (EMaiL to Email).
 * 
 * @param {String}
 *            value to convert as ucfirst
 * @returns converted string
 */
function ucfirst(value)
{
	return (value && typeof value === 'string') ? (value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()) : '';

}

/**
 * Creates titles from strings. Replaces underscore with spaces and capitalize
 * first word of string.
 * 
 * @param value
 * @returns
 */
function titleFromEnums(value)
{
	if (!value)
		return;

	var str = value.replace(/_/g, ' ');

	return ucfirst(str.toLowerCase());
}

/**
 * Counts total number of attributes in a json object
 * 
 * @param obj
 * @returns {Number}
 */
function countJsonProperties(obj)
{
	var prop;
	var propCount = 0;

	for (prop in obj)
	{
		propCount++;
	}
	return propCount;
}

/**
 * Get the current contact property
 * 
 * @param value
 * @returns {String}
 */
function getCurrentContactProperty(value)
{
	if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
	{
		var contact_properties = App_Contacts.contactDetailView.model.get('properties')
		return getPropertyValue(contact_properties, value);
	}
}

function getCount(collection)
{
	if (collection[0] && collection[0].count && (collection[0].count != -1))
		return "(" + collection[0].count + " Total)";
	else
		return "(" + collection.length + " Total)";
}
function getTaskCount(collection)
{
	if (collection[0] && collection[0].count && (collection[0].count != -1))
		return collection[0].count ;
	else
		return collection.length ;
}

/**
 * Returns id from hash. Id must be last in hash.
 */
function getIdFromHash()
{

	// Returns "workflows" from "#workflows"
	var hash = window.location.hash.substr(1);

	// remove trailing slash '/'
	if (hash.substr(-1) === "/")
	{
		hash = hash.replace(/\/$/, "");
	}

	// Returns campaign_id from "workflow/all-contacts/campaign_id".
	var id = hash.split('/').pop();

	return id;
}

function updateCustomData(el)
{
	$(".custom-data", App_Contacts.contactDetailView.el).html(el)
}

function updateCompanyCustomData(el)
{
	$(".custom-data", App_Companies.companyDetailView.el).html(el)
}

/**
 * Returns list of custom properties. used to fill custom data in fields in
 * deal details
 * 
 * @param items
 * @returns
 */
function getDealCustomProperties(items)
{
	if (items == undefined)
		return items;

	var fields = [];
	var datajson={};
	for (var i = 0; i < items.length; i++)
	{
		fields.push(items[i]);
		datajson[''+items[i].name]=items[i].value;
	}
	
	var formulaFields=[];
	var allCustomFields=[];
	var finalFields=[];
	
	if(App_Deals.customFieldsList!=undefined && App_Deals.customFieldsList!=null)
	{
		for(var i=0;i<App_Deals.customFieldsList.collection.models.length;i++)
		{
			var json={};
			if(App_Deals.customFieldsList.collection.models[i].get("field_type")=="FORMULA"){
				var tplEleData = Mustache.render(App_Deals.customFieldsList.collection.models[i].get("field_data"),datajson);
				var evalFlag = true;
				var tplEleDataAftEval;
				try
				{
					tplEleDataAftEval = eval(tplEleData)
				}catch(err)
				{
					console.log(err.message);
					evalFlag = false;
				}
				if(!evalFlag)
					tplEleDataAftEval = tplEleData;
				if(evalFlag && tplEleDataAftEval!=undefined && tplEleDataAftEval!=null)
				{
					json.name=App_Deals.customFieldsList.collection.models[i].get("field_label");
					json.position=App_Deals.customFieldsList.collection.models[i].get("position");
					json.value=tplEleDataAftEval;
					json.field_type=App_Deals.customFieldsList.collection.models[i].get("field_type");
					allCustomFields.push(json);
					
					formulaFields.push(json);
				}
			}
			else
			{
				json.name=App_Deals.customFieldsList.collection.models[i].get("field_label");
				json.position=App_Deals.customFieldsList.collection.models[i].get("position");
				json.field_type=App_Deals.customFieldsList.collection.models[i].get("field_type");
				allCustomFields.push(json);
			}
		}
	}
	
	if(fields.length>0)
	{
		if(allCustomFields.length>0)
		{
			for(var i=0;i<allCustomFields.length;i++)
			{
				if(allCustomFields[i].field_type=="FORMULA")
				{
					finalFields.push(allCustomFields[i]);
				}
				else if(allCustomFields[i].field_type=="DATE")
				{
					for(var j=0;j<fields.length;j++)
					{
						if(allCustomFields[i].name==fields[j].name)
						{
							fields[j].is_date = true;
							if(!fields[j].value)
								return '';
							/*if(fields[j].index && (CURRENT_USER_PREFS.dateFormat.indexOf("dd/mm/yy") != -1 || CURRENT_USER_PREFS.dateFormat.indexOf("dd.mm.yy") != -1))
								fields[j].value = convertDateFromUKtoUS(fields[j].value);
							var dateString = new Date(fields[j].value);
							if(dateString == "Invalid Date")
								fields[j].value = getDateInFormatFromEpoc(fields[j].value);
							else
								fields[j].value = en.dateFormatter({raw: getGlobalizeFormat()})(dateString);*/

							finalFields.push(fields[j]);
							break;
						}
					}
				}
				else
				{
					for(var j=0;j<fields.length;j++)
					{
						if(allCustomFields[i].name==fields[j].name)
						{
							if(allCustomFields[i].field_type == "CONTACT"){
								fields[j].custom_field_type = "CONTACT";
							}else if(allCustomFields[i].field_type == "COMPANY"){
								fields[j].custom_field_type = "COMPANY";
							}
							finalFields.push(fields[j]);
							break;
						}
					}
				}
			}
		}
		else
		{
			for(var k=0;k<fields.length;k++)
			{
				finalFields.push(fields[k]);	
			}
		}
		
	}
	else
	{
		for(var k=0;k<formulaFields.length;k++)
		{
			finalFields.push(formulaFields[k]);	
		}
	}
	
	return finalFields;
}$(function()
{

	/**
	 * Helper function to return the value of a property matched with the given
	 * name from the array of properties
	 * 
	 * @method getPropertyValue
	 * @param {Object}
	 *            items array of objects
	 * @param {String}
	 *            name to get matched object value
	 * @returns value of the matched object
	 */
	Handlebars.registerHelper('getPropertyValue', function(items, name)
	{
		return getPropertyValue(items, name);
	});

	Handlebars.registerHelper('stripeCreditConvertion', function(amount)
	{
		if(amount == 0){
			return (amount);
		}else if(amount > 0){
			return ("-"+ parseFloat(amount/100));
		}else{
			return (Math.abs(parseFloat(amount/100)));
		}
	});

	
	/**
	 * displays , in between 2 conatct fields.
	 */
	Handlebars.registerHelper('getPropertyValueExists', function(items, companyname,jobtitle)
	{
		return getPropertyValueByCheckingExistance(items, companyname,jobtitle);
	});

	
	/**
	 * checks for the contact property value existance to display div none or block
	 */
	Handlebars.registerHelper('checkPropertyValueExistance', function(items, name,name1)
	{
		return checkPropertyValueExistance(items, name,name1);
	});
	
	
	
	/**
	 * checks for the contact property value existance to display div none or block
	 */
	Handlebars.registerHelper('getMarginLength', function(items, name)
	{
		return getMarginLength(items, name);
	});

	/**
	 * Helper function to return the checkbox html element with value of a
	 * property matched with the given name from the array of properties
	 * 
	 * @method getPropertyValue
	 * @param {Object}
	 *            items array of objects
	 * @param {String}
	 *            name to get matched object value
	 * @returns heckbox html element with value of the matched object
	 */
	Handlebars.registerHelper('getPropertyValueInCheckbox', function(items, name, separator, checked)
	{
		return getPropertyValueInCheckbox(items, name, separator, checked);
	});

	Handlebars.registerHelper('get_correct_count', function(count)
	{
		return count - 1;
	});

	/**
	 * Helper function to return the value of property based on sub-type of the
	 * property
	 */
	Handlebars.registerHelper('getPropertyValueBySubtype', function(items, name, subtype)
	{
		return getPropertyValueBySubtype(items, name, subtype);
	});

	/**
	 * Helper function to return the value of property based on type of the
	 * property
	 */
	Handlebars.registerHelper('getPropertyValueBytype', function(items, name, type, subtype)
	{
		return getPropertyValueBytype(items, name, type, subtype);
	});

	/**
	 * Returns twitter handle based on the twitter url of the profile. Accepts
	 * string URL and splits at last "/" and returns handle.
	 */
	Handlebars.registerHelper('getTwitterHandleByURL', function(value)
	{

		// if (value.indexOf("https://twitter.com/") != -1)
		// return value;

		value = value.substring(value.lastIndexOf("/") + 1);
		console.log(value);

		return value;
	});

	/**
	 * 
	 */
	Handlebars.registerHelper('getContactCustomProperties', function(items, options)
	{
		var fields = getContactCustomProperties(items);
		if (fields.length == 0)
			return options.inverse(fields);

		return options.fn(fields);

	});

	/**
	 * Returns custom fields without few fields like LINKEDIN or TWITTER or
	 * title fields
	 */
	Handlebars.registerHelper('getContactCustomPropertiesExclusively', function(items, options)
	{

		var exclude_by_subtype = [
				"LINKEDIN", "TWITTER"
		];
		var exclude_by_name = [
			"title"
		];

		var fields = getContactCustomProperties(items);

		var exclusive_fields = [];
		for (var i = 0; i < fields.length; i++)
		{
			if (jQuery.inArray(fields[i].name, exclude_by_name) != -1 || (fields[i].subtype && jQuery.inArray(fields[i].subtype, exclude_by_subtype) != -1))
			{
				continue;
			}

			exclusive_fields.push(jQuery.extend(true, {}, fields[i]));
		}
		if (exclusive_fields.length == 0)
			return options.inverse(exclusive_fields);

		$.getJSON("core/api/custom-fields/type/DATE", function(data)
		{

			if (data.length == 0)
				return;

			for (var j = 0; j < data.length; j++)
			{
				for (var i = 0; i < exclusive_fields.length; i++)
				{
					if (exclusive_fields[i].name == data[j].field_label)
						try
						{
							var value = exclusive_fields[i].value;

							if (!isNaN(value))
							{
								exclusive_fields[i].value = value;
								exclusive_fields[i]["subtype"] = data[j].field_type;
							}

						}
						catch (err)
						{
							exclusive_fields[i].value = exclusive_fields[i].value;
						}
				}
			}
			updateCustomData(options.fn(exclusive_fields));
		});

		return options.fn(exclusive_fields)

	});
	
	/**
	 * Returns custom fields without few fields like LINKEDIN or TWITTER or
	 * title fields
	 */
	Handlebars.registerHelper('getCompanyCustomPropertiesExclusively', function(items, options)
	{

		var exclude_by_subtype = [
				"LINKEDIN", "TWITTER"
		];
		var exclude_by_name = [
			"title"
		];

		var fields = getCompanyCustomProperties(items);
		
		var exclusive_fields = [];
		for (var i = 0; i < fields.length; i++)
		{
			if (jQuery.inArray(fields[i].name, exclude_by_name) != -1 || (fields[i].subtype && jQuery.inArray(fields[i].subtype, exclude_by_subtype) != -1))
			{
				continue;
			}

			exclusive_fields.push(jQuery.extend(true, {}, fields[i]));
		}
		if (exclusive_fields.length == 0)
			return options.inverse(exclusive_fields);

		$.getJSON("core/api/custom-fields/type/DATE", function(data)
		{

			if (data.length == 0)
				return;

			for (var j = 0; j < data.length; j++)
			{
				for (var i = 0; i < exclusive_fields.length; i++)
				{
					if (exclusive_fields[i].name == data[j].field_label)
						try
						{
							var value = exclusive_fields[i].value;

							if (!isNaN(value))
							{
								exclusive_fields[i].value = value;
								exclusive_fields[i]["subtype"] = data[j].field_type;
							}

						}
						catch (err)
						{
							exclusive_fields[i].value = exclusive_fields[i].value;
						}
				}
			}
			updateCompanyCustomData(options.fn(exclusive_fields));
		});

		return options.fn(exclusive_fields)

	});

	Handlebars.registerHelper('urlEncode', function(url, key, data)
	{

		var startChar = "&";
		if (url.indexOf("?") != -1)
			startChar = "&";

		var encodedUrl = url + startChar + key + "=" + escape(JSON.stringify(data));
		// console.log(encodedUrl.length + " " + encodedUrl);
		return encodedUrl;
	});

	Handlebars.registerHelper('encodeString', function(url)
	{
		return encodeURIComponent(url);
	});

	/**
	 * Helper function to return image for an entity (contact). Checks for
	 * existing image, if not found checks for an image using the email of the
	 * entity, if again failed to found returns a default image link.
	 * 
	 * @method gravatarurl
	 * @param {Object}
	 *            items array of objects
	 * @param {Number}
	 *            width to specify the width of the image
	 * @returns image link
	 * 
	 */
	Handlebars.registerHelper('gravatarurl', function(items, width, char_count)
	{

		if (items == undefined)
			return;

		// Checks if properties already has an image, to return it
		var agent_image = getPropertyValue(items, "image");
		if (agent_image)
			return agent_image;

		// Default image
		var img = DEFAULT_GRAVATAR_url;
		var backup_image = "&d=" + DEFAULT_GRAVARTAR_IMG + "\" ";
		//backup_image='&d=404" '; 
		var initials = '';

		try
		{
			// if(!isIE())
			initials = text_gravatar_initials(items, char_count);
		}
		catch (e)
		{
			console.log(e);
		}

		if (initials.length == 0)
			backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";

		var data_name =  '';
		// if(!isIE())
			data_name = "onLoad=\"image_load(this)\" _data-name=\"" + initials;
		
		var email = getPropertyValue(items, "email");
		if (email)
		{
			return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + backup_image + data_name);
		}

		return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '' + backup_image + data_name);

	});


	Handlebars.registerHelper('defaultGravatarurl', function(width)
	{
		// Default image
		var img = DEFAULT_GRAVATAR_url;

		return 'https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + "&d=" + escape(img);
	});

	Handlebars.registerHelper('emailGravatarurl', function(width, email)
	{
		// Default image
		var img = DEFAULT_GRAVATAR_url;

		if (email)
		{
			return 'https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + "&d=" + escape(img);
		}

		return 'https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + "&d=" + escape(img);
	});

	/**
	 * CSS text avatars
	 */
	Handlebars.registerHelper('nameAvatar', function(items, width)
	{

		if (items == undefined)
			return;

		// Checks if properties already has an image, to return it
		var agent_image = getPropertyValue(items, "image");
		if (agent_image)
			return agent_image;

		var email = getPropertyValue(items, "email");
		if (email)
		{
			return 'https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + '&d=404';
		}

		return 'https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '&d=404';

	});

	/**
	 * To add data-name attribute to image tags
	 */
	Handlebars.registerHelper('dataNameAvatar', function(items, char_count)
	{

		if (items == undefined)
			return;

		return text_gravatar_initials(items, char_count);

	});

	/**
	 * Helper function to return icons based on given name
	 * 
	 * @method icons
	 * @param {String}
	 *            item name to get icon
	 * @returns icon name
	 */
	Handlebars.registerHelper('icons', function(item)
	{

		if(!item)
			  return "";
			
		item = item.toLowerCase().trim();
		console.log(item);
		if (item == "email")
						return "fa-envelope-o";
		if (item == "phone")
						return "fa-headphones";
		if (item == "url")
						return "fa-home";
		if (item == "call")
						return "fa-phone";
		if (item == "follow_up")
						return "fa-sign-out";
		if (item == "meeting")
						return "fa-group";
		if (item == "milestone")
						return "fa-cog";
		if (item == "send")
						return "fa-reply";
		if (item == "tweet")
						return "fa-share-square-o";
		if (item == "other")
						return "fa-tasks";
		if (item == "twitter")
						return "fa-twitter";
		if (item == "facebook")
						return "fa-facebook";

	});

	Handlebars.registerHelper('eachkeys', function(context, options)
	{
		var fn = options.fn, inverse = options.inverse;
		var ret = "";

		var empty = true;
		for (key in context)
		{
			empty = false;
			break;
		}

		if (!empty)
		{
			for (key in context)
			{
				ret = ret + fn({ 'key' : key, 'value' : context[key] });
			}
		}
		else
		{
			ret = inverse(this);
		}
		return ret;
	});

	/**
	 * Turns the first letter of the given string to upper-case and the
	 * remaining to lower-case (EMaiL to Email).
	 * 
	 * @method ucfirst
	 * @param {String}
	 *            value to convert as ucfirst
	 * @returns converted string
	 */
	Handlebars.registerHelper('ucfirst', function(value)
	{
		return (value && typeof value === 'string') ? (value.charAt(0).toUpperCase() + value.slice(1).toLowerCase()) : '';
	});

	/**
	 * Returns Contact short name
	 */
	Handlebars.registerHelper('contactShortName', function()
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model && !company_util.isCompany())
		{

			var contact_properties = App_Contacts.contactDetailView.model.get('properties');

			if (App_Contacts.contactDetailView.model.get('type') == 'PERSON')
			{
				var last_name;
				for (var i = 0; i < contact_properties.length; i++)
				{

					if (contact_properties[i].name == "last_name")
						last_name = contact_properties[i].value;
					else if (contact_properties[i].name == "first_name")
						return contact_properties[i].value;
				}
				if (last_name && last_name != null)
				{
					return last_name;
				}
				return "Contact";
			}
			else
			{
				for (var i = 0; i < contact_properties.length; i++)
				{
					if (contact_properties[i].name == "name")
						return contact_properties[i].value;
				}
				return "Company";
			}
		} else if (App_Companies.companyDetailView && App_Companies.companyDetailView.model)
		{
			var contact_properties = App_Companies.companyDetailView.model.get('properties');

			for (var i = 0; i < contact_properties.length; i++)
			{
				if (contact_properties[i].name == "name")
					return contact_properties[i].value;
			}
			return "Company";
		}
	});
	
	Handlebars.registerHelper("isCompany", function(options)
			{
				if (company_util.isCompany())
					return options.fn(this);

				return options.inverse(this);
			});

	/**
	 * Returns workflow name surrounded by quotations if exists, otherwise this
	 */
	Handlebars.registerHelper('workflowName', function()
	{
		if (App_Workflows.workflow_model)
		{
			var workflowName = App_Workflows.workflow_model.get("name");
			return "\'" + workflowName + "\'";
		}

		return "this";
	});

	/**
	 * 
	 * @method task_property
	 * @param {String}
	 *            change property value in view
	 * @returns converted string
	 */
	Handlebars.registerHelper('task_property', function(value)
	{

		if (value == "FOLLOW_UP")
			return "Follow Up";
		else
			return ucfirst(value);

	});

	/**
	 * Adds Custom Fields to contact merge form, where this helper function is
	 * called
	 */
	Handlebars.registerHelper('show_custom_fields_for_merge', function(custom_fields, contacts)
	{

		var el = show_custom_fields_helper_for_merge(custom_fields, contacts);
		return new Handlebars.SafeString(el);

	});

	/**
	 * this is useful in activity when note characters exceeds abouve 50 simply
	 * show dots
	 */
	Handlebars.registerHelper('add_dots_end', function(value)
	{

		if (value)
		{
			if (value.length > 100)
			{
				var subst = value.substr(0, 100);
				subst = subst + "....";
				return subst;
			}
		}
		return value;

	});

	// Tip on using Gravar with JS:
	// http://www.deluxeblogtips.com/2010/04/get-gravatar-using-only-javascript.html
	/**
	 * Helper function to generate a html string as desired to show-up the
	 * tags-view
	 * 
	 * @method tagslist
	 * @param {Object}
	 *            tags array containing all tags
	 */
	Handlebars.registerHelper('tagslist', function(tags)
	{

		console.log(tags);
		var json = {};

		// Store tags in a json, starting letter as key
		for (var i = 0; i < tags.length; i++)
		{

			var tag = tags[i].tag;
			// console.log(tag);
			var start = tag.charAt(0).toUpperCase();

			var array = new Array();

			// see if it is already present
			if (json[start] != undefined)
			{
				array = json[start];
			}

			array.push(tag);
			json[start] = array;

		}

		// To sort tags in case-insensitive order i.e. keys in json object
		var keys = Object.keys(json);
		keys.sort();

		// Sorts it based on characters and then draws it
		var html = "";

		for ( var i in keys)
		{

			var array = json[keys[i]];

			html += "<div class='tag-element'><div class='tag-key'>" + keys[i] + "</div> ";

			html += "<div class='tag-values'>";

			for (var i = 0; i < array.length; i++)
			{
				console.log("************************");
				console.log(array[i]);
				var hrefTag = "#tags/" + encodeURIComponent(array[i]);

				html += ('<a href=\"' + hrefTag + '\" >' + array[i] + '</a> ');
			}
			html += "</div></div>";

		}

		return html;
	});

	Handlebars
			.registerHelper(
					'setupTags',
					function(tags)
					{

						console.log(tags);
						var json = {};

						var keys = [];
						// Store tags in a json, starting letter as key
						for (var i = 0; i < tags.length; i++)
						{
							var tag = tags[i].tag;
							var key = tag.charAt(0).toUpperCase();
							// console.log(tag);
							if (jQuery.inArray(key, keys) == -1)
								keys.push(key);
						}

						// To sort tags in case-insensitive order i.e. keys in
						// json object
						keys.sort();
						console.log(keys);
						var html = "";
						for (var i = 0; i < keys.length; i++)
						{
							html += "<div class='tag-element' style='margin-right:10px;'><div class='tag-key'>" + keys[i] + "</div><div class='tag-values' tag-alphabet=\"" + encodeURI(keys[i]) + "\"></div></div>";
						}
						return new Handlebars.SafeString(html);
					});

	// To show milestones as columns in deals
	Handlebars
			.registerHelper(
					'deals_by_milestones',
					function(data)
					{
						var html = "";
						var count = Object.keys(data).length;
						$
								.each(
										data,
										function(key, value)
										{
											if (count == 1 && key == "")
											{
												html += '<div class="alert-info alert"><div class="slate-content"><div class="box-left pull-left m-r-md"><img alt="Clipboard" src="'+updateImageS3Path("/img/clipboard.png")+'"></div><div class="box-right pull-left"><h4 class="m-t-none">You have no milestones defined</h4><br><a href="#milestones" class="btn btn-default btn-sm m-t-xs"><i class="icon icon-plus-sign"></i> Add Milestones</a></div><div class="clearfix"></div></div></div>';
											}
											else
											{
												html += "<div class='milestone-column'><div class='dealtitle-angular'><p class='milestone-heading'>" + key + "</p><span></span></div><ul class='milestones' milestone='" + key + "'>";
												for ( var i in value)
												{
													if (value[i].id)
														html += "<li id='" + value[i].id + "'>" + getTemplate("opportunities-grid-view", value[i]) + "</li>";
												}
												html += "</ul></div>";
											}
										});
						return html;
					});

	// To show milestones as sortable list
	Handlebars
			.registerHelper(
					'milestone_ul',
					function(data)
					{
						var html = "";
						var wonMsg = 'Deals with this milestone are considered as Won.';
						var lostMsg = 'Deals with this milestone are considered as Lost.';
						// var html = "<ul class='milestone-value-list
						// tagsinput' style='padding:1px;list-style:none;'>";
						if (data)
						{
							var milestones = data.milestones.split(",");
							for ( var i in milestones)
							{
								html += "<tr data='" + milestones[i] + "' style='display: table-row;'><td><div class='milestone-name-block inline-block v-top text-ellipsis' style='width:80%'>";
								if(milestones[i] == data.won_milestone){
									html += milestones[i] + "<i data-toogle='tooltip' title='"+wonMsg+"' class='icon-like mark-won m-l-sm'></i></div></td><td class='b-r-none'><div class='m-b-n-xs'>";
									html += "<a class='milestone-won text-l-none-hover c-p text-xs hover-show disabled' style='visibility:hidden;' data-toggle='tooltip' title='Set as Won Milestone'><i class='icon-like'></i></a>";
									html += "<a class='milestone-lost text-l-none-hover c-p text-xs m-l-sm not-applicable hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Set as Lost Milestone'><i class='icon-dislike'></i></a>";
								} else if(milestones[i] == data.lost_milestone){
									html += milestones[i] + "<i data-toogle='tooltip' title='"+lostMsg+"' class='icon-dislike mark-lost m-l-sm'></i></div></td><td class='b-r-none'><div class='m-b-n-xs'>";
									html += "<a class='milestone-won text-l-none-hover c-p text-xs not-applicable hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Set as Won Milestone'><i class='icon-like'></i></a>";
									html += "<a class='milestone-lost text-l-none-hover c-p text-xs m-l-sm hover-show disabled' style='visibility:hidden;' data-toggle='tooltip' title='Set as Lost Milestone'><i class='icon-dislike'></i></a>";
								} else{
									html += milestones[i] + "</div></td><td class='b-r-none'><div class='m-b-n-xs'>";
									html += "<a class='milestone-won text-l-none-hover c-p text-xs hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Set as Won Milestone'><i class='icon-like'></i></a>";
									html += "<a class='milestone-lost text-l-none-hover c-p text-xs m-l-sm hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Set as Lost Milestone'><i class='icon-dislike'></i></a>";
								}
								html +=	"<a class='milestone-delete c-p m-l-sm text-l-none text-xs hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Delete Milestone'><i class='icon icon-trash'></i>" +
										"</a><a class='text-l-none-hover c-p text-xs m-l-sm hover-show' style='visibility:hidden;'><i title='Drag' class='icon-move'></i></a></div></td></tr>";
								// html += "<li data='" + milestones[i] +
								// "'><div><span>" + milestones[i] + "</span><a
								// class='milestone-delete right'
								// href='#'>&times</a></div></li>";
							}
						}
						// html += "</ul>";
						return html;
					});

	/**
	 * Helper function to return date string from epoch time
	 */
	Handlebars.registerHelper('epochToHumanDate', function(format, date)
	{

		if (!format)
			format = "mmm dd yyyy HH:MM:ss";

		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			console.log(new Date(parseInt(date)).format(format));
			return new Date(parseInt(date)).format(format, 0);
		}
		// date form milliseconds
		var d = "";
		try
		{
			d= new Date(parseInt(date) * 1000).format(format);
		}
		catch (err)
		{
			console.log("Invalid date for custom field.");
		}

		return d

		// return $.datepicker.formatDate(format , new Date( parseInt(date) *
		// 1000));
	});

	Handlebars.registerHelper('paypalInvoiceDate', function(format, date)
	{
		if (date){
			// var data = new Date(date); 
			// var time = data.getTime();			
    		var din = date.replace(/-/g, "//");
			if(!format){
			 	format = "ddd mmm dd yyyy";
			}
			var d= new Date(din).format(format);
			return d;			
		}
		// return $.datepicker.formatDate(format , new Date( parseInt(date) *
		// 1000));
	});


	Handlebars.registerHelper('decodeString', function(data){
		return data;
	});

	/**
	 * Helper function to return date string from epoch time
	 */
	Handlebars.registerHelper('uservoicedate', function(date)
	{
		if(date){
			var newDate = new Date(date);
			newDate = (newDate.getMonth() + 1) + '/' + newDate.getDate() + '/' +  newDate.getFullYear() + " "+ newDate.getHours()+":"+newDate.getMinutes()+":"+newDate.getSeconds();
			return newDate;
		}
	});

	// Helper function to return date in user selected format in  preferences.

	Handlebars.registerHelper('epochToHumanDateInFormat', function(date)
	{

		if (!date)
			return;
		return getDateInFormatFromEpoc(date);
		
	});

	// Helper function to return date format from  preferences.

	Handlebars.registerHelper('dateFormat', function()
	{

		return "Select Date";
		
	});



	// Helper function to return current date in preferences page.

	Handlebars.registerHelper('currentDateInFormat', function(format)
	{
		if(!format)
			return;
		format = format.replace(/MM/g, "mmmm").replace(/M/g, "mmm").replace(/DD/g, "dddd").replace(/D/g, "ddd");
		return new Date().format(format);
		
	});

	Handlebars.registerHelper('stringToHumanDateInFormat', function(date)
	{
		if(!date)
			return;
		var dateString = new Date(date);
		if(dateString == "Invalid Date")
			return getDateInFormatFromEpoc(date);
		else
			return en.dateFormatter({raw: getGlobalizeFormat()})(dateString);

		
	});

	/**
	 * Helper function to return the date string converting to local timezone.
	 */
	Handlebars.registerHelper('toLocalTimezone', function(dateString)
	{
		var date = new Date(dateString);

		return date.toDateString() + ' ' + date.toLocaleTimeString();
	});

	/**
	 * Helper function to return the date string converting to local timezone
	 * from UTC.
	 */
	Handlebars.registerHelper('toLocalTimezoneFromUtc', function(dateString)
	{
		var date = new Date(dateString + ' GMT+0000');

		return date.toDateString() + ' ' + date.toLocaleTimeString();
	});

	/**
	 * Helper function to return task date (MM dd, ex: Jan 10 ) from epoch time
	 */
	Handlebars.registerHelper('epochToTaskDate', function(date)
	{

		try{
			date = parseInt(date);	
		}catch(e){
		}
		var intMonth, intDay;

		// Verifies whether date is in milliseconds, then
		// no need to multiply with 1000
		if ((date / 100000000000) > 1)
		{
			intMonth = new Date(date).getMonth();
			intDay = new Date(date).getDate();
		}
		else
		{
			intMonth = new Date(parseInt(date) * 1000).getMonth();
			intDay = new Date(parseInt(date) * 1000).getDate();
		}
		var monthArray = [
				"Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"
		];

		return (monthArray[intMonth] + " " + intDay);
	});

	/**
	 * Helper function to return task color based on it's priority
	 */
	Handlebars.registerHelper('task_label_color', function(priority)
	{
		if (priority == 'HIGH' || priority == 'red')
			return 'danger';
		if (priority == 'NORMAL' || priority == '#36C')
			return 'info';
		if (priority == 'LOW')
			return 'label bg-light dk';
		if (priority == 'green')
			return 'success';
	});

	/**
	 * Helper function to return event label based on it's priority
	 */
	Handlebars.registerHelper('event_priority', function(priority)
	{
		if (priority == 'red' || priority == '#f05050')
			return 'High';
		if (priority == '#36C' || priority == '#23b7e5' || priority == 'blue')
			return 'Normal';
		if (priority == 'green' || priority == '#bbb')
			return 'Low';
	});

	/**
	 * Helper function to return event label color based on it's color
	 */
	Handlebars.registerHelper('event_label_color', function(color)
	{
		if (color == 'red' || color == '#f05050')
			return 'danger';
		if (color == '#36C' || color == '#23b7e5' || color == 'blue')
			return 'primary';
		if (color == 'green' || color == '#bbb')
			return 'warning';
	});

	/**
	 * Helper function to return type based on it's network type
	 */
	Handlebars.registerHelper('network', function(type)
	{
		if (type == 'GOOGLE')
			return 'Google Drive';
		if (type == 'S3')
			return 'Uploaded Doc';
	});

	/**
	 * Helper function to return date (Jan 10, 2012) from epoch time (users
	 * table)
	 * 
	 * @param {Object}
	 *            info_json json object containing information about
	 *            createdtime, last logged in time etc..
	 * @param {String}
	 *            date_type specifies the type of date to return (created or
	 *            logged in)
	 */
	Handlebars.registerHelper('epochToDate', function(info_json, date_type)
	{

		var obj = JSON.parse(info_json);

		if (!obj[date_type])
			return "-";
		if (date_type)
		{
			if ((obj[date_type] / 100000000000) > 1)
			{
				return new Date(parseInt(obj[date_type])).format("mmm dd yyyy HH:MM:ss", 0);
			}
			// date form milliseconds
			return new Date(parseInt(obj[date_type]) * 1000).format("mmm dd yyyy HH:MM:ss", 0);
		}
		else
		{
			var intMonth = new Date(parseInt(obj[date_type]) * 1000).getMonth();
			var intDay = new Date(parseInt(obj[date_type]) * 1000).getDate();
			var intYear = new Date(parseInt(obj[date_type]) * 1000).getFullYear();

			var monthArray = [
					"Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"
			];

			return (monthArray[intMonth] + " " + intDay + ", " + intYear);
		}
	});

	/**
	 * Returns currency symbol based on the currency value (deals)
	 */
	Handlebars.registerHelper('currencySymbol', function()
	{
		var value = ((CURRENT_USER_PREFS.currency != null) ? CURRENT_USER_PREFS.currency : "USD-$");
		var symbol = ((value.length < 4) ? "$" : value.substring(4, value.length));
		if(symbol=='Rs')
			symbol='Rs.';
		return symbol;
	});
	Handlebars.registerHelper('mandrill_exist', function(options)
	{
		if (IS_HAVING_MANDRILL)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	/**
	 * Calculates the "pipeline" for deals based on their value and probability
	 * (value * probability)
	 * 
	 * @param {Number}
	 *            value of the deal
	 * @param {Number}
	 *            probability of the deal
	 */
	Handlebars.registerHelper('calculatePipeline', function(value, probability)
	{

		var pipeline = parseInt(value) * parseInt(probability) / 100;
		return pipeline;
	});

	/**
	 * Returns required log (time or message) from logs (campaign logs)
	 */
	Handlebars.registerHelper('getRequiredLog', function(log_array_string, name)
	{
		var logArray = JSON.parse(log_array_string);
		if (name == "t")
		{
			var readableTime = new Date(logArray[0][name] * 1000);
			return readableTime;
		}
		return logArray[0][name];
	});

	Handlebars.registerHelper('iscompactTabel', function(type , options)
	{
		var setCompactView = (type != "PERSON") ? _agile_get_prefs("companyTabelView") : _agile_get_prefs("contactTabelView");

		if(setCompactView)
				return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * contacts tabel new template  
	 */

	Handlebars.registerHelper('iscompactContactTabel', function(options)
	{
		
			if(_agile_get_prefs("contactTabelView"))
			return options.fn(this);

			return options.inverse(this);
		
	});
	/**
	 * Returns table headings for custom contacts list view
	 */
	Handlebars.registerHelper('contactTableHeadings', function(item)
  	{
		var el = "", cls = ""; 
		$.each(App_Contacts.contactViewModel[item], function(index, element)
  		{
  			if (element == "basic_info" || element == "image")
  			{
					
					if(_agile_get_prefs("contactTabelView"))
					{
						// if the compact view is present the remove th basic info heading and add the empty heading for the image

						if(element == "basic_info")
							return ;
	
						if(element == "image")
						{
							element = "";
							cls = "";
						}
							  
					}
					else
					{
						if(element == "image")
						{
							element = "";
							cls = "compactcontact";
						}
					}
			}

		else if (element.indexOf("CUSTOM_") == 0) 
		{
  			element = element.split("_")[1];
  			cls = "text-muted";
  		}
  		else 
  		{
			element = element.replace("_", " ");
			cls = "";
	 	}
	 
	 		el = el.concat('<th class="'+ cls +'">' + ucfirst(element) + '</th>');	
	  
	 });
		return new Handlebars.SafeString(el);
	});
	/**
	 * Returns table headings for reports custom contacts list view
	 */
	Handlebars.registerHelper('reportsContactTableHeadings', function(item)
	{

		var el = "";
		$.each(REPORT[item], function(index, element)
		{

			if (element.indexOf("properties_") != -1)
				element = element.split("properties_")[1];
			if (element.indexOf("custom_") == 0)
				element = element.split("custom_")[1];
			element = element.replace("_", " ")

			el = el.concat('<th>' + ucfirst(element) + '</th>');

		});

		return new Handlebars.SafeString(el);
	});

	/**
	 * Helper function, which executes different templates (entity related)
	 * based on entity type. Here "this" reffers the current entity object.
	 * (used in timeline)
	 * 
	 */
	Handlebars.registerHelper('if_entity', function(item, options)
	{

		if (this.entity_type == item)
		{
			return options.fn(this);
		}
		if (!this.entity && this[item] != undefined)
		{
			return options.fn(this);
		}
	});

	/**
	 * Returns trigger type, by removing underscore and converting into
	 * lowercase, excluding first letter.
	 */
	Handlebars.registerHelper('titleFromEnums', function(value)
	{
		if (!value)
			return;

		var str = value.replace(/_/g, ' ');
		return ucfirst(str.toLowerCase());

	});

	Handlebars.registerHelper('actionTemplate', function(actions)
	{
		if (!actions)
			return;

		var actions_count = actions.length;

		var el = '<div class="table-resp">';

		$.each(actions, function(key, val)
		{
			if (--actions_count == 0)
			{
				el = el.concat(titleFromEnums(val.action));
				return;
			}
			el = el.concat(titleFromEnums(val.action) + ", ");
		});

		el = el.concat('</div>');
		return new Handlebars.SafeString(el);

	});

	Handlebars.registerHelper('triggerType', function(value)
	{
		if (value == 'ADD_SCORE')
			return value.replace('ADD_SCORE', 'Score (>=)');

		return titleFromEnums(value);
	});

	/**
	 * Returns notification type,by replacing 'has been' with underscore and
	 * converting into lowercase.
	 */
	Handlebars.registerHelper('if_notification_type', function()
	{

		// Makes 'CONTACT CREATED' To 'COMPANY CREATED'
		if (this.type == "COMPANY")
		{
			var arr = this.notification.split('_');
			var temp = ucfirst(arr[0].replace('CONTACT', 'COMPANY')) + " " + ucfirst(arr[1]);
			return " - " + temp;
		}

		// Replaces '_' with ' '
		var str = this.notification.replace(/_/, ' ');

		switch (str) {
		case "IS BROWSING":
			return str.toLowerCase() + " " + this.custom_value;

		case "CLICKED LINK":
			var customJSON = JSON.parse(this.custom_value);

			if (customJSON["workflow_name"] == undefined)
				return str.toLowerCase() + " " + customJSON.url_clicked;

			return str.toLowerCase() + " " + customJSON.url_clicked + " " + " of campaign " + "\"" + customJSON.workflow_name + "\""

		case "OPENED EMAIL":
			var customJSON = JSON.parse(this.custom_value);

			if (customJSON.hasOwnProperty("workflow_name"))
				return str.toLowerCase() + " " + " of campaign " + "\"" + customJSON.workflow_name + "\"";

			return str.toLowerCase() + " with subject " + "\"" + customJSON.email_subject + "\"";

		case "CONTACT ADDED":
			return " - " + ucfirst(str.split(' ')[0]) + " " + ucfirst(str.split(' ')[1]);

		case "CONTACT DELETED":
			return " - " + ucfirst(str.split(' ')[0]) + " " + ucfirst(str.split(' ')[1]);

		case "DEAL CREATED":
			return " - " + ucfirst(str.split(' ')[0]) + " " + ucfirst(str.split(' ')[1]);

		case "DEAL CLOSED":
			return " - " + ucfirst(str.split(' ')[0]) + " " + ucfirst(str.split(' ')[1]);

		case "TAG ADDED":
			return " - " + "\"" + this.custom_value + "\" " + str.toLowerCase().split(' ')[0] + " has been " + str.toLowerCase().split(' ')[1];

		case "TAG DELETED":
			return " - " + "\"" + this.custom_value + "\" " + str.toLowerCase().split(' ')[0] + " has been " + str.toLowerCase().split(' ')[1];

		default:
			return str.toLowerCase();
		}
	});

	/**
	 * Converts Epoch Time to Human readable date of default format.Used for
	 * campaign-logs.
	 */
	Handlebars.registerHelper('epochToLogDate', function(logTime)
	{
		return new Date(logTime * 1000);
	});

	/**
	 * Returns country name from country code.
	 */
	Handlebars.registerHelper('getCountryName', function(countrycode)
	{
		// retrieves country name from code using country-from-code.js
		return getCode(countrycode);
	});

	/**
	 * Replace '+' symbols with space.Used in notification.
	 */
	Handlebars.registerHelper('replace_plus_symbol', function(name)
	{

		return name.replace(/\+/, ' ');
	});
	/**
	 * Replace '-' symbols with empty.Used in invoice.
	 */
	Handlebars.registerHelper('replace_minus_symbol', function(name)
	{

		return name.replace(/\-/, '');
	});

	Handlebars.registerHelper('get_amount_with_possitive', function(amount)
	{
		if (amount < 0)
			return amount / 100 * (-1);
		else
			return amount / 100;
	});
	/**
	 * Removes forward slash. Makes A/B to AB. Used in contact-detail-campaigns
	 */
	Handlebars.registerHelper('removeSlash', function(value)
	{
		if (value == 'A/B')
			return value.replace(/\//, '');

		return value;
	});

	/**
	 * Displays all the properties of a contact in its detail view, excluding
	 * the function parameters (fname, lname, company etc..)
	 */
	Handlebars
			.registerHelper(
					'if_property',
					function(fname, lname, company, title, image, email, phone, website, address, options)
					{

						if (this.name != fname && this.name != lname && this.name != company && this.name != title && this.name != image && this.name != email && this.name != phone && this.name != website && this.name != address)
							return options.fn(this);
					});

	/**
	 * Counts the existence of property name which occurred multiple times.
	 */
	Handlebars.registerHelper('property_is_exists', function(name, properties, options)
	{

		if (getPropertyValue(properties, name))
			return options.fn(this);
		return options.inverse(this);
	});

	/**
	 * Counts the existence of property name which occurred multiple times.
	 */
	Handlebars.registerHelper('property_json_is_not_empty', function(name, properties, options)
	{

        var value = getPropertyValue(properties, name);
        if(!value)
        {
        	return options.inverse(this);
        }
        try{
        	value = JSON.parse(value);
        }catch(e){}

		if (value && Object.keys(value) && Object.keys(value).length > 0)
			return options.fn(this);
		
		return options.inverse(this);
	});

	/**
	 * returns online scheduling url of current user
	 */
	Handlebars.registerHelper('online_schedule_URL', function()
	{
		return ONLINE_SCHEDULING_URL;
	});

	// gets the refernce code of current domain

	Handlebars.registerHelper('get_current_domain', function()
	{
		return CURRENT_DOMAIN_USER.domain;
	});

	Handlebars.registerHelper('get_current_domain_email', function()
	{
		return CURRENT_DOMAIN_USER.email;
	});

	//gets domainuser pic
	Handlebars.registerHelper('get_current_domain_pic', function()
	{
		return CURRENT_DOMAIN_USER.pic;
	});

	Handlebars.registerHelper('get_current_domain_name', function()
	{
		var name =  CURRENT_DOMAIN_USER.name;
		return name.charAt(0).toUpperCase() + name.slice(1);
	});

	
	/*
	 * To add comma in between the elements.
	 */
	Handlebars.registerHelper('comma_in_between_property', function(value1, value2, properties, options)
	{

		if (getPropertyValue(properties, value1) && getPropertyValue(properties, value2))
			return ",";
	});

	Handlebars.registerHelper('property_subtype_is_exists', function(name, subtype, properties, options)
	{

		if (getPropertyValueBySubtype(properties, name, subtype))
			return options.fn(this);
		return options.inverse(this);
	});

	/**
	 * Displays multiple times occurred properties of a contact in its detail
	 * view in single entity
	 */
	Handlebars.registerHelper('multiple_Property_Element', function(name, properties, options)
	{

		var matching_properties_list = agile_crm_get_contact_properties_list(name)
		if (matching_properties_list.length > 0)
			return options.fn(matching_properties_list);
	});
	
	/**
	 * Displays multiple times occurred properties of a contact in its detail
	 * view in single entity
	 */
	Handlebars.registerHelper('multiple_Company_Property_Element', function(name, properties, options)
	{

		var matching_properties_list = company_util.agile_crm_get_company_properties_list(name)
		if (matching_properties_list.length > 0)
			return options.fn(matching_properties_list);
	});

	/**
	 * Converts address as comma seprated values and returns as handlebars safe
	 * string.
	 */
	Handlebars
			.registerHelper(
					'address_Element',
					function(properties)
					{
						var properties_count = 0;
						for (var i = 0, l = properties.length; i < l; i++)
						{

							if (properties[i].name == "address")
							{
								var el = '';

								var address = {};
								try
								{
									address = JSON.parse(properties[i].value);
								}
								catch (err)
								{
									address['address'] = properties[i].value;
								}

								// Gets properties (keys) count of given json
								// object
								var count = countJsonProperties(address);

								if (properties_count != 0)

									el = el
											.concat('<div class="contact-addressview text-xs"><div><div class="pull-left hide text-xs" style="width:18px"><i class="icon icon-pointer"></i></div><div class="custom-color text-xs">');
								else
									el = el
											.concat('<div class="contact-addressview text-xs"><div><div class="pull-left hide text-xs" style="width:18px"><i class="icon icon-pointer"></i></div><div class="custom-color text-xs">');

								if(address.address !== undefined)
									el = el.concat(address.address+", ");

								if(address.city !== undefined)
									el = el.concat(address.city+", ");

								if(address.state !== undefined)
									el = el.concat(address.state+", ");

								if(address.zip !== undefined)
									el = el.concat(address.zip+", ");

								if(address.country !== undefined)
									el = el.concat(address.country+".");

								/*$.each(address, function(key, val)
								{
									if (--count == 0)
									{
										el = el.concat(val + ".");
										return;
									}
									el = el.concat(val + ", ");
								});*/

								if (properties[i].subtype)
									el = el.concat('<span class="label bg-light dk text-tiny">' + properties[i].subtype + '</span>');
								el = el.concat('</span>&nbsp;<span id="map_view_action"></span></div></div>');
								return new Handlebars.SafeString(el);
							}
							else if (properties[i].name == "phone" || properties[i].name == "email")
							{
								++properties_count;
							}
						}
					});

	Handlebars.registerHelper('address_Template', function(properties)
	{

		for (var i = 0, l = properties.length; i < l; i++)
		{

			if (properties[i].name == "address")
			{
				var el = '';

				var address = {};
				try
				{
					address = JSON.parse(properties[i].value);
				}
				catch (err)
				{
					address['address'] = properties[i].value;
				}

				// Gets properties (keys) count of given json
				// object
				var count = countJsonProperties(address);

				$.each(address, function(key, val)
				{
					if (--count == 0)
					{
						el = el.concat(val + ".");
						return;
					}
					el = el.concat(val + ", ");
				});
				/*
				 * if (properties[i].subtype) el = el.concat(" <span
				 * class='label'>" + properties[i].subtype + "</span>");
				 */

				return new Handlebars.SafeString(el);
			}
		}
	});
	
	/**
	 * To represent a number with commas in deals
	 */
	Handlebars.registerHelper('numberWithCommas', function(value)
	{
		if (value == 0)
			return value;

		if (value)
		{
			return value.toFixed(2).toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
		}
	});

	/**
	 * Converts reports/view field element as comma seprated values and returns
	 * as handlebars safe string.
	 */
	Handlebars.registerHelper('field_Element', function(properties)
	{
		var el = "";
		var count = properties.length;

		$.each(properties, function(key, value)
		{

			if (value.indexOf("properties_") != -1)
				value = value.split("properties_")[1];
			else if (value.indexOf("custom_") != -1)
				value = value.split("custom_")[1];
			else if (value.indexOf("CUSTOM_") != -1)
				value = value.split("CUSTOM_")[1];
			else if (value == "created_time")
				value = "Created Date";
			else if (value == "updated_time")
				value = "Updated Date";

			value = value.replace("_", " ");

			if (--count == 0)
			{
				el = el.concat(value);
				return;
			}
			el = el.concat(value + ", ");
		});

		return new Handlebars.SafeString(el);
	});

	/**
	 * Converts string to JSON
	 */
	Handlebars.registerHelper('stringToJSON', function(object, key, options)
	{
		console.log(object);
		console.log(key);
		if (key)
		{
			try
			{

				object[key] = JSON.parse(object[key]);
			}
			finally
			{
				return options.fn(object[key]);
			}
		}

		try
		{
			return options.fn(JSON.parse(object));
		}
		catch (err)
		{
			return options.fn(object);
		}
	});

	/**
	 * Checks the existence of property name and prints value
	 */
	Handlebars.registerHelper('if_propertyName', function(pname, options)
	{
		var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;

		if (value.search(exp) != -1)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('show_link_in_statement', function(value)
	{

        if(value){
			value = value.replace(/</g, "&lt;").replace(/>/g, "&gt;");
		}

		var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;

		try
		{
			value = value.replace(exp, "<a href='$1' target='_blank' class='cd_hyperlink'>$1</a>");
			return new Handlebars.SafeString(value);
		}
		catch (err)
		{
			return value;
		}

	});

	/**
	 * Returns table headings for custom contacts list view
	 */
	Handlebars.registerHelper('displayPlan', function(value)
	{

		return ucfirst(value).replaceAll("_", " ");

	});

	/**
	 * Returns plain text removes underscore from text
	 */
	Handlebars.registerHelper('displayPlainText', function(value)
	{

		return value.split("_").join(" ");

	});

	/**
	 * Returns plain text removes underscore from text
	 */
	Handlebars.registerHelper('displayTaskStatus', function(value)
	{
		var val = value.split("_").join("").trim().toLowerCase();
		if (val == "yettostart")
			return "Not Started";
		else
			return ucfirst(value.split("_").join(" ").trim());

	});

	Handlebars.registerHelper('getCurrentContactProperty', function(value)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			var contact_properties = App_Contacts.contactDetailView.model.get('properties')
			console.log(App_Contacts.contactDetailView.model.toJSON());
			return getPropertyValue(contact_properties, value);
		}
	});

	Handlebars.registerHelper('safe_string', function(data)
	{
		if (data && data.indexOf("Tweet about Agile") == -1 && data.indexOf("Like Agile on Facebook") == -1)
				data = data.replace(/</g, "&lt;").replace(/>/g, "&gt;");
		
		data = data.replace(/\n/, "<br/>");
		return new Handlebars.SafeString(data);
	});

	Handlebars.registerHelper('string_to_date', function(format, date)
	{

		return new Date(date).format(format);
	});

	Handlebars.registerHelper('isArray', function(data, options)
	{
		if (isArray(data))
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('is_string', function(data, options)
	{
		if (typeof data == "string")
			return options.fn(this);
		return options.inverse(this);

	});

	Handlebars.registerHelper("bindData", function(data)
	{

		return JSON.stringify(data);
	});

	Handlebars.registerHelper("getCurrentUserPrefs", function(options)
	{
		if (CURRENT_USER_PREFS)
			;
		return options.fn(CURRENT_USER_PREFS);
	});

	Handlebars.registerHelper("getCurrentDomain", function(options)
	{

		var url = window.location.host;

		var exp = /(\.)/;

		if (url.search(exp) >= 0)
			return url.split(exp)[0];

		return " ";
	});

	Handlebars.registerHelper("getBase64Domain", function()
			{
				return window.btoa(window.location.host.split(".")[0]);
	});

	Handlebars.registerHelper("getBase64ActualDomain", function()
			{
				return window.btoa(CURRENT_DOMAIN_USER.domain);
	});

	// Gets date in given range
	Handlebars.registerHelper('date-range', function(from_date_string, no_of_days, options)
	{
		var from_date = Date.parse(from_date_string);
		var to_date = Date.today().add({ days : parseInt(no_of_days) });
		return to_date.toString('MMMM d, yyyy') + " - " + from_date.toString('MMMM d, yyyy');

	});

	Handlebars.registerHelper("extractEmail", function(content, options)
	{

		console.log(content);

		return options.fn(content.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi)[0]);
	});

	Handlebars.registerHelper('getCurrentContactPropertyBlock', function(value, options)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			var contact_properties = App_Contacts.contactDetailView.model.get('properties')
			console.log(App_Contacts.contactDetailView.model.toJSON());
			return options.fn(getPropertyValue(contact_properties, value));
		}
	});

	Handlebars.registerHelper('isDuplicateContactProperty', function(properties, key, options)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			var contact_properties = App_Contacts.contactDetailView.model.get('properties');
			var currentContactEntity = getPropertyValue(contact_properties, key);
			var contactEntity = getPropertyValue(properties, key);

			if (!currentContactEntity || !contactEntity)
			{
				currentContactEntity = getPropertyValue(contact_properties, "first_name") + " " + getPropertyValue(contact_properties, "last_name");
				contactEntity = getPropertyValue(properties, "first_name") + " " + getPropertyValue(properties, "last_name");
			}
			
			if(App_Contacts.contactDetailView.model.get('type') == 'COMPANY')
			{
				currentContactEntity = getPropertyValue(contact_properties, "name") ;
				contactEntity = getPropertyValue(properties, "name");
			}

			if (currentContactEntity == contactEntity)
				return options.fn(this);

			return options.inverse(this)
		}
	});

	Handlebars.registerHelper('containString', function(value, target, options)
	{
		if (target.search(value) != -1)
			return options.fn(this);

		return options.inverse(this);
	});
	Handlebars.registerHelper('is_emailPlan', function(planId, options)
	{

		if (planId.search("email") != -1)
			return options.fn(this);

		return options.inverse(this);

	});
	Handlebars.registerHelper('is_userPlan', function(planId, options)
	{
		if (planId.search("email") != -1)
			return options.inverse(this);
		return options.fn(this);

	});

	Handlebars.registerHelper('numeric_operation', function(operand1, operand2, operator)
	{

		var operators = "/*-+";

		if (operators.indexOf(operator) == -1)
			return "";

		if (operator == "+")
			return operand1 + operand2;

		if (operator == "-")
			return operand1 - operand2;

		if (operator == "*")
			return operand1 * operand2;

		if (operator == "/")
			return operand1 / operand2;
	});
	Handlebars.registerHelper('get_total_amount', function(operand1, operand2)
	{

		return (operand1 / 100) * operand2;
	});

	Handlebars.registerHelper('check_length', function(content, length, options)
	{

		if (parseInt(content.length) > parseInt(length))
			return options.fn(this);

		return options.inverse(this);
	});
	Handlebars.registerHelper('get_unrefunded_amount', function(operand1, operand2)
	{
		return (operand1 - operand2) / 100;

	});

	Handlebars.registerHelper('check_json_length', function(content, length, options)
	{
		var json_length = 0;
		for ( var prop in content)
		{
			json_length++;
		}

		if (json_length == parseInt(length))
		{
			for ( var prop in content)
			{
				return options.fn({ property : prop, value : content[prop], last : true });
			}
		}

		return options.inverse(content);
	});

	Handlebars.registerHelper('iterate_json', function(context, options)
	{
		var result = "";
		var count = 0;
		var length = 0;
		for ( var prop in context)
		{
			length++;
		}

		for ( var prop in context)
		{
			count++;
			if (count == length)
				result = result + options.fn({ property : prop, value : context[prop], last : true });
			else
				result = result + options.fn({ property : prop, value : context[prop], last : false });

		}

		console.log(result);
		return result;
	});

	Handlebars.registerHelper('get_social_icon', function(name)
	{
		return get_social_icon(name);

	});

	Handlebars.registerHelper("each_with_index", function(array, options)
	{
		var buffer = "";
		for (var i = 0, j = array.length; i < j; i++)
		{
			var item = array[i];

			// stick an index property onto the item, starting with 1, may make
			// configurable later
			item.index = i + 1;

			console.log(item);
			// show the inside of the block
			buffer += options.fn(item);
		}

		// return the finished buffer
		return buffer;

	});

	Handlebars.registerHelper('if_json', function(context, options)
	{

		try
		{
			var json = $.parseJSON(context);

			if (typeof json === 'object')
				return options.fn(this);
			return options.inverse(this);
		}
		catch (err)
		{
			return options.inverse(this);
		}
	});

	Handlebars.registerHelper('add_tag', function(tag)
	{
		addTagAgile(tag);
	});

	Handlebars.registerHelper('set_up_dashboard_padcontent', function(key)
	{
		return new Handlebars.SafeString(getTemplate("empty-collection-model", CONTENT_JSON.dashboard[key]));
	});

	/**
	 * Removes surrounded square brackets
	 */
	Handlebars.registerHelper('removeSquareBrackets', function(value)
	{
		return value.replace(/[\[\]]+/g, '');
	});

	/**
	 * Removes "" with single quotes brackets
	 */
	Handlebars.registerHelper('removeDoubleCoutes', function(value)
	{
		var strings = value.replace(/[\[\]]+/g, '');
		var charwithsinglequote = strings.replace(/"/g, "'");
		return charwithsinglequote;
	});

	/**
	 * Shows list of triggers separated by comma
	 */
	Handlebars.registerHelper('toLinkTrigger', function(context, options)
	{
		var ret = "";
		for (var i = 0, j = context.length; i < j; i++)
		{
			ret = ret + options.fn(context[i]);

			// Avoid comma appending to last element
			if (i < j - 1)
			{
				ret = ret + ", ";
			}
			;
		}
		return ret;
	});

	// Gets minutes from milli seconds
	Handlebars.registerHelper('millSecondsToMinutes', function(timeInMill)
	{
		if (isNaN(timeInMill))
			return;
		var sec = timeInMill / 1000;
		var min = Math.floor(sec / 60);

		if (min < 1)
			return Math.ceil(sec) + " secs";

		var remainingSec = Math.ceil(sec % 60);

		return min + " mins, " + remainingSec + " secs";
	});

	Handlebars.registerHelper('if_overflow', function(content, div_height, options)
	{

		if (!content)
			return;

		console.log($('#Linkedin').width());
		content = content.trim();
		var element = $("<div style='width:" + $('#Linkedin').width() + "px;" + "word-break:normal;word-wrap:break-word;display:none;'>" + content + "</div>");

		$("#content").append(element);

		console.log(element.height() + " " + parseInt(div_height))
		if (element.height() > parseInt(div_height))
			return options.fn(this);
		return options.inverse(this);
	});

	/**
	 * To set up star rating in contacts listing
	 */
	Handlebars.registerHelper('setupRating', function(value)
	{

		var element = "";
		for (var i = 0; i < 5; i++)
		{
			if (i < parseInt(value))
			{
				element = element.concat('<li style="display: inline;"><img src="'+updateImageS3Path("img/star-on.png")+'" alt="' + i + '"></li>');
				continue;
			}
			element = element.concat('<li style="display: inline;"><img src="'+updateImageS3Path("img/star-off.png")+'" alt="' + i + '"></li>');
		}
		return new Handlebars.SafeString(element);
	});

	/**
	 * Builds options to be shown in the table heading of CSV import. Also tries
	 * to match headings in select field
	 */
	Handlebars.registerHelper('setupCSVUploadOptions', function(type, key, context)
	{
		// console.log(context.toJSON());
		var template;
		if (type == "contacts")
		{
			template = $(getTemplate('csv_upload_options', context));
		}
		else if (type == "company")
		{
			template = $(getTemplate('csv_companies_upload_options', context));
		}
		else if (type == "deals")
		{
			template = $(getTemplate('csv_deals_options', context));
		}

		// Replaces _ with spaces
		key = key.replace("_", " ");

		var isFound = false;

		var match_weight = 0;

		var key_length = key.length;
		var key = key.toLowerCase();
		var matched_value;

		var selected_element;
		template.find('option').each(function(index, element)
		{
			if ($(element).text().toLowerCase().indexOf(key) != -1)
			{

				var current_match_weight = key_length / $(element).text().length;
				if (match_weight >= current_match_weight)
					return;

				selected_element = $(element);
				matched_value = $(element).text();
				match_weight = current_match_weight;
			}
		})

		console.log(matched_value + ", " + key + " : " + match_weight);

		for (var i = 0; i < key.length - 3; i++)
		{
			template.find('option').each(function(index, element)
			{
				if ($(element).text().toLowerCase().indexOf(key.substr(0, key.length - i).toLowerCase()) != -1)
				{
					console.log(key.substr(0, key.length - i) + " , " + $(element).text());
					var current_match_weight = key.substr(0, key.length - i).length / $(element).text().length;
					console.log(current_match_weight);
					if (match_weight >= current_match_weight)
						return;
					selected_element = $(element);
					matched_value = $(element).text();
					match_weight = current_match_weight;
				}
			})
		}

		$(selected_element).attr("selected", true);

		/*
		 * // Iterates to create various combinations and check with the header
		 * for ( var i = 0; i < key.length - 3; i++) {
		 * template.find('option').each(function(index, element) { if
		 * ($(element).val().toLowerCase().indexOf(key) != -1) { isFound = true;
		 * $(element).attr("selected", true); return false; } else if
		 * ($(element).val().toLowerCase().indexOf(key.substr(0, key.length -
		 * i).toLowerCase()) != -1) { isFound = true;
		 * $(element).attr("selected", true); return false; }
		 * 
		 * }); if (isFound) break; }
		 */
		return new Handlebars.SafeString($('<div>').html(template).html());
	});

	/**
	 * Converts total seconds into hours, minutes and seconds. For e.g. 3600
	 * secs - 1hr 0 mins 0secs
	 */
	Handlebars.registerHelper('convertSecondsToHour', function(totalSec)
	{
		var hours = parseInt(totalSec / 3600) % 24;
		var minutes = parseInt(totalSec / 60) % 60;
		var seconds = totalSec % 60;

		// show only seconds if hours and mins are zero
		if (hours == 0 && minutes == 0)
			return (seconds + "s");

		// show mins and secs if hours are zero.
		if (hours == 0)
			return (minutes + "m ") + (seconds + "s");

		var result = (hours + "h ") + (minutes + "m ") + (seconds + "s");
		return result;
	});

	/**
	 * To check and return value of original referrer
	 */
	Handlebars.registerHelper('checkOriginalRef', function(original_ref)
	{
		if (!getCurrentContactProperty(original_ref))
			return "unknown";

		var url = getCurrentContactProperty(original_ref);

		url = url.split('/');
		url = (url[0] + '//' + url[2]);
		return new Handlebars.SafeString(
				'<a style="text-decoration: none" target="_blank" href="' + getCurrentContactProperty(original_ref) + '">' + url + '</a>');
	});

	/**
	 * To check google url and key words
	 */
	Handlebars.registerHelper('queryWords', function(original_ref)
	{
		// Check if original referrer exists
		if (getCurrentContactProperty(original_ref))
		{
			// Get input url from contact properties and initialize reference
			// url
			var inputUrl = getCurrentContactProperty(original_ref);
			var referenceUrl = 'www.google.';

			// Get host from input url and compare with reference url if equal
			var tempUrl = inputUrl.split('/');
			tempUrl = tempUrl[2].slice(0, 11);
			if (tempUrl === referenceUrl)
			{
				// Get search term from input url
				var parser = document.createElement('a');
				parser.href = inputUrl;
				var search = parser.search;

				// If search term exists, check if 'q' parameter exists, and
				// return its value
				if (search.length > 1)
				{
					search = search.split('&');
					var length = search.length;
					for (var i = 0; i < length; i++)
					{
						if (search[i].indexOf('q=') != -1)
						{
							search = search[i].split('=');
							return new Handlebars.SafeString('( Keyword : ' + search[1].split('+').join(" ") + ' )');
						}
					}
				}
			}
			else
				return;
		}
	});

	/**
	 * Returns contact full name if last-name exists, otherwise only first_name
	 * for contact type PERSON. It returns company name for other contact type.
	 * 
	 */
	Handlebars.registerHelper('contact_name', function(properties, type)
	{

		if (type === 'PERSON')
		{
			for (var i = 0; i < properties.length; i++)
			{

				// if last-name exists, return full name.
				if (properties[i].name === "last_name")
					return (getPropertyValue(properties, "first_name") + " " + properties[i].value);

				else if (properties[i].name === "first_name")
					return properties[i].value;
			}

			return "Contact";
		}

		// COMPANY type
		for (var i = 0; i < properties.length; i++)
		{
			if (properties[i].name === "name")
				return properties[i].value;
		}
		return "Company";
	});

	/**
	 * Returns full name of contact. Use this when empty value is not
	 * acceptable. Takes care that, even when no names are defined, returns
	 * email(necessary for PERSON) or Company <id>. Calls function
	 * getContactName defined in agile-typeahead.js. Also typeahead uses this
	 * fxn to append values as tags.
	 */
	Handlebars.registerHelper('contact_name_necessary', function(contact)
	{
		return getContactName(contact);
	});

	/**
	 * To check if string is blank
	 */
	Handlebars.registerHelper('is_blank', function(value, options)
	{
		value = value.trim();

		if (value == "")
			return options.fn(value);
		else
			return options.inverse(value);
	})

	/**
	 * Iterate through list of values (not json)
	 */
	Handlebars.registerHelper("each_with_index1", function(array, options)
	{
		console.log(array);
		var buffer = "";
		for (var i = 0, j = array.length; i < j; i++)
		{
			var item = {};
			item["value"] = array[i];

			console.log(item);
			// stick an index property onto the item, starting with 1, may make
			// configurable later
			item["index"] = i + 1;

			console.log(item);
			// show the inside of the block
			buffer += options.fn(item);
		}

		// return the finished buffer
		return buffer;

	});

	/**
	 * If log_type equals true otherwise false
	 */
	Handlebars.registerHelper("if_log_type_equals", function(object, key, log_type, options)
	{

		if (object[key] == log_type)
			return options.fn(object);

		return options.inverse(object);

	});

	/**
	 * Identifies EMAIL_SENT campaign-log string and splits the log string based
	 * on '_aGiLeCrM' delimiter into To, From, Subject and Body.
	 * 
	 */
	Handlebars.registerHelper("if_email_sent", function(object, key, options)
	{

		// delimiter for campaign send-email log
		var _AGILE_CRM_DELIMITER = "_aGiLeCrM";

		// if log_type is EMAIL_SENT
		if (object[key] === "EMAIL_SENT")
		{
			// Splits logs message
			var email_fields = object["message"].split(_AGILE_CRM_DELIMITER, 4);

			// Json to apply for handlebar template
			var json = {};

			if (email_fields === undefined)
				return options.inverse(object);

			// Iterates inorder to insert each field into json
			for (var i = 0; i < email_fields.length; i++)
			{
				// Splits based on colon. E.g "To: naresh@agilecrm.com   "
				var arrcolon = email_fields[i].split(":");

				// Inserts LHS of colon as key. E.g., To
				var key = arrcolon[0];
				key = key.trim(); // if key starts with space, it
				// can't
				// accessible

				// Inserts RHS of colon as value. E.g.,
				// naresh@agilecrm.com  
				var value = arrcolon.slice(1).join(":"); // join the
				// remaining string
				// based on colon,
				// only first occurence of colon is needed
				value = value.trim();

				json[key] = value;
			}

			// inserts time into json
			json.time = object["time"];

			// apply customized json to template.
			return options.fn(json);
		}

		// if not EMAIL_SENT log, goto else in the template
		return options.inverse(object);

	});

	Handlebars.registerHelper('remove_spaces', function(value)
	{
		if(value)
			  value = value.replace(/ +/g, '');

		return value;

	});

	Handlebars.registerHelper('replace_spaces', function(value)
	{
		if(value)
			  value = value.replace(/ +/g, '_');

		return value;
		
	});

	/***************************************************************************
	 * Returns campaignStatus object from contact campaignStatus array having
	 * same campaign-id. It is used to get start and completed time from array.
	 **************************************************************************/
	Handlebars.registerHelper('if_same_campaign', function(object, data, options)
	{

		var campaignStatusArray = object[data];

		// if campaignStatus key doesn't exist return.
		if (data === undefined || campaignStatusArray === undefined)
			return;

		// Get campaign-id from hash
		var current_campaign_id = getIdFromHash();

		for (var i = 0, len = campaignStatusArray.length; i < len; i++)
		{

			// compares campaign-id of each element of array with
			// current campaign-id
			if (campaignStatusArray[i].campaign_id === current_campaign_id)
			{
				// if equal, execute template current json
				return options.fn(campaignStatusArray[i]);
			}
		}

	});

	/**
	 * Returns other active campaigns in campaign-active subscribers.
	 */
	Handlebars.registerHelper('if_other_active_campaigns', function(object, data, options)
	{

		if (object === undefined || object[data] === undefined)
			return;

		var other_campaigns = {};
		var other_active_campaigns = [];
		var other_completed_campaigns = [];
		var campaignStatusArray = object[data];

		var current_campaign_id = getIdFromHash();

		for (var i = 0, len = campaignStatusArray.length; i < len; i++)
		{
			// neglect same campaign
			if (current_campaign_id === campaignStatusArray[i].campaign_id)
				continue;

			// push all other active campaigns
			if (campaignStatusArray[i].status.indexOf('ACTIVE') !== -1)
				other_active_campaigns.push(campaignStatusArray[i])

				// push all done campaigns
			if (campaignStatusArray[i].status.indexOf('DONE') !== -1)
				other_completed_campaigns.push(campaignStatusArray[i]);
		}

		other_campaigns["active"] = other_active_campaigns;
		other_campaigns["done"] = other_completed_campaigns;

		return options.fn(other_campaigns);

	});

	/**
	 * Returns json object of active and done subscribers from contact object's
	 * campaignStatus.
	 */
	Handlebars.registerHelper('contact_campaigns', function(object, data, options)
	{

		// if campaignStatus is not defined, return
		if (object === undefined || object[data] === undefined)
			return;

		// Temporary json to insert active and completed campaigns
		var campaigns = {};

		var active_campaigns = [];
		var completed_campaigns = [];
		var unsubscribed_campaigns = [];
		var unsubscribed_campaigns_json = {};

		// campaignStatus object of contact
		var campaignStatusArray = object[data];
		var statuses = object["campaignStatus"];
		var campaign_json = {};

		// To get campaign name for unsubscribed campaigns
		for (var i = 0, len = statuses.length; i < len; i++)
		{
			var status = statuses[i];
			
			if(status)
				campaign_json[status.campaign_id] = status.campaign_name;
		}


		for (var i = 0, len = campaignStatusArray.length; i < len; i++)
		{
			if(campaignStatusArray[i].status)
			{
				// push all active campaigns
				if (campaignStatusArray[i].status.indexOf('ACTIVE') !== -1)
					active_campaigns.push(campaignStatusArray[i])

				// push all done campaigns
				if (campaignStatusArray[i].status.indexOf('DONE') !== -1)
					completed_campaigns.push(campaignStatusArray[i]);
			}

			var isAll = false;
			// Unsubscribed campaigns list
			if(campaignStatusArray[i].unsubscribeType)
			{

				// Global variable set on resubscribe modal shown
				if(typeof email_workflows_list != 'undefined')
					campaignStatusArray[i].campaign_name = email_workflows_list[campaignStatusArray[i].campaign_id];

				if(campaignStatusArray[i].unsubscribeType == 'ALL'){

					if(!isAll)
					{
						unsubscribed_campaigns_json["isAll"] = true;
						isAll = true;
					}
				}

				unsubscribed_campaigns.push(campaignStatusArray[i]);
			}
		}

		if(unsubscribed_campaigns && unsubscribed_campaigns.length > 0)
			unsubscribed_campaigns_json["unsubscribed_campaigns"] = unsubscribed_campaigns;

		campaigns["active"] = active_campaigns;
		campaigns["done"] = completed_campaigns;
		campaigns["unsubscribed"] = unsubscribed_campaigns_json;

		// apply obtained campaigns context within
		// contact_campaigns block
		return options.fn(campaigns);
	});

	/**
	 * Returns first occurence string from string having underscores E.g,
	 * mac_os_x to mac
	 */
	Handlebars.registerHelper('normalize_os', function(data)
	{
		if (data === undefined || data.indexOf('_') === -1)
			return data;

		// if '_' exists splits
		return data.split('_')[0];
	});
	Handlebars.registerHelper('hasKey', function(json , key , options)
	{
		if(json.indexOf(key) == -1)
			return options.inverse(this)
		return options.fn(this);
	});

	/**
	 * Get task list name without underscore and caps, for new task UI.
	 */
	Handlebars.registerHelper('get_normal_name', function(name)
	{
		if (!name)
			return;

		var name_json = { "HIGH" : "High", "LOW" : "Low", "NORMAL" : "Normal", "EMAIL" : "Email", "CALL" : "Call", "SEND" : "Send", "TWEET" : "Tweet",
			"FOLLOW_UP" : "Follow Up", "MEETING" : "Meeting", "MILESTONE" : "Milestone", "OTHER" : "Other", "YET_TO_START" : "Yet To Start",
			"IN_PROGRESS" : "In Progress", "COMPLETED" : "Completed", "TODAY" : "Today", "TOMORROW" : "Tomorrow", "OVERDUE" : "Overdue", "LATER" : "Later" };

		name = name.trim();

		if (name_json[name])
			return name_json[name];

		return name;

	});
	/** put the users according to the plan
	*/
	Handlebars.registerHelper('referedUsersPlan', function(plan)
	{
		var plantype = [];
		plantype =  plan.plan_type.split("_");
		var temp = plantype[0].toLowerCase();
		
		if(plantype.length == 1)
		var string = plan.quantity + " Users  " + temp.charAt(0).toUpperCase() + temp.slice(1);
		else{
			var temp1 = plantype[1].toLowerCase();
			var string = plan.quantity + " Users  " + temp.charAt(0).toUpperCase() + temp.slice(1) + " (" + temp1.charAt(0).toUpperCase() +temp1.slice(1)+ ")";
		}
		
		return string;
	});
	/**
	 * put user address location togather separated by comma.
	 */
	Handlebars.registerHelper('user_location', function()
	{

		var City = this.city == "?" ? "" : (this.city + ", ");
		var Region = this.region == "?" ? "" : (this.region + ", ");
		var Country = this.country;
		if (this.city == "?" && this.region == "?")
			Country = this.country == "?" ? this.city_lat_long : (this.city_lat_long + " ( " + this.country + " )");

		return (City + Region + Country).trim();
	});

	/**
	 * Trims trailing spaces
	 */
	Handlebars.registerHelper('trim_space', function(value)
	{

		if (value === undefined)
			return value;

		return value.trim();
	});

	/**
	 * Returns reputation name based on value
	 * 
	 */
	Handlebars.registerHelper('get_subaccount_reputation', function(value)
	{
		var type = "bg-light dk text-tiny";
		var reputation = "Unknown";
		var badge="";

		if (value > 1 && value < 40)
		{
			type = "label-danger text-tiny";
			reputation = "Poor";
			badge="red;";
		}
		else if (value >= 40 && value < 75)
		{
			type = "label-warning text-tiny";
			reputation = "Ok";
			badge="yellow";
		}
		else if (value >= 75 && value < 90)
		{
			type = "label-primary text-tiny";
			reputation = "Good";
			badge="blue";
		}
		else if (value >= 90)
		{
			type = "label-success text-tiny";
			reputation = "Excellent";
			badge="green"
		}

		return "<span style='font-weight: bold;font-size: 12px;position: relative;' class='label " + type

		+ "'>" + reputation + " <span style='margin: 0px -2px 0px 5px; padding:1px 5px 1px 5px ; background-color:white; color:"+ badge +"' class='badge " 
		+ type + "'>" + value + " %</span> </span>";

	});


	/**
	 * Returns id from hash. It returns id from hash iff id exists at last.
	 * 
	 */
	Handlebars.registerHelper('get_id_from_hash', function()
	{

		return getIdFromHash();

	});
	
	Handlebars.registerHelper('isAdmin',function(options)
	{
		if(CURRENT_DOMAIN_USER.is_admin){
			return options.fn(this);
		}else{
			return options.inverse(this);
		}
		 
	});

	Handlebars.registerHelper("check_plan", function(plan, options)
	{
		console.log(plan);

		if (!_billing_restriction)
			return options.fn(this);

		if (_billing_restriction.currentLimits.planName == plan)
			return options.fn(this);

		return options.inverse(this);

	});

	/**
	 * Safari browser doesn't supporting few CSS properties like margin-top,
	 * margin-bottom etc. So this helper is used to add compatible CSS
	 * properties to Safari
	 */
	Handlebars.registerHelper("isSafariBrowser", function(options)
	{

		if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1)
			return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * give custome status base on xerotype
	 */

	Handlebars.registerHelper('xeroType', function(type)
	{
		return (type == "ACCPAY") ? "Payable" : "Receivable";
	});

	/**
	 * give custom type to xero type
	 */
	Handlebars.registerHelper('xeroTypeToolTip', function(type)
	{
		return (type == "ACCPAY") ? "Payable" : "Receivable";
	});

	/**
	 * gives first latter capital for given input
	 */
	Handlebars.registerHelper('capFirstLetter', function(data)
	{
		if(data){
			if (data === "DEFAULT"){
				// console.log("return empty");
				return "";
			}else{
				var temp = data.toLowerCase();
				return temp.charAt(0).toUpperCase() + temp.slice(1);
			}
		}
	});

	Handlebars.registerHelper('qbStatus', function(Balance)
	{
		console.log(this);
		console.log(this.TotalAmt);
		if (Balance == 0)
		{
			return "Paid"
		}
		else
		{
			return "Due"
		}
	});
	Handlebars.registerHelper('currencyFormat', function(data)
	{

		return Number(data).toLocaleString('en');
		// data.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
	});

	Handlebars.registerHelper('formatAmount', function(data){
		data = parseFloat(data);
		return data.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,");
	});
	
	Handlebars.registerHelper('QbDateFormat', function(data)
	{

		var i = [];
		i = data.split("-");
		return i[0] + "-" + i[2] + "-" + i[1];
	});

	Handlebars.registerHelper("hasScope", function(scope_constant, options)
	{
		if (CURRENT_DOMAIN_USER.scopes && $.inArray(scope_constant, CURRENT_DOMAIN_USER.scopes) != -1)
			return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * Helps to check the permission of the user based on the ACL.
	 */
	Handlebars.registerHelper("hasMenuScope", function(scope_constant, options)
	{
		if (CURRENT_DOMAIN_USER.menu_scopes && $.inArray(scope_constant, CURRENT_DOMAIN_USER.menu_scopes) != -1)
			return options.fn(this);

		console.log("menuscope "+ options.fn(this));
		return options.inverse(this);

	});

	/**
	 * Helps to check the restricted permissions of the user based on the ACL.
	 */
	Handlebars.registerHelper("hasRestrictedMenuScope", function(scope_constant, options)
	{
		if (CURRENT_DOMAIN_USER.restricted_scopes && $.inArray(scope_constant, CURRENT_DOMAIN_USER.restricted_scopes) != -1){
			return options.fn(this);
		}
		return options.inverse(this);
	});

	Handlebars.registerHelper("canSyncContacts", function(options)
	{
		if (canImportContacts())
			return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * To check Access controls for showing icons on dashboard
	 */
	Handlebars.registerHelper('hasMenuScope', function(item, options)
	{
		if ((CURRENT_DOMAIN_USER.menu_scopes).indexOf(item) != -1)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('fetchXeroUser', function(data)
	{
		return JSON.parse(data).xeroemail;
	});

	Handlebars.registerHelper('getfbreturndomain', function(data)
	{
		var arr = window.location.href.split('/')
		return arr[2];
	});

	Handlebars
			.registerHelper(
					'tagManagementCollectionSetup',
					function(tags)
					{

						console.log(tags);
						var json = {};

						var keys = [];
						// Store tags in a json, starting letter as key
						for (var i = 0; i < tags.length; i++)
						{
							var tag = tags[i].tag;
							var key = tag.charAt(0).toUpperCase();
							// console.log(tag);
							if (jQuery.inArray(key, keys) == -1)
								keys.push(key);
						}

						console.log(keys);
						var html_temp = "";

						for (var i = 0; i < keys.length; i++)
							


							html_temp += "<div class='row b-b p-b-md'><div class='col-md-1 p-t' style='font-size:16px;padding-top:20px;'>" + keys[i] + "</div><div class='col-md-10'><div tag-alphabet=\"" + encodeURI(keys[i]) + "\"><ul class=\"tags-management tag-cloud\" style=\"list-style:none;\"></ul></div></div></div>";

						console.log(html_temp);
						return new Handlebars.SafeString(html_temp);
					});

	Handlebars.registerHelper('containsScope', function(item, list, options)
	{
		if (list.length == 0 || !item)
			return options.inverse(this);

		if (jQuery.inArray(item, list) == -1)
			return options.inverse(this);

		return options.fn(this);

	});

	Handlebars.registerHelper('isOwnerOfContact', function(owner_id, options)
	{

		if (CURRENT_DOMAIN_USER.id == owner_id)
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('canEditContact', function(owner_id, options)
	{
		if (canEditContact(owner_id))
			return options.fn(this);

		return options.inverse(this)
	});

	Handlebars.registerHelper('canEditCurrentContact', function(owner_id, options)
	{
		if (canEditCurrentContact())
			return options.fn(this);

		return options.inverse(this)
	})

	Handlebars.registerHelper('gateway_exists', function(value, target, options)
	{

		for (var i = 0; i < target.length; i++)
		{

			var prefs = JSON.parse(target[i].prefs);

			if (target[i].name == "EmailGateway")
			{

				if (prefs.email_api == value)
					return options.fn(target[i]);
			}

			if (target[i].name == "SMS-Gateway")
			{
				if (prefs.sms_api == value)
					return options.fn(target[i]);
			}
		}
		return options.inverse(this);
	});

	Handlebars.registerHelper("each_index_slice", function(array, index, options)
	{
		var buffer = "";
		for (var i = index; i < array.length; i++)
		{
			var item = array[i];

			// stick an index property onto the item, starting with 1, may make
			// configurable later
			// item.index = i + 1;

			console.log(item);
			// show the inside of the block
			buffer += options.fn(item);
		}

		// return the finished buffer
		return buffer;

	});

	Handlebars.registerHelper('gateway_exists', function(value, target, options)
	{

		for (var i = 0; i < target.length; i++)
		{

			var prefs = JSON.parse(target[i].prefs);

			if (target[i].name == "EmailGateway")
			{

				if (prefs.email_api == value)
					return options.fn(target[i]);
			}

			if (target[i].name == "SMS-Gateway")
			{
				if (prefs.sms_api == value)
					return options.fn(target[i]);
			}
		}
		return options.inverse(this);
	});

	Handlebars.registerHelper('isOwnerOfContact', function(owner_id, options)
	{

		if (CURRENT_DOMAIN_USER.id == owner_id)
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('canEditContact', function(owner_id, options)
	{
		if ((hasScope('UPDATE_CONTACTS') || hasScope('EDIT_CONTACT')) || CURRENT_DOMAIN_USER.id == owner_id)
			return options.fn(this);

		return options.inverse(this)
	});

	Handlebars.registerHelper('getAccountPlanName', function(plan_name)
	{
		if (!plan_name)
			return "Free";

		var plan_fragments = plan_name.split("_");

		return ucfirst(plan_fragments[0]);

	});

	Handlebars.registerHelper('getFullAccountPlanName', function(plan_name)
	{
		if (!plan_name)
			return "Free";

		var plan_fragments = plan_name.split("_");

		return ucfirst(plan_fragments[0])+" ("+ucfirst(plan_fragments[1])+")";

	});

	Handlebars.registerHelper('getAccountPlanInteval', function(plan_name)
	{
		if (!plan_name)
			return "Monthly";

		var plan_fragments = plan_name.split("_");

		return ucfirst(plan_fragments[1]);

	});		

	Handlebars.registerHelper('getSubscriptionBasedOnPlan', function(customer, plan, options)
	{
		var subscription = getSubscriptionWithAmount(customer, plan);

		if (subscription != null)
			return options.fn(subscription);

		return options.inverse(this);
	});

	// handling with iso date
	Handlebars.registerHelper("iso_date_to_normalizeDate", function(dateString)
	{

		/*
		 * var myDate = new Date(dateString); var timestamp = myDate.getTime();
		 * var d = new Date(parseInt(timestamp) / 1000).format("dd-MM-yyyy");
		 * return d;
		 */
		if (dateString.length <= 0)
			return;
		var arr = dateString.split("T");
		console.log("normalize date " + arr[0]);
		// var d = new Date(arr[0]).format("dd-MM-yyyy");
		return arr[0];

	});

	/**
	 * Index starts from 1
	 */
	Handlebars.registerHelper("getMonthFromIndex", function(month_index)
	{
		var monthArray = [
				"January", "february", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
		];
		if (month_index > 12)
			return monthArray[11];

		return monthArray[month_index - 1];
	});

	Handlebars.registerHelper('xeroOrganisationShortCode', function(block)
	{
		if (typeof SHORT_CODE == "undefined" || SHORT_CODE == "")
		{
			return false;
		}
		else
		{
			return SHORT_CODE;
		}
	});
	Handlebars.registerHelper('if_id', function(ctype, options)
	{
		if (this.type == ctype)
		{
			return options.fn(this);
		}
	});

	/**
	 * extract time from epochTime
	 */
	Handlebars.registerHelper("getTime", function(date)
	{

		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			var d = new Date(parseInt(date));
			var hours = d.getHours();
			if (hours > 12)
				hours = hours - 12;
			var min = d.getMinutes();
			if (min == 0)
				min = "00"
			var ampm = hours >= 12 ? "PM" : "AM";
			return hours + ":" + min + " " + ampm;
		}
		// date form milliseconds

		var d = new Date(parseInt(date) * 1000);
		var hours = d.getHours();
		if (hours > 12)
			hours = hours - 12;
		var min = d.getMinutes();
		if (min == 0)
			min = "00"
		var ampm = hours >= 12 ? "PM" : "AM";
		return hours + ":" + min + " " + ampm;

	});

	/**
	 * get custom date with time
	 */

	Handlebars.registerHelper("getCustomDateWithTime", function(start, end)
	{
		var day1 = getDay(start);
		var day2 = getDay(end);

		var d1 = getCustomFormatedDate(start);
		var d2 = getCustomFormatedDate(end);
		var time = extractTimeFromDate(end);

		if (day1 != day2)
			return d1 + " - " + d2;
		else
			return d1 + " - " + time;

	});

	function getCustomFormatedDate(date)
	{

		var months = [
				'Jan', 'Feb', 'March', 'April', 'May', 'Jun', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'
		];

		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			var d = new Date(parseInt(date));
			var hours = d.getHours();
			var year = d.getFullYear();
			var date = d.getDate();
			var month = d.getMonth();
			var min = d.getMinutes();
			if (min == 0)
				min = "00"
			var ampm = hours >= 12 ? "PM" : "AM";
			if (hours > 12)
				hours = hours - 12;
			return months[month] + " " + date + ", " + year + " " + hours + ":" + min + " " + ampm;

		}
		// date form milliseconds

		var d = new Date(parseInt(date) * 1000);
		var hours = d.getHours();
		var year = d.getFullYear();
		var date = d.getDate();
		var month = d.getMonth();
		var min = d.getMinutes();
		if (min == 0)
			min = "00"
		var ampm = hours >= 12 ? "PM" : "AM";
		if (hours > 12)
			hours = hours - 12;
		return months[month] + " " + date + ", " + year + " " + hours + ":" + min + " " + ampm;

	}
	function extractTimeFromDate(date)
	{
		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			var d = new Date(parseInt(date));
			var hours = d.getHours();

			var min = d.getMinutes();
			if (min == 0)
				min = "00"
			var ampm = hours >= 12 ? "PM" : "AM";
			if (hours > 12)
				hours = hours - 12;
			return hours + ":" + min + " " + ampm;
		}
		// date form milliseconds

		var d = new Date(parseInt(date) * 1000);
		var hours = d.getHours();
		var min = d.getMinutes();
		if (min == 0)
			min = "00"
		var ampm = hours >= 12 ? "PM" : "AM";
		if (hours > 12)
			hours = hours - 12;
		return hours + ":" + min + " " + ampm;
	}

	function getDay(date)
	{
		if ((date / 100000000000) > 1)
		{
			var sDate = new Date(parseInt(date));
			return sDate.getDate();
		}
		else
		{
			var sDate = new Date(parseInt(date) * 1000);
			return sDate.getDate();
		}
	}

	Handlebars.registerHelper('buildOptions', function(field_data)
	{
		var list_values = field_data.split(";");
		var list_options = '';
		// Create options based on list values
		$.each(list_values, function(index, value)
		{
			if (value != "")
				list_options = list_options.concat('<option value="' + value + '">' + value + '</option>');
		});

		return list_options;
	});

	Handlebars.registerHelper('address_Template', function(properties)
	{

		for (var i = 0, l = properties.length; i < l; i++)
		{

			if (properties[i].name == "address")
			{
				var el = '';

				var address = {};
				try
				{
					address = JSON.parse(properties[i].value);
				}
				catch (err)
				{
					address['address'] = properties[i].value;
				}

				// Gets properties (keys) count of given json
				// object
				var count = countJsonProperties(address);

				$.each(address, function(key, val)
				{
					if (--count == 0)
					{
						el = el.concat(val + ".");
						return;
					}
					el = el.concat(val + ", ");
				});
				/*
				 * if (properties[i].subtype) el = el.concat(" <span
				 * class='label'>" + properties[i].subtype + "</span>");
				 */

				return new Handlebars.SafeString(el);
			}
		}
	});

	// To show related to contacts for contacts as well as companies
	Handlebars.registerHelper('related_to_contacts', function(data, options)
	{
		var el = "";
		var count = data.length;
		$.each(data, function(key, value)
		{
			var html = getTemplate("related-to-contacts", value);
			if (--count == 0)
			{
				el = el.concat(html);
				return;
			}
			el = el.concat(html + ",");
		});
		return new Handlebars.SafeString(el);
	});

	// To show only one related to contacts or companies in deals
	Handlebars.registerHelper('related_to_one', function(data, options)
	{
		// return "<span>" + getTemplate("related-to-contacts", data[0]) +
		// "</span>";
		var el = "";
		var count = data.length;
		$.each(data, function(key, value)
		{
			if (key <= 3)
			{
				var html = getTemplate("related-to-contacts", value);
				html=html.trim();
				if (--count == 0 || key == 3)
				{
					el = el.concat(html);
					return;
				}
				el = el.concat(html + ", ");
			}

		});
		return new Handlebars.SafeString(el);

	});

	/**
	 * To represent a number with commas in deals
	 */
	Handlebars.registerHelper('numberWithCommas', function(value)
	{
		if (value)
			return value.toFixed(2).toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
	});

	/**
	 * Converts reports/view field element as comma seprated values and returns
	 * as handlebars safe string.
	 */
	Handlebars.registerHelper('field_Element', function(properties)
	{
		var el = "";
		var count = properties.length;

		$.each(properties, function(key, value)
		{

			if (value.indexOf("properties_") != -1)
				value = value.split("properties_")[1];
			else if (value.indexOf("custom_") != -1)
				value = value.split("custom_")[1];
			else if (value.indexOf("CUSTOM_") != -1)
				value = value.split("CUSTOM_")[1];
			else if (value == "created_time")
				value = "Created Date";
			else if (value == "updated_time")
				value = "Updated Date";

			value = value.replace("_", " ");

			if (--count == 0)
			{
				el = el.concat(value);
				return;
			}
			el = el.concat(value + ", ");
		});

		return new Handlebars.SafeString(el);
	});

	/**
	 * Converts string to JSON
	 */
	Handlebars.registerHelper('stringToJSON', function(object, key, options)
	{
		console.log(object);
		console.log(key);
		if (key)
		{
			try
			{

				object[key] = JSON.parse(object[key]);
			}
			finally
			{
				return options.fn(object[key]);
			}
		}

		try
		{
			return options.fn(JSON.parse(object));
		}
		catch (err)
		{
			return options.fn(object);
		}
	});

	/**
	 * Checks the existence of property name and prints value
	 */
	Handlebars.registerHelper('if_propertyName', function(pname, options)
	{
		for (var i = 0; i < this.properties.length; i++)
		{
			if (this.properties[i].name == pname)
				return options.fn(this.properties[i]);
		}
		return options.inverse(this);
	});

	/*
	 * Gets company image from a contact object.
	 * 
	 * --If image uploaded, returns that ( the frame size requested ). --Else if
	 * url present, fetch icon from the url via Google S2 service (frame
	 * size=32x32) --Else return img/company.png ( the frame size requested ).
	 * 
	 * --CSS for frame is adjusted when fetching from url ( default padding =
	 * 4px , now 4+adjust ). --'onError' is an attribute (js function) fired
	 * when image fails to download, maybe due to remote servers being down It
	 * defaults to img/company.png which should be present in server as static
	 * file
	 * 
	 * Usage: e.g. <img {{getCompanyImage "40" "display:inline"}} class="..."
	 * ... >
	 * 
	 * This helper sets src,onError & style attribute. "40" is full frame size
	 * requested. Additional styles like "display:inline;" or "display:block;"
	 * can be specified in 2nd param.
	 * 
	 * @author Chandan
	 */
	Handlebars
			.registerHelper(
					'getCompanyImage',
					function(frame_size, additional_style)
					{

						var full_size = parseInt(frame_size); // size
						// requested,full
						// frame
						var size_diff = 4 + ((full_size - 32) / 2); // calculating
						// padding,
						// for small
						// favicon
						// 16x16 as
						// 32x32,
						// fill rest frame with padding

						// default when we can't find image uploaded or url to
						// fetch from

						var default_return = "src='"+updateImageS3Path('img/building.png')+"' style='width:" + full_size + "px; height=" + full_size + "px;" + additional_style + "'";


						// when the image from uploaded one or favicon can't be
						// fetched, then show company.png, adjust CSS ( if style
						// broken by favicon ).
						var error_fxn = "";

						for (var i = 0; i < this.properties.length; i++)
						{
							if (this.properties[i].name == "image")
							{
								default_return = "src='" + this.properties[i].value + "' style='width:" + full_size + "px; height=" + full_size + "px;" + additional_style + ";'";
								// found uploaded image, break, no need to
								// lookup url


								error_fxn = "this.src='"+updateImageS3Path('img/building.png')+"'; this.onerror=null;";

								// no need to resize, company.png is of good
								// quality & can be scaled to this size

								break;
							}
							if (this.properties[i].name == "url")
							{
								default_return = "src='https://www.google.com/s2/favicons?domain=" + this.properties[i].value + "' " + "style='width:" + full_size + "px; height=" + full_size + "px; padding:" + size_diff + "px; " + additional_style + " ;'";
								// favicon fetch -- Google S2 Service, 32x32,
								// rest padding added

								error_fxn = "this.src='"+updateImageS3Path("img/building.png")+"'; " + "$(this).css('width','" + frame_size + "px'); $(this).css('height','" + frame_size + "px');" + "$(this).css('padding','4px'); this.onerror=null;";

								// resize needed as favicon is 16x16 & scaled to
								// just 32x32, company.png is adjusted on error
							}
						}
						// return safe string so that our html is not escaped
						return new Handlebars.SafeString(default_return + " onError=\"" + error_fxn + "\"");
					});

	/**
	 * Get appropriate link i.e. protocol://whatever.xxx. If no protocol
	 * present, assume http
	 */
	Handlebars.registerHelper('getHyperlinkFromURL', function(url)
	{
		if (url.match(/((http|http[s]|ftp|file):\/\/)/) != null)
			return url;
		return 'http://' + url;
	});

	Handlebars.registerHelper('getSkypeURL', function(url)
	{
		if (url.match("skype:") != null)
			return url;
		return 'skype:' + url;
	});

	Handlebars.registerHelper('getFacebookURL', function(url)
	{
		return url.replace('@', '');
	});

	// Get Count
	Handlebars.registerHelper('count', function()
	{
		return getCount(this);
	});

	Handlebars
			.registerHelper(
					'contacts_count',
					function()
					{
						var count_message;
						if (this[0] && this[0].count && (this[0].count != -1))
						{

							if (this[0].count > 9999 && (_agile_get_prefs('contact_filter') || _agile_get_prefs('dynamic_contact_filter')))
								count_message = "<small> (" + 10000 + "+ Total) </small>" + '<span style="vertical-align: text-top; margin-left: -5px">' + '<img border="0" src="'+updateImageS3Path("/img/help.png")+'"' + 'style="height: 10px; vertical-align: middle" rel="popover"' + 'data-placement="bottom" data-title="Lead Score"' + 'data-content="Looks like there are over 10,000 results. Sorry we can\'t give you a precise number in such cases."' + 'id="element" data-trigger="hover">' + '</span>';

							else
								count_message = "<small> (" + this[0].count + " Total) </small>";
						}
						else
							count_message = "<small> (" + this.length + " Total) </small>";

						return new Handlebars.SafeString(count_message);
					});

	Handlebars.registerHelper('duplicate_contacts_count', function()
	{
		var count_message;
		if (this[0] && this[0].count && (this[0].count != -1))
		{
			var count = this[0].count - 1;
			count_message = "<small> (" + count + " Total) </small>";
		}
		else
			count_message = "<small> (" + this.length + " Total) </small>";

		return new Handlebars.SafeString(count_message);
	});

	/**
	 * 
	 * Returns subscribers count without parenthesis
	 * 
	 */
	Handlebars.registerHelper('subscribers_count', function()
	{

		if (this[0] && this[0].count && (this[0].count != -1))
			return this[0].count;

		return this.length;

	});

	/**
	 * Convert string to lower case
	 */
	Handlebars.registerHelper('toLowerCase', function(value)
	{
		if (!value)
			return;
		return value.toLowerCase();
	});

	/**
	 * Convert string to lower case
	 */
	Handlebars.registerHelper('toUpperCase', function(value)
	{
		if (!value)
			return;
		return value.toUpperCase();
	});

	/**
	 * Executes template, based on contact type (person or company)
	 */
	Handlebars.registerHelper('if_contact_type', function(ctype, options)
	{
		if (this.type == ctype)
		{
			return options.fn(this);
		}
	});

	/**
	 * Executes template, based on contact type (person or company)
	 */
	Handlebars.registerHelper('collection_contact_type', function(ctype, options)
	{

		if (this && this[0] && this[0].type == ctype)
			return options.fn(this);

	});

	Handlebars.registerHelper('wrap_entity', function(item, options)
	{

		if (item)
			return options.fn(item);
	});

	/**
	 * Returns modified message for timeline logs
	 */
	Handlebars.registerHelper('tl_log_string', function(string)
	{

		return string.replace("Sending email From:", "Email sent From:");
	});

	/**
	 * Returns "Lead Score" of a contact, when it is greater than zero only
	 */
	Handlebars.registerHelper('lead_score', function(value)
	{
		//if (this.lead_score > 0)
			return this.lead_score;
		//else
		//	return "";
	});

	/**
	 * Returns task completion status (Since boolean false is not getting
	 * printed, converted it into string and returned.)
	 */
	Handlebars.registerHelper('task_status', function(status)
	{
		if (status)
			return true;

		// Return false as string as the template can not print boolean false
		return "false";

	});

	/**
	 * Compares the arguments (value and target) and executes the template based
	 * on the result (used in contacts typeahead)
	 */
	Handlebars.registerHelper('if_equals', function(value, target, options)
	{

		/*
		 * console.log("typeof target: " + typeof target + " target: " +
		 * target); console.log("typeof value: " + typeof value + " value: " +
		 * value);
		 */
		/*
		 * typeof is used beacuse !target returns true if it is empty string,
		 * when string is empty it should not go undefined
		 */
		if ((typeof target === "undefined") || (typeof value === "undefined"))
			return options.inverse(this);

		if (value.toString().trim() == target.toString().trim())
			return options.fn(this);
		else
			return options.inverse(this);
	});

	/**
	 * Compares the arguments (value and target) and executes the template based
	 * on the result (used in contacts typeahead)
	 */
	Handlebars.registerHelper('if_hasWriteAccess', function(options){

		var status = false;
		// Retrieves widget which is fetched using script API
		var stripe_widget = agile_crm_get_widget("Stripe");
		if(stripe_widget != undefined){

			if (stripe_widget.prefs != undefined)
			{			
				// Parse string Stripe widget preferences as JSON
				var stripe_widget_prefs = JSON.parse(stripe_widget.prefs);
				var scope = stripe_widget_prefs.scope;				
				if(scope == "read_write"){					
					status = true;
				}
			}
		}

		if(status){
			return options.fn(this);			
		}else{			
			return options.inverse(this);
		}
	});

	Handlebars.registerHelper('if_not_equals', function(value, target, options)
	{

		if ((typeof target === "undefined") || (typeof value === "undefined"))
			return options.inverse(this);

		if (value.toString().trim() != target.toString().trim())
			return options.fn(this);
		else
			return options.inverse(this);
	});

	/**
	 * Compares the arguments (value and target) and executes the template based
	 * on the result (used in contacts typeahead)
	 * working as greater than or equal to
	 */
	Handlebars.registerHelper('if_greater', function(value, target, options)
	{
		if (parseInt(target) > value)
			return options.inverse(this);
		else
			return options.fn(this);
	});

	/**
	 * Compares the arguments (value and target) and executes the template based
	 * on the result (used in contacts typeahead)
	 */
	Handlebars.registerHelper('if_less_than', function(value, target, options)
	{
		if (target < value)
			return options.inverse(this);
		else
			return options.fn(this);
	});

	Handlebars.registerHelper('if_keyboard_shortcuts_enabled', function(options)
	{
		if (CURRENT_USER_PREFS.keyboard_shotcuts)
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('campaigns_heading', function(value, options)
	{
		var val = 0;
		if (value && value[0] && value[0].count)
			val = value[0].count;

		if (val <= 20)
			return "Workflows";

		return "(" + val + " Total)";
	});

	/**
	 * Adds Custom Fields to forms, where this helper function is called
	 */
	Handlebars.registerHelper('show_custom_fields', function(custom_fields, properties)
	{

		var el = show_custom_fields_helper(custom_fields, properties);
		return new Handlebars.SafeString(fill_custom_field_values($(el), properties));

	});

	Handlebars.registerHelper('is_property_custom_field', function(field_name, options)
	{
		if(field_name.indexOf("CUSTOM_") != -1)
		        return options.fn(this);
		else
		return options.inverse(this);

	});

	Handlebars.registerHelper('is_property_custom_field_date_type', function(custom_fields, properties, field_name, options)
	{
		if(field_name){
			field_name = field_name.split("CUSTOM_")[1]; 
		}
        var property = getProperty(properties, field_name);
        
        if(isDateCustomField(custom_fields,property))
        	return options.fn(property);
		else
			return options.inverse(property);
	});

	Handlebars.registerHelper('is_link', function(value, options)
	{

		var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;

		if (value && value.search(exp) != -1)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	/**
	 * Returns table headings for custom contacts list view
	 */
	Handlebars.registerHelper('displayPlan', function(value)
	{

		return ucfirst(value).replaceAll("_", " ");

	});

	/**
	 * Returns plain text removes underscore from text
	 */
	Handlebars.registerHelper('displayPlainText', function(value)
	{

		return ucfirst(value).replace("_", " ");

	});

	Handlebars.registerHelper('getCurrentContactProperty', function(value)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			var contact_properties = App_Contacts.contactDetailView.model.get('properties')
			console.log(App_Contacts.contactDetailView.model.toJSON());
			return getPropertyValue(contact_properties, value);
		}
	});

	Handlebars.registerHelper('string_to_date', function(format, date)
	{

		return new Date(date).format(format);
	});

	Handlebars.registerHelper('isArray', function(data, options)
	{
		if (isArray(data))
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('is_string', function(data, options)
	{
		if (typeof data == "string")
			return options.fn(this);
		return options.inverse(this);

	});

	Handlebars.registerHelper("bindData", function(data)
	{

		return JSON.stringify(data);
	});

	Handlebars.registerHelper("getCurrentUserPrefs", function(options)
	{
		if (CURRENT_USER_PREFS)
			;
		return options.fn(CURRENT_USER_PREFS);
	});

	Handlebars.registerHelper("getCurrentDomain", function(options)
	{

		var url = window.location.host;

		var exp = /(\.)/;

		if (url.search(exp) >= 0)
			return url.split(exp)[0];

		return " ";
	});

	// Gets date in given range
	Handlebars.registerHelper('date-range', function(from_date_string, no_of_days, options)
	{
		var from_date = Date.parse(from_date_string);
		var to_date = Date.today().add({ days : parseInt(no_of_days) });
		return to_date.toString('MMMM d, yyyy') + " - " + from_date.toString('MMMM d, yyyy');

	});

		Handlebars.registerHelper('month-range', function(options)
	{
		var from_date = Date.today().moveToFirstDayOfMonth();
		var to_date = Date.today().moveToLastDayOfMonth();
		return from_date.toString('MMMM d, yyyy') + " - " + to_date.toString('MMMM d, yyyy');

	});

	Handlebars.registerHelper("extractEmail", function(content, options)
	{

		console.log(content);

		return options.fn(content.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi)[0]);
	});

	Handlebars.registerHelper('if_keyboard_shortcuts_enabled', function(options)
	{
		if (CURRENT_USER_PREFS.keyboard_shotcuts)
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('getCurrentContactPropertyBlock', function(value, options)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			var contact_properties = App_Contacts.contactDetailView.model.get('properties')
			console.log(App_Contacts.contactDetailView.model.toJSON());
			return options.fn(getPropertyValue(contact_properties, value));
		}
	});

	Handlebars.registerHelper('isDuplicateContactProperty', function(properties, key, options)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			var contact_properties = App_Contacts.contactDetailView.model.get('properties')
			var currentContactEntity = getPropertyValue(contact_properties, key);
			var contactEntity = getPropertyValue(properties, key);

			if (!currentContactEntity || !contactEntity)
			{
				currentContactEntity = getPropertyValue(contact_properties, "first_name") + " " + getPropertyValue(contact_properties, "last_name");
				contactEntity = getPropertyValue(properties, "first_name") + " " + getPropertyValue(properties, "last_name");
			}
			
			if(App_Contacts.contactDetailView.model.get('type') == 'COMPANY')
			{
				currentContactEntity = getPropertyValue(contact_properties, "name") ;
				contactEntity = getPropertyValue(properties, "name");
			}

			if (currentContactEntity == contactEntity)
				return options.fn(this);

			return options.inverse(this)
		}
	});

	Handlebars.registerHelper('containString', function(value, target, options)
	{
		if (target.search(value) != -1)
			return options.fn(this);

		return options.inverse(this);
	});
	Handlebars.registerHelper('is_emailPlan', function(planId, options)
	{

		if (planId.search("email") != -1)
			return options.fn(this);

		return options.inverse(this);

	});
	Handlebars.registerHelper('is_userPlan', function(planId, options)
	{
		if (planId.search("email") != -1)
			return options.inverse(this);
		return options.fn(this);

	});

	Handlebars.registerHelper('numeric_operation', function(operand1, operand2, operator)
	{

		var operators = "/*-+";

		if (operators.indexOf(operator) == -1)
			return "";

		if (operator == "+")
			return operand1 + operand2;

		if (operator == "-")
			return operand1 - operand2;

		if (operator == "*")
			return operand1 * operand2;

		if (operator == "/")
			return operand1 / operand2;
	});
	Handlebars.registerHelper('get_total_amount', function(operand1, operand2)
	{

		return (operand1 / 100) * operand2;
	});

	Handlebars.registerHelper('check_length', function(content, length, options)
	{

		if (parseInt(content.length) > parseInt(length))
			return options.fn(this);

		return options.inverse(this);
	});

	Handlebars.registerHelper('check_json_length', function(content, length, options)
	{
		var json_length = 0;
		for ( var prop in content)
		{
			json_length++;
		}

		if (json_length == parseInt(length))
		{
			for ( var prop in content)
			{
				return options.fn({ property : prop, value : content[prop], last : true });
			}
		}

		return options.inverse(content);
	});

	Handlebars.registerHelper('iterate_json', function(context, options)
	{
		var result = "";
		var count = 0;
		var length = 0;
		for ( var prop in context)
		{
			length++;
		}

		for ( var prop in context)
		{
			count++;
			if (count == length)
				result = result + options.fn({ property : prop, value : context[prop], last : true });
			else
				result = result + options.fn({ property : prop, value : context[prop], last : false });

		}

		console.log(result);
		return result;
	});

	Handlebars.registerHelper('get_social_icon', function(name)
	{
		return get_social_icon(name);

	});

	Handlebars.registerHelper("each_with_index", function(array, options)
	{
		var buffer = "";
		for (var i = 0, j = array.length; i < j; i++)
		{
			var item = array[i];

			// stick an index property onto the item, starting with 1, may make
			// configurable later
			item.index = i + 1;

			console.log(item);
			// show the inside of the block
			buffer += options.fn(item);
		}

		// return the finished buffer
		return buffer;

	});

	Handlebars.registerHelper('if_json', function(context, options)
	{

		try
		{
			var json = $.parseJSON(context);

			if (typeof json === 'object')
				return options.fn(this);
			return options.inverse(this);
		}
		catch (err)
		{
			return options.inverse(this);
		}
	});

	Handlebars.registerHelper('add_tag', function(tag)
	{
		addTagAgile(tag);
	});

	Handlebars.registerHelper('set_up_dashboard_padcontent', function(key)
	{
		return new Handlebars.SafeString(getTemplate("empty-collection-model", CONTENT_JSON.dashboard[key]));
	});

	/**
	 * Removes surrounded square brackets
	 */
	Handlebars.registerHelper('removeSquareBrackets', function(value)
	{
		return value.replace(/[\[\]]+/g, '');
	});

	/**
	 * Removes "" with single quotes brackets
	 */
	Handlebars.registerHelper('removeDoubleCoutes', function(value)
	{
		var strings = value.replace(/[\[\]]+/g, '');
		var charwithsinglequote = strings.replace(/"/g, "'");
		return charwithsinglequote;
	});

	/**
	 * Shows list of triggers separated by comma
	 */
	Handlebars.registerHelper('toLinkTrigger', function(context, options)
	{
		var ret = "";
		for (var i = 0, j = context.length; i < j; i++)
		{
			ret = ret + options.fn(context[i]);

			// Avoid comma appending to last element
			if (i < j - 1)
			{
				ret = ret + ", ";
			}
			;
		}
		return ret;
	});

	// Gets minutes from milli seconds
	Handlebars.registerHelper('millSecondsToMinutes', function(timeInMill)
	{
		if (isNaN(timeInMill))
			return;
		var sec = timeInMill / 1000;
		var min = Math.floor(sec / 60);

		if (min < 1)
			return Math.ceil(sec) + " secs";

		var remainingSec = Math.ceil(sec % 60);

		return min + " mins, " + remainingSec + " secs";
	});

	Handlebars.registerHelper('if_overflow', function(content, div_height, options)
	{

		if (!content)
			return;

		console.log($('#Linkedin').width());
		content = content.trim();
		var element = $("<div style='width:" + $('#Linkedin').width() + "px;" + "word-break:normal;word-wrap:break-word;display:none;'>" + content + "</div>");

		$("#content").append(element);

		console.log(element.height() + " " + parseInt(div_height))
		if (element.height() > parseInt(div_height))
			return options.fn(this);
		return options.inverse(this);
	});

	/**
	 * To set up star rating in contacts listing
	 */
	Handlebars.registerHelper('setupRating', function(value)
	{

		var element = "";
		for (var i = 0; i < 5; i++)
		{
			if (i < parseInt(value))
			{
				element = element.concat('<li style="display: inline;"><img src="'+updateImageS3Path("img/star-value-on.png")+'" alt="' + i + '"></li>');
				continue;
			}
			element = element.concat('<li style="display: inline;"><img src="'+updateImageS3Path("img/star-value-off.png")+'" alt="' + i + '"></li>');
		}
		return new Handlebars.SafeString(element);
	});

	/**
	 * Builds options to be shown in the table heading of CSV import. Also tries
	 * to match headings in select field
	 */
	Handlebars.registerHelper('setupCSVUploadOptions', function(type, key, context)
	{
		// console.log(context.toJSON());
		var template;
		if (type == "contacts")
		{
			getTemplate('csv_upload_options', context, undefined, function(template_ui){
		 		if(!template_ui)
		    		return;
		    	template = $(template_ui);
				
			}, null);

		}
		else if (type == "company")
		{
			getTemplate('csv_companies_upload_options', context, undefined, function(template_ui){
		 		if(!template_ui)
		    		return;
		    	template = $(template_ui);
				
			}, null);
		}
		else if (type == "deals")
		{
			getTemplate('csv_deals_options', context, undefined, function(template_ui){
		 		if(!template_ui)
		    		return;
		    	template = $(template_ui);
				
			}, null);
		}

		// Replaces _ with spaces
		key = key.replace("_", " ");

		var isFound = false;

		var match_weight = 0;

		var key_length = key.length;
		var key = key.toLowerCase();
		var matched_value;

		var selected_element;
		template.find('option').each(function(index, element)
		{
			if ($(element).text().toLowerCase().indexOf(key) != -1)
			{

				var current_match_weight = key_length / $(element).text().length;
				if (match_weight >= current_match_weight)
					return;

				selected_element = $(element);
				matched_value = $(element).text();
				match_weight = current_match_weight;
			}
		})

		console.log(matched_value + ", " + key + " : " + match_weight);

		for (var i = 0; i < key.length - 3; i++)
		{
			template.find('option').each(function(index, element)
			{
				if ($(element).text().toLowerCase().indexOf(key.substr(0, key.length - i).toLowerCase()) != -1)
				{
					console.log(key.substr(0, key.length - i) + " , " + $(element).text());
					var current_match_weight = key.substr(0, key.length - i).length / $(element).text().length;
					console.log(current_match_weight);
					if (match_weight >= current_match_weight)
						return;
					selected_element = $(element);
					matched_value = $(element).text();
					match_weight = current_match_weight;
				}
			})
		}

		$(selected_element).attr("selected", true);

		/*
		 * // Iterates to create various combinations and check with the header
		 * for ( var i = 0; i < key.length - 3; i++) {
		 * template.find('option').each(function(index, element) { if
		 * ($(element).val().toLowerCase().indexOf(key) != -1) { isFound = true;
		 * $(element).attr("selected", true); return false; } else if
		 * ($(element).val().toLowerCase().indexOf(key.substr(0, key.length -
		 * i).toLowerCase()) != -1) { isFound = true;
		 * $(element).attr("selected", true); return false; }
		 * 
		 * }); if (isFound) break; }
		 */
		return new Handlebars.SafeString($('<div>').html(template).html());
	});

	/**
	 * Converts total seconds into hours, minutes and seconds. For e.g. 3600
	 * secs - 1hr 0 mins 0secs
	 */
	Handlebars.registerHelper('convertSecondsToHour', function(totalSec)
	{
		var hours = parseInt(totalSec / 3600) % 24;
		var minutes = parseInt(totalSec / 60) % 60;
		var seconds = totalSec % 60;

		// show only seconds if hours and mins are zero
		if (hours == 0 && minutes == 0)
			return (seconds + "s");

		// show mins and secs if hours are zero.
		if (hours == 0)
			return (minutes + "m ") + (seconds + "s");

		var result = (hours + "h ") + (minutes + "m ") + (seconds + "s");
		return result;
	});

	/**
	 * To check and return value of original referrer
	 */
	Handlebars.registerHelper('checkOriginalRef', function(original_ref)
	{
		if (!getCurrentContactProperty(original_ref))
			return "unknown";

		var url = getCurrentContactProperty(original_ref);

		url = url.split('/');
		url = (url[0] + '//' + url[2]);
		return new Handlebars.SafeString(
				'<a style="text-decoration: none" target="_blank" href="' + getCurrentContactProperty(original_ref) + '">' + url + '</a>');
	});

	/**
	 * To check google url and key words
	 */
	Handlebars.registerHelper('queryWords', function(original_ref)
	{
		// Check if original referrer exists
		if (getCurrentContactProperty(original_ref))
		{
			// Get input url from contact properties and initialize reference
			// url
			var inputUrl = getCurrentContactProperty(original_ref);
			var referenceUrl = 'www.google.';

			// Get host from input url and compare with reference url if equal
			var tempUrl = inputUrl.split('/');
			tempUrl = tempUrl[2].slice(0, 11);
			if (tempUrl === referenceUrl)
			{
				// Get search term from input url
				var parser = document.createElement('a');
				parser.href = inputUrl;
				var search = parser.search;

				// If search term exists, check if 'q' parameter exists, and
				// return its value
				if (search.length > 1)
				{
					search = search.split('&');
					var length = search.length;
					for (var i = 0; i < length; i++)
					{
						if (search[i].indexOf('q=') != -1)
						{
							search = search[i].split('=');
							return new Handlebars.SafeString('( Keyword : ' + search[1].split('+').join(" ") + ' )');
						}
					}
				}
			}
			else
				return;
		}
	});

	/**
	 * Returns contact full name if last-name exists, otherwise only first_name
	 * for contact type PERSON. It returns company name for other contact type.
	 * 
	 */
	Handlebars.registerHelper('contact_name', function(properties, type)
	{

		if (type === 'PERSON')
		{
			for (var i = 0; i < properties.length; i++)
			{

				// if last-name exists, return full name.
				if (properties[i].name === "last_name")
					return (getPropertyValue(properties, "first_name") + " " + properties[i].value);

				else if (properties[i].name === "first_name")
					return properties[i].value;
			}

			return "Contact";
		}

		// COMPANY type
		for (var i = 0; i < properties.length; i++)
		{
			if (properties[i].name === "name")
				return properties[i].value;
		}
		return "Company";
	});

	/**
	 * Returns full name of contact. Use this when empty value is not
	 * acceptable. Takes care that, even when no names are defined, returns
	 * email(necessary for PERSON) or Company <id>. Calls function
	 * getContactName defined in agile-typeahead.js. Also typeahead uses this
	 * fxn to append values as tags.
	 */
	Handlebars.registerHelper('contact_name_necessary', function(contact)
	{
		return getContactName(contact);
	});

	/**
	 * To check if string is blank
	 */
	Handlebars.registerHelper('is_blank', function(value, options)
	{
		value = value.trim();

		if (value == "")
			return options.fn(value);
		else
			return options.inverse(value);
	})

	/**
	 * Iterate through list of values (not json)
	 */
	Handlebars.registerHelper("each_with_index1", function(array, options)
	{
		console.log(array);
		var buffer = "";
		for (var i = 0, j = array.length; i < j; i++)
		{
			var item = {};
			item["value"] = array[i];

			console.log(item);
			// stick an index property onto the item, starting with 1, may make
			// configurable later
			item["index"] = i + 1;

			console.log(item);
			// show the inside of the block
			buffer += options.fn(item);
		}

		// return the finished buffer
		return buffer;

	});

	/**
	 * If log_type equals true otherwise false
	 */
	Handlebars.registerHelper("if_log_type_equals", function(object, key, log_type, options)
	{

		if (object[key] == log_type)
			return options.fn(object);

		return options.inverse(object);

	});

	/**
	 * Identifies EMAIL_SENT campaign-log string and splits the log string based
	 * on '_aGiLeCrM' delimiter into To, From, Subject and Body.
	 * 
	 */
	Handlebars.registerHelper("if_email_sent", function(object, key, options)
	{

		// delimiter for campaign send-email log
		var _AGILE_CRM_DELIMITER = "_aGiLeCrM";

		// if log_type is EMAIL_SENT
		if (object[key] === "EMAIL_SENT")
		{
			// Splits logs message
			var email_fields = object["message"].split(_AGILE_CRM_DELIMITER, 4);

			// Json to apply for handlebar template
			var json = {};

			if (email_fields === undefined)
				return options.inverse(object);

			// Iterates inorder to insert each field into json
			for (var i = 0; i < email_fields.length; i++)
			{
				// Splits based on colon. E.g "To: naresh@agilecrm.com   "
				var arrcolon = email_fields[i].split(":");

				// Inserts LHS of colon as key. E.g., To
				var key = arrcolon[0];
				key = key.trim(); // if key starts with space, it can't
				// accessible

				// Inserts RHS of colon as value. E.g., naresh@agilecrm.com  
				var value = arrcolon.slice(1).join(":"); // join the
				// remaining string
				// based on colon,
				// only first occurence of colon is needed
				value = value.trim();

				json[key] = value;
			}

			// inserts time into json
			json.time = object["time"];

			// apply customized json to template.
			return options.fn(json);
		}

		// if not EMAIL_SENT log, goto else in the template
		return options.inverse(object);

	});

	Handlebars.registerHelper('remove_spaces', function(value)
	{
		if(value)
			  value = value.replace(/ +/g, '');

		return value;

	});

	Handlebars.registerHelper('replace_spaces', function(value)
	{
		if(value)
			  value = value.replace(/ +/g, '_');

		return value;

	});

	/***************************************************************************
	 * Returns campaignStatus object from contact campaignStatus array having
	 * same campaign-id. It is used to get start and completed time from array.
	 **************************************************************************/
	Handlebars.registerHelper('if_same_campaign', function(object, data, options)
	{

		var campaignStatusArray = object[data];

		// if campaignStatus key doesn't exist return.
		if (data === undefined || campaignStatusArray === undefined)
			return;

		// Get campaign-id from hash
		var current_campaign_id = getIdFromHash();

		for (var i = 0, len = campaignStatusArray.length; i < len; i++)
		{

			// compares campaign-id of each element of array with
			// current campaign-id
			if (campaignStatusArray[i].campaign_id === current_campaign_id)
			{
				// if equal, execute template current json
				return options.fn(campaignStatusArray[i]);
			}
		}

	});

	/**
	 * Returns other active campaigns in campaign-active subscribers.
	 */
	Handlebars.registerHelper('if_other_active_campaigns', function(object, data, options)
	{

		if (object === undefined || object[data] === undefined)
			return;

		var other_campaigns = {};
		var other_active_campaigns = [];
		var other_completed_campaigns = [];
		var campaignStatusArray = object[data];

		var current_campaign_id = getIdFromHash();

		for (var i = 0, len = campaignStatusArray.length; i < len; i++)
		{
			// neglect same campaign
			if (current_campaign_id === campaignStatusArray[i].campaign_id)
				continue;

			// push all other active campaigns
			if (campaignStatusArray[i].status.indexOf('ACTIVE') !== -1)
				other_active_campaigns.push(campaignStatusArray[i])

				// push all done campaigns
			if (campaignStatusArray[i].status.indexOf('DONE') !== -1)
				other_completed_campaigns.push(campaignStatusArray[i]);
		}

		other_campaigns["active"] = other_active_campaigns;
		other_campaigns["done"] = other_completed_campaigns;

		return options.fn(other_campaigns);

	});

	/**
	 * Returns Contact Model from contactDetailView collection.
	 * 
	 */
	Handlebars.registerHelper('contact_model', function(options)
	{
		if (App_Contacts.contactDetailView && App_Contacts.contactDetailView.model)
		{
			// if simply Campaigns tab clicked, use current collection
			return options.fn(App_Contacts.contactDetailView.model.toJSON());
		}

	});
	

	/**
	 * Verifies given urls length and returns options hash based on restricted
	 * count value.
	 * 
	 */
	Handlebars.registerHelper("if_more_urls", function(url_json, url_json_length, options)
	{
		var RESTRICT_URLS_COUNT = 3;
		var temp_urls_array = [];
		var context_json = {};

		// If length is less than restricted, compile
		// else block with given url_json
		if (url_json_length < RESTRICT_URLS_COUNT)
			return options.inverse(url_json);

		// Insert urls until restricted count reached
		for (var i = 0; i < url_json.length; i++)
		{
			if (i === RESTRICT_URLS_COUNT)
				break;

			temp_urls_array.push(url_json[i]);
		}

		context_json.urls = temp_urls_array;

		// More remained
		context_json.more = url_json_length - RESTRICT_URLS_COUNT;

		return options.fn(context_json);

	});

	Handlebars.registerHelper('safe_tweet', function(data)
	{
		data = data.trim();
		return new Handlebars.SafeString(data);
	});
	/**
	 * Get stream icon for social suite streams.
	 */
	Handlebars.registerHelper('get_stream_icon', function(name)
	{
		if (!name)
			return;

		var icon_json = { "Home" : "icon-home", "Retweets" : "icon-retweet", "DM_Inbox" : "icon-download-alt", "DM_Outbox" : "icon-upload-alt",
			"Favorites" : "icon-star", "Sent" : "icon-share-alt", "Search" : "icon-search", "Scheduled" : "icon-time", "All_Updates" : "icon-home",
			"My_Updates" : "icon-share-alt" };

		name = name.trim();

		if (icon_json[name])
			return icon_json[name];

		return "icon-globe";

	});

	/**
	 * Get task list name without underscore and caps, for new task UI.
	 */
	Handlebars.registerHelper('get_normal_name', function(name)
	{
		if (!name)
			return;

		var name_json = { "HIGH" : "High", "LOW" : "Low", "NORMAL" : "Normal", "YET_TO_START" : "Yet To Start",
			"IN_PROGRESS" : "In Progress", "COMPLETED" : "Completed", "TODAY" : "Today", "TOMORROW" : "Tomorrow", "OVERDUE" : "Overdue", "LATER" : "Later" };

		$.extend(name_json,categories.CATEGORIES,name_json);

		name = name.trim();

		if (name_json[name])
			return name_json[name];

		return name;

	});

	/**
	 * Get activity type without underscore and caps, for deal _details page.
	 */
	Handlebars.registerHelper('get_normal_activity_type', function(name)
	{
		if (!name)
			return;

		var name_json = { "DEAL_ADD" : "Deal Created", "DEAL_EDIT" : "Deal Edited", "DEAL_CLOSE" : "Deal Closed", "DEAL_LOST" : "Deal Lost",
			"DEAL_RELATED_CONTACTS" : " Deal Contacts Changed", "DEAL_OWNER_CHANGE" : "Deal Owner Changed", "DEAL_MILESTONE_CHANGE" : "Deal Milestone Changed",
			"DEAL_ARCHIVE" : "Deal Archived", "DEAL_RESTORE" : "Deal Restored",
			"User_Email_Changed" : "User email","User_Name_Changed" :"User Name Changed","User_Created" : "New User Created","User_Deleted" : "User Deleted","User_Permissions_Change" : "User Permissions Changed",

			"NOTE_ADD" : "Note Added", "TASK_ADD" : "Task Created", "TASK_EDIT" : "Task Updated", "TASK_PROGRESS_CHANGE" : "Progress Changed",
			"TASK_OWNER_CHANGE" : "Owner Changed", "TASK_STATUS_CHANGE" : "Status Changed", "TASK_COMPLETED" : "Task Completed",
			"TASK_DELETE" : "Task Deleted", "TASK_RELATED_CONTACTS" : "Contacts Modified" };

		name = name.trim();

		if (name_json[name])
			return name_json[name];

		return name;

	});

	/**
	 * put user address location togather separated by comma.
	 */
	Handlebars.registerHelper('user_location', function()
	{

		var City = this.city == "?" ? "" : (this.city + ", ");
		var Region = this.region == "?" ? "" : (this.region + ", ");
		var Country = this.country;
		if (this.city == "?" && this.region == "?")
			Country = this.country == "?" ? this.city_lat_long : (this.city_lat_long + " ( " + this.country + " )");

		return (City + Region + Country).trim();
	});

	/**
	 * Trims trailing spaces
	 */
	Handlebars.registerHelper('trim_space', function(value)
	{

		if (value === undefined)
			return value;

		return value.trim();
	});

	/**
	 * Returns reputation name based on value
	 * 
	 */
	Handlebars
			.registerHelper(
					'get_subaccount_reputation_duplicate',
					function(value)
					{
						var type = "bg-light dk text-tiny";
						var reputation = "Unknown";

						if (value > 1 && value < 40)
						{
							type = "label-danger text-tiny";
							reputation = "Poor";
						}
						else if (value >= 40 && value < 75)
						{
							type = "bg-light text-tiny";
							reputation = "Ok";
						}
						else if (value >= 75 && value < 90)
						{
							type = "label-success";
							reputation = "Good";
						}
						else if (value >= 90)
						{
							type = "label-success";
							reputation = "Excellent";
						}

						return "<span style='top: -3px' class='text-sm pos-rlt label " + type + "'>" + reputation + "</span> <!--<span class='badge badge-" + type + "'>" + value + "</span>-->";

					});

	/**
	 * Returns id from hash. It returns id from hash iff id exists at last.
	 * 
	 */
	Handlebars.registerHelper('get_id_from_hash', function()
	{

		return getIdFromHash();

	});

	Handlebars.registerHelper('get_subscribers_type_from_hash', function()
	{

		// Returns "workflows" from "#workflows"
		var hash = window.location.hash.substr(1);

		if (hash.indexOf("all") != -1)
			return "All";

		if (hash.indexOf("active") != -1)
			return "Active";

		if (hash.indexOf("completed") != -1)
			return "Completed";

		if (hash.indexOf("removed") != -1)
			return "Removed";

		if (hash.indexOf("unsubscribed") != -1)
			return "Unsubscribed";

		if (hash.indexOf("hardbounced") != -1)
			return "Hard Bounced";

		if (hash.indexOf("softbounced") != -1)
			return "Soft Bounced";

		if (hash.indexOf("spam-reported") != -1)
			return "Spam Reported";
	});

	Handlebars.registerHelper("check_plan", function(plan, options)
	{
		console.log(plan);

		if (!_billing_restriction)
			return options.fn(this);

		if (_billing_restriction.currentLimits.planName == plan)
			return options.fn(this);

		return options.inverse(this);

	});

	/**
	 * Safari browser doesn't supporting few CSS properties like margin-top,
	 * margin-bottom etc. So this helper is used to add compatible CSS
	 * properties to Safari
	 */
	Handlebars.registerHelper("isSafariBrowser", function(options)
	{

		if (navigator.userAgent.indexOf('Safari') !== -1 && navigator.userAgent.indexOf('Chrome') === -1)
			return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * give custome status base on xerotype
	 */

	Handlebars.registerHelper('xeroType', function(type)
	{
		return (type == "ACCPAY") ? "Payable" : "Receivable";
	});

	/**
	 * give custom type to xero type
	 */
	Handlebars.registerHelper('xeroTypeToolTip', function(type)
	{
		return (type == "ACCPAY") ? "Payable" : "Receivable";
	});

	/**
	 * gives first latter capital for given input
	 */
	Handlebars.registerHelper('capFirstLetter', function(data)
	{
		if(data){
			if (data === "DEFAULT")
			{
				// console.log("return empty");
				return "";
			}
			else
			{
				var temp = data.toLowerCase();
				return temp.charAt(0).toUpperCase() + temp.slice(1);
			}
		}
	});

	Handlebars.registerHelper('qbStatus', function(Balance)
	{
		console.log(this);
		console.log(this.TotalAmt);
		if (Balance == 0)
		{
			return "Paid"
		}
		else
		{
			return "Due"
		}
	});
	Handlebars.registerHelper('currencyFormat', function(data)
	{

		return Number(data).toLocaleString('en');
		// data.replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
	});

	Handlebars.registerHelper('QbDateFormat', function(data)
	{

		var i = [];
		i = data.split("-");
		return i[0] + "-" + i[2] + "-" + i[1];
	});

	Handlebars.registerHelper("hasScope", function(scope_constant, options)
	{
		if (CURRENT_DOMAIN_USER.scopes && $.inArray(scope_constant, CURRENT_DOMAIN_USER.scopes) != -1)
			return options.fn(this);

		return options.inverse(this);
	});

	Handlebars.registerHelper("hasMenuScope", function(scope_constant, options)
	{
		if (CURRENT_DOMAIN_USER.menu_scopes && $.inArray(scope_constant, CURRENT_DOMAIN_USER.menu_scopes) != -1)
			return options.fn(this);

		return options.inverse(this);
	});

	Handlebars.registerHelper("canSyncContacts", function(options)
	{
		if (canImportContacts())
			return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * To check Access controls for showing icons on dashboard
	 */
	Handlebars.registerHelper('hasMenuScope', function(item, options)
	{
		if ((CURRENT_DOMAIN_USER.menu_scopes).indexOf(item) != -1)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('fetchXeroUser', function(data)
	{
		return JSON.parse(data).xeroemail;
	});

	Handlebars.registerHelper('isContactType', function(contact_type, contact_type_2, options)
	{
		if (!contact_type && contact_type_2 == 'PERSON')
		{
			return options.fn(this);
		}
		else if (contact_type == contact_type_2)
			return options.fn(this);

		return options.inverse(this);
	});

	Handlebars.registerHelper('getfbreturndomain', function(data)
	{
		var arr = window.location.href.split('/')
		return arr[2];
	});

	Handlebars
			.registerHelper(
					'tagManagementCollectionSetup',
					function(tags)
					{

						console.log(tags);
						var json = {};

						var keys = [];
						// Store tags in a json, starting letter as key
						for (var i = 0; i < tags.length; i++)
						{
							var tag = tags[i].tag;
							var key = tag.charAt(0).toUpperCase();
							// console.log(tag);
							if (jQuery.inArray(key, keys) == -1)
								keys.push(key);
						}

						console.log(keys);
						keys.sort();
						var html_temp = "";

						for (var i = 0; i < keys.length; i++)
							html_temp += "<div class='row b-b p-b-md'><div class='col-md-1' style='font-size:16px;padding-top:20px;'>" + keys[i] + "</div><div class='col-md-10'><div tag-alphabet=\"" + encodeURI(keys[i]) + "\"><ul class=\"tags-management tag-cloud\" style=\"list-style:none;\"></ul></div></div></div>";

						console.log(html_temp);
						return new Handlebars.SafeString(html_temp);
					});

	Handlebars.registerHelper('containsScope', function(item, list, options)
	{
		if (list.length == 0 || !item)
			return options.inverse(this);

		if (jQuery.inArray(item, list) == -1)
			return options.inverse(this);

		return options.fn(this);

	});

	Handlebars.registerHelper('isOwnerOfContact', function(owner_id, options)
	{

		if (CURRENT_DOMAIN_USER.id == owner_id)
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('getAccountOwnerId', function(options)
	{
		return CURRENT_DOMAIN_USER.id;
	});

	Handlebars.registerHelper('canEditContact', function(owner_id, options)
	{
		if (canEditContact(owner_id))
			return options.fn(this);

		return options.inverse(this)
	});

	Handlebars.registerHelper('canEditCurrentContact', function(owner_id, options)
	{
		if (canEditCurrentContact())
			return options.fn(this);

		return options.inverse(this)
	})

	Handlebars.registerHelper('gateway_exists', function(value, target, options)
	{

		for (var i = 0; i < target.length; i++)
		{

			var prefs = JSON.parse(target[i].prefs);

			if (target[i].name == "EmailGateway")
			{

				if (prefs.email_api == value)
					return options.fn(target[i]);
			}

			if (target[i].name == "SMS-Gateway")
			{
				if (prefs.sms_api == value)
					return options.fn(target[i]);
			}
		}
		return options.inverse(this);
	});

	Handlebars.registerHelper("each_index_slice", function(array, index, options)
	{
		var buffer = "";
		for (var i = index; i < array.length; i++)
		{
			var item = array[i];

			// stick an index property onto the item, starting with 1, may make
			// configurable later
			// item.index = i + 1;

			console.log(item);
			// show the inside of the block
			buffer += options.fn(item);
		}

		// return the finished buffer
		return buffer;

	});

	Handlebars.registerHelper('gateway_exists', function(value, target, options)
	{

		for (var i = 0; i < target.length; i++)
		{

			var prefs = JSON.parse(target[i].prefs);

			if (target[i].name == "EmailGateway")
			{

				if (prefs.email_api == value)
					return options.fn(target[i]);
			}

			if (target[i].name == "SMS-Gateway")
			{
				if (prefs.sms_api == value)
					return options.fn(target[i]);
			}
		}
		return options.inverse(this);
	});

	Handlebars.registerHelper('isOwnerOfContact', function(owner_id, options)
	{

		if (CURRENT_DOMAIN_USER.id == owner_id)
			return options.fn(this);
		return options.inverse(this);
	});

	Handlebars.registerHelper('canEditContact', function(owner_id, options)
	{
		if ((hasScope('UPDATE_CONTACTS') || hasScope('EDIT_CONTACT')) || CURRENT_DOMAIN_USER.id == owner_id)
			return options.fn(this);

		return options.inverse(this)
	});

	Handlebars.registerHelper('getAccountPlanName', function(plan_name)
	{
		if (!plan_name)
			return "Free";

		var plan_fragments = plan_name.split("_");

		return ucfirst(plan_fragments[0]);

	});

	Handlebars.registerHelper('getAccountPlanInteval', function(plan_name)
	{
		if (!plan_name)
			return "Monthly";

		var plan_fragments = plan_name.split("_");

		return ucfirst(plan_fragments[1]);

	});

	Handlebars.registerHelper('getSubscriptionBasedOnPlan', function(customer, plan, options)
	{
		var subscription = getSubscriptionWithAmount(customer, plan);

		if (subscription != null)
			return options.fn(subscription);

		return options.inverse(this);
	});

	// handling with iso date
	Handlebars.registerHelper("iso_date_to_normalizeDate", function(dateString)
	{

		/*
		 * var myDate = new Date(dateString); var timestamp = myDate.getTime();
		 * var d = new Date(parseInt(timestamp) / 1000).format("dd-MM-yyyy");
		 * return d;
		 */
		if (dateString.length <= 0)
			return;
		var arr = dateString.split("T");
		console.log("normalize date " + arr[0]);
		// var d = new Date(arr[0]).format("dd-MM-yyyy");
		return arr[0];

	});

	/**
	 * Index starts from 1
	 */
	Handlebars.registerHelper("getMonthFromIndex", function(month_index)
	{
		var monthArray = [
				"January", "february", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
		];
		if (month_index > 12)
			return monthArray[11];

		return monthArray[month_index - 1];
	});

	Handlebars.registerHelper('xeroOrganisationShortCode', function(block)
	{
		if (typeof SHORT_CODE == "undefined" || SHORT_CODE == "")
		{
			return false;
		}
		else
		{
			return SHORT_CODE;
		}
	});

	Handlebars.registerHelper('buildOptions', function(field_data)
	{
		var list_values = field_data.split(";");
		var list_options = '';
		// Create options based on list values
		$.each(list_values, function(index, value)
		{
			if (value != "")
				list_options = list_options.concat('<option value="' + value + '">' + value + '</option>');
		});

		return list_options;
	});

	/**
	 * Choose Avatar templates
	 */
	Handlebars.registerHelper('get_avatars_template', function(options)
	{
		var template = getTemplate("choose-avatar-images-modal", {});

		getTemplate('choose-avatar-images-modal', {}, undefined, function(template_ui){
	 		if(!template_ui)
	    		return;
	    	var template = $(template_ui);
			 
		}, null);

		return template;
	});

	// checks if email type is agile or not
	Handlebars.registerHelper('if_email_type_is_agile', function(value, options)
	{
		var type = email_server_type;
		if (type)
			if (value === type)
				return options.fn(this);
			else
				return options.inverse(this);
		else
		{
			return options.fn(this);
		}
	});

	// Reads the gloabal varaible and returns it value
	Handlebars.registerHelper('read_global_var', function()
	{
		var type = email_server_type;
		if (type)
			return type;
		else
		{
			return "agilecrm";
		}
	});
	
	//checks whether current user plan is pro or not.
	Handlebars.registerHelper("if_non_pro_plan", function(options)
	{
		if (!_billing_restriction)
			return options.inverse(this);
		    if (_billing_restriction.currentLimits.planName !== "PRO")
				return options.fn(this);
		return options.inverse(this);
	});
	// Checks whether user reached email accounts(GMAIL/IMAP/OFFICE) limit
	// reached or not
	Handlebars.registerHelper('has_email_account_limit_reached', function(options)
	{
		var type = HAS_EMAIL_ACCOUNT_LIMIT_REACHED;
		if (type)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	// To pick randomly selected avatar url
	Handlebars.registerHelper('pick_random_avatar_url', function(options)
	{
		return choose_random_avatar();
	});

	Handlebars.registerHelper('getRemaininaEmails', function()
	{
		return getPendingEmails();
	});

	Handlebars.registerHelper('getLastPurchasedCount', function()
	{
		var max = getMaxEmailsLimit();
		if(max == 0)
			return "-";
		else
			return getPendingEmails();
	});

	Handlebars.registerHelper('getFreeEmailsCount', function()
	{
		var max = getMaxEmailsLimit();
		if(max == 0)
			return "5000";
		else
			return "-";
	});

	Handlebars.registerHelper('getEmailCreditsCount', function()
	{
		return getEmailCreditsCount();
	});

	// helper function to return agile bcc special email for inbound mail event
	// trigger
	Handlebars.registerHelper('inboundMail', function()
	{
		var inbound_email = window.location.hostname.split('.')[0] + "-" + _AGILE_API_KEY + "@agle.cc";
		return new Handlebars.SafeString(inbound_email);
	});

	/**
	 * ==============================================================
	 * -------------------------- jitendra's start script ---------- Please do
	 * not add any function in this block extract time from epochTime
	 */
	Handlebars.registerHelper("getTime", function(date)
	{

		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			var d = new Date(parseInt(date));
			var hours = d.getHours();
			if (hours > 12)
				hours = hours - 12;
			var min = d.getMinutes();
			if (min == 0)
				min = "00"
			var ampm = hours >= 12 ? "PM" : "AM";
			return hours + ":" + min + " " + ampm;
		}
		// date form milliseconds

		var d = new Date(parseInt(date) * 1000);
		var hours = d.getHours();
		if (hours > 12)
			hours = hours - 12;
		var min = d.getMinutes();
		if (min == 0)
			min = "00"
		var ampm = hours >= 12 ? "PM" : "AM";
		return hours + ":" + min + " " + ampm;

	});

	/**
	 * get custom date with time
	 */

	Handlebars.registerHelper("getCustomDateWithTime", function(start, end)
	{
		var day1 = getDay(start);
		var day2 = getDay(end);

		var d1 = getCustomFormatedDate(start);
		var d2 = getCustomFormatedDate(end);
		var time = extractTimeFromDate(end);

		if (day1 != day2)
			return d1 + " - " + d2;
		else
			return d1 + " - " + time;

	});

	function getCustomFormatedDate(date)
	{

		var months = [
				'Jan', 'Feb', 'March', 'April', 'May', 'Jun', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'
		];

		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			var d = new Date(parseInt(date));
			var hours = d.getHours();
			var year = d.getFullYear();
			var date = d.getDate();
			var month = d.getMonth();
			var min = d.getMinutes();
			if (min == 0)
				min = "00"
			var ampm = hours >= 12 ? "PM" : "AM";
			if (hours > 12)
				hours = hours - 12;
			return months[month] + " " + date + ", " + year + " " + hours + ":" + min + " " + ampm;

		}
		// date form milliseconds

		var d = new Date(parseInt(date) * 1000);
		var hours = d.getHours();
		var year = d.getFullYear();
		var date = d.getDate();
		var month = d.getMonth();
		var min = d.getMinutes();
		if (min == 0)
			min = "00"
		var ampm = hours >= 12 ? "PM" : "AM";
		if (hours > 12)
			hours = hours - 12;
		return months[month] + " " + date + ", " + year + " " + hours + ":" + min + " " + ampm;

	}
	function extractTimeFromDate(date)
	{
		if (!date)
			return;

		if ((date / 100000000000) > 1)
		{
			var d = new Date(parseInt(date));
			var hours = d.getHours();

			var min = d.getMinutes();
			if (min == 0)
				min = "00"
			var ampm = hours >= 12 ? "PM" : "AM";
			if (hours > 12)
				hours = hours - 12;
			return hours + ":" + min + " " + ampm;
		}
		// date form milliseconds

		var d = new Date(parseInt(date) * 1000);
		var hours = d.getHours();
		var min = d.getMinutes();
		if (min == 0)
			min = "00"
		var ampm = hours >= 12 ? "PM" : "AM";
		if (hours > 12)
			hours = hours - 12;
		return hours + ":" + min + " " + ampm;
	}

	function getDay(date)
	{
		if ((date / 100000000000) > 1)
		{
			var sDate = new Date(parseInt(date));
			return sDate.getDate();
		}
		else
		{
			var sDate = new Date(parseInt(date) * 1000);
			return sDate.getDate();
		}
	}
	/**
	 * return contact property value base on type if contact type is COMPANY
	 * then return company name other wise retun contact first_name + last_name
	 * as name
	 */

	Handlebars.registerHelper('getContactDisplayValue', function(contact)
	{
		var displayName;

		var type = contact.type;
		var properties = contact.properties;
		if (properties)
		{
			if (type == "COMPANY")
			{

				for (var i = 0; i < properties.length; i++)
				{
					if (properties[i].name == 'name')
					{
						displayName = properties[i].value;
						break;
					}
				}
			}
			else
			{
				var firstName;
				var lastName;
				for (var i = 0; i < properties.length; i++)
				{
					if (properties[i].name == 'first_name')
					{
						firstName = properties[i].value;

					}

					if (properties[i].name == 'last_name')
					{
						lastName = properties[i].value;

					}

				}
				if (!firstName)
				{
					firstName = '';
				}
				if (!lastName)
				{
					lastName == '';
				}
				displayName = firstName + " " + lastName;
			}
		}
		return displayName;
	});

	// return google event custom date and time

	Handlebars.registerHelper('getGoogleEventCustomTime', function(start, end)
	{
		var startDate = new Date(start);
		var endDate = new Date(end);

		return getGoogleCustomFormatteDate(startDate.getTime(), endDate.getTime());

	});

	function getGoogleCustomFormatteDate(start, end)
	{

		var day1 = getDay(start);
		var day2 = getDay(end);

		var d1 = getCustomFormatedDate(start);
		var d2 = getCustomFormatedDate(end);
		var time = extractTimeFromDate(end);
		var createdTime = getEventCreatedTime(start);
		if (createdTime == 0 || createdTime == 1)
		{
			var t1 = extractTimeFromDate(start);
			var t2 = extractTimeFromDate(end);
			if (t1 && t2)
				return t1 + " - " + t2;
			if (t2)
				return t1 + " - " + t2;
			else
				return t1;
		}
		else
		{

			if (day1 != day2)
			{
				if (d2)
					return d1 + " - " + d2;
				else
					return d1;
			}
			else
				return d1 + " - " + time;
		}
	}

	Handlebars.registerHelper("displayCustomDateTime", function(start, end)
	{
		var eventCreateTime = get_activity_created_time(start);

		var day1 = getDay(start);
		var day2 = getDay(end);

		var d1 = getCustomFormatedDate(start);
		var d2 = getCustomFormatedDate(end);
		var time = extractTimeFromDate(end);
		if (eventCreateTime == 0 || eventCreatedTime == 1)
		{
			return time;
		}
		else
		{
			if (day1 != day2)
				return d1 + " - " + d2;
			else
				return d1 + " - " + time;
		}
	});
	// helper function return created time for event
	function getEventCreatedTime(due)
	{
		// Get Todays Date
		var eventStartDate = new Date(due);
		due = eventStartDate.getTime() / 1000;
		var date = new Date();
		date.setHours(0, 0, 0, 0);

		date = date.getTime() / 1000;
		// console.log("Today " + date + " Due " + due);
		return Math.floor((due - date) / (24 * 3600));
	}

	/**
	 * ------ End of jitendra script------ ======== Thank you =================
	 */

	// To pick randomly selected avatar url
	Handlebars.registerHelper('arrayToCamelcase', function(values)
	{
		var result = '';
		for (var i = 0; i < values.length; i++)
		{
			result += ucfirst(values[i]);
			if (i + 1 < values.length)
				result += ', ';
		}
		return result;
	});

	// To pick randomly selected avatar url
	Handlebars.registerHelper('namesFromObject', function(jsonArray, fieldName)
	{
		var result = '';
		console.log(jsonArray.length);
		for (var i = 0; i < jsonArray.length; i++)
		{
			result += jsonArray[i][fieldName];
			if (i + 1 < jsonArray.length)
				result += ', ';
		}
		return result;
	});

	// @author Purushotham
	Handlebars.registerHelper('secondsToFriendlyTime', function(time)
	{
		var hours = Math.floor(time / 3600);
		if (hours > 0)
			time = time - hours * 60 * 60;
		var minutes = Math.floor(time / 60);
		var seconds = time - minutes * 60;
		var friendlyTime = "";
		if (hours == 1)
			friendlyTime = hours + "h ";
		if (hours > 1)
			friendlyTime = hours + "h ";
		if (minutes > 0)
			friendlyTime += minutes + "m ";
		if (seconds > 0)
			friendlyTime += seconds + "s ";
		if (friendlyTime != "")
			return ' - ' + friendlyTime;
		return friendlyTime;
	});
	// To pick randomly selected avatar url
	Handlebars.registerHelper('pick_random_avatar_url', function(options)
	{
		return choose_random_avatar();
	});

	// To choose font awesome icon for custom fields
	Handlebars.registerHelper('choose_custom_field_font_icon', function(field_type)
	{
		var icon_class = '';
		if (field_type == "TEXT")
			icon_class = "icon-text-height";
		else if (field_type == "TEXTAREA")
			icon_class = "icon-file-alt";
		else if (field_type == "DATE")
			icon_class = "icon-calendar";
		else if (field_type == "CHECKBOX")
			icon_class = "icon-check";
		else if (field_type == "LIST")
			icon_class = "icon-list-ul";
		else if (field_type == "NUMBER")
			icon_class = "icon-text-height";
		return icon_class;
	});

	// To choose font awesome icon for custom fields
	Handlebars.registerHelper('choose_custom_field_type', function(field_type)
	{
		var field_type_name = '';
		if (field_type == "TEXT")
			field_type_name = "Text Field";
		else if (field_type == "TEXTAREA")
			field_type_name = "Text Area";
		else if (field_type == "DATE")
			field_type_name = "Date";
		else if (field_type == "CHECKBOX")
			field_type_name = "Checkbox";
		else if (field_type == "LIST")
			field_type_name = "List";
		else if (field_type == "NUMBER")
			field_type_name = "Number";
		else if (field_type == "FORMULA")
			field_type_name = "Formula";
		return field_type_name;
	});

	// @author Purushotham
	// function to compare integer values
	Handlebars.registerHelper('ifCond', function(v1, type, v2, options)
	{
		if(!v1 || !v2)
			return options.inverse(this);
		switch (type) {
		case "greaterthan":
			if (parseInt(v1) > parseInt(v2))
				return options.fn(this);
			break;
		case "lessthan":
			if (parseInt(v1) < parseInt(v2))
				return options.fn(this);
			break;
		case "equals":
			if (parseInt(v1) === parseInt(v2))
				return options.fn(this);
			break;
		}
		return options.inverse(this);
	});

	Handlebars.registerHelper('callActivityFriendlyStatus', function(status, direction)
	{

		switch (status) {
		case "completed":
		case "answered":
		case "inquiry":
		case "interest":
		case "no interest":
		case "incorrect referral":
		case "meeting scheduled":
		case "new oppurtunity":
			return "Call duration";
			break;
		case "busy":
		case "no-answer":
			if (direction == 'outgoing')
				return "Contact busy";
			else
				return "Not answered";
			break;
		case "failed":
			return "Failed";
			break;
		case "missed":
			return "Call Missed";
			break;	
		case "in-progress":
		case "voicemail":
			return "Left voicemail";
			break;
		case "missed":
			return "Call missed";
			break;
		default:
			return "";
		}

	});

	Handlebars.registerHelper('shopifyWebhook', function()
	{
		var shopify_webhook = agileWindowOrigin() + "/shopifytrigger?api-key=" + _AGILE_API_KEY;
		return new Handlebars.SafeString(shopify_webhook);
	});

	Handlebars.registerHelper('toProperFormat', function(timeInSec)
	{
		if (timeInSec == "0")
			return "0 s";

		return twilioSecondsToFriendly(timeInSec);
	});

	/**
	 * getting convenient name of portlet
	 */
	Handlebars.registerHelper('get_portlet_name', function(p_name)
	{
		var portlet_name = '';
		if (p_name == 'Filter Based')
			portlet_name = 'Contact List';
		else if (p_name == 'Emails Opened')
			portlet_name = 'Email Opens';
		else if (p_name == 'Emails Sent')
			portlet_name = 'Emails';
		else if (p_name == 'Growth Graph')
			portlet_name = 'Tag Graph';
		else if (p_name == 'Calls Per Person')
			portlet_name = 'Calls';
		else if (p_name == 'Pending Deals')
			portlet_name = 'Pending Deals';
		else if (p_name == 'Deals By Milestone')
			portlet_name = 'Deals by Milestone';
		else if (p_name == 'Closures Per Person')
			portlet_name = 'Closures per Person';
		else if (p_name == 'Deals Won')
			portlet_name = 'Deals Won';
		else if (p_name == 'Deals Funnel')
			portlet_name = 'Deals Funnel';
		else if (p_name == 'Deals Assigned')
			portlet_name = 'Deals Assigned';
		else if (p_name == 'Agenda')
			portlet_name = "Events";
		else if (p_name == 'Today Tasks')
			portlet_name = "Tasks";
		else if (p_name == 'Agile CRM Blog')
			portlet_name = "Agile CRM Blog";
		else if (p_name == 'Task Report')
			portlet_name = "Task Report";
		else if(p_name=='Stats Report')
			portlet_name = "Activity Overview";
		else if(p_name=='Campaign stats')
			portlet_name = "Campaign Stats";
		else if(p_name=='Campaign graph')
			portlet_name = "Campaign Status";
		else if(p_name=='Average Deviation')
			portlet_name = "Tasks Completion Time Deviation";
		else if(p_name == 'Webstat Visits')
			portlet_name = "Visits";
		else if(p_name=='Referralurl stats')
 			portlet_name = "Referral URL Stats";
		else
			portlet_name = p_name;
		return portlet_name;
	});
	/**
	 * getting portlet icons
	 */
	Handlebars.registerHelper('get_portlet_icon', function(p_name)
	{
		var icon_name = '';
		if (p_name == 'Filter Based')
			icon_name = 'icon-user';
		else if (p_name == 'Emails Opened')
			icon_name = 'icon-envelope';
		else if (p_name == 'Emails Sent')
			icon_name = 'icon-envelope';
		else if (p_name == 'Growth Graph' || p_name == 'Incoming Deals')
			icon_name = 'icon-graph';
		else if (p_name == 'Calls Per Person')
			icon_name = 'icon-call-end';
		else if (p_name == 'Pending Deals' || p_name == 'Average Deviation')
			icon_name = 'icon-clock';
		else if (p_name == 'Deals By Milestone')
			icon_name = 'icon-flag';
		else if (p_name == 'Closures Per Person')
			icon_name = 'icon-thumbs-up';
		else if (p_name == 'Deals Won')
			icon_name = 'icon-briefcase';
		else if (p_name == 'Deals Funnel')
			icon_name = 'icon-filter';
		else if (p_name == 'Deals Assigned')
			icon_name = 'icon-user';
		else if (p_name == 'Agenda' || p_name == 'Mini Calendar')
			icon_name = "icon-calendar";
		else if (p_name == 'Today Tasks' || p_name == 'Task Report' || p_name == 'Referralurl stats')
			icon_name = "icon-tasks";
		else if (p_name == 'Agile CRM Blog')
			icon_name = "icon-feed";
		else if(p_name=='Stats Report')
			icon_name = "icon-speedometer";
		else if (p_name == 'Leaderboard')
			icon_name = "icon-trophy";
		else if (p_name== 'User Activities')
			icon_name = "icon-cogs";
		else if (p_name== 'Account Details')
			icon_name = "icon-info";
		else if (p_name == 'Revenue Graph')
			icon_name = 'icon-graph';
		else if (p_name == 'Campaign stats')
			icon_name = 'icon-sitemap';
		else if (p_name == 'Campaign graph')
			icon_name = 'icon-pie-chart';
		else if (p_name == 'Deal Goals')
			icon_name = 'icon-flag';
		else if (p_name == 'Lost Deal Analysis')
			icon_name = 'icon-pie-chart';
		else if(p_name == 'Webstat Visits')
			icon_name = 'icon-globe';
		return icon_name;
	});
	

	Handlebars.registerHelper('if_equals_or', function()
	{
		var options = arguments[arguments.length - 1];
		try
		{
			for (var i = 0; i < arguments.length - 1; i = i + 2)
			{
				value = arguments[i];
				target = arguments[i + 1];
				if ((typeof target === "undefined") || (typeof value === "undefined"))
					return options.inverse(this);
				if (value.toString().trim() == target.toString().trim())
					return options.fn(this);
			}
			return options.inverse(this);
		}
		catch (err)
		{
			console.log("error while if_equals_or of handlebars helper : " + err.message);
			return options.inverse(this);
		}
	});

	Handlebars.registerHelper('buildFacebookProfileURL', function(url)
	{
		return buildFacebookProfileURL(url);
	});

	/**
	 * returns tracks count of opportunity
	 */
	Handlebars.registerHelper('getTracksCount', function(options)
	{
		if (parseInt(DEAL_TRACKS_COUNT) > 1)
			return options.fn(this);
		else
			return options.inverse(this);
	});
	
	/**
	 * getting time in AM and PM format for event portlet
	 */
	Handlebars.registerHelper('get_AM_PM_format', function(date_val)
	{
		var date = new Date(date_val * 1000);
		var hours = date.getHours();
		var minutes = date.getMinutes();
		var ampm = hours >= 12 ? 'pm' : 'am';
		hours = hours % 12;
		hours = hours ? hours : 12; // the hour '0' should be '12'
		minutes = minutes < 10 ? '0' + minutes : minutes;
		if(hours<10)
			hours = '0'+hours;
		var strTime = hours + ':' + minutes + '' + ampm;
		return strTime;
	});

	/**
	 * getting duration between two dates for event portlet
	 */
	Handlebars.registerHelper('get_duration', function(startDate, endDate)
	{
		var duration = '';
		var days = 0;
		var hrs = 0;
		var mins = 0;
		var diffInSeconds = endDate - startDate;
		days = Math.floor(diffInSeconds / (24 * 60 * 60));
		hrs = Math.floor((diffInSeconds % (24 * 60 * 60)) / (60 * 60));
		mins = Math.floor(((diffInSeconds % (24 * 60 * 60)) % (60 * 60)) / 60);
		if (days != 0 && days == 1)
			duration += '' + days + 'd ';
		else if (days != 0 && days > 1)
			duration += '' + days + 'd ';
		if (hrs != 0 && hrs == 1)
			duration += '' + hrs + 'h ';
		else if (hrs != 0 && hrs > 1)
			duration += '' + hrs + 'h ';
		if (mins != 0 && mins == 1)
			duration += '' + mins + 'm';
		else if (mins != 0 && mins > 1)
			duration += '' + mins + 'm';
		return duration;
	});

	/**
	 * Returns plain customise text for activity remove underscore and other
	 * special charecter from string
	 */
	Handlebars.registerHelper('displayActivityFieldText', function(value)
	{
		var fields = value.replace(/[^a-zA-Z ^,]/g, " ").split(",");
		var text = "";
		if (fields.length > 1)
		{
			for (var i = 0; i < fields.length - 1; i++)
			{
				text += " " + fields[i].trim();
				if (i != fields.length - 2)
				{
					text += ",";
				}
			}
			text += " and " + fields[fields.length - 1].trim();
		}
		else
		{
			text = fields[fields.length - 1].trim();
		}
		// update title
		text = text.replace('subject', 'Title');
		// update priority
		text = text.replace('priority type', 'Priority');
		// update category
		text = text.replace('task type', 'Category');
		// update due date
		text = text.replace('due date', 'Due date');

		text = text.replace('name', 'Name');
		// update priority
		text = text.replace('probability', 'Probability');
		// update category
		text = text.replace('expected value', 'Expected value');
		// update due date
		text = text.replace('close date', 'Close date');

		text = text.replace('close date', 'Close date');

		text = text.replace('end date', 'End time');
		// update priority
		text = text.replace('priority', 'Priority');
		// update category
		text = text.replace('title', 'Title');
		// Update task description
		text = text.replace('task description' , 'Description'); 
		// Update Deal description
		text = text.replace('description' , 'Description');
		
		return text;

	});

	/*
	 * To represent a number with commas in deals from activities menu
	 */
	Handlebars.registerHelper('numberWithCommasForActivities', function(value)
	{
		value = parseFloat(value);
		if (value == 0)
			return value;

		if (value)
			return value.toFixed(2).toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
	});

	// function used know weather event rescheduled or modified and task due
	// date is modified
	Handlebars.registerHelper('get_event_rescheduled', function(value, options)
	{
		console.log(value);
		var modieied_fields = value.replace(/[^a-zA-Z ^,]/g, " ").split(",");
		var fields = [];
		if (modieied_fields)
		{
			for (var i = 0; i < modieied_fields.length; i++)
			{
				fields.push(modieied_fields[i].trim());
			}
		}
		if (fields.indexOf("start date") != -1)
		{
			return options.fn(value);
		}
		if (fields.indexOf("due date") != -1)
		{
			return options.fn(value);
		}

		return options.inverse(value);

	});

	/**
	 * gets the duedate and starttime modification value for activities
	 */
	Handlebars.registerHelper('getDueDateOfTask', function(fields, values)
	{
		var field = fields.replace(/[^a-zA-Z ^,]/g, " ").split(",");
		var value = values.replace(/[^a-zA-Z0-9 ^,]/g, " ").split(",");
		var json = {};

		for (var id = 0; id < field.length; id++)
		{
			field[id] = field[id].trim();
			value[id] = value[id].trim();
		}
		for (var i = 0; i < field.length; i++)
		{

			json[field[i]] = value[i];
		}

		if (field.indexOf("due date") != -1)
		{
			var dat = parseFloat(json['due date']);
			return convertToHumanDate("ddd mmm dd yyyy h:MM TT", dat);
		}
		if (field.indexOf("start date") != -1)
		{
			var dat = parseFloat(json['start date']);
			return convertToHumanDate("ddd mmm dd yyyy h:MM TT", dat);
		}

	});
	Handlebars.registerHelper('getDealCustomProperties', function(items, options)
	{
		var fields = getDealCustomProperties(items);
		if (fields.length == 0)
			return options.inverse(fields);

		return options.fn(fields);

	});

	Handlebars.registerHelper('getFormNameFromId', function(id)
	{
		//Create a temporary place holder and later, fetch the name asynchronously and render it.
		//Check the postRenderCallback for triggerCollectionView in controllers/workflows.js for more details
		var html = "<div id='" + getFormNameCellIDForFormSubmitTriggers(id) + "'></div>";
		return new Handlebars.SafeString(html);
	});

	/**
	 * Helps to check the permission of the user based on the ACL.
	 */
	Handlebars.registerHelper("isTracksEligible", function(options)
	{
		if(_billing_restriction.currentLimits.addTracks)
			   return options.fn(this);
			
		return options.inverse(this);
	});

	/**
	 * Helps to check the number of tracks.
	 */
	Handlebars.registerHelper("hasSingleTrack", function(options)
	{
		try
		{
			var tracksCount = App_Admin_Settings.pipelineGridView.collection.length;
			if (tracksCount > 1)
				return options.fn(this);

		}
		catch (e)
		{
			console.log(e);
		}
		return options.inverse(this);
	});

	/*
	 * Returns first occurance of text after "Email subject: " in the given
	 * message
	 */
	Handlebars.registerHelper('get_subject', function(message)
	{
		var delimiter = "Email subject: ";
		try
		{
			if (message)
				return message.slice(message.indexOf(delimiter) + delimiter.length, message.length);
		}
		catch (e)
		{
			return message;
		}
		return message;
	});
	/**
	 * Helps to check the current deal is the same as passed deal.
	 */
	Handlebars.registerHelper("isCurrentDeal", function(deal_id, options)
	{

		var dealId = '';
		if (App_Deal_Details.dealDetailView)
			dealId = App_Deal_Details.dealDetailView.model.id;

		if (deal_id && deal_id == dealId)
			return options.fn(this);

		return options.inverse(this);
	});

	/**
	 * Returns milestone name from trigger_deal_milestone; e.g., 1234452_Won,
	 * returns Won
	 */
	Handlebars.registerHelper('trigger_milestone', function(value, options)
	{

		// If undefined
		if (!value)
			return value;

		var milestone = value.split('_');

		if (milestone.length == 1)
			return value;

		// First indexed should be pipeline id
		if (milestone.length > 1 && milestone[0] != " " && !isNaN(Number(milestone[0])))
		{
			milestone.splice(0, 1);
			return milestone.join('_');
		}

	});
	
	/*
	 * Returns the url without query parameters appended by agile
	 */
	Handlebars.registerHelper('get_url', function(url)
	{
		if (url)
		{
			if (url.indexOf("fwd=cd") == -1)
				return new Handlebars.SafeString(url);

			var delimiter;
			if (url.indexOf("?fwd=cd") != -1)
				delimiter = "?fwd=cd";
			else
				delimiter = "&fwd=cd";

			try
			{
				if (delimiter)
					return new Handlebars.SafeString(url.split(delimiter)[0]);
			}
			catch (e)
			{
				console.log("Error in get_limiter:" + e);
				return new Handlebars.SafeString(url);
			}
		}
		return new Handlebars.SafeString(url);

	});

	/*
	 * Returns first occurance of text after the given delimiter in the given
	 * message
	 */

	Handlebars.registerHelper('get_limiter', function(message, delimiter)
	{
		try
		{
			if (message && delimiter)
				return message.slice(message.indexOf(delimiter) + delimiter.length, message.length);
		}
		catch (e)
		{
			console.log("Error in get_limiter:" + e);
			return message;
		}
		return message;
	});


		Handlebars.registerHelper('isAllowedInCurrentPlan', function(functionName, options) {
	
		if(_plan_restrictions[functionName] && _plan_restrictions[functionName][0] && _plan_restrictions[functionName][0]())
		{
			return options.fn(this);
		}
		else if(_plan_restrictions[functionName] && _plan_restrictions[functionName][1])
		{
			return options.inverse(_plan_restrictions[functionName][1]());
		}
		else
			return options.inverse(this);
		
	});

	Handlebars.registerHelper("toSafeString", function(content){
		return new Handlebars.SafeString(content);
	});
	
	Handlebars.registerHelper("getPlanLimits", function(key){
		if(_billing_restriction.currentLimits.planName == "PRO" || _billing_restriction.currentLimits.planName == "ENTERPRISE")
			return "Unlimited";
		else
			return _billing_restriction.currentLimits[key];
	});

	Handlebars.registerHelper("getLeaderboardCateCount", function(options){
		var count=0;
		if(options.revenue)
			count++;
		if(options.dealsWon)
			count++;
		if(options.calls)
			count++;
		if(options.tasks)
			count++;
		return count;
	});

	/**
	 * return the increment value of index of a collection
	 */
	Handlebars.registerHelper("getIndexIncrementByOne", function(indexVal){
		return ++indexVal;
	});
	/**
	 * getting duration for portlets
	 */
	Handlebars.registerHelper('get_portlet_duration', function(duration)
	{
		var time_period = 'Today';
		if (duration == 'yesterday')
		{
			time_period = 'Yesterday';
		}
		else if (duration == '1-day' || duration == 'today')
		{
			time_period = 'Today';
		}
		else if (duration == '2-days')
		{
			time_period = 'Last 2 Days';
		}
		else if (duration == 'this-week')
		{
			time_period = 'This Week';
		}
		else if (duration == 'last-week')
		{
			time_period = 'Last Week';
		}
		else if (duration == '1-week')
		{
			time_period = 'Last 7 Days';
		}
		else if (duration == 'this-month')
		{
			time_period = 'This Month';
		}
		else if (duration == 'last-month')
		{
			time_period = 'Last Month';
		}
		else if (duration == '1-month')
		{
			time_period = 'Last 30 Days';
		}
		else if (duration == 'this-quarter')
		{
			time_period = 'This Quarter';
		}
		else if (duration == 'last-quarter')
		{
			time_period = 'Last Quarter';
		}
		else if (duration == '3-months')
		{
			time_period = 'Last 3 Months';
		}
		else if (duration == '6-months')
		{
			time_period = 'Last 6 Months';
		}
		else if (duration == '12-months')
		{
			time_period = 'Last 12 Months';
		}
		else if (duration == 'today-and-tomorrow')
		{
			time_period = 'Today and Tomorrow';
		}
		else if (duration == 'all-over-due')
		{
			time_period = 'All Over Due';
		}
		else if (duration == 'next-7-days')
		{
			time_period = 'Next 7 Days';
		}
		else if (duration == '24-hours')
		{
			time_period = 'Last 24 Hours';
		}
		else if (duration == 'next-quarter')
		{
			time_period = 'Next Quarter';
		}
		else if (duration == 'this-and-next-quarter')
		{
			time_period = 'This and Next Quarter';
		}
		else if (duration == 'this-year')
		{
			time_period = 'This Year';
		}
		else if (duration == 'next-year')
		{
			time_period = 'Next Year';
		}
		else if (duration == 'last-year')
		{
			time_period = 'Last Year';
		}
		
		return time_period;
	});
	
	/**
	 * Returns a given date string to a time ago format ,used for gmaps listview implementation
	 * 
	 */
	Handlebars.registerHelper('timeAgo',function(dateString){
		
		
		var date=new Date();
		 try
			{
			 var find = '-';
			 var re = new RegExp(find, 'g');
			 dateString = dateString.replace(re, '/');
			 dateString = dateString.match(/[^:]+(\:[^:]+)?/g);
			 date = new Date(dateString[0]+' UTC');
			}
			catch (err)
			{
				console.log("Error in parsing date");
			}

	    var seconds = Math.floor((new Date() - date) / 1000);

	    var interval = Math.floor(seconds / 31536000);

	    if (interval > 1) {
	        return interval + " years ago";
	    }
	    interval = Math.floor(seconds / 2592000);
	    if (interval > 1) {
	        return interval + " months ago";
	    }
	    interval = Math.floor(seconds / 86400);
	    if (interval > 1) {
	        return interval + " days ago";
	    }
	    interval = Math.floor(seconds / 3600);
	    if (interval > 1) {
	        return interval + " hours ago";
	    }
	    interval = Math.floor(seconds / 60);
	    if (interval > 1) {
	        return interval + " minutes ago";
	    }
	    return new Handlebars.SafeString(Math.floor(seconds) + " seconds ago");

		
	
		
	});
	
	/**
	 * Returns a string by making its first letter a capital letter.
	 * Used in gmap implementation for table view
	 */
	Handlebars.registerHelper('capitalizeFirstLetter',function(city,country){
		return new Handlebars.SafeString(city.charAt(0).toUpperCase() + city.slice(1)+", "+country);
		
	});
	
	/**
	 * Returns a default image url .
	 * 
	 */
	Handlebars.registerHelper('getDefaultImage',function(){
		return new Handlebars.SafeString(updateImageS3Path(FLAT_FULL_PATH + 'images/flatfull/user-default.jpg'));
		
	});
	
	/**
	 * Returns table headings for custom companies list view
	 */
	Handlebars.registerHelper('companyTableHeadings', function(item)
	{

		var el = "" ,cls = "";
		$.each(App_Companies.companyViewModel[item], function(index, element)
  		{

  			if (element == "basic_info" || element == "image")
  			{
					
					if(_agile_get_prefs("companyTabelView"))
					{
						// if the compact view is present the remove th basic info heading and add the empty heading for the image

						if(element == "basic_info")
							return ;
	
						if(element == "image")
						{
							element = "";
							cls = "";
						}
							  
					}
					else
					{
						if(element == "image")
						{
							element = "";
							cls = "compactcontact";
						}
					}
			}
		else if(element == "url")
		{
			el = el.concat('<th class="'+ cls +'">' +"URL"+ '</th>');
			return;
		}
		else if (element.indexOf("CUSTOM_") == 0) 
		{
  			element = element.split("_")[1];
  			cls = "text-muted";
  		}
  		else 
  		{
			element = element.replace("_", " ");
			cls = "";
	 	}
	 		el = el.concat('<th class="'+ cls +'">' + ucfirst(element) + '</th>');	
	  
  		});
		return new Handlebars.SafeString(el);
	});
	
	
	Handlebars
	.registerHelper(
			'companies_count',
			function()
			{
				var count_message;
				if (this[0] && this[0].count && (this[0].count != -1))
				{

					if (this[0].count > 9999 && (_agile_get_prefs('company_filter') || _agile_get_prefs('dynamic_company_filter')))
						count_message = "<small> (" + 10000 + "+ Total) </small>" + '<span style="vertical-align: text-top; margin-left: -5px">' + '<img border="0" src="'+updateImageS3Path("/img/help.png")+'"' + 'style="height: 10px; vertical-align: middle" rel="popover"' + 'data-placement="bottom" data-title="Lead Score"' + 'data-content="Looks like there are over 10,000 results. Sorry we can\'t give you a precise number in such cases."' + 'id="element" data-trigger="hover">' + '</span>';

					else
						count_message = "<small> (" + this[0].count + " Total) </small>";
				}
				else
					count_message = "<small> (" + this.length + " Total) </small>";

				return new Handlebars.SafeString(count_message);
			});

	Handlebars.registerHelper('getSubscriptionDate', function(customer, options){
		if(!customer)
			return 0;
		var date = getLastDateOfSubscription(customer);
		if(!date)
			return 0;
		var currentEpoch = Math.round(new Date().getTime()/1000);
		if(date < currentEpoch)
			return 0;
		return date;
	});
	
});

// helper function return created time for event
function getEventCreatedTime(due)
{
	// Get Todays Date
	var eventStartDate = new Date(due);
	due = eventStartDate.getTime() / 1000;
	var date = new Date();
	date.setHours(0, 0, 0, 0);

	date = date.getTime() / 1000;
	// console.log("Today " + date + " Due " + due);
	return Math.floor((due - date) / (24 * 3600));
}

// generating circle for tasks progress
Handlebars.registerHelper('getcircle', function(percentage)
{
	prec = (360 * percentage) / 100;
	if (prec <= 180)
	{
		return 'background-image :linear-gradient(' + (prec + 90) + 'deg, transparent 50%, #e8eff0 50%),linear-gradient(90deg, #e8eff0  50%, transparent 50%)';
	}
	else
	{
		return 'background-image :linear-gradient(' + (prec - 90) + 'deg, transparent 50%, #39B4CC 50%), linear-gradient(90deg, #e8eff0 50%, transparent 50%)';
	}
});

/**
 * return onboarding scheduling url by reading fron globals.js file
 */
Handlebars.registerHelper('ONBOARDING_CALENDAR_URL', function()
{

	return ONBOARDING_SCHEDULE_URL;

});

/**
 * return support scheduling url by reading fron util.js file
 */
Handlebars.registerHelper('SUPPORT_CALENDAR_URL', function()
{

	return SUPPORT_SCHEDULE_URL;

});

/**
 * return sales scheduling url by reading fron util.js file
 */
Handlebars.registerHelper('SALES_CALENDAR_URL', function()
{

	return SALES_SCHEDULE_URL;

});

	Handlebars.registerHelper('get_portlet_description', function(p_name)
			{
	var description = '';
	if (p_name == 'Filter Based')
		description = 'See a list of 50 recently added contacts customizable by filters.';
	else if (p_name == 'Emails Opened')
		description = 'See what percentage of people open your direct emails.';
	else if (p_name == 'Growth Graph')
		description = 'Gain a quick insight on how contacts with specific tag(s) have changed over time.';
	else if (p_name == 'Calls Per Person')
		description = 'Detailed reports on call activity of your team.';
	else if (p_name == 'Pending Deals')
		description = 'Gives you a heads up on all your pending Deals.';
	else if (p_name == 'Deals By Milestone')
		description = 'A pie-chart of Deals grouped by Milestone.';
	else if (p_name == 'Deals Funnel')
		description = 'A funnel report of total Deals value in each Milestone.';
	else if (p_name == 'Agenda')
		description = 'A quick view of events from your calendar.';
	else if (p_name == 'Today Tasks')
		description = 'A list of your upcoming or due Tasks';
	else if (p_name == 'Task Report')
		description = 'Get a quick view of tasks by all users reported by status and duration.';
	else if (p_name == 'Agile CRM Blog')
		description = "A feed of what's happening at our end including updates on new features.";
	else if(p_name=='Stats Report')
		description = 'Detailed list of activities done by your team members.';
	else if (p_name == 'Leaderboard')
		description = ' A leaderboard for your team based on revenue won, tasks done, calls etc.';
	else if (p_name== 'User Activities')
		description = 'See a timeline of user actions in Agile CRM.';
	else if (p_name== 'Account Details')
		description = 'Find current plan information, number of users and more.';
	else if (p_name== 'Revenue Graph')
		description = 'Forecasted revenue graph based on your Deals.';
	else if (p_name== 'Mini Calendar')
		description = 'A mini calendar with an overview of your agenda for the day.'
	else if (p_name == 'Campaign stats')
		description = 'See how your campaigns are performing with stats on email opens and link clicks.'
	else if (p_name == 'Campaign graph')
		description = 'A pie chart of active, completed and removed subscribers of Campaigns'
	else if(p_name == 'Deal Goals')
		description = 'See how much sales target you have achieved.'
	else if(p_name == 'Incoming Deals')
		description = 'See how your deal sources are performing over time.'
	else if(p_name == 'Lost Deal Analysis')
		description = 'Get insights into why deals were lost. Filter by owner, track and source.'
	else if(p_name == 'Average Deviation')
		description = 'A quick view of deviation in tasks completion times.'
	else if (p_name== 'Webstat Visits')
		description = 'A pie chart of Known and Unknown Visits on your website.';
	else if(p_name == 'Referralurl stats')
		description = 'A quick view of Top 5 Referral URL’s for your website traffic.'
	return description;
			});

	Handlebars.registerHelper('trialEndDate', function(billingData, options)
			{
		      var json={};
		      var currentEpoch = new Date().getTime()/1000;
		      currentEpoch = Math.round(currentEpoch);
		      /*console.log("billing data is:");
		      console.log(billingData.customer.metadata.trial_end);*/
		      //billingData = billingData.toString();
		      /*console.log("string is:");
		      if(billingData.subscriptions.data.trialEnd)
		        console.log(billingData.subscriptions.data.trialEnd);*/
		      if(!billingData)
		    	  {
		    	  	return options.inverse(this);
		    	  }
		    	  console.log(billingData);
		    	  /*var billingData = JSON.parse(billingData.billingData);
		    	  console.log(billingData);*/
              if(billingData.metadata && billingData.metadata.trial_end && billingData.metadata.trial_end > currentEpoch)
        	   {

        		var has_trial = (parseInt(billingData.metadata.trial_end) - currentEpoch)/(24*60*60);
        		has_trial = Math.round(has_trial);
        		var trialDate = (billingData.metadata.trial_end)/(24*60*60);
        		if(has_trial>0)
        			{
        				json['trial_exists'] = true;
        				json['days_left'] = has_trial;
        				var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
        				                  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        				                ];
        				var date = new Date();
        	            date.setDate(date.getDate() + has_trial); 
        	            var formattedDate = date.getDate()+' '+(monthNames[date.getMonth()])+' '+date.getFullYear();
        				/*formattedDate = JSON.stringify(formattedDate);
        	            console.log(formattedDate);*/
        				json['trial_date'] = formattedDate;
        				console.log("trial in json is:"+json['trial_date']);
        				
        			}
        		else
        			json['trial_exists'] = false;
        		
        	   }
              else
		        json['trial_exists'] = false;

		       return options.fn(json);		        

			});

	Handlebars.registerHelper('trialEnd', function(billingData, options)
			{
		      var json={};
		      var currentEpoch = new Date().getTime()/1000;
		      currentEpoch = Math.round(currentEpoch);
		      /*console.log("billing data is:");
		      console.log(billingData.customer.metadata.trial_end);*/
		      //billingData = billingData.toString();
		      /*console.log("string is:");
		      if(billingData.subscriptions.data.trialEnd)
		        console.log(billingData.subscriptions.data.trialEnd);*/
		      if(!billingData)
		    	  {
		    	  	return options.inverse(this);
		    	  }
		    	  console.log(billingData);

              if(billingData.metadata && billingData.metadata.trial_end && billingData.metadata.trial_end > currentEpoch)
        	   {

        		var has_trial = (parseInt(billingData.metadata.trial_end) - currentEpoch)/(24*60*60);
        		has_trial = Math.floor(has_trial);
        		if(has_trial>0)
        			{
        				json['trial_exists'] = true;
        				json['days_left'] = has_trial;
        				var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
        				                  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        				                ];
        				var date = new Date();
        	            date.setDate(date.getDate() + has_trial); 
        	            var formattedDate = date.getDate()+' '+(monthNames[date.getMonth()])+' '+date.getFullYear();
        	            formattedDate = JSON.stringify(formattedDate);
        	            console.log(formattedDate);
        				json['trial_date'] = formattedDate;
        			}
        		else
        			json['trial_exists'] = false;
        		
        	   }
              else
		        json['trial_exists'] = false;

		       return options.fn(json);		        

			});
	Handlebars.registerHelper('toggle_contacts_filter', function(options)
			{	        
		    if(_agile_get_prefs(CONTACTS_DYNAMIC_FILTER_COOKIE_STATUS)=="hide"){
			return "none";
	       	}
	    	
			});
	
	
	Handlebars.registerHelper('toggle_companies_filter', function(options)
			{	        
		   return  _agile_get_prefs('companiesFilterStatus');
		    
			});
	Handlebars.registerHelper('contact_filter_tooltip', function(options)
			{	        
		 	 if( _agile_get_prefs(CONTACTS_DYNAMIC_FILTER_COOKIE_STATUS)=="hide")
		 	 	return "Show Filters" ;
		 	 else
		 	 	return "Hide Filters" ;	
			});
	Handlebars.registerHelper('company_filter_tooltip', function(options)
			{	        
		 	 if( _agile_get_prefs('companiesFilterStatus') == "display:none")
		 	 	return "Show Filters" ;
		 	 else
		 	 	return "Hide Filters" ;	
			});

	

	Handlebars.registerHelper('totalTimeFormat', function(timeInSec)
			{
				if (timeInSec == "0")
					return "0 sec";

				return SecondsToCampaignTime(timeInSec);
			});

	// To show allowed domains as list
	Handlebars.registerHelper('allowed_domain_list', function(data)
			{
				var html = "";
				if (data)
				{
					var allowed_domains = data.split(",");
					for ( var i in allowed_domains)
					{
						allowed_domains[i] = allowed_domains[i].trim();
						html += "<tr data='" + allowed_domains[i] + "' style='display: table-row;'><td><div class='inline-block v-top text-ellipsis' style='width:80%'>";
						html += allowed_domains[i] + "</div></td><td class='b-r-none'><div class='m-b-n-xs' style='display:none;'><a class='allowed-domain-delete c-p m-l-sm text-l-none text-xs'  data-toggle='modal' role='button' href='#'><i title='Delete Allowed Domain' class='task-action icon icon-trash'></i></a></div></td></tr>";
					}
				}
				return html;
			});

	// To show blocked ips as list
	Handlebars.registerHelper('blocked_ips_list', function(data)
			{
				var html = "";
				if (data)
				{
					var blocked_ips = data.split(",");
					for ( var i in blocked_ips)
					{
						blocked_ips[i] = blocked_ips[i].trim();
						html += "<tr data='" + blocked_ips[i] + "' style='display: table-row;'><td><div class='inline-block v-top text-ellipsis' style='width:80%'>";
						html += blocked_ips[i] + "</div></td><td class='b-r-none'><div class='m-b-n-xs' style='display:none;'><a class='blocked-ip-delete c-p m-l-sm text-l-none text-xs'  data-toggle='modal' role='button' href='#'><i title='Delete Blocked IP' class='task-action icon icon-trash'></i></a></div></td></tr>";
					}
				}
				return html;
			});

	// Is new allowed domain
	Handlebars.registerHelper("hide_allowed_domains_text", function(data, options){
		if (data && data != "localhost, *")
			return options.inverse(this);
		return options.fn(this);
	});
	
	Handlebars.registerHelper('proToEnterprise', function(plan_type, options)
			{
		var temp = "Free";

		  if(plan_type.indexOf("PRO") >= 0)
			plan_type= plan_type.replace("PRO","ENTERPRISE");

		  var fragments = plan_type.split("_");

		  var interval = "Monthly";
		  if(fragments.length > 1)
		  {
		  	 interval = ucfirst(fragments[1]);
		  	 temp = ucfirst(fragments[0]);

		  	 return temp + " (" + interval+")";
		  }

		    });
	Handlebars.registerHelper('invoice_description', function(description) {

		if (!description)
			return description;

		if (description.indexOf("Unused time on") != -1) {
			description = "Balance from previous transaction";
		} else if (description.indexOf("Remaining") != -1) {
			description = "Changed on " + description.substring(description.indexOf("after") + 5);
		}

		return description + " ";

	});

	Handlebars.registerHelper("is_unsubscribed_all", function(options){
               
               var contact_model = App_Contacts.contactDetailView.model.toJSON();

               // First name
               var first_name = getPropertyValue(contact_model["properties"], "first_name");

               if(contact_model && contact_model["unsubscribeStatus"] && contact_model["unsubscribeStatus"].length > 0)
               {
                       var statuses = contact_model["unsubscribeStatus"];

                       for(var i=0, len = statuses.length; i < len; i++)
                       {
                               var status = statuses[i];

                              if(status.unsubscribeType && status.unsubscribeType == "ALL")                                       return options.fn({"first_name": first_name, "campaign_id": status.campaign_id});
                       }
               }

               return options.inverse(this);
        });

Handlebars.registerHelper('is_mobile', function(options)
	{
		if(agile_is_mobile_browser())
		return options.fn(this);
		else
		return options.inverse(this);
	});



/**
 * Returns a S3 image url .
 * 
 */
Handlebars.registerHelper('getS3ImagePath',function(imageUrl){
	return new Handlebars.SafeString(updateImageS3Path(imageUrl));	
});
	Handlebars.registerHelper('is_trial_exist', function(billingData, options)
	{
		if (billingData && billingData.subscriptions){
			var is_trial_exist = false;
			$.each(billingData.subscriptions.data, function( index, value ) {
			  if(!value.plan.id.indexOf("email") > -1 && value.trialStart && value.trialEnd && value.trialEnd >= (new Date().getTime()/1000))
			  {
			  	var trial_start = value.trialStart;
			  	var trial_end = value.trialEnd;
			  	if(trial_end - trial_start <= 864000){
			  		is_trial_exist = true;
			  		return false;
			  	}
			  }
			});
			if(is_trial_exist)
				return options.fn(this);
			else
				return options.inverse(this);
		}else{
			return options.inverse(this);
		}
	});

	/**
	 * Compares the arguments (value and target) and executes the template based
	 * on the result (used in contacts typeahead)
	 * working as greater than but not equal to
	 */ 
	Handlebars.registerHelper('is_greater', function(value, target, options)
	{
		if (parseInt(target) < value)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('is_domain_owner', function(options)
	{
		if (CURRENT_DOMAIN_USER.is_account_owner)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('is_not_allowed_trial', function(options)
	{
		if(IS_TRIAL && IS_ALLOWED_TRIAL)
			return options.inverse(this);
		else
			return options.fn(this);
	});

	Handlebars.registerHelper('getContactTypeCustomFields', function(type, value, custom_field_name, options)
	{
		if (type != "CONTACT" && type != "COMPANY")
		{
			return value;
		}
		var contact_values = "";
		var contact_values_json;
		try {
			contact_values_json = $.parseJSON(value);
		}
		catch(err) {

		}
		var referenceContactIds = "";
		if (contact_values_json)
		{
			$.each(contact_values_json, function(index, value){
				if(index != contact_values_json.length-1){
					referenceContactIds += value + ",";
				}else{
					referenceContactIds += value;
				}
			});
			App_Contacts.referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });
			App_Contacts.referenceContactsCollection.collection.fetch({
				success : function(data){
					if(data && data.length > 0)
					{
						if(type == "CONTACT")
						{
							$.each(contact_values_json, function(index, value){
								var items = data.get(value).get("properties");
								var width = 40;
								var img_path = "";
								if (items == undefined)
									return;

								// Checks if properties already has an image, to return it
								var agent_image = getPropertyValue(items, "image");
								if (agent_image){
									img_path = agent_image;
								}
								else{
									// Default image
									var img = DEFAULT_GRAVATAR_url;
									var backup_image = "&d=404\" ";
									// backup_image="";
									var initials = '';

									try
									{
										// if(!isIE())
										initials = text_gravatar_initials(items);
									}
									catch (e)
									{
										console.log(e);
									}

									if (initials.length == 0)
										backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";

									var data_name =  '';
									// if(!isIE())
										data_name = "onLoad=\"image_load(this)\" onError=\"image_error(this)\"_data-name=\"" + initials;
									
									var email = getPropertyValue(items, "email");
									if (email)
									{
										img_path = new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + backup_image + data_name);
									}

									img_path = new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '' + backup_image + data_name);
								}
								
								var contact_name = getPropertyValue(data.get(value).get("properties"), "first_name");
								var last_name = getPropertyValue(data.get(value).get("properties"), "last_name");
								if(last_name)
								{
									contact_name += " "+last_name;
								}
								//contact_values += "<li class='tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block'><a href='#contact/"+value+"' class='text-white'>"+contact_name+"</a></li>";
								contact_values += '<a href="#contact/'+value+'" class="activate-link thumb m-b-xs m-r-xs"><img  data-name="" src="'+img_path+'"  title="'+contact_name+'" /></a>';
							});
						}else if(type == "COMPANY")
						{
							$.each(contact_values_json, function(index, value){
								var frame_size = "50";
								var additional_style = "display:inline";
								var full_size = parseInt(frame_size); // size
								var size_diff = 4 + ((full_size - 32) / 2); // calculating
								var properties = data.get(value).get("properties");
								var img_path = "";
								
								var default_return = "src='"+updateImageS3Path('img/building.png')+"' style='width:" + full_size + "px; height=" + full_size + "px;" + additional_style + "'";

								var error_fxn = "";

								for (var i = 0; i < properties.length; i++)
								{
									if (properties[i].name == "image")
									{
										default_return = "src='" + properties[i].value + "' style='width:" + full_size + "px; height=" + full_size + "px;" + additional_style + ";'";

										error_fxn = "this.src='"+updateImageS3Path('img/building.png')+"'; this.onerror=null;";

										break;
									}
									if (properties[i].name == "url")
									{
										default_return = "src='https://www.google.com/s2/favicons?domain=" + properties[i].value + "' " + "style='width:" + full_size + "px; height=" + full_size + "px; padding:" + size_diff + "px; " + additional_style + " ;'";

										error_fxn = "this.src='"+updateImageS3Path("img/building.png")+"'; " + "$(this).css('width','" + frame_size + "px'); $(this).css('height','" + frame_size + "px');" + "$(this).css('padding','4px'); this.onerror=null;";
									}
								}
								img_path = new Handlebars.SafeString(default_return + " onError=\"" + error_fxn + "\"");
								
								//contact_values += "<li class='tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block'><a href='#company/"+value+"' class='text-white'>"+getPropertyValue(data.get(value).get("properties"), "name")+"</a></li>";
								contact_values += '<a href="#company/'+value+'" class="activate-link thumb m-b-xs m-r-xs"><img  '+img_path+' title="'+getPropertyValue(data.get(value).get("properties"), "name")+'"/></a>';
							});
						}
						$('.custom-value[name="'+custom_field_name+'"]').html(contact_values);
					}
					hideTransitionBar();
				}
			});
		}
	});

// the epoch time is in milisecond.
// jquery uses isostring format to implement timeago function on date...
Handlebars.registerHelper('convert_toISOString', function(dateInepoch, options) {
	try
	{
		return new Date(dateInepoch).toISOString();
	}
	catch (e)
	{
	}
	return dateInepoch;
});

	Handlebars.registerHelper('emails_next_renewal_time', function(items, name)
	{
		return getEmailsNextRenewalTime();
	});

	Handlebars.registerHelper('is_paid_emails', function(options)
	{
		var max = getMaxEmailsLimit();
		// if max is greater than zero, we consider user is subscrbed to email plan
		if (max > 0)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('getCurrentUserDashboards', function(type, options)
	{
		var options_el = "";
		if(CURRENT_USER_DASHBOARDS)
		{
			CURRENT_USER_DASHBOARDS.sort(function(a,b){return a.name.trim() < b.name.trim() ? -1 : a.name.trim() > b.name.trim() ? 1 : 0;});
			var is_active_added = false;
			var selected_li_id = _agile_get_prefs("dashboard_"+CURRENT_DOMAIN_USER.id);

			$.each(CURRENT_USER_DASHBOARDS, function(index, value){
				if(selected_li_id == this.id)
				{
					is_active_added = true;
				}
			});

			$.each(CURRENT_USER_DASHBOARDS, function(index, value){
				if(type == 'portlet')
				{
					var trim_name = this.name;
					if(trim_name)
					{
						trim_name = trim_name.trim();
					}
					if(trim_name && trim_name.length > 15)
					{
						trim_name = trim_name.substring(0, 15)+"...";
					}
					if(this.name)
					{
						options_el += "<option value="+this.id+" class='user-dashboard' title='"+this.name.trim()+"'>"+trim_name+"</option>";
					}
				}
				else
				{
					var trim_name = this.name;
					if(trim_name)
					{
						trim_name = trim_name.trim();
					}
					if(trim_name && trim_name.length > 30)
					{
						trim_name = trim_name.substring(0, 30)+"...";
					}
					if(index == 0 && (!selected_li_id || !is_active_added))
					{
						options_el += "<li class='active'><a id='Dashboard' class='user-defined-dashboard predefined-dashboard' href='#'>Dashboard</a></li>";
					}
					else if(index == 0)
					{
						options_el += "<li><a id='Dashboard' class='user-defined-dashboard predefined-dashboard' href='#'>Dashboard</a></li>";
					}
					if(selected_li_id == this.id)
					{
						options_el += "<li class='active'><a id="+this.id+" title='"+this.name.trim()+"' class='user-defined-dashboard' href='#'>"+trim_name+"</a></li>";
					}
					else
					{
						options_el += "<li><a id="+this.id+" title='"+this.name.trim()+"' class='user-defined-dashboard' href='#'>"+trim_name+"</a></li>";
					}

					if(index == CURRENT_USER_DASHBOARDS.length-1)
					{
						options_el += "<li class='divider'></li>";
						options_el += "<li><a id='dashboards' href='#dashboards'>Manage Dashboards</a></li>";
					}
					
				}

			});
			if(CURRENT_USER_DASHBOARDS.length == 0 && type == 'dashboard')
			{
				options_el += "<li><a id='dashboards' href='#dashboards'>Manage Dashboards</a></li>";
			}
		}

		return options_el;
	});

	Handlebars.registerHelper('getTruncatedDashboardName', function(dashboard_name)
	{
		if(dashboard_name && dashboard_name.trim().length > 30)
		{
			return dashboard_name.trim().substring(0, 30)+"...";
		}
		return dashboard_name;
	});

	Handlebars.registerHelper('is_acl_allowed', function(options)
	{
		if(_plan_restrictions.is_ACL_allowed[0]() || checkForSpecialUsers())
			return options.inverse(this);
		else
			return options.fn(this);
	});
	
	Handlebars.registerHelper("check_admin_ip", function(options)
	{
		if($.inArray(CURRENTIP, IPCHECK) != -1)
			return options.fn(this);
		else
			return options.inverse(this);
	});

	Handlebars.registerHelper('getCredit', function(credit, options)
	{
		if(!credit)
			return 0;
		return (credit/100)*(-1).toFixed(2);
	});

	Handlebars.registerHelper('event_format_time', function(time, format, options)
	{
		return time.format(format);
	});
	Handlebars.registerHelper('dottedEventDescription', function(description, options)
	{
		return addDotsAtEnd(description);
	});
	Handlebars.registerHelper('get_template_type', function(template_name)
	{
		return new Handlebars.SafeString(getTemplate(template_name, this));
	});

Handlebars.registerHelper('is_IE_browser', function(options) {
	     return (isIEBrowser() ? options.fn(this) : options.inverse(this));
});


Handlebars.registerHelper('brainTreeStatus', function(value) {
	/**
	 * Braintree transaction status.
	 */
	var BRAINTREE_STATUS = {
		AUTHORIZED : "Authorized",
		VOIDED : "Voided",
		SUBMITTED_FOR_SETTLEMENT : "Submitted For Settlement",
		SETTLED : "Settled",
		AUTHORIZATION_EXPIRED : "Authorization Expired",
		AUTHORIZING : "Authorizing",
		SETTLEMENT_PENDING : "Settlement Pending",
		SETTLEMENT_CONFIRMED : "Settlement Confirmed",
		SETTLEMENT_DECLINED : "Settlement Declined",
		FAILED : "Failed",
		GATEWAY_REJECTED : "Gateway Rejected",
		PROCESSOR_DECLINED : "Processor Declined",
		SETTLING : "Settling"
	};
	
	return BRAINTREE_STATUS[value];
});

function agile_is_mobile_browser(){
   return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
  
 }

 function isIEBrowser(){

 	var isIE = (window.navigator.userAgent.indexOf("MSIE") != -1); 
	var isIENew = (window.navigator.userAgent.indexOf("rv:11") != -1);  
	if(isIE || isIENew)
		return true;

	return false;
 }

Handlebars.registerHelper('multiple_Property_Element_List', function(name, properties,id, options)
		{

			var matching_properties_list = agile_crm_get_List_contact_properties_list(name);
			if (matching_properties_list.length > 0)
				return options.fn(matching_properties_list);
		});

Handlebars.registerHelper('getAliasFromArry', function(array, options) {
	return array[0];
});

// Helper function to return date in user selected format in  preferences.
Handlebars.registerHelper('stringToHumanDateInFormat', function(date)
{

	if (!date)
		return;
	var dateString = new Date(date);
	if(dateString == "Invalid Date")
		return getDateInFormatFromEpoc(date);
	else
		return en.dateFormatter({raw: getGlobalizeFormat()})(dateString);
	
});

Handlebars.registerHelper('getSuggestionName', function(suggestionId){
		if(suggestionId){
			return uservoiceOBJ.suggestions[suggestionId];
		}		
});

Handlebars.registerHelper('removeSpecialCharacter',function(value){
          var value = value.replace(/[^\w\s]/gi, '-');
          return value;

});

Handlebars.registerHelper('canDeleteContact', function(owner_id, options)
{
	if (hasScope('DELETE_CONTACT'))
		return options.fn(this);

	return options.inverse(this)
});

Handlebars.registerHelper("isInCurrentView", function(properties,key,options)
{
	try{
		var currentContactEntity;
		var contactEntity;
		if(window.location.hash.indexOf("#contact/") != -1 || window.location.hash.indexOf("#company/") != -1){
			var currentId = window.location.hash.split("/")[1];
			var contactId = this.id;
			if (currentId == contactId)
				return options.fn(this);
		}
		
	}catch(e){
	}
	
	return options.inverse(this);
});


function getLastDateOfSubscription(customer){
	if(customer.subscriptions && customer.subscriptions.data.length > 0){
		var date;
 		$.each(customer.subscriptions.data, function(index, value){
 			if(value.plan.id.indexOf("email") == -1){
 				if(value.trial_end && value.trialEnd != null)
 					date = value.trialEnd;
 				else{
 					date = value.currentPeriodEnd;
 					var tempArray = value.plan.id.split("-");
 					if(tempArray.length > 0 && tempArray[1] == 24)
 						date = date+31557600;
 				}
 			}
 		});
 		return date;
	}
	return;
}


Handlebars.registerHelper('validateSendgridWhitelabel', function(valid)
{
	if (valid)
		return "<i class='fa fa-check icon-2x' style='color:green;'></i>";

	return "<i class='fa fa-times icon-2x' style='color:red;'></i>";
});
$(function()
{

	/**
	 * Helper function to return the value of a property matched with the given
	 * name from the array of properties
	 * 
	 * @method getPropertyValue
	 * @param {Object}
	 *            items array of objects
	 * @param {String}
	 *            name to get matched object value
	 * @returns value of the matched object
	 */

	
	/**
	 * Helper function to return the value of Bootstrap class name for 
	 *  Spam Score Popup Panel based on the value of score property
	 */
	Handlebars.registerHelper( "checkSpamScore", function ( score ){
    if (score > 5 )
    {
        return 'danger';
    }
    else if(score < 1)
    {
        return 'success';
    }
     return 'info';
 });

  
	/**
	 * Helper function to return the value of Bootstrap class name for 
	 *  Spam Score Popup Label points based on the value of score property
	 */
   Handlebars.registerHelper( "checkSpamScoreError", function ( score ){
    if (score >= 1 )
    {
        return 'danger';
    }
    else if(score <= 0)
    {
        return 'success';
    }
     return 'warning';
 });

   /**
	 * Helper function to return the value of Spam Score Popup title 
	 *  message based on the value of total spam score property
	 */

Handlebars.registerHelper( "checkSpamMessage", function ( score ){
    if (score > 5 )
    {
        return "Your email template needs 'Rework'";
    }
    else if(score < 1)
    {
        return "Your email template looks 'Good Score'";
    }
     return "Your email template looks 'OK'";
 });
});/** Start of ticketing handlebars * */
Handlebars.registerHelper('is_filtered_ticket', function(options) {

	if (Ticket_Filter_ID)
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('get_ticket_filter_id', function(options) {

	return Ticket_Filter_ID;
});

Handlebars.registerHelper('ticket_collection_exists', function(options) {

	if (App_Ticket_Module.ticketsCollection
			&& App_Ticket_Module.ticketsCollection.collection
			&& App_Ticket_Module.ticketsCollection.collection.length > 0)
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('get_ticket_id', function(action_type, options) {
	return Tickets.get_next_prev_ticket_id(action_type);
});

Handlebars.registerHelper('calculate_due_date', function(due_date, options) {
	var currentEpoch = new Date().getTime();

	if (due_date < currentEpoch) {

		return 'Overdue by '+ Ticket_Utils.dateDiff(currentEpoch, due_date);
	}

	return 'Due in ' + Ticket_Utils.dateDiff(currentEpoch, due_date);
});

Handlebars.registerHelper('getInitials', function(name, options) {

	return Ticket_Utils.getInitials(name);
});

Handlebars.registerHelper('ticket_contact_exists', function(options) {

	if(Ticket_Utils.Current_Ticket_Contact
		&& !($.isEmptyObject(Ticket_Utils.Current_Ticket_Contact.toJSON())))
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('get_contact_image', function(width)
{ 	
	if(Ticket_Utils.Current_Ticket_Contact
		&& !($.isEmptyObject(Ticket_Utils.Current_Ticket_Contact.toJSON()))){
		
		var contact = Ticket_Utils.Current_Ticket_Contact.toJSON();

		var items = contact.properties;

		var agent_image = getPropertyValue(items, "image");

		if (agent_image)
			return agent_image;

		var email = getPropertyValue(items, "email");

		var img = DEFAULT_GRAVATAR_url;
		var backup_image = "&d=404\" ";
		// backup_image="";
		var initials = '';
		try
		{
			// if(!isIE())
			initials = text_gravatar_initials(items);
		}
		catch (e)
		{
			console.log(e);
		}

		if (initials.length == 0)
			backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";

		var data_name =  '';
		data_name = "onLoad=\"image_load(this)\" onError=\"image_error(this)\"_data-name=\"" + initials;
		
		var email = getPropertyValue(items, "email");

		if (email)
			return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + backup_image + data_name);
	}

	return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '' + backup_image + data_name);
});

Handlebars
		.registerHelper(
				'get_due_date_badge',
				function(due_date, options) {

					var currentEpoch = new Date().getTime();

					if (due_date < currentEpoch) {

						return '<span class="label bg-danger first-letter-cap inline-block" title="Overdue by '
								+ Ticket_Utils.dateDiff(currentEpoch, due_date)
								+ '">Overdue</span>';
					}

					return '<span class="label bg-light first-letter-cap inline-block">Due in '
							+ Ticket_Utils.dateDiff(currentEpoch, due_date)
							+ '</span>';
				});

Handlebars.registerHelper('get_current_ticket_filter', function(options) {
	return Ticket_Filter_ID;
});

Handlebars.registerHelper('contains_string', function(value, target, options) {
	if (target.search(value) != -1)
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('array_contains', function(array, obj, options) {
	if (array.indexOf(obj) != -1)
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('is_labels_collection_empty', function(options) {

	if (!Ticket_Labels.labelsCollection || Ticket_Labels.labelsCollection.toJSON().length == 0 )
		return options.fn(this);

	return options.inverse(this);

});

Handlebars.registerHelper('selected_all_tickets', function(options) {

	if(Ticket_Bulk_Ops.selected_all_filter_tickets)
		return options.fn(this);

	return options.inverse(this);
});


Handlebars.registerHelper('get_ticket_labels_from_ids', function(labels,
		object, options) {

	if(!Ticket_Labels.labelsCollection || !labels)
		return;

	var newLabelJSON = {};
	$.each(Ticket_Labels.labelsCollection.toJSON(), function(index, eachLabel) {
		newLabelJSON[eachLabel.id] = eachLabel;
	});

	var newLabels = [];
	$.each(labels, function(index, value) {

		if (newLabelJSON[value])
			newLabels.push(newLabelJSON[value]);

	});

	object["labelsJSON"] = newLabels;

	return options.fn(object);

});

/**
Handlebars.registerHelper('get_allowed_canned_responses_array', function(labels, object, options) {

	var allowedCannedResponses = [];

	if(!Ticket_Canned_Response.cannedResponseCollection)
		return;

	$.each(Ticket_Canned_Response.cannedResponseCollection.toJSON(), function(index, eachCannedResponse){

		     cannedResponseLabels = eachCannedResponse.labels;

		     var isAllowed = (cannedResponseLabels.length == 0) ? false : true;

		     for (var i = 0; i < cannedResponseLabels.length; i++) {
				if($.inArray(cannedResponseLabels[i], labels) == -1){
		     		isAllowed = false;
		     		break;
		     	}
			}

		     if(isAllowed)
		     	allowedCannedResponses.push(eachCannedResponse);
	});

	object["allowed_canned_responses"] = allowedCannedResponses;
	return options.fn(object);

});
*/

Handlebars.registerHelper('get_label_from_label_id', function(id, options) {

	if(!Ticket_Labels.labelsCollection || !id)
		return;

	for (var i = 0; i < Ticket_Labels.labelsCollection.toJSON().length; i++) {
		var eachLabel = Ticket_Labels.labelsCollection.toJSON()[i];
		if([eachLabel.id] == id)
		  return eachLabel.label;
	};

	 return;
	
});

Handlebars.registerHelper('compile_template', function(source, data, options) {

	var template = Handlebars.compile(source);
			
	return template(data);

});

Handlebars.registerHelper('get_template', function(templateName, context, options) {

	return getTemplate(templateName, context);

});
/*
Handlebars.registerHelper('get_ticket_rows', function(ticket_model, options) {

	var selected_columns = CURRENT_DOMAIN_USER.helpdeskSettings.choosed_columns, tr_ele = '';

	for(var i=0; i< selected_columns.length; i++){

		var td_ele = '<td  class="first-letter-cap open-ticket p-l-none">';
		switch(selected_columns[i]){

			case 'id':
				td_ele += '<div class="text-ellipsis">#'+ ticket_model.id +'</div>';
				break;
			case 'subject':
				td_ele += '<div class="text-ellipsis width-15em">'+ ticket_model.subject +'</div>';
				break;
			case 'requester_name':
				td_ele += '<div class="text-ellipsis width-9em">'+ ticket_model.requester_name +'</div>';
				break;
			case 'requester_email':
				td_ele += '<div class="text-ellipsis width-9em">'+ ticket_model.requester_email +'</div>';
				break;
			case 'created_date':
				td_ele += ticket_model.created_date;
				break;
			case 'due_date':{

				var due_date = ticket_model.due_date, due_txt = '-';
				var currentEpoch = new Date().getTime();

				if(due_date && due_date > 0)
					if (due_date < currentEpoch)
						due_txt = 'Overdue by ' + Ticket_Utils.dateDiff(currentEpoch, due_date);
					else
						due_txt = 'Due in ' + Ticket_Utils.dateDiff(currentEpoch, due_date);

				td_ele += due_txt;
				
				break;
			}
			case 'assigned_date':
				td_ele += ticket_model.assigned_time;
				break;
			case 'last_updated_date':
				td_ele += ticket_model.last_updated_time;
				break;
			case 'closed_date':
				td_ele += ticket_model.closed_time;
				break;
			case 'assignee':
				td_ele += '<div class="text-ellipsis width-9em">' + ((ticket_model.assignee) ? ticket_model.assignee.name : "-") +'</div>';
				break;
			case 'group':
				td_ele += '<div class="text-ellipsis width-9em">'+ ((ticket_model.group) ? ticket_model.group.group_name : "-") +'</div>';
				break;
			case 'LAST_UPDATED_BY':
				td_ele += ticket_model.last_updated_by;
				break;
			case 'organization':
				td_ele += '-';
				break;
			case 'contact_details':
				td_ele += '-';
				break;
			case 'priority':{
				td_ele = '<td class="p-l-none">';

				if(ticket_model.priority == 'HIGH')
					td_ele += '<span class="label bg-danger first-letter-cap inline-block">'+ ticket_model.priority +'</span>';
				else
					td_ele += '<span class="first-letter-cap inline-block">'+ ticket_model.priority +'</span>';

				break;
			}
			case 'ticket_type':
				td_ele += ticket_model.type;
				break;
			case 'status':
				td_ele += ticket_model.status;
				break;
		}

		td_ele += '</td>';
		tr_ele += td_ele;
	}

	return tr_ele;
});*/

Handlebars.registerHelper('is_ticket_reply_activity', function(activityType, options) {

	var replyActivity = ['TICKET_CREATED', 'TICKET_REQUESTER_REPLIED', 'TICKET_ASSIGNEE_REPLIED'];

	if(activityType && $.inArray(activityType, replyActivity) != -1)
		return options.fn(this);

	return options.inverse(this);

});


Handlebars.registerHelper('is_ticket_requester_activity', function(activityType, options) {

	var replyActivity = ['TICKET_CREATED', 'TICKET_REQUESTER_REPLIED'];

	if(activityType && $.inArray(activityType, replyActivity) != -1)
		return options.fn(this);

	return options.inverse(this);

});

Handlebars.registerHelper('is_single_row_view', function(options) {

	if(Tickets.isSingleRowView())
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('get_status_label', function(status, options) {

	switch(status){
		case 'NEW':
			return '<span class="label label-warning cus-pad">N</span>';
			break;
		case 'OPEN':
			return '<span class="label label-danger cus-pad">O</span>';
			break;
		case 'PENDING':
			return '<span class="label label-info cus-pad">P</span>';
			break;
		case 'CLOSED':
			return '<span class="label label-success cus-pad">C</span>';
			break;
	}
});

Handlebars.registerHelper('get_palin_text_from_html', function(html, options) {

	var tmp = document.createElement("DIV");
   tmp.innerHTML = html;
   return tmp.textContent || tmp.innerText || "";

});

Handlebars.registerHelper('get_current_user_prefs', function(object, options) {

	object['current_logged_in_user'] = CURRENT_DOMAIN_USER;
	return options.fn(object);

});

Handlebars.registerHelper('agile_compare_prefs', function(key, value, options) {

	var prefs = _agile_get_prefs(key);
	console.log(prefs == value);
	if(prefs && prefs == value)
		return options.fn(this);

	return options.inverse(this);

});
Handlebars.registerHelper('is_lhs_filter_disabled', function(options) {

	if(_agile_get_prefs('hide_ticket_lhs_filter'))
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('is_column_selected', function(field_name, options) {

	var selected_columns = CURRENT_DOMAIN_USER.helpdeskSettings.choosed_columns;

	if(!selected_columns || !selected_columns.length){
		selected_columns = ['id','subject','requester_name','due_date','priority','status','assignee','group',];
	}

	if(selected_columns.indexOf(field_name) != -1)
		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('is_ticket_collection_available', function(options) {

	try{
		if(App_Ticket_Module.ticketsCollection 
			&& App_Ticket_Module.ticketsCollection.collection.toJSON().length > 0
			&& App_Ticket_Module.ticketsCollection.collection.get(Current_Ticket_ID))
		  return options.fn(this);
	}catch(e){}
	
	return options.inverse(this);

});

Handlebars.registerHelper('convert_to_html', function(str, options) {

	if(!str)
		return "";

	str = str.trim();

	//str = str.replace(/(?:\r\n)/g, '<br/>');

	// Construct anchor links
	try {
		// var exp = /(\b(http|https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
		// str = str.replace(exp,
		// 		"<a href='$1' target='_blank' class='link-color'>$1</a>");

	} catch (err) {
	}

	return str;
});
Handlebars.registerHelper('replace_newline_with_br', function(str, options) {

	if(!str)
		return "";

	str = str.trim();

	str = str.replace(/(?:\r\n|\r|\n)/g, '<br />');
    return str;
});

Handlebars.registerHelper('get_ticket_uri', function(str, options) {
	
    	if(Ticket_Filter_ID)
	       return "#tickets/filter/"+Ticket_Filter_ID;

    	return "#tickets";
    });

/**
  * CSS text avatars
  */
 Handlebars.registerHelper('getGravatarFromEmail', function(email, width)
 {

  if (email)
     return 'https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + '&d=404';
  
  return 'https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '&d=404';

 });

Handlebars.registerHelper('get_current_filter_name', function(options)
{
  return Ticket_Filters.getCurrentFilterName();
});

Handlebars.registerHelper('get_filters_select_options', function(options)
{
  var filtersArray = App_Ticket_Module.ticketFiltersList.collection.toJSON();
  var optionHTML = '<option value="{{id}}">{{name}}</option>', resultHTML = '';

  filtersArray.forEach(function(filter){
  	resultHTML += optionHTML.replace('{{id}}', filter.id).replace('{{name}}', filter.name);
  });

  return resultHTML;
});

Handlebars.registerHelper('is_current_opend_ticket', function(id, options)
{
	if(id == Current_Ticket_ID)
  	return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('is_helpdesk_enabled', function(options)
{
	if(Helpdesk_Enabled)
  		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('is_current_logged_in_user', function(id, options)
{

	if (CURRENT_DOMAIN_USER.id == id)

		return options.fn(this);

	return options.inverse(this);
});

Handlebars.registerHelper('replace_br_with_space', function(text, options)
{
	if(!text)
		return;
	
	var regex = /<br\s*[\/]?>/gi;

	return text.replace(regex, " ");
});
Handlebars.registerHelper('gravatarurl', function(items, width)
	{

		if (items == undefined)
			return;

		// Checks if properties already has an image, to return it
		var agent_image = getPropertyValue(items, "image");
		if (agent_image)
			return agent_image;

		// Default image
		var img = DEFAULT_GRAVATAR_url;
		var backup_image = "&d=404\" ";
		// backup_image="";
		var initials = '';
		try
		{
			// if(!isIE())
			initials = text_gravatar_initials(items);
		}
		catch (e)
		{
			console.log(e);
		}

		if (initials.length == 0)
			backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";

		var data_name =  '';
		// if(!isIE())
			data_name = "onLoad=\"image_load(this)\" onError=\"image_error(this)\"_data-name=\"" + initials;
		
		var email = getPropertyValue(items, "email");
		if (email)
		{
			return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + backup_image + data_name);
		}

		return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '' + backup_image + data_name);

	});

Handlebars.registerHelper('uc_first', function(text, options)
{
	return ucfirst(text);
});

/** End of ticketing handlebars* */
var Helcenter_Events = {

	initializeStatuscheckbox : function(el){
   		

   		$(".article_status",el).off();	
   		$(".article_status",el).on("change" ,function(){

            var msg = "Do you want to publish the article";
            var article_id = $(this,el).closest("td").data("id");   
            var flag = $( "."+article_id ).is(":checked");
            
            if(!flag)
            	msg = "Do you want to save the article as draft";     

   				var data = true;

                   if(!flag)
                      data = false; 
                    
               showModalConfirmation("Status", msg, function(){
   					
                  if(!App_Helpcenter_Module.articlesCollection)
                        return;
                
                  var newArticleModel = new BaseModel();
                 
                  newArticleModel.url = "/core/api/knowledgebase/article/update-status/" +article_id;
               
                  var json = {} ;
                   
                  json = {"id":article_id,"is_article_published":flag };

                  newArticleModel.save(json, {
                    
                     success: function(model){

                        if(App_Helpcenter_Module.articlesCollection.collection){
                           
                             // Get data from collection with id
                              var model = App_Helpcenter_Module.articlesCollection.collection.get(article_id);

                              //Update data in model
                              model.set({"id":article_id,"is_article_published":data}, {silent: true});
                        }
                           
                     }

                  });
                  
   				  }, function(){
                    
                     if(!flag)
                        $("."+article_id,el).prop('checked','true');
                     else   
                        $("."+article_id,el).removeAttr('checked');  
                                    
               },null);
   		});
	},

   categorieDelete: function(el){
     
      $(".remove_categorie",el).on("click",function(e){
                       
         e.preventDefault();
         var id = $(this).data("id");
                  
         showModalConfirmation("Delete Category", "Are you sure, you want to delete category ", function(){

                     
                     
            console.log(id);
                     
            $.ajax({
              
               url: '/core/api/knowledgebase/categorie/'+id,
               type: 'DELETE',
               contentType : "application/json",
               success : function(response){
                  model=App_Helpcenter_Module.categoriesCollection.collection.get(id);
                  model.destroy();     
               }
            });                                    
                     

         }, null,null, "Yes", "No");

      });
   }


};/**
 * Checks if user loggedin in different instance or not.
 * @param pubnub_message
 */
 var IPCHECK = ["183.83.0.113","117.247.178.90","117.247.109.22","117.247.109.20"];
function check_login_instance(pubnub_message)
{
	
	// Gets current user id
	current_user_id = get_current_user_id();
	
	console.log(pubnub_message);
	// Checks if user logged in has same id as in id received from pubnub
	if(pubnub_message.id && pubnub_message.id == current_user_id)
	{
		// Reads JESSION ID to compare with 
		JSESSIONID = readCookie("JSESSIONID");
		console.log(JSESSIONID);
		session_id_in_message = pubnub_message.session_id;
		var pubnub_ip = pubnub_message.CURRENTIP;
		var pubnub_loginFromPanel = pubnub_message.LOGIN_FROM_PANEL;
		if(session_id_in_message == JSESSIONID)
			return;
		if($.inArray(CURRENTIP, IPCHECK) != -1 && LOGIN_FROM_PANEL == "true")
			return;
		if(pubnub_ip != undefined && pubnub_loginFromPanel != undefined && $.inArray(pubnub_ip, IPCHECK) != -1 && pubnub_loginFromPanel == "true")
			return;
		if(pubnub_message.login_time < get_current_user_loggedin_time())
			return;

		// If mobile no logout on other end
		if(agile_is_mobile_browser())
			   return;
		
		pubnub_message["email"] = get_current_user_email();
		
		// Sets cookie to user it in error page to show information. 0.0025 is 10min in approx
		createCookie("_multiple_login", JSON.stringify(pubnub_message), 0.0025);
		
		window.location = "/login?ml=true";
		
		
	}
		
}

/**
 * Gets user logged in time
 * @returns
 */
function get_current_user_loggedin_time()
{
	
	var infoJSON = CURRENT_DOMAIN_USER.info_json_string;
	
	infoJSON = JSON.parse(infoJSON);
	return infoJSON.logged_in_time;
}

function get_current_user_id()
{
	return CURRENT_DOMAIN_USER.id	
}

function get_current_user_email()
{
	return CURRENT_DOMAIN_USER.email	
}


// Publishes user details who logged in to check if someone loggedin with same credentials
function publishLoginEvent(pubnub)
{

	// If mobile no logout on other end
	if(agile_is_mobile_browser())
		   return;
	
	var publishJSON = {
			
	};
	publishJSON["type"] = "LOGIN_INSTANCE"
	publishJSON["id"] = CURRENT_DOMAIN_USER.id;
	publishJSON["session_id"] = readCookie("JSESSIONID");
	publishJSON["login_time"] = get_current_user_loggedin_time()
	publishJSON["userAgent"] = getBrowserDetails();
	publishJSON["CURRENTIP"] = CURRENTIP;
	publishJSON["LOGIN_FROM_PANEL"] = LOGIN_FROM_PANEL;
	console.log(getBrowserDetails());
	
	// Message has data.
	pubnub.publish({ channel : CURRENT_DOMAIN_USER.domain, message : publishJSON, callback : function(info)
	{
		console.log(info);
	}});
}

function getBrowserDetails()
{
	var nVer = navigator.appVersion;
	var nAgt = navigator.userAgent;
	var browserName  = navigator.appName;
	var fullVersion  = ''+parseFloat(navigator.appVersion); 
	var majorVersion = parseInt(navigator.appVersion,10);
	var nameOffset,verOffset,ix;

	// In Opera, the true version is after "Opera" or after "Version"
	if ((verOffset=nAgt.indexOf("Opera"))!=-1) {
	 browserName = "Opera";
	 fullVersion = nAgt.substring(verOffset+6);
	 if ((verOffset=nAgt.indexOf("Version"))!=-1) 
	   fullVersion = nAgt.substring(verOffset+8);
	}
	// In MSIE, the true version is after "MSIE" in userAgent
	else if ((verOffset=nAgt.indexOf("MSIE"))!=-1) {
	 browserName = "Microsoft Internet Explorer";
	 fullVersion = nAgt.substring(verOffset+5);
	}
	// In Chrome, the true version is after "Chrome" 
	else if ((verOffset=nAgt.indexOf("Chrome"))!=-1) {
	 browserName = "Chrome";
	 fullVersion = nAgt.substring(verOffset+7);
	}
	// In Safari, the true version is after "Safari" or after "Version" 
	else if ((verOffset=nAgt.indexOf("Safari"))!=-1) {
	 browserName = "Safari";
	 fullVersion = nAgt.substring(verOffset+7);
	 if ((verOffset=nAgt.indexOf("Version"))!=-1) 
	   fullVersion = nAgt.substring(verOffset+8);
	}
	// In Firefox, the true version is after "Firefox" 
	else if ((verOffset=nAgt.indexOf("Firefox"))!=-1) {
	 browserName = "Firefox";
	 fullVersion = nAgt.substring(verOffset+8);
	}
	// In most other browsers, "name/version" is at the end of userAgent 
	else if ( (nameOffset=nAgt.lastIndexOf(' ')+1) < 
	          (verOffset=nAgt.lastIndexOf('/')) ) 
	{
	 browserName = nAgt.substring(nameOffset,verOffset);
	 fullVersion = nAgt.substring(verOffset+1);
	 if (browserName.toLowerCase()==browserName.toUpperCase()) {
	  browserName = navigator.appName;
	 }
	}
	// trim the fullVersion string at semicolon/space if present
	if ((ix=fullVersion.indexOf(";"))!=-1)
	   fullVersion=fullVersion.substring(0,ix);
	if ((ix=fullVersion.indexOf(" "))!=-1)
	   fullVersion=fullVersion.substring(0,ix);

	majorVersion = parseInt(''+fullVersion,10);
	if (isNaN(majorVersion)) {
	 fullVersion  = ''+parseFloat(navigator.appVersion); 
	 majorVersion = parseInt(navigator.appVersion,10);
	}
	
	var OSName="Unknown OS";
	if (navigator.appVersion.indexOf("Win")!=-1) OSName="Windows";
	if (navigator.appVersion.indexOf("Mac")!=-1) OSName="MacOS";
	if (navigator.appVersion.indexOf("X11")!=-1) OSName="UNIX";
	if (navigator.appVersion.indexOf("Linux")!=-1) OSName="Linux";

	var json = {};
	json["browser_name"] = browserName;
	json["full_version"] = fullVersion;
	json["major_version"] = majorVersion;
	json["app_name"] = navigator.appName;
	json["navigator.userAgent"] = navigator.userAgent;
	json["OSName"] = OSName;
	
	return json;

}
/**
 * Shows and manages menu list of recently viewed items, on right side of main menu.
 * 
 * Non-static fxn : add_recent_view(model mdl)
 * 						This will add model mdl to the list. This function takes care of order of the list too, with most
 * 						recently viewed model being displayed first.
 * 
 * 						This is the only function necesary outside of this file/module.
 * 
 * @author Chandan
 */

var recent_view;
var recent_view_update_required=false;
var MAX_RECENT=6;

/**
 * Does actual work of populating menu from list.
 */
function populate_recent_menu()
{
	if(!recent_view)
	{	
		var arr = [];
		try{
			arr = JSON.parse(localStorage.recentItems);
		}catch(err){
			
		}
		recent_view = new Base_Collection_View({
//			url: 'core/api/contacts/recent?page_size=5' ,
			restKey: "contacts",
			templateKey: "recent-menu",
			data : arr,
			individual_tag_name: 'li',			
			sort_collection: false,
			postRenderCallback : function(el)
			{								
				$('#recent-menu').append($(el).html());
			}
		});
		
	if(recent_view.collection.length==0)	// default text, when list is empty.
		$('#recent-menu>ul').html('<li class="list-group-item"><a class="disabled" style="color:black;">No Recent Activity</a></li>');
	else {recent_view.render(true);
	}			// populate elements if filled from localStorage
}
}

/**
 * Add/Update model to recent contacts view.
 * Now non functional.
 * @param mdl - the model to add.
 */
function add_recent_view(mdl)
{
	
	if(recent_view==undefined)
		populate_recent_menu();
	
	// Add model to front of the collection, so most frequent ones are on top.
	
	if(!recent_view.collection.get(mdl.get('id'))){
		
		if(recent_view.collection.length>=MAX_RECENT)
			recent_view.collection.pop({silent:true});
		
		recent_view.collection.unshift(mdl);
	}	
	else {
			recent_view.collection.remove(mdl, { silent: true });
		
		recent_view.collection.unshift(mdl);
	}
	
	
	
	recent_view_update_required=true;

	var arr=[];
	
	for(var i=0;i<recent_view.collection.models.length;++i)
	{
		arr.push(recent_view.collection.models[i].attributes);
	}
	
	localStorage.recentItems = JSON.stringify(arr); // save current list to localStorage
}

/**
 * Appropriate action when an entry in drop down menu is clicked.
 * @param id
 */
function modelAction(elem)
{
	var id=elem.dataset['id'];
	var entity=recent_view.collection.get(id);
	var type=entity.attributes.entity_type;
	
	if(type=='contact_entity')
	{
		App_Contacts.navigate("contact/"+id,{trigger:true});
		$('#contactsmenu').parent().find('.active').removeClass('active');
		$('#contactsmenu').addClass('active');
	}
	else if(type=='company_entity')
	{
		App_Contacts.navigate("company/"+id,{trigger:true});
		$('#companiesmenu').parent().find('.active').removeClass('active');
		$('#companiesmenu').addClass('active');
	}	
	else if(type=='deal')
	{
		App_Deal_Details.navigate("deal/"+id,{trigger:true});
		$('#contactsmenu').parent().find('.active').removeClass('active');
		$('#contactsmenu').addClass('active');
	}
	else if(type == 'case')
	{
		updatecases(entity);
	}
	else if(type == 'document' || entity.attributes.network_type)
	{
		updateDocument(entity);
	}
	
	recent_view_update_required=true;
}

$(function(){
	
	// when caret clicked, show the dropdown menu
	$('#recent-menu').on('click',function(e){ 
	
		if(recent_view==undefined)
			populate_recent_menu();
		else if(recent_view_update_required)
			{
			recent_view.render(true);
			}
		
		recent_view_update_required=false;
	});
	
	$('#recent-menu li:first').mouseenter(function(e){
		e.stopPropagation();
		e.preventDefault();
		$(this).css('background-color','white');
	});
	
	// when an entry clicked
	$('#recent-menu').on('click','ul>li',function(e) {
		e.stopPropagation();
		
		var selected_element=$(e.target).closest('[data-id]',$(this));
				// find the id of the element
		
		if(selected_element.length)
			modelAction(selected_element[0]);
		
		// close the drop down menu
		$('#recent-menu').removeClass('open');
		
		return false;
	});	
});

$(function() {
	
	// Request for html5 notification permission.
	request_notification_permission();

});

/**
 * Create the Notification if permissions allowed in the browser.
 * 
 * @method show_desktop_notification
 * 
 * @param {String}
 *            imageURL - image url to show image in popup.
 * @param {String}
 *            title - Notification type.
 * @param {String}
 *            message - Notification message.
 * @param {String}
 *            link - link to navigate when clicked on popup.
 * @param {String}
 *            tag - to set tag property of Notification. Here tag is contact-id + notification-type
 */
function show_desktop_notification(imageURL, title, message, link, tag,timeout) {

	if(!timeout){
		timeout=30000;
	}
		
	var notification = notify.createNotification(title, {
		   body : message,
		   icon : imageURL,
		   tag : tag,
		   onClickCallback : function() {
				
			   window.focus();
				
			   // Open respective block
				Backbone.history.navigate(link, {
					trigger : true
				});

				notification.close();
			 }
		  });
	
	setTimeout(function() {
		notification.close();
	}, timeout);
	
	// Show when tab is inactive
	if (!window.closed)
	{	
		if (notification_prefs.notification_sound != 'no_sound')
			play_sound(notification_prefs.notification_sound);
		
	}
}

/**
 * request_notification_permission request the notification request in case of
 * "0" permissions to allow or denied the notifications.
 * 
 * @method request_notification_permission
 */
function request_notification_permission() {
	
		
	if (notify.permissionLevel() != notify.PERMISSION_DEFAULT)
		  return;
	 
    $('body').on('click', '#set-desktop-notification', function(){
		notify.requestPermission(function() {
			if(notify.permissionLevel() == notify.PERMISSION_GRANTED)
			{	
				$('#set-desktop-notification').css('display', 'none');
			    $('#desktop-notification-content')
					.html(
							"<i>Desktop Notifications are now enabled. <a href=\"#\" id=\"disable-notification\" class=\"text-info\" style=\"text-decoration:underline;\">Disable</a></i>");
			}
			else
			{
				$('#set-desktop-notification').css('display', 'none');
	            $('#desktop-notification-content').html(
					"<i>Desktop Notifications are now disabled. <a href=\"#\" id=\"enable-notification\" class=\"text-info\" style=\"text-decoration:underline;\">Enable</a></i>")
             }	
		});
	});	
}
/**
 * notification.js is a script file to show notifications.pubnub is used to emit
 * data received from server. Notification preferences are fetched for current
 * user.Noty jquery plugin are used to show pop-up messages.
 * 
 * @module Notifications
 */
var notification_prefs;

/**
 * Fetches notification preferences for current user
 */
function downloadAndRegisterForNotifications()
{
	// As of now I know that this function is calling only once after loggin. so Updating due task count in this function;
	getDueTasksCount(function(count){
		var due_task_count= count;
		
		if(due_task_count==0)
			$(".navbar_due_tasks").css("display", "none");
		else
			$(".navbar_due_tasks").css("display", "inline-block");
		if(due_task_count !=0)
			$('#due_tasks_count').html(due_task_count);
		else
			$('#due_tasks_count').html("");

	});
	

	// Download Notification Prefs
	var notification_model = Backbone.Model.extend({ url : 'core/api/notifications' });

	var model = new notification_model();
	model.fetch({ success : function(data)
	{

		// Notification Preferences with respect to current agile user
		notification_prefs = data.toJSON();
		console.log(notification_prefs);

		// Gets domain
		getDomainFromCurrentUser();
	} });
}

/**
 * Gets domain from current user using backbone model.
 */
function getDomainFromCurrentUser()
{
		var domain = CURRENT_DOMAIN_USER['domain'];
		subscribeToPubNub(domain, function(message)
		{

			_setupNotification(message);
		});
}

/**
 * Subscribes to Pubnub.
 * 
 * @param domain -
 *            Domain name.
 */
function subscribeToPubNub(domain)
{
	// Put http or https
	// var protocol = document.location.protocol;
	var protocol = 'https';
	load_urls_on_ajax_stop(protocol + '://pubnub.a.ssl.fastly.net/pubnub-3.4.min.js', function()
	{
		// CREATE A PUBNUB OBJECT
		var pubnub = PUBNUB.init({ 'publish_key' : 'pub-c-e4c8fdc2-40b1-443d-8bb0-2a9c8facd274',
			'subscribe_key' : 'sub-c-118f8482-92c3-11e2-9b69-12313f022c90', ssl : true, origin : 'pubsub.pubnub.com' });
		pubnub.ready();
		pubnub.subscribe({ channel : domain, callback : function(message)
		{
			console.log(message);
			if(message.type  == "LOGIN_INSTANCE")
			{
				check_login_instance(message);
				return;
			}
			
			// shows notification for bulk actions
			if (message.type == "BULK_ACTIONS")
			{
				bulkActivitiesNoty('information', message);
				return;
			}

			// Ticket operations
			if (message.type && 
					message.type.indexOf('TICKET') != -1)
			{
				loadServiceLibrary(function(){
					Ticket_Utils.showNoty('information', message.message, 'bottomRight', 5000);
				});

				return;
			}
			
			if (message.type == "EVENT_REMINDER")
			{
				if(CURRENT_DOMAIN_USER['email']==message.useremail){
					getTemplate("event-notification", message, undefined, function(template_ui){
						if(!template_ui)
							  return;
						showNoty('information', $(template_ui), "bottomRight", "EVENT_REMINDER",undefined,3000000);	
					}, null);

					return;
				}
			
			}
			
			
			// shows call notification
			if(message.type == "CALL"){
				getTemplate('call-notification', message, undefined, function(template_ui){
					if(!template_ui)
						  return;

					showNoty('information', $(template_ui), 'bottomRight', "CALL");
				}, null);

				return;
			}

			if(message.type == "UNKNOWN_CALL"){
				getTemplate("unknown-call-notification", message, undefined, function(template_ui){
					if(!template_ui)
						  return;

					showNoty('information', $(template_ui), "bottomRight", "UNKNOWN_CALL");
				}, null);

				return;
			}
			
			if(message.notification == "CAMPAIGN_NOTIFY")
			{
			   var custom_json = JSON.parse(message["custom_value"]);

			   if(custom_json.owner_id == "ALL"){
			   		getTemplate('campaign-notify',message, undefined, function(template_ui){
						if(!template_ui)
							  return;
						showNoty('information', $(template_ui), 'bottomRight',"CAMPAIGN_NOTIFY");
					}, null);
			   }
			   if(custom_json.owner_id == CURRENT_DOMAIN_USER['id']){

			   		getTemplate('campaign-notify', message, undefined, function(template_ui){
						if(!template_ui)
							  return;
						showNoty('information', $(template_ui), 'bottomRight',"CAMPAIGN_NOTIFY");
					}, null);
			   } 
				   
			   return;
			}
			if(message.type == 'IS_BROWSING')
			{
			    get_contact_by_email(message.email,function(contact){
			    	if(contact)
			    	{
			    		contact['notification'] = message.type;
			    		contact['custom_value'] = message.custom_value;
			    		message = contact;
			    		_setupNotification(message);
			    	}
			    });	
			    return;
			}
			// sets notification for notification preferences.
			_setupNotification(message);
		},
		connect : function()
		{
			console.log("connected");
			publishLoginEvent(pubnub);
		}
		
		});
	});
}

/**
 * Sets notification message
 * 
 * @param object
 *            object data such as contact
 */
function _setupNotification(object)
{
	// Inorder to avoid navigating to the contact
	if (object.notification == 'CONTACT_DELETED')
		object.id = "";
	

	// gets notification template.
	getTemplate('notify-html', object, undefined, function(template_ui){
		if(!template_ui)
			  return;

		var html = $(template_ui);	
		// Shows notification for link clicked, email opened and browsing.
		notification_for_email_and_browsing(object, html);

		// Verify whether current_user key exists. It doesn't exists when tag added
		// through campaign, or notification for email-clicked etc. since session
		// doesn't exist.
		if ('current_user_name' in object)
		{
			if (notification_prefs.prefs.currentDomainUserName == object.current_user_name)
				return;
		}

		// notification for tags, contact and deal actions.
		notification_for_contact_and_deal(object, html);

	}, null);
}

/**
 * Set up notification for link clicked, email opened and browsing.
 * 
 * @param object -
 *            contact object.
 * @param html -
 *            notification template
 * 
 */
function notification_for_email_and_browsing(object, html)
{

	if (object.notification == 'CLICKED_LINK' || object.notification == 'OPENED_EMAIL' || object.notification == 'IS_BROWSING')
	{
		var option = get_option(object.notification);
		notification_based_on_type_of_contact(option, object, html, object.notification);
		return;
	}
}

/**
 * Checks notification preferences and compare with notification type. If it is
 * set true then show notification. For e.g. If Deal created is true then
 * notification when 'deal is created' is shown.
 * 
 * @param object -
 *            contact or deal object.
 * 
 * @param html -
 *            notification template.
 */
function notification_for_contact_and_deal(object, html)
{
	$.each(notification_prefs, function(key, value)
	{

		if (key == object.notification.toLowerCase())
		{
			if (notification_prefs[key])
			{

				// Replace CONTACT with COMPANY for contact-type COMPANY
				if ((object.notification == "CONTACT_ADDED" || object.notification == "CONTACT_DELETED") && object.type == "COMPANY")
				{
					var company = object.notification.replace('CONTACT', 'COMPANY');
					object.notification = company;
				}

				showNoty('information', html, 'bottomRight', object.notification);
			}
		}

	});
}

/**
 * Verifies whether contact owner is same as notification prefs owner. It is
 * used for 'CONTACT_ASSIGNED' option.
 * 
 * @param contact -
 *            contact object.
 */
function is_assigned(contact)
{

	// Current user who logged_in
	var current_user = notification_prefs.prefs.currentDomainUserName;

	// User who created contact
	var contact_created_by = contact.owner_name;

	// checks for assigned contact
	if (current_user == contact_created_by)
		return true;

	return false;
}

/**
 * Verifies whether contact is assigned and starred (having star value).
 * 
 * @param contact -
 *            contact object.
 */
function is_assigned_and_starred(contact)
{

	// checks assigned and starred
	if (is_assigned(contact) && contact.star_value > 0)
		return true;

	return false;
}

/**
 * Returns notification_prefs value based on notification type for link clicked,
 * email_opened and browsing.
 * 
 * @param notification_type -
 *            CLICKED_LINK or OPENED_EMAIL or IS_BROWSING
 */
function get_option(notification_type)
{
	switch (notification_type) {
	case 'CLICKED_LINK':
		return notification_prefs.link_clicked;
	case 'OPENED_EMAIL':
		return notification_prefs.email_opened;
	case 'IS_BROWSING':
		return notification_prefs.browsing;
	}
}

/**
 * Shows notification for link clicked, email opened and browsing. It verifies
 * for option selected and shows notification accordingly.
 * 
 * @param option -
 *            ANY_CONTACT, CONTACT_ASSIGNED or CONTACT_ASSIGNED_AND_STARRED.
 * @param contact -
 *            contact object
 * @param message -
 *            notification html template.
 * @param notification_type -
 *            CLICKED_LINK or OPENED_EMAIL or IS_BROWSING
 */
function notification_based_on_type_of_contact(option, contact, message, notification_type)
{
	switch (option) {
	case 'CONTACT_ASSIGNED':
		if (is_assigned(contact))
			showNoty("information", message, "bottomRight", notification_type);
		break;
	case 'CONTACT_ASSIGNED_AND_STARRED':
		if (is_assigned_and_starred(contact))
			showNoty("information", message, "bottomRight", notification_type);
		break;
	case 'ANY_CONTACT':
		showNoty("information", message, "bottomRight", notification_type);
		break;
	}

}

/**
 * Checks html5 notifications browser settings. If desktop notifications are
 * enabled, shows enabled message and similarly for disabled.
 * 
 * @param el -
 *            backbone el element.
 */
function check_browser_notification_settings(el)
{

	// Verify desktop notification settings.
	// Check if browser support
	if (notify && !notify.isSupported)
	{
		$('#set-desktop-notification').css('display', 'none');
	}

	// Allowed
	if (notify && notify.isSupported && notify.permissionLevel() == notify.PERMISSION_GRANTED)
	{
		$('#set-desktop-notification').css('display', 'none');
		$('#desktop-notification-content')
				.html(
						"<i>Desktop Notifications are now enabled. <a href=\"#\" id=\"disable-notification\" class=\"text-info\" style=\"text-decoration:underline;\">Disable</a></i>");
	}

	// Denied
	if (notify && notify.isSupported && notify.permissionLevel() == notify.PERMISSION_DENIED)
	{
		$('#set-desktop-notification').css('display', 'none');
		$('#desktop-notification-content')
				.html(
						"<i>Desktop Notifications are now disabled. <a href=\"#\" id=\"enable-notification\" class=\"text-info\" style=\"text-decoration:underline;\">Enable</a></i>")
	}

	// notification enable help
	$('#enable-notification', el).on('click', function(e)
	{
		e.preventDefault();
        // Checking modal existance
		if($('#notification-enable-help-modal').length == 0){
			   getTemplate('notification-enable-help-modal', {}, undefined, function(template_ui){
			 		if(!template_ui)
			    		return;
					$("body").append($(template_ui)); 
				}, null);

		}

		$('#notification-enable-help-modal').modal("show");
	});

	// notification disable help
	$('#disable-notification', el).on('click', function(e)
	{
		e.preventDefault();
		 // Checking modal existance
		if($('#notification-disable-help-modal').length == 0){
			   getTemplate('notification-disable-help-modal', {}, undefined, function(template_ui){
			 		if(!template_ui)
			    		return;
					$("body").append($(template_ui)); 
				}, null);

		}

		$('#notification-disable-help-modal').modal("show");
	});
}

/**
 * Shows bootstrap switch changes accordingly. It disables all the options when
 * off and enables when on.
 * 
 * @param el-
 *            backbone el element
 * 
 */
function showSwitchChanges(el)
{
	
	$('#control_notifications').off('change').on('change',function(){
		var status = $('#notification-switch').bootstrapSwitch('status');

		// if ON - status is true
		if (status)
		{
			$(el).find('input[type=checkbox]').not('#control_notifications,#notification_sound').removeAttr('disabled');
			$(el).find('select').not('#control_notifications').removeAttr('disabled');
		}
		else
		{
			$(el).find('input[type=checkbox]').not('#control_notifications').attr('disabled', 'disabled');
			$(el).find('select').not('#control_notifications, #notification_sound').attr('disabled', 'disabled');
		}

	});	
}

/**
 * Runs jquery noty plugin for notification pop-ups when desktop permission is
 * not given.
 * 
 * @param type -
 *            noty types like information, warning etc.
 * @param message -
 *            html content for notification
 * @param position -
 *            position of pop-up within the webpage.
 * @param notification_type -
 *            notification type - TAG_CREATED, TAG_DELETED etc.
 */
function showNoty(type, message, position, notification_type, onCloseCallback,timeout)
{
	if(!timeout){
		timeout=30000;
	}
	// Don't show notifications when disabled by user. Neglect campaign ones
	if(notification_type != "EVENT_REMINDER" ){
	
	if (notification_type != "CAMPAIGN_NOTIFY"&& !notification_prefs.control_notifications)
		return;
	}

	// Check for html5 notification permission.
	if (notify && notify.isSupported && notify.permissionLevel() == notify.PERMISSION_GRANTED)
	{
		if(notification_type=="CALL"){
			show_desktop_notification($('span:eq(0)', message).attr('id'), $(message).find('#calling-contact-id').text(),
									  $(message).find('#call-notification-text').text(), $(message).find('#calling-contact-id').attr('href'),
									  $(message).find('#calling-contact-id').attr('href').split('/')[1] + '-' + "CALL");
			return;
		}
		if(notification_type=="UNKNOWN_CALL"){
			show_desktop_notification($('span:eq(0)', message).attr('id'), $(message).find("#unknown-contact-name").text(),$(message).find("#unknown-call-notification-text").text(),
										$(message).find("#unknown-contact-name").attr('href'),
										$(message).find("#unknown-contact-name").attr('href').split('/')[2]+'-'+"UNKNOWN_CALL");
			return;
		}
		if(notification_type=="CAMPAIGN_NOTIFY"){
			show_desktop_notification($('span:eq(0)', message).attr('id'), $(message).find('#campaign-contact-id').text(),
									  $(message).find('#campaign-notify-text').text(), $(message).find('#campaign-contact-id').attr('href'),
									  $(message).find('#campaign-contact-id').attr('href').split('/')[1] + '-' + "CAMPAIGN_NOTIFY");
			return;
		}
		
		if(notification_type=="EVENT_REMINDER"){
			
			show_desktop_notification(getImageUrl(message,notification_type), getNotificationType(notification_type), getTextMessage(message), getId(message), getId(message).split(
			'/')[1] + '-' + notification_type,3000000);
			return;
		}
		
		
		show_desktop_notification(getImageUrl(message,notification_type), getNotificationType(notification_type), getTextMessage(message), getId(message), getId(message).split(
				'/')[1] + '-' + notification_type);
		return;
	}

	// Download the lib
	head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH + 'lib/noty/layouts/bottomRight.js', LIB_PATH + 'lib/noty/layouts/bottom.js',
			LIB_PATH + 'lib/noty/themes/default.js', function()
			{

			var n = noty({ text : message, layout : position, type : type, timeout : timeout, 
			
				closeCallback : 
					(onCloseCallback && typeof onCloseCallback == 'function') ? onCloseCallback : undefined,
				callback : {
					// If on close callback is defined, callback is called after noty is closed. Small hack; because noty close callback in lib is badly implemented 
					// and one callback gets called on other noty action
					onClose : function(){
						console.log(this);
						if(this.options.closeCallback && typeof this.options.closeCallback == 'function')
							{
								this.options.closeCallback ();
							}
					}
				}
			});
				
				console.log(n);

				// Play sounds for only user notifications
				if (n.options.type == 'information')
				{
					if (notification_prefs.notification_sound != 'no_sound')
						play_sound(notification_prefs.notification_sound);
				}

				// Set the handler for click
				$('.noty_bar').on('click', function()
				{

					// // warning type is used for upgrade. So when cliked on it
					// navigate to subscribe.
					// if(n.options.type == "warning")
					// {
					// // Send to upgrade page
					// Backbone.history.navigate('subscribe', {
					// trigger : true
					// });
					// }

					// information type is used for user notification. When
					// clicked
					// navigate to link.
					if (n.options.type == "information")
					{
						var link = $(this).find("a").attr("href");
						if(link)
						Backbone.history.navigate(link, { trigger : true });
					}

				});
			});
}

/** HTML5 Desktop Notification utility methods. Depends on notification template.*/
/**
 * Returns required text from notification template as html5 doesn't allow html.
 * 
 * @param {String}
 *            message - notification template.
 */
function getTextMessage(message)
{
	var name;
	var type = $(message).find('#notification-type').text();

	if ($(message).find('#notification-contact-id').text() != "")
	{
		name = $(message).find('#notification-contact-id').text();
		return name + " " + type;
	}
	
	if ($(message).find('#noty_text').text() != "")
	{
		name = $(message).find('#noty_text').text();
		return name;
	}

	name = $(message).find('#notification-deal-id').text();
	return name + " " + type;
}



/**
 * Returns converted notification-type. E.g., TAG_ADDED to New Tag
 */
function getNotificationType(notification_type)
{
	if (notification_type == "CONTACT_ADDED" || notification_type == "COMPANY_ADDED" || notification_type == "TAG_ADDED" || notification_type == "DEAL_CREATED")
		return "New " + ucfirst(notification_type.split('_')[0]);

	if (notification_type == "IS_BROWSING")
		return ucfirst(notification_type.split('_')[1]);
	return ucfirst(notification_type.split('_')[0]) + " " + ucfirst(notification_type.split('_')[1]);
}

/**
 * Returns required contact-id or deal-id from notification template. This
 * allows to return to respective page when clicked on notification.
 * 
 * @param {String}
 *            message - notification template.
 */
function getId(message)
{
	if(($(message).find('#noty_text').text() != "")){
		return $(message).find('#noty_text').text();
	}
	
	if ($(message).find('#notification-contact-id').text() != "")
	{
		return $(message).find('#notification-contact-id').attr('href');
	}
	return $(message).find('#notification-deal-id').attr('href');
}

/**
 * Returns image url from notification template to display image.
 * 
 * @param {String}
 *            message - notification template.
 *            
 * @param {String}
 *            notification_type - notification-type like COMPANY_ADDED, DEAL_ADDED etc.
 */
function getImageUrl(message, notification_type)
{
	if(notification_type == "EVENT_REMINDER"){
		
		return '/img/eventreminder.png';
	}
	
	if ($(message).find('#notification-contact-id').text() != "")
		{
		
		// if contact is company fetch company url
		if(notification_type === 'COMPANY_ADDED' || notification_type === 'COMPANY_DELETED')
			return $('span:eq(1)', message).attr('id');
		
		return $('span:eq(0)', message).attr('id');
		}

	return '/img/deal.png';
}
/** End of HTML5 Desktop Notification utility methods*/

/**
 * Plays notification sounds on clicking on play button.
 */
function notification_play_button()
{
	// Play notification sound when clicked on play icon.
	$('body').on('click', '#notification-sound-play', function(e)
	{
		e.preventDefault();

		var sound = $('#notificationsForm #notification_sound').find(":selected").val();

		// silent
		if (sound == 'no_sound')
			return;

		// plays sound
		play_sound(sound);
	});

}	

function get_contact_by_email(email,callback)
{	
	try
	{
		accessUrlUsingAjax("core/api/contacts/search/email/"+email, function(resp){
			var responseJson = resp;
			console.log("**** responseJson ****");
			console.log(responseJson);
			callback(responseJson)
		});
	} 
	catch(e) 
	{
		return null;
	}	
}/** 
* Track and milestone actions collection view
*/
var Track_And_Milestone_Events_Collection_View = Base_Collection_View.extend({
    events: {
        /** Deals actions */
        'click .add-pipeline' : 'pipelineAdd',
        'click .pipeline-edit' : 'pipelineEdit',
        'click .pipeline-delete' : 'pipelineDelete',
        'click .milestone-delete' : 'milestoneDelete',
        'click .show_milestone_field' : 'showMilesoneField',
        'click .add_milestone' : 'addMilestone',
        'keypress .add_new_milestone' : 'addMilestoneWithEnterBtn'
    },

    pipelineAdd : function(e){
        e.preventDefault();
        $('#pipelineForm input').val('');
        $('#pipelineForm input#milestones').val('New,Prospect,Proposal,Won,Lost');
        $('#pipelineForm input#won_milestone').val('Won');
        $('#pipelineForm input#lost_milestone').val('Lost');
        $('#pipelineModal').find('.save-status').html('');
    },

    pipelineEdit : function(e){
        e.preventDefault();
        var id = $(e.currentTarget).attr('id');
        var json = App_Admin_Settings.pipelineGridView.collection.get(id).toJSON();
        deserializeForm(json,$('#pipelineForm'));
    },

    pipelineDelete : function(e){
        e.preventDefault();
        var id = $(e.currentTarget).attr('id');
        var name = $(e.currentTarget).attr('data');
        $('#track-name').text(name);
        // If Yes clicked
        $('body').on('click', '#pipeline-delete-confirm', function(e) {
            e.preventDefault();
            if($(this).attr('disabled'))
                 return;
            
            $(this).attr('disabled', 'disabled');
            var that = $(this);
             // Shows message
            $save_info = $('<img src="'+updateImageS3Path("img/1-0.gif")+'" height="18px" width="18px" style="opacity:0.5;"></img>&nbsp;&nbsp;<span><small class="text-success" style="font-size:15px; display:inline-block"><i>Deleting track.</i></small></span>');
            $(this).parent('.modal-footer').find('.pipeline-delete-message').append($save_info);
            $save_info.show();
            // Export Deals.
            $.ajax({
                url: '/core/api/milestone/pipelines/'+id,
                type: 'DELETE',
                success: function() {
                    console.log('Deleted!');
                    $('#pipeline-delete-modal').modal('hide');
                    if(_agile_get_prefs("agile_deal_track") && _agile_get_prefs("agile_deal_track") == id)
                        _agile_delete_prefs("agile_deal_track");
                    if(_agile_get_prefs("deal-filters")){
                        var json = $.parseJSON(_agile_get_prefs("deal-filters"));
                        if(json.pipeline_id = id)
                            _agile_delete_prefs("deal-filters");
                    }
                    
                    App_Admin_Settings.milestones();
                    $('body').removeClass('modal-open');
                    $save_info.hide();
                    that.removeAttr('disabled');
                },
                error : function(jqXHR, status, errorThrown){
                    console.log(jqXHR);
                    $save_info.hide();
                    $('#pipeline-delete-modal').find('.pipeline-delete-message').text(jqXHR.responseText);
                    that.removeAttr('disabled');
                }
            });
        });
    },

    milestoneDelete : function(e){
        e.preventDefault();
        var $that = $(e.currentTarget);
        showAlertModal("delete_milestone", "confirm", function(){
            var formId = $that.closest('form');
            if($that.closest('tr').find('.mark-won').length > 0){
                formId.find('input[name="won_milestone"]').val('');
            } else if($that.closest('tr').find('.mark-lost').length > 0){
                formId.find('input[name="lost_milestone"]').val('');
            }
            $that.closest('tr').css("display", "none");
            fill_ordered_milestone($that.closest('form').attr('id'));
        });
    },

    /**
     * Shows input field to add new milestone.
     */
    showMilesoneField : function(e){
        e.preventDefault();
        var form = $(e.currentTarget).closest('form');
        console.log('New Milestone to - ',form.attr('id'));
        $(e.currentTarget).closest("div").css("display","none");
        form.find('.show_field').css("display","block");
        form.find(".add_new_milestone").focus();
    },

    /**
     * Adds new milestone to the sortable list.
     */
    addMilestone : function(e){
        e.preventDefault();
        var form = $(e.currentTarget).closest('form');
        var new_milestone = form.find(".add_new_milestone").val().trim();

        if(form.find(".add_new_milestone").val().trim()==""){
            $('#new_milestone_name_error_'+form.attr('id').split('milestonesForm_')[1]).show();
            return false;
        }
        if(!(/^[a-zA-Z0-9-_ ]*$/).test(form.find(".add_new_milestone").val().trim())){
            $('#new_milestone_chars_error_'+form.attr('id').split('milestonesForm_')[1]).show();
            return false;
        }
        form.find('.show_field').css("display","none");
        form.find(".show_milestone_field").closest("div").css("display","inline-block");
        
        if(!new_milestone || new_milestone.length <= 0 || (/^\s*$/).test(new_milestone))
        {
            return;
        }
        
        // To add a milestone when input is not empty
        if(new_milestone != "")
        {
            e.preventDefault();
        
            // Prevents comma (",") as an argument to the input field
            form.find(".add_new_milestone").val("");
            
            var milestone_list = form.find('tbody');
            var add_milestone = true;
            
            // Iterate over already present milestones, to check if this is a new milestone
            milestone_list.find('tr').each(function(index, elem){
                if($(elem).is( ":visible") && elem.getAttribute('data').toLowerCase() == new_milestone.toLowerCase())
                {
                    add_milestone = false; // milestone exists, don't add
                    return false;
                }
            });
            
            if(add_milestone)
            {

                var html = "<tr data='{{new_milestone}}' style='display: table-row;'><td><div class='milestone-name-block inline-block v-top text-ellipsis' style='width:80%'>";
                html += "{{new_milestone}}</div></td><td class='b-r-none'><div class='m-b-n-xs'>";
                html += "<a class='milestone-won text-l-none-hover c-p text-xs hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Set as Won Milestone'><i class='icon-like'></i></a>";
                html += "<a class='milestone-lost text-l-none-hover c-p text-xs m-l-sm hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Set as Lost Milestone'><i class='icon-dislike'></i></a>";
                html += "<a class='milestone-delete c-p m-l-sm text-l-none text-xs hover-show' style='visibility:hidden;' data-toggle='tooltip' title='Delete Milestone'><i class='icon icon-trash'></i>" +
                "</a><a class='text-l-none-hover c-p text-xs m-l-sm hover-show' style='visibility:hidden;'><i title='Drag' class='icon-move'></i></a></div></td></tr>";
                milestone_list.append(Handlebars.compile(html)({new_milestone : new_milestone}));
                //milestone_list.append("<tr data='"+new_milestone+"' style='display: table-row;'><td><div style='display:inline-block;vertical-align:top;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;width:80%'>"+new_milestone+"</div></td><td><div class='m-b-n-xs' style='display:none;'><a class='text-l-none-hover c-p'><i title='Drag' class='icon-move'></i></a><a class='milestone-delete' style='cursor: pointer;margin-left:10px; text-decoration: none;' data-toggle='modal' role='button' href='#'><i title='Delete Milestone' class='task-action icon icon-trash'></i></a></div></td></tr>");
                //milestone_list.append("<li data='" + new_milestone + "'><div><span>" + new_milestone + "</span><a class='milestone-delete right' href='#'>&times</a></div></li>");
                fill_ordered_milestone(form.attr('id'));
            }
        }
    },

    addMilestoneWithEnterBtn : function(e){
        var form = $(e.currentTarget).closest('form');
        $('#new_milestone_name_error_'+form.attr('id').split('milestonesForm_')[1]).hide();
        $('#new_milestone_existed_error_'+form.attr('id').split('milestonesForm_')[1]).hide();
        $('#new_milestone_chars_error_'+form.attr('id').split('milestonesForm_')[1]).hide();
        if(e.keyCode == 13)
        {
            var form = $(e.currentTarget).closest("form");
            form.find(".add_milestone").click();
        }
    },
});(function(milestone_util, $, undefined) {
	
	milestone_util.HARD_RELOAD_MILESTONES = false;
	
	var wonIcon = "<i title='Make Milestone Won' class='task-action icon icon-like'></i>";
	var lostIcon = "<i title='Make Milestone Won' class='task-action icon icon-dislike'></i>";
	milestone_util.wonMsg = 'Deals with this milestone are considered as Won.';
	milestone_util.lostMsg = 'Deals with this milestone are considered as Lost.';
	var milestoneMsg = "For better deal reports and sales forecasting, please set your 'Won' and 'Lost' milestones in the <i style='text-decoration:underline;'>Deal settings</i> page.";
	milestone_util.isNotyVisible = true;
	milestone_util.showMilestonePopup = function(track, callback){
		
		if(!(track.lost_milestone && track.won_milestone) || track.won_milestone.length == 0 || track.lost_milestone.length == 0){
			setDefaultLostAndWon(track,function(newTrack){
				if(!(newTrack.lost_milestone && newTrack.won_milestone)){
					milestone_util.showMilestoneNoty();
					milestone_util.isNotyVisible = true;
				}
				if(callback && typeof callback === "function")
				{
					return callback(newTrack);
				}
			});
		}
	};
	
	milestone_util.showMilestoneNoty = function(){
		
		// If route is subscribe, it will remove existing noty and returns. If there is not existy nagger noty, it will just return
		if(Current_Route.indexOf('deal') == 0)
		{
			if(Nagger_Noty)
				$.noty.closeAll();
			//return;
		}
		
		if(milestone_util.isNotyVisible)
			return;
		
		// If Noty is present already, then noty is initiated again
		if(Nagger_Noty && $("#" +Nagger_Noty).length > 0)
			return;
		
		setTimeout(function(){ 
			// Show the first one after 3 secs
			showNotyPopUp("warning", milestoneMsg, "topCenter", "none", function(){
					$.noty.close(Nagger_Noty);
					Nagger_Noty = null;
					Backbone.history.navigate('milestones', {
						 trigger : true
						 });
				});
			
			setTimeout(function(){
				$.noty.closeAll();
			}, 10000);
		
		}, 4000);
		milestone_util.isNotyVisible = true;
			
	};
	
	var setWon = function(track,callback){
		var url = 'core/api/milestone/won';
		var input = {};
		input.pipeline_id = track.id;
		input.milestone = track.won_milestone;
		$.ajax({ url : url, type : 'POST', data : input, contentType : "application/x-www-form-urlencoded", success : function(data)
			{
				if(callback)
					callback();
			}});
	};
	
	var setLost = function(track,callback){
		var url = 'core/api/milestone/lost';
		var input = {};
		input.pipeline_id = track.id;
		input.milestone = track.lost_milestone;
		$.ajax({ url : url, type : 'POST', data : input, contentType : "application/x-www-form-urlencoded", success : function(data)
			{
				if(callback)
					callback();
			}});
	};
	
	var setDefaultLostAndWon = function(track, callback){
		var milestones = track.milestones.split(',');
		$.each(milestones, function(index, val){
			if(val.toUpperCase() == 'WON' && (track.won_milestone == undefined || track.won_milestone.length==0) && val != track.lost_milestone){
				track.won_milestone = val;
				setWon(track);
			} else if(val.toUpperCase() == 'LOST' && (track.lost_milestone == undefined || track.lost_milestone.length==0) && val != track.won_milestone){
				track.lost_milestone = val;
				setLost(track);
			}
				
		});
		
		if(callback)
			callback(track);
	};
	
	milestone_util.savePipelineForm = function(formId,callback){
		var mile = serializeForm(formId);
    	console.log('---------',mile);
		// Saving that pipeline object
    	var pipeline = new Backbone.Model();
    	pipeline.url = '/core/api/milestone';
    	pipeline.save(mile, {
    		// If the milestone is changed, to show that change in edit popup if opened without reloading the app.
    		success : function(model, response) {
    			if(milestone_util.HARD_RELOAD_MILESTONES)
    				App_Admin_Settings.milestones();
    			if(callback)
    				callback(response);
    		},
			error: function(data,response){
				console.log(response);
			}
    	});
	};
	
	var setWonMilestone = function(ele){
		var wonMilestone = ele.closest('tr').attr('data');
		if(wonMilestone != undefined && wonMilestone.length > 0){
			var formId = ele.closest('form').attr('id');
			$('#'+formId).find('input[name="won_milestone"]').val(wonMilestone);
			var container = ele.closest('tr');
			if(container.find('i.mark-lost').length > 0){
				container.find('i.mark-lost').remove();
				container.find('.milestone-lost').removeClass('disabled');
				$('#'+formId).find('input[name="lost_milestone"]').val('');
			}
			milestone_util.savePipelineForm(formId,function(resp){
				$('#'+formId+' .milestone-won').removeClass('disabled');
				$('#'+formId+' i.mark-won').remove();
				container.find('.milestone-name-block').append("<i data-toogle='tooltip' title='"+milestone_util.wonMsg+"' class='icon-like mark-won m-l-sm'></i>");
				container.find('a.milestone-won').addClass('disabled');
				$('.mark-won',container).tooltip();
				App_Admin_Settings.pipelineGridView.collection.get(resp.id).set('won_milestone',resp.won_milestone, {silent:true});
			});
		}
	};
	
	var setLostMilestone = function(ele){
		var lostMilestone = ele.closest('tr').attr('data');
		if(lostMilestone != undefined && lostMilestone.length > 0){
			var formId = ele.closest('form').attr('id');
			$('#'+formId).find('input[name="lost_milestone"]').val(lostMilestone);
			var container = ele.closest('tr');
			if(container.find('i.mark-won').length > 0){
				container.find('i.mark-won').remove();
				container.find('.milestone-won').removeClass('disabled');
				$('#'+formId).find('input[name="won_milestone"]').val('');
			}
			milestone_util.savePipelineForm(formId,function(resp){
				$('#'+formId+' .milestone-lost').removeClass('disabled');
				$('#'+formId+' i.mark-lost').remove();
				container.find('.milestone-name-block').append("<i data-toogle='tooltip' title='"+milestone_util.lostMsg+"' class='icon-dislike mark-lost m-l-sm'></i>");
				container.find('a.milestone-lost').addClass('disabled');
				$('.mark-lost',container).tooltip();
				App_Admin_Settings.pipelineGridView.collection.get(resp.id).set('lost_milestone',resp.lost_milestone, {silent:true});
			});
		}
	};
	
	var initEvents = function(el){
		$('#milestone-listner').on('click', '.milestone-won', function(e){
		//$('.milestone-won').die().live('click',function(e){
			e.preventDefault();
			var pipeId = $(this).parents(".milestones-table").attr('data');
			var response = $.ajax({ type : "GET", url :'core/api/opportunity/numberOfDeals?id='+pipeId, async : false, dataType : 'json' }).responseText;
			if(response == "success"){
				showAlertModal("won_milestone_delete_error");
				return;
				
			}
			if(!$(this).hasClass('disabled'))
				setWonMilestone($(this));
		});
		
		$('#milestone-listner').on('click', '.milestone-lost', function(e){
		//$('.milestone-lost').die().live('click',function(e){
			e.preventDefault();
			var pipeId = $(this).parents(".milestones-table").attr('data');
			var response = $.ajax({ type : "GET", url :'core/api/opportunity/numberOfDeals?id='+pipeId, async : false, dataType : 'json' }).responseText;
			if(response == "success"){
				showAlertModal("lost_milestone_delete_error");
				return;
			}
			if(!$(this).hasClass('disabled'))
				setLostMilestone($(this));
		});
		
		$('.milestone-won, .milestone-lost, .mark-won, .mark-lost, .milestone-delete',el).tooltip();
		
	};
	
	milestone_util.init = function(el){
		initEvents();
	};
	
}(window.milestone_util = window.deal_bulk_actions || {}, $));/** 
 * To perform actions on deals arranged in milestones 
 * using sortable.js when it is dropped in middle or dragged over.
 */
function setup_deals_in_milestones(id){
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function() {
		$('ul.milestones').sortable({
		      connectWith : "ul",
		      cursor : "move",
		      containment : "#" + id ,
		      scroll : false,
		      // When deal is dragged to adjust the horizontal scroll
		      change : function(event, ui){
		    	  var width = $('#' + id + ' > div').width();
		    	  var scrollX = $('#' + id + ' > div').scrollLeft();
		    	  if(event.pageX > (width * 0.9))
		    		  $('#' + id + ' > div').scrollLeft(scrollX + 10);
		    	  else if(event.pageX < (width * 0.1))
		    		  $('#' + id + ' > div').scrollLeft(scrollX - 15);
		      },
		      // When deal is dropped its milestone is changed 
		      update : function(event, ui) {
		      	  $('ul.milestones').sortable("disable");
		      	  console.log(">>>>>>>>>>>>>>>>>> deals id");
		    	  console.log(ui);
		    	  console.log(ui.item[0]);
		    	  console.log(ui.item[0].id);
					var id = ui.item[0].children[0].id;
						console.log('paging...',id);
						var old_milestone = $('#'+id).attr('data');
						console.log('old...',old_milestone);
						var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : old_milestone });
						if(!dealPipelineModel)
							return;
						var dealModel = dealPipelineModel[0].get('dealCollection').get(id);
						var newMilestone = ($('#'+id).closest('ul').attr("milestone")).trim();
						console.log('new...',newMilestone);
						if(dealModel && dealModel.collection){
							App_Deals.dealModel = dealModel;
							App_Deals.newMilestone = newMilestone;
							App_Deals.old_milestone = old_milestone;
							App_Deals.lost_reason_milesone_id = id;
							var milestone_model_view = new Base_Model_View({ url : '/core/api/milestone/'+dealModel.collection.get(id).get('pipeline_id'), template : "" });
							milestone_model_view.model.fetch({
								success: function(data){
									var jsonModel = data.toJSON();
									console.log("jsonModel.lost_milestone----"+jsonModel.lost_milestone);
									console.log("newMilestone----"+newMilestone);
									console.log("old_milestone----"+old_milestone);
									if(jsonModel.lost_milestone == newMilestone && newMilestone != old_milestone){
										console.log("Success if block");
										App_Deals.deal_lost_reason_for_update = "";
										populateLostReasons($('#dealLostReasonModal'), undefined);
										$('#deal_lost_reason',$('#dealLostReasonModal')).removeClass("hidden");
										$('#dealLostReasonModal > .modal-dialog > .modal-content > .modal-footer > a#deal_lost_reason_save').text('Save');
										$('#dealLostReasonModal > .modal-dialog > .modal-content > .modal-footer > a#deal_lost_reason_save').attr('disabled',false);
										$('#'+id).attr('data',newMilestone);
									}
									if(jsonModel.won_milestone == newMilestone && newMilestone != old_milestone){
										$('#deal_won_date_' + id).find('small').text(getDateInFormatFromEpoc(new Date().getTime()/1000));
										$('#deal_won_date_' + id).removeClass("hide");
									}else if(jsonModel.won_milestone != newMilestone && newMilestone != old_milestone){
										$('#deal_won_date_' + id).addClass("hide");
									}
									hideTransitionBar();
								}
							});
						}
						if(dealModel){
							update_milestone(dealModel, id, newMilestone, old_milestone,true, "");
						}
						$('#'+id).attr('data',newMilestone);
					
		        }
	    });

	});
}

/** 
 * To change the milestone of the deal when it is 
 * dropped in other milestone columns and saves or updates deal object.
 */
function update_milestone(data, id, newMilestone, oldMilestone, updateCollectionFlag, lost_reason_id){
	
	var DealJSON = data.toJSON();
	
	console.log(DealJSON);
	DealJSON.milestone = newMilestone;
	DealJSON.lost_reason_id = lost_reason_id;
	// Replace notes object with note ids
	var notes = [];
	$.each(DealJSON.notes, function(index, note)
	{
		notes.push(note.id);
	});
	
	console.log(notes);
	
	DealJSON.notes = notes;
	if(DealJSON.note_description)
		delete DealJSON.note_description;
	
	 if(!DealJSON.close_date || DealJSON.close_date==0)
		 DealJSON.close_date = null;
	if(DealJSON && DealJSON.owner)
	{
		DealJSON.owner_id = DealJSON.owner.id;
	}
   // Saving that deal object
	var up_deal = new Backbone.Model();
	up_deal.url = '/core/api/opportunity';
	up_deal.save(DealJSON, {
		// If the milestone is changed, to show that change in edit popup if opened without reloading the app.
		success : function(model, response) {
			console.log('moved deal----',model);
			if (updateCollectionFlag) {
				update_deal_collection(model.toJSON(), id, newMilestone, oldMilestone);
			}
			$('ul.milestones').sortable("enable");
		},
		error : function(model, response) {
			$('ul.milestones').sortable("enable");
			if(response && (response.responseText == "Deal not saved properly." || response.responseText == "Deal not updated properly." || response && response.status == 403)) {
				showModalConfirmation("Deals", response.responseText, function(element){
					App_Deals.deals();	
				},
				"",
				"", "Cancel", "");
			}
		}
	});

}

/**
 * Update the deals in the collection when user drag and drops.
 * @param dealModel 
 * 			updated deal model.
 * @param id 
 * 			id of the updated deal.
 * @param newMilestone
 * 			milestone where user drop the deal.
 * @param oldMilestone 
 * 			milestone from user drag the deal.
 */
function update_deal_collection(dealModel, id, newMilestone, oldMilestone) {
	
	// Remove the deal from the old milestone collection.
	var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : oldMilestone });
	if(!dealPipelineModel)
		return;
	try{


        if(oldMilestone != newMilestone){
	    var dealchangevalue = dealModel.expected_value;
        var olddealvalue = parseFloat($('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(dealchangevalue); 
        var newdealvalue = parseFloat($('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))+parseFloat(dealchangevalue);

        if($('#'+newMilestone.replace(/ +/g, '')+'_count').text() != "1000+")
        {
        	if(parseInt($('#'+newMilestone.replace(/ +/g, '')+'_count').text())+1 > 1000)
        	{
        		$('#'+newMilestone.replace(/ +/g, '')+'_count').text(parseInt($('#'+newMilestone.replace(/ +/g, '')+'_count').text())+"+");
        	}
        	else
        	{
        		$('#'+newMilestone.replace(/ +/g, '')+'_count').text(parseInt($('#'+newMilestone.replace(/ +/g, '')+'_count').text())+1);
        	}
        }
   		if($('#'+oldMilestone.replace(/ +/g, '')+'_count').text() != "1000+")
   		{
   			$('#'+oldMilestone.replace(/ +/g, '')+'_count').text(parseInt($('#'+oldMilestone.replace(/ +/g, '')+'_count').text())-1);
   		}

   		$('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue));
		$('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue));
		/* average of new deal total */
     	var avg_old_deal_size = 0;
     	var old_deal_count = parseInt($('#'+oldMilestone.replace(/ +/g, '')+'_count').text()) ; 
     	if(old_deal_count == 0)
     		avg_old_deal_size = 0;
     	else
     		avg_old_deal_size = olddealvalue / old_deal_count;
		 /* average of new deal total */
      	var avg_new_deal_size = 0;
     	var new_deal_count = parseInt($('#'+newMilestone.replace(/ +/g, '')+'_count').text()) ; 
     	if(new_deal_count == 0)
     		avg_new_deal_size = 0;
     	else
     		avg_new_deal_size = newdealvalue / new_deal_count;

     	olddealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue) ;
        avg_old_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_old_deal_size);
        newdealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue) ;
        avg_new_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_new_deal_size);

     	var oldheading = oldMilestone.replace(/ +/g, '');
     	var newheading = newMilestone.replace(/ +/g, '');
     	var symbol = getCurrencySymbolForCharts();

        var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
        $("#"+oldheading+" .dealtitle-angular").removeAttr("data");  
        $("#"+newheading+" .dealtitle-angular").removeAttr("data"); 
       
        var dealolddata = {"dealTrack": dealTrack,"heading": oldheading ,"dealcount":olddealvalue ,"avgDeal" : avg_old_deal_size,"symbol":symbol,"dealNumber":old_deal_count};
		var dealOldDataString = JSON.stringify(dealolddata); 
		$("#"+oldheading+" .dealtitle-angular").attr("data" , dealOldDataString); 

        var dealnewdata = {"dealTrack": dealTrack,"heading": newheading ,"dealcount":newdealvalue ,"avgDeal" : avg_new_deal_size,"symbol":symbol,"dealNumber":new_deal_count};
		var dealNewDataString = JSON.stringify(dealnewdata); 
		$("#"+newheading+" .dealtitle-angular").attr("data" , dealNewDataString);
        
        }
	} catch(err){
		console.log(err);
	}
	
	dealPipelineModel[0].get('dealCollection').remove(dealPipelineModel[0].get('dealCollection').get(id));

	// Add the deal in to new milestone collection.
	dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : newMilestone });
	if(!dealPipelineModel)
		return;

	dealPipelineModel[0].get('dealCollection').add(copyCursor(dealPipelineModel, dealModel), { silent : true });
}

/**
 * Sets milestones as sortable list.
 */
function setup_milestones(el){
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function() {
		$(el).find('tbody').each(function(index){
			var id = $(this).closest('form').find('input[name="id"]').val();
			$(this).sortable({
			      containment : "#milestone-values-"+id,
			      items:'tr',
			      helper: function(e, tr){
			          var $originals = tr.children();
			          var $helper = tr.clone();
			          $helper.children().each(function(index)
			          {
			            // Set helper cell sizes to match the original sizes
			            $(this).width($originals.eq(index).width());
			            console.log('-----------'+$originals.eq(index).width());
			            $(this).css("background","#f5f5f5");
			            $(this).css("border-bottom","1px solid #ddd");
			          });
			          return $helper;
			      },
			      start: function(event, ui){
			    	  $.each(ui.item.children(),function(index,ele){
			    		  ui.helper.children().eq(index).width(ui.helper.children().eq(index).width()-$(this).width());
			    	  });
			    	  ui.helper.width(ui.helper.width());
			      },
			      sort: function(event, ui){
			    	  ui.helper.css("top",(ui.helper.offset().top+ui.item.offset().top)+"px");
			      },
			      forceHelperSize:true,
			      placeholder:'<tr><td></td></tr>',
			      forcePlaceholderSize:true,
			      handle: ".icon-move",
			      cursor: "move",
			      tolerance: "intersect",
			      
			      // When milestone is dropped its input value is changed 
			      update : function(event, ui) {
			    	  console.log($(ui.item).attr('data'));
			    	  fill_ordered_milestone($(ui.item).closest('form').attr('id'));
			        }
		    });
		});
	});
}

/**
 * To capitalize and trim the given string 
 */
function capitalize_string(str){
	str = str.trim().replace(/\b[a-z]/g, function(x) {
  		    return x.toUpperCase();
  		});
	return str;
}

/**
 * Edits the value of milestone when sorted or added new or removes milestone.
 */
function fill_ordered_milestone(formId){
   	var values;
   	$('#'+formId).find("tbody").find("tr").each(function(index, data) { 
   		if($(data).is( ":visible"))
   		{
   			// To capitalize the string
   	   		if(values != undefined)
   	   			values = values + "," + capitalize_string(($(data).attr("data")).toString());
   	   		else 
   	   			values = capitalize_string(($(data).attr("data")).toString());
   		}
	});
   	
   	// To remove the ending "," if present
   	if(values && values.charAt((values.length)-1) == ",")
   		values = values.slice(0, -1);

   	$("#"+formId).find( 'input[name="milestones"]' ).val(values); 
   	$('#admin-settings-milestones-model-list').find('form').each(function(index){
		var mile = serializeForm($(this).attr('id'));
    	console.log('---------',mile);
    	App_Admin_Settings.pipelineGridView.collection.get(mile.id).set('milestones',mile.milestones, {silent:true});
    	// Saving that pipeline object
    	var pipeline = new Backbone.Model();
    	pipeline.url = '/core/api/milestone';
    	pipeline.save(mile);
	});
}
var RELOAD_DEALS = false;
var SELECT_ALL_DEALS = false;
var DEALS_BULK_MESSAGE = 'Bulk operation is in progress. You will be notified when it is done.';

var deal_bulk_actions = {
	
	numberWithCommas : function(num) {
	    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
	},
	
	postBulkActionDealsData : function(url, form_id, callback, error_message){
		
		var input = {};
		if(!SELECT_ALL_DEALS)
			input.ids = JSON.stringify(deal_bulk_actions.getDealsBulkIds());
		input.filter = _agile_get_prefs('deal-filters');
		if(form_id){
			input.form = JSON.stringify(serializeForm(form_id));
		}
		console.log(input);
		// Ajax request to post data
		$.ajax({ url : url, type : 'POST', data : input, contentType : "application/x-www-form-urlencoded", success : function(data)
		{

			$save_info = $('<div style="display:inline-block"><small><p class="text-success"><i>Task Scheduled.</i></p></small></div>');

			if(form_id !== undefined)
			{
				var save_msg=$('#'+form_id).find('.form-actions');
			
				if(save_msg.find('.text-success'))
					save_msg.find('.text-success').parent().parent().remove(); // erase previous message.

				save_msg.append($save_info);
			}
			
			RELOAD_DEALS = true;

			if (callback && typeof (callback) === "function")
				callback(data);

			// On save back to deals list
			// Backbone.history.navigate("deals", { trigger : true });  
			//setTimeout(App_Deals.deals(),100);
			// If no_noty is given as error message, neglect noty
			if(error_message === "no_noty")
				return;
			
			if(!error_message)
				{
					showNotyPopUp('information', "Task scheduled", "top", 5000);
					return;
				}
				showNotyPopUp('information', error_message, "top", 5000);
		} });
	},
	
	bulkRestoreDeals : function(isACLCondition){
		var url = '/core/api/opportunity/bulk/restore';
		deal_bulk_actions.postBulkActionDealsData(url,undefined,function(){
			if(isACLCondition){
				$("#deal_bulk_restore_acl_modal").modal('hide');
			}else{
				$("#deal_bulk_restore_modal").modal('hide');
			}
		},DEALS_BULK_MESSAGE);
	},
	
	bulkArchiveDeals : function(isACLCondition){
		var url = '/core/api/opportunity/bulk/archive';
		deal_bulk_actions.postBulkActionDealsData(url,undefined,function(){
			if(isACLCondition){
				$("#deal_bulk_archive_acl_modal").modal('hide');
			}else{
				$("#deal_bulk_archive_modal").modal('hide');
			}
			
		},DEALS_BULK_MESSAGE);
	},
	
	bulkOwnerChangeDeals : function(){
		var owner_id = $("#owners-list-bulk", $("#deal_owner_change_modal")).val();
		var url = '/core/api/opportunity/bulk/change-owner/'+owner_id;
		deal_bulk_actions.postBulkActionDealsData(url,undefined,function(){
			$("#deal_owner_change_modal").modal('hide');
		},DEALS_BULK_MESSAGE);
	},
	
	bulkAddDealContactsToCamp : function(saveBtn){
		// Disables save button to prevent multiple click event issues
		disable_save_button(saveBtn);
		
		var workflow_id = $("#workflows-list-bulk", $("#deal_contact_add_camp_modal")).val();
		var url = '/core/api/opportunity/bulk/contacts/add-campaign/'+workflow_id;
		deal_bulk_actions.postBulkActionDealsData(url,undefined,function(){
			// Removes disabled attribute of save button
			enable_save_button(saveBtn);
			$("#deal_contact_add_camp_modal").modal('hide');
		},DEALS_BULK_MESSAGE);
	},
	
	bulkAddDealContactTags : function(saveBtn){
		
		// Returns, if the save button has disabled attribute
		if (saveBtn.attr('disabled'))
			return;

		// Disables save button to prevent multiple click event issues
		disable_save_button(saveBtn);//$(saveBtn).attr('disabled', 'disabled');
		
		var form = 'dealContactTagsBulkForm';
		
		var tags = serializeForm(form).tags;
		
		if(tags.length == 0)
		{
			$('#addBulkTags').focus();
			$('.error-tags').show().delay(3000).hide(1);
			// Removes disabled attribute of save button
			enable_save_button(saveBtn);//$(saveBtn).removeAttr('disabled');
			return false;
		}
		
		if (tags.length > 0)
		{
			var tags_valid = true;
			$.each(tags, function(index, value)
				{
					if(!isValidTag(value, false)) {
						tags_valid = false;
						return false;
					}
				});
			if(!tags_valid) {
				$('.invalid-tags').show().delay(6000).hide(1);
				enable_save_button(saveBtn);
				return false;
			}
			
			// To add input field value as tags
			var tag_input = $('#addBulkTags').val().trim();
			$('#addBulkTags').val("");
			
			if(tag_input && tag_input.length>=0 && !(/^\s*$/).test(tag_input))
			{
				var template = Handlebars.compile('<li class="tag" style="display: inline-block;" data="{{name}}">{{name}}<a class="close" id="remove_tag" tag="{{name}}">&times</a></li>');

			 	// Adds contact name to tags ul as li element
				$('#addBulkTags').closest(".control-group").find('ul.tags').append(template({name : tag_input}));
			}
		
			var url = '/core/api/opportunity/bulk/contacts/add-tag';
			deal_bulk_actions.postBulkActionDealsData(url,form,function(){
				enable_save_button(saveBtn);
				$('ul.tagsinput',$("#deal_contact_add_tag_modal")).html('');
				$("#deal_contact_add_tag_modal").modal('hide');
			},DEALS_BULK_MESSAGE);
		}
	},
	
	bulkDeleteDeals : function(isACLCondition){
		var url = '/core/api/opportunity/bulk';
		deal_bulk_actions.postBulkActionDealsData(url,undefined,function(){
			if(isACLCondition)
			{
				$("#deal_bulk_delete_acl_modal").modal('hide');
			}
			else
			{
				$("#deal_bulk_delete_modal").modal('hide');
			}
		},DEALS_BULK_MESSAGE);
	},
	
	bulkMilestoneChange : function(saveBtn){
		// Returns, if the save button has disabled attribute
		if (saveBtn.attr('disabled'))
			return;

		// Disables save button to prevent multiple click event issues
		disable_save_button(saveBtn);//$(saveBtn).attr('disabled', 'disabled');
		
		var form = 'bulk_mile_Form';
		if(!isValidForm('#'+form)){
			// Removes disabled attribute of save button
			enable_save_button(saveBtn);//$(saveBtn).removeAttr('disabled');
			return false;
		}
		var url = '/core/api/opportunity/bulk/change-milestone';
		deal_bulk_actions.postBulkActionDealsData(url,form,function(){
			enable_save_button(saveBtn);
			$("#deal_mile_change_modal").modal('hide');
		},DEALS_BULK_MESSAGE);
	},
	
	getAvailableDeals : function(callback) {

		if(App_Deals.opportunityCollectionView && App_Deals.opportunityCollectionView.collection.length > 0){
			var temp = 	App_Deals.opportunityCollectionView.collection.models[0].toJSON();
			if(temp.count && callback)
				return callback(temp.count);
		}

		var query = ''
		if (_agile_get_prefs('deal-filters'))
		{
			query = '&filters=' + encodeURIComponent(getDealFilters());
		}
		var dealCount = new Base_Model_View({ url : 'core/api/opportunity/based/count?pipeline_id=' + pipeline_id + query, template : "", isNew : true });

		dealCount.model.fetch({ success : function(data)
		{
			hideTransitionBar();
			var count = data.get("count") ? data.get("count") : 0;

			if(App_Deals.opportunityCollectionView.collection && App_Deals.opportunityCollectionView.collection.models[0])
			{
				App_Deals.opportunityCollectionView.collection.models[0].set({ "count" : count }, { silent : true })
			}

			if(count && callback){
				return callback(count);
			}
			if(!count && callback){
				return callback(App_Deals.opportunityCollectionView.collection.length);
			}
		} });

	},
	
	getDealsBulkIds : function(){
		var check_count = 0
		var id_array = [];
		$.each($('.tbody_check',$("#opportunity-listners")), function(index, element)
		{
			if ($(element).is(':checked'))
			{
				check_count++;
				id_array.push($(element).closest('tr').data().get('id'));
			}
			// return;
		});
		console.log('Number of deals selected = ',check_count);
		return id_array;
	},

	fillCampaignsList : function(el){
		$.ajax({
			url: 'core/api/workflows',
			type: 'GET',
			dataType: 'json',
			success: function(campaigns){
				var html = '';
				$.each(campaigns, function(index,camp){
					var option = '<option value="{{id}}">{{name}}</option></th>';
					if(camp.is_disabled){
						option = '<option value="{{id}}" disabled = disabled>{{name}} (Disabled)</option>';
 					} 
					html += Handlebars.compile(option)({id : camp.id, name : camp.name});
				});
				el.html(html);
				return campaigns;
			}
		});
	},

	toggle_deals_bulk_actions_dropdown : function(clicked_ele, isBulk, isCampaign)
	{
		
		if (!_agile_get_prefs("agile_deal_view")){
			return;
		}
		
		SELECT_ALL_DEALS = false;
		_BULK_DEALS = undefined;
		console.log('deal bulk actions.');
		
		deal_bulk_actions.getAvailableDeals(function(deals_cnt){
			var total_available_deals = deals_cnt;
			if ($(clicked_ele).is(':checked'))
			{
				$('body').find('#bulk-actions').css('display', 'inline-block');
				var deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals);
				if(total_available_deals > 1000)
				{
					deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals - 1)+"+";
				}

				if (isBulk && total_available_deals != App_Deals.opportunityCollectionView.collection.length)
					$('body')
							.find('#bulk-select')
							.show()
							.html(
									"Selected " + deal_bulk_actions.numberWithCommas(App_Deals.opportunityCollectionView.collection.length) + " deals. <a id='select-all-available-deals' class='text-info' href='#'>Select all " + deals_count_with_commas + " deals</a>");
			}
			else
			{
				if (isBulk)
				{
					$('#bulk-actions,#bulk-select').css('display', 'none');
					return;
				} else if($('#bulk-select').is(":visible")){
					$('#bulk-select').css('display', 'none');
				}

				var check_count = 0
				$.each($('.tbody_check'), function(index, element)
				{
					if ($(element).is(':checked'))
					{
						check_count++;
						return false;
					}
					// return;
				});

				if (check_count == 0)
				{
					$('#bulk-actions').css('display', 'none');
				}
			}
		});
	}
};

$(function(){
	$(".deal_bulk_modal").on('show.bs.modal',function(){
		var that = this;
		deal_bulk_actions.getAvailableDeals(function(deals_cnt){
			var total_available_deals = deals_cnt;
			var deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals);
			if(total_available_deals > 1000)
			{
				deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals - 1)+"+";
			}
			if(SELECT_ALL_DEALS)
				$(that).find('span.count').text(deals_count_with_commas);
			else
				$(that).find('span.count').text(deal_bulk_actions.numberWithCommas(deal_bulk_actions.getDealsBulkIds().length));
			
			RELOAD_DEALS = false;
		});
	});
	
	$(".deal_bulk_modal").on('hidden.bs.modal', function (e) {
		if(RELOAD_DEALS){
			fetchDealsList();
		}
		
		$(this).find('.help-line').remove();
	});
});/** 
* Opportunity actions collection view
*/
var Deals_Milestone_Events_Collection_View = Base_Collection_View.extend({
    events: {
    	/** Deals actions */
    	'click .deal-edit' : 'dealEdit',
        'click .deal-delete' : 'dealDelete',
        'click .deal-archive' : 'dealArchive',
        'click .deal-restore' : 'dealRestore',
        /** Deals bulk actions */
        'click #bulk_deals_owner_change' : 'bulkDealsOwnerChange',
        'click #bulk_deals_milestone_change' : 'bulkDealsMilestoneChange',
        'click #bulk_deals_add_tag_to_contacts' : 'bulkDealsAddTagToContacts',
        'click #bulk_deals_add_campaign_to_contacts' : 'bulkDealsAddCampaignToContacts',
        'click #bulk_deals_archive' : 'bulkDealsArchive',
        'click #bulk_deals_restore' : 'bulkDealsRestore',
        'click #bulk_deals_delete' : 'bulkDealsDelete',
        'click #select-all-available-deals' : 'selectAllAvailableDeals',
        'click #select-choosen-deals' : 'selectChoosenDeals'
    },

    dealEdit : function(e){
        e.preventDefault();
        var id = $(e.currentTarget).closest('.data').attr('id');
        var milestone = ($(e.currentTarget).closest('ul').attr("milestone")).trim();
        var currentDeal;

        // Get the current deal model from the collection.
        var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : milestone });
        if (!dealPipelineModel)
            return;
        currentDeal = dealPipelineModel[0].get('dealCollection').get(id).toJSON();

        if (currentDeal)
            updateDeal(currentDeal, true);
    },

    dealDelete : function(e){
        e.preventDefault();

        var id = $(e.currentTarget).closest('.data').attr('id');
        var milestone = ($(e.currentTarget).closest('ul').attr("milestone")).trim();
        var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : milestone });
        var that = e.currentTarget;
        if(dealPipelineModel)
        {
            if(!hasScope("MANAGE_DEALS"))
            {
                if(dealPipelineModel[0].get('dealCollection').get(id).get('owner').id != CURRENT_DOMAIN_USER.id)
                {
                    $('#deal_delete_privileges_error_modal').html(getTemplate("deal-delete-privileges-error-modal")).modal('show');
                    return;
                }
                else
                {
                    showAlertModal("delete", "confirm", function(){
                        deleteDeal(id, milestone, dealPipelineModel, that);
                    });
                    return;
                }
            }
            else
            {
                showAlertModal("delete", "confirm", function(){
                    deleteDeal(id, milestone, dealPipelineModel, that);
                });
                return;
            }
        }
        else
        {
            showAlertModal("delete", "confirm", function(){
                deleteDeal(id, milestone, dealPipelineModel, that);
            });
            return;
        }
        deleteDeal(id, milestone, dealPipelineModel, that);
    },

    dealArchive : function(e){
        e.preventDefault();

        var temp = {};
        temp.id = $(e.currentTarget).closest('.data').attr('id');
        temp.milestone = ($(e.currentTarget).closest('ul').attr("milestone")).trim();
        $("#deal_archive_confirm_modal").html(getTemplate('archive-deal'));
        $("#archived-deal-id", $("#deal_archive_confirm_modal")).val(temp.id);
        $("#archived-deal-milestone", $("#deal_archive_confirm_modal")).val(temp.milestone);
        $("#deal_archive_confirm_modal").modal('show');
    },

    dealRestore : function(e){
        e.preventDefault();

        var temp = {};
        temp.id = $(e.currentTarget).closest('.data').attr('id');
        temp.milestone = ($(e.currentTarget).closest('ul').attr("milestone")).trim();
        $("#deal_restore_confirm_modal").html(getTemplate('restore-deal'));
        $("#restored-deal-id", $("#deal_restore_confirm_modal")).val(temp.id);
        $("#restored-deal-milestone", $("#deal_restore_confirm_modal")).val(temp.milestone);
        $("#deal_restore_confirm_modal").modal('show');
    },

    bulkDealsOwnerChange : function(e){
        e.preventDefault();
        getTemplate('deal-owner-change-modal', {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            $("#deal_owner_change_modal").html($(template_ui)).modal("show");
            
            // Fills owner select element
            populateUsers("owners-list-bulk", $(template_ui), undefined, undefined, function(data, optionsHTML){
                console.log(optionsHTML);
                $("#deal_owner_change_modal").find("#owners-list-bulk").html(optionsHTML);
                $("#owners-list-bulk", $("#deal_owner_change_modal")).closest('div').find('.loading').hide(); 
            });

            $("#deal_owner_change_modal").off("click", "#deal-bulk-owner");
            $("#deal_owner_change_modal").on("click", "#deal-bulk-owner", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkOwnerChangeDeals();
            });

        }, '#owners-list-bulk');
    },

    bulkDealsMilestoneChange : function(e){
        e.preventDefault();
        getTemplate('deal-mile-change-modal', {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
            {
                showModalConfirmation("Bulk Update", 
                        "You may not have permission to update some of the deals selected. Proceeding with this operation will update only the deals that you are permitted to update.<br/><br/> Do you want to proceed?", 
                        function (){
                            $("#deal_mile_change_modal").html($(template_ui)).modal("show");
                        });
            }else
            {
                $("#deal_mile_change_modal").html($(template_ui)).modal("show");
            }
            
            // Fills tracks
            populateTracks($(template_ui), undefined, undefined, function(data, optionsHTML){
                console.log(optionsHTML);
                $("#deal_mile_change_modal").find("#pipeline-list-bulk").html(optionsHTML);
                $("#pipeline-list-bulk", $("#deal_mile_change_modal")).closest('div').find('.loading').hide(); 
            });

            $("#deal_mile_change_modal").off("change", "#pipeline-list-bulk");
            $("#deal_mile_change_modal").on("change", "#pipeline-list-bulk", function(e){
                e.preventDefault();
                var pipeline_id = $("#pipeline-list-bulk", $("#deal_mile_change_modal")).val();
                populateMilestones($(template_ui), undefined, pipeline_id, undefined, function(optionsHTML){
                    console.log(optionsHTML);
                    $("#deal_mile_change_modal").find("#milestone-list-bulk").html(optionsHTML);
                    $("#milestone-list-bulk", $("#deal_mile_change_modal")).closest('div').find('.loading').hide(); 
                });
            });

            $("#deal_mile_change_modal").off("click", "#deal-bulk-mile");
            $("#deal_mile_change_modal").on("click", "#deal-bulk-mile", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkMilestoneChange($(e.currentTarget));
            });

        }, '#pipeline-list-bulk');
    },

    bulkDealsAddTagToContacts : function(e){
        e.preventDefault();
        getTemplate('deal-contact-add-tag-modal', {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            $("#deal_contact_add_tag_modal").html($(template_ui)).modal("show");

            setup_tags_typeahead();

            $("#deal_contact_add_tag_modal").off("click", "#deal-contact-add-tag");
            $("#deal_contact_add_tag_modal").on("click", "#deal-contact-add-tag", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkAddDealContactTags($(e.currentTarget));
            });

        }, '');
    },

    bulkDealsAddCampaignToContacts : function(e){
        e.preventDefault();
        getTemplate('deal-contact-add-camp-modal', {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            $("#deal_contact_add_camp_modal").html($(template_ui)).modal("show");
            
            deal_bulk_actions.fillCampaignsList($('#workflows-list-bulk',$("#deal_contact_add_camp_modal")));

            $("#deal_contact_add_camp_modal").off("click", "#deal-contact-add-camp");
            $("#deal_contact_add_camp_modal").on("click", "#deal-contact-add-camp", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkAddDealContactsToCamp($(e.currentTarget));
            });

        }, '');
    },

    bulkDealsArchive : function(e){
        e.preventDefault();
        var template_key = "deal-bulk-archive-modal";
        if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
        {
            template_key = "deal-bulk-archive-acl-modal";
        }

        getTemplate(template_key, {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
            {
                $('#deal_bulk_archive_acl_modal').html($(template_ui)).modal("show");
            }else
            {
                $('#deal_bulk_archive_modal').html($(template_ui)).modal("show");
            }

            $("#deal_bulk_archive_modal").off("click", "#deal-bulk-archive");
            $("#deal_bulk_archive_modal").on("click", "#deal-bulk-archive", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkArchiveDeals(false);
            });

            $("#deal_bulk_archive_acl_modal").off("click", "#deal-bulk-archive-acl");
            $("#deal_bulk_archive_acl_modal").on("click", "#deal-bulk-archive-acl", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkArchiveDeals(true);
            });

        }, '');
    },

    bulkDealsRestore : function(e){
        e.preventDefault();
        var template_key = "deal-bulk-restore-modal";
        if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
        {
            template_key = "deal-bulk-restore-acl-modal";
        }

        getTemplate(template_key, {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
            {
                $('#deal_bulk_restore_acl_modal').html($(template_ui)).modal("show");
            }else
            {
                $('#deal_bulk_restore_modal').html($(template_ui)).modal("show");
            }

            $("#deal_bulk_restore_modal").off("click", "#deal-bulk-restore");
            $("#deal_bulk_restore_modal").on("click", "#deal-bulk-restore", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkRestoreDeals(false);
            });

            $("#deal_bulk_restore_acl_modal").off("click", "#deal-bulk-restore-acl");
            $("#deal_bulk_restore_acl_modal").on("click", "#deal-bulk-restore-acl", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkRestoreDeals(true);
            });

        }, '');
    },

    bulkDealsDelete : function(e){
        e.preventDefault();
        var template_key = "deal-bulk-delete-modal";
        if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
        {
            template_key = "deal-bulk-delete-acl-modal";
        }

        getTemplate(template_key, {}, undefined, function(template_ui){
            if(!template_ui)
                  return;

            if(!hasScope("MANAGE_DEALS") && hasScope("VIEW_DEALS"))
            {
                $('#deal_bulk_delete_acl_modal').html($(template_ui)).modal("show");
            }else
            {
                $('#deal_bulk_delete_modal').html($(template_ui)).modal("show");
            }

            $("#deal_bulk_delete_modal").off("click", "#deal-bulk-delete");
            $("#deal_bulk_delete_modal").on("click", "#deal-bulk-delete", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkDeleteDeals(false);
            });

            $("#deal_bulk_delete_acl_modal").off("click", "#deal-bulk-delete-acl");
            $("#deal_bulk_delete_acl_modal").on("click", "#deal-bulk-delete-acl", function(e){
                e.preventDefault();
                deal_bulk_actions.bulkDeleteDeals(true);
            });

        }, '');
    },

    selectAllAvailableDeals : function(e){
        e.preventDefault();
        SELECT_ALL_DEALS = true;
        deal_bulk_actions.getAvailableDeals(function(deals_cnt){
            var total_available_deals = deals_cnt;
            var deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals);
            if(total_available_deals > 1000)
            {
                deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals - 1)+"+";
            }
            $('body').find('#bulk-select').html("Selected " + deals_count_with_commas + " deals. <a id='select-choosen-deals' href='#'>Select choosen deals only.</a>");
        });
    },

    selectChoosenDeals : function(e){
        e.preventDefault();
        SELECT_ALL_DEALS = false;
        deal_bulk_actions.getAvailableDeals(function(deals_cnt){
            var total_available_deals = deals_cnt;
            var deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals);
            if(total_available_deals > 1000)
            {
                deals_count_with_commas = deal_bulk_actions.numberWithCommas(total_available_deals - 1)+"+";
            }
            $('body').find('#bulk-select').html("Selected " + deal_bulk_actions.numberWithCommas(App_Deals.opportunityCollectionView.collection.length) + " deals. <a id='select-all-available-deals' class='text-info' href='#'>Select all " + deals_count_with_commas + " deals</a>");
        });
    }
});


/** 
* Opportunity track change actions collection view
*/
var Deals_Track_Change_Events_Collection_View = Base_Collection_View.extend({
    events: {
        /** Deals actions */
        'click #opportunity-track-list-model-list a.pipeline' : 'dealTrackChange'
    },

    /**
     * If default view is selected, deals are loaded with default view and 
     * removes the view cookie set when view is selected
    */
    dealTrackChange : function(e){
        e.preventDefault();
        if(pipeline_id == $(e.currentTarget).attr('id')){
            return;
        }
        _agile_set_prefs("agile_deal_track", $(e.currentTarget).attr('id'));
        if(_agile_get_prefs('deal-filters')){
            var json = $.parseJSON(_agile_get_prefs('deal-filters'));
            var track = $(e.currentTarget).attr('id');
            if(track == '1')
                json.pipeline_id = '';
            else
                json.pipeline_id = $(e.currentTarget).attr('id');
            _agile_set_prefs('deal-filters',JSON.stringify(json));
        }
        pipeline_id = _agile_get_prefs("agile_deal_track");
        $("#milestone-view-track",$('#opportunity-listners')).html('<i class="icon-road m-r-xs"/>'+$(e.currentTarget).text());
        startGettingDeals();
    }
});

/** 
* Opportunity filter change actions collection view
*/
var Deals_Filter_Change_Events_Collection_View = Base_Collection_View.extend({
    events: {
        /** Deals actions */
        'click .deal-filter' : 'filterChange',
        'click .default_deal_filter' : 'defaultFilterChange'
    },

    filterChange : function(e){
        e.preventDefault();
        var filter_id = $(e.currentTarget).attr("id");
        if(filter_id == _agile_get_prefs("deal-filter-name")){
            return;
        }
        var deal_filter;
        var deal_filter_json = {};
        if(filter_id == 'my-deals'){
            deal_filter_json['owner_id'] = CURRENT_DOMAIN_USER.id;
            deal_filter_json['pipeline_id'] = _agile_get_prefs('agile_deal_track');
            deal_filter_json['milestone'] = "";
            deal_filter_json['archived'] = "false";
            deal_filter_json['value_filter'] = "equals";
        }else{
            deal_filter = App_Deals.deal_filters.collection.get(filter_id);
            deal_filter_json = deal_filter.toJSON();
            deal_filter_json.filterOwner = {};
        }
        _agile_set_prefs('deal-filters', JSON.stringify(deal_filter_json));
        _agile_set_prefs('deal-filter-name',filter_id);

        if (!_agile_get_prefs("agile_deal_view")){
            if(filter_id && filter_id != 'my-deals'){
                $('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
                $('#opportunity-listners').find('h3').find('small').after('<div class="inline-block tag btn btn-xs btn-primary m-l-xs"><span class="inline-block m-r-xs v-middle pull-left">'+$(e.currentTarget).text()+'</span><a class="close remove_deal_filter">×</a></div>');
            }

            if(filter_id && filter_id == 'my-deals'){
                $('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
                $('#opportunity-listners').find('h3').find('small').after('<div class="inline-block tag btn btn-xs btn-primary m-l-xs"><span class="inline-block m-r-xs v-middle pull-left">My Deals</span><a class="close remove_deal_filter">×</a></div>');
            }
            startGettingDeals();
        }else{
            fetchDealsList();
        }
    },

    defaultFilterChange : function(e){
        e.preventDefault();
        if(!_agile_get_prefs("deal-filter-name")){
            return;
        }
        _agile_delete_prefs('deal-filter-name');
        _agile_delete_prefs('deal-filters');
        setupDefaultDealFilters();
        $('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
        if (!_agile_get_prefs("agile_deal_view")){
            startGettingDeals();
        }else{
            fetchDealsList();
        }
    }
});/**
 * opportunity-filters.js is a script file that handles opportunity filters like
 * pipeline, milestones and owner select list.
 * 
 * @module Deals
 * 
 */
function setupDealFilters(callback)
{
	App_Deals.deal_filters = new Deals_Filter_Change_Events_Collection_View({url : '/core/api/deal/filters', templateKey : "deal-filter-list", 
		sort_collection : false, individual_tag_name : 'li', postRenderCallback : function(el){
			
		} 
	});
	App_Deals.deal_filters.collection.fetch({
		success : function(data){
			if(callback){
				return callback(data);
			}else{
				setNewDealFilters(data);
			}
		}
	});
}
function setNewDealFilters(data){
	if($('#deal-list-filters', $("#opportunity-listners")).find("li").length == 0)
	{
		$('#deal-list-filters', $("#opportunity-listners")).html(App_Deals.deal_filters.render(true).el);
	}

	var cookie_filter_id = _agile_get_prefs("deal-filter-name");
	
	if(cookie_filter_id && cookie_filter_id != 'my-deals' && data.get(cookie_filter_id) && data.get(cookie_filter_id).get('name')){
		$('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
		$('#opportunity-listners').find('h3').find('small').after('<div class="inline-block tag btn btn-xs btn-primary m-l-xs"><span class="inline-block m-r-xs v-middle pull-left">'+data.get(cookie_filter_id).get("name")+'</span><a class="close remove_deal_filter">×</a></div>');
		return;
	}

	if(cookie_filter_id && cookie_filter_id == 'my-deals'){
		$('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
		$('#opportunity-listners').find('h3').find('small').after('<div class="inline-block tag btn btn-xs btn-primary m-l-xs"><span class="inline-block m-r-xs v-middle pull-left">My Deals</span><a class="close remove_deal_filter">×</a></div>');
		return;
	}

	$('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
	setupDefaultDealFilters();
}

/**
 * Sets default deal filters in the cookie.
 * 
 */
function setupDefaultDealFilters(){
	var deal_filter_json = {};
	deal_filter_json['owner_id'] = "";
	deal_filter_json['pipeline_id'] = _agile_get_prefs('agile_deal_track');
	deal_filter_json['milestone'] = "";
	deal_filter_json['archived'] = "false";
	deal_filter_json['value_filter'] = "equals";
	_agile_set_prefs('deal-filters', JSON.stringify(deal_filter_json));
}

/**
 * Get the deal filters in the cookie.
 * 
 * @returns
 */
function getDealFilters()
{
	var filterJSON = {};
	if (_agile_get_prefs('deal-filter-name'))
	{
		var cookie_filter_id = _agile_get_prefs('deal-filter-name');
		if(cookie_filter_id == 'my-deals'){
			filterJSON = $.parseJSON(_agile_get_prefs('deal-filters'));
		}else{
			var filterModel = App_Deals.deal_filters.collection.get(cookie_filter_id);
			if(filterModel){
				filterJSON = filterModel.toJSON();
			}
			
			if(filterJSON){
				if((filterJSON.close_date_filter == "LAST" || filterJSON.close_date_filter == "NEXT") && filterJSON.close_date_value ){
					var condays = filterJSON.close_date_value ;
					var date = new Date();
					var eDateStart = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
					if(filterJSON.close_date_filter == "LAST"){
						filterJSON.close_date_end = eDateStart.getTime() / 1000 ;
						filterJSON.close_date_start =(eDateStart.getTime() - ((condays-1)*24 * 60 * 60 * 1000)) / 1000 ;

					}
					else if(filterJSON.close_date_filter == "NEXT"){
						filterJSON.close_date_start = eDateStart.getTime() / 1000 ;
						filterJSON.close_date_end = (eDateStart.getTime() + (condays*24 * 60 * 60 * 1000)) / 1000 ;
					}
				}
				filterJSON.filterOwner = {};
			}
		}
		// Remove the milestone field in the filters if it is milestone view.
		if (filterJSON && !_agile_get_prefs("agile_deal_view")){ 
			var json = filterJSON;
			//if (!json.pipeline_id)
			json.pipeline_id = _agile_get_prefs('agile_deal_track');
			json.milestone = '';
			return JSON.stringify(json);
		}
		if (filterJSON && _agile_get_prefs("agile_deal_view")){
			return JSON.stringify(filterJSON);
		}
		if(!filterJSON && !_agile_get_prefs("agile_deal_view")){
			var json = {};
			json.pipeline_id = _agile_get_prefs('agile_deal_track');
			return JSON.stringify(json);
		}
		return '';
	}else{
		if (!_agile_get_prefs("agile_deal_view")){
			var json = {};
			json.pipeline_id = _agile_get_prefs('agile_deal_track');
			json.value_filter = "equals";
			json.archived = "false";
			return JSON.stringify(json);
		}
		if(_agile_get_prefs("agile_deal_view")){
			var json = {};
			json.value_filter = "equals";
			json.archived = "false";
			return JSON.stringify(json);
		}
		return '';
	}
}

function percentCountAndAmount(total_count,total_amount)
{
	$('.Count_goal').text(getNumberWithCommasForCharts(total_count));
	$('.Amount_goal').text(numberWithCommasAsDouble(total_amount));
	var user_Percent;
	$('#deal-sources-table').find('td').each(function(index){
			var count=$(this).find('.count').val();
			var amount=$(this).find('.amount').val();

			if(count!="" && count!=0)
			{
				user_Percent=Math.round((parseInt(count)*100)/(parseInt(total_count)));
				$(this).find('.count_percent').html(user_Percent+'%');
			}
			else{
				if($(this).find('.count_percent').html()!="")
					$(this).find('.count_percent').html("");
			}
			if(amount!="" && amount!=0)
			{
				user_Percent=Math.round((parseInt(amount)*100)/(parseInt(total_amount)));
				$(this).find('.amount_percent').html(user_Percent+'%');
			}
			else{
				if($(this).find('.amount_percent').html()!="")
					$(this).find('.amount_percent').html("");
			}
	});

}

function numberWithCommasAsDouble(value)
{
	if (value == 0)
			return value;

		if (value)
		{
			return value.toFixed(2).toString().replace(/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
		}
}

function dealSourcesSorting()
{
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function(){
		$('.admin-settings-deal-sources-model-list').sortable({
			axis: "y" ,
			containment: '.admin-settings-deal-sources-model-list',
			scroll: false,
			items:'tr',
			helper: function(e, tr){
			    var $originals = tr.children();
			    var $helper = tr.clone();
			    $helper.children().each(function(index)
			    {
			      // Set helper cell sizes to match the original sizes
			      $(this).width($originals.eq(index).width()+50);
			      $(this).css("background","#f5f5f5");
			      $(this).css("border-bottom","1px solid #ddd");
			      $(this).css("max-width",($originals.eq(index).width()+50)+"px");
			      $(this).height($originals.eq(index).height());
			    });
			    return $helper;
			},
			sort: function(event, ui){
				ui.placeholder.height(ui.helper.height());
			},
			forceHelperSize:true,
			placeholder:'<tr></tr>',
			forcePlaceholderSize:true,
			handle: ".icon-move",
			cursor: "move",
			tolerance: "pointer"
		});
		
		/*
		 * This event is called after sorting stops to save new positions of
		 * deal sources
		 */
		$('.admin-settings-deal-sources-model-list',$('#deal-sources-table')).on("sortstop",function(event, ui){
			var sourceIds = [];
			$('#admin-settings-deal-sources-model-list > tr').each(function(column){
				sourceIds[column] = $(this).data().id;
			});
			// Saves new positions in server
			$.ajax({ type : 'POST', url : '/core/api/categories/position', data : JSON.stringify(sourceIds),
				contentType : "application/json; charset=utf-8", dataType : 'json', success : function(data){
					$.each(sourceIds, function(index, val){
						$('#dealSourcesForm_'+val).find('input[name="order"]').val(index);
					});
				} });
		});
	});
}// Before selecting proper type array from map, need to fill map with user's detail.
function startGettingDeals()
{
	console.log('------started-----', pipeline_id);
	var milestoneString = trackListView.collection.get(pipeline_id).toJSON().milestones;
	if (milestoneString.trim().length == 0)
	{
		var html = '<div class="slate" style="margin:0px;"><div class="slate-content"><div class="box-left"><img alt="Clipboard" src="'+updateImageS3Path("/img/clipboard.png")+'"></div><div class="box-right"><h3>You have no milestones defined</h3><br><a href="#milestones" class="btn"><i class="icon icon-plus-sign"></i> Add Milestones</a></div></div></div>';
		$('#new-opportunity-list-paging').html(html);
		return;
	}
	if (_agile_get_prefs('agile_deal_track'))
	{
		if (_agile_get_prefs('agile_deal_track') != pipeline_id)
			_agile_set_prefs('agile_deal_track', pipeline_id);
	}
	var currentTrack = trackListView.collection.get(pipeline_id).toJSON();
	var milestones = currentTrack.milestones.split(',');
	console.log(milestones);
	createDealsNestedCollection(pipeline_id,milestones,currentTrack);
	
}

// Creates nested collection
function createDealsNestedCollection(pipeline_id,milestones,currentTrack)
{
	console.log("In createNestedCollection");

	// Initialize nested collection
	initDealListCollection(milestones);

	// Url to call DB
	var initialURL = '/core/api/opportunity/based?pipeline_id=' + pipeline_id + '&order_by=close_date';

	if (_agile_get_prefs('deal-filters'))
	{
		initialURL += '&filters=' + encodeURIComponent(getDealFilters());
	}

	// Creates main collection with deals lists
	for ( var i in milestones)
	{
		var newDealList;

		// Add heading to task list in main collection
			var url = initialURL + "&milestone=" + milestones[i];
			newDealList = { "heading" : milestones[i], "url" : url};
			if(currentTrack.won_milestone == milestones[i])
				newDealList.won_milestone = currentTrack.won_milestone;
			else if(currentTrack.lost_milestone == milestones[i])
				newDealList.lost_milestone = currentTrack.lost_milestone;

		if (!newDealList)
			return;

		// Add task list in main collection
		DEALS_LIST_COLLECTION.collection.add(newDealList);// main-collection
	}

	// Over write append function
	DEALS_LIST_COLLECTION.appendItem = dealAppend;

	// Render it
	$('#new-opportunity-list-paging').html(DEALS_LIST_COLLECTION.render(true).el);
	initializeDealsListeners();

}

// Initialize nested collection
function initDealListCollection(milestones)
{
	// Define main collection
	DEALS_LIST_COLLECTION = new Deals_Milestone_Events_Collection_View({ restKey : "deal", templateKey : "opportunities-by-paging", individual_tag_name : 'div',
		sort_collection : false, postRenderCallback : function(el)
		{
			// Remove loding imgs
			$('.loading-img', el).remove();
			$('.loading', el).remove();

			// Adjust Height Of Task List And Scroll as per window size
			var count = milestones.length;
			if (!count)
				return;
			// Setting dynamic auto width
			var width = (100 / count);

			if (_agile_get_prefs('deal-milestone-view'))
			{
				if (_agile_get_prefs('deal-milestone-view') == "compact" && count > 8)
					width = 100 / 8;
			}
			else if (count > 5)
			{
				width = 100 / 5;
			}

			$('#opportunities-by-paging-model-list', el).find('.milestone-column').width(width + "%");
			$('.mark-won, .mark-lost',el).tooltip();
			
		} });

}

// Append sub collection and model
function dealAppend(base_model)
{
	milestonesCollectionView(base_model, this.el, function(){
		dealsFetch(base_model);
	});
	
}

// Renders outer view of milestone view
function milestonesCollectionView(base_model, ele, callback)
{
	var dealsListModel = new Base_List_View({ model : base_model, "view" : "inline", template : "opportunities-by-paging-model", tagName : 'div',
		className : "milestone-column panel m-b-none  b-n r-n panel-default", id : base_model.get("heading").replace(/ +/g, '') });

	// Render model in main collection
	var el = dealsListModel.render().el;

	// Append model from main collection in UI
	$('#opportunities-by-paging-model-list > div', ele).append(el);
	return callback();
}


/**
 * Create sub collection, ad to model in main collection, fetch tasks from DB
 * for sub collection and update UI.
 */
function dealsFetch(base_model)
{
	if (!base_model)
		return;

	var dealsTemplate = 'deals-by-paging';

	if (!_agile_get_prefs('deal-milestone-view'))
	{
		dealsTemplate = 'deals-by-paging-relax';
	}

	// Define sub collection
	var dealCollection = new Base_Collection_View({ url : base_model.get("url"), templateKey : dealsTemplate, individual_tag_name : 'li', 
		sort_collection : false, cursor : true, page_size : 20, postRenderCallback : function(el)
		{   
			$(el).find('ul li').each(function(){
				$(this).addClass("deal-color");
				$(this).addClass($(this).find("input").attr("class"));
			});
			

			$('ul.milestones', el).attr('milestone', base_model.get("heading"));

			if (!_agile_get_prefs("agile_deal_view"))
				deal_infi_scroll($('#' + base_model.get("heading").replace(/ +/g, '') + '-list-container')[0], dealCollection);


			includeTimeAgo(el);

		} });

	// Fetch task from DB for sub collection
	dealCollection.collection.fetch({ success : function(data)
	{
		// Add sub collection in model of main collection.
		base_model.set('dealCollection', dealCollection.collection);
		$('#' + base_model.get("heading").replace(/ +/g, '') + '-list-container').html(dealCollection.render(true).el)
		console.log($('#' + base_model.get("heading").replace(/ +/g, '')).find('img.loading_img').length);
		$('#' + base_model.get("heading").replace(/ +/g, '')).find('img.loading_img').hide();
		var heading =  base_model.get("heading"); 
        
        $('a.deal-notes').tooltip();
        setup_deals_in_milestones('opportunities-by-paging-model-list');
		dealsCountFetch(base_model, function(deals_count){
			if(deals_count <= 1000)
			{
				dealTotalCountForPopover(heading);
			}
		});
	} });
}

function deal_infi_scroll(element_id, targetCollection)
{
	console.log("initialize_infinite_scrollbar", element_id);

	if (element_id == undefined || element_id == null)
	{
		console.log("no elmnt");
		return;
	}
	console.log(targetCollection);
	targetCollection.infiniScroll = new Backbone.InfiniScroll(targetCollection.collection, {
		target : element_id,
		untilAttr : 'cursor',
		param : 'cursor',
		strict : false,
		pageSize : targetCollection.page_size,
		success : function(colleciton, response)
		{
			console.log('in success');

			if (!colleciton.last().get("cursor"))
			{
				this.strict = true;
				targetCollection.infiniScroll.disableFetch();
			}

			// Remove loading icon
			$(targetCollection.infiniScroll.options.target).find('.scroll-loading').remove();
			includeTimeAgo($(targetCollection.infiniScroll.options.target));
			$('a.deal-notes').tooltip();
			$(response).each(function(){
				$('#'+this.id).parent('li').addClass("deal-color");
				$('#'+this.id).parent('li').addClass(this.colorName);

			});
		},
		onFetch : function()
		{
			console.log('in fetch');

			// Add loading icon
			$(targetCollection.infiniScroll.options.target).append(
					'<div class="scroll-loading"> <img src="'+updateImageS3Path("/img/ajax-loader-cursor.gif")+'" style="margin-left: 44%;"> </div>');
		} });
}
// show deal pop-over modal

function initializeDealsListeners()
{
	$("#opportunity-listners").off('mouseenter','.milestone-column > .dealtitle-angular');
	$("#opportunity-listners").on('mouseenter','.milestone-column > .dealtitle-angular', function(){
    	var data = $(this).attr('data');
		if(data && $("#"+$(this).parent().attr("id")+"_count").text() != "1000+"){

		var originalHeading = $(this).siblings().find('.milestones').attr('milestone');
		var jsonDealData = JSON.parse(data);
		jsonDealData.heading = originalHeading;
		var that = this;
		getTemplate('deal-detail-popover', jsonDealData , undefined, function(template_ui){
 		if(!template_ui)
	    		return;
    	var ele = $(template_ui);
		$(that).popover(
					{ "rel" : "popover", "trigger" : "manual", "placement" : 'bottom', "content" : ele,
						"html" : "true"}); 
			$(that).popover('show');
			$(".popover-content").html(ele);
			$(".dealtitle-angular + .popover > .arrow").remove();
			$(".dealtitle-angular + .popover").css("top","35px");
			$(".dealtitle-angular + .popover > .popover-content" ).css("padding","0px");
			$(".dealtitle-angular + .popover ").css("border-radius","0px");
		});
		}
	});

	/**
	 * On mouse out on the row hides the popover.
	 */
	 $("#opportunity-listners").off('mouseleave','.milestone-column > .dealtitle-angular');
	 $('#opportunity-listners').on('mouseleave', '.milestone-column > .dealtitle-angular', function()
	{
		$(this).popover('hide');
		$(this).popover('destroy');
	});
}
function dealTotalCountForPopover(milestone){

console.log('------popover pipeline id-----', pipeline_id);
	if (_agile_get_prefs('agile_deal_track'))
	{
		if (_agile_get_prefs('agile_deal_track') != pipeline_id)
			_agile_set_prefs('agile_deal_track', pipeline_id);
	}
	var currentTrack = trackListView.collection.get(pipeline_id).toJSON();
	var milestones = currentTrack.milestones.split(',');
	console.log(milestones);

	// Url to call DB
	var initialURL = '/core/api/opportunity/totalDealValue?pipeline_id=' + pipeline_id + '&order_by=close_date';

	if (_agile_get_prefs('deal-filters'))
	{
		initialURL += '&filters=' + encodeURIComponent(getDealFilters());
	}

	// Creates main collection with deals lists
		var newDealList;
			var url = initialURL + "&milestone=" + milestone;
			newDealList = { "heading" : milestone, "url" : url};
			if(currentTrack.won_milestone == milestone)
				newDealList.won_milestone = currentTrack.won_milestone;
			else if(currentTrack.lost_milestone == milestone)
				newDealList.lost_milestone = currentTrack.lost_milestone;
			$.ajax({ type : 'GET', url : url, success : function(data){
                if(data){
					var json = JSON.parse(data); 
					var dealcount = json.total;
					var count = $('#'+json.milestone.replace(/ +/g, '')+'_count').text();
					var countoto = 3;
			        var heading = json.milestone.replace(/ +/g, '');
			        var i;
			        $('#'+json.milestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(dealcount));

		            var avg_deal_size = 0;
		            if(count == 0)
		            	avg_deal_size = 0;
		            else
		            	avg_deal_size = dealcount / count ; 
		            var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
		            dealcount = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(dealcount) ;
		            var symbol = getCurrencySymbolForCharts();
		            avg_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_deal_size);
					var dealdata = {"dealTrack": dealTrack ,"heading": heading ,"dealcount":dealcount ,"avgDeal" : avg_deal_size,"symbol":symbol,"dealNumber":count};
					var dealDataString = JSON.stringify(dealdata) ; 
					$("#"+heading+" .dealtitle-angular").attr("data" , dealDataString ); 	
		        }
		        else{
		        	dealTotalCountForPopover(milestone);
		        }
			},error: function() {
                 console.log('An error occurred');
      		}
			});
	

}

function dealsCountFetch(base_model, callback)
{
	if (!base_model)
		return;

	// Define sub collection
	var dealCount = new Base_Model_View({ url : base_model.get("url").replace("/based", "/based/count"), template : "", isNew : true });

	dealCount.model.fetch({ success : function(data)
	{
		var count = data.get("count") ? data.get("count") : 0;
		if(count > 1000)
		{
			$('#' + base_model.get("heading").replace(/ +/g, '') + '_count').text((count-1)+"+");
		}
		else
		{
			$('#' + base_model.get("heading").replace(/ +/g, '') + '_count').text(count);
		}
		if(callback)
		{
			return callback(count);
		}
	} });
	
}
$(function()
{
	$('body').on('click', '.deals-add', function(e)
	{
		e.preventDefault();
		show_deal();
	});

 	$('#opportunityUpdateModal, #opportunityModal').off('click', '#opportunity_archive');
	$('#opportunityUpdateModal, #opportunityModal').on('click', '#opportunity_archive', function(e)
	{
		e.preventDefault();
		$('#archived', $('#opportunityUpdateForm')).prop('checked', 'checked');
		$("#opportunityUpdateModal #opportunity_validate").trigger('click');
	});

	$('#opportunityUpdateModal, #opportunityModal').off('click', '#opportunity_unarchive');
	$('#opportunityUpdateModal, #opportunityModal').on('click', '#opportunity_unarchive', function(e)
	{
		e.preventDefault();
		$('#archived', $('#opportunityUpdateForm')).removeAttr('checked');
		$('#opportunityUpdateModal #opportunity_validate').trigger('click');
	});


	/**
	 * Validates deal and saves
	 */
	$('#opportunityUpdateModal, #opportunityModal').off('click', '#opportunity_validate');
	$('#opportunityUpdateModal, #opportunityModal').on('click', '#opportunity_validate', function(e)
	{
		e.preventDefault();

		var color = {"#ee82ee":"VIOLET","#4b0082":"INDIGO","#0000ff":"BLUE","#00ff00":"GREEN","#ffff00":"YELLOW"
		               ,"#ff6600":"ORANGE","#ff0000":"RED","#000000":"BLACK","#ffffff":"WHITE","#808080":"GREY"}; 
       
                    
		// To know updated or added deal form names
		var modal_id = $(this).closest('.opportunity-modal').attr("id");
		var form_id = $(this).closest('.opportunity-modal').find('form').attr("id");
		var colorcode = $(this).closest('.opportunity-modal').find('form').find("#color1").val();

		var json = serializeForm(form_id);
		json["custom_data"] = serialize_custom_fields(form_id);
		json["colorName"]  = color[colorcode];

		console.log(json);
		if (form_id == "opportunityForm")
			saveDeal(form_id, modal_id, this, json, false);
		else
			saveDeal(form_id, modal_id, this, json, true);
	});

	/**
	 * When mouseover on any row of opportunities list, the popover of deal is shown
	 **/
	$('#opportunity-listners').off('mouseenter', '#opportunities-model-list > tr');
	$('#opportunity-listners').on('mouseenter', '#opportunities-model-list > tr', function(e) {
        var data = $(this).find('.data').attr('data');

        var currentDeal = App_Deals.opportunityCollectionView.collection.get(data);
        var that = this;
        
        getTemplate("opportunity-detail-popover", currentDeal.toJSON(), undefined, function(template_ui){
			if(!template_ui)
				  return;
			
			var ele = $(template_ui);
	        console.log(ele);
	        console.log(that);
	        $(that).popover({
	        	"rel" : "popover",
	        	"trigger" : "hover",
	        	"placement" : 'right',
	        	"original-title" : currentDeal.toJSON().name,
	        	"content" :  ele,
	        	"html" : true,
	        	"container": 'body'
	        });
       
	        /**
	         * Checks for last 'tr' and change placement of popover to 'top' inorder
	         * to prevent scrolling on last row of list
	         **/
	       $('#opportunities-model-list > tr:last').popover({
	        	"rel" : "popover",
	        	"trigger" : "hover",
	        	"placement" : 'top',
	        	"original-title" : currentDeal.toJSON().name,
	        	"content" :  ele,
	        	"html" : true,
	        	"container": 'body'
	        });

	        $(that).popover('show');

		}, null);

     });
	
    /**
     * On mouse out on the row hides the popover.
     **/
    $('#opportunity-listners').off('mouseleave', '#opportunities-model-list > tr');
	$('#opportunity-listners').on('mouseleave', '#opportunities-model-list > tr', function(e) {
    	 $(this).popover('hide');
    });
	
    /**
     * On click on the row hides the popover.
     **/
    $('#opportunity-listners').off('click', '#opportunities-model-list > tr, .hide-popover');
	$('#opportunity-listners').on('click', '#opportunities-model-list > tr, .hide-popover', function(e) {
    	 $(this).closest('tr').popover('hide');
    });
    
   /**
    * When deal is added from contact-detail by selecting 'Add Opportunity' from actions 
    * and then close button of deal is clicked, it should navigate to contact-detail.
    **/
    $('#opportunity-listners').off('click', '#close-deal');
	$('#opportunity-listners').on('click', '#close-deal', function(e) {
    	e.preventDefault();
    	window.history.back();
    });
	
});

// Deal Listeners
function initializeDealListners(el){

	$('#opportunity-listners').off('change', '#deal-cd-condition .deal-cd-value');
	$('#opportunity-listners').on('change', '#deal-cd-condition .deal-cd-value', function(e) {
		if(this.value == "BETWEEN"){
			$('#deal-cd-rhs').parent().removeClass("hide");
			$('#deal-cd-rhs-new').parent().removeClass("hide");
			$('#cd-value').parent().addClass("hide");
		}
		else if(this.value == "ON" || (this.value == "AFTER" || this.value == "BEFORE")){
			$('#deal-cd-rhs').parent().removeClass("hide");
			$('#deal-cd-rhs-new').parent().addClass("hide");
			$('#cd-value').parent().addClass("hide");
		}else if(this.value == "LAST" || this.value == "NEXT" ){
			$('#cd-value').parent().removeClass("hide");
			$('#deal-cd-rhs-new').parent().addClass("hide");
			$('#deal-cd-rhs').parent().addClass("hide");
		}
	});

	$('#opportunity-listners').off('click', ".deals-list-view");
	$('#opportunity-listners').on('click', '.deals-list-view', function(e) {
		e.preventDefault();

		//If same view selected, not loading the page
		if(_agile_get_prefs("agile_deal_view")){
			return;
		}
		
		// Creates the cookie
		_agile_set_prefs("agile_deal_view", "list_view");
		
		// Loads the deals
		fetchDealsList();

	});
	
	
	/**
	 * Update the milestones list when the pipeline is changed in the modal.
	 */
	$('#opportunity-listners').off('change', '#pipeline');
	$('#opportunity-listners').on('change', '#pipeline', function(e)
	{
		var el = $(this).closest('form');
		if(!$(this).val())
		{
			$('#milestone',el).find('option[value!=""]').remove();
			$('#milestone',el).find('option[value=""]').text("Any");
			return;
		}
		$('#milestone', el).closest('div').find('.loading-img').show();
		// Fills milestone select element
		populateMilestones(el, undefined, $(this).val(), undefined, function(data)
		{
			$("#milestone", el).html(data);
			$("#milestone", el).closest('div').find('.loading-img').hide();
		});
		if(el && $(el).attr('id') == "dealsFilterForm")
		{
			setTimeout(function(){
				$('#milestone',el).find('option[value=""]').text("Any");
			},500);
		}
	});
	/**
	 * Update the milestones list when the pipeline is changed in the modal.
	 */
	$('#opportunity-listners').off('change', '#filter_pipeline');
	$('#opportunity-listners').on('change', '#filter_pipeline', function(e)
	{
		var el = $(this).closest('form');
		var track = $('#filter_pipeline', el).val();
		if (track)
		{
			var milestoneModel = Backbone.Model.extend({ url : '/core/api/milestone/'+track });
			var model = new milestoneModel();
			model.fetch({ 
				success : function(data){
					var json = data.toJSON();
					var milestones = json.milestones;
					milestonesList = milestones.split(",");
					$('#milestone').html('');
					if(milestonesList.length > 1)
					{
						$('#milestone', el).html('<option value="">Any</option>');
					}
					$.each(milestonesList, function(index, milestone){
						$('#milestone', el).append('<option value="'+milestone+'">'+milestone+'</option>');
					});
					$('#milestone', el).parent().find('img').hide();
					hideTransitionBar();
				} 
			});
		}
		else
		{
			$('#milestone', el).html('<option value="">Any</option>');
		}
		
	});
	/**
	 * If Pipelined View is selected, deals are loaded with pipelined view and 
	 * creates the pipelined view cookie
	 */
	$('#opportunity-listners').off('click', '.deals-pipelined-view');
	$('#opportunity-listners').on('click', '.deals-pipelined-view', function(e) {
		e.preventDefault();

		//If same view selected, not loading the page
		if(!_agile_get_prefs("agile_deal_view")){
			return;
		}

		// Erases the cookie
		_agile_delete_prefs("agile_deal_view");

		// Loads the deals
		setupDealsTracksList();

	});
	/**
	 * If Pipelined View is selected, deals are loaded with pipelined view and 
	 * creates the pipelined view cookie
	 */
	$('#opportunity-listners').off('click', '.deals-export-csv');
	$('#opportunity-listners').on('click', '.deals-export-csv', function(e) {
		e.preventDefault();

		console.log('Exporting ...');
		$("body #deals-export-csv-modal").remove();

		getTemplate('deals-export-csv-modal', {}, undefined, function(template_ui){
			if(!template_ui)

				  return;
			var deals_csv_modal = $(template_ui);
			deals_csv_modal.modal('show');			
			deals_csv_modal.on("shown.bs.modal", function(){
					// If Yes clicked
					$('#deals-export-csv-modal').on('click', '#deals-export-csv-confirm', function(e) {
							e.preventDefault();
							if($(this).attr('disabled'))
						   	     return;
							
							$(this).attr('disabled', 'disabled');
							var input = {};
							input.filter = getDealFilters();
							 // Shows message
						    $save_info = $('<img src="'+updateImageS3Path("img/1-0.gif")+'" height="18px" width="18px" style="opacity:0.5;"></img>&nbsp;&nbsp;<span><small class="text-success" style="font-size:15px; display:inline-block"><i>Email will be sent shortly.</i></small></span>');
						    $(this).parent('.modal-footer').find('.deals-export-csv-message').append($save_info);
							$save_info.show();
							// Export Deals.
							$.ajax({
								url: '/core/api/opportunity/export',
								type: 'POST',
								data : input,
								success: function() {
									console.log('Exported!');
									deals_csv_modal.modal('hide');
								}
							});
					});

			});
		}, null);
	});

	/**
	 * Deal list view edit
	 */
	$('#opportunity-listners').off('click', '#opportunities-model-list > tr > td:not(":first-child")');
	$('#opportunity-listners').on('click', '#opportunities-model-list > tr > td:not(":first-child")', function(e){
		e.preventDefault();
		$('.popover').remove();
		var currentdeal = $(this).closest('tr').data();
		if($(this).find(".contact-type-image").length > 0 || $(this).find(".company-type-image").length > 0)
		{
			return;
		}
		if (e.ctrlKey || e.metaKey) {
           window.open("#deal/" +currentdeal.id , '_blank');
           return;
        }
		Backbone.history.navigate("deal/" + currentdeal.id, { trigger : true });
		// updateDeal($(this).closest('tr').data());
	});

	$('#opportunity-listners').off('click', '.contact-type-image');
	$('#opportunity-listners').on('click', '.contact-type-image', function(e){
		e.preventDefault();
		
		Backbone.history.navigate("contact/" + $(this).attr("id"), { trigger : true });
	});

	$('#opportunity-listners').off('click', '.company-type-image');
	$('#opportunity-listners').on('click', '.company-type-image', function(e){
		e.preventDefault();
		
		Backbone.history.navigate("company/" + $(this).attr("id"), { trigger : true });
	});

	/**
	 * Shows deal popup
	 */
	$('#opportunity-listners').off('click', '.deals-add');
	$('#opportunity-listners').on('click', '.deals-add', function(e)
	{
		e.preventDefault();
		show_deal();
	});

	$('#opportunity-listners').off('change', '#pipeline_milestone');
	$('#opportunity-listners').on('change', '#pipeline_milestone', function(e)
	{
		var temp = $(this).val();
		var track = temp.substring(0, temp.indexOf('_'));
		var milestone = temp.substring(temp.indexOf('_') + 1, temp.length + 1);
		$(this).closest('form').find('#pipeline').val(track);
		$(this).closest('form').find('#milestone').val(milestone);
		console.log(track, '-----------', milestone);
	});
	
    /**
     * On click on the row hides the popover.
     **/
    $('#opportunity-listners').off('click', '#opportunities-model-list > tr, .hide-popover');
	$('#opportunity-listners').on('click', '#opportunities-model-list > tr, .hide-popover', function(e) {
    	 $(this).closest('tr').popover('hide');
    });
	
	$('#opportunity-listners').off('click', '#deal-milestone-regular');
	$('#opportunity-listners').on('click', '#deal-milestone-regular', function(e) {
    	e.preventDefault();
    	//If same view selected, not loading the page
		if(!_agile_get_prefs("agile_deal_view") && !_agile_get_prefs("deal-milestone-view")){
			return;
		}

		if(!_agile_get_prefs("agile_deal_view")){
			_agile_delete_prefs('deal-milestone-view');
			setupMilestoneViewWidth();
			return;
		}

		_agile_delete_prefs('deal-milestone-view');
    	_agile_delete_prefs("agile_deal_view");

    	setupDealsTracksList();
    });
	
	$('#opportunity-listners').off('click', '#deal-milestone-compact');
	$('#opportunity-listners').on('click', '#deal-milestone-compact', function(e) {
    	e.preventDefault();
    	//If same view selected, not loading the page
		if(!_agile_get_prefs("agile_deal_view") && _agile_get_prefs("deal-milestone-view") == "compact"){
			return;
		}

		if(!_agile_get_prefs("agile_deal_view")){
			_agile_set_prefs('deal-milestone-view','compact');
			setupMilestoneViewWidth();
			return;
		}

		_agile_set_prefs('deal-milestone-view','compact');
    	_agile_delete_prefs("agile_deal_view");

    	setupDealsTracksList();
    });
	
	$('#opportunity-listners').off('click', '#deal-milestone-fit');
	$('#opportunity-listners').on('click', '#deal-milestone-fit', function(e) {
    	e.preventDefault();
    	//If same view selected, not loading the page
		if(!_agile_get_prefs("agile_deal_view") && _agile_get_prefs("deal-milestone-view") == "fit"){
			return;
		}

		if(!_agile_get_prefs("agile_deal_view")){
			_agile_set_prefs('deal-milestone-view','fit');
			setupMilestoneViewWidth();
			return;
		}

		_agile_set_prefs('deal-milestone-view','fit');
    	_agile_delete_prefs("agile_deal_view");

    	setupDealsTracksList();
    });

    $('#opportunity-listners').off('change', '#value_filter');
	$('#opportunity-listners').on('change', '#value_filter', function(e) {
		var that = $(this);
    	that.find('option').each(function(){
    		if($(this).val()==that.val()){
    			$('.'+$(this).val(),$('#deal-value-filter')).removeClass('hide');
    		}else{
    			$('.'+$(this).val(),$('#deal-value-filter')).addClass('hide');
    			$('.'+$(this).val(),$('#deal-value-filter')).each(function(){
    				$(this).find('input').val("");
    			});
    		} 
    	});
    });

    $('#opportunity-listners').off('click', '.remove_deal_filter');
	$('#opportunity-listners').on('click', '.remove_deal_filter', function(e) {
		_agile_delete_prefs('deal-filter-name');
		_agile_delete_prefs('deal-filters');
		setupDefaultDealFilters();
		$('#opportunity-listners').find('h3').find('.remove_deal_filter').parent().remove();
        if (!_agile_get_prefs("agile_deal_view")){
            setupDealsTracksList();
        }else{
            fetchDealsList();
        }
    });

}

function initializeMilestoneListners(el){

    $('#pipelineModal').off('click', '#pipeline_validate');
	$('#pipelineModal').on('click', '#pipeline_validate', function(e) {
    	e.preventDefault();
    	
    	// Returns, if the save button has disabled attribute
    	if ($(this).attr('disabled'))
    		return;
    	var that = $(this);
    	// Disables save button to prevent multiple click event issues
    	disable_save_button($(this));//$(saveBtn).attr('disabled', 'disabled');
    	
    	if (!isValidForm('#pipelineForm')) {
    		// Removes disabled attribute of save button
    		enable_save_button(that);//$(saveBtn).removeAttr('disabled');
    		return false;
    	}
    	
    	var mile = serializeForm('pipelineForm');
    	console.log(mile);
    	// Saving that pipeline object
    	var pipeline = new Backbone.Model();
    	pipeline.url = '/core/api/milestone/pipelines';
    	pipeline.save(mile, {
    		// If the milestone is changed, to show that change in edit popup if opened without reloading the app.
    		success : function(model, response) {
    			// Removes disabled attribute of save button
    			$('#pipelineModal').modal('hide');
    			enable_save_button(that);
    			App_Admin_Settings.milestones();
    			$('body').removeClass('modal-open');
    		},
			error: function(data,response){
				console.log(response,data);
				$('#pipelineModal').find('.save-status').html('<span style="color:red;">'+response.responseText+'</span>');
				setTimeout(function(){$('#pipelineModal').find('.save-status').html('');}, 5000);
				enable_save_button(that);
			}
    	});
    	
    });
}$(function()
{


	/**
	 * To avoid showing previous errors of the modal.
	 */
	$('#opportunityModal, #opportunityUpdateModal').on('show.bs.modal', function()
	{

		// Removes alert message of error related date and time.
		$('#' + this.id).find('.alert').css('display', 'none');

		// Removes error class of input fields
		$('#' + this.id).find('.error').removeClass('error');
	});

	$('#opportunityModal, #opportunityUpdateModal').on("shown.bs.modal", function()
	{

		// Add placeholder and date picker to date custom fields
		$('.date_input').attr("placeholder","Select Date");
    
		$('.date_input').datepicker({
			format: CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY
		}).datepicker('update');

		$("input.date").each(function(index, ele){$(ele).datepicker('update');});
	})

	/**
	 * "Hide" event of note modal to remove contacts appended to related to
	 * field and validation errors
	 */
	$('#opportunityModal').on('hidden.bs.modal', function()
	{

		// Removes appended contacts from related-to field
		$("#opportunityForm").find("li").remove();

		// Removes validation error messages
		remove_validation_errors('opportunityModal');

		// Removes note from deal form
		$('#opportunityModal #forNoteForm').html("");
		// Hide + Add note link
		$(".deal-add-note", $("#opportunityModal")).show();
		// Hide the Note label.
		$(".deal-note-label").hide();

	});

	/**
	 * "Hide" event of note modal to remove contacts appended to related to
	 * field and validation errors
	 */
	$('#opportunityUpdateModal').on('hide.bs.modal', function()
	{

		// Removes appended contacts from related-to field
		$("#opportunityUpdateForm").find("li").remove();

		// Removes validation error messages
		remove_validation_errors('opportunityUpdateModal');

		// Removes note from deal form
		$('#opportunityUpdateModal #forNoteForm').html("");

		// Hide + Add note link
		$(".deal-add-note", $("#opportunityUpdateModal")).show();
		// Hide the Note label.
		$("#deal-note-label").hide();

	});

	
	/**
	 * Dash board edit
	 */
	$('body').on('click', '#dashboard-opportunities-model-list > tr', function(e){
		e.preventDefault();
		var currentdeal = $(this).closest('tr').data();
		Backbone.history.navigate("deal/" + currentdeal.id, { trigger : true });
		// updateDeal($(this).closest('tr').data());
	});
  
	$('body').on('click', '#deal-quick-archive', function(e)
					{
						e.preventDefault();

						// Returns, if the save button has disabled attribute
						if ($(this).attr('disabled'))
							return;

						// Disables save button to prevent multiple click event
						// issues
						disable_save_button($(this));

						var id = $("#archived-deal-id", $("#deal_archive_confirm_modal")).val();
						var milestone = $("#archived-deal-milestone", $("#deal_archive_confirm_modal")).val();
						var currentDeal;
						var dealPipelineModel;

						// Get the current deal model from the collection.
						if (Current_Route != 'deals')
						{
							currentDeal = App_Deal_Details.dealDetailView.model.toJSON();
						}
						else
						{
							dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : milestone });
							if (!dealPipelineModel)
								return;
							currentDeal = dealPipelineModel[0].get('dealCollection').get(id).toJSON();
						}

						currentDeal.archived = true;
						var that = $(this);

						var notes = [];
						$.each(currentDeal.notes, function(index, note)
						{
							notes.push(note.id);
						});
						currentDeal.notes = notes;
						if (currentDeal.note_description)
							delete currentDeal.note_description;

						if (!currentDeal.close_date || currentDeal.close_date == 0)
							currentDeal.close_date = null;

						if(currentDeal && currentDeal.owner)
						{
							currentDeal.owner_id = currentDeal.owner.id;
						}

						var arch_deal = new Backbone.Model();
						arch_deal.url = '/core/api/opportunity';
						arch_deal
								.save(
										currentDeal,
										{
										// If the milestone is changed, to show
										// that change in edit popup if opened
										// without reloading the app.
										success : function(model, response)
										{
											// For deal details page.
											if (Current_Route != 'deals')
											{
												$("#deal_archive_confirm_modal").modal('hide');
												App_Deal_Details.dealDetailView.model = model;
												App_Deal_Details.dealDetailView.render(true)
												$('body').removeClass("modal-open");
												Backbone.history.navigate("deal/" + model.toJSON().id, { trigger : true });
												return;
											}

											// Remove the deal from the
											// collection and remove the UI
											// element.
											if (removeArchive(response))
											{
												dealPipelineModel[0].get('dealCollection').remove(dealPipelineModel[0].get('dealCollection').get(id));
												$('#' + id).parent().remove();
											}
											else
											{
												$('#' + id + ' .deal-options').find('.deal-archive').remove();
												$('#' + id + ' .deal-options').find('.deal-edit').remove();
												$('#' + id + ' .deal-options')
														.prepend(
																'<a title="Restore" class="deal-restore" style="cursor:pointer;text-decoration:none;"> <i style="width: 0.9em!important;" class="icon-mail-reply"></i> </a>');
											}
											console.log('archived deal----', model);
											// Shows Milestones Pie
											pieMilestones();
											enable_save_button(that);
											$("#deal_archive_confirm_modal").modal('hide');
											var arch_deal_value = model.attributes.expected_value;
											var oldMilestone = model.attributes.milestone;
											try
						                    {

                        					    var olddealvalue = parseFloat($('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(arch_deal_value); 
                         			            $('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue));
                        
											 	$('#' + oldMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()) - 1);
												/* average of new deal total */
										     	var avg_deal_size = 0;
										     	var deal_count = parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()) ; 
										     	if(deal_count == 0)
										     		avg_old_deal_size = 0;
										     	else
										     		avg_old_deal_size = olddealvalue / deal_count;

										     	olddealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue) ;
										        avg_old_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_old_deal_size);
										        var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
										     	var oldheading = oldMilestone.replace(/ +/g, '');
										     	var symbol = getCurrencySymbolForCharts();
												var dealdata = {"dealTrack":dealTrack ,"heading": oldheading ,"dealcount":olddealvalue ,"avgDeal" : avg_old_deal_size,"symbol":symbol,"dealNumber":deal_count};
												var dealDataString = JSON.stringify(dealdata) ; 
												$("#"+oldheading+" .dealtitle-angular").removeAttr("data");
												$("#"+oldheading+" .dealtitle-angular").attr("data" , dealDataString ); 

											}
											catch (err)
											{
											console.log(err);
											}
											// Shows deals chart
											dealsLineChart();
											update_deal_collection(model.toJSON(), id, milestone, milestone);

										},error : function(model, err)
										{
											enable_save_button(that);
											$("#deal_archive_confirm_modal").find('span.error-status').html('<div class="inline-block"><p class="text-base" style="color:#B94A48;"><i>'+err.responseText+'</i></p></div>');
											setTimeout(function()
											{
												$("#deal_archive_confirm_modal").find('span.error-status').html('');
											}, 2000);
											console.log('-----------------', err.responseText);
										} });
					});

	$('body').on('click', '#deal-quick-restore', function(e)
					{
						e.preventDefault();

						var id = $("#restored-deal-id", $("#deal_restore_confirm_modal")).val();
						var milestone = $("#restored-deal-milestone", $("#deal_restore_confirm_modal")).val();
						var currentDeal;
						var dealPipelineModel;

						// Returns, if the save button has disabled attribute
						if ($(this).attr('disabled'))
							return;

						// Disables save button to prevent multiple click event
						// issues
						disable_save_button($(this));

						// Get the current deal model from the collection.
						if (Current_Route != 'deals')
						{
							currentDeal = App_Deal_Details.dealDetailView.model.toJSON();
						}
						else
						{
							dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : milestone });
							if (!dealPipelineModel)
								return;
							currentDeal = dealPipelineModel[0].get('dealCollection').get(id).toJSON();
						}

						currentDeal.archived = false;
						var that = $(this);

						var notes = [];
						$.each(currentDeal.notes, function(index, note)
						{
							notes.push(note.id);
						});
						currentDeal.notes = notes;
						if (currentDeal.note_description)
							delete currentDeal.note_description;

						if (!currentDeal.close_date || currentDeal.close_date == 0)
							currentDeal.close_date = null;
						if(currentDeal && currentDeal.owner)
						{
							currentDeal.owner_id = currentDeal.owner.id;
						}
						var arch_deal = new Backbone.Model();
						arch_deal.url = '/core/api/opportunity';
						arch_deal
								.save(
										currentDeal,
										{
										// If the milestone is changed, to show
										// that change in edit popup if opened
										// without reloading the app.
										success : function(model, response)
										{
											if (Current_Route != 'deals')
											{
												$("#deal_restore_confirm_modal").modal('hide');
												App_Deal_Details.dealDetailView.model = model;
												App_Deal_Details.dealDetailView.render(true)
												$('body').removeClass("modal-open");
												Backbone.history.navigate("deal/" + model.toJSON().id, { trigger : true });
												return;
											}

											// Remove the deal from the
											// collection and remove the UI
											// element.
											if (removeArchive(response))
											{
												dealPipelineModel[0].get('dealCollection').remove(dealPipelineModel[0].get('dealCollection').get(id));
												$('#' + id).parent().remove();
											}
											else
											{
												$('#' + id + ' .deal-options').find('.deal-restore').remove();
												var htmllinks = '<a title="Archive" class="deal-archive" style="cursor:pointer;text-decoration:none;"> <i style="width: 0.9em!important;" class="icon-archive"></i> </a>';
												htmllinks += '<a title="Edit" class="deal-edit" style="cursor:pointer;text-decoration:none;"> <i style="width: 0.9em!important;" class="icon-pencil"></i> </a>';
												$('#' + id + ' .deal-options').prepend(htmllinks);
											}
											console.log('archived deal----', model);
											// Shows Milestones Pie
											pieMilestones();
											enable_save_button(that);
											$("#deal_restore_confirm_modal").modal('hide');
											// Shows deals chart
											dealsLineChart();
											update_deal_collection(model.toJSON(), id, milestone, milestone);

										},error : function(model, err)
										{
											enable_save_button(that);
											$("#deal_restore_confirm_modal").find('span.error-status').html('<div class="inline-block"><p class="text-base" style="color:#B94A48;"><i>'+err.responseText+'</i></p></div>');
											setTimeout(function()
											{
												$("#deal_restore_confirm_modal").find('span.error-status').html('');
											}, 2000);
											console.log('-----------------', err.responseText);
										} });

					});

	/**
	 * Milestone view deal delete
	 */
	$('#opportunity-listners').on('click', '.deal-archive', function(e)
	{
		e.preventDefault();

		var temp = {};
		temp.id = $(this).closest('.data').attr('id');
		temp.milestone = ($(this).closest('ul').attr("milestone")).trim();
		$("#archived-deal-id", $("#deal_archive_confirm_modal")).val(temp.id);
		$("#archived-deal-milestone", $("#deal_archive_confirm_modal")).val(temp.milestone);
		$("#deal_archive_confirm_modal").modal('show');
	});

	/**
	 * Milestone view deal delete
	 */
	$('body').on('click', '.deal-restore', function(e)
	{
		e.preventDefault();

		var temp = {};
		temp.id = $(this).closest('.data').attr('id');
		temp.milestone = ($(this).closest('ul').attr("milestone")).trim();
		$("#restored-deal-id", $("#deal_restore_confirm_modal")).val(temp.id);
		$("#restored-deal-milestone", $("#deal_restore_confirm_modal")).val(temp.milestone);
		$("#deal_restore_confirm_modal").modal('show');
	});

	$('body').on('change', '#pipeline_milestone', function(e)
	{
		var temp = $(this).val();
		var track = temp.substring(0, temp.indexOf('_'));
		var milestone = temp.substring(temp.indexOf('_') + 1, temp.length + 1);
		$(this).closest('form').find('#pipeline').val(track);
		$(this).closest('form').find('#milestone').val(milestone);
		console.log(track, '-----------', milestone);
		var lost_milestone_flag = false;
		$(this).find('option').each(function(){
			if($(this).css("display") == "none" && $(this).val() == temp){
				lost_milestone_flag = true;
			}
		});
		if(lost_milestone_flag && $('#lost_reason',$(this).closest('.modal')).find('option').length>1){
			$('#lost_reason',$(this).closest('.modal')).val("");
			$('#deal_lost_reason',$(this).closest('.modal')).removeClass("hidden");
		}else{
			$('#lost_reason',$(this).closest('.modal')).val("");
			$('#deal_lost_reason',$(this).closest('.modal')).addClass("hidden");
		}
	});

	$('body').on('click', '#deal_lost_reason_save', function(e){
		e.preventDefault();
		$(this).attr('disabled',true);
		$(this).text('Saving...');
		var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : App_Deals.newMilestone });
		var dealModel = dealPipelineModel[0].get('dealCollection').get(App_Deals.lost_reason_milesone_id);
		dealModel.collection.get(App_Deals.lost_reason_milesone_id).set({ "lost_reason_id" : $(this).closest('.modal').find('form').find('#lost_reason').val() });
		update_milestone(App_Deals.dealModel, App_Deals.lost_reason_milesone_id, App_Deals.newMilestone, App_Deals.old_milestone, false, $(this).closest('.modal').find('form').find('#lost_reason').val());
		$('#dealLostReasonModal').modal('hide');
	});

});

/**
 * Show deal popup for editing
 */
function updateDeal(ele, editFromMilestoneView)
{

	// Checking Whether the edit is from milestone view,
	// if it is we are passing JSON object so no need to convert
	var value = (editFromMilestoneView ? ele : ele.toJSON());

	add_recent_view(new BaseModel(value));

	var dealForm = $("#opportunityUpdateForm");

	$("#opportunityUpdateForm")[0].reset();

	deserializeForm(value, $("#opportunityUpdateForm"));

   if($('#color1' , dealForm).is(':hidden')){
   	$('.colorPicker-picker', dealForm).remove();
    $('#color1' , dealForm).colorPicker();
	} 
    // Disable color input field
    $('.colorPicker-palette').find('input').attr('disabled', 'disabled');


 var color = {"VIOLET":"#ee82ee","INDIGO":"#4b0082","BLUE":"#0000ff","GREEN":"#00ff00","YELLOW":"#ffff00"
		               ,"ORANGE":"#ff6600","RED":"#ff0000","BLACK":"#000000","WHITE":"#ffffff","GREY":"#808080"};

    var colorcode = color[value.colorName];
      if(!colorcode)
      	  colorcode = "#808080";
      $('#color1' , dealForm).attr('value', colorcode);
      $('.colorPicker-picker', dealForm).css("background-color", colorcode);



    $("#opportunityUpdateModal").modal('show');

	// Hide archive button, if the is already archived.
	if (value.archived)
	{
		$('#opportunity_archive').hide();
		$('#opportunity_unarchive').show();
	}
	else
	{
		$('#opportunity_unarchive').hide();
		$('#opportunity_archive').show();
	}

	// Call setupTypeAhead to get contacts
	agile_type_ahead("relates_to", dealForm, contacts_typeahead);

	// Fills owner select element
	populateUsers("owners-list", dealForm, value, 'owner', function(data)
	{
		dealForm.find("#owners-list").html(data);
		if (value.owner)
		{
			$("#owners-list", dealForm).find('option[value=' + value['owner'].id + ']').attr("selected", "selected");
		}
		$("#owners-list", $("#opportunityUpdateForm")).closest('div').find('.loading-img').hide();
	});

	// Fills the pipelines list in the select menu.
	populateTrackMilestones(dealForm, undefined, value, function(pipelinesList)
	{

	});

	// Enable the datepicker
	$('#close_date', dealForm).datepicker("remove");
	$('#close_date', dealForm).datepicker({
		format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY
	});
	
	// Add notes in deal modal
	showNoteOnForm("opportunityUpdateForm", value.notes);

	add_custom_fields_to_form(value, function(data)
	{
		var el = show_custom_fields_helper(data["custom_fields"], [
			"modal"
		]);
		// if(!value["custom_data"]) value["custom_data"] = [];
		$("#custom-field-deals", dealForm).html(fill_custom_fields_values_generic($(el), value["custom_data"]));

		$('.contact_input', dealForm).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), dealForm), contacts_typeahead, undefined, 'type=PERSON');
		});

		$('.contact_input', dealForm).each(function(){
			var name = $(this).attr("name");
			for (var i = 0; i < value.custom_data.length; ++i)
			{
				if (value.custom_data[i].name == name)
				{
					var valJSON = $.parseJSON(value.custom_data[i].value);
					var referenceContactIds = "";
					$.each(valJSON, function(index, value){
						if(index != valJSON.length-1){
							referenceContactIds += value + ",";
						}else{
							referenceContactIds += value;
						}
					});
					setReferenceContacts(name, dealForm, valJSON, referenceContactIds);
				}
			}
		});

		$('.company_input', dealForm).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), dealForm), contacts_typeahead, undefined, 'type=COMPANY');
		});

		$('.company_input', dealForm).each(function(){
			var name = $(this).attr("name");
			for (var i = 0; i < value.custom_data.length; ++i)
			{
				if (value.custom_data[i].name == name)
				{
					var valJSON = $.parseJSON(value.custom_data[i].value);
					var referenceContactIds = "";
					$.each(valJSON, function(index, value){
						if(index != valJSON.length-1){
							referenceContactIds += value + ",";
						}else{
							referenceContactIds += value;
						}
					});
					setReferenceContacts(name, dealForm, valJSON, referenceContactIds);
				}
			}
		});

	}, "DEAL")

	populateLostReasons(dealForm, value);

	populateDealSources(dealForm, value);
}

/**
 * Show new deal popup
 */
function show_deal()
{
   $( "#opportunityForm" )[ 0 ].reset();
   
   var el = $("#opportunityForm");

    if($('#color1', el).is(':hidden')){

    $('.colorPicker-picker', el).remove();

    $('#color1', el).colorPicker();
	} 
    // Disable color input field
    $('.colorPicker-palette').find('input').attr('disabled', 'disabled');


    $("#opportunityModal").modal('show');

	add_custom_fields_to_form({}, function(data)
	{
		var el_custom_fields = show_custom_fields_helper(data["custom_fields"], [
			"modal"
		]);
		$("#custom-field-deals", $("#opportunityModal")).html($(el_custom_fields));

		$('.contact_input', el).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_contact_'+$(this).attr("id"), el), contacts_typeahead, undefined, 'type=PERSON');
		});

		$('.company_input', el).each(function(){
			agile_type_ahead($(this).attr("id"), $('#custom_company_'+$(this).attr("id"), el), contacts_typeahead, undefined, 'type=COMPANY');
		});

	}, "DEAL");

	// Fills owner select element
	populateUsers("owners-list", el, undefined, undefined, function(data)
	{

		$("#opportunityForm").find("#owners-list").html(data);
		$("#owners-list", $("#opportunityForm")).find('option[value=' + CURRENT_DOMAIN_USER.id + ']').attr("selected", "selected");
		$("#owners-list", $("#opportunityForm")).closest('div').find('.loading-img').hide();
	});
	// Contacts type-ahead
	agile_type_ahead("relates_to", el, contacts_typeahead);

	// Fills the pipelines list in select box.
	populateTrackMilestones(el, undefined, undefined, function(pipelinesList)
	{
		console.log(pipelinesList);
		$.each(pipelinesList, function(index, pipe)
		{
			if (pipe.isDefault)
			{
				var val = pipe.id + '_';
				if (pipe.milestones.length > 0)
				{
					val += pipe.milestones.split(',')[0];
					$('#pipeline_milestone', el).val(val);
					$('#pipeline', el).val(pipe.id);
					$('#milestone', el).val(pipe.milestones.split(',')[0]);
				}

			}
		});
	});

	populateLostReasons(el, undefined);

	populateDealSources(el, undefined);

	// Enable the datepicker
	$('#close_date', el).datepicker("remove");
	$('#close_date', el).datepicker({
		format : CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY
	});
}

function checkPipeline(pipeId)
{
	var presentPipe = 0;
	if (_agile_get_prefs("agile_deal_track"))
		presentPipe = _agile_get_prefs("agile_deal_track");

	if (presentPipe == pipeId)
		return true;
	return false;
}

function removeArchive(deal)
{
	var result = false;
	if (_agile_get_prefs('deal-filters'))
	{
		var arch = $.parseJSON(_agile_get_prefs('deal-filters')).archived;
		if (arch == 'false' && deal.archived == true)
			return true;
		else if (arch == 'true' && deal.archived == false)
			return true;
		else
			return false;

	}
	else
		return result;
}

/**
 * Updates or Saves a deal
 */
function saveDeal(formId, modalId, saveBtn, json, isUpdate)
{
	// Returns, if the save button has disabled attribute
	if ($(saveBtn).attr('disabled'))
		return;

	// Disables save button to prevent multiple click event issues
	disable_save_button($(saveBtn));// $(saveBtn).attr('disabled', 'disabled');

	if (!isValidForm('#' + formId))
	{
		var container = $('#' + formId).closest('.modal');
		var ele = $('#' + formId).find('.single-error').first();
		container.scrollTop(ele.offset().top - container.offset().top + container.scrollTop());
		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled');
		return false;
	}

	// Shows loading symbol until model get saved
	// $('#' + modalId).find('span.save-status').html(getRandomLoadingImg());
	if (json.close_date == 0)
		json.close_date = null;
	var newDeal = new Backbone.Model();
	newDeal.url = 'core/api/opportunity';
	newDeal.save(json, { success : function(data)
	{

		// Removes disabled attribute of save button
		enable_save_button($(saveBtn));// $(saveBtn).removeAttr('disabled');

		// $('#' + modalId).find('span.save-status img').remove();
		$('#' + modalId).modal('hide');

		$('#' + formId).each(function()
		{
			this.reset();
		});

		var deal = data.toJSON();

		add_recent_view(new BaseModel(deal));

		// Updates data to timeline
		if (App_Contacts.contactDetailView && Current_Route == "contact/" + App_Contacts.contactDetailView.model.get('id'))
		{

			// Add model to collection. Disabled sort while adding and called
			// sort explicitly, as sort is not working when it is called by add
			// function

			/*
			 * Verifies whether the added deal is related to the contact in
			 * contact detail view or not
			 */
			$.each(deal.contacts, function(index, contact)
			{

				if (contact.id == App_Contacts.contactDetailView.model.get('id'))
				{

					if (dealsView && dealsView.collection)
					{
						var owner = deal.owner_id;

					  	if(!owner){
					  		owner = deal.owner.id;
					  	}
					  	if(hasScope("VIEW_DEALS") || CURRENT_DOMAIN_USER.id == owner){
					  		if (deal.archived == true)
							{
								dealsView.collection.remove(deal.id);
								dealsView.collection.sort();
							}
							else if (dealsView.collection.get(deal.id))
							{
								dealsView.collection.get(deal.id).set(new BaseModel(deal));
								$("#"+deal.id).closest("li").removeAttr("class");
								$("#"+deal.id).closest("li").addClass("deal-color");
								$("#"+deal.id).closest("li").addClass(deal.colorName);
							}
							else
							{
								dealsView.collection.add(new BaseModel(deal), { sort : false });
								dealsView.collection.sort();
							}
					  	}
					  	if(!hasScope("VIEW_DEALS") && CURRENT_DOMAIN_USER.id != owner && isUpdate){
					  		dealsView.collection.remove(deal.id);
							dealsView.collection.sort();
					  	}
					}

					// Activates "Timeline" tab and its tab content in
					// contact detail view
					// activate_timeline_tab();
					add_entity_to_timeline(data);
					/*
					 * If timeline is not defined yet, initiates with the data
					 * else inserts
					 */
					return false;
				}
			});
		} else if(App_Companies.companyDetailView
				&& Current_Route == "company/"
					+ App_Companies.companyDetailView.model.get('id')){
			company_util.updateDealsList(deal,true, isUpdate);
		}
		// When deal is added or updated from Deals route
		else if (Current_Route == 'deals')
		{

			if (!_agile_get_prefs("agile_deal_view"))
			{

				var newMilestone = deal.milestone;

				if (isUpdate)
				{

					var id = deal.id;
					var oldMilestone = $('#' + id).attr('data');
					$("#"+deal.id).parent().removeClass();
					$("#"+deal.id).parent().addClass(deal.colorName);
		            $("#"+deal.id).parent().addClass("deal-color");
					// update_deal_collection(deal, id, newMilestone,
					// oldMilestone);

					var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : oldMilestone });
					if (!dealPipelineModel)
						return;
					var deal_pre_modified_value = dealPipelineModel[0].get('dealCollection').get(id).attributes.expected_value;
					dealPipelineModel[0].get('dealCollection').remove(dealPipelineModel[0].get('dealCollection').get(id));

					if (!checkPipeline(deal.pipeline_id))
					{
						console.log('removing the deal');
						$("#" + oldMilestone.replace(/ +/g, '')).find("#" + id).parent().remove();
						try
						{
							var olddealvalue = parseFloat($('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(deal_pre_modified_value);
						    $('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue));
						    if($('#' + oldMilestone.replace(/ +/g, '') + '_count').text() != "1000+")
						    {
						    	$('#' + oldMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()) - 1);
						    }
						    
						
							/* average of new deal total */
					     	var avg_deal_size = 0;
					     	var old_deal_count = parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text())  ; 
					     	if(old_deal_count == 0)
					     		avg_deal_size = 0;
					     	else
					     		avg_deal_size = olddealvalue / old_deal_count;


					     	olddealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue) ;
					        avg_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_deal_size);
					        var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
					     	var symbol = getCurrencySymbolForCharts();
					     	var heading = oldMilestone.replace(/ +/g, '');
					     	var dealdata = {"dealTrack":dealTrack ,"heading": heading ,"dealcount":olddealvalue ,"avgDeal" : avg_deal_size,"symbol":symbol,"dealNumber":old_deal_count};
							var dealDataString = JSON.stringify(dealdata) ; 
							$("#"+heading+" .dealtitle-angular").removeAttr("data");
							$("#"+heading+" .dealtitle-angular").attr("data" , dealDataString ); 
							 
						}
						catch (err)
						{
							console.log(err);
						}
					}
					else if (newMilestone != oldMilestone)
					{

						dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : newMilestone });
						if (!dealPipelineModel)
							return;

						dealPipelineModel[0].get('dealCollection').add(copyCursor(dealPipelineModel, deal));
						$("#" + oldMilestone.replace(/ +/g, '')).find("#" + id).parent().remove();

						try
						{

                            var dealchangevalue = deal.expected_value;
                            var olddealvalue = parseFloat($('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(deal_pre_modified_value); 
                            var newdealvalue = parseFloat($('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))+parseFloat(dealchangevalue);


		                    $('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue));
		                    $('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue));

		                    if($('#' + newMilestone.replace(/ +/g, '') + '_count').text() != "1000+")
		                    {
		                    	if(parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()) + 1 > 1000)
		                    	{
		                    		$('#' + newMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text())+"+");
		                    	}
		                    	else
		                    	{
		                    		$('#' + newMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()) + 1);
		                    	}
		                    }
						    
						    if($('#' + oldMilestone.replace(/ +/g, '') + '_count').text() != "1000+")
						    {
						    	$('#' + oldMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()) - 1);
						    }
						    
							/* average of new deal total */
					     	var avg_old_deal_size = 0;
					     	var old_deal_count = parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()) ; 
					     	if(old_deal_count == 0)
					     		avg_old_deal_size = 0;
					     	else
					     		avg_old_deal_size = olddealvalue / old_deal_count;
							 /* average of new deal total */
					      	var avg_new_deal_size = 0;
					     	var new_deal_count = parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()); 
					     	if(new_deal_count == 0)
					     		avg_new_deal_size = 0;
					     	else
					     		avg_new_deal_size = newdealvalue / new_deal_count;

					     	olddealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(olddealvalue) ;
					        avg_old_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_old_deal_size);
					        newdealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue) ;
					        avg_new_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_new_deal_size);

					     	var oldheading = oldMilestone.replace(/ +/g, '');
					     	var newheading = newMilestone.replace(/ +/g, '');
					        

					        var symbol = getCurrencySymbolForCharts();

       						var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
					        $("#"+oldheading+" .dealtitle-angular").removeAttr("data");  
					        $("#"+newheading+" .dealtitle-angular").removeAttr("data"); 
					       
					        var dealolddata = {"dealTrack":dealTrack ,"heading": oldheading ,"dealcount":olddealvalue ,"avgDeal" : avg_old_deal_size,"symbol":symbol,"dealNumber":old_deal_count};
							var dealOldDataString = JSON.stringify(dealolddata); 
							$("#"+oldheading+" .dealtitle-angular").attr("data" , dealOldDataString); 

					        var dealnewdata = {"dealTrack":dealTrack ,"heading": newheading ,"dealcount":newdealvalue ,"avgDeal" : avg_new_deal_size,"symbol":symbol,"dealNumber":new_deal_count};
							var dealNewDataString = JSON.stringify(dealnewdata); 
							$("#"+newheading+" .dealtitle-angular").attr("data" , dealNewDataString);

						}
						catch (err)
						{
							console.log(err);
						}
					}
					else
					{
						dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : newMilestone });
						if (!dealPipelineModel)
							return;

						dealPipelineModel[0].get('dealCollection').add(copyCursor(dealPipelineModel, deal), { silent : true });
						console.log('Updating html - ', deal);
						var dealsTemplate = 'deals-by-paging-model';

						if (!_agile_get_prefs('deal-milestone-view'))
						{
							dealsTemplate = 'deals-by-paging-relax-model';
						}
						$("#" + newMilestone.replace(/ +/g, '')).find("#" + id).parent().html(getTemplate(dealsTemplate, deal));
						try
						{

                           var dealchangevalue = deal.expected_value;
                           var prenewdealvalue = parseFloat($('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(deal_pre_modified_value); 
                           var newdealvalue = parseFloat(prenewdealvalue)+parseFloat(dealchangevalue);


		                  $('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue));
		                  
						    /* average of new deal total */
					      	var avg_new_deal_size = 0;
					     	var new_deal_count = parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()); 
					     	if(new_deal_count == 0)
					     		avg_new_deal_size = 0;
					     	else
					     		avg_new_deal_size = newdealvalue / new_deal_count;

					     	newdealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue) ;
					        avg_new_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_new_deal_size);

					     	var newheading = newMilestone.replace(/ +/g, '');
					        var symbol = getCurrencySymbolForCharts();
				            var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
				            var dealdata = {"dealTrack":dealTrack ,"heading": newheading ,"dealcount":newdealvalue ,"avgDeal" : avg_new_deal_size,"symbol":symbol,"dealNumber":new_deal_count};
							var dealDataString = JSON.stringify(dealdata) ; 
							$("#"+newheading+" .dealtitle-angular").removeAttr("data"); 
							$("#"+newheading+" .dealtitle-angular").attr("data" , dealDataString ); 
						
						}
						catch (err)
						{
							console.log(err);
						}
					}

					if (removeArchive(deal))
					{

						console.log('removing the deal when archived');
						$("#" + oldMilestone.replace(/ +/g, '')).find("#" + id).parent().remove();
						try
						{
							if($('#' + oldMilestone.replace(/ +/g, '') + '_count').text() != "1000+")
							{
								$('#' + oldMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()) - 1);
							}

	                        var dealchangevalue = deal.expected_value;
	                        var newdealvalue = parseFloat($('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(dealchangevalue); 
	                        $('#'+oldMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue));
		                  
						    /* average of new deal total */
					      	var avg_new_deal_size = 0;
					     	var new_deal_count = parseInt($('#' + oldMilestone.replace(/ +/g, '') + '_count').text()); 
					     	if(new_deal_count == 0)
					     		avg_new_deal_size = 0;
					     	else
					     		avg_new_deal_size = newdealvalue / new_deal_count;

					     	newdealvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealvalue) ;
					        avg_new_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_new_deal_size);

					     	var newheading = oldMilestone.replace(/ +/g, '');
					        var symbol = getCurrencySymbolForCharts();
				            var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
				            var dealdata = {"dealTrack":dealTrack ,"heading": newheading ,"dealcount":newdealvalue ,"avgDeal" : avg_new_deal_size,"symbol":symbol,"dealNumber":new_deal_count};
							var dealDataString = JSON.stringify(dealdata) ; 
							$("#"+newheading+" .dealtitle-angular").removeAttr("data"); 
							$("#"+newheading+" .dealtitle-angular").attr("data" , dealDataString ); 
						
						}
						
						catch (err)
						{
							console.log(err);
						}
					}

				}
				else if (checkPipeline(deal.pipeline_id))
				{
					var owner = deal.owner_id;

				  	if(!owner){
				  		owner = deal.owner.id;
				  	}
				  	if(!hasScope("VIEW_DEALS") && CURRENT_DOMAIN_USER.id != owner){
				  		return;
				  	}
					var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : newMilestone });
					if (!dealPipelineModel)
						return;
					var filterJSON = $.parseJSON(_agile_get_prefs('deal-filters'));
					console.log(deal.owner.id.toString() != filterJSON.owner_id, deal.owner.id.toString(), filterJSON.owner_id);
					if (filterJSON.owner_id.length > 0 && deal.owner.id.toString() != filterJSON.owner_id)
						return;
					console.log(filterJSON.archived != 'all' && deal.archived != filterJSON.archived, deal.archived);
					if (filterJSON.archived)
					{
						console.log(filterJSON.archived);
						if (filterJSON.archived != 'all' && deal.archived.toString() != filterJSON.archived)
							return;
					}

					dealPipelineModel[0].get('dealCollection').add(copyCursor(dealPipelineModel, deal));
					try
					{    
						var newdealvairable = deal.expected_value;

                        var newdealeditvalue = parseFloat($('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))+parseFloat(newdealvairable);
                        
                        $('#'+newMilestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealeditvalue));

                        if($('#' + newMilestone.replace(/ +/g, '') + '_count').text() != "1000+")
                        {
                        	if(parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()) + 1 > 1000)
                        	{
                        		$('#' + newMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text())+"+");
                        	}
                        	else
                        	{
                        		$('#' + newMilestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()) + 1);
                        	}
                        }
					    /* average of new deal total */
				      	var avg_new_deal_size = 0;
				     	var new_deal_count = parseInt($('#' + newMilestone.replace(/ +/g, '') + '_count').text()) ;  
				     	if(new_deal_count == 0)
				     		avg_new_deal_size = 0;
				     	else
				     		avg_new_deal_size = newdealeditvalue / new_deal_count;

                        
				        newdealeditvalue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(newdealeditvalue) ;
				        avg_new_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_new_deal_size);

				     	var newheading = newMilestone.replace(/ +/g, '');
				        $("#"+newheading+" .dealtitle-angular").removeAttr("data");  
				        var symbol = getCurrencySymbolForCharts();
				        var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();
			            var dealdata = {"dealTrack":dealTrack ,"heading": newheading ,"dealcount":newdealeditvalue ,"avgDeal" : avg_new_deal_size,"symbol":symbol,"dealNumber":new_deal_count};
						var dealDataString = JSON.stringify(dealdata) ; 
						$("#"+newheading+" .dealtitle-angular").attr("data" , dealDataString ); 

				        

				        }
					catch (err)
					{
						console.log(err);
					}
				}
				includeTimeAgo($("#" + newMilestone.replace(/ +/g, '')));
				$('a.deal-notes').tooltip();
				$("#"+deal.id).parent().addClass(deal.colorName);
		        $("#"+deal.id).parent().addClass("deal-color");
			}
			else
			{
				var owner = deal.owner_id;

			  	if(!owner){
			  		owner = deal.owner.id;
			  	}
			  	if(!hasScope("VIEW_DEALS") && CURRENT_DOMAIN_USER.id != owner){
			  		return;
			  	}
			  	
				if (isUpdate)
					App_Deals.opportunityCollectionView.collection.remove(json);
				if (App_Deals.opportunityCollectionView.collection.length > 0)
					data.attributes.cursor = App_Deals.opportunityCollectionView.collection.last().toJSON().cursor;
				App_Deals.opportunityCollectionView.collection.add(data);
				App_Deals.opportunityCollectionView.render(true);
			}

		}
		else if (Current_Route == undefined || Current_Route == 'dashboard')
		{
			if (App_Portlets.currentPosition && App_Portlets.pendingDeals && App_Portlets.pendingDeals[parseInt(App_Portlets.currentPosition)])
			{
				if (isUpdate)
					App_Portlets.pendingDeals[parseInt(App_Portlets.currentPosition)].collection.remove(json);

				// Updates task list view
				if (json.milestone != "Won" && json.milestone != "Lost")
					App_Portlets.pendingDeals[parseInt(App_Portlets.currentPosition)].collection.add(data);

				App_Portlets.pendingDeals[parseInt(App_Portlets.currentPosition)].render(true);
			}
			if (App_Portlets.currentPosition && App_Portlets.dealsWon && App_Portlets.dealsWon[parseInt(App_Portlets.currentPosition)])
			{
				if (isUpdate)
					App_Portlets.dealsWon[parseInt(App_Portlets.currentPosition)].collection.remove(json);

				// Updates task list view
				App_Portlets.dealsWon[parseInt(App_Portlets.currentPosition)].collection.add(data);

				App_Portlets.dealsWon[parseInt(App_Portlets.currentPosition)].render(true);
			}

		}
		else
		{
			App_Deal_Details.dealDetailView.model = data;
			App_Deal_Details.dealDetailView.render(true)
			Backbone.history.navigate("deal/" + data.toJSON().id, { trigger : true });
			/*
			 * App_Deals.navigate("deals", { trigger : true });
			 */

		}
	}, error : function(model, err)
	{
		enable_save_button($(saveBtn));
		$('#' + modalId).find('span.error-status').html("<i style='color:#B94A48;'>"+err.responseText+"</i>");
		setTimeout(function()
		{
			$('#' + modalId).find('span.error-status').html('');
		}, 2000);
		console.log('-----------------', err.responseText);
	} });
}/**
 * opportunity.js is a script file that handles opportunity pop-over,
 * milestones and owner select list.
 * 
 * @module Deals
 * 
 **/

/**
 * Populate users in options of owner input field drop-down.
 * When new deal is created,owner select is filled with owners list.When
 * deal is need to edit,the owner select field is filled with previous option.
 *  
 * @param id - Id of select element of Owner
 * @param el - el references the DOM object created in the browser.
 * @param value - Deal object
 * @param key - key name in the value.It is passed during declaration
 **/
function populateUsers(id, el ,value, key, callback) {
		
	// Users set id of agile user to save agileuser key in opportunities
	var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
	
	 /**
      * Fills owner select with existing Users.
      * 
      * @param id - Id of select element of Owner
      * @param /core/api/users - Url to get users
      * @param 'domainUser' - parse key
      * @param function - callback function
      * @param optionsTemplate- to fill options with users
      **/
	fillSelect(id,'/core/api/users/partial', 'domainUser', function fillOwner() {
		
		if(value)
		{
			// If domain user is deleted owner is undefined
			if(value[key])
				// While deserialize set agile user id from user prefs, to save agile user key in opportunity 
				$('#' + id, el).find('option[value='+ value[key].id +']').attr("selected", "selected");
		}
		else
			$('#' + id, el).find('option[value='+ CURRENT_DOMAIN_USER.id +']').attr("selected", "selected");
		// If callback is present, it is called to deserialize the select field
		if (callback && typeof (callback) === "function") {
			// execute the callback, passing parameters as necessary
			callback($('#' + id).html());
		}
	}, optionsTemplate); 
	
	
}

/**
 * Populate Pipelines in options of pipeline input field drop-down.
 * When new deal is created,pipeline select is filled with pipelines list.When
 * deal is need to edit,the pipeline select field is filled with previous option.
 * 
 * @param el - el references the DOM object created in the browser.
 * @param dealDetails - dealDetails value
 * @param value - Deal Object
 **/
function populateTrackMilestones(el, dealsDetails, value, callback, defaultSelectOption, id){
var tracks = new Base_Collection_View({url : '/core/api/milestone/pipelines'});
	
	// If id undefined
	if(!id)
		id = 'pipeline_milestone';

	tracks.collection.fetch({
		success: function(data){
			var jsonModel = data.toJSON();
			var html = '<option value="">Select...</option>';
			console.log(jsonModel);
			
			// If there is only one pipeline, select the option by default and hide the field.
			if(jsonModel.length==1){
				var mile = jsonModel[0];
				$.each(mile.milestones.split(","), function(index,milestone){
					var json = {id : mile.id, milestone : milestone};
					if(value && mile.id == value.pipeline_id && milestone == value.milestone)
						html += Handlebars.compile('<option value="{{id}}_{{milestone}}" selected="selected">{{milestone}}</option>')(json);
					else
						html += Handlebars.compile('<option value="{{id}}_{{milestone}}">{{milestone}}</option>')(json);
				});
				if(mile.lost_milestone){
					html += Handlebars.compile('<option value="{{id}}_{{lost_milestone}}" style="display:none;">{{lost_milestone}}</option>')({id : mile.id, lost_milestone : mile.lost_milestone});
				}
				$('#' + id, el).closest('.control-group').find('label').html('Milestone<span class="field_req">*</span>');
			}
			else {
				$.each(jsonModel,function(index,mile){
					console.log(mile.milestones,value);
					var array = [];
					html+='<optgroup label="'+mile.name+'">';
					$.each(mile.milestones.split(","), function(index,milestone){
						array.push($.trim(this));
						var json = {id : mile.id, milestone : milestone, name : mile.name};
						if(value && mile.id == value.pipeline_id && milestone == value.milestone)
							html += Handlebars.compile('<option value="{{id}}_{{milestone}}" selected="selected">{{name}} - {{milestone}}</option>')(json);
						else
							html += Handlebars.compile('<option value="{{id}}_{{milestone}}">{{name}} - {{milestone}}</option>')(json);
					});
					if(mile.lost_milestone){
						html += Handlebars.compile('<option value="{{id}}_{{lost_milestone}}" style="display:none;">{{name}} - {{milestone}}</option>')({id : mile.id, lost_milestone : mile.lost_milestone, name : mile.name});
					}
					html+='</optgroup>';
				});
				$('#' + id, el).closest('.control-group').find('label').html('Track & Milestone<span class="field_req">*</span>');
			}
			
			$('#' + id, el).html(html);
			console.log('adding');
			$('#' + id, el).closest('div').find('.loading-img').hide();

			// Hide loading bar
			hideTransitionBar();
			
			/* Hide the Tracks select box when there is only one pipeline.
			if(jsonModel.length==1){
				$('#pipeline',el).closest('div.control-group').hide();
				$('#milestone',el).closest('div.control-group').css("margin-left","0px");
				$('#dealsFilterForm #pipeline',el).closest('div.control-group').show();
			}*/
			
			if (callback && typeof (callback) === "function") {
				// execute the callback, passing parameters as necessary
				callback(jsonModel);
			}
		}
	}); 
}

/**
 * Populate Pipelines in options of pipeline input field drop-down.
 * When new deal is created,pipeline select is filled with pipelines list.When
 * deal is need to edit,the pipeline select field is filled with previous option.
 * 
 * @param el - el references the DOM object created in the browser.
 * @param dealDetails - dealDetails value
 * @param value - Deal Object
 **/
function populateTracks(el, dealsDetails, value, callback, defaultSelectOption){
var tracks = new Base_Collection_View({url : '/core/api/milestone/pipelines'});
	
	tracks.collection.fetch({
		success: function(data){
			hideTransitionBar();
			var jsonModel = data.toJSON();
			var html = '<option value="">Select..</option>';
			console.log(jsonModel);
			
			// If there is only one pipeline, select the option by default and hide the field.
			if(jsonModel.length==1){
				html += Handlebars.compile('<option value="{{id}}" selected="selected">{{name}}</option>')({id : jsonModel[0].id, name : jsonModel[0].name});
				milestone_util.showMilestonePopup(jsonModel[0]);
			}
			else {
				milestone_util.isNotyVisible = false;
				$.each(jsonModel,function(index,mile){
					var json = {id : mile.id, name : mile.name};
					if(!mile.name)
						mile.name = 'Default';
					if(value && mile.id == value.pipeline_id)
						html += Handlebars.compile('<option value="{{id}}" selected="selected">{{name}}</option>')(json);
					else
						html += Handlebars.compile('<option value="{{id}}">{{name}}</option>')(json);
					milestone_util.showMilestonePopup(mile);
				});
			}
			$('#pipeline',el).html(html);
			console.log('adding');
			$('#pipeline',el).closest('div').find('.loading-img').hide();
			
			// Hide the Tracks select box when there is only one pipeline.
			/*if(jsonModel.length==1){
				$('#pipeline',el).closest('div.control-group').hide();
				$('#milestone',el).closest('div.control-group').css("margin-left","0px");
				$('#dealsFilterForm #pipeline',el).closest('div.control-group').show();
			}*/
			
			if (callback && typeof (callback) === "function") {
				// execute the callback, passing parameters as necessary
				callback(jsonModel, html);
			}
		}
	}); 
}

/**
 * Populate milestones in options of milestone input field drop-down.
 * When new deal is created,milestone select is filled with milestones list.When
 * deal is need to edit,the milestone select field is filled with previous option.
 * 
 * @param el - el references the DOM object created in the browser.
 * @param dealDetails - dealDetails value
 * @param piepline - pipeline value, to which the deal belogs to.
 * @param value - Deal Object
 **/
function populateMilestones(el, dealsDetails, pipeline, value, callback, defaultSelectOption){
	 // Fill milestones in select options
    var milestone_model = Backbone.Model.extend({
   	 url: '/core/api/milestone/'+pipeline
		});
    
    var model = new milestone_model();
    model.fetch({ 
   			 success: function(data) 
   			 { 
   				 		var jsonModel = data.toJSON();
						var milestones = jsonModel.milestones;
						console.log("------", data);
						// Split , and trim
						var array = [];
						$.each(milestones.split(","), function(){
							array.push($.trim(this));
						});
						if(dealsDetails)
						{
							fillMilestones('move', array);
							return;
						}
						/**
						 * Fills milestone select with existing milestones.
						 * 
						 * @param 'milestone' - Id of select element of Owner
						 * @param  array - array of milestones
						 * @param function - callback function
						 **/
						fillTokenizedSelect('pipeline_milestone', array, function(){
														
							// Quotes required for option value because milestone can have spaces in between
							if(value && value.milestone)
								$("#pipeline_milestone",el).find('option[value=\"'+ value.milestone +'\"]').attr("selected", "selected");
								
							// If callback is present, it is called to deserialize the select field
							if (callback && typeof (callback) === "function") {
								var optionsHtml = '<option value="">Select...</option>';
								$.each(array, function(index,element){
									optionsHtml += Handlebars.compile('<option value="{{element}}">{{element}}</option>')({element : element});
								});
								// execute the callback, passing parameters as necessary
								callback($(optionsHtml));
							}
						}, defaultSelectOption);
    			   }
    });
}

/**
 * Build the Pipeline list filter for displaying the pipeline.
 * @param cel
 * @returns
 */
function setupDealsTracksList(cel){
	var track_name = "";
	if(!this.trackListView)
	{
		this.trackListView = new Deals_Track_Change_Events_Collection_View({ url : '/core/api/milestone/pipelines', templateKey : "opportunity-track-list", individual_tag_name : 'li', postRenderCallback : function(el){
			var tracksArray = trackListView.collection.models;
			if(tracksArray && tracksArray.length==1){
				milestone_util.showMilestonePopup(tracksArray[0].toJSON(), function(new_milestone){
					if(new_milestone)
					{
						trackListView.collection.get(new_milestone.id).set(new BaseModel(new_milestone), { silent : true });
					}
				});
			}
			else if(tracksArray){
				milestone_util.isNotyVisible = false;
				$.each(tracksArray,function(index,mile){
					milestone_util.showMilestonePopup(mile.toJSON(), function(new_milestone){
						if(new_milestone)
						{
							trackListView.collection.get(new_milestone.id).set(new BaseModel(new_milestone), { silent : true });
						}
					});
				});
			}
			$.each(tracksArray,function(i,value){
				console.log(value.toJSON());
				if(pipeline_id == 0 && value.toJSON().isDefault){
					pipeline_id = value.id;
					console.log('default pipeline set.');
					_agile_set_prefs('agile_deal_track',pipeline_id);
				}
					
				if(value.id == pipeline_id)
				{
					track_name = value.attributes.name;
				}
			});
			
			$("#deals-new-list-view", $("#opportunity-listners")).hide();
			$("#deals-new-milestone-view", $("#opportunity-listners")).show();
			$('#deals-tracks',$("#opportunity-listners")).show();
			setTimeout(function(){
				$('#deals-tracks .filter-dropdown', $("#opportunity-listners")).append(Handlebars.compile('{{name}}')({name : track_name}));
			}, 100);
			startGettingDeals();

			// Hide the track list if there is only one pipeline.
			if(tracksArray.length<=1)
				$('#deals-tracks',cel).hide();
			
			
		}});
		this.trackListView.collection.fetch();
		$('#deals-tracks',cel).append(this.trackListView.render().el);
	}
	else
	{
		$('#deals-tracks',cel).append(this.trackListView.render(true).el);
	}
	
	
}

/**
 * Copy the cursor in the last model of collection to the new model while adding it to the collection. 
 * @param dealPipelineModel
 * @param newDeal
 * @returns
 */
function copyCursor(dealPipelineModel, newDeal){
	var dealColl = dealPipelineModel[0].get('dealCollection');
	if(dealColl.length > 0 && dealColl.at(dealColl.length -1).get('cursor'))
		newDeal.cursor = dealColl.at(dealColl.length -1).get('cursor');
	
	return newDeal;
}

/**
 * Append Column names for Deals customfields to the Deals List view.
 */
function appendCustomfields(el, is_append){
	if(!App_Deals.custom_fields_list)
	{
		$.ajax({
			url: 'core/api/custom-fields/scope?scope=DEAL',
			type: 'GET',
			dataType: 'json',
			success: function(customfields){
				App_Deals.custom_fields_list = customfields;
				//If header already added, we can ignore header part
				if(!is_append)
				{
					var columns = '';
					$.each(customfields, function(index,customfield){
						columns +=  Handlebars.compile('<th>{{label}}</th>')({label : customfield.field_label});
					});
					$(el).find('#deal-list thead tr').append(columns);
				}

				appendCustomFiledsData(el, customfields);
			}
		});
	}
	else
	{
		//If header already added, we can ignore header part
		if(!is_append)
		{
			var columns = '';
			$.each(App_Deals.custom_fields_list, function(index,customfield){
				columns +=  Handlebars.compile('<th>{{label}}</th>')({label : customfield.field_label});
			});
			$(el).find('#deal-list thead tr').append(columns);
		}

		appendCustomFiledsData(el, App_Deals.custom_fields_list);
	}
}

function appendCustomFiledsData(el, customfields)
{
	var deals = App_Deals.opportunityCollectionView.collection.models;
	$(el).find('td.deal_custom_replace').remove();
	$(el).find('#opportunities-model-list tr').each(function(index,element){
		var row = '';
		$.each(customfields, function(i,customfield){
		 	if(customfield.field_type == "DATE")
		 		row += '<td class="deal_custom_replace"><div class="text-ellipsis" style="width:6em">'+dealCustomFieldValueForDate(customfield.field_label,deals[index].attributes.custom_data)+'</div></td>';
		 	else if(customfield.field_type == "CONTACT")
	 		{
	 			row += '<td class="deal_custom_replace" deal_contact_id="'+Handlebars.compile('{{id}}')({id : deals[index].attributes.id})+'_'+Handlebars.compile('{{id}}')({id : customfield.id})+'"></td>';
	 		}
	 		else if(customfield.field_type == "COMPANY")
	 		{
	 			row += '<td class="deal_custom_replace" deal_company_id="'+Handlebars.compile('{{id}}')({id : deals[index].attributes.id})+'_'+Handlebars.compile('{{id}}')({id : customfield.id})+'"></td>';
	 		}
		 	else
				row += '<td class="deal_custom_replace"><div class="text-ellipsis" style="width:6em">'+dealCustomFieldValue(customfield.field_label,deals[index].attributes.custom_data)+'</div></td>';
		});
		$(this).append(row);
	});
	dealCustomFieldValueForContact(el,customfields,deals);
}

/**
 * Returns the value of the custom field.
 * @param name name of the custom field.
 * @param data the name. value pair of the custom fields of the deal.
 * @returns {String} value of the custom field.
 */
function dealCustomFieldValue(name, data){
	var value = '';
	$.each(data,function(index, field){
		if(field.name == name){
			value = field.value;
		}
	});
	return value;
}

function dealCustomFieldValueForDate(name, data){
	var value = '';
	$.each(data,function(index, field){
		if(field.name == name){
			if(!field.value)
				return '';
			var dateString = new Date(field.value);
			if(dateString == "Invalid Date")
				value = getDateInFormatFromEpoc(field.value);
			else
				value = en.dateFormatter({raw: getGlobalizeFormat()})(dateString);
			
		}
	});
	return value;
}

function dealCustomFieldValueForContact(el, customfields, deals){
	var referenceContactIds = "";
	$.each(deals, function(index, dealModel){
		$.each(dealModel.get("custom_data"), function(index, field){
			if(isContactTypeCustomField(customfields, field) || isCompanyTypeCustomField(customfields, field))
			{
				var contactIdsJSON = JSON.parse(field.value);
				$.each(contactIdsJSON, function(index_1, val){
					if(App_Deals.dealContactTypeCustomFields && App_Deals.dealContactTypeCustomFields.collection && !App_Deals.dealContactTypeCustomFields.collection.get(val))
					{
						referenceContactIds += val+",";
					}
					else if(!App_Deals.dealContactTypeCustomFields)
					{
						referenceContactIds += val+",";
					}
					
				});
			}
		});
	});

	App_Deals.referenceContactsCollection = new Base_Collection_View({ url : '/core/api/contacts/references?references='+referenceContactIds, sort_collection : false });
	
	if(referenceContactIds)
	{
		App_Deals.referenceContactsCollection.collection.fetch({
			success : function(data){
				if (data && data.length > 0)
				{
					if(App_Deals.dealContactTypeCustomFields && App_Deals.dealContactTypeCustomFields.collection)
					{
						App_Deals.dealContactTypeCustomFields.collection.add(data.toJSON());
					}
					else
					{
						App_Deals.dealContactTypeCustomFields = new Base_Collection_View({ data : data.toJSON() });
					}
				}
				setupContactTypeCustomFields(el, customfields, deals);
				hideTransitionBar();
			}
		});
	}
	else
	{
		setupContactTypeCustomFields(el, customfields, deals);
		hideTransitionBar();
	}
}

function setupContactTypeCustomFields(el, customfields, deals){
	$.each(deals, function(index, dealModel){
		var contacts_data_json = {};
		var companies_data_json = {};
		$.each(customfields, function(index, cu_field){
			$.each(dealModel.get("custom_data"), function(index, field){
				if(field.name == cu_field.field_label && cu_field.field_type == "CONTACT")
				{
					var contacts_data_array = [];
					var contactIdsJSON = JSON.parse(field.value);
					$.each(contactIdsJSON, function(index_1, val){
						contacts_data_array.push(App_Deals.dealContactTypeCustomFields.collection.get(val).toJSON());
					});
					//If same deal has two or more different contact type custom fields, 
					//we will add them to contacts_data_json with deal id and custom field name
					contacts_data_json[dealModel.id+"_"+field.name] = contacts_data_array;
				}

				if(field.name == cu_field.field_label && cu_field.field_type == "COMPANY")
				{
					var companies_data_array = [];
					var contactIdsJSON = JSON.parse(field.value);
					$.each(contactIdsJSON, function(index_1, val){
						companies_data_array.push(App_Deals.dealContactTypeCustomFields.collection.get(val).toJSON());
					});
					//If same deal has two or more different company type custom fields, 
					//we will add them to companies_data_json with deal id and custom field name
					companies_data_json[dealModel.id+"_"+field.name] = companies_data_array
				}
			});
		});

		$.each(customfields, function(index, cu_field){
			$.each(dealModel.get("custom_data"), function(index, field){
				if(field.name == cu_field.field_label && (cu_field.field_type == "CONTACT" || cu_field.field_type == "COMPANY"))
				{
					var data_json = contacts_data_json[dealModel.id+"_"+field.name];
					var template = 'contacts-custom-view-custom-contact';
					var ele_id = "deal_contact_id";
					var img_ele_class = "contact-type-image";

					if(cu_field.field_type == "COMPANY")
					{
						template = 'contacts-custom-view-custom-company';
						ele_id = "deal_company_id";
						img_ele_class = "company-type-image";
						data_json = companies_data_json[dealModel.id+"_"+field.name];
					}
					getTemplate(template, data_json, undefined, function(template_ui){
						if(!template_ui)
							  return;
						$(el).find("td["+ele_id+"="+dealModel.id+"_"+cu_field.id+"]").html($(template_ui).html());
						var ellipsis_required = false;
						$(el).find("td["+ele_id+"="+dealModel.id+"_"+cu_field.id+"]").find("."+img_ele_class).each(function(index, val){
							if(index > 2)
							{
								ellipsis_required = true;
								$(this).remove();
							}
						});
						if(ellipsis_required)
						{
							$(el).find("td["+ele_id+"="+dealModel.id+"_"+cu_field.id+"]").find("div:first").append("<div class='m-t' style='font-size:20px;'>...</div>");
						}
					}, null);
				}
			});
		});
	});
}

function populateLostReasons(el, value){
	if(!$('#deal_lost_reason',el).hasClass("hidden")){
		$('#deal_lost_reason',el).addClass("hidden");
	}
	var tracks = new Base_Collection_View({url : '/core/api/categories?entity_type=DEAL_LOST_REASON', sortKey : "label"});
	tracks.collection.fetch({
		success: function(data){
			var jsonModel = data.toJSON();
			var html = '<option value="">Select...</option>';
			console.log(jsonModel);
			
			$.each(jsonModel,function(index,lostReason){
				if (value && value.lost_reason_id == lostReason.id){
					html+= Handlebars.compile('<option value="{{id}}" selected="selected">{{label}}</option>')({label : lostReason.label, id : lostReason.id});
					$('#deal_lost_reason',el).removeClass("hidden");
				}else{
					html+= Handlebars.compile('<option value="{{id}}">{{label}}</option>')({label : lostReason.label, id : lostReason.id});
				}
			});
			$('#lost_reason', el).html(html);
			console.log('adding');
			$('#lost_reason', el).closest('div').find('.loading-img').hide();

			// Hide loading bar
			hideTransitionBar();

			if($('#pipeline_milestone',el).length>0){
				var temp = $('#pipeline_milestone',el).val();
				var track = temp.substring(0, temp.indexOf('_'));
				var milestone = temp.substring(temp.indexOf('_') + 1, temp.length + 1);
				$('#pipeline_milestone',el).closest('form').find('#pipeline').val(track);
				$('#pipeline_milestone',el).closest('form').find('#milestone').val(milestone);
				console.log(track, '-----------', milestone);
				var lost_milestone_flag = false;
				$('#pipeline_milestone',el).find('option').each(function(){
					if($(this).css("display") == "none" && $(this).val() == temp){
						lost_milestone_flag = true;
					}
				});
				if(lost_milestone_flag && $('#lost_reason',$('#pipeline_milestone',el).closest('.modal')).find('option').length>1){
					$('#deal_lost_reason',$('#pipeline_milestone',el).closest('.modal')).removeClass("hidden");
				}else{
					$('#lost_reason',$('#pipeline_milestone',el).closest('.modal')).val("");
					$('#deal_lost_reason',$('#pipeline_milestone',el).closest('.modal')).addClass("hidden");
				}
			}else{
				if($('#lost_reason',el).find('option').length>1){
					$('#dealLostReasonModal').modal('show');
				}
			}
		}
	}); 
}

function populateDealSources(el, value){
	if(!$('#deal_deal_source',el).hasClass("hidden")){
		$('#deal_deal_source',el).addClass("hidden");
	}
	var tracks = new Base_Collection_View({url : '/core/api/categories?entity_type=DEAL_SOURCE', sort_collection: false});
	tracks.collection.fetch({
		success: function(data){
			var jsonModel = data.toJSON();
			var html = '<option value="">Select...</option>';
			console.log(jsonModel);
			
			$.each(jsonModel,function(index,dealSource){
				if (value && value.deal_source_id == dealSource.id){
					html += Handlebars.compile('<option value="{{id}}" selected="selected">{{label}}</option>')({label : dealSource.label, id : dealSource.id});
					$('#deal_deal_source',el).removeClass("hidden");
				}else{
					html += Handlebars.compile('<option value="{{id}}">{{label}}</option>')({label : dealSource.label, id : dealSource.id});
				}
			});
			$('#deal_source', el).html(html);
			console.log('adding');
			$('#deal_source', el).closest('div').find('.loading-img').hide();

			// Hide loading bar
			hideTransitionBar();

			if($('#deal_source',el).find('option').length>1){
				$('#deal_deal_source',el).removeClass("hidden");
			}
		}
	}); 
}

/**
 * Fetches deals list view data.
 *
 * @param data - deal filters collection.
 */
function fetchDealsList(data){
	var filters_collection = data;
    if(!filters_collection && App_Deals.deal_filters && App_Deals.deal_filters.collection)
    {
    	filters_collection = App_Deals.deal_filters.collection;
    }
    setNewDealFilters(filters_collection);
	var query = ''
    if (_agile_get_prefs('deal-filters'))
    {
        query = '&filters=' + encodeURIComponent(getDealFilters());
    }
    // Fetches deals as list
    App_Deals.opportunityCollectionView = new Deals_Milestone_Events_Collection_View({ url : 'core/api/opportunity/based?pipeline_id=' + pipeline_id + query,
        templateKey : "opportunities", individual_tag_name : 'tr', sort_collection : false, cursor : true, page_size : 25,
        postRenderCallback : function(el)
        {
        	$("#deals-new-milestone-view", $("#opportunity-listners")).hide();
        	$('#deals-tracks',$("#opportunity-listners")).hide();
        	$("#deals-new-list-view", $("#opportunity-listners")).show();
        	if (pipeline_id == 1)
            {
                pipeline_id = 0;
            }
            appendCustomfields(el, false);
            // Showing time ago plugin for close date
            includeTimeAgo(el);
            initializeDealListners(el);
            contactListener();
            setTimeout(function(){
                $('#delete-checked',el).attr("id","deal-delete-checked");
            },500);
        }, appendItemCallback : function(el)
        {
            appendCustomfields(el, true);

            // To show timeago for models appended by infini scroll
            includeTimeAgo(el);

        } });
    App_Deals.opportunityCollectionView.collection.fetch();

    $('.new-collection-deal-list', $("#opportunity-listners")).html(App_Deals.opportunityCollectionView.render().el);
}

function setupMilestoneViewWidth(){
	var currentTrack = trackListView.collection.get(pipeline_id).toJSON();
	var milestones = currentTrack.milestones.split(',');
	var count = milestones.length;
	if (!count){
		return;
	}
	// Setting dynamic auto width
	var width = 100 / count;

	if (_agile_get_prefs('deal-milestone-view'))
	{
		if (_agile_get_prefs('deal-milestone-view') == "compact" && count > 8)
			width = 100 / 8;
	}
	else if (count > 5)
	{
		width = 100 / 5;
	}
	var mile_col_ele = $('#opportunities-by-paging-model-list', $("#opportunity-listners")).find('.milestone-column');

	mile_col_ele.each(function(index){
		if(index != mile_col_ele.length - 1){
			$(this).width((width - 1) + "%");
		}else{
			$(this).width(width + "%");
		}
	});
}

function deleteDeal(id, milestone, dealPipelineModel, el){
	var id_array = [];
	var id_json = {};

	// Create array with entity id.
	id_array.push(id);

	// Set entity id array in to json object with key ids,
	// where ids are read using form param
	id_json.ids = JSON.stringify(id_array);

	var that = el;
	$.ajax({ url : 'core/api/opportunity/' + id, type : 'DELETE', success : function()
	{
		// Remove the deal from the collection and remove the UI element.
		var dealPipelineModel = DEALS_LIST_COLLECTION.collection.where({ heading : milestone });
		if (!dealPipelineModel)
			return;

		var dealRemoveModel = dealPipelineModel[0].get('dealCollection').get(id);
		
		var dealRemoveValue = dealRemoveModel.attributes.expected_value;
		
		var removeDealValue = parseFloat($('#'+milestone.replace(/ +/g, '')+'_totalvalue').text().replace(/\,/g,''))-parseFloat(dealRemoveValue); 
        


        $('#'+milestone.replace(/ +/g, '')+'_totalvalue').text(portlet_utility.getNumberWithCommasAndDecimalsForPortlets(removeDealValue));
      
        $('#'+ milestone.replace(/ +/g, '') + '_count').text(parseInt($('#' + milestone.replace(/ +/g, '') + '_count').text()) - 1);	
          
		 /* average of deal total */
      	var avg_deal_size = 0;
     	var deal_count = parseInt($('#' + milestone.replace(/ +/g, '') + '_count').text()); 
     	if(deal_count == 0)
     		avg_new_deal_size = 0;
     	else
     		avg_new_deal_size = removeDealValue / deal_count;	

			removeDealValue = portlet_utility.getNumberWithCommasAndDecimalsForPortlets(removeDealValue) ;
    	avg_new_deal_size =  portlet_utility.getNumberWithCommasAndDecimalsForPortlets(avg_new_deal_size);
       	var heading = milestone.replace(/ +/g, '');
        var symbol = getCurrencySymbolForCharts();
       
        $("#"+heading+" .dealtitle-angular").removeAttr("data"); 
        var dealTrack = $("#pipeline-tour-step").children('.filter-dropdown').text();	       
        var dealdata = {"dealTrack":dealTrack,"heading": heading ,"dealcount":removeDealValue ,"avgDeal" : avg_new_deal_size,"symbol":symbol,"dealNumber":deal_count};
		var dealDataString = JSON.stringify(dealdata); 
		$("#"+heading+" .dealtitle-angular").attr("data" , dealDataString); 

		dealPipelineModel[0].get('dealCollection').remove(dealPipelineModel[0].get('dealCollection').get(id));



		// Removes deal from list
		$(that).closest('li').css("display", "none");

		// Shows Milestones Pie
		pieMilestones();

		// Shows deals chart
		dealsLineChart();
	}, error : function(err)
	{
		$('.error-status', $('#opportunity-listners')).html(err.responseText);
		setTimeout(function()
		{
			$('.error-status', $('#opportunity-listners')).html('');
		}, 2000);
		console.log('-----------------', err.responseText);
	} });
}/** 
* Deal sources and los reasons actions collection view
*/
var Sources_Loss_Reasons_Events_Collection_View = Base_Collection_View.extend({
    events: {
        'click .add_deal_source' : 'dealSourceAdd',
        'keypress #deal_source_name' : 'dealSourceAddWithEnterBtn',
        'click .deal-source-edit' : 'dealSourceEdit',
        'keypress .update_deal_source' : 'dealSourceUpdateWithEnterBtn',
        'click .updates_deal_source' : 'dealSourceUpdate',
        'click .deal-source-delete' : 'dealSourceDelete',
        'click .add_lost_reason' : 'lossReasonAdd',
        'keypress .lost_reason_name' : 'lossReasonAddWithEnterBtn',
        'click .lost-reason-edit' : 'lossReasonEdit',
        'keypress .update_lost_reason' : 'lossReasonUpdateWithEnterBtn',
        'click .updates_lost_reason' : 'lossReasonUpdate',
        'click .lost-reason-delete' : 'lossReasonDelete',
        'click .goalSave' : 'goalSave',
        'keypress .count' : 'goalCount',
        'keypress .amount' : 'goalAmount',
        'click .show_milestone_field' : 'showMilestoneField'
    },

    dealSourceAdd : function(e){
        e.preventDefault();
        if($('#deal_source_name').val().trim()==""){
            $('#deal_source_name_error').show();
            return false;
        }
        if(!categories.isValid($('#deal_source_name').val().trim())){
            $('#deal_source_chars_error').show();
            return false;
        }
        var obj = serializeForm('dealSourcesForm');
        if(App_Admin_Settings.dealSourcesView && App_Admin_Settings.dealSourcesView.collection)
        {
            var maxPos = 0;
            $.each(App_Admin_Settings.dealSourcesView.collection.models, function(index, dealSource){
                if(dealSource.get("order") > maxPos) {
                    maxPos = dealSource.get("order");
                }
            });
            obj['order'] = maxPos + 1;
        }
        
        var model = new BaseModel();
        model.url = 'core/api/categories';
        model.save(obj, {
        success: function (data) {
            var model = data.toJSON();
            App_Admin_Settings.dealSourcesView.collection.add(new BaseModel(model));
            $('.show_field').find('#deal_source_name').val("");
            $('.show_field').hide();
            $('.show_deal_source_add').show();
        },
        error: function (model, response) {
            if(response.status==400 && response.responseText=="Source with this name already exists."){
                $('#deal_source_existed_error').show();
            }
        }});
    },

    dealSourceAddWithEnterBtn : function(e){
        $('#deal_source_name_error').hide();
        $('#deal_source_existed_error').hide();
        $('#deal_source_chars_error').hide();
        if(e.keyCode == 13)
        {
            e.preventDefault();
            var form = $(this).closest("form");
            form.find(".add_deal_source").click();
        }
    },

    dealSourceEdit : function(e){
        $(e.currentTarget).closest('tr').find('.deal_source_name_div').hide();
        $(e.currentTarget).closest('tr').find('.deal_source_name_input').show();
    },

    dealSourceUpdateWithEnterBtn : function(e){
        if(e.which == 13){
            e.preventDefault();
            if($(e.currentTarget).val().trim()==""){
                $('#deal_source_name_error_'+$(e.currentTarget).attr("id")).show();
                return false;
            }
            if(!categories.isValid($(e.currentTarget).val().trim())){
                $('#deal_source_chars_error_'+$(e.currentTarget).attr("id")).show();
                return false;
            }
            var obj = serializeForm('dealSourcesForm_'+$(e.currentTarget).attr("id"));
            var model = new BaseModel();
            model.url = 'core/api/categories';
            model.save(obj, {
            success: function (data) {
                var model = data.toJSON();
                App_Admin_Settings.dealSourcesView.collection.get(model).set(new BaseModel(model));
                $('.deal_source_name_input').hide();
                $('.deal_source_name_div').show();
            },
            error: function (model, response) {
                if(response.status==400 && response.responseText=="Source with this name already exists."){
                    $('#deal_source_existed_error').show();
                }
            }});
        }else{
            $('#deal_source_name_error_'+$(e.currentTarget).attr("id")).hide();
            $('#deal_source_existed_error_'+$(e.currentTarget).attr("id")).hide();
            $('#deal_source_chars_error_'+$(e.currentTarget).attr("id")).hide();
        }
    },

    dealSourceUpdate : function(e){
        e.preventDefault();
        if($(e.currentTarget).parent().find('input:text').val().trim()==""){
            $('#deal_source_name_error_'+$(e.currentTarget).parent().find('input:text').attr("id")).show();
            return false;
        }
        if(!categories.isValid($(e.currentTarget).parent().find('input:text').val().trim())){
            $('#deal_source_chars_error_'+$(e.currentTarget).parent().find('input:text').attr("id")).show();
            return false;
        }
        var obj = serializeForm('dealSourcesForm_'+$(e.currentTarget).parent().find('input:text').attr("id"));
        var model = new BaseModel();
        model.url = 'core/api/categories';
        model.save(obj, {
        success: function (data) {
            var model = data.toJSON();
            App_Admin_Settings.dealSourcesView.collection.get(model).set(new BaseModel(model));
            $('.deal_source_name_input').hide();
            $('.deal_source_name_div').show();
        },
        error: function (model, response) {
            if(response.status==400 && response.responseText=="Source with this name already exists."){
                $('#deal_source_existed_error').show();
            }
        }});
    },

    dealSourceDelete : function(e){
        e.preventDefault();
        var $that = $(e.currentTarget);
        showAlertModal("delete_deal_source", "confirm", function(){
            var obj = serializeForm($that.closest('form').attr("id"));
            var model = new BaseModel();
            model.url = 'core/api/categories/'+obj.id;
            model.set({ "id" : obj.id });
            model.destroy({
            success: function (data) {
                var model = data.toJSON();
              App_Admin_Settings.dealSourcesView.collection.remove(new BaseModel(model));
              $that.closest('tr').remove();
            },
            error: function (model, response) {
            
            }});
        });
    },

    lossReasonAdd : function(e){
        e.preventDefault();
        if($('#lost_reason_name').val().trim()==""){
            $('#lost_reason_name_error').show();
            return false;
        }
        if(!categories.isValid($('#lost_reason_name').val().trim())){
            $('#lost_reason_chars_error').show();
            return false;
        }
        var obj = serializeForm('lostReasonsForm');
        var model = new BaseModel();
        model.url = 'core/api/categories';
        model.save(obj, {
        success: function (data) {
            var model = data.toJSON();
            App_Admin_Settings.dealLostReasons.collection.add(new BaseModel(model));
            $('.show_field').find('#lost_reason_name').val("");
            $('.show_field').hide();
            $('.show_lost_reason_add').show();
        },
        error: function (model, response) {
            if(response.status==400 && response.responseText=="Reason with this name already exists."){
                $('#lost_reason_existed_error').show();
            }
        }});
    },

    lossReasonAddWithEnterBtn : function(e){
        $('#lost_reason_name_error').hide();
        $('#lost_reason_existed_error').hide();
        $('#lost_reason_chars_error').hide();
        if(e.keyCode == 13)
        {
            e.preventDefault();
            var form = $(this).closest("form");
            form.find(".add_lost_reason").click();
        }
    },

    lossReasonEdit : function(e){
        e.preventDefault();
        $(e.currentTarget).closest('tr').find('.lost_reason_name_div').hide();
        $(e.currentTarget).closest('tr').find('.lost_reason_name_input').show();
    },

    lossReasonUpdateWithEnterBtn : function(e){
        if(e.which == 13){
            e.preventDefault();
            if($(e.currentTarget).val().trim()==""){
                $('#lost_reason_name_error_'+$(e.currentTarget).attr("id")).show();
                return false;
            }
            if(!categories.isValid($(e.currentTarget).val().trim())){
                $('#lost_reason_chars_error_'+$(e.currentTarget).attr("id")).show();
                return false;
            }
            var obj = serializeForm('lostReasonsForm_'+$(e.currentTarget).attr("id"));
            var model = new BaseModel();
            model.url = 'core/api/categories';
            model.save(obj, {
            success: function (data) {
                var model = data.toJSON();
                App_Admin_Settings.dealLostReasons.collection.get(model).set(new BaseModel(model));
                $('.lost_reason_name_input').hide();
                $('.lost_reason_name_div').show();
            },
            error: function (model, response) {
                if(response.status==400 && response.responseText=="Reason with this name already exists."){
                    $('#lost_reason_existed_error').show();
                }
            }});
        }else{
            $('#lost_reason_name_error_'+$(e.currentTarget).attr("id")).hide();
            $('#lost_reason_existed_error_'+$(e.currentTarget).attr("id")).hide();
            $('#lost_reason_chars_error_'+$(e.currentTarget).attr("id")).hide();
        }
    },

    lossReasonUpdate : function(e){
        if($(e.currentTarget).parent().find('input:text').val().trim()==""){
            $('#lost_reason_name_error_'+$(e.currentTarget).parent().find('input:text').attr("id")).show();
            return false;
        }
        if(!categories.isValid($(e.currentTarget).parent().find('input:text').val().trim())){
            $('#lost_reason_chars_error_'+$(e.currentTarget).parent().find('input:text').attr("id")).show();
            return false;
        }
        var obj = serializeForm('lostReasonsForm_'+$(e.currentTarget).parent().find('input:text').attr("id"));
        var model = new BaseModel();
        model.url = 'core/api/categories';
        model.save(obj, {
        success: function (data) {
            var model = data.toJSON();
            App_Admin_Settings.dealLostReasons.collection.get(model).set(new BaseModel(model));
            $('.lost_reason_name_input').hide();
            $('.lost_reason_name_div').show();
        },
        error: function (model, response) {
            if(response.status==400 && response.responseText=="Reason with this name already exists."){
                $('#lost_reason_existed_error').show();
            }
        }});
    },

    lossReasonDelete : function(e){
        e.preventDefault();
        var $that = $(e.currentTarget);
        showAlertModal("delete_lost_reason", "confirm", function(){
            var obj = serializeForm($that.closest('form').attr("id"));
            var model = new BaseModel();
            model.url = 'core/api/categories/'+obj.id;
            model.set({ "id" : obj.id });
            model.destroy({
            success: function (data) {
                var model = data.toJSON();
              App_Admin_Settings.dealLostReasons.collection.remove(new BaseModel(model));
              $that.closest('tr').remove();
            },
            error: function (model, response) {
            
            }});
        });
    },

    goalSave : function(e){
        e.preventDefault();
        var flag=true;
            
        var that=$(this);
        var goals_json=[];
        var d=$('#goal_duration span').html();
        d=new Date(d);
        var start=getUTCMidNightEpochFromDate(d);
                    
        $('#deal-sources-table').find('td').each(function(index){
            if(($(this).find('.amount').val().trim())!="" && ((parseFloat($(this).find('.amount').val().trim())<0) || !(/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/).test($(this).find('.amount').val()))){
                $(this).find('#goal_amount_error').show();
                flag=false;
                return false;
            }
            if(($(this).find('.count').val().trim())!="" && ((parseFloat($(this).find('.count').val().trim())<0) || !(/^[0-9]*$/).test($(this).find('.count').val()))){
                $(this).find('#goal_count_error').show();
                flag=false;
                return false;
            }
            if($(this).find("#goal_amount_error").is(':visible'))
                $(this).find('#goal_amount_error').hide();
            if($(this).find("#goal_count_error").is(':visible'))
                $(this).find('#goal_count_error').hide();
            var goal_single_user={};
            if($(this).attr('id')!=null && ($(this).attr('data')==start/1000))
                goal_single_user.id=$(this).attr('id');
            goal_single_user.domain_user_id=$(this).find('.goal').attr('id');
            goal_single_user.amount=$(this).find('.amount').val().trim();
            goal_single_user.count=$(this).find('.count').val().trim();
            goal_single_user.start_time=start/1000;
            goals_json.push(goal_single_user);

        });
        if(flag){
            $(this).attr("disabled","disabled");
            $('.Count_goal').text(0);
            $('.Amount_goal').text(0);
            $.ajax({ type : 'POST', url : '/core/api/goals', data : JSON.stringify(goals_json),
                contentType : "application/json; charset=utf-8", dataType : 'json' ,
                success : function(e)
                {
                    console.log(e);
                    var count=0;
                    var amount=0;
                    $('#deal-sources-table').find('td').each(function(index){
                        var that=$(this);
                        $.each(e,function(index,jsond){
                            if(jsond.domain_user_id==that.find('div').attr('id')){
                                that.attr('id',jsond.id);
                                that.attr('data',jsond.start_time);

                            }
                         });
                        if(that.find('.count').val().trim()!="")
                            count=count+parseInt(that.find('.count').val());
                        if(that.find('.amount').val().trim()!="")
                            amount=amount+parseFloat(that.find('.amount').val());
                    });
                    percentCountAndAmount(count,amount);
                    $save_info = $('<div style="display:inline-block"><small><p class="text-info"><i>Changes Saved</i></p></small></div>');

                    $('.Goals_message').html($save_info);

                    $save_info.show();

                    setTimeout(function()
                    {
                        $('.Goals_message').empty();
                        that.removeAttr("disabled");
                    }, 500);
            
                }
            });
        }
    },

    goalCount : function(e){
        $(e.currentTarget).siblings('#goal_count_error').hide();
    },

    goalAmount : function(e){
        $(e.currentTarget).siblings('#goal_amount_error').hide();
    },

    showMilestoneField : function(e){
        e.preventDefault();
        var form = $(e.currentTarget).closest('form');
        console.log('New Milestone to - ',form.attr('id'));
        $(e.currentTarget).closest("div").css("display","none");
        form.find('.show_field').css("display","block");
        form.find(".add_new_milestone").focus();
    }

    
});var portlet_graph_data_utility = {

	/**
	 * Generic function to fetch data for graphs and act accordingly on plan
	 * limit error
	 * 
	 * @param url
	 * @param successCallback
	 */
	fetchPortletsGraphData : function(url, successCallback) {
		// Hides error message
		$("#plan-limit-error").hide();

		// Fetches data
		$.getJSON(url, function(data) {
			// Sends data to callback
			if (successCallback && typeof (successCallback) === "function")
				successCallback(data);
		}).error(function(response) {
			// If error is not billing exception and forbidden exception then it
			// is returned
			if (response.status != 406 && response.status != 403)
				return;

			// If it is billing exception or forbidden exception, then empty set
			// is sent so page will not be showing loading on error message
			if (successCallback && typeof (successCallback) === "function")
				successCallback(response);
		});
	},

	/**
	 * To fetch deals by milestone portlet data to render as pie graph
	 */
	dealsByMilestoneGraphData : function(base_model, selector, url) {
		var milestonesList = [];
		var milestoneValuesList = [];
		var milestoneNumbersList = [];

		var milestoneMap = [];
		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path("../flatfull/img/ajax-loader-cursor.gif")+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							milestonesList = data["milestonesList"];
							milestoneValuesList = data["milestoneValuesList"];
							milestoneNumbersList = data["milestoneNumbersList"];
							milestoneMap = data["milestoneMap"];
							portlet_graph_utility.dealsByMilestonePieGraph(
									selector, milestonesList,
									milestoneValuesList, milestoneNumbersList);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},
/**
	 * To fetch Cmpaign contacts stats portlet data to render as pie graph
	 */
	campaignStatsGraphData : function(base_model, selector, url) {
		var campaignStatusList = [];
		var campaignValuesList = [];

		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path("../flatfull/img/ajax-loader-cursor.gif")+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							campaignStatusList = data["campaignStatusList"];
							campaignValuesList = data["campaignValuesList"];

							portlet_graph_utility.campaignStatsPieGraph(
									selector, campaignStatusList,
									campaignValuesList);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},
	/**
	 * To fetch closers per person portlet data to render as bar graph
	 */
	closuresPerPersonGraphData : function(base_model, selector, url) {
		var milestoneNumbersList = [];
		var milestoneValuesList = [];
		var domainUsersList = [];
		$('#' + selector).html(getRandomLoadingImg());
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							milestoneNumbersList = data["milestoneNumbersList"];
							milestoneValuesList = data["milestoneValuesList"];
							domainUsersList = data["domainUsersList"];

							var catges = [];

							$.each(domainUsersList,
									function(index, domainUser) {
										catges.push(domainUser);
									});

							var data2 = [];
							var text = '';
							var name = '';

							if (base_model.get('settings')["group-by"] == "number-of-deals") {
								$.each(milestoneNumbersList, function(index,
										mNumber) {
									data2.push(mNumber);
								});
								text = "No. of Deals Won";
								name = "Deals Won";
							} else {
								$.each(milestoneValuesList, function(index,
										mValue) {
									data2.push(mValue);
								});
								text = "Deals Won Value";
								name = "Won Deal Value";
							}

							portlet_graph_utility.closuresPerPersonBarGraph(
									selector, catges, data2, text, name);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch deals funnel portlet data to render as funnel graph
	 */
	dealsFunnelGraphData : function(base_model, selector, url) {
		var milestonesList = [];
		var milestoneValuesList = [];
		var milestoneMap = [];
		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							milestonesList = data["milestonesList"];
							milestoneValuesList = data["milestoneValuesList"];
							milestoneMap = data["milestoneMap"];
							wonMilestone = data["wonMilestone"];
							lostMilestone = data["lostMilestone"];
							milestoneNumbersList = data["milestoneNumbersList"];

							var funnel_data = [];
							var temp;

							$.each(milestonesList, function(index, milestone) {
								var each_data = [];
								if (milestone != lostMilestone) {
									if (milestone != wonMilestone) {
										if (base_model.get("settings")["split-by"] && base_model.get("settings")["split-by"] == "count") {
											each_data.push(milestone,
												milestoneNumbersList[index]);
										}
										else {
											each_data.push(milestone,
												milestoneValuesList[index]);
										}
										
									}	
									else
										temp = index;
									if (each_data != "")
										funnel_data.push(each_data);
								}
							});

							var temp_data = [];
							if (temp != undefined) {
								if (base_model.get("settings")["split-by"] && base_model.get("settings")["split-by"] == "count") {
									temp_data.push(milestonesList[temp],
										milestoneNumbersList[temp]);
								}
								else {
									temp_data.push(milestonesList[temp],
										milestoneValuesList[temp]);
								}
								
								funnel_data.push(temp_data);
							}
							var falg = false;
							$.each(funnel_data, function(index, json1) {
								if (json1[1] > 0)
									falg = true;
							});
							if (falg)
								funnel_data = funnel_data;
							else
								funnel_data = [];
							portlet_graph_utility.dealsFunnelGraph(selector,
									funnel_data, base_model);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch emails sent portlet data to render as bar graph
	 */
	emailsSentGrapgData : function(base_model, selector, url) {
		var domainUsersList = [];
		var mailsCountList = [];
		var mailsOpenedCountList = [];
		$('#' + selector).html(getRandomLoadingImg());
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							domainUsersList = data["domainUsersList"];
							mailsCountList = data["mailsCountList"];
							mailsOpenedCountList = data["mailsOpenedCountList"];

							var series = [];
							var text = '';
							var colors;

							var tempData = {};
							tempData.name = "Emails Not Opened";
							tempData.data = mailsCountList;
							series[0] = tempData;
							tempData = {};
							tempData.name = "Emails Opened";
							tempData.data = mailsOpenedCountList;
							series[1] = tempData;
							text = "No. of Emails";
							colors = [ 'gray', 'green' ];

							portlet_graph_utility.emailsSentBarGraph(selector,
									domainUsersList, series, mailsCountList,
									mailsOpenedCountList, text, colors);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch growth graph portlet data to render as area spline graph
	 */
	growthGraphData : function(base_model, selector, url) {

		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 406) {
								// Show cause of error in saving
								$save_info = $('<div class="portlet-error-message inline-block"><small><p class="text-base" style="color:#B94A48;"><i>'
										+ data.responseText
										+ '</i></p></small></div>');

								$('#' + selector).html($save_info).show();

								return;
							}

							var categories = [];
							var tempcategories = [];
							var dataLength = 0;
							var min_tick_interval = 1;
							var frequency = base_model.get('settings').frequency;

							var sortedKeys = [];
							$.each(data, function(k, v) {
								sortedKeys.push(k);
							});
							sortedKeys.sort();
							var sortedData = {};
							$.each(sortedKeys, function(index, value) {
								sortedData['' + value] = data['' + value];
							});
							var series;
							// Iterates through data and adds keys into
							// categories
							$.each(sortedData, function(k, v) {
								// Initializes series with names with the first
								// data point
								if (series == undefined) {
									var index = 0;
									series = [];
									$.each(v, function(k1, v1) {
										var series_data = {};
										series_data.name = k1;
										series_data.data = [];
										series[index++] = series_data;
									});
								}
								// Fill Data Values with series data
								$.each(v, function(k1, v1) {
									// Find series with the name k1 and to that,
									// push v1
									var series_data = find_series_with_name(
											series, k1);
									var dt = new Date(k * 1000);
									series_data.data.push(v1);
								});
								tempcategories.push(k * 1000);
								dataLength++;

							});

							var cnt = 0;
							if (Math.ceil(dataLength / 10) > 0) {
								min_tick_interval = Math.ceil(dataLength / 10);
								if (min_tick_interval == 3) {
									min_tick_interval = 4;
								}
							}
							head
									.js(
											LIB_PATH
													+ 'lib/flot/highcharts-3.js',
											function() {
												$
														.each(
																sortedData,
																function(k, v) {
																	var dte = new Date(
																			tempcategories[cnt]);
																	if (frequency != undefined) {
																		if (frequency == "daily") {
																			categories
																					.push(Highcharts
																							.dateFormat(
																									'%e.%b',
																									Date
																											.UTC(
																													dte
																															.getUTCFullYear(),
																													dte
																															.getUTCMonth(),
																													dte
																															.getUTCDate()))
																							+ '');
																		} else if (frequency == "weekly") {
																			if (cnt != dataLength - 1) {
																				var next_dte = new Date(
																						tempcategories[cnt + 1]);
																				categories
																						.push(Highcharts
																								.dateFormat(
																										'%e.%b',
																										Date
																												.UTC(
																														dte
																																.getUTCFullYear(),
																														dte
																																.getUTCMonth(),
																														dte
																																.getUTCDate()))
																								+ ' - '
																								+ Highcharts
																										.dateFormat(
																												'%e.%b',
																												Date
																														.UTC(
																																next_dte
																																		.getUTCFullYear(),
																																next_dte
																																		.getUTCMonth(),
																																next_dte
																																		.getUTCDate() - 1)));
																			} else {
																				var end_date = new Date();
																				categories
																						.push(Highcharts
																								.dateFormat(
																										'%e.%b',
																										Date
																												.UTC(
																														dte
																																.getUTCFullYear(),
																														dte
																																.getUTCMonth(),
																														dte
																																.getUTCDate()))
																								+ ' - '
																								+ Highcharts
																										.dateFormat(
																												'%e.%b',
																												Date
																														.UTC(
																																end_date
																																		.getFullYear(),
																																end_date
																																		.getMonth(),
																																end_date
																																		.getDate())));
																			}
																		} else if (frequency == "monthly") {
																			if (cnt != dataLength - 1) {
																				var next_dte = new Date(
																						tempcategories[cnt + 1]);
																				var current_date = new Date();
																				var from_date = '';
																				var to_date = '';
																				if (cnt != 0) {
																					if (current_date
																							.getUTCFullYear() != dte
																							.getUTCFullYear()) {
																						from_date = Highcharts
																								.dateFormat(
																										'%b.%Y',
																										Date
																												.UTC(
																														dte
																																.getUTCFullYear(),
																														dte
																																.getUTCMonth(),
																														dte
																																.getUTCDate()));
																					} else {
																						from_date = Highcharts
																								.dateFormat(
																										'%b',
																										Date
																												.UTC(
																														dte
																																.getUTCFullYear(),
																														dte
																																.getUTCMonth(),
																														dte
																																.getUTCDate()));
																					}
																					categories
																							.push(from_date);
																				} else {
																					if (current_date
																							.getUTCFullYear() != dte
																							.getUTCFullYear()) {
																						from_date = Highcharts
																								.dateFormat(
																										'%e.%b.%Y',
																										Date
																												.UTC(
																														dte
																																.getUTCFullYear(),
																														dte
																																.getUTCMonth(),
																														dte
																																.getUTCDate()));
																					} else {
																						from_date = Highcharts
																								.dateFormat(
																										'%e.%b',
																										Date
																												.UTC(
																														dte
																																.getUTCFullYear(),
																														dte
																																.getUTCMonth(),
																														dte
																																.getUTCDate()));
																					}
																					if (current_date
																							.getUTCFullYear() != next_dte
																							.getUTCFullYear()) {
																						to_date = Highcharts
																								.dateFormat(
																										'%e.%b.%Y',
																										Date
																												.UTC(
																														next_dte
																																.getUTCFullYear(),
																														next_dte
																																.getUTCMonth(),
																														next_dte
																																.getUTCDate() - 1));
																					} else {
																						to_date = Highcharts
																								.dateFormat(
																										'%e.%b',
																										Date
																												.UTC(
																														next_dte
																																.getUTCFullYear(),
																														next_dte
																																.getUTCMonth(),
																														next_dte
																																.getUTCDate() - 1));
																					}
																					categories
																							.push(from_date
																									+ ' - '
																									+ to_date);
																				}
																			} else {
																				var current_date = new Date();
																				var from_date = '';
																				var to_date = '';
																				var end_date = new Date();
																				if (current_date
																						.getUTCFullYear() != dte
																						.getUTCFullYear()) {
																					from_date = Highcharts
																							.dateFormat(
																									'%e.%b.%Y',
																									Date
																											.UTC(
																													dte
																															.getUTCFullYear(),
																													dte
																															.getUTCMonth(),
																													dte
																															.getUTCDate()));
																					to_date = Highcharts
																							.dateFormat(
																									'%e.%b.%Y',
																									Date
																											.UTC(
																													end_date
																															.getFullYear(),
																													end_date
																															.getMonth(),
																													end_date
																															.getDate()));
																				} else {
																					from_date = Highcharts
																							.dateFormat(
																									'%e.%b',
																									Date
																											.UTC(
																													dte
																															.getUTCFullYear(),
																													dte
																															.getUTCMonth(),
																													dte
																															.getUTCDate()));
																					to_date = Highcharts
																							.dateFormat(
																									'%e.%b',
																									Date
																											.UTC(
																													end_date
																															.getFullYear(),
																													end_date
																															.getMonth(),
																													end_date
																															.getDate()));
																				}
																				categories
																						.push(from_date
																								+ ' - '
																								+ to_date);
																			}
																		}
																		cnt++;
																	}
																});
											});

							portlet_graph_utility.portletGrowthGraph(selector,
									series, base_model, categories,
									min_tick_interval);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch deals assigned portlet data to render as bar graph
	 */
	dealsAssignedGraphData : function(base_model, selector, url) {
		var domainUsersList = [];
		var dealsAssignedCountList = [];
		$('#' + selector).html(getRandomLoadingImg());
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							domainUsersList = data["domainUsersList"];
							dealsAssignedCountList = data["assignedOpportunitiesCountList"];

							portlet_graph_utility.dealsAssignedBarGraph(
									selector, domainUsersList,
									dealsAssignedCountList, base_model);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch calls per person portlet data to render as bar graph
	 */
	callsPerPersonGraphData : function(base_model, selector, url) {
		var answeredCallsCountList = [];
		var busyCallsCountList = [];
		var failedCallsCountList = [];
		var voiceMailCallsCountList = [];
		var missedCallsCountList= [];
		var inquiryCallsCountList= [];
		var interestCallsCountList= [];
		var noInterestCallsCountList= [];
		var incorrectReferralCallsCountList= [];
		var newOpportunityCallsCountList= [];
		var meetingScheduledCallsCountList = [];
		var queuedCallsCountList = [];
		var callsDurationList = [];
		var totalCallsCountList = [];
		var domainUsersList = [];
		var domainUserImgList = [];
		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path("../flatfull/img/ajax-loader-cursor.gif")+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							answeredCallsCountList = data["answeredCallsCountList"];
							busyCallsCountList = data["busyCallsCountList"];
							failedCallsCountList = data["failedCallsCountList"];
							voiceMailCallsCountList = data["voiceMailCallsCountList"];
							missedCallsCountList = data["missedCallsCountList"];
							inquiryCallsCountList = data["inquiryCallsCountList"];
							interestCallsCountList = data["interestCallsCountList"];
							noInterestCallsCountList = data["noInterestCallsCountList"];
							incorrectReferralCallsCountList = data["incorrectReferralCallsCountList"];
							meetingScheduledCallsCountList = data["meetingScheduledCallsCountList"];
							newOpportunityCallsCountList = data["newOpportunityCallsCountList"];
							queuedCallsCountList = data["queuedCallsCountList"];
							callsDurationList = data["callsDurationList"];
							totalCallsCountList = data["totalCallsCountList"];
							domainUsersList = data["domainUsersList"];
							domainUserImgList = data["domainUserImgList"];

							var series = [];
							var text = '';
							var colors;

							if (base_model.get('settings')["group-by"] == "number-of-calls") {
								var tempData = {};
								tempData.name = "Answered";
								tempData.data = answeredCallsCountList;
								series[0] = tempData;

								tempData = {};
								tempData.name = "Busy";
								tempData.data = busyCallsCountList;
								series[1] = tempData;

								tempData = {};
								tempData.name = "Failed";
								tempData.data = failedCallsCountList;
								series[2] = tempData;

								tempData = {};
								tempData.name = "Voicemail";
								tempData.data = voiceMailCallsCountList;
								series[3] = tempData;

								tempData = {};
								tempData.name = "Missed ";
								tempData.data = missedCallsCountList;
								series[4] = tempData;

								tempData = {};
								tempData.name = "Inquiry";
								tempData.data = inquiryCallsCountList;
								series[5] = tempData;

								tempData = {};
								tempData.name = "Interest";
								tempData.data = interestCallsCountList;
								series[6] = tempData;

								tempData = {};
								tempData.name = "No Interest";
								tempData.data = noInterestCallsCountList;
								series[7] = tempData;

								tempData = {};
								tempData.name = "Incorrect Referral";
								tempData.data = incorrectReferralCallsCountList;
								series[8] = tempData;

								tempData = {};
								tempData.name = "Meeting Scheduled";
								tempData.data = meetingScheduledCallsCountList;
								series[9] = tempData;

								tempData = {};
								tempData.name = "New Opportunity";
								tempData.data = newOpportunityCallsCountList;
								series[10] = tempData;

								tempData = {};
								tempData.name = "Other";
								tempData.data = queuedCallsCountList;
								series[11] = tempData;

								text = "No. of Calls";
								colors = [ 'green', 'blue', 'red', 'violet' ];
							} else {
								var tempData = {};
								tempData.name = "Total Duration";
								var callsDurationInMinsList = [];
								$
										.each(
												callsDurationList,
												function(index, duration) {
													callsDurationInMinsList[index] = duration / 60;
												});
								tempData.data = callsDurationInMinsList;
								series[0] = tempData;
								text = "Calls Duration (Sec)";
								colors = [ 'green' ];
							}

							portlet_graph_utility.callsPerPersonBarGraph(
									selector, domainUsersList, series,
									totalCallsCountList, callsDurationList,
									text, colors, domainUserImgList,base_model);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch task report portlet data to render as bar graph
	 */
	taskReportGraphData : function(base_model, selector, url) {
		var groupByList = [];
		var splitByList = [];
		var splitByNamesList = [];
		var domainUserNamesList = [];
		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							groupByList = data["groupByList"];
							splitByList = data["splitByList"];
							domainUserNamesList = data["domainUserNamesList"];
							var series = [];
							var text = '';
							var colors;

							$.each(splitByList, function(index, splitByData) {
								if (splitByNamesList.length == 0)
									$.each(splitByData, function(key, value) {
										splitByNamesList.push(portlet_utility
												.getPortletNormalName(key));
									});
							});
							for ( var i = 0; i < splitByNamesList.length; i++) {
								var tempData = {};
								var splitByDataList = [];
								$
										.each(
												splitByList,
												function(index, splitByData) {
													$
															.each(
																	splitByData,
																	function(
																			key,
																			value) {
																		if (portlet_utility
																				.getPortletNormalName(key) == splitByNamesList[i])
																			splitByDataList
																					.push(value);
																	});
												});
								tempData.name = splitByNamesList[i];
								tempData.data = splitByDataList;
								series[i] = tempData;
							}
							text = "Task Report";

							var groupByNamesList = [];

							$.each(groupByList, function(index, name) {
								groupByNamesList[index] = portlet_utility
										.getPortletNormalName(name+'#'+index);
							});

							portlet_graph_utility.taskReportBarGraph(selector,
									groupByNamesList, series, text, base_model,
									domainUserNamesList,undefined,'');

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch revenue graph portlet data to render as area spline graph
	 */
	revenueGraphData : function(base_model, selector, url) {
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 406) {
								// Show cause of error in saving
								$save_info = $('<div class="portlet-error-message inline-block"><small><p class="text-base" style="color:#B94A48;"><i>'
										+ data.responseText
										+ '</i></p></small></div>');

								$('#' + selector).html($save_info).show();

								return;
							}
							var sortedKeys = [];
							var categories = [];
							$.each(data, function(k, v) {
								sortedKeys.push(k);
							});
							sortedKeys.sort();
							var sortedData = {};
							$.each(sortedKeys, function(index, value) {
								sortedData['' + value] = data['' + value];
							});
							var series;
							// Iterates through data and adds keys into
							// categories
							$.each(sortedData, function(k, v) {
								// Initializes series with names with the first
								// data point
								if (series == undefined) {
									var index = 0;
									series = [];
									$.each(v, function(k1, v1) {
										var series_data = {};
										series_data.name = k1;
										series_data.data = [];
										series[index++] = series_data;
									});
								}
								// Fill Data Values with series data
								$.each(v, function(k1, v1) {
									// Find series with the name k1 and to that,
									// push v1
									var series_data = find_series_with_name(
											series, k1);
									series_data.data.push(v1);
								});
								var dt = new Date(k * 1000);
								categories.push(Date.UTC(dt.getFullYear(), dt
										.getMonth(), dt.getDate()));

							});

							portlet_graph_utility.portletDealRevenueGraph(
									selector, series, base_model, categories);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},

	/**
	 * To fetch emails opened portlet data to render as pie graph
	 */
	emailsOpenedGraphData : function(base_model, selector, url) {
		var emailsSentCount = 0;
		var emailsOpenedCount = 0;
		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							emailsSentCount = data["emailsSentCount"];
							emailsOpenedCount = data["emailsOpenedCount"];

							var series = [];
							series.push([ "Emails Sent",
									emailsSentCount - emailsOpenedCount ]);
							series.push([ "Emails Opened", emailsOpenedCount ]);

							portlet_graph_utility.emailsOpenedPieChart(
									selector, series, emailsSentCount,
									emailsOpenedCount);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},
	dealGoalsGraphData : function(selector,data,column_position,row_position)
	{
					var colors1=[ '#ffffff', '#27C24C' ];
					var colors2= ['#ffffff','#fad733'];
			
					var deal_graph_el=$('#'+selector).find('.dealGraph');
					deal_graph_el.attr('id','dealGraph-'+column_position + '-' + row_position);
					var graphSelector1=$('#'+selector).find('.dealGraph').attr('id');
					var revenue_graph_el=$('#'+selector).find('.revenueGraph');
					revenue_graph_el.attr('id','revenueGraph-'+column_position + '-' + row_position);
						var graphSelector2=$('#'+selector).find('.revenueGraph').attr('id');
					if(data["goalCount"]==0)
					{
						$('#' + graphSelector1)
										.html(
												'<div class="portlet-error-message" style="padding:30px 15px">No Deals Goals set </div>');
								
					}
					else{
						if(data["dealcount"]>=data["goalCount"])
							$('#'+selector).find('.goal_count_success').show();
						portlet_graph_utility.dealGoalsPieGraph(graphSelector1,data["dealcount"],data["goalCount"],colors1);
					}
						

					if(data["goalAmount"]==0)
					{
						$('#' + graphSelector2)
										.html(
												'<div class="portlet-error-message" style="padding:30px 15px">No Revenue Goals set</div>');
								
					}
					 else{
					 	if(data["dealAmount"]>=data["goalAmount"])
							$('#'+selector).find('.goal_amount_success').show();
					portlet_graph_utility.dealGoalsPieGraph(graphSelector2,data["dealAmount"],data["goalAmount"],colors2);
					}
	},
	/**
	 * Fetch incoming deals portlet data to render as pie graph
	 */
	incomingDealsGraphData : function(base_model, selector, url) {
		var that = this;

		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		setupCharts(function()
	    {
	    	that.fetchPortletsGraphData(url, function(data)
	        {

	            // Categories are created time
	            var categories = [];
	            var tempcategories=[];
	            var type = base_model.get("settings").type;
	            if(!type)
	            	type = 0;
	            var frequency= base_model.get("settings").frequency;
	            if(!frequency)
	            	frequency = 'daily';
	            // Data with deals
	            var series;
	            var AllData=[];
	            var sortedKeys = [];
	            $.each(data,function(k,v){
	                sortedKeys.push(k);
	            });
	            sortedKeys.sort();
	            var sortedData = {};
	            $.each(sortedKeys,function(index,value){
	                sortedData[''+value] = data[''+value];
	            });

	            var min_tick_interval = 1;
	            var dataLength = 0;
	            // Iterates through data and adds keys into
	            // categories
	            $.each(sortedData, function(k, v)
	            {
	            	var totalData=[];
	            	totalData.push(k);
	            	var total=0;
	                // Initializes series with names with the first
	                // data point
	                if (series == undefined)
	                {
	                    var index = 0;
	                    series = []; 
	                    $.each(v, function(k1, v1)
	                    {
	                    	
	                        var series_data = {};
	                        series_data.name = k1;
	                        series_data.data = [];
	                        series[index++] = series_data;
	                        //totalData.push(total);
	                    });
	                
	                }


	                // Fill Data Values with series data
	                $.each(v, function(k1, v1)
	                {
	                	total=total+v1;
	                    // Find series with the name k1 and to that,
	                    // push v1
	                    var series_data = find_series_with_name(series, k1);
	                    series_data.data.push(v1);
	                });
	                     totalData.push(total);
	                tempcategories.push(k*1000);
					dataLength++;
					AllData.push(totalData);
				});
					
					that.dateRangeonXaxis(sortedData,tempcategories,categories,frequency,dataLength);

	            if(Math.ceil((dataLength-1)/10)>0)
	            {
	                min_tick_interval = Math.ceil(dataLength/10);
	                if(min_tick_interval==3)
	                {
	                    min_tick_interval = 4;
	                }
	            }
	            if(series==undefined)
	            	 chartRenderforIncoming(selector,categories,name,'',min_tick_interval,type,series,AllData,0,30,base_model);
	            else
	            {
	            $.ajax({ type : 'GET', url : '/core/api/categories?entity_type=DEAL_SOURCE', dataType : 'json',
	            success: function(data){
	                $.each(data,function(index,deals){
	                    for(var i=0;i<series.length;i++){
	                        if(series[i].name=="0")
	                                series[i].name="Unknown";
	                        else if(deals.id==series[i].name){
	                            series[i].name=deals.label;
	                        }
	                            
	                    }
	                });
	                chartRenderforIncoming(selector,categories,'','',min_tick_interval,type,series,AllData,0,30,base_model);
	                } 
	            });
	        	}


	            // After loading and processing all data, highcharts are initialized
	            // setting preferences and data to show
	            
	        });
	    });
	},
	dateRangeonXaxis : function(sortedData, tempcategories, categories, frequency, dataLength) {
		var cnt = 0;
		$
				.each(
						sortedData,
						function(k, v) {
							var dte = new Date(
									tempcategories[cnt]);
							if (frequency != undefined) {
								if (frequency == "daily") {
									categories
											.push(Highcharts
													.dateFormat(
															'%e.%b',
															Date
																	.UTC(
																			dte
																					.getFullYear(),
																			dte
																					.getMonth(),
																			dte
																					.getDate()))
													+ '');
								} else if (frequency == "weekly") {
									if (cnt != dataLength - 1) {
										var next_dte = new Date(
												tempcategories[cnt + 1]);
										categories
												.push(Highcharts
														.dateFormat(
																'%e.%b',
																Date
																		.UTC(
																				dte
																						.getFullYear(),
																				dte
																						.getMonth(),
																				dte
																						.getDate()))
														+ ' - '
														+ Highcharts
																.dateFormat(
																		'%e.%b',
																		Date
																				.UTC(
																						next_dte
																								.getFullYear(),
																						next_dte
																								.getMonth(),
																						next_dte
																								.getDate() - 1)));
									} else {
										var end_date = new Date();
										categories
												.push(Highcharts
														.dateFormat(
																'%e.%b',
																Date
																		.UTC(
																				dte
																						.getFullYear(),
																				dte
																						.getMonth(),
																				dte
																						.getDate()))
														+ ' - '
														+ Highcharts
																.dateFormat(
																		'%e.%b',
																		Date
																				.UTC(
																						end_date
																								.getFullYear(),
																						end_date
																								.getMonth(),
																						end_date
																								.getDate())));
									}
								} else if (frequency == "monthly") {
									if (cnt != dataLength - 1) {
										var next_dte = new Date(
												tempcategories[cnt + 1]);
										var current_date = new Date();
										var from_date = '';
										var to_date = '';
										if (cnt != 0) {
											if (current_date
													.getFullYear() != dte
													.getFullYear()) {
												from_date = Highcharts
														.dateFormat(
																'%b.%Y',
																Date
																		.UTC(
																				dte
																						.getFullYear(),
																				dte
																						.getMonth(),
																				dte
																						.getDate()));
											} else {
												from_date = Highcharts
														.dateFormat(
																'%b',
																Date
																		.UTC(
																				dte
																						.getFullYear(),
																				dte
																						.getMonth(),
																				dte
																						.getDate()));
											}
											categories
													.push(from_date);
										} else {
											if (current_date
													.getUTCFullYear() != dte
													.getUTCFullYear()) {
												from_date = Highcharts
														.dateFormat(
																'%e.%b.%Y',
																Date
																		.UTC(
																				dte
																						.getFullYear(),
																				dte
																						.getMonth(),
																				dte
																						.getDate()));
											} else {
												from_date = Highcharts
														.dateFormat(
																'%e.%b',
																Date
																		.UTC(
																				dte
																						.getFullYear(),
																				dte
																						.getMonth(),
																				dte
																						.getDate()));
											}
											if (current_date
													.getUTCFullYear() != next_dte
													.getUTCFullYear()) {
												to_date = Highcharts
														.dateFormat(
																'%e.%b.%Y',
																Date
																		.UTC(
																				next_dte
																						.getFullYear(),
																				next_dte
																						.getMonth(),
																				next_dte
																						.getDate() - 1));
											} else {
												to_date = Highcharts
														.dateFormat(
																'%e.%b',
																Date
																		.UTC(
																				next_dte
																						.getFullYear(),
																				next_dte
																						.getMonth(),
																				next_dte
																						.getDate() - 1));
											}
											categories
													.push(from_date
															+ ' - '
															+ to_date);
										}
									} else {
										var current_date = new Date();
										var from_date = '';
										var to_date = '';
										var end_date = new Date();
										if (current_date
												.getUTCFullYear() != dte
												.getUTCFullYear()) {
											from_date = Highcharts
													.dateFormat(
															'%e.%b.%Y',
															Date
																	.UTC(
																			dte
																					.getFullYear(),
																			dte
																					.getMonth(),
																			dte
																					.getDate()));
											to_date = Highcharts
													.dateFormat(
															'%e.%b.%Y',
															Date
																	.UTC(
																			end_date
																					.getFullYear(),
																			end_date
																					.getMonth(),
																			end_date
																					.getDate()));
										} else {
											from_date = Highcharts
													.dateFormat(
															'%e.%b',
															Date
																	.UTC(
																			dte
																					.getFullYear(),
																			dte
																					.getMonth(),
																			dte
																					.getDate()));
											to_date = Highcharts
													.dateFormat(
															'%e.%b',
															Date
																	.UTC(
																			end_date
																					.getFullYear(),
																			end_date
																					.getMonth(),
																			end_date
																					.getDate()));
										}
										categories
												.push(from_date
														+ ' - '
														+ to_date);
									}
								}
								cnt++;
							}
						});
	},
taskDeviationGraphData : function(base_model, selector, url) {
		var groupByList = [];
		var splitByList = [];
		var splitByNamesList = [];
		var domainUserNamesList = [];
var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this
				.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							groupByList = data["groupByList"];
							splitByList = data["splitByList"];
							domainUserNamesList = data["domainUserNamesList"];
							var series = [];
							var CountData=[];
							var text = '';
							var colors;

							$.each(splitByList, function(index, splitByData) {
								if (splitByNamesList.length == 0)
									$.each(splitByData, function(key, value) {
										splitByNamesList.push(portlet_utility
												.getPortletNormalName(key));
									});
							});
							for ( var i = 0; i < splitByNamesList.length; i++) {
								var tempData = {};
								var splitByDataList = [];
								var splitByDataListCount = [];
								$
										.each(
												splitByList,
												function(index, splitByData) {
													$
															.each(
																	splitByData,
																	function(
																			key,
																			value) {
																		if (portlet_utility
																				.getPortletNormalName(key) == splitByNamesList[i]){
																			splitByDataListCount.push(value[0]);
																			
																			splitByDataList
																					.push(value[1]);
																				}
																	});
												});
								tempData.name = splitByNamesList[i];
								tempData.data = splitByDataList;
								series[i] = tempData;
								CountData[i]=splitByDataListCount;
							}
							text = "Average Deviation";

							var groupByNamesList = [];

							$.each(groupByList, function(index, name) {
								groupByNamesList[index] = portlet_utility
										.getPortletNormalName(name+'#'+index);
							});

							portlet_graph_utility.taskReportBarGraph(selector,
									groupByNamesList, series, text, base_model,
									domainUserNamesList,CountData,'In Seconds');

							portlet_utility.addWidgetToGridster(base_model);
						});
	},
	/**
	 * To fetch Visitors portlet data to render as pie graph
	 */
	webstatVisitsGraphData : function(base_model, selector, url) {
		var knownContacts = 0;
		var anonymous = 0;

		var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
		var topPos = 50 * sizey;
		if (sizey == 2 || sizey == 3)
			topPos += 50;
		$('#' + selector)
				.html(
						"<div class='text-center v-middle opa-half' style='margin-top:"
								+ topPos
								+ "px'><img src='"+updateImageS3Path("../flatfull/img/ajax-loader-cursor.gif")+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		this.fetchPortletsGraphData(
						url,
						function(data) {
							if (data.status == 403) {
								$('#' + selector)
										.html(
												"<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
								return;
							}
							knownContacts = data[0];
							anonymous = data[1];

							portlet_graph_utility.webstatVisitsPieGraph(
									selector, knownContacts,
									anonymous);

							portlet_utility.addWidgetToGridster(base_model);
						});
	},
};

var callschart=new Array();
var taskReport=new Array();
var portlet_graph_utility = {

	/**
	 * To display deals by milestone portlet as pie graph
	 */
	dealsByMilestonePieGraph : function(selector, milestonesList,
			milestoneValuesList, milestoneNumbersList) {
		setupCharts(function(){
							var emptyFlag = true;
							$.each(milestoneValuesList, function(index, value) {
								if (value > 0)
									emptyFlag = false;
							});
							if (milestonesList.length == 0 || emptyFlag) {
								$('#' + selector)
										.html(
												'<div class="portlet-error-message">No deals found</div>');
							} else {
								var data = [];
								$.each(milestonesList, function(index, value) {
									data.push([ value,
											milestoneValuesList[index] ]);
								});
								$('#' + selector)
										.highcharts(
												{
													chart : {
														type : 'pie',
														marginRight : 20
													},
													colors : [ '#7266ba',
															'#23b7e5',
															'#fad733',
															'#27c24c',
															'#f05050',
															"#aaeeee",
															"#ff0066",
															"#eeaaee",
															"#55BF3B",
															"#DF5353",
															"#7798BF",
															"#aaeeee" ],
													title : {
														text : ''
													},
													tooltip : {
														formatter : function() {
															return '<table>'
																	+ '<tr><td class="p-n">'
																	+ this.series.name
																	+ 's: </td>'
																	+ '<td class="p-n"><b>'
																	+ milestoneNumbersList[this.point.x]
																	+ '</b></td></tr>'
																	+ '<tr><td style="padding-right:1px">Total Value:'+' '+'</td>'
																	+ '<td class="p-n"><b>'
																	+ portlet_utility
																			.getPortletsCurrencySymbol()
																	+ ''
																	+ milestoneValuesList[this.point.x]
																			.toLocaleString()
																	+ '</b></td></tr>'
																	+ '</table>';
														},
														shared : true,
														useHTML : true,
														borderWidth : 1,
														backgroundColor : '#313030',
														shadow : false,
														borderColor : '#000',
														borderRadius : 3,
														style : {
															color : '#EFEFEF'
														}
													},
													plotOptions : {
														series : {
															borderWidth : 0
														},
														pie : {
															borderWidth : 0,
															innerSize : '35%',
															size:'45%',
															dataLabels : {
																enabled : true,
																useHTML : true,
																/*
																 * connectorWidth:
																 * 0,
																 */
																softConnector : true,
																formatter : function() {
																	return '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ this.point.name
																			+ '</b></span><br/>'
																			+ '<span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(this.point.percentage)
																			+ '%</b></span></div>';
																},
																/*
																 * format: '<b>{point.name}</b>:
																 * {point.percentage:.1f}',
																 */
																distance : 30,
																x : 2,
																y : -10
															},
															showInLegend : false
														}
													},
													series : [ {
														name : 'Deal',
														data : data
													} ],
																									});
							}
						});
	},

	/**
	 * To display contacts count by campaigns stats portlet as pie graph
	 */
	campaignStatsPieGraph : function(selector, campaignStatusList,
			campaignValuesList) {
		setupCharts(function(){
							var emptyFlag = true;
							$.each(campaignValuesList, function(index, value) {
								if (value > 0)
									emptyFlag = false;
							});
							if (campaignStatusList.length == 0 || emptyFlag) {
								$('#' + selector)
										.html(
												'<div class="portlet-error-message">No Subscribers Found</div>');
							} else {
								var data = [];
								$.each(campaignStatusList, function(index, value) {
									data.push([ value,
											campaignValuesList[index] ]);
								});
								$('#' + selector)
										.highcharts(
												{
													chart : {
														type : 'pie',
														marginRight : 20
													},
													colors : [ '#55BF3B',
															'#23b7e5',
															'#ff0000',
															'#27c24c',
															'#f05050',
															"#aaeeee",
															"#ff0066",
															"#eeaaee",
															"#7266ba",
															"#DF5353",
															"#7798BF",
															"#aaeeee" ],
													title : {
														text : ''
													},
													tooltip : {
														formatter : function() {
															return '<table>'
																	+ '<tr> <td class="p-n">'
																	+ '<b>'
																	+ campaignStatusList[this.point.x]
																	+ '</b> Subscribers</td></tr>'
																	+ '<tr><td class="p-n">Total Count: '
																	+ '<b> '
																	+ campaignValuesList[this.point.x].toLocaleString()
																	+ '</b></td></tr>'
																	+ '</table>';
														},
														shared : true,
														useHTML : true,
														borderWidth : 1,
														backgroundColor : '#313030',
														shadow : false,
														borderColor : '#000',
														borderRadius : 3,
														style : {
															color : '#EFEFEF'
														}
													},
													plotOptions : {
														series : {
															borderWidth : 0
														},
														pie : {
															borderWidth : 0,
															innerSize : '35%',
															size:'45%',
															dataLabels : {
																enabled : true,
																useHTML : true,
																/*
																 * connectorWidth:
																 * 0,
																 */
																softConnector : true,
																formatter : function() {
																	return '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ this.point.name
																			+ '</b></span><br/>'
																			+ '<span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(this.point.percentage)
																			+ '%</b></span></div>';
																},
																/*
																 * format: '<b>{point.name}</b>:
																 * {point.percentage:.1f}',
																 */
																distance : 30,
																x : 2,
																y : -10
															},
															showInLegend : false
														}
													},
													series : [ {
														name : 'Contact',
														data : data
													} ],
																									});
							}
						});
	},


	/**
	 * To display closers per person portlet as bar graph
	 */
	closuresPerPersonBarGraph : function(selector, catges, data, text, name, base_model) {
		setupCharts(function(){
			$('#' + selector).highcharts(
					{
						chart : {
							type : 'bar',
							marginRight : 20
						},
						title : {
							text : ''
						},
						xAxis : {
							categories : catges
						},
						yAxis : {
							min : 0,
							title : {
								text : text
							},
							allowDecimals : false
						},
						legend : {
							enabled : portlet_utility.is_legend_enable(base_model),
						},
						tooltip : {
							formatter : function() {
								return '<span class="text-xxs">'
										+ this.points[0].key + '</span>'
										+ '<table>'
										+ '<tr><td class="p-n" style="color:'
										+ this.points[0].series.color + ';">'
										+ this.points[0].series.name
										+ ': </td>' + '<td class="p-n"><b>'
										+ data[this.points[0].point.x]
										+ '</b></td></tr>' + '</table>';
							},
							shared : true,
							useHTML : true
						},
						plotOptions : {
							column : {
								pointPadding : 0.2,
								borderWidth : 0
							}
						},
						series : [ {
							name : name,
							data : data
						} ],
					});
		});
	},

	/**
	 * To display deals funnel portlet as funnel graph
	 */
	dealsFunnelGraph : function(selector, funnel_data, base_model) {
		var currency = '';
		var series_name = "Revenue";
		if (base_model && base_model.get("settings")["split-by"] && base_model.get("settings")["split-by"] == "count") {
			series_name = "Deals";
		}
		else {
			currency = portlet_utility.getPortletsCurrencySymbol();
		}
		setupCharts(function(){
						
							if (funnel_data == undefined
									|| (funnel_data != undefined && funnel_data.length == 0)) {
								$('#' + selector)
										.html(
												'<div class="portlet-error-message">No deals found</div>');
								return;
							}
							$('#' + selector)
									.highcharts(
											{
												chart : {
													type : 'funnel',
													marginLeft:-85,
													marginBottom: 20,
													className : 'deals-funnel-portlet'
												},
												colors : [ "#23b7e5",
														"#27c24c", "#7266ba",
														"#fad733", "#f05050",
														"#aaeeee", "#ff0066",
														"#eeaaee", "#55BF3B",
														"#DF5353" ],
												title : {
													text : ''
												},
												plotOptions : {
													series : {
														dataLabels : {
															enabled : true,
															useHTML : true,
															format : '<div class="text-center"><span style="color:{point.color}">{point.name}</span><br>'
																	+ '<span style="color:{point.color}">('
																	+ currency
																	+ '{point.y:,.0f})</span></div>',
															softConnector : true
														},
														neckWidth : '20%',
														neckHeight : '25%',

														// -- Other available
														// options
														height : '100%',
														width : '50%',
														borderWidth : 1,
														borderColor : 'white'
													}
												},
												tooltip : {
													pointFormat : '<span>{series.name}: <b>'
															+ currency
															+ '{point.y:,.0f}</b></span>',
													shared : true,
													useHTML : true,
													borderWidth : 1,
													backgroundColor : '#313030',
													shadow : false,
													borderColor : '#000',
													borderRadius : 3,
													style : {
														color : '#EFEFEF'
													}
												},
												series : [ {
													name : series_name,
													data : funnel_data
												} ],
											
											});
						});
	},

	/**
	 * To display emails sent portlet as bar graph
	 */
	emailsSentBarGraph : function(selector, domainUsersList, series,
			mailsCountList, mailsOpenedCountList, text, colors) {
		setupCharts(function(){
							$('#' + selector)
									.highcharts(
											{
												chart : {
													type : 'bar',
													marginRight : 20
												},
												title : {
													text : ''
												},
												xAxis : {
													categories : domainUsersList
												},
												yAxis : {
													min : 0,
													title : {
														text : text
													},
													allowDecimals : false
												},
												tooltip : {
													formatter : function() {
														return '<table>'
																+ '<tr><td class="p-n" style="color:'
																+ this.points[0].series.color
																+ ';">'
																+ this.points[0].series.name
																+ ': </td>'
																+ '<td class="p-n"><b>'
																+ mailsCountList[this.points[0].point.x]
																+ '</b></td></tr>'
																+ '<tr><td class="p-n" style="color:'
																+ this.points[1].series.color
																+ ';">'
																+ this.points[1].series.name
																+ ': </td>'
																+ '<td class="p-n"><b>'
																+ mailsOpenedCountList[this.points[1].point.x]
																+ '</b></td></tr>'
																+ '</table>';
													},
													shared : true,
													useHTML : true
												},
												plotOptions : {
													series : {
														stacking : 'normal'
													},
													column : {
														pointPadding : 0.2,
														borderWidth : 0
													}
												},
												series : series,
									
												colors : colors
											});
						});
	},

	/**
	 * To display growth graph portlet as area spline graph
	 */
	portletGrowthGraph : function(selector, series, base_model, categories,
			min_tick_interval) {
		var flag = true;
		if (base_model.get("settings").tags == "") {
			$('#' + selector)
					.html(
							"<div class='portlet-error-message'>Please <a href='#' id='"
									+ base_model.get("id")
									+ "-settings' class='portlet-settings text-info' dada-toggle='modal'>configure</a> the dashlet and add the Tags.</div>");
			flag = false;
		}
		if (flag) {
			setupCharts(function(){
				$('#' + selector).highcharts(
						{
							chart : {
								type : 'areaspline',
								marginRight : 20,
							// plotBorderWidth: 1,
							// plotBorderColor: '#F4F4F5'
							   events: {
							   		load: function(){
							   			console.log("load");
							   			portlet_utility.toggle_chart_legends(this, base_model);
							   		}, redraw : function(){
							   			console.log("redraw");
							   			portlet_utility.toggle_chart_legends(this, base_model);
							   		}
							   },
							},
							title : {
								text : ''
							},
							xAxis : {
								categories : categories,
								tickmarkPlacement : 'on',
								minTickInterval : min_tick_interval,
								gridLineWidth : 1,
								gridLineColor : '#F4F4F5',
								labels : {
									style : {
										color : '#98a6ad',
										fontSize : '11px'
									}
								},
								lineWidth : 0,
								tickWidth : 0
							},
							yAxis : {
								min : 0,
								title : {
									text : ''
								},
								gridLineWidth : 1,
								gridLineColor : '#F4F4F5',
								labels : {
									style : {
										color : '#98a6ad',
										fontSize : '11px'
									}
								}
							},
							plotOptions : {
								series : {
									borderWidth : 2,
									borderColor : '#23b7e5',
									marker : {
										symbol : 'circle'
									}
								},
								areaspline : {
									marker : {
										lineWidth : 1,
										lineColor : null, // inherit from
										// series
										radius : 2
									}
								}
							},
							series : series,
				
							tooltip : {
								borderWidth : 1,
								backgroundColor : '#313030',
								shadow : false,
								borderColor : '#000',
								borderRadius : 3,
								style : {
									color : '#EFEFEF'
								}
							},
							legend : {
								itemStyle : {
									fontSize : '10px',
									color : '#98a6ad'
								},
								borderWidth : 0,
								layout : 'vertical',
								floating : true,
								align : 'right',
								enabled:portlet_utility.is_legend_enable(base_model),
								verticalAlign : 'top',
								y: 30
							},
							colors : [ "#23b7e5", "#27c24c", "#7266ba",
									"#fad733", "#f05050", "#aaeeee", "#ff0066",
									"#eeaaee", "#55BF3B", "#DF5353" ],
						});
			});
		}
	},

	/**
	 * To display deals assigned portlet as bar graph
	 */
	dealsAssignedBarGraph : function(selector, catges, dealsCountList, base_model) {
		setupCharts(function(){
							$('#' + selector)
									.highcharts(
											{
												chart : {
													type : 'bar',
													marginRight : 20,
													events: {
												   		load: function(){
												   			console.log("load");
												   			portlet_utility.toggle_chart_legends(this, base_model);
												   		}, redraw : function(){
												   			console.log("redraw");
												   			portlet_utility.toggle_chart_legends(this, base_model);
												   		}
												   },
												},
												title : {
													text : ''
												},
												xAxis : {
													categories : catges
												},
												yAxis : {
													min : 0,
													title : {
														text : 'No. of deals assigned'
													},
													allowDecimals : false
												},
												legend : {
													enabled : portlet_utility.is_legend_enable(base_model),
												},
												tooltip : {
													formatter : function() {
														return '<span class="text-xxs">'
																+ this.points[0].key
																+ '</span>'
																+ '<table>'
																+ '<tr><td class="p-n" style="color:'
																+ this.points[0].series.color
																+ ';">'
																+ this.points[0].series.name
																+ ': </td>'
																+ '<td class="p-n"><b>'
																+ dealsCountList[this.points[0].point.x]
																+ '</b></td></tr>'
																+ '</table>';
													},
													shared : true,
													useHTML : true
												},
												plotOptions : {
													column : {
														pointPadding : 0.2,
														borderWidth : 0
													}
												},
												series : [ {
													name : 'Assigned Deals',
													data : dealsCountList
												} ],
									
											});
						});
	},

	/**
	 * To display calls per person portlet as bar graph
	 */
	callsPerPersonBarGraph : function(selector, domainUsersList, series,
			totalCallsCountList, callsDurationList, text, colors,
			domainUserImgList,base_model) {
			var column_position = $('#'+selector).parent().attr('data-col'), row_position = $('#'+selector).parent().attr('data-row');
		var pos = '' + column_position + '' + row_position;
		var	height=domainUsersList.length*30+($('#'+selector).height()-30);
		if(selector=='calls-chart')
			height=domainUsersList.length*30+120;
		setupCharts(function(){
							
							callschart[parseInt(pos)]=new Highcharts.Chart({
								chart: {
									renderTo : selector,
						            type: 'bar',
						            marginRight: 100,
						            plotBorderWidth: 1,
						            plotBorderColor: '#F4F4F5',
						            height:height,
						            events: {
								   		load: function(){
								   			console.log("load");
								   			if(base_model!=undefined)
								   			portlet_utility.toggle_chart_legends(this, base_model);
								   		}, redraw : function(){
								   			console.log("redraw");
								   			if(base_model!=undefined)
								   			portlet_utility.toggle_chart_legends(this, base_model);
								   		}
								   },
						        },
						        title: {
						            text: ''
						        },
						        xAxis: {
						            categories: domainUserImgList,
						            labels: {
						                formatter: function() {
						                	var userIndex=0;
						                	for(var i=0;i<domainUserImgList.length;i++){
						                		if(this.value==domainUserImgList[i] && domainUserImgList[i].substring(0,8)!="no image")
						                			userIndex=i;
						                		else if(this.value==domainUserImgList[i] && domainUserImgList[i].substring(0,8)=="no image")
							                			userIndex=parseInt(domainUserImgList[i].substring(9,10));
						                	}
						                	if(this.value!=undefined && this.value!="" && this.value.substring(0,8)!="no image")
						                		return '<img src="'+this.value+'" alt="" style="vertical-align: middle; width: 25px; height: 25px;border-radius:15px;" title="'+domainUsersList[userIndex]+'"/>';
						                	else
						                		return '<img src="'+gravatarImgForPortlets(25)+'" alt="" style="vertical-align: middle; width: 25px; height: 25px;border-radius:15px;" title="'+domainUsersList[userIndex]+'"/>';
						                },
						                style : {
						    				color : '#98a6ad',
						    				fontSize : '11px'
						    			},
						                useHTML: true,
						            },
						            gridLineWidth : 0,
						    		gridLineColor : '#F4F4F5',
						    		lineWidth : 0,
						    		tickWidth : 0
						        },
						        yAxis: {
						            min: 0,
						            title: {
						                text: text
						            },
						            allowDecimals: false,
						            gridLineWidth : 1,
						    		gridLineColor : '#F4F4F5',
						    		labels : {
						    			style : {
						    				color : '#98a6ad',
						    				fontSize : '11px'
						    			}
						    		}
						        },
						       tooltip: {
						        	formatter: function(){
						        		var tt = '';
						        		if(text=="Calls Duration (Sec)")
						        			tt = '<table>' + 
						        					'<tr><td  class="b-b-none"><u style="text-decoration:none;border-bottom:1px solid">'+domainUsersList[this.points[0].point.x]+'</u></td></tr>'+	
					        		              '<tr><td style="color:'+this.points[0].series.color+';padding:0">'+this.points[0].series.name+':&nbsp; </td>' +
					        		              '<td style="padding:0"><b>'+portlet_utility.getPortletsTimeConversion(callsDurationList[this.points[0].point.x])+'</b></td></tr>' +
					        		              '<tr><td style="color:'+this.points[0].series.color+';padding:0">Calls:&nbsp; </td>' + 
					        		        	  '<td style="padding:0"><b>'+totalCallsCountList[this.points[0].point.x]+'</b></td></tr>' +
					        		        	  '</table>';
						        		else if(text=="Average Call Duration (Sec)"){
						        			
						        			tt += '<table>';
						        			if(this.points[0]!=undefined && this.points[0].series!=undefined){
						        				tt += 	'<tr><td class="b-b-none"><u style="text-decoration:none;border-bottom:1px solid">'+domainUsersList[this.points[0].point.x]+'</u></td></tr>'+	
						        							'<tr><td style="color:'+this.points[0].series.color+';padding:0">'+this.points[0].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+portlet_utility.getPortletsTimeConversion(Math.round(this.points[0].point.y))+'</b></td></tr>';
						        			}
						        			tt += '</table>';
						        			
						        		}else{
						        			tt += '<table><tr><td class="b-b-none"><u style="text-decoration:none;border-bottom:1px solid">'+domainUsersList[this.points[0].point.x]+'</u></td></tr>';
						        			if(this.points[0]!=undefined && this.points[0].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[0].series.color+';padding:0">'+this.points[0].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[0].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[1]!=undefined && this.points[1].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[1].series.color+';padding:0">'+this.points[1].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[1].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[2]!=undefined && this.points[2].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[2].series.color+';padding:0">'+this.points[2].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[2].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[3]!=undefined && this.points[3].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[3].series.color+';padding:0">'+this.points[3].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[3].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[4]!=undefined && this.points[4].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[4].series.color+';padding:0">'+this.points[4].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[4].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[5]!=undefined && this.points[5].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[5].series.color+';padding:0">'+this.points[5].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[5].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[6]!=undefined && this.points[6].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[6].series.color+';padding:0">'+this.points[6].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[6].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[7]!=undefined && this.points[7].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[7].series.color+';padding:0">'+this.points[7].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[7].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[8]!=undefined && this.points[8].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[8].series.color+';padding:0">'+this.points[8].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[8].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[9]!=undefined && this.points[9].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[9].series.color+';padding:0">'+this.points[9].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[9].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[10]!=undefined && this.points[10].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[10].series.color+';padding:0">'+this.points[10].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[10].point.y+'</b></td></tr>';
						        			}
						        			if(this.points[11]!=undefined && this.points[11].series!=undefined){
						        				tt += 	'<tr><td style="color:'+this.points[11].series.color+';padding:0">'+this.points[11].series.name+':&nbsp; </td>' +
							                      		'<td style="padding:0"><b>'+this.points[11].point.y+'</b></td></tr>';
						        			}
						        			tt += '<tr><td>Total:&nbsp; </td><td class="b-b-none">'+totalCallsCountList[this.points[0].point.x]+'</td></tr></table>';
						        		}
						        		return tt;
						        	},
						            shared: true,
						            useHTML: true,
						            borderWidth : 1,
						    		backgroundColor : '#313030',
						    		shadow : false,
						    		borderColor: '#000',
						    		borderRadius : 3,
						    		style : {
						    			color : '#EFEFEF'
						    		}
						        },
						        plotOptions: {
						        	series: {
						        		pointWidth: 10,
						                stacking: 'normal',
						                borderWidth : 0
						            },
						            column: {
						                pointPadding: 0.5,
						                borderWidth: 0
						            },
						            bar : {
						    			shadow : false
						    		}
						        },
						        series: series,
							    colors : [ "#27c24c", "#23b7e5", "#f05050", "#7266ba", '#fad733','#FF9900','#7AF168','#167F80','#0560A2','#D3E6C7','#7798BF'],
							    legend : {
									itemStyle : {
										fontSize : '10px',
										color : '#98a6ad'
									},
									borderWidth : 0,
									layout : 'vertical',
									floating : true,
									align : 'right',
									enabled:portlet_utility.is_legend_enable(base_model),
									verticalAlign : 'top',
									y:30
								}
						    });
							
						});
	},
	
	
	/**
	 * To plot calls per person data  as a pie graph
	 */
	callsByPersonPieGraph :function(selector,categoryList,valueList){

	setupCharts(function(){
		var emptyFlag = true;
		$.each(valueList,function(index,value){
			if(value>0)
				emptyFlag = false;
		});
		if(categoryList.length==0 || emptyFlag){
			if(selector == 'calls-chart-user'){
				$('#'+selector).html('<div class="portlet-error-message" style="font-size: 14px;font-style: normal;padding-top: 174px">No Calls Found</div>');	
			}
			else if(selector === 'calls-chart'){
				$('#'+selector).html('<div class="portlet-error-message" style="padding: 190px;font-style: normal">No Calls Found</div>');	
			}
			else{
				$('#'+selector).html('<div class="portlet-error-message">No Calls Found</div>');
			}
			
		}else{
			var data = [];
			$.each(categoryList,function(index,value){
				data.push([value,valueList[index]]);
			});
			$('#'+selector).highcharts({
		        chart: {
		            type: 'pie',
		            marginRight: 20
		        },
		        colors : ["#27c24c", "#23b7e5", "#f05050", "#7266ba", '#fad733','#FF9900','#7AF168','#167F80','#0560A2','#D3E6C7','#7798BF'],
		        title: {
		            text: ''
		        },
		        tooltip: {
		        	formatter: function(){
		        		return '<table>' + 
		        		        '<tr><td class="p-n">Total '+categoryList[this.point.x]+':&nbsp; </td>' + 
		        		        '<td class="p-n"><b>'+ valueList[this.point.x]+'</b></td></tr>' +
		        		        '</table>';
		        	},
		            shared: true,
		            useHTML: true,
		            borderWidth : 1,
		    		backgroundColor : '#313030',
		    		shadow : false,
		    		borderColor: '#000',
		    		borderRadius : 3,
		    		style : {
		    			color : '#EFEFEF'
		    		}
		        },
		        plotOptions: {
		        	series: {

		                borderWidth : 0
		            },
		            pie: {
		            	size:'50%',
		            	borderWidth: 0,
		            	innerSize :'65%',
		            	dataLabels: {
		            		enabled: true,
		            		useHTML: true,
		            		/*connectorWidth: 0,*/
		            		softConnector: true,
		    	            formatter: function () {
		    	            	return 	'<div class="text-center"><span style="color:'+this.point.color+'"><b>'+this.point.name+'</b></span><br/>' +
		    	            			'<span style="color:'+this.point.color+'"><b>'+Math.round(this.point.percentage)+'%</b></span></div>';
		    	            },
		            		/*format: '<b>{point.name}</b>: {point.percentage:.1f}',*/
		                    distance: 30,
		                },
		                showInLegend: false
		            }
		        },
		        series: [{
		            name: "",
		            data: data
		        }],

		    });
		}
	});
	},
	

	/**
	 * To display task report portlet as bar graph
	 */
	taskReportBarGraph : function(selector, groupByList, series, text,
			base_model, domainUserNamesList,CountData,yaxistitle) {
			var column_position = $('#'+selector).parent().attr('data-col'), row_position = $('#'+selector).parent().attr('data-row');
		var pos = '' + column_position + '' + row_position;

		setupCharts(function(){
							taskReport[parseInt(pos)]=new Highcharts.Chart({
												colors : [ "#23b7e5",
														"#27c24c", "#7266ba",
														"#fad733", "#f05050",
														"#aaeeee", "#f4a460",
														"#eeaaee", "#55BF3B",
														"#DF5353" ],
												chart : {
													renderTo:selector,
													type : 'bar',
													marginRight : 80,
													height:groupByList.length*30+($('#'+selector).height()-30),
													events: {
												   		load: function(){
												   			console.log("load");
												   			portlet_utility.toggle_chart_legends(this, base_model);
												   		}, redraw : function(){
												   			console.log("redraw");
												   			portlet_utility.toggle_chart_legends(this, base_model);
												   		}
												   },
												},
												title : {
													text : ''
												},
												
												xAxis : {
													categories : groupByList,
													labels : {
														formatter : function() {
															if(base_model.get('name')=='Average Deviation')
															{
																var userIndex = 0;
																for ( var i = 0; i < groupByList.length; i++) {
																	if (this.value == groupByList[i]
																			&& groupByList[i]
																					.substring(
																							0,
																							8) != "no image")
																		userIndex = i;
																	else if (this.value == groupByList[i]
																			&& groupByList[i]
																					.substring(
																							0,
																							8) == "no image")
																		userIndex = parseInt(groupByList[i]
																				.substring(
																						9,
																						10));
																}
																if (this.value != undefined
																		&& this.value != ""
																		&& this.value
																				.substring(
																						0,
																						8) != "no image")
																	return '<img src="'
																			+ this.value.split('#')[0]
																			+ '" alt="" style="vertical-align: middle; width: 25px; height: 25px;border-radius:15px;" title="'
																			+ domainUserNamesList[userIndex]
																			+ '"/>';
																else
																	return '<img src="'
																			+ gravatarImgForPortlets(25)
																			+ '" alt="" style="vertical-align: middle; width: 25px; height: 25px;border-radius:15px;" title="'
																			+ domainUserNamesList[userIndex]
																			+ '"/>';
															}
																else{
															if (base_model
																	.get('settings')["group-by"] == "user") {
																var userIndex = 0;
																for ( var i = 0; i < groupByList.length; i++) {
																	if (this.value == groupByList[i]
																			&& groupByList[i]
																					.substring(
																							0,
																							8) != "no image")
																		userIndex = i;
																	else if (this.value == groupByList[i]
																			&& groupByList[i]
																					.substring(
																							0,
																							8) == "no image")
																		userIndex = parseInt(groupByList[i]
																				.substring(
																						9,
																						10));
																}
																if (this.value != undefined
																		&& this.value != ""
																		&& this.value
																				.substring(
																						0,
																						8) != "no image")
																	return '<img src="'
																			+ this.value.split('#')[0]
																			+ '" alt="" style="vertical-align: middle; width: 25px; height: 25px;border-radius:15px;" title="'
																			+ domainUserNamesList[userIndex]
																			+ '"/>';
																else
																	return '<img src="'
																			+ gravatarImgForPortlets(25)
																			+ '" alt="" style="vertical-align: middle; width: 25px; height: 25px;border-radius:15px;" title="'
																			+ domainUserNamesList[userIndex]
																			+ '"/>';
															} else {
																if (this.value.length > 12) {
																	return this.value
																			.slice(
																					0,
																					12)
																			+ '...';
																} else {
																	return this.value;
																}
															}
														}
														},
														style : {
															color : '#98a6ad',
															fontSize : '11px'
														},
														useHTML : true
													},
													gridLineWidth : 1,
													gridLineColor : '#F4F4F5',
													lineWidth : 0,
													tickWidth : 0
												},
												yAxis : {
													min : 0,
													title : {
														text : yaxistitle
													},
													allowDecimals : false,
													gridLineWidth : 1,
													gridLineColor : '#F4F4F5',
													labels : {
														style : {
															color : '#98a6ad',
															fontSize : '11px'
														}
													}
												},
												plotOptions : {
													series : {
														stacking : 'normal',
														borderWidth : 0
													},
													column : {
														pointPadding : 0.2,
														borderWidth : 0
													},
													bar : {
														shadow : false
													}
												},
												series : series,
										
												tooltip : {
													borderWidth : 1,
													backgroundColor : '#313030',
													shadow : false,
													borderColor : '#000',
													borderRadius : 3,
													style : {
														color : '#EFEFEF'
													},
													formatter : function() {
														if( base_model.get('name')=='Average Deviation'){
															var userIndex = 0;
															for ( var i = 0; i < groupByList.length; i++) {
																if (this.key == groupByList[i])
																	userIndex = i;
															}
															return '<div>'
																	+ '<div class="p-n">'
																	+ domainUserNamesList[userIndex]
																	+ ' </div>'
																	+ '<div class="p-n" style="color:'
																	+ this.series.color
																	+ ';">'
																	+ 'Deviation Time'
																	+ ':'
																	+ portlet_utility.getPortletsTimeConversion(Math.round(this.y))
																	+ ' </div>'
																	+ '<div class="p-n" style="color:'
																	+ this.series.color
																	+ ';">'
																	+ this.series.name
																	+ ': '
																	+ portlet_utility.getNumberWithCommasForPortlets(CountData[this.series.index][this.point.x])
																	+ ' </div>'
																	+ '</div>';
															
														}
														
													else	if (base_model
																.get('settings')["group-by"] == "user") {
															var userIndex = 0;
															for ( var i = 0; i < groupByList.length; i++) {
																if (this.key == groupByList[i])
																	userIndex = i;
															}
															return '<div>'
																	+ '<div class="p-n">'
																	+ domainUserNamesList[userIndex]
																	+ ' </div>'
																	+ '<div class="p-n" style="color:'
																	+ this.series.color
																	+ ';">'
																	+ this.series.name
																	+ ':'
																	+ this.y
																	+ ' </div>'
																	+ '</div>';
														} else
															return '<div>'
																	+ '<div class="p-n" style="color:'
																	+ this.series.color
																	+ ';">'
																	+ this.x
																	+ ' </div>'
																	+ '<div class="p-n" style="color:'
																	+ this.series.color
																	+ ';">'
																	+ this.series.name
																	+ ':'
																	+ this.y
																	+ ' </div>'
																	+ '</div>';
													},
													useHTML : true
												},
												legend : {
													itemStyle : {
														fontSize : '10px',
														color : '#98a6ad'
													},
													borderWidth : 0,
													layout : 'vertical',
													floating : true,
													align : 'right',
													verticalAlign : 'top',
													y:30,
													enabled:portlet_utility.is_legend_enable(base_model),
													labelFormatter : function() {
														if (this.name.length > 12) {
															return this.name
																	.slice(0,
																			12)
																	+ '...';
														} else {
															return this.name;
														}
													}
												}
											});
						});
	},

	/**
	 * To display revenue graph portlet as area spline graph
	 */
	portletDealRevenueGraph : function(selector, series, base_model, categories) {
		setupCharts(function(){
							if (series == undefined && categories != undefined
									&& categories.length == 0) {
								$('#' + selector)
										.html(
												'<div class="portlet-error-message">No deals found</div>');
								return;
							}
							$('#' + selector)
									.highcharts(
											{
												chart : {
													type : 'areaspline',
													marginRight : 20,
													events: {
												   		load: function(){
												   			console.log("load");
												   			portlet_utility.toggle_chart_legends(this, base_model);
												   		}, redraw : function(){
												   			console.log("redraw");
												   			portlet_utility.toggle_chart_legends(this, base_model);
												   		}
												   },

												},
												title : {
													text : ''
												},
												xAxis : {
													categories : categories,
													gridLineWidth : 1,
													gridLineColor : '#F4F4F5',
													labels : {
														style : {
															color : '#98a6ad',
															fontSize : '11px'
														},
														formatter : function() {
															return Highcharts
																	.dateFormat(
																			'%b',
																			this.value);
														},
													},
													lineWidth : 0,
													tickWidth : 0,
													tickmarkPlacement : 'on'
												},
												yAxis : {
													min : 0,
													title : {
														text : ''
													},
													gridLineWidth : 1,
													gridLineColor : '#F4F4F5',
													labels : {
														style : {
															color : '#98a6ad',
															fontSize : '11px'
														}
													}
												},
												plotOptions : {
													series : {
														borderWidth : 2,
														borderColor : '#23b7e5',
														marker : {
															symbol : 'circle'
														}
													},
													areaspline : {
														marker : {
															lineWidth : 1,
															lineColor : null, // inherit
															// from
															// series
															radius : 2
														}
													}
												},
												series : series,
										
												tooltip : {
													borderWidth : 1,
													backgroundColor : '#313030',
													shadow : false,
													borderColor : '#000',
													borderRadius : 3,
													style : {
														color : '#EFEFEF'
													},
													formatter : function() {
														return '<div>'
																+ '<div class="p-n">'
																+ Highcharts
																		.dateFormat(
																				'%b',
																				this.x)
																+ '</div>'
																+ '<div class="p-n"><font color='
																+ this.series.color
																+ '>'
																+ this.series.name
																+ '</font>: '
																+ portlet_utility
																		.getPortletsCurrencySymbol()
																+ ''
																+ portlet_utility
																		.getNumberWithCommasForPortlets(this.y)
																+ '</div>'
																+ '</div>';
													},
													useHTML : true
												},
												legend : {
													itemStyle : {
														fontSize : '10px',
														color : '#98a6ad'
													},
													borderWidth : 0,
													layout : 'vertical',
													floating : true,
													align : 'right',
													enabled:portlet_utility.is_legend_enable(base_model),
													verticalAlign : 'top',
													y : 30,
												},
												colors : [ "#23b7e5",
														"#27c24c", "#7266ba",
														"#fad733", "#f05050",
														"#aaeeee", "#ff0066",
														"#eeaaee", "#55BF3B",
														"#DF5353" ],
											});
						});
	},

	/**
	 * To display emails opened portlet as pie graph
	 */
	emailsOpenedPieChart : function(selector, data, emailsSentCount,
			emailsOpenedCount) {
setupCharts(function(){
							if (emailsSentCount == 0 && emailsOpenedCount == 0) {
								$('#' + selector)
										.html(
												'<div class="portlet-error-message">No email activity</div>');
								return;
							}

							$('#' + selector)
									.highcharts(
											{
												chart : {
													type : 'pie',
													marginLeft : -150,
													height : 150
												},
												colors : [ '#e8eff0', '#27C24C' ],
												title : {
													text : ''
												},
												tooltip : {
													enabled : false
												},
												legend : {
													layout : 'vertical',
													align : 'right',
													verticalAlign : 'top',
													x : -20,
													y : 40,
													labelFormatter : function() {
														if (this.name == "Emails Opened")
															return '<div><span>Opened:'
																	+ emailsOpenedCount
																	+ '</span></div>';
														else if (this.name == "Emails Sent")
															return '<div><span>Sent:'
																	+ emailsSentCount
																	+ '</span></div>';

													},
													itemStyle : {
														color : "#ccc",
														cursor : '',
														fontSize : "12px",
														fontWeight : "bold"
													},
													borderWidth : 0,
													floating : true,
												},
												plotOptions : {
													series : {
														borderWidth : 0,
														states : {
															hover : {
																enabled : false
															}
														}
													},
													pie : {
														borderWidth : 0,
														innerSize : 95,
														dataLabels : {
															enabled : true,
															useHTML : true,
															connectorWidth : 0,
															formatter : function() {
																var ff = '';
																if (this.point.name == "Emails Opened")
																	ff = '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(
																							this.point.percentage)
																					.toString()
																			+ '%</b></span></div>';
																return ff;
															},
															/*format: '<b>{point.name}</b>: {point.percentage:.1f}',*/
															distance : -55
														},
														showInLegend : true,
														enableMouseTracking : false,
														point : {
															events : {
																legendItemClick : function() {
																	return false;
																}
															}
														}
													}
												},
												series : [ {
													name : 'Deal',
													data : data
												} ],
												
											});
						});
	},

	/**
	 * To display campaigns stats portlet as pie graph 
	 */
	campstatsPieChart : function() {
	setupCharts(function(){
							var color;
							//var innersize='100%';
							var dis = 0;
							if (data[1][0] == 'Emails Opened')
								color = 'rgb(250, 215, 51)';
							if (data[1][0] == 'Emails Clicked')
								color = 'rgb(18, 209, 18)';
							if (data[1][0] == 'Emails Unsubscribed')
								color = 'rgb(240, 80, 80)';
							$(selector)
									.find('.graph')
									.highcharts(
											{
												chart : {
													type : 'pie',
													labelsEnabled : false,
													autoMargins : false,
													marginTop : 0,
													marginBottom : -6,
													marginLeft : 0,
													marginRight : 0,
													pullOutRadius : 0,
													events : {
														load : function(e) {
															console.log(this);
															this.options.plotOptions.series.dataLabels.distance = ((this.chartHeight + this.chartWidth) / 7.5)
																	* -1;
															this.series[0]
																	.update(this.options);
														},
														redraw : function(e) {
															console.log(this);
															var pos_left, pos_top;
															var chart = this;
															if ($(selector)
																	.parents(
																			'.portlet_body')
																	.height() <= 200) {
																pos_top = chart.chartHeight / 2.72;
															} else if ($(
																	selector)
																	.parents(
																			'.portlet_body')
																	.height() > 200
																	&& $(
																			selector)
																			.parents(
																					'.portlet_body')
																			.height() <= 450) {
																pos_top = chart.chartHeight / 2.16;
															}

															else {
																pos_top = chart.chartHeight / 2.04;
															}
															if ($(selector)
																	.parents(
																			'.portlet_body')
																	.width() <= 405)
																pos_left = chart.chartWidth / 2.00;
															else if ($(selector)
																	.parents(
																			'.portlet_body')
																	.width() > 405
																	&& $(
																			selector)
																			.parents(
																					'.portlet_body')
																			.width() <= 836) {
																pos_left = chart.chartWidth / 2.05;

															}

															else {
																pos_left = chart.chartWidth / 2.00;

															}

															chart.series[0].data[1].dataLabel
																	.attr({
																		x : pos_left,
																		y : pos_top
																	});
														}
													},

												},
												colors : [ '#e8eff0', color ],
												title : {
													text : ''
												},
												tooltip : {
													enabled : false
												},
												legend : {
													enabled : false,
												},
												plotOptions : {
													series : {
														dataLabels : {
															align : 'center',
															enabled : true,
															useHTML : true,
															connectorWidth : 0,
															formatter : function() {
																var ff = '';

																if (this.point.name == "Emails Opened")
																	ff = '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(
																							this.point.percentage)
																					.toString()
																			+ '%</b></span></div>';

																if (this.point.name == "Emails Clicked")
																	ff = '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(
																							this.point.percentage)
																					.toString()
																			+ '%</b></span></div>';
																if (this.point.name == "Emails Unsubscribed")
																	ff = '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(
																							this.point.percentage)
																					.toString()
																			+ '%</b></span></div>';

																return ff;

															},
															/*format: '<b>{point.name}</b>: {point.percentage:.1f}',*/
															distance : 0,
														},
														borderWidth : 0,
														states : {
															hover : {
																enabled : false
															}
														}
													},
													pie : {
														borderWidth : 0,
														size : '100%',
														innerSize : '100%',
													},
													showInLegend : true,
													enableMouseTracking : false,
													point : {
														events : {
															legendItemClick : function() {
																return false;
															}
														}
													}
												},
												series : [ {
													// name: 'Deal',
													data : data
												} ],
										
											});
						});
	},
	dealGoalsPieGraph : function(selector, data1,data2,colors)
	{
			var series = [];
							series.push([ "Goals Left",
									data2 - data1 ]);
							series.push([ "Won", data1 ]);
							//portlet_graph_utility.emailsOpenedPieChart(selector,series,data1,data2);
							setupCharts(function(){
							$('#' + selector)
									.highcharts(
											{
												chart : {
													type : 'pie',
													backgroundColor:'transparent',

												},
												colors : colors,
												title : {
													text : ''
												},
												tooltip : {
													backgroundColor : '#313030',
													borderColor : '#000',
													borderRadius : 3,
													/*style : {
														color : '#EFEFEF'
													},*/
													enabled : true,
													formatter:  function(){
														
													return  '<div class="p-n"><b><font color='+this.point.color+'>'+ this.point.name +' '+ Math.round(this.point.percentage).toString()+'%</font></b></div>';
					                        
												},
												useHTML : true,
												},
												legend : {
													itemStyle : {
														fontSize : '10px',
														color : '#98a6ad'
													},
													borderWidth : 0,
													layout : 'vertical',
													floating : true,
													align : 'right',
													verticalAlign : 'top',
													symbolHeight: 0,
													symbolWidth: 0,
													symbolRadius: 0,
																	labelFormatter : function()
											{
												if(this.name=="Won"){
												var s = '<div> ' + (this.percentage)
														.toFixed(2) + '%<b></div>';
												return s;
											}
											}, 
												},
												plotOptions : {
													series : {
														borderWidth : 0,
														states : {
															hover : {
																enabled : false
															}
														}
													},
													pie : {
														borderWidth : 0,
														//innerSize : 50,
														dataLabels : {
															enabled : false,
															
														},
														showInLegend : true,
														//enableMouseTracking : false,
														point : {
															events : {
																legendItemClick : function() {
																	return false;
																}
															}
														}
													}
												},
												exporting :
												{
													enabled : false,
												},
												series : [ {
													name : 'Goal',
													data : series
												} ],
											
											});
						});
	},

	/**
	 * To display contacts count by Visitors portlet as pie graph
	 */
	webstatVisitsPieGraph : function(selector, known,
			anonymous) {
		var series = [];
							series.push([ "Known",
									known]);
							series.push([ "Unknown", anonymous ]);
        var totalVisits = known+anonymous;

		setupCharts(function(){
			if (known == 0 && anonymous == 0) {
								$('#' + selector)
										.html(
												'<div class="portlet-error-message">No Visits Found</div>');
								return;
							}
								$('#' + selector)
										.highcharts(
												{
													chart : {
														type : 'pie',
														marginRight : 20
													},
													colors : [ '#55BF3B',
															'#23b7e5',
															'#ff0000',
															'#27c24c',
															'#f05050',
															"#aaeeee",
															"#ff0066",
															"#eeaaee",
															"#7266ba",
															"#DF5353",
															"#7798BF",
															"#aaeeee" ],
													title : {
														text : ''
													},
													tooltip : {
														formatter : function() {
															return '<table>'
																	+ '<tr> <td class="p-n">'
																	+ (this.point.name)
																	+ ' Visits:<b> '+(this.point.y)
																	+ '</b></td></tr>'
																	+ '<tr><td class="p-n">Total Visits: '
																	+ '<b> '
																	+ totalVisits
																	+ '</b></td></tr>'
																	+ '</table>';
														},
														shared : true,
														useHTML : true,
														borderWidth : 1,
														backgroundColor : '#313030',
														shadow : false,
														borderColor : '#000',
														borderRadius : 3,
														style : {
															color : '#EFEFEF'
														}
													},
													plotOptions : {
														series : {
															borderWidth : 0
														},
														pie : {
															borderWidth : 0,
															innerSize : '35%',
															size:'45%',
															dataLabels : {
																enabled : true,
																useHTML : true,
																/*
																 * connectorWidth:
																 * 0,
																 */
																softConnector : true,
																formatter : function() {
																	return '<div class="text-center"><span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ this.point.name
																			+ '</b></span><br/>'
																			+ '<span style="color:'
																			+ this.point.color
																			+ '"><b>'
																			+ Math
																					.round(this.point.percentage)
																			+ '%</b></span></div>';
																},
																/*
																 * format: '<b>{point.name}</b>:
																 * {point.percentage:.1f}',
																 */
																distance : 30,
																x : 2,
																y : -10
															},
															showInLegend : false
														}
													},
													series : [ {
														name : 'Visits',
														data : series
													} ],
																									});
						});
	},


};
/** Listener function for Event handling* */
function initializePortletsListeners() {

	$('.modal-footer')
			.off("click")
			.on(
					'click',
					'.portlet-settings-save-modal',
					function(e) {
						e.preventDefault();
						var scrollPosition = $(window).scrollTop();
						var form_id = $(this).parent().prev().find(
								'form:visible').attr('id');
						var modal_id = $(this).parent().parent().parent()
								.parent().attr('id');
						if (!isValidForm('#' + form_id))
							return false;
						$(this).attr('disabled', true);
						$(this).text('Saving...');

						var el = this.id;
						var flag = true;
						var json = {};
						var obj = {};
						var portletType = $('#portlet-type', $('#' + modal_id))
								.val();
						var portletName = $('#portlet-name', $('#' + modal_id))
								.val();
						json = serializeForm(form_id);
						if (portletType == "CONTACTS"
								&& portletName == "Growth Graph") {
							var tags = '';
							if ($('#addPortletBulkTags').val() != "") {
								var tag = $('#addPortletBulkTags').val();
								if ($('#portlet-ul-tags > li').length == 0)
									$('#portlet-ul-tags')
											.append(
													"<li data='"
															+ tag
															+ "' class='tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block'>'"
															+ tag
															+ "'<a tag='"
															+ tag
															+ "' id='remove_tag' class='close m-l-xs'>&time</a></li>");
								else
									$('#portlet-ul-tags > li:last')
											.after(
													"<li data='"
															+ tag
															+ "' class='tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block'>'"
															+ tag
															+ "'<a tag='"
															+ tag
															+ "' id='remove_tag' class='close m-l-xs'>&time</a></li>");
							}
							$('#portlet-ul-tags > li').each(function() {
								if ($(this).is(':last'))
									tags += $(this).attr('data');
								else
									tags += $(this).attr('data') + ',';
							});
							json['tags'] = tags;
						}

						if (portletType == "USERACTIVITY"
								&& portletName == "Leaderboard") {
							var tempJson = {};
							var tempJson1 = [];
							$('#category-list', $('#' + el).parent().parent())
									.find('option')
									.each(
											function() {
												if ($(this).is(':selected'))
													tempJson['' + $(this).val()] = true;
												else
													tempJson['' + $(this).val()] = false;
											});
							$('#user-list', $('#' + el).parent().parent())
									.find('option:selected').each(function() {
										tempJson1.push($(this).val());
									});
							json['duration'] = $('#duration',
									$('#' + el).parent().parent()).val();
							json['category'] = tempJson;
							json['user'] = tempJson1;
						}

						var idVal = $(
								'#'
										+ $(this).attr('id').split(
												"-save-modal")[0]).parent()
								.find('.portlet_body').attr('id');
						var portlet = Portlets_View.collection.get(el
								.split("-save-modal")[0]);
						var column_position = portlet.get('column_position');
						var row_position = portlet.get('row_position');
						portlet.set({
							"prefs" : JSON.stringify(json)
						}, {
							silent : true
						});

						portlet.url = "core/api/portlets";
						var model = new BaseModel();
						model.url = 'core/api/portlets';

						if (flag) {
							model
									.save(
											portlet.toJSON(),
											{
												success : function(data) {

													hidePortletSettingsAfterSave(modal_id);
													$(window).scrollTop(
															scrollPosition);
													scrollPosition = 0;
													var model = data.toJSON();
													Portlets_View.collection
															.get(model)
															.set(
																	new BaseModel(
																			model));
													var pos = ''
															+ data
																	.get("column_position")
															+ ''
															+ data
																	.get("row_position");
													portlet_utility
															.getInnerViewOfPortlet(
																	data,
																	$('#portlet-res'));

													setPortletContentHeight(data);
													$('#' + data.get('id'))
															.parent()
															.find('div:last')
															.after(
																	'<span class="gs-resize-handle gs-resize-handle-both"></span>');
												},
											});
						}
					});

	$('#portletsTaskReportSettingsModal')
			.off("change")
			.on(
					'change',
					'#group-by-task-report',
					function(e) {

						$('#tasks-task-report').trigger("change");

						$('#split-by-task-report > option')
								.each(
										function(e1) {
											if ($(this).val() == $(
													'#group-by-task-report')
													.val())
												$(this).hide();
											else {
												if ($('#tasks-task-report')
														.val() == "completed-tasks"
														&& $(this).val() != "status") {
													$(this).show();
													$(this).attr("selected",
															true);
												} else if ($(
														'#tasks-task-report')
														.val() == "all-tasks") {
													$(this).show();
													$(this).attr("selected",
															true);
												}
											}
										});
						if ($('#group-by-task-report').val() == "status") {
							$('#tasks-task-report > option#all-tasks').attr(
									"selected", true);
							$('#tasks-control-group').hide();
						} else
							$('#tasks-control-group').show();
					});

	$('.modal-content')
			.off("change")
			.on(
					'change',
					'#tasks-task-report',
					function(e) {
						var taskreportStatus = $('#split-by-task-report > option#status');
						if ($('#tasks-task-report').val() == "completed-tasks") {
							if (taskreportStatus.is(':selected'))
								taskreportStatus.attr("selected", false);
							taskreportStatus.hide();
						} else
							taskreportStatus.show();
					});

			$('#portletsPendingDealsSettingsModal').off('change', '#track');
	$('#portletsPendingDealsSettingsModal').on('change', '#track', function(e)
	{
		var el = $(this).closest('form');
		var track = $('#track', el).val();
		if (track!='anyTrack')
		{
			
			$.ajax({
				type : 'GET',
				url : '/core/api/milestone/'+track,
				dataType : 'json',
				success : function(data) {
					var milestonesList=data.milestones.split(",");
					$('#milestone').html('');
					var lost=data.lost_milestone;
					var won= data.won_milestone;
					if(milestonesList.length > 1)
					{
						$('#milestone', el).html('<option value="anyMilestone">Any</option>');
					}
					$.each(milestonesList, function(index, milestone){
						if(lost!=null && won!=null){
							if(!(milestone==lost) && !(milestone==won) )
							
						$('#milestone', el).append('<option value="'+milestone+'">'+milestone+'</option>');
					}
						else
						{
							if(!(milestone=='Won') && !(milestone=='Lost') )
							
						$('#milestone', el).append('<option value="'+milestone+'">'+milestone+'</option>');
						}
					});
				}
			});
		}
		else
		{
			$('#milestone', el).html('<option value="anyMilestone">Any</option>');
		}
		
	});

	$('.gridster-portlets').off("mouseover").on(
			'mouseover',
			'.stats_report_portlet_body',
			function(e) {
				if ($('.stats_report_portlet_body').parent().find(
						'.gs-resize-handle')) {
					$('.stats_report_portlet_body').parent().find(
							'.gs-resize-handle').remove();
				}
			});

	

	$('.portlet_body').off("change").on(
			'change',
			'.onboarding-check',
			function(e) {
				var that = $(this);
				var model_id = $(this).parent().parent().parent().find(
						'.portlets').attr('id');
				var model = Portlets_View.collection.get(model_id);
				var json1 = {};
				$(this).parent().parent().find('label').each(function() {
					var json2 = {};
					if ($(this).find('input:checkbox').is(':checked')) {
						json2["done"] = true;
						json2["skip"] = false;
					} else {
						json2["done"] = false;
						json2["skip"] = false;
					}
					json1["" + $(this).attr('value')] = json2;
				});
				model.set({
					'prefs' : JSON.stringify(json1)
				}, {
					silent : true
				});
				// Saves new width and height in server
				$.ajax({
					type : 'POST',
					url : '/core/api/portlets/save-onboarding-prefs',
					data : JSON.stringify(model.toJSON()),
					contentType : "application/json; charset=utf-8",
					dataType : 'json',
					success : function() {
						if (that.find('input:checkbox').is(':checked')) {
							that.parent().find('span').css("text-decoration",
									"line-through");
						} else {
							that.parent().find('span').css("text-decoration",
									"none");
						}
					}
				});

			});

	$('.modal-body').off("click").on('click', '#category-select-all',
			function(e) {
				e.preventDefault();
				$('#category-list').multiSelect('select_all');
			});

	$('.modal-content').off("click").on('click', '#category-select-none',
			function(e) {
				e.preventDefault();
				$('#category-list').multiSelect('deselect_all');
			});

	$('.modal-body').on('click', '#user-select-all', function(e) {
		e.preventDefault();
		$('#user-list').multiSelect('select_all');
	});

	$('.modal-content').on('click', '#user-select-none', function(e) {
		e.preventDefault();
		$('#user-list').multiSelect('deselect_all');
	});

	$('.modal-body').on('click', '#calls-user-select-all', function(e) {
		e.preventDefault();
		$('#calls-user-list').multiSelect('select_all');
	});

	$('.modal-content').on('click', '#calls-user-select-none', function(e) {
		e.preventDefault();
		$('#calls-user-list').multiSelect('deselect_all');
	});

	$('.modal-body').on('click', '#task-report-user-select-all', function(e) {
		e.preventDefault();
		$('#task-report-user-list').multiSelect('select_all');
	});

	$('.modal-content').on('click', '#task-report-user-select-none',
			function(e) {
				e.preventDefault();
				$('#task-report-user-list').multiSelect('deselect_all');
			});

	$('.gridster-portlets').on('mouseover', '.portlet_body_calendar',
			function(e) {
				$(this).find('.portlet_header_icons').removeClass('vis-hide');
				$(this).find('.fc-button').css('visibility', 'visible');
			});

	$('.gridster-portlets').on('mouseout', '.portlet_body_calendar',
			function(e) {
				$(this).find('.portlet_header_icons').addClass('vis-hide');
				$(this).find('.fc-button').css('visibility', 'hidden');
			});

	$('.portlet_body_calendar').on('click', '.fc-button-content',
			function(e) {
				App_Portlets.eventCalendar=$(this).parents('.portlet_body_calendar');
			});

	$('.events_show')
			.off(
					'click',
					'.minical-portlet-event')
	$('.events_show')
			.on(
					'click',
					'.minical-portlet-event',
					function(e) {
						App_Portlets.currentPosition = ''
								+ $(this).parents('.gs-w').find(
										'.column_position').text().trim()
								+ ''
								+ $(this).parents('.gs-w')
										.find('.row_position').text().trim();
						App_Portlets.currentPortletName = 'Mini Calendar';

						var id = $(this).attr('id');
						if (id && !isNaN(id)) {
							var events_array = $(
									'#calendar_container',
									$(this).parents('.portlet_body_calendar'))
									.fullCalendar(
											'clientEvents',
											id,
											function(event) {
												return (event.start >= date && event.start < endDate);
											});
							// $('#'+id,$('#calendar_container')).trigger('click');
							var model = events_array[0];
							App_Portlets.currentEventObj = model;
							var eventsURL = '/core/api/events/'
									+ events_array[0].id;
							var event;
							$
									.getJSON(
											eventsURL,
											function(doc) {
												event = doc;
												var start = getDate(event.start);
												var end = getDate(event.end);
												if (!model)
													return;
												if (model.color == "#f05050"
														|| model.color == "red")
													model.color = "red";
												else if (model.color == "#7266ba"
														|| model.color == "#36C")
													model.color = "#36C";
												else
													model.color = "green";

												$("#updateActivityModal").html(getTemplate("update-activity-modal"));
												
												// Deserialize
												deserializeForm(
														model,
														$("#updateActivityForm"));
												$('#current_div','#updateActivityModal').val("Mini Calendar");
												$("#update-event-date-1").val(
														getDateInFormat(start));
												$("#update-event-date-2").val(
														getDateInFormat(end));
												// Set time for update Event
												$('#update-event-time-1')
														.val(
																(start
																		.getHours() < 10 ? "0"
																		: "")
																		+ start
																				.getHours()
																		+ ":"
																		+ (start
																				.getMinutes() < 10 ? "0"
																				: "")
																		+ start
																				.getMinutes());
												$('#update-event-time-2')
														.val(
																(end.getHours() < 10 ? "0"
																		: "")
																		+ end
																				.getHours()
																		+ ":"
																		+ (end
																				.getMinutes() < 10 ? "0"
																				: "")
																		+ end
																				.getMinutes());

												// hide end date & time for all
												// day events
												if (model.allDay) {
													$("#update-event-date-2")
															.closest('.row')
															.hide();
													$('#update-event-time-1')
															.closest(
																	'.control-group')
															.hide();
												} else {
													$('#update-event-time-1')
															.closest(
																	'.control-group')
															.show();
													$("#update-event-date-2")
															.closest('.row')
															.show();
												}

												if (model.type == "WEB_APPOINTMENT"
														&& (model.start
																.getTime() / 1000) > parseInt(new Date()
																.getTime() / 1000)) {
													$("[id='event_delete']")
															.attr("id",
																	"delete_web_event");
													web_event_title = model.title;
													if (model.contacts.length > 0) {
														var firstname = getPropertyValue(
																model.contacts[0].properties,
																"first_name");
														if (firstname == undefined)
															firstname = "";
														var lastname = getPropertyValue(
																model.contacts[0].properties,
																"last_name");
														if (lastname == undefined)
															lastname = "";
														web_event_contact_name = firstname
																+ " "
																+ lastname;
													}
												} else {
													$("[id='delete_web_event']")
															.attr("id",
																	"event_delete");
												}

												if (model.description) {
													var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
													$("#event_desc").html(
															description);
													$("textarea#description")
															.val(
																	model.description);
												} else {
													var desc = '<div class="row-fluid">'
															+ '<div class="control-group form-group m-b-none">'
															+ '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>'
															+ '<div class="controls event_discription hide">'
															+ '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>'
															+ '</div></div></div>'
													$("#event_desc").html(desc);
												}
												// Fills owner select element
												populateUsersInUpdateActivityModal(model);

												// Show edit modal for the event
												$("#updateActivityModal")
														.modal('show');


												$(
														'#' + id,
														$('#calendar_container'))
														.trigger('click');
												return false;

											});
						}
					});

	$('.events_show').off(
			'click',
			'.minical-portlet-event-add');
	$('.events_show').on(
			'click',
			'.minical-portlet-event-add',
			function(e) {
				// Shows a new event
				App_Portlets.currentPosition = ''
						+ $(this).parents('.gs-w').find('.column_position')
								.text().trim()
						+ ''
						+ $(this).parents('.gs-w').find('.row_position').text()
								.trim();
				App_Portlets.currentPortletName = 'Mini Calendar';
				var start = new Date(parseInt($(this).attr('id')));
				$('#activityModal').html(getTemplate("new-event-modal")).modal('show');
				highlight_event();

				// Set Date for Event
				// var dateFormat = 'mm/dd/yyyy';
				$('#task-date-1').val(getDateInFormat(start));
				$("#event-date-1").val(getDateInFormat(start));
				$("#event-date-2").val(getDateInFormat(start));
				$('#current_div','#activityModal').val("Mini Calendar");


				// Set Time for Event
				// if ((start.getHours() == 00) && (start.getHours() == 00) &&
				// (start.getMinutes() == 00))
				$('#event-time-1').val('');
				$('#event-time-2').val('');
			});

	$('#portletDeleteModal').off("click").on(
			"click",
			'.portlet-delete-modal',
			function(e) {
				e.preventDefault();

				var portlet = Portlets_View.collection.get($(this).attr('id'));
				/*
				 * Sends Delete request with portlet name as path parameter, and
				 * on success fetches the portlets to reflect the changes
				 * is_added, to show add portlet in the view instead of delete
				 * option
				 */
				$.ajax({
					type : 'DELETE',
					url : '/core/api/portlets/' + portlet.get("id"),
					contentType : "application/json; charset=utf-8",

					success : function(data) {

						Portlets_View.collection.remove(portlet);

						gridster.remove_widget($('#' + portlet.get("id"))
								.parent(), false);

						setTimeout(function() {
							var change=gridster.$changed.attr('id', 'ui-id-'
									+ gridster.$changed.attr('data-col') + '-'
									+ gridster.$changed.attr('data-row'));
							var models=[];
							change.each(function(){

								var model_id = $(this).find('.portlets').attr('id');
					
					var model = Portlets_View.collection.get(model_id);
					if(model!=undefined){
					model.set({ 'column_position' : parseInt($(this).attr("data-col")) }, { silent : true });
					model.set({ 'row_position' : parseInt($(this).attr("data-row")) }, { silent : true });

					models.push({ id : model.get("id"), column_position : parseInt($(this).attr("data-col")), row_position : parseInt($(this).attr("data-row")) });
							}
							});

							// Saves new positions in server
				$.ajax({ type : 'POST', url : '/core/api/portlets/positions', data : JSON.stringify(models),
					contentType : "application/json; charset=utf-8", dataType : 'json' });
						}, 500);

						$('#' + portlet.get("id")).parent().remove();
						if(portlet.get('portlet_route')!='DashBoard' && isNaN(portlet.get('portlet_route')))
						{
							if ($('.gridster-portlets > div').length == 0)
							$('#no-portlets').parents('.route_Portlet').hide();
						}
						if ($('.gridster-portlets > div').length == 0)
							$('#no-portlets').show();

						$('#portletDeleteModal').modal('hide');

					},
					dataType : 'json'
				});

			});

	$('#dashlet_heading').off('click', '#tutotial_modal');
	$('#dashlet_heading').on('click', '#tutotial_modal', function(e) {
		e.preventDefault();

		$('#tutorialModal').html(getTemplate("tutorial-modal"));
		$('#tutorialModal').modal("show");
	});

	$(
			'.portlet_body #portlets-contacts-model-list > tr, #portlets-companies-model-list > tr, #portlets-contacts-email-opens-model-list > tr')
			.off();
	$('.portlet_body')
			.on(
					"click",
					'#portlets-contacts-model-list > tr, #portlets-companies-model-list > tr, #portlets-contacts-email-opens-model-list > tr',
					function(e) {
						var id = $(this).find(".data").attr("data");
						App_Contacts.navigate("contact/" + id, {
							trigger : true
						});
					});

	$('.portlet_body .email-details').off();
	$('.portlet_body').on('click', '.email-details', function(e) {
		e.preventDefault();
		var data = $(this).closest('a').attr("data");

		portlet_utility.getActivityObject(data, function(resp) {

			console.log(resp);
			getTemplate("infoModal", resp, undefined, function(template_ui) {
				if (!template_ui)
					return;

				var emailinfo = $(template_ui);
				emailinfo.modal('show');
			}, null);
		});
	});

	$('.portlet_body .activity-event-edit').off();
	$('.portlet_body').on('click', '.activity-event-edit', function(e) {
		e.preventDefault();
		var data = $(this).closest('a').attr("data");

		getEventObject(data, function(resp) {
			update_event_activity(resp);
		});

	});
	$('.portlet_body #portlets-opportunities-model-list > tr').off();
	$('.portlet_body').on(
			"click",
			'#portlets-opportunities-model-list > tr',
			function(e) {

				/*
				 * if(e.target.attributes[0].name!="href"){ e.preventDefault();
				 * App_Portlets.currentPosition =
				 * ''+$(this).parents('.gs-w').find('.column_position').text().trim()+''+$(this).parents('.gs-w').find('.row_position').text().trim();
				 * updateDeal($(this).data()); }
				 */
				var hrefFlag = false;
				if (e.target.attributes != undefined
						&& e.target.attributes != null
						&& e.target.attributes.length == 0)
					hrefFlag = true;
				$.each(e.target.attributes, function() {
					if (this.name == "href")
						hrefFlag = true;
				});

				if (!hrefFlag) {

					// code for navigating deal details page
					var id = $(this).find(".data").attr("data");
					App_Deal_Details.navigate("deal/" + id, {
						trigger : true
					});
				}
			});

//$('.portlet_body #portlets-events-model-list > tr').off('click');
$('.portlet_body')
			.off(
					"click",
					'#portlets-events-model-list > tr')
	$('.portlet_body')
			.on(
					"click",
					'#portlets-events-model-list > tr',
					function(e) {

						var hrefFlag = false;
						if (e.target.attributes
								&& e.target.attributes.length == 0)
							hrefFlag = true;
						$.each(e.target.attributes, function() {
							if (this.name == "href")
								hrefFlag = true;
						});

						if (!hrefFlag) {

							App_Portlets.currentPosition = ''
									+ $(this).parents('.gs-w').find(
											'.column_position').text().trim()
									+ ''
									+ $(this).parents('.gs-w').find(
											'.row_position').text().trim();
							var id = $(this).find(".data").attr("data");
							var model = $(this).data().collection.get(id);
							if (isNaN(id))
								return;

							$("#updateActivityModal").html(getTemplate("update-activity-modal"));
       
							// Deserialize
							deserializeForm(model.toJSON(),
									$("#updateActivityForm"));

							var startDate = new Date(model.get('start') * 1000);
							var endDate = new Date(model.get('end') * 1000)
							// Set time for update Event
							$('#current_div',"#updateActivityModal").val("Events Dashlet");
							$('#update-event-time-1')
									.val(
											(startDate.getHours() < 10 ? "0"
													: "")
													+ startDate.getHours()
													+ ":"
													+ (startDate.getMinutes() < 10 ? "0"
															: "")
													+ startDate.getMinutes());
							$('#update-event-time-2').val(
									(endDate.getHours() < 10 ? "0" : "")
											+ endDate.getHours()
											+ ":"
											+ (endDate.getMinutes() < 10 ? "0"
													: "")
											+ endDate.getMinutes());

							// Set date for update Event
							var dateFormat = CURRENT_USER_PREFS.dateFormat;
							$("#update-event-date-1").val(
									startDate.format(dateFormat));
							$("#update-event-date-2").val(
									endDate.format(dateFormat));

							// Hide end date & time for all day events
							if (model.toJSON().allDay) {
								$("#update-event-date-2").closest('.row')
										.hide();
								$('#update-event-time-1').closest(
										'.control-group').hide();
							} else {
								$('#update-event-time-1').closest(
										'.control-group').show();
								$("#update-event-date-2").closest('.row')
										.show();
							}

							if (model.toJSON().type == "WEB_APPOINTMENT"
									&& parseInt(model.toJSON().start) > parseInt(new Date()
											.getTime() / 1000)) {
								$("[id='event_delete']").attr("id",
										"delete_web_event");
								web_event_title = model.toJSON().title;
								if (model.toJSON().contacts.length > 0) {
									var firstname = getPropertyValue(model
											.toJSON().contacts[0].properties,
											"first_name");
									if (firstname == undefined)
										firstname = "";
									var lastname = getPropertyValue(model
											.toJSON().contacts[0].properties,
											"last_name");
									if (lastname == undefined)
										lastname = "";
									web_event_contact_name = firstname + " "
											+ lastname;
								}
							} else {
								$("[id='delete_web_event']").attr("id",
										"event_delete");
							}

							// Fills owner select element
							populateUsersInUpdateActivityModal(model.toJSON());
							if (model.toJSON().description) {
								var description = '<label class="control-label"><b>Description </b></label><div class="controls"><textarea id="description" name="description" rows="3" class="input form-control" placeholder="Add Description"></textarea></div>'
								$("#event_desc").html(description);
								$("textarea#description").val(
										model.toJSON().description);
							} else {
								var desc = '<div class="row-fluid">'
										+ '<div class="control-group form-group m-b-none">'
										+ '<a href="#" id="add_event_desctiption"><i class="icon-plus"></i> Add Description </a>'
										+ '<div class="controls event_discription hide">'
										+ '<textarea id="description" name="description" rows="3" class="input form-control w-full col-md-8" placeholder="Add Description"></textarea>'
										+ '</div></div></div>'
								$("#event_desc").html(desc);
							}

							// Show edit modal for the event
							$("#updateActivityModal").modal('show');
							return false;
						}
					});

	$('.portlet_body').on(
			"click",
			'#portlets-tasks-model-list > tr',
			function(e) {

				var hrefFlag = false;
				if (e.target.tagName.toLowerCase() == "a"
						|| e.target.tagName.toLowerCase() == "i"
						|| e.target.tagName.toLowerCase() == "input")
					hrefFlag = true;
				/*
				 * if(e.target.tagName.toLowerCase()=="a") hrefFlag = true;
				 */
				$.each(e.target.attributes, function() {
					if (this.name == "href")
						hrefFlag = true;
				});

				if (!hrefFlag) {
					var id = $(this).find(".data").attr("data");
					App_Tasks.navigate("task/" + id, {
						trigger : true
					});
				}
			});

	$('.portlet_body')
			.on(
					"click",
					'.portlets-tasks-select',
					function(e) {
						
						e.stopPropagation();
						if ($(this).is(':checked')) {

							// Complete
							var taskId = $(this).attr('data');

							var column_pos = $(this).parentsUntil('.gs-w')
									.last().parent().find('.column_position')
									.text().trim();
							var row_pos = $(this).parentsUntil('.gs-w').last()
									.parent().find('.row_position').text()
									.trim();
							var pos = column_pos + '' + row_pos;

							complete_task(
									taskId,
									App_Portlets.tasksCollection[parseInt(pos)].collection,
									$(this).closest('tr'));

							if ($(this).parentsUntil('table').last().find(
									'tr:visible').length == 1) {
								$(this)
										.parentsUntil('table')
										.parent()
										.parent()
										.html(
												'<div class="portlet-error-message">No tasks found.</div>');
							}
						}
					});

	$('.gridster-portlets').off("click").on("click", '.portlet-settings', function(e) {
		e.preventDefault();

		portlet_utility.showPortletSettings(this.id);
	});

	$('.gridster-portlets').on(
			'mouseover',
			'.goals_portlet_body',
			function(e) {
				if ($('.goals_portlet_body').parent().find(
						'.gs-resize-handle')) {
					$('.goals_portlet_body').parent().find(
							'.gs-resize-handle').remove();
				}
			});
	
	$('#dashlet_heading .user-defined-dashboard').off("click");
	$('#dashlet_heading').on("click", ".user-defined-dashboard", function(e){
		e.preventDefault();

		var dashboard_name = _agile_get_prefs("dashboard_"+CURRENT_DOMAIN_USER.id);
	    var id = $(this).attr("id");
	    $('.user-defined-dashboard').parent().removeClass("active");
	    $(this).parent().addClass("active");
	    if(id != $('#dashboard-name').attr("data-value")){
	    	App_Portlets.DashboardPortlets=new Array();
		    if($(this).hasClass("predefined-dashboard") && dashboard_name && dashboard_name != "Dashboard"){
				e.preventDefault();
				_agile_delete_prefs("dashboard_"+CURRENT_DOMAIN_USER.id);
				loadPortlets("DashBoard", $('#content'));
		    }
		    else if(!$(this).hasClass("predefined-dashboard") && dashboard_name && dashboard_name != id){
				e.preventDefault();
				_agile_set_prefs("dashboard_"+CURRENT_DOMAIN_USER.id, id);
				gridster = undefined;
				loadPortlets(id, $('#content'));
		    }
		    else if(!$(this).hasClass("predefined-dashboard")){
				e.preventDefault();
				_agile_set_prefs("dashboard_"+CURRENT_DOMAIN_USER.id, id);
				gridster = undefined;
				loadPortlets(id, $('#content'));
		    }
		    $('#dashboard-name').text($(this).text());
		    $('#dashboard-name').attr("data-value", id);
		    $('#dashboard-name').attr("title", $(this).attr("title"));
		    $.each(CURRENT_USER_DASHBOARDS, function(index, value){
		    	if(id == this.id){
		    		$('#dashboard-desc').text(this.description);
		    		$('#dashboard-desc').attr("title", this.description);
		    	}
		    });
		    if(id == "Dashboard")
		    {
		    	$('#dashboard-desc').text("Welcome to Agile CRM");
		    	$('#dashboard-desc').attr("title", "");
		    	$('#dashboard-name').attr("title", "");
		    }
	    }
	});
		
			
}

/** 
 *Listener function for Event handling
 */
function initializeAddPortletsListeners() {

	//$('#ms-category-list', elData).remove();


	$('.col-md-3')
			.on(
					"mouseenter",
					'.show_screeshot',
					function(e) {

						var p_name = $(this).attr('id');
						var image;
						var placement = "right";
						var image_url_json = {
							"FilterBased" : updateImageS3Path("flatfull/img/dashboard_images/My-contacts.png"),
							"EmailsOpened" : updateImageS3Path("flatfull/img/dashboard_images/Email-opened.png"),
							"GrowthGraph" : updateImageS3Path("flatfull/img/dashboard_images/Tag-Graph.png"),
							"PendingDeals" : updateImageS3Path("flatfull/img/dashboard_images/Pending-Deals.png"),
							"DealsByMilestone" : updateImageS3Path("flatfull/img/dashboard_images/Milestone.png"),
							"DealsFunnel" : updateImageS3Path("flatfull/img/dashboard_images/Deals-Funnel.png"),
							"Agenda" : updateImageS3Path("flatfull/img/dashboard_images/Events.png"),
							"TodayTasks" : updateImageS3Path("flatfull/img/dashboard_images/Task.png"),
							"CallsPerPerson" : updateImageS3Path("flatfull/img/dashboard_images/Calls.png"),
							"AgileCRMBlog" : updateImageS3Path("flatfull/img/dashboard_images/Agile-Blog.png"),
							"TaskReport" : updateImageS3Path("flatfull/img/dashboard_images/Task-report.png"),
							"StatsReport" : updateImageS3Path("flatfull/img/dashboard_images/stats.png"),
							"Leaderboard" : updateImageS3Path("flatfull/img/dashboard_images/Leaderboard.png"),
							"RevenueGraph" : updateImageS3Path("flatfull/img/dashboard_images/Revenue-graph.png"),
							"AccountDetails" : updateImageS3Path("flatfull/img/dashboard_images/account-information.png"),
							"MiniCalendar" : updateImageS3Path("flatfull/img/dashboard_images/Mini-Calendar.jpg"),
							"UserActivities" : updateImageS3Path("flatfull/img/dashboard_images/User-Activities.png"),
							"Campaignstats" : updateImageS3Path("flatfull/img/dashboard_images/Campaign-stats-new.jpg"),
							"Campaigngraph" : updateImageS3Path("flatfull/img/dashboard_images/Campaign-status.jpg"),
							"DealGoals" : updateImageS3Path("flatfull/img/dashboard_images/Quota.png"),
							"IncomingDeals" : updateImageS3Path("flatfull/img/dashboard_images/incoming-deals-new.png"),
							"LostDealAnalysis" : updateImageS3Path("flatfull/img/dashboard_images/lost-deal-analysis-new.png"),
							"AverageDeviation" :  updateImageS3Path("flatfull/img/dashboard_images/Average_deviation.png"),
                            "WebstatVisits" : updateImageS3Path("flatfull/img/dashboard_images/Webstat-Visits.png"),
							"Referralurlstats" : updateImageS3Path("flatfull/img/dashboard_images/Refferalurl-Stats-new.png"),
						};
						var placements_json = {
							"GrowthGraph" : "left",
							"DealsFunnel" : "left",
							"CallsPerPerson" : "left",
							"TaskReport" : "left",
							"RevenueGraph" : "left",
							"MiniCalendar" : "left",
							"UserActivities" : "left",
							"Campaignstats" : "",
							"LostDealAnalysis" : "left",
							"Referralurlstats" :"left"
						};
						if (placements_json[p_name]) {
							placement = "left";
						}

						$(this).popover(
								{
									"rel" : "popover",
									"trigger" : "hover",
									"placement" : placement,
									"html" : "true",
									"content" : function() {
										return '<img src='
												+ image_url_json[p_name] + '>';

									}
								});
						$(this).popover('show');
					});

$('.show_screeshot').off('click touchstart').on(
			"click touchstart",
			'.add-portlet-direct',
			function() {
				var route=[];
				var url='core/api/portlets/add';

													route.push('DashBoard');
												
				var forAll=false;
				clickfunction($(this),url,forAll,route);
			});
	$('.col-md-3').off('click touchstart').on('click touchstart',
			'.add_to_all',
			function() {
				var route=[];
			route.push('DashBoard');
				var forAll=true;
				var url='core/api/portlets/addforAll';
				clickfunction($(this),url,forAll,route);
				
			});
	
	$('#portlets-add-listener').on('click','.configure-portlets',function(e){
		e.preventDefault();
		  
					//var route=$(this).attr("route");
					//route=route.substr(1,route.length-2);
					//var routes=route.split(',');
		var portlet_type = $(this).attr("portlet_type");
				var p_name = $(this).attr("portlet_name");

				var dashlet_JSON = {};
				dashlet_JSON["name"] = p_name;
				
				$("#portletStreamModalNew").html(getTemplate('portletStreamModalInfo', dashlet_JSON));
				

					  
					
			

				head.js(LIB_PATH + 'lib/jquery.multi-select.js', function() {
						$('#ms-route-list' ).remove();
				$('#route-list' , $('#portletStreamModalNew')).multiSelect();
				$('#ms-route-list .ms-selection').children('ul')
						.addClass('multiSelect').attr("name", "route-list")
						.attr("id", "route");
				$('#ms-route-list .ms-selectable .ms-list').css(
						"height", "200px");
				$('#ms-route-list .ms-selection .ms-list').css(
						"height", "200px");
				/*$('#ms-route-list').addClass(
						'portlet-category-ms-container');*/

				/*$('#ms-dashboard-list' ).remove();
				$('#dashboard-list' , $('#portletStreamModal')).multiSelect();
				$('#ms-dashboard-list .ms-selection').children('ul').addClass('multiSelect').attr("name", "dashboard-list").attr("id", "dashboard");
				$('#ms-dashboard-list .ms-selectable .ms-list').css("height", "105px");
				$('#ms-dashboard-list .ms-selection .ms-list').css("height", "105px");
				$('#ms-dashboard-list').addClass('portlet-category-ms-container');*/

			});
				$(".add-portlet").attr('portlet_type',
				portlet_type);
		$(".add-portlet").attr('portlet_name',p_name);
		$(".add_to_all").attr('portlet_type',
				portlet_type);
		$(".add_to_all").attr('portlet_name',p_name);
		$("#portletStreamModalNew").modal('show');
		
	});

	$('#portletStreamModalNew').on('shown.bs.modal', function(event){
		insideAddListener();
	});


}

function insideAddListener()
{

	 $('.modal-content').off('click', '#route-select-all');
  $('.modal-content').on('click', '#route-select-all',
      function(e) {
        e.preventDefault();
        $('#route-list').multiSelect('select_all');
      });
  $('.modal-content').off('click', '#route-select-none');
  $('.modal-content').on('click', '#route-select-none',
      function(e) {
        e.preventDefault();
        $('#route-list').multiSelect('deselect_all');
      });
  
    $('.modal-content').off('click', '.add-portlet');
		$('.modal-content').on(
			"click",
			'.add-portlet',
			function() {
				var id=$(this).parents('.modal-footer').prev().find("form:visible").attr("id");
				 if (!isValidForm("#" + id)) {
           			 return false
       			 }
				var route=[];
				var url='core/api/portlets/add';
				$('#route-list', $(this).parents('.modal'))
									.find('option')
									.each(
											function() {
												if ($(this).is(':selected'))
													route.push($(this).val());
												
											});
				var forAll=false;
				clickfunction($(this),url,forAll,route);
			});
		
	$('.modal-footer').off('click touchstart').on('click touchstart',
			'.add_to_all',
			function() {
				var id=$(this).parents('.modal-footer').prev().find("form:visible").attr("id");
				 if (!isValidForm("#" + id)) {
           			 return false
       			 }
				var route=[];
				$('#route-list', $(this).parents('.modal'))
									.find('option')
									.each(
											function() {
												if ($(this).is(':selected'))
													route.push($(this).val());
												
											});
				var forAll=true;
				var url='core/api/portlets/addforAll';
				clickfunction($(this),url,forAll,route);
				
			});

	$('.modal-content').on(
			"change",
			'#route-list',
			function() {
				var is_add_for_all_disable = false;
				$(this).parent().find('ul#route > li').each(function(){
					if($(this).hasClass("ms-elem-selected") && $(this).hasClass("user-dashboard")) {
						is_add_for_all_disable = true;
					}
				});

				if(is_add_for_all_disable) {
					$('.add_to_all',$('#portletStreamModalNew')).attr("disabled", true);
				}else {
					$('.add_to_all',$('#portletStreamModalNew')).attr("disabled", false);
				}
			});
	$('.modal-content').on(
			"click",
			'ul[name="route-list"] > li',
			function() {
				$('.add_to_all',$('#portletStreamModalNew')).attr("disabled", false);
			});
}
function clickfunction(that,url,forAll,route){

	$("#portletStreamModalNew").modal('hide');
	$('.modal-backdrop').hide();
	var portlet_type = that.attr("portlet_type");
				var p_name = that.attr("portlet_name");

				var json = portlet_utility.getDefaultPortletSettings(
						portlet_type, p_name);

				var obj = {};
				obj.name = p_name;
				var curDate = new Date();
				obj.portlet_type = portlet_type;
				var max_row_position = 0;
				//var next_position = gridster.next_position(1, 1);
				obj.column_position = -1;
				obj.row_position = -1;
				obj.size_x = 1;
				obj.size_y = 1;

				if(!isNaN(route)){
					obj.column_position = -1;
					obj.row_position = -1;
				}

				if (portlet_type == "RSS" && p_name == "Agile CRM Blog")
					obj.size_y = 2;

				else if (portlet_type == "USERACTIVITY"
						&& p_name == "Leaderboard") {
					obj.size_y = 2;
					obj.size_x = 2;
					/*if(obj.column_position==3)
					{
						obj.column_position=1;
						obj.row_position=obj.row_position+1;
					}*/
				}
				var models = [];
				$.each(route,function(e){
					var portlet = new BaseModel();
				portlet.url = url;
				portlet.set({
					"prefs" : JSON.stringify(json),
					"isForAll" : forAll,

					"portlet_route" : this.toString(),
				}, {
					silent : true
				});

				
				var model;
				var scrollPosition;
				portlet.save(obj, {
					success : function(data) {
						model = new BaseModel(data.toJSON());
						if ($('#zero-portlets').is(':visible'))
							$('#zero-portlets').hide();
						if ($('#no-portlets').is(':visible'))
							$('#no-portlets').hide();
						/*if(data.toJSON().name=='Mini Calendar' || data.toJSON().name=='Agenda'){
							App_Portlets.navigate("dashboard", {
								trigger : true
							});
						}*/
					},
					error : function(model, response) {
						showAlertModal("add_error");
					}
				});
			});
				}
var Portlets_View, gridster;

/** If CURRENT_AGILE_USER is not set, set it from user.domain **/
$(function()
{
	$.getJSON('/core/api/users/current-agile-user', function(user)
	{
		CURRENT_AGILE_USER = user;
	});
});

/**
 * Loads all the portlets for the current agile user
 * 
 * @param el
 */
function loadPortlets(route,el){

	App_Portlets.todayEventsCollection = new Array();
	App_Portlets.tasksCollection = new Array();
	App_Portlets.pendingDeals = new Array();
	App_Portlets.dealsWon = new Array();
	App_Portlets.filteredCompanies = new Array();
	App_Portlets.filteredContacts = new Array();
	App_Portlets.emailsOpened = new Array();
	App_Portlets.statsReport = new Array();
	App_Portlets.leaderboard = new Array();
	App_Portlets.accountInfo = new Array();
	App_Portlets.activity=new Array();
	App_Portlets.activitiesView= new Array();
	App_Portlets.campaignstats = new Array();
	App_Portlets.dealGoals=new Array();
	App_Portlets.adminPortlets = new Array();
	App_Portlets.RoutePortlets=new Array();
	App_Portlets.taskAverage = new Array();
	App_Portlets.DashboardPortlets=new Array();
	if(Portlets_View!=undefined)
	console.log("before initialized" +route+ Portlets_View.collection.length);
	/*
	 * If Portlets_View is not defined , creates collection view, collection is
	 * sorted based on position i.e., set when sorted using jquery ui sortable
	 */
	$('#portlets', el).html(getRandomLoadingImg());
	
	// This flag is used to ensure portlet script are loaded only once in
	// postrender. It is set to false after portlet setup is initialized
	Portlets_View = new Base_Collection_View({ url : '/core/api/portlets?route='+route, sortKey : "row_position",sort_collection : false, restKey : "portlet", templateKey : "portlets", individual_tag_name : 'div',
		postRenderCallback : function(portlets_el){
			if(route!='DashBoard' && Portlets_View.collection.length!=0 && !$('.route_Portlet').is(':visible') && isNaN(route))
			{
				/*if($('#zero-portlets').is(':visible') || $('#no-portlets').is(':visible'))
				$('#no-portlets').parents('.wrapper-md').hide();*/
				$('#portlets').parents('.route_Portlet').show();
			}
			set_up_portlets(el, portlets_el);
				//if(route!='DashBoard' && App_Portlets.RoutePortlets.length!=0){
					var models = [];
					$.each( App_Portlets.RoutePortlets, function(index,model) {

					var obj={};
					var next_position = gridster.next_position(1, 1);
				obj.column_position = next_position.col;
				obj.row_position = next_position.row;

				
				model.set({ 'column_position' : obj.column_position}, { silent : true });
					model.set({ 'row_position' : obj.row_position  }, { silent : true });
					model.set({'isForAll' : false});
					//set_p_portlets(model,portlets_el);
					portlet_utility.getOuterViewOfPortlet(model,portlets_el, function() {
							portlet_utility.getInnerViewOfPortlet(model, portlets_el);
						});
					//set_up_portlets(el,$('#portlets > div'));
					
					portlet_utility.addWidgetToGridster(model);
					var that=$('#'+model.id).parent();
					if(!(that.attr('data-col')==model.get('column_position')) || !(that.attr('data-row')==model.get('row_position')))
					{
						model.set({ 'column_position' : parseInt(that.attr("data-col")) }, { silent : true });
						model.set({ 'row_position' : parseInt(that.attr("data-row")) }, { silent : true });
						that.attr('id','ui-id-'+that.attr("data-col")+'-'+that.attr("data-row"));
					that.find('div.portlet_body').attr('id','p-body-'+that.attr("data-col")+'-'+that.attr("data-row"));
					}
					models.push({ id : model.get("id"), column_position : obj.column_position, row_position : obj.row_position,isForAll : false });
			
				});
				$.ajax({ type : 'POST', url : '/core/api/portlets/positions', data : JSON.stringify(models),
					contentType : "application/json; charset=utf-8", dataType : 'json' });
					
				//}

				if(route!='DashBoard' && App_Portlets.DashboardPortlets.length!=0){
					var models = [];
					$.each(App_Portlets.DashboardPortlets, function(index,model) {
						var obj={};
						var next_position = gridster.next_position(1, 1);
						obj.column_position = next_position.col;
						obj.row_position = next_position.row;

					
						model.set({ 'column_position' : obj.column_position}, { silent : true });
						model.set({ 'row_position' : obj.row_position  }, { silent : true });
						model.set({'isForAll' : false});
						portlet_utility.getOuterViewOfPortlet(model,portlets_el, function() {
								portlet_utility.getInnerViewOfPortlet(model, portlets_el);
							});
						portlet_utility.addWidgetToGridster(model);
						var that=$('#'+model.id).parent();
						if(!(that.attr('data-col')==model.get('column_position')) || !(that.attr('data-row')==model.get('row_position')))
						{
							model.set({ 'column_position' : parseInt(that.attr("data-col")) }, { silent : true });
							model.set({ 'row_position' : parseInt(that.attr("data-row")) }, { silent : true });
							that.attr('id','ui-id-'+that.attr("data-col")+'-'+that.attr("data-row"));
							that.find('div.portlet_body').attr('id','p-body-'+that.attr("data-col")+'-'+that.attr("data-row"));
						}
						models.push({ id : model.get("id"), column_position : obj.column_position, row_position : obj.row_position,isForAll : false });
			
					});
					$.ajax({ type : 'POST', url : '/core/api/portlets/positions', data : JSON.stringify(models),
						contentType : "application/json; charset=utf-8", dataType : 'json' });
					
				}

				if(App_Portlets.adminPortlets.length!=0)
				{
					var models = [];
					$.each( App_Portlets.adminPortlets, function(index,model) {

					var obj={};
					var next_position = gridster.next_position(1, 1);
				obj.column_position = next_position.col;
				obj.row_position = next_position.row;

				
				model.set({ 'column_position' : obj.column_position}, { silent : true });
					model.set({ 'row_position' : obj.row_position  }, { silent : true });
					model.set({'isForAll' : false});
					set_p_portlets(model);
					//set_up_portlets(el,$('#portlets > div'));
					
					portlet_utility.addWidgetToGridster(model);
					var that=$('#'+model.id).parent();
					if(!(that.attr('data-col')==model.get('column_position')) || !(that.attr('data-row')==model.get('row_position')))
					{
						model.set({ 'column_position' : parseInt(that.attr("data-col")) }, { silent : true });
						model.set({ 'row_position' : parseInt(that.attr("data-row")) }, { silent : true });
						that.attr('id','ui-id-'+that.attr("data-col")+'-'+that.attr("data-row"));
					that.find('div.portlet_body').attr('id','p-body-'+that.attr("data-col")+'-'+that.attr("data-row"));
					}
					models.push({ id : model.get("id"), column_position : obj.column_position, row_position : obj.row_position,isForAll : false });
			
				});
				$.ajax({ type : 'POST', url : '/core/api/portlets/positions', data : JSON.stringify(models),
					contentType : "application/json; charset=utf-8", dataType : 'json' });
				}
				App_Portlets.adminPortlets=new Array();
				var models_position = [];
				$('#portlet-res > div > .gs-w').each(function(){
					
					$(this).attr('id','ui-id-'+$(this).attr("data-col")+'-'+$(this).attr("data-row"));
					$(this).find('div.portlet_body').attr('id','p-body-'+$(this).attr("data-col")+'-'+$(this).attr("data-row"));
					
					var model_id = $(this).find('.portlets').attr('id');
					
					var model = Portlets_View.collection.get(model_id);

					if(!($(this).attr('data-col')==model.get('column_position')) || !($(this).attr('data-row')==model.get('row_position')))
					{
						model.set({ 'column_position' : parseInt($(this).attr("data-col")) }, { silent : true });
						model.set({ 'row_position' : parseInt($(this).attr("data-row")) }, { silent : true });
						//$(this).remove();
						//set_p_portlets(model);
					}
					

					models_position.push({ id : model.get("id"), column_position : parseInt($(this).attr("data-col")), row_position : parseInt($(this).attr("data-row")) });
					
				});
				// Saves new positions in server
				$.ajax({ type : 'POST', url : '/core/api/portlets/positions', data : JSON.stringify(models_position),
					contentType : "application/json; charset=utf-8", dataType : 'json' });

				if(Portlets_View.collection.length==0)
					$('.gridster > div:visible > div',el).removeClass('gs-w');
			

			initializePortletsListeners();
			contactListener();

		} });

	this.Portlets_View.appendItem = set_p_portlets;

	//  Fetch portlets from collection and set_up_portlets (load their scripts)
	Portlets_View.collection.fetch();

	// show portlets
	var newEl = Portlets_View.render().el;
	$('#portlets', el).html(newEl);	
}

/**
 * set the portlets size and position on dashboard 
 * 
 * @param el
 * @param portlets_el
 */
function set_up_portlets(el, portlets_el){

	$('.gridster > div:visible',portlets_el);
	var dimensions;
	var dim_width = Math.round($('.gridster-portlets').width()/3)-20;
	var dim_height = 200;
	dimensions = [dim_width, dim_height];
	gridster = $('.gridster > div:visible',portlets_el).gridster({
    	widget_selector: "div",
        widget_margins: [10, 12],
        widget_base_dimensions: dimensions,
        min_cols: 3,
        autogenerate_stylesheet: true,
        draggable: {
        	limit: true,
        	ignore_dragging: [".portlet_body",".portlet_body *",".portlet-panel",".portlet-panel *",".fc-content *",".events_show *"],
        	stop: function(event,ui){
        		
				var models = [];

				/*
				 * Iterate through each all the portlets and set each portlet
				 * position and store it in array
				 */
				$('#portlet-res > div > .gs-w').each(function(){
					
					$(this).attr('id','ui-id-'+$(this).attr("data-col")+'-'+$(this).attr("data-row"));
					$(this).find('div.portlet_body').attr('id','p-body-'+$(this).attr("data-col")+'-'+$(this).attr("data-row"));
					
					var model_id = $(this).find('.portlets').attr('id');
					
					var model = Portlets_View.collection.get(model_id);
					model.set({ 'column_position' : parseInt($(this).attr("data-col")) }, { silent : true });
					model.set({ 'row_position' : parseInt($(this).attr("data-row")) }, { silent : true });

					models.push({ id : model.get("id"), column_position : parseInt($(this).attr("data-col")), row_position : parseInt($(this).attr("data-row")) });
				});
				// Saves new positions in server
				$.ajax({ type : 'POST', url : '/core/api/portlets/positions', data : JSON.stringify(models),
					contentType : "application/json; charset=utf-8", dataType : 'json' });
			}
        },
        resize: {
        	enabled: true,
        	max_size: [3,3],
			resize: function(event,ui){
				var temp=Portlets_View.collection.get($('#'+this.$resized_widget.attr('id')+' > div.portlets').attr('id'));
				if(temp.get("name")=="Mini Calendar"){
					var el=this.$resized_widget.find('#calendar_container');
					var height=$('#'+this.$resized_widget.attr('id')).height();

					if(height<=200)
					{
						$(el).find('.fc-header').css('height','25px');
						$(el).parent().find('.show').css('padding-top','5px');
					}
					else if(height>200 && height<=450 )
					{
						$(el).find('.fc-header').css('height','145px');
						$(el).find('.show').css('padding-top','70px');
					}
					else
					{
						$(el).find('.fc-header').css('height','250px');
						$(el).find('.show').css('padding-top','120px');
					}

					var css = {"height" : height+"px", "max-height" : height+"px"};

					$('#'+this.$resized_widget.attr('id')+' > .portlet_body_calendar').css(css);
					$(el).fullCalendar('option','aspectRatio',getaspectratio($(el).parent()));
					var top=parseInt($(el).find('.fc-widget-content').css('height'))/2-7;
					$(el).find('.fc-day-number').css('top',top);
				}	
			},

        	stop: function(event,ui){
        		
        		$(window).trigger('resize');
        		
        		$('#'+this.$resized_widget.attr('id')+' > div.portlet_body').css('overflow-x','hidden').css('overflow-y','auto');
					
        		var tempModel = Portlets_View.collection.get($('#'+this.$resized_widget.attr('id')+' > div.portlets').attr('id'));
        		
        		var that = this;
        		if(tempModel.get("name")=="Leaderboard"){
        			$('#'+this.$resized_widget.attr('id')+' > .portlet_header').find('ul').width(($('#'+this.$resized_widget.attr('id')+' > .portlet_body').find('ul').width()/$('#'+this.$resized_widget.attr('id')+' > .portlet_body').width()*100)+'%');
        		}

        		else if(tempModel.get("name")=="Mini Calendar")
        			{
						var el=this.$resized_widget.find('.portlet_body_calendar');
						var aspectratio, height = this.$resized_widget.attr('data-sizey');


	        			if(height==1){
	        				height = height*200;

							$(el).find('.fc-header').css('height','25px');
							$(el).find('.show').css('padding-top','5px');
							 
							
							
						}else if(height==2){
							height = height*200+25;

							$(el).find('.fc-header').css('height','145px');
							$(el).find('.show').css('padding-top','70px');
							
							
						}
						else if(height==3){
							height = height*200+50;

							$(el).find('.fc-header').css('height','250px');
							$(el).find('.show').css('padding-top','120px');
							
							
							
						}

						var css = {"height" : height+"px", "max-height" : height+"px"};

						$('#'+this.$resized_widget.attr('id')+' > .portlet_body_calendar').css(css);
						$('#calendar_container',$(el)).fullCalendar('option','aspectRatio',getaspectratio(el));	
						
						var top=parseInt($(el).find('.fc-widget-content').css('height'))/2-7;
						$(el).find('.fc-day-number').css('top',top);

        			}
        			else if(tempModel.get("name")=="Calls Per Person")
        			{

        				var pos = '' + this.$resized_widget.attr('data-col')+''+this.$resized_widget.attr('data-row');
        				var height = this.$resized_widget.find('.portlet_body').height();
        				var width=this.$resized_widget.find('.portlet_body').width()
        				callschart[parseInt(pos)].setSize(width,callschart[parseInt(pos)].xAxis[0].categories.length*30+(height-30),false);
        			}
        			else if(tempModel.get("name")=="Task Report")
        			{

        				var pos = '' + this.$resized_widget.attr('data-col')+''+this.$resized_widget.attr('data-row');
        				var height = this.$resized_widget.find('.portlet_body').height();
        				var width=this.$resized_widget.find('.portlet_body').width()
        				taskReport[parseInt(pos)].setSize(width,taskReport[parseInt(pos)].xAxis[0].categories.length*30+(height-30),false);
        			}

				var models = [];

				/*
				 * Iterate through each all the portlets and set each portlet
				 * position and store it in array
				 */
				$('#portlet-res > div > .gs-w').each(function(){
					
					$(this).attr('id','ui-id-'+$(this).attr("data-col")+'-'+$(this).attr("data-row"));
					
					$(this).find('div.portlet_body').attr('id','p-body-'+$(this).attr("data-col")+'-'+$(this).attr("data-row"));
					
					var model_id = $(this).find('.portlets').attr('id');
					
					var model = Portlets_View.collection.get(model_id);
					
					model.set({ 'size_x' : parseInt($(this).attr("data-sizex")) }, { silent : true });
					
					model.set({ 'size_y' : parseInt($(this).attr("data-sizey")) }, { silent : true });
					
					model.set({ 'column_position' : parseInt($(this).attr("data-col")) }, { silent : true });
					
					model.set({ 'row_position' : parseInt($(this).attr("data-row")) }, { silent : true });

					models.push({ id : model.get("id"), size_x : parseInt($(this).attr("data-sizex")), size_y : parseInt($(this).attr("data-sizey")), 
						column_position : parseInt($(this).attr("data-col")), row_position : parseInt($(this).attr("data-row")) });
				});
				// Saves new width and height in server
				$.ajax({ type : 'POST', url : '/core/api/portlets/save-width-height', data : JSON.stringify(models),
					contentType : "application/json; charset=utf-8", dataType : 'json' });

			}
        }
    }).data('gridster');

    $(window).resize(function()
    {
    	if(gridster!=undefined)
    		$('.gridster-portlets').css("height","auto");

    	if($(window).width()<768 && gridster!=undefined){
    		gridster.disable();
    		gridster.disable_resize();
    		if($('.portlet_body_calendar').is(':visible'))
    		{
    			$('.portlet_body_calendar').each(function(){
					var that=$(this);

					if($("#calendar_container",that).find('.fc-widget-header').length!=0)
					$('#calendar_container',that).fullCalendar('option','aspectRatio',getaspectratio(that));
				});
    		}
    	}
    	else if(gridster!=undefined)
    	{
    		gridster.enable();
    		gridster.enable_resize();
    		gridster.set_dom_grid_height();
    	}

		if($(window).width()<975 && $(window).width()>768 && $('.portlet_body_calendar').is(':visible'))
		{
				$('.portlet_body_calendar').each(function(){
					var that=$(this);

					if($("#calendar_container",that).find('.fc-widget-header').length!=0)
					$('#calendar_container',that).fullCalendar('option','aspectRatio',getaspectratio(that));
				$(this).find('#calendar_container').find('.fc-widget-header').each(function(){
				$(this).text($(this).text().substring(0, 1));
				});
			});
		}
		else if($(window).width()>975 && $('.portlet_body_calendar').is(':visible'))
		{
				$('.portlet_body_calendar').each(function()
				{
					var that=$(this);
					if($("#calendar_container",that).find('.fc-widget-header').length!=0)
					$('#calendar_container',that).fullCalendar('option','aspectRatio',getaspectratio(that));
					if($(el).find('#calendar_container').width()<185)
		            		   {
		            		   		$(el).find("#calendar_container").find(".fc-widget-header").each(function() {
                 					   $(this).text($(this).text().substring(0, 1))
              					  });
		            		   }
		            		   else{
					var weeksArray = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
					$(this).find('#calendar_container').find('.fc-widget-header').each(function(index)
					{
						$(this).text(weeksArray[index]);
					});
				}
				});
		}
    });

    if($(window).width()<768 && gridster!=undefined){
		gridster.disable();
		gridster.disable_resize();
		 $(".gridster-portlets").css("height", "auto");
	}
	else if(gridster!=undefined){
		gridster.enable();
		gridster.enable_resize();
	}

   // $(window).trigger('resize');

    //return callback();
}

/**To hide the modal popup after the portlet setting is saved**/
function hidePortletSettingsAfterSave(modal_id){

	var modal=$('#'+modal_id+ '> .modal-dialog > .modal-content > .modal-footer > a');
	modal.text('Save');
	modal.attr('disabled',false);
	$('#'+modal_id).modal('hide');
	$('.modal-backdrop').hide();
}

/** Initializes and fetched latest feeds from AgileCRM blosspot.**/
function initBlogPortletSync(el)
{
	head.js(LIB_PATH + 'lib/jquery.feeds.min.js',
		function()
		{

		  $('#portlet_blog_sync_container',el)
				.feeds(
					   {
						feeds : { blog : "https://www.agilecrm.com/blog/feed/" },
						max : 3,
						entryTemplate : function(entry)
						 {
							return '' + '<a href="' + entry.link + '" title = "' + entry.title + '" target="_blank" >' + entry.title + '</a><div style="color:#999;font-size:11px;line-height: 13px;margin-bottom:5px">' 
							+ new Date(entry.publishedDate).format('mmm d, yyyy') + '</div><p style="padding-top:5px;margin-bottom:15px">' 
							+ entry.contentSnippet.replace('<a', '<a target="_blank"') + '</p>';
						 },
							onComplete : function(e){
							$('#portlet_blog_sync_container',el).append('<span class="pull-right"><a href="https://www.agilecrm.com/blog" target="_blank">Agile CRM Blog</a></span>');
							}
						});
		});
}

$('body').on('click', '.onboarding-skip', function(e) {
	var parent_el=$(this).parent();

	parent_el.find('span').css("text-decoration","line-through");

	if(!parent_el.find('small').hasClass('onboarding-undo'))
		parent_el.find('span').after("<small class='p-l-sm onboarding-undo c-p'>(undo)</small>");
	$(this).remove();
});

$('body').on('click', '.onboarding-undo', function(e) {
	var parent_el=$(this).parent();

	parent_el.find('span').css("text-decoration","none");
	parent_el.find('label').remove();
	parent_el.find('span').before("<label class='i-checks i-checks-sm onboarding-check' style='padding-right:4px;'><input type='checkbox'><i></i></label>");
	
	if(!parent_el.find('small').hasClass('onboarding-skip'))
		parent_el.find('span').after("<small class='p-l-sm onboarding-skip c-p'>(skip)</small>");
	$(this).remove();
});

/** Loads the default image for owner if no image is present **/
function gravatarImgForPortlets(width){
	// Default image
	var img = DEFAULT_GRAVATAR_url;
	var backup_image = "&d=404\" ";
	// backup_image="";
	var initials = '';
	
	if (initials.length == 0)
		backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";
	var data_name = '';
		return new Handlebars.SafeString('https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '' + backup_image + data_name);
}

/** Loading google events for Events Portet**/
function loadGoogleEventsForPortlets(p_el,startTime,endTime){
	$.getJSON('core/api/calendar-prefs/type/GOOGLE', function(response)
	{

		console.log(response);
		if (response)
		{

			if(typeof gapi != "undefined" && isDefined(gapi) && isDefined(gapi.client) && isDefined(gapi.client.calendar)) 
			{
				googledataforEvents(p_el,response,startTime,endTime);
				return;
			}	
		_load_gapi(function(){

				googledataforEvents(p_el,response,startTime,endTime);

			});
		}
		else{
			setTimeout(function(){
				if($(p_el).parent().parent().find('#normal-events').find('table').find('tr').length==0 && $(p_el).parent().parent().find('#google-events').find('table').find('tr').length==0)
				{
					$(p_el).parent().parent().find('#normal-events').html('<div class="portlet-error-message">No calendar events</div>');
				}
			},1000);
		}
	});
}

function googledataforEvents(p_el,response,startTime,endTime)
{
			var events = new Array();
	gapi.auth.setToken({ access_token : response.access_token, state : "https://www.googleapis.com/auth/calendar" });

				var current_date = new Date();
				var timezone_offset = current_date.getTimezoneOffset();
				var startDate = new Date(startTime * 1000);
				var gDateStart = startDate.toISOString();
   				var endDate = new Date(endTime * 1000);
   				var gDateEnd = endDate.toISOString();

				// Retrieve the events from primary
				var request = gapi.client.calendar.events
							.list({ 'calendarId' : 'primary', maxResults : 25, singleEvents : true, orderBy : 'startTime', timeMin : gDateStart, timeMax : gDateEnd });
					request.execute(function(resp)
					{
						console.log(resp);
						if(resp.items){
							for (var i = 0; i < resp.items.length; i++)
							{
								var fc_event = google2fcEvent(resp.items[i]);
								fc_event.startEpoch = new Date(fc_event.start).getTime()/1000;
								fc_event.endEpoch = new Date(fc_event.end).getTime()/1000;
								if (isNaN(fc_event.endEpoch))
								{
									fc_event.endEpoch = new Date(fc_event.google.end.date).getTime()/1000;
								}
								console.log(fc_event);
								events.push(fc_event);

							}
						}
						App_Portlets.googleEventCollectionView = new Base_Collection_View({ data : events, templateKey : "portlets-google-events", individual_tag_name : 'tr',
							sort_collection : true, sortKey : 'start', descending : false, 
							postRenderCallback : function(el){
								if($(p_el).parent().parent().find('#normal-events').find('table').find('tr').length>0)
								{
									$(p_el).parent().parent().find('#google-events').addClass('m-t-n-md').css("border-top","1px solid #eee");
								}
								setTimeout(function(){
									if($(p_el).parent().parent().find('#normal-events').find('table').find('tr').length==0 && $(p_el).parent().parent().find('#google-events').find('table').find('tr').length==0)
									{
										$(p_el).parent().parent().find('#normal-events').html('<div class="portlet-error-message">No calendar events</div>');
									}
								},1000);
							} });
						//googleEventCollectionView.appendItem = appendGoogleEvent;
						if($(p_el).parent().parent().find('#google-events').find('table').find('tr').length==0)
						{
							$(p_el).parent().parent().find('#google-events').html(App_Portlets.googleEventCollectionView.render(true).el);
						}
						hideTransitionBar();
					});
}
/**
* js for initialising the mini Calendar portlet with agile 
* and google events along with adding and updating the events
**/

//json Object for collecting events
var jso=[];
var mini_fullCal;
var mini_popover_call;

/**
 * initialises full calendar functionality in a mini calendar
 * with a list of events in the side bar for each day.
 * and can add and update event for the day. Also mousehoveing the events shows the complete detail of events
 */
function minicalendar(el)
{
	_agile_delete_prefs('current_date_calendar');
	init_cal(el);
	var totalEvents = 0;
	var eventsCount = 0;
	var dayClasses = [];


	mini_fullCal=$('#calendar_container',el).fullCalendar({


		aspectRatio:getaspectratio(el),
		selectable: true,
		header : { left : 'prev',right:'next', center :'title'  },
		weekMode:'liquid',
		titleFormat :
		{
			month : 'MMM yyyy',
		},

		eventSources :[
		               {
		            	   events : function(start, end, callback)
		            	   {

		            	   		App_Portlets.eventCalendar=$(el);
		            		   var datasizeY=$(el).parent().attr('data-sizey');
		            		   if(datasizeY==2)
		            			   $(el).find('.fc-header').css('height','145px');		
		            		   else if(datasizeY==3)
		            			   $(el).find('.fc-header').css('height','250px');		

		            		   $(el).find('.fc-border-separate').addClass('ignore-collection');
		            		   if($(el).find('#calendar_container').width()<185)
		            		   {
		            		   		$(el).find("#calendar_container").find(".fc-widget-header").each(function() {
                 					   $(this).text($(this).text().substring(0, 1))
              					  });
		            		   }
		            		   var date=new Date();
		            		   var todayDate=new Date(date.getFullYear(), date.getMonth(), date.getDate(),00,00,00);
		            		   var endDate=new Date(date.getFullYear(), date.getMonth(), date.getDate(),23,59,59);
		            		   var todayDiv='<div class="show p-t-xs text-md text-center">Today </div><ul class="list"></ul>';
		            		   if(_agile_get_prefs('current_date_calendar')!=null)
		            		   {
		            			   var days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
		            			   var cookie_date=new Date(_agile_get_prefs('current_date_calendar'));
		            			   if(cookie_date.getTime()!=todayDate.getTime()){
		            				   todayDate=cookie_date;
		            				   endDate=new Date(cookie_date.getFullYear(), cookie_date.getMonth(), cookie_date.getDate(),23,59,59);
		            				   $(el).find('.events_show').empty().append('<div class="show p-t-xs text-md text-center">'+days[cookie_date.getDay()]+', ' +cookie_date.format('dd mmm')+' </div><ul class="list"></ul>');

		            			   }
		            			   else
		            				   $(el).find('.events_show').empty().append(todayDiv);
		            		   }
		            		   else if(start<todayDate &&  todayDate<end){
		            			   $(el).find('.events_show').empty().append(todayDiv);

		            		   }

		            		   if(datasizeY==2)
		            			   $(el).find('.show').css('padding-top','70px');
		            		   else if(datasizeY==3)
		            			   $(el).find('.show').css('padding-top','120px');
		            		   var top=parseInt($(el).find('.fc-widget-content').css('height'))/2-7;
		            		   $(el).find('.fc-day-number').css('top',top);  

		            		   var eventsURL = '/core/api/events?start=' + start.getTime() / 1000 + "&end=" + end.getTime() / 1000 + "&owner_id=" +CURRENT_AGILE_USER.id;


		            		   $.getJSON(eventsURL, function(doc)
		            				   {
		            				   	jso=[];
		            			   $.each(doc, function(index, data)
		            					   {

		            				   if (data.color == 'red' || data.color == '#f05050')
		            					   data.color='#f05050';
		            				   else if (data.color == '#36C' || data.color == '#23b7e5' || data.color == 'blue')
		            					   data.color='#7266ba';
		            				   else if (data.color == 'green' || data.color == '#bbb')
		            					   data.color='#fad733';


		            				   var e_date= new Date(data.start*1000);
		            				   var end_date=new Date(data.end*1000);
		            				   //var a=Math.round((end_date-e_date)/(1000*60*60*24));
		            				   var a=(end_date.getMonth()-e_date.getMonth())+(end_date.getDate()-e_date.getDate());
		            				   if(a==0){
		            					   var new_json1=JSON.parse(JSON.stringify(data));
		            					   jso.push(new_json1);
		            				   }
		            				   else{
		            					   for(var i=0;i<=a;i++){
		            						   var new_json=JSON.parse(JSON.stringify(data));
		            						   var json_start=new Date(e_date.getFullYear(),e_date.getMonth(),e_date.getDate()+i,00,00,00).getTime()/1000;
		            						   var json_end=new Date(e_date.getFullYear(),e_date.getMonth(),e_date.getDate()+i,23,59,59).getTime()/1000;
		            						   if(i==0){
		            							   new_json.start=e_date.getTime()/1000;
		            							   new_json.end=json_end;
		            						   }
		            						   else if(i<a){		
		            							   new_json.start=json_start;
		            							   new_json.end=json_end
		            						   }
		            						   else{
		            							   new_json.start=json_start
		            							   new_json.end=end_date.getTime()/1000;
		            						   }
		            						   jso.push(new_json);
		            					   } }
		            					   });

		            			   if (doc)
		            			   {

		            				   console.log(jso);
		            				   $.each(jso,function(index,ev){
		            					   if(ev.start >= (todayDate.getTime()/1000) && ev.start <= (endDate.getTime()/1000)) {
		            						   if($(el).find('.portlet-calendar-error-message').length!=0)
		            						   {
		            							   $(el).find('.portlet-calendar-error-message').css('display','none');
		            							   $(el).find('.minical-portlet-event-add').css('display','none');
		            						   }
		            						   var e_date= new Date(ev.start*1000);
		            						   var len=$(el).find('.list').find('li').length;
		            						   var event_list='<li class="p-t-xs p-r-xs" style="color:'+ev.color+'"><span style="color : #58666e" class="text-cap word-break"><a class="minical-portlet-event" id='+ev.id+' data-date='+todayDate.getTime()+'>'+ev.title+'</a><br><small class="block m-t-n-xxs">'+ e_date.format('HH:MM') + ' </small></span></li>';
		            						   if(len!=0)
		            						   {
		            							   $(el).find('.list').find('small').each(function(x) 
		            									   {
		            								   if(e_date.format('HH:MM')<$(this).text())
		            								   {
		            									   $(this).parents('li').before(event_list);
		            									   return false;
		            								   }
		            								   if(x==len-1)
		            									   $(this).parents('.list').append(event_list) ;

		            									   });
		            						   }

		            						   else
		            							   $(el).find('.list').append(event_list);
		            					   }
		            				   }); 


		            				   callback(jso);
		            			   }



		            				   });


		            	   } },{dataType :'agile-events-mini'}


		            	   ],



		            	   eventRender: function (event, element, view) { 
		            		   var year = event.start.getFullYear(), month = event.start.getMonth() + 1, date = event.start.getDate();
		            		   var result = year + '-' + (month < 10 ? '0' + month : month) + '-' + (date < 10 ? '0' + date : date);
		            		   $(element).addClass(result);
		            		   $(element).attr('id',event.id);
		            		   dayClasses.push(result);
		            		    $('.fc-event','.portlet_body_calendar').find('.fc-event-inner').css('display','none');

		            		   var count=$(el).find('.'+result).length;
		            		   if(count>3){
		            			   return false;
		            		   } 

		            	   } ,
		            	   eventAfterRender: function (event, element, view) {

		            		   eventsCount++;
		            		   if(totalEvents == 0)
		            		   {
		            			   totalEvents = $(el).find('#calendar_container').find('.fc-event').length;
		            		   }
		            		   var h=parseInt($(el).find('.fc-widget-content').css('height'));
		            		   var head=parseInt($(el).find('.fc-header').css('height'));
		            		   var top=element.position().top+h-25;
		            		   var left=element.position().left+5;
		            		   $(element).css('top',top);
		            		   $(element).css('left',left);

		            		   if(eventsCount==totalEvents || eventsCount==(2*totalEvents)){
		            			   var temp;
		            			   var dayEventsTotalCount = totalEvents;
		            			   totalEvents = 0;
		            			   eventsCount = 0;
		            			   jso=[];
		            			   var classNamesArray = [];
		            			   $(el).find('#calendar_container').find('.fc-event').each(function(index){
		            				   if($.inArray($(this).attr('class').split(" ")[$(this).attr('class').split(" ").length-1], classNamesArray)==-1){
		            					   classNamesArray.push($(this).attr('class').split(" ")[$(this).attr('class').split(" ").length-1]);
		            				   }
		            			   });
		            			   $.each(classNamesArray,function(index, value){
		            				   var dayEventsCount = 0;
		            				   $.each(dayClasses, function(index1, value1){
		            					   if(dayClasses[index1]==classNamesArray[index]){
		            						   dayEventsCount++;
		            					   }
		            				   });
		            				   if(eventsCount==(2*dayEventsTotalCount)){
		            					   dayEventsCount = dayEventsCount/2;
		            				   }
		            				   var pos = $('.'+this,el).eq(0).position();
		            				   var eventsLength = $('.'+this,el).length;
		            				   var addPixels = Math.round(($(el).find('.fc-widget-header').eq(1).width()-10)/2);
		            				   if(eventsLength==1){
		            					   pos.left += addPixels;
		            				   }
		            				   else if(eventsLength==2){
		            					   pos.left += addPixels;
		            					   pos.left -= 3;
		            				   }
		            				   else if(eventsLength==3){
		            					   pos.left += addPixels;
		            					   pos.left -= 6;
		            				   }
		            				   else{
		            					   pos.left += addPixels;
		            					   pos.left -= 10;
		            				   }

		            				   pos.top += 8;
		            				   $('.'+this,el).each(function(index)
		            						   {
		            					   if(index>0){
		            						   $(this,el).css({"top": pos.top, "left":pos.left+(6*index)});

		            						   if(index>2)
		            						   {
		            							   $(this,el).hide();
		            						   }
		            					   }
		            					   else if(index==0){
		            						   $(this,el).css({"top": pos.top, "left":pos.left});
		            					   }

		            						   });
		            				   if(dayEventsCount>3)
		            				   {
		            					   var icon_pos = pos.left+(3*6);
		            					   $('.'+this,el).eq(eventsLength-1).after('<div class="plus-button pos-abs c-p" style="top: '+(pos.top-7)+'px;left: '+icon_pos+'px; color:lightgray;" title="'+(dayEventsCount-3)+' more">&nbsp;</div>');
		            				   }
		            			   });

		            			   dayClasses = [];
		            		   }
		            	   },

		            	   eventMouseover : function(event, jsEvent, view)
		            	   {
		            		   $(el).find('.portlet_header_icons').removeClass('vis-hide');
		            		   $(el).find('.fc-button').css('visibility','visible');
		            		   el.parent().css('z-index',3);
		            		   var reletedContacts = '';
		            		   var meeting_type = '';
		            		   var that = $(this);

		            		   if(CURRENT_AGILE_USER.domainUser.ownerPic=="" || CURRENT_AGILE_USER.domainUser.ownerPic=="no image")
		            			   event.owner.pic=gravatarImgForPortlets(25);

		            			if(that.data("data_fetched"))
								{
									$('.fc-overlay').hide();
		            		  			$('.fc-overlay').remove();
									event.contacts=that.data("data_fetched");
									
									var leftorright = 'bottom';
		            		   var pullupornot = '';
		            		   var popoverElement = '';

		            		   var eventJSON = {};
										
										eventJSON.leftorright = leftorright;
										
										eventJSON.pullupornot = pullupornot;eventJSON.event = event;
										
		            		   if(event.type=="AGILE"){
		            			  
		            			  that.append($(getTemplate("calendar-mouseover-popover-miniCalendar", eventJSON)));
		            			   that.find('.fc-overlay').find('.arrow').css('top','70px');
		            		   }
		            		   
		            		   var overlay=that.find('.fc-overlay');
		            		   if(event.start.getDay()==4 || event.start.getDay()==5 || event.start.getDay()==6){
		            			   overlay.css('left','-180px');
		            			   overlay.find('.arrow').css('left','91%');
		            		   }
		            		   if(event.contacts.length>1){
		            		   
		            		   if(meeting_type!=''){
		            			   overlay.css('top','-108px');
		            			   overlay.find('.arrow').css('top','98px');
		            		   }
		            		   else{
		            		   	overlay.css('top','-95px');
		            			   overlay.find('.arrow').css('top','84px');
		            			}
		            		}
		            		else{

		            		   if(event.contacts.length>0){
		            		   		var top = overlay.height();
		            		   		var arrowTop= top-22;
		            		   		top=top-9;
		            			   overlay.css('top', '-'+top+'px');
		            			   overlay.find('.arrow').css('top',arrowTop+'px');
		            		   }
		            		  
		            		}
		            		   overlay.show();
									return;
								}
		            			if(event.id!=undefined){
		            			mini_popover_call=$.ajax({ 
									url : "/core/api/events/contacts-related?id="+event.id, 
									dataType : 'json',
									success : function(data){
											console.log(data);
											event.contacts=data;
											that.data("data_fetched",data);
		            		  			$('.fc-overlay').hide();
		            		  			$('.fc-overlay').remove();
		            		


		            		   var leftorright = 'bottom';
		            		   var pullupornot = '';
		            		   var popoverElement = '';

		            		   var eventJSON = {};
										
										eventJSON.leftorright = leftorright;
										
										eventJSON.pullupornot = pullupornot;eventJSON.event = event;
										
		            		   if(event.type=="AGILE"){
		            			  
		            			  that.append($(getTemplate("calendar-mouseover-popover-miniCalendar", eventJSON)));
		            			   that.find('.fc-overlay').find('.arrow').css('top','70px');
		            		   }
		            		   
		            		   var overlay=that.find('.fc-overlay');
		            		   if(event.start.getDay()==4 || event.start.getDay()==5 || event.start.getDay()==6){
		            			   overlay.css('left','-180px');
		            			   overlay.find('.arrow').css('left','91%');
		            		   }
		            		   if(event.contacts.length>1){
		            		   
		            		   if(meeting_type!=''){
		            			   overlay.css('top','-108px');
		            			   overlay.find('.arrow').css('top','98px');
		            		   }
		            		   else{
		            		   	overlay.css('top','-95px');
		            			   overlay.find('.arrow').css('top','84px');
		            			}
		            		}
		            		else{

		            		   if(event.contacts.length>0){
		            		   		var top = overlay.height();
		            		   		var arrowTop= top-22;
		            		   		top=top-9;
		            			   overlay.css('top', '-'+top+'px');
		            			   overlay.find('.arrow').css('top',arrowTop+'px');
		            		   }
		            		  
		            		}
		            		   overlay.show();
		            		} });
							}
		            	   },
		            	   eventMouseout : function(event, jsEvent, view)
		            	   {
		            	   	mini_popover_call.abort();
		            		   el.parent().css('z-index',2);
		            		   $(this).find('.fc-overlay').hide();
		            		   $(this).find('.fc-overlay').remove();
		            	   },

		            	   dayClick : function(date,allDay,jsEvent,view){
		            		   App_Portlets.refetchEvents = false;
		            		   var days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
		            		   var current_date = new Date();
		            		   if(date.getFullYear()==current_date.getFullYear() && date.getMonth()==current_date.getMonth() && date.getDate()==current_date.getDate()){
		            			   $(el).find('.events_show').empty().append('<div class="show p-t-xs text-md text-center">Today</div><ul class="list"></ul>');
		            		   }
		            		   else{
		            			   $(el).find('.events_show').empty().append('<div class="show p-t-xs text-md text-center">'+days[date.getDay()]+', ' +date.format('dd mmm')+' </div><ul class="list"></ul>');
		            		   }

		            		   if($(el).parent().attr('data-sizey')==2)
		            			   $(el).find('.show').css('padding-top','70px');
		            		   else if($(el).parent().attr('data-sizey')==3)
		            			   $(el).find('.show').css('padding-top','120px');
		            		   var endDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
		            		   var array= $('#calendar_container',el).fullCalendar('clientEvents', function(event)
		            				   {
		            			   return (event.start >= date && event.start < endDate);
		            				   });
		            		   if(array.length!=0){
		            			   $.each(array,function(index){
		            				   var len=$(el).find('.list').find('li').length;
		            				   var event_list='<li class="p-t-xs p-r-xs" style="color : '+array[index].color+'"><span style="color : #58666e" class="text-cap word-break"><a class="minical-portlet-event" id='+array[index].id+' data-date='+date.getTime()+'>'+array[index].title+'</a><br><small class="block m-t-n-xxs">'+ array[index].start.format('HH:MM') + ' </small></span></li>';
		            				   if(len!=0){
		            					   $(el).find('.list').find('small').each(function(x) 
		            							   {
		            						   if(array[index].start.format('HH:MM')<$(this).text())
		            						   {
		            							   $(this).parents('li').before(event_list);
		            							   return false;
		            						   }

		            						   if(x==len-1)
		            							   $(this).parents('.list').append(event_list);
		            							   });
		            				   }
		            				   else
		            					   $(el).find('.list').append(event_list);

		            			   });
		            		   }
		            		   else if(!App_Portlets.refetchEvents){
		            			   $(el).find('.events_show').append('<div class="portlet-calendar-error-message">No appointments for the day</div><div class="text-center"><a class="minical-portlet-event-add text-info" id='+date.getTime()+' data-date='+date.getTime()+'>+Add</a></div>');
		            		   }
		            	   }

	}); 


}

/** set up the library and gapi used to get google events from google calendar 
 * If calendar not available , returns.
 **/
function loadingGoogleEvents(el,startTime,endTime){

	$.getJSON('core/api/calendar-prefs/type/GOOGLE', function(response)
			{
		if(response==undefined)
		{
			setTimeout(function(){
				if($(el).find('.list').find('li').length==0 && $(el).find('.portlet-calendar-error-message').length==0)
				{
					var date=new Date();
					$(el).find('.events_show').append('<div class="portlet-calendar-error-message">No appointments for the day</div><div class="text-center"><a class="minical-portlet-event-add text-info" id='+date.getTime()+' data-date='+date.getTime()+'>+Add</a></div>');
				}
			},7000);
			_agile_delete_prefs('current_date_calendar');
		}
		console.log(response);
		if (response)
		{
			if(typeof gapi != "undefined" && isDefined(gapi) && isDefined(gapi.client) && isDefined(gapi.client.calendar)) 
			{
				googledata(el,response,startTime,endTime);
			return;
			}


			head.js('https://apis.google.com/js/client.js', '/lib/calendar/gapi-helper.js?t=27', function()
					{
				setupGC(function()
					{
					
								googledata(el,response,startTime,endTime);
								return;
						
						});
					});
		}
			});

}

var isSet = false;

/**Initializes google Calendar **/
function init_cal(el){
	if(isSet)
		return;
	var fc = $.fullCalendar;
	isSet = true;
	//fc.sourceFetchers = [];
	// Transforms the event sources to Google Calendar Events
	fc.sourceFetchers.push(function(sourceOptions, start, end) {
		if (sourceOptions.dataType == 'agile-events-mini'){
			loadingGoogleEvents(App_Portlets.eventCalendar,start.getTime()/1000,end.getTime()/1000);
			getOfficeEvents(App_Portlets.eventCalendar, start.getTime(), end.getTime());
		}
	});

}

/**
 * Get the Google events from attached goodle calendar 
 */
function googledata(el,response,startTime,endTime)
{
	try{
	gapi.auth.setToken({ access_token : response.access_token, state : "https://www.googleapis.com/auth/calendar" });

	var current_date = new Date();
	var timezone_offset = current_date.getTimezoneOffset();
	var startDate = new Date((startTime * 1000)-(timezone_offset*60*1000));
	var gDateStart = startDate.toISOString();
	var endDate = new Date((endTime * 1000)-(timezone_offset*60*1000));
	var gDateEnd = endDate.toISOString();
	// Retrieve the events from primary
	var request = gapi.client.calendar.events
	.list({ 'calendarId' : 'primary', maxResults : 1000, singleEvents : true, orderBy : 'startTime', timeMin : gDateStart, timeMax : gDateEnd });
	request.execute(function(resp)
			{

		head.js('flatfull/lib/web-calendar-event/moment.min.js', function(){
		head.js('flatfull/lib/web-calendar-event/moment-timezone-with-data.js',function() {

			var events = new Array();
			console.log(resp);
			if(resp.items){
				for (var j = 0; j < resp.items.length; j++){
					var fc_event = google2fcEvent(resp.items[j]);
					renderGoogleEvents(events,fc_event,el);
				}
			}

		console.log($("#calendar_container", el).fullCalendar("getView").visStart);

		$('#calendar_container', el).fullCalendar('removeEventSource', functions["event_mini_google" + $(el).attr('id')]);
			var events_clone = events.slice(0);
			functions["event_mini_google" + $(el).attr('id')] = function(start, end, callback)
			{
				console.log(this);
				console.log($("#calendar_container", el).fullCalendar("getView").visStart);
				if($('#calendar_container', el).fullCalendar('getView').visStart.getTime()!=start.getTime())
					return;
				callback(events_clone);
				
			}

			$('#calendar_container',el).fullCalendar('addEventSource', functions["event_mini_google" + $(el).attr('id')]);
			events_clone = [];

			//**Add the google Events in the list of events in events_show div **/
			var len = $(".events_show", el).find('.list').find('li').length;
			var date = new Date();
			$.each(events,function(index,ev){
			 	if($(el).find('.portlet-calendar-error-message').length!=0){
				   $(el).find('.portlet-calendar-error-message').css('display','none');
				   $(el).find('.minical-portlet-event-add').css('display','none');
			    }
			var todayDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(),00,00,00);
			var endDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(),23,59,59);

			if(_agile_get_prefs('current_date_calendar')!=null)
			{
				var cookie_date=new Date(_agile_get_prefs('current_date_calendar'));
				todayDate=cookie_date;
				endDate=new Date(cookie_date.getFullYear(), cookie_date.getMonth(), cookie_date.getDate(),23,59,59);

			}
			if(ev.start.getTime() >= (todayDate.getTime()) && ev.start.getTime() <= (endDate.getTime())) 
			{	
				var event_list='<li class="p-t-xs p-r-xs" style="color:'+ev.color+'"><span style="color : #58666e" class="text-cap word-break"><a class="minical-portlet-event" id='+ev.id+' data-date='+date.getTime()+'>'+ev.title+'</a><br><small class="block m-t-n-xxs">'+ ev.start.format('HH:MM') + ' </small></span></li>';
				if(len!=0){
					
					$(el).find('.list').find('small').each(function( index ) 
							{
							if(ev.start.format('HH:MM')<$(this).text())
							{
								$(this).parents('li').before(event_list);
								return false;

							}
							if(index==len-1)
		            			  $(this).parents('.list').append(event_list) ;

							});
								

								}
					else
						$(el).find('.list').append(event_list);
				}
			});

			_agile_delete_prefs('current_date_calendar');
			setTimeout(function(){
				//_agile_delete_prefs('current_date_calendar');
				if($(el).find('.list').find('li').length==0 && $(el).find('.portlet-calendar-error-message').length==0)
				{
					$(el).find('.events_show').append('<div class="portlet-calendar-error-message">No appointments for the day</div><div class="text-center"><a class="minical-portlet-event-add text-info" id='+date.getTime()+' data-date='+date.getTime()+'>+Add</a></div>');
				}
			},7000);
		});
		});
	});
}
	catch(e){
		if($(el).find('.list').find('li').length==0 && $(el).find('.portlet-calendar-error-message').length==0)
		{
			var date=new Date();
			$(el).find('.events_show').append('<div class="portlet-calendar-error-message">No appointments for the day</div><div class="text-center"><a class="minical-portlet-event-add text-info" id='+date.getTime()+' data-date='+date.getTime()+'>+Add</a></div>');
		}
}

}

/** Rendering the events to the mini Calendar
** Also all day events are broken into each day event to show on every day
*/
function renderGoogleEvents(events,fc_event,el)
{
			fc_event.startDate=new Date(fc_event.start);
			fc_event.end=new Date(fc_event.end);

			fc_event.color='#3a3f51';
			fc_event.backgroundColor='#3a3f51';
			if(fc_event.allDay==true){
				fc_event.startDate=new Date(fc_event.start);
   				fc_event.end=new Date(fc_event.end);
				fc_event.start = new Date(fc_event.startDate.getTime()+fc_event.startDate.getTimezoneOffset()*60*1000);
				fc_event.end= new Date(new Date(fc_event.google.end.date).getTime()+fc_event.startDate.getTimezoneOffset()*60*1000);

				var a;    			
    			if(fc_event.start.getMonth()<fc_event.end.getMonth()){
    				a = Math.round((fc_event.end-fc_event.start)/(60*60*1000*24));
      			}else{
       				a = (fc_event.end.getMonth()-fc_event.start.getMonth())+(fc_event.end.getDate()-fc_event.start.getDate());
				}

				if(a==1)
				{
					fc_event.start=fc_event.start.getTime()/1000;
					fc_event.end=(fc_event.end.getTime()-1)/1000;
					//$('#calendar_container',el).fullCalendar('renderEvent',fc_event);
					events.push(fc_event);
				}
				else
				{
					for(var i=0;i<a;i++){
						var new_json={};
						new_json=JSON.parse(JSON.stringify(fc_event));
						if(i==0){
							new_json.start=fc_event.start.getTime()/1000;
							new_json.end=new Date(fc_event.start.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,23,59,59).getTime()/1000;
						}
						else if(i<a){		
							new_json.start=new Date(fc_event.start.getFullYear(),fc_event.start.getMonth(),fc_event.start.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=new Date(fc_event.start.getFullYear(),fc_event.start.getMonth(),fc_event.start.getDate()+i,23,59,59).getTime()/1000;
						}
						else{
							new_json.start=new Date(fc_event.start.getFullYear(),fc_event.start.getMonth(),fc_event.start.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=fc_event.end.getTime()/1000;
						}
						console.log(new_json);
						//$('#calenetdar_container',el).fullCalendar('renderEvent',new_json);
						events.push(new_json);
					}
				}

			} 
			else
			{
				console.log("Start : "+fc_event.start);
				var utcTime = new Date(fc_event.start).toUTCString();
				var tz = moment.tz(utcTime, CURRENT_USER_PREFS.timezone);
				var changedDate	= tz.format('YYYY-MM-DD HH:mm:ss');
				fc_event.startDate = new Date(changedDate);

				console.log("Start Modified : "+ changedDate);

				console.log("End : "+fc_event.end);
				utcTime = new Date(fc_event.end).toUTCString();
				tz = moment.tz(utcTime, CURRENT_USER_PREFS.timezone);
				changedDate	= tz.format('YYYY-MM-DD HH:mm:ss');
				fc_event.end = new Date(changedDate);
				console.log("End Modified : "+ fc_event.end);

				var a;
    			if(fc_event.startDate.getMonth()<fc_event.end.getMonth()){
    				a = Math.round((fc_event.end-fc_event.startDate)/(60*60*1000*24));
      			}else {
       				a = (fc_event.end.getMonth()-fc_event.startDate.getMonth())+(fc_event.end.getDate()-fc_event.startDate.getDate());
       			}

				if(a==0){
					fc_event.start=fc_event.startDate.getTime()/1000;
					fc_event.end=fc_event.end.getTime()/1000;
					//$('#calendar_container',el).fullCalendar('renderEvent',fc_event);
					events.push(fc_event);
				}
				else{
					for(var i=0;i<=a;i++){
						var new_json={};
						new_json=JSON.parse(JSON.stringify(fc_event));
						if(i==0){
							new_json.start=fc_event.startDate.getTime()/1000;
							new_json.end=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,23,59,59).getTime()/1000;
						}
						else if(i<a){		
							new_json.start=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,23,59,59).getTime()/1000;
						}
						else{
							new_json.start=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=fc_event.end.getTime()/1000;
						}
						console.log(new_json);
						//$('#calendar_container',el).fullCalendar('renderEvent',new_json);
						events.push(new_json);
					}
				}
			}

			
}


function getOfficeEvents(el, startDateTime, endDateTime){	

	var url = "core/api/officecalendar/office365-appointments?startDate="+ startDateTime +"&endDate="+ endDateTime;
	var officeEvents = new Array();

	$.getJSON(url, function(response){
		if(response){						
			for (var i=0; i<response.length; i++){		
				var obj = response[i];
				obj.allDay = false;
				//officeEvents.push(obj);				
				renderOfficeEvents(officeEvents, obj, el);								
			}		

			//**Add the google Events in the list of events in events_show div **/
		var len = $(".events_show", el).find('.list').find('li').length;

		var date = new Date();
		$.each(officeEvents,function(index,ev){
			var todayDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(),00,00,00);
			var endDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(),23,59,59);

			if(_agile_get_prefs('current_date_calendar')!=null)
			{
				var cookie_date = new Date(_agile_get_prefs('current_date_calendar'));
				todayDate = cookie_date;
				endDate = new Date(cookie_date.getFullYear(), cookie_date.getMonth(), cookie_date.getDate(),23,59,59);

			}
			if(ev.start.getTime() >= (todayDate.getTime()) && ev.start.getTime() <= (endDate.getTime())) 
			{	
				var event_list = '<li class="p-t-xs p-r-xs" style="color:'+ ev.color +'"><span style="color : #58666e" class="text-cap word-break"><a class="minical-portlet-event" id='+ev.id+' data-date='+date.getTime()+'>'+ev.title+'</a><br><small class="block m-t-n-xxs">'+ ev.start.format('HH:MM') + ' </small></span></li>';
				if(len != 0){
					$(el).find('.list').find('small').each(function( index ){
						if(ev.start.format('HH:MM') < $(this).text()){
							$(this).parents('li').before(event_list);
							return false;
						}
						if(index==len-1)
		            	$(this).parents('.list').append(event_list) ;
					});
					
				} else{
					$(el).find('.list').append(event_list);
				}
			}
		});
		_agile_delete_prefs('current_date_calendar');
		setTimeout(function(){
			//_agile_delete_prefs('current_date_calendar');
			if($(el).find('.list').find('li').length==0 && $(el).find('.portlet-calendar-error-message').length==0)
			{
				$(el).find('.events_show').append('<div class="portlet-calendar-error-message">No appointments for the day</div><div class="text-center"><a class="minical-portlet-event-add text-info" id='+date.getTime()+' data-date='+date.getTime()+'>+Add</a></div>');
			}
		},7000);				
		}else{			
			console.log("Error occurred while fetching office records.");
		}
	});	

}



/** Rendering the events to the mini Calendar
** Also all day events are broken into each day event to show on every day
*/
function renderOfficeEvents(officeEvents, fc_event, el)
{
	fc_event.startDate = new Date(fc_event.start);
			fc_event.end = new Date(fc_event.end);
			fc_event.color='#74ceff';
			fc_event.backgroundColor='#74ceff';
			if(fc_event.allDay == true){
				fc_event.start = new Date(fc_event.startDate.getTime()+fc_event.startDate.getTimezoneOffset()*60*1000);
				fc_event.end = new Date(new Date(fc_event.google.end.date).getTime()+fc_event.startDate.getTimezoneOffset()*60*1000);

				var a;    			
    			if(fc_event.start.getMonth()<fc_event.end.getMonth()){
    				a = Math.round((fc_event.end-fc_event.start)/(60*60*1000*24));
      			}else{
       				a = (fc_event.end.getMonth()-fc_event.start.getMonth())+(fc_event.end.getDate()-fc_event.start.getDate());
				}

				if(a == 1)
				{
					fc_event.start=fc_event.start.getTime()/1000;
					fc_event.end=(fc_event.end.getTime()-1)/1000;
					$('#calendar_container',el).fullCalendar('renderEvent',fc_event);
					officeEvents.push(fc_event);
				}
				else
				{
					for(var i=0;i<a;i++){
						var new_json={};
						new_json=JSON.parse(JSON.stringify(fc_event));
						if(i==0){
							new_json.start=fc_event.start.getTime()/1000;
							new_json.end=new Date(fc_event.start.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,23,59,59).getTime()/1000;
						}
						else if(i<a){		
							new_json.start=new Date(fc_event.start.getFullYear(),fc_event.start.getMonth(),fc_event.start.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=new Date(fc_event.start.getFullYear(),fc_event.start.getMonth(),fc_event.start.getDate()+i,23,59,59).getTime()/1000;
						}
						else{
							new_json.start=new Date(fc_event.start.getFullYear(),fc_event.start.getMonth(),fc_event.start.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=fc_event.end.getTime()/1000;
						}
						console.log(new_json);
						$('#calendar_container',el).fullCalendar('renderEvent',new_json);
						officeEvents.push(new_json);
					}
				}

			} 
			else
			{
				var a;
    			if(fc_event.startDate.getMonth()<fc_event.end.getMonth()){
    				a = Math.round((fc_event.end-fc_event.startDate)/(60*60*1000*24));
      			}else {
       				a = (fc_event.end.getMonth()-fc_event.startDate.getMonth())+(fc_event.end.getDate()-fc_event.startDate.getDate());
       			}

				if(a==0){
					fc_event.start=fc_event.startDate.getTime()/1000;
					fc_event.end=fc_event.end.getTime()/1000;
					$('#calendar_container',el).fullCalendar('renderEvent',fc_event);
					officeEvents.push(fc_event);
				}
				else{
					for(var i=0;i<=a;i++){
						var new_json={};
						new_json=JSON.parse(JSON.stringify(fc_event));
						if(i==0){
							new_json.start=fc_event.startDate.getTime()/1000;
							new_json.end=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,23,59,59).getTime()/1000;
						}
						else if(i<a){		
							new_json.start=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,23,59,59).getTime()/1000;
						}
						else{
							new_json.start=new Date(fc_event.startDate.getFullYear(),fc_event.startDate.getMonth(),fc_event.startDate.getDate()+i,00,00,00).getTime()/1000;
							new_json.end=fc_event.end.getTime()/1000;
						}
						console.log(new_json);
						$('#calendar_container',el).fullCalendar('renderEvent',new_json);
						officeEvents.push(new_json);
					}
				}
			}
}


/*
 *  get the aspectratio(width/height) for minicalendar
 */
function getaspectratio(el)
{
	var width;
	var height;
	var dataSizeX=$(el).parent().attr('data-sizex');
	var dataSizeY=$(el).parent().attr('data-sizey');
	if(dataSizeX==1)
	{
		$(el).find('#calendar_container').css("padding","0px");
	}
	if(dataSizeX==2)
	{
		$(el).find('#calendar_container').css("padding","0px 50px 0px");

	}
	if(dataSizeX==3)
	{
		$(el).find('#calendar_container').css("padding","0px 100px 0px");

	}
	if(dataSizeY==1)
	{
		height=$(el).height()-25;
	}
	else if(dataSizeY==2){
		height=$(el).height()-200;
	}
	else
		height=$(el).height()-350;
	width=$(el).find('#calendar_container').width();
	return (width/height);
}/*
 * Appends the model (portlet) to its specific div, based on the portlet_type
 * as div id (div defined in portlet-add.html)
 */
function organize_portlets(base_model) {


	var itemView = new Base_List_View({
		model : base_model,
		template : this.options.templateKey + "-model",
		tagName : 'div',
		className : 'col-md-3 col-sm-6 col-xs'
	});

	// Get portlet type from model (portlet object)
	var portlet_type = base_model.get('portlet_type');

	/*
	 * Appends the model (portlet) to its specific div, based on the
	 * portlet_type as div id (div defined in portlet-add.html)
	 */

	var containerJSON = {
		"CONTACTS" : "contacts",
		"DEALS" : "deals",
		"TASKSANDEVENTS" : "taksAndEvents",
		"USERACTIVITY" : "userActivity",
		"RSS" : "rssFeed",
		"ACCOUNT" : "accountInfo",
		"WEBSTATS" : "webstats"
	};

	// Append Item View
	$('#' + containerJSON[portlet_type], this.el).append(
			$(itemView.render().el));
}

/*
 * Appends the outer view and inner view of each portlet.
 */
function set_p_portlets(base_model) {
	console.log("collection----" + Portlets_View.collection.length);
	var routeJSON = {
		"Contacts" : "contacts",
		"Deals" : "deals",
		"Tasks" : "tasks",
		"Events" : "calendar",
		"DashBoard" : "dashboard"
	};
/*	if(Current_Route!=undefined && routeJSON[base_model.toJSON().portlet_route].toUpperCase()!=Current_Route.toUpperCase())
{	
	Portlets_View.collection.remove(base_model);
	console.log("Removed");
	return;
}	*/
	if((base_model.toJSON().column_position == -1 && base_model.toJSON().row_position == -1) && isNaN(base_model.toJSON().portlet_route)){
		App_Portlets.RoutePortlets.push(base_model);
		return;
	}

	if(base_model.toJSON().isForAll)
	{
		App_Portlets.adminPortlets.push(base_model);
		return;
	}

	//If portlet is user defined dashboards portlet, we can add that portlet to DashboardPortlets
	if(base_model.toJSON().portlet_route!='DashBoard' && !isNaN(base_model.toJSON().portlet_route) && 
		base_model.get("row_position") == -1 && base_model.get("column_position") == -1){
		App_Portlets.DashboardPortlets.push(base_model);
		return;
	}

	if(Current_Route!=undefined && Current_Route.toUpperCase()!=('DashBoard').toUpperCase() && Portlets_View.collection.length!=0 && ! $('.route_Portlet').is(':visible'))
	{
		$('#portlets').parents('.route_Portlet').show();
	}
	var that = this;
	portlet_utility.getOuterViewOfPortlet(base_model, this.el, function() {
		portlet_utility.getInnerViewOfPortlet(base_model, that.el);
		
	});


}

/*
 * Sets the portlet content height based on it's size-y attribute.
 */
function setPortletContentHeight(base_model) {
	if (base_model.get("name") == "Stats Report" || base_model.get("name") == "Deal Goals") {

		var $resize_ele = $('#' + base_model.get("id")).parent().find(
				'.stats_report_portlet');
		var size_y = base_model.get("size_y"), resized_val = 0;

		if (size_y == 1) {
			resized_val = (size_y * 200);
		} else if (size_y == 2) {
			resized_val = (size_y * 200) + 10;
		} else if (size_y == 3) {
			resized_val = (size_y * 200) + 20;
		}

		var css = {
			"overflow-x" : "hidden",
			"overflow-y" : "hidden",
			"height" : resized_val + "px",
			"max-height" : resized_val + "px"
		}

		$resize_ele.css(css);

	} else if (base_model.get("name") == "Mini Calendar") {

		var $resize_ele = $('#' + base_model.get("id")).parent().find(
				'.portlet_body_calendar');
		var size_y = base_model.get("size_y"), resized_val = 0;

		if (size_y == 1) {
			resized_val = (size_y * 200);
		} else if (size_y == 2) {
			resized_val = (size_y * 200) + 25;
		} else if (size_y == 3) {
			resized_val = (size_y * 200) + 50;
		}

		var css = {
			"height" : resized_val + "px",
			"max-height" : resized_val + "px"
		}

		$resize_ele.css(css);
	} else {

		var $resize_ele = $('#' + base_model.get("id")).parent().find(
				'.portlet_body');
		var size_y = base_model.get("size_y"), resized_val = 0;

		if (size_y == 1) {
			resized_val = (size_y * 200) - 45;
		} else if (size_y == 2) {
			resized_val = (size_y * 200) + 25 - 45;
		} else if (size_y == 3) {
			resized_val = (size_y * 200) + 50 - 45;
		}

		var css = {
			"overflow-x" : "hidden",
			"overflow-y" : "auto",
			"height" : resized_val + "px",
			"max-height" : resized_val + "px"
		}

		$resize_ele.css(css);
	}

}

/*
 * Appends the activity to activity portlet.
 */
function append_activity(base_model) {

	var itemView = new Base_List_View({
		model : base_model,
		"view" : "inline",
		template : this.options.templateKey + "-model"
	});

	// add to the right box - overdue, today, tomorrow etc.
	var createdtime = get_activity_created_time(base_model.get('time'));

	// Today
	if (createdtime == 0) {
		$('#earllier', this.el).show();

		var $todayActivityEle = $('#today-activity', this.el);

		$todayActivityEle.append(itemView.render().el);
		$todayActivityEle.parent('table').css("display", "block");
		$todayActivityEle.show();

		$('#today-heading', this.el).show();
	}

	if (createdtime == -1) {
		$('#earllier', this.el).show();

		var heading = $('#tomorrow-heading', this.el);
		var $tomorrowActivityEle = $('#tomorrow-activity', this.el);

		$tomorrowActivityEle.append(itemView.render().el);
		$tomorrowActivityEle.parent('table').css("display", "block");
		$tomorrowActivityEle.show();

		heading.show();
	}

	if (createdtime < -1) {
		var $nextWeekActivityEle = $('#next-week-activity', this.el);

		$nextWeekActivityEle.append(itemView.render().el);
		$nextWeekActivityEle.parent('table').css("display", "block");
		$nextWeekActivityEle.show();
		$('#next-week-heading', this.el).show();

	}

	if($('#tomorrow-heading', this.el).css('display')=="none" && $('#today-heading', this.el).css('display')=="none")
		$('#next-week-heading', this.el).hide();
}var portlet_utility = {

	/**
	 * Adding deal tracks to Track option in deals funnel and deals by milestone
	 * portlets.
	 */
	addTracks : function(tracks, base_model, elData) {
		var options = '';
		var deal_track = base_model.get('settings').track;
		$.each(tracks,
				function(index, trackObj) {
					if (deal_track == 0 && trackObj.name == "Default")
						options += "<option value=" + trackObj.id
								+ " selected='selected'>" + trackObj.name
								+ "</option>";
					else if (deal_track == trackObj.id)
						options += "<option value=" + trackObj.id
								+ " selected='selected'>" + trackObj.name
								+ "</option>";
					else
						options += "<option value=" + trackObj.id + ">"
								+ trackObj.name + "</option>";
				});

		$('#track', elData).html(options);
		$('.loading-img').hide();
		$("#deals", elData).find(
				'option[value=' + base_model.get("settings").deals + ']').attr(
				"selected", "selected");
		if(base_model.get("name") == "Deals Funnel" && base_model.get("settings")["split-by"]) {
			$("#deals-funnel-split-by", elData).find(
					'option[value=' + base_model.get("settings")["split-by"] + ']').attr(
					"selected", "selected");
		}
		else if(base_model.get("name") == "Deals Funnel") {
			$("#deals-funnel-split-by", elData).find(
					'option[value=revenue]').attr(
					"selected", "selected");
		}
	},

	/**
	 * getting filtered contact portlet header name
	 */
	get_filtered_contact_header : function(base_model, callback) {

		if (base_model.get("settings").filter == 'contacts')
			return callback("All Contacts");
		else if (base_model.get("settings").filter == 'companies')
			return callback("All Companies");
		else if (base_model.get("settings").filter == 'recent')
			return callback = "Recent Contacts";
		else if (base_model.get("settings").filter == 'myContacts')
			return callback("My Contacts");
		else if (base_model.get("settings").filter == 'leads')
			return callback("Leads");
		else {

			var contactFilter = $.ajax({
				type : 'GET',
				url : '/core/api/filters/' + base_model.get("settings").filter,
				dataType : 'json',
				success : function(data) {
					var header_name = '';
					if (data != null && data != undefined)
						header_name = "" + data.name;

					if (!header_name) {
						header_name = "Contact List";
					}

					return callback(header_name);

				}
			});
		}

	},

	/**
	 * getting deals funnel portlet header name
	 */
	get_deals_funnel_portlet_header : function(base_model, callback) {

		var track_id = base_model.get("settings").track;

		App_Portlets.track_length = 0;
		$.ajax({
			type : 'GET',
			url : '/core/api/milestone/pipelines',
			dataType : 'json',
			success : function(data) {
				App_Portlets.track_length = data.length;
				App_Portlets.deal_tracks = data;

				if (App_Portlets.track_length > 1) {
					if (track_id == 0)
						return callback("Default");
					else {
						var milestone = $.ajax({
							type : 'GET',
							url : '/core/api/milestone/' + track_id,
							dataType : 'json',
							success : function(data) {
								if (data != null && data != undefined)
									return callback("" + data.name + "");
							}
						});
					}
				}

			}
		});

	},

	/**
	 * getting campaign_type for campaign portlet header
	 */
	get_campaign_stats_portlet_header : function(base_model, callback) {
		var campaign_id = base_model.get("settings").campaign_type;

		if (campaign_id == 'All')
			return callback('All Campaigns');
		else {
			var campaign = $.ajax({
				type : 'GET',
				url : '/core/api/workflows/' + campaign_id,
				dataType : 'json',
				success : function(data) {
					if (data)
						return callback("" + data.name);
				}
			});
		}
	},


	/**
	 * getting default portlet settings for all portlets
	 */
	getDefaultPortletSettings : function(portlet_type, p_name) {

		var json = {};
		if (portlet_type == "CONTACTS" && p_name == "Filter Based")
			json['filter'] = "myContacts";
		else if (portlet_type == "CONTACTS" && p_name == "Emails Opened")
			json['duration'] = "2-days";
		else if (portlet_type == "USERACTIVITY" && p_name == "Emails Sent")
			json['duration'] = "1-day";
		else if (portlet_type == "CONTACTS" && p_name == "Growth Graph") {
			json['tags'] = "";
			json['frequency'] = 'daily';
			json['duration'] = "1-week";
		} else if (portlet_type == "DEALS" && p_name == "Pending Deals") {
			json['deals'] = "my-deals";
		} else if (portlet_type == "DEALS"
				&& (p_name == "Deals By Milestone" || p_name == "Deals Funnel")) {
			json['deals'] = "my-deals";
			json['track'] = 0;
		} else if (portlet_type == "DEALS" && p_name == "Closures Per Person") {
			json['group-by'] = "number-of-deals";
			json['due-date'] = Math.round((new Date()).getTime() / 1000);
		} else if (portlet_type == "DEALS" && p_name == "Deals Won")
			json['duration'] = "1-week";
		else if (portlet_type == "DEALS" && p_name == "Deals Assigned")
			json['duration'] = "1-day";
		else if (portlet_type == "USERACTIVITY" && p_name == "Calls Per Person") {
			json['group-by'] = "number-of-calls";
			json['duration'] = "1-day";
		} else if (portlet_type == "TASKSANDEVENTS" && p_name == "Task Report") {
			json['group-by'] = "user";
			json['split-by'] = "category";
			json['duration'] = "1-week";
			json['tasks'] = "all-tasks";
		} else if (portlet_type == "USERACTIVITY" && p_name == "Stats Report") {
			json['duration'] = "yesterday";
		} else if (portlet_type == "TASKSANDEVENTS"
				&& (p_name == "Agenda" || p_name == "Today Tasks"))
			json['duration'] = "today-and-tomorrow";
		else if (portlet_type == "USERACTIVITY" && p_name == "Leaderboard") {
			json['duration'] = "this-month";
			var categoryJson = {};
			categoryJson['revenue'] = true;
			categoryJson['dealsWon'] = true;
			categoryJson['calls'] = true;
			categoryJson['tasks'] = true;
			json['category'] = categoryJson;
		} else if (portlet_type == "DEALS" && p_name == "Revenue Graph") {
			json['duration'] = "this-quarter";
			json['track'] = "anyTrack";
		} else if (portlet_type == "USERACTIVITY" && p_name == "Campaign stats") {
			json['duration'] = "yesterday";
			json['campaign_type'] = "All";
		}else if (portlet_type == "USERACTIVITY" && p_name == "Campaign graph") {
			json['duration'] = "1-month";
			json['campaign_type'] = "All";
		}
		else if (portlet_type == "DEALS" && p_name == "Deal Goals") {
			json['duration'] = "this-month";
		} else if (portlet_type == "DEALS" && p_name == "Incoming Deals") {
			json['type'] = "deals";
			json['frequency'] = "daily";
			json['duration'] = "1-week";
		} else if (portlet_type == "DEALS" && p_name == "Lost Deal Analysis") {
			json['duration'] = "1-week";
		}
		else if (portlet_type == "TASKSANDEVENTS" && p_name == "Average Deviation") {
			json['duration'] = "1-day";
		}
		else if (portlet_type == "USERACTIVITY" && p_name == "User Activities") {	
			json['activity_type'] = "ALL";
			json['duration'] = "this-quarter";
		}
		else if (portlet_type == "USERACTIVITY" && p_name == "Referralurl stats") {
			json['duration'] = "yesterday";
		}	
		return json;
	
	},

	/**
	 * Getting start and end dates as string to get start and end epoch times
	 */
	getStartAndEndDurations : function(base_model, callback) {
		var durationJson = {};
		if (!base_model.get('settings')) {
			return;
		}
		var duration = base_model.get('settings').duration;

		durationJson['start_date_str'] = ''
				+ base_model.get('settings').duration;
		durationJson['end_date_str'] = '' + base_model.get('settings').duration;

		if (duration == 'yesterday') {
			durationJson['end_date_str'] = 'today';
		} else if (duration == 'this-week') {
			durationJson['end_date_str'] = 'this-week-end';
		} else if (duration == 'this-month') {
			durationJson['end_date_str'] = 'this-month-end';
		} else if (duration == 'next-7-days') {
			durationJson['start_date_str'] = 'TOMORROW';
		} else if (duration == 'today-and-tomorrow') {
			durationJson['start_date_str'] = 'today';
		} else if (duration == 'last-week') {
			durationJson['end_date_str'] = 'last-week-end';
		} else if (duration == 'last-month') {
			durationJson['end_date_str'] = 'last-month-end';
		} else if (duration == '24-hours') {
			durationJson['end_date_str'] = 'now';
		} else if (duration == 'today' || duration == '1-day' || duration == '2-days' || duration == '1-week' || duration == '1-month' || duration == 'all-over-due') {
			durationJson['end_date_str'] = 'TOMORROW';
		} else {
			durationJson['start_date_str'] = ''
				+ base_model.get('settings').duration + '-start';
			durationJson['end_date_str'] = '' + base_model.get('settings').duration + '-end';
		}

		return callback(durationJson);
	},

	/**
	 * To format portlet duration (ex: last-week as Last Week)
	 */
	getDurationForPortlets : function(duration, callback) {
		var time_period = 'Today';
		if (duration == 'yesterday') {
			time_period = 'Yesterday';
		} else if (duration == '1-day' || duration == 'today') {
			time_period = 'Today';
		} else if (duration == '2-days') {
			time_period = 'Last 2 Days';
		} else if (duration == 'this-week') {
			time_period = 'This Week';
		} else if (duration == 'last-week') {
			time_period = 'Last Week';
		} else if (duration == '1-week') {
			time_period = 'Last 7 Days';
		} else if (duration == 'this-month') {
			time_period = 'This Month';
		} else if (duration == 'last-month') {
			time_period = 'Last Month';
		} else if (duration == '1-month') {
			time_period = 'Last 30 Days';
		} else if (duration == 'this-quarter') {
			time_period = 'This Quarter';
		} else if (duration == 'last-quarter') {
			time_period = 'Last Quarter';
		} else if (duration == '3-months') {
			time_period = 'Last 3 Months';
		} else if (duration == '6-months') {
			time_period = 'Last 6 Months';
		} else if (duration == '12-months') {
			time_period = 'Last 12 Months';
		} else if (duration == 'today-and-tomorrow') {
			time_period = 'Today and Tomorrow';
		} else if (duration == 'all-over-due') {
			time_period = 'All Over Due';
		} else if (duration == 'next-7-days') {
			time_period = 'Next 7 Days';
		} else if (duration == '24-hours') {
			time_period = 'Last 24 Hours';
		}

		return callback(time_period);
	},

	/**
	 * To get outer view of each portlet, it is calling from set_p_portlets()
	 */
	getOuterViewOfPortlet : function(base_model, el, callback) {
		var templates_json = {
			"Filter Based" : "portlets-contacts-filterbased",
			"Emails Opened" : "portlets-contacts-emails-opened",
			"Emails Sent" : "portlets-contacts-emails-sent",
			"Growth Graph" : "portlets-contacts-growth-graph",
			"Pending Deals" : "portlets-deals-pending-deals",
			"Deals By Milestone" : "portlets-deals-deals-by-milestone",
			"Closures Per Person" : "portlets-deals-closures-per-person",
			"Deals Won" : "portlets-deals-deals-won",
			"Deals Funnel" : "portlets-deals-deals-funnel",
			"Deals Assigned" : "portlets-deals-deals-assigned",
			"Agenda" : "portlets-tasksandevents-agenda",
			"Today Tasks" : "portlets-tasksandevents-today-tasks",
			"Calls Per Person" : "portlets-contacts-calls-per-person",
			"Agile CRM Blog" : "portlets-useractivity-blog",
			"Task Report" : "portlets-tasksandevents-task-report",
			"Stats Report" : "portlets-status-report",
			"Onboarding" : "portlets-user-onboarding",
			"Leaderboard" : "portlets-leader-board",
			"Revenue Graph" : "portlets-deals-revenue-graph",
			"Account Details" : "portlets-account",
			"Mini Calendar" : "portlets-minicalendar",
			"User Activities" : "portlets-activites",
			"Campaign stats" : "portlets-campaign-stats-report",
			"Campaign graph" : "portlets-campaign-graph-report",
			"Deal Goals" : "portlets-deal-goals",
			"Incoming Deals" : "portlets-incoming-deals",
			"Lost Deal Analysis" : "portlets-lost-deal-analysis",
			"Average Deviation" : "portlets-Tasks-Deviation",
			"Webstat Visits" : "portlets-webstat-visits",
			"Referralurl stats" : "portlets-Referralurl-stats-report",
		};
		var templateKey = templates_json[base_model.get('name')];
		if (CURRENT_DOMAIN_USER.is_admin
				&& base_model.get('name') == "Onboarding") {
			templateKey = "portlets-admin-onboarding";
		}
		var that = this;
		App_Portlets.portletOuterView = new Base_Model_View({
			model : base_model,
			template : templateKey + '-model',
			tagName : 'div',
			postRenderCallback : function(ele) {
				that.invokeOuterViewCallback(base_model, ele);
			}
		});

		var column_position = base_model.get("column_position");
		var row_position = base_model.get("row_position");
		var size_x = base_model.get("size_x");
		var size_y = base_model.get("size_y");

		if ($('.gridster > div:visible > div', el).length == 0)
			$('.gridster > div:visible', el).html(
					$(App_Portlets.portletOuterView.render().el).attr(
							"id",
							"ui-id-" + column_position + "-"
									+ row_position).attr(
							"data-sizey", size_y).attr(
							"data-sizex", size_x).attr(
							"data-col", column_position)
							.attr("data-row", row_position)
							.addClass('gs-w panel panel-default'));
		else
			$('.gridster > div:visible > div:last', el).after(
					$(App_Portlets.portletOuterView.render().el).attr(
							"id",
							"ui-id-" + column_position + "-"
									+ row_position).attr(
							"data-sizey", size_y).attr(
							"data-sizex", size_x).attr(
							"data-col", column_position)
							.attr("data-row", row_position)
							.addClass('gs-w panel panel-default'));

		return callback();

	},

	/**
	 * To invoke outer view of post render call back method of each portlet
	 */
	invokeOuterViewCallback : function(base_model, el) {
		var that = this;
		switch (base_model.get('name')) {
		case "Filter Based": {
			that.get_filtered_contact_header(base_model, function(header_name) {
				$(el).find(".flitered_contact_portlet_header")
						.html(header_name);
			});
			break;
		}
		case "Deals By Milestone": {
			that.get_deals_funnel_portlet_header(base_model, function(
					header_name) {
				$(el).find(".deals_funnel_portlet_header").html(header_name);
			});
			break;
		}
		case "Deals Funnel": {
			that.get_deals_funnel_portlet_header(base_model, function(
					header_name) {
				$(el).find(".deals_funnel_portlet_header").html(header_name);
			});
			break;
		}
		case "Campaign stats": {
			that.get_campaign_stats_portlet_header(base_model, function(
					header_name) {
				$(el).find(".campaign_stats_header").html(header_name);
			});
			break;
		}
		case "Campaign graph": {
			that.get_campaign_stats_portlet_header(base_model, function(
					header_name) {
				$(el).find(".campaign_graph_header").html(header_name);
			});
			break;
		}

		case "Deal Goals": {
			$(el).find('.portlet_body').parent().css('background',
					'#f0f3f4');
			break;
		}
		case "Stats Report": {
			$(el).find('.stats_report_portlet_body').parent().css('background',
					'#f0f3f4');
			break;
		}
		case "User Activities" : {
			var pos = base_model.get("column_position")+''+base_model.get("row_position");
			App_Portlets.activitiesView[parseInt(pos)] = el;
			break;
		}
		}
	},

	/**
	 * To get inner view of each portlet, it is calling from set_p_portlets()
	 */
	getInnerViewOfPortlet : function(base_model, el) {
		var column_position = base_model.get('column_position'), row_position = base_model
				.get('row_position');
		var pos = '' + column_position + '' + row_position;
		var portlet_name = base_model.get('name'), portlet_ele = $(
				'#ui-id-' + column_position + '-' + row_position, el).find(
				'.portlet_body');
		portlet_ele
				.attr('id', 'p-body-' + column_position + '-' + row_position);
		var start_date_str = '', end_date_str = '', users = '', selector = portlet_ele
				.attr('id');
		;

		portlet_utility.getStartAndEndDurations(base_model, function(
				durationJson) {
			start_date_str = durationJson['start_date_str'];
			end_date_str = durationJson['end_date_str'];
		});

		if (base_model.get('settings') && base_model.get('settings').user != undefined) {
			users = JSON.stringify(base_model.get('settings').user);
		}

		switch (portlet_name) {
		case "Filter Based": {
			App_Portlets.filteredContacts[parseInt(pos)] = new Base_Collection_View(
					{
						url : '/core/api/portlets/contacts?filter='
								+ base_model.get('settings').filter
								+ '&sortKey=-created_time',
						templateKey : "portlets-contacts",
						sort_collection : false,
						individual_tag_name : 'tr',
						sortKey : "-created_time",
						postRenderCallback : function(p_el) {
							portlet_utility.addWidgetToGridster(base_model);
							contactListener(p_el);
						}
					});
			portlet_utility.renderPortletsInnerCollection(
					App_Portlets.filteredContacts[parseInt(pos)], portlet_ele,
					base_model);
			break;
		}
		case "Emails Opened": {
			App_Portlets.emailsOpened[parseInt(pos)] = new Base_Collection_View(
					{
						url : '/core/api/portlets/emails-opened?duration='
								+ base_model.get('settings').duration
								+ '&start-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(start_date_str)
								+ '&end-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(end_date_str),
						templateKey : 'portlets-contacts-email-opens',
						sort_collection : false,
						individual_tag_name : 'tr',
						postRenderCallback : function(p_el) {
							head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
								$(".time-ago", p_el).timeago();
								initializePortletsListeners();
							});
							portlet_utility.addWidgetToGridster(base_model);
						}
					});
			App_Portlets.emailsOpened[parseInt(pos)].collection.fetch();
			portlet_ele.find('#emails-opened-contacts-list').attr(
					'id',
					'emails-opened-contacts-list-' + column_position + '-'
							+ row_position);
			portlet_ele.find(
					'#emails-opened-contacts-list-' + column_position + '-'
							+ row_position).html(getRandomLoadingImg());
			portlet_ele.find(
					'#emails-opened-contacts-list-' + column_position + '-'
							+ row_position).html(
					$(App_Portlets.emailsOpened[parseInt(pos)].render().el));
			portlet_ele.find('#emails-opened-pie-chart').attr(
					'id',
					'emails-opened-pie-chart-' + column_position + '-'
							+ row_position);
			selector = 'emails-opened-pie-chart-' + column_position + '-'
					+ row_position;
			var url = '/core/api/portlets/emails-opened-pie-chart?duration='
					+ base_model.get('settings').duration + '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str);
			portlet_graph_data_utility.emailsOpenedGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Pending Deals": {
			var options="";
			if (base_model.get('settings').track != undefined
					&& base_model.get('settings').track != "anyTrack") 
				options+='&track='+base_model.get('settings').track;
			if (base_model.get('settings').milestone != undefined
					&& base_model.get('settings').milestone != "anyMilestone")
				options+='&milestone='+base_model.get('settings').milestone;
			App_Portlets.pendingDeals[parseInt(pos)] = new Base_Collection_View(
					{
						url : '/core/api/portlets/pending-deals?deals='
								+ base_model.get('settings').deals+options,
						templateKey : 'portlets-opportunities',
						sort_collection : false,
						individual_tag_name : 'tr',
						postRenderCallback : function(p_el) {
							head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
								$(".time-ago", p_el).timeago();
								initializePortletsListeners();
							});
							portlet_utility.addWidgetToGridster(base_model);
						}
					});
			portlet_utility.renderPortletsInnerCollection(
					App_Portlets.pendingDeals[parseInt(pos)], portlet_ele,
					base_model);
			break;
		}
		case "Deals Won": {
			App_Portlets.dealsWon[parseInt(pos)] = new Base_Collection_View({
				url : '/core/api/portlets/deals-won?duration='
						+ base_model.get('settings').duration,
				templateKey : 'portlets-opportunities',
				individual_tag_name : 'tr',
				postRenderCallback : function(p_el) {
					head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
						$(".time-ago", p_el).timeago();
					});
					portlet_utility.addWidgetToGridster(base_model);
				}
			});
			portlet_utility.renderPortletsInnerCollection(
					App_Portlets.dealsWon[parseInt(pos)], portlet_ele,
					base_model);
			break;
		}
		case "Agenda": {
			App_Portlets.todayEventsCollection[parseInt(pos)] = new Base_Collection_View(
					{
						url : '/core/api/portlets/agenda?duration='
								+ base_model.get('settings').duration
								+ '&start_time='
								+ portlet_utility
										.getStartAndEndDatesOnDue(start_date_str)
								+ '&end_time='
								+ portlet_utility
										.getStartAndEndDatesOnDue(end_date_str),
						templateKey : 'portlets-events',
						sort_collection : false,
						individual_tag_name : 'tr',
						postRenderCallback : function(p_el) {
							portlet_utility.addWidgetToGridster(base_model);
							loadGoogleEventsForPortlets(
									p_el,
									portlet_utility
											.getStartAndEndDatesOnDue(start_date_str),
									portlet_utility
											.getStartAndEndDatesOnDue(end_date_str));
							initializePortletsListeners();
						}
					});
			portlet_utility.renderPortletsInnerCollection(
					App_Portlets.todayEventsCollection[parseInt(pos)],
					portlet_ele.find('#normal-events'), base_model);
			break;
		}
		case "Today Tasks": {
			App_Portlets.tasksCollection[parseInt(pos)] = new Base_Collection_View(
					{
						url : '/core/api/portlets/today-tasks?duration='
								+ base_model.get('settings').duration
								+ '&start_time='
								+ portlet_utility
										.getStartAndEndDatesOnDue(start_date_str)
								+ '&end_time='
								+ portlet_utility
										.getStartAndEndDatesOnDue(end_date_str),
						templateKey : 'portlets-tasks',
						sort_collection : false,
						individual_tag_name : 'tr',
						postRenderCallback : function(p_el) {
							portlet_utility.addWidgetToGridster(base_model);
							initializePortletsListeners();
						}
					});
			portlet_utility.renderPortletsInnerCollection(
					App_Portlets.tasksCollection[parseInt(pos)], portlet_ele,
					base_model);
			break;
		}
		case "Leaderboard": {
			var leaderboardCate = base_model.get('settings').category;

			App_Portlets.leaderboard[parseInt(pos)] = new Base_Model_View(
					{
						url : '/core/api/portlets/leaderboard?duration='
								+ base_model.get('settings').duration
								+ '&start-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(start_date_str)
								+ '&end-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(end_date_str)
								+ '&revenue='
								+ leaderboardCate.revenue
								+ '&dealsWon='
								+ leaderboardCate.dealsWon
								+ '&calls='
								+ leaderboardCate.calls
								+ '&tasks='
								+ leaderboardCate.tasks
								+ '&user=' + users,
						template : 'portlets-leader-board-body-model',
						tagName : 'div',
						portletSizeX : base_model.get('size_x'),
						portletSizeY : base_model.get('size_y'),
						postRenderCallback : function(p_el) {
							portlet_utility.addWidgetToGridster(base_model);
							$(
									'#ui-id-' + column_position + '-'
											+ row_position
											+ ' > .portlet_header')
									.find('ul')
									.width(
											($(
													'#ui-id-'
															+ column_position
															+ '-'
															+ row_position
															+ ' > .portlet_body')
													.find('ul').width()
													/ $(
															'#ui-id-'
																	+ column_position
																	+ '-'
																	+ row_position
																	+ ' > .portlet_body')
															.width() * 100)
													+ '%');
							 $('.calls_popover',('#p-body-' + base_model.get('column_position') + '-'
											+ base_model.get('row_position'))).tooltip(
								{
									
									"html" : "true",
									"placement" : "right",
									"container" : "body",
									"template": '<div class="tooltip leaderboard_calls"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'

								});
							
						}
					});
			portlet_ele
					.html($(App_Portlets.leaderboard[parseInt(pos)].render().el));
			setPortletContentHeight(base_model);
			break;
		}
		case "Account Details": {
			App_Portlets.accountInfo[parseInt(pos)] = new Base_Model_View({
				url : '/core/api/portlets/account-details',
				template : "portlets-account-body-model",
				postRenderCallback : function(p_el) {
					portlet_utility.addWidgetToGridster(base_model);
				}
			});
			portlet_ele.html(getRandomLoadingImg());
			portlet_ele
					.html($(App_Portlets.accountInfo[parseInt(pos)].render().el));
			setPortletContentHeight(base_model);
			break;
		}
		case "User Activities": {
			var options="?";
			if(base_model.get('settings').activity_type == undefined)
					options+='&entity_type=ALL';
				else
				options+='&entity_type='+base_model.get('settings').activity_type;
			if(base_model.get('settings').duration == undefined){
				start_date_str="this-quarter-start";
				end_date_str="this-quarter-end";
				base_model.get('settings').duration='this-quarter';
			}
			if (base_model.get('settings').owner != undefined
					&& base_model.get('settings').owner != "") 
				options+='&user_id='+base_model.get('settings').owner;
			App_Portlets.activity[parseInt(pos)] = new Base_Collection_View({
				url : '/core/api/portlets/customer-activity'+options
				+ '&start_time='
				+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end_time='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str),
				sortKey : 'time',
				descending : true,
				templateKey : "portlets-activities-list-log",
				cursor : true,
				page_size : 20,
				individual_tag_name : 'div',
				postRenderCallback : function(p_el) {
					portlet_utility.addWidgetToGridster(base_model);

					head.js(LIB_PATH + 'lib/jquery.timeago.js', function() {
						$("time", p_el).timeago();
						

					});
					contact_detail_page_infi_scroll($('.activity_body',
							App_Portlets.activitiesView[parseInt(pos)].el),
							App_Portlets.activity[parseInt(pos)])
				},
				appendItemCallback : function(p_el) {
					includeTimeAgo(p_el);
				}
			});
			App_Portlets.activity[parseInt(pos)].appendItem = append_activity;
			portlet_utility.renderPortletsInnerCollection(
					App_Portlets.activity[parseInt(pos)], portlet_ele,
					base_model);
			break;
		}
		case "Campaign stats": {
			var emailsSentCount, emailsOpenedCount, emailsClickedCount, emailsUnsubscribed,
			emailsSpamCount, emailsSkippedCount, emailsHardBounceCount, emailsSoftBounceCount, that = portlet_ele;
			var url = '/core/api/portlets/campaign-stats?duration='
					+ base_model.get('settings').duration + '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&time_zone=' + (new Date().getTimezoneOffset())
					+ '&campaign_type='
					+ base_model.get('settings').campaign_type;

			setTimeout(
					function() {
						if (that.find('#emails-sent-count').text().trim() == "")
							that
									.find('#emails-sent-count')
									.html(
											"<img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' />");
					}, 1000);

			portlet_graph_data_utility
					.fetchPortletsGraphData(
							url,
							function(data) {
								emailsSentCount = data["emailsent"];
								emailsOpenedCount = data["emailopened"];
								emailsClickedCount = data["emailclicked"];
								emailsUnsubscribed = data["emailunsubscribed"];
								emailsSpamCount = data["emailSpam"];
								emailsSkippedCount = data["emailSkipped"];
								emailsHardBounceCount = data["hardBounce"];
								emailsSoftBounceCount = data["softBounce"];
				
									that
											.find('#emails-opened')
											.css('display', 'block')
											.addClass(
													'pull-left p-xs b-b b-r b-light w-half');
									that
											.find('#emails-clicked')
											.css('display', 'block')
											.addClass(
													'pull-left p-xs b-b b-light w-half');

									that.find('#emails-hard-bounce').css('display', 'block').addClass('pull-left p-xs b-r b-light w-half');

									that.find('#emails-soft-bounce').css('display', 'block').addClass('pull-left p-xs b-r b-light w-half');

									that.find('#emails-unsubscribed').css(
											'display', 'block').addClass(
											'pull-left p-xs b-r b-light w-half');
									that
											.find('#emails-sent')
											.addClass(
													'pull-left p-xs b-r b-b b-light w-half overflow-hidden');

									that
											.find('#emails-sent-count')
											.text(
													portlet_utility
															.getNumberWithCommasForPortlets(emailsSentCount));
											that.find('#emails-sent-label').text(
											"Emails sent");

									that.find('#emails-skipped')
											.addClass('pull-left p-xs b-b b-r b-light w-half overflow-hidden');

									that.find('#emails-skipped-count')
											.text(portlet_utility.getNumberWithCommasForPortlets(emailsSkippedCount));

									that.find('#emails-skipped-label').text("Skipped");

									that.find('#emails-spam')
											.addClass('pull-left p-xs b-r b-light w-half overflow-hidden');

									that.find('#emails-spam-count')
											.text(portlet_utility.getNumberWithCommasForPortlets(emailsSpamCount));

									that.find('#emails-spam-label').text("Spam");

									that
											.find('#emails-opened')
											.html(
													'<div class="pull-left text-light stats_text"><div class="text-sm text-ellipsis">Opened</div><div class="text-count text-center" style="color:#08C;">'
															+ portlet_utility
																	.getNumberWithCommasForPortlets(emailsOpenedCount)
															+ '</div></div>');
									that
											.find('#emails-clicked')
											.html(
													'<div class="pull-left text-light stats_text"><div class="text-sm text-ellipsis">Clicked</div><div class="text-count text-center" style="color:rgb(18, 209, 18);">'
															+ portlet_utility
																	.getNumberWithCommasForPortlets(emailsClickedCount)
															+ '</div></div>');

									that.find('#emails-hard-bounce')
											.html('<div class="pull-left text-light stats_text"><div class="text-sm text-ellipsis">Hard Bounced</div><div class="text-count text-center" style="color:#009688;">'
															+ portlet_utility
																	.getNumberWithCommasForPortlets(emailsHardBounceCount)
															+ '</div></div>');

									that.find('#emails-soft-bounce')
											.html('<div class="pull-left text-light stats_text"><div class="text-sm text-ellipsis">Soft Bounced</div><div class="text-count text-center" style="color:#9C27B0;">'
															+ portlet_utility
																	.getNumberWithCommasForPortlets(emailsSoftBounceCount)
															+ '</div></div>');
									that
											.find('#emails-unsubscribed')
											.html(
													'<div class="pull-left text-light stats_text"><div class="text-sm text-ellipsis">Unsubscribed</div><div class="text-count text-center" style="color:rgb(205,15,0);">'
															+ portlet_utility
																	.getNumberWithCommasForPortlets(emailsUnsubscribed)
															+ '</div></div>');

								portlet_utility.addWidgetToGridster(base_model);
							});
			setPortletContentHeight(base_model);
			break;
		}
		case "Campaign graph": {
			var url = '/core/api/portlets/campaign-graph?start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&campaign_type='
					+ base_model.get('settings').campaign_type;
			portlet_graph_data_utility.campaignStatsGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Deals By Milestone": {
			var url = '/core/api/portlets/deals-by-milestone?deals='
					+ base_model.get('settings').deals + '&track='
					+ base_model.get('settings').track;
			portlet_graph_data_utility.dealsByMilestoneGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Closures Per Person": {
			var url = '/core/api/portlets/deals-closed-per-person?due-date='
					+ base_model.get('settings')["due-date"];
			portlet_graph_data_utility.closuresPerPersonGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Deals Funnel": {
			var url = '/core/api/portlets/deals-funnel?deals='
					+ base_model.get('settings').deals + '&track='
					+ base_model.get('settings').track;
			portlet_graph_data_utility.dealsFunnelGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Emails Sent": {
			var url = '/core/api/portlets/emails-sent?duration='
					+ base_model.get('settings').duration;
			portlet_graph_data_utility.emailsSentGrapgData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Growth Graph": {
			var url = '/core/api/portlets/growth-graph?tags='
					+ base_model.get('settings').tags
					+ '&frequency='
					+ base_model.get('settings').frequency
					+ '&duration='
					+ base_model.get('settings').duration
					+ '&start-date='
					+ getUTCMidNightEpochFromDate(new Date(portlet_utility
							.getStartAndEndDatesOnDue(base_model
									.get('settings').duration) * 1000))
					+ '&end-date='
					+ getUTCMidNightEpochFromDate(new Date(portlet_utility
							.getStartAndEndDatesOnDue("TOMORROW") * 1000));
			portlet_graph_data_utility.growthGraphData(base_model, selector,
					url);
			setPortletContentHeight(base_model);
			// Saved tags are appended
			var p_settings = base_model.get('settings');
			var p_tags = p_settings.tags;
			var tags = p_tags.split(",");
			var li = '';
			$
					.each(
							tags,
							function(index, tagName) {
								if (tagName != "")
									li += "<li data='"
											+ tagName
											+ "' class='tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block'>"
											+ tagName
											+ "<a id='remove_tag' class='close m-l-xs'>&times</a></li>";
							});
			$('#' + base_model.get("id") + '-portlet-ul-tags').append(li);

			// enable tags properties
			setup_tags_typeahead();
			break;
		}
		case "Deals Assigned": {
			var url = '/core/api/portlets/deals-assigned?duration='
					+ base_model.get('settings').duration;
			portlet_graph_data_utility.dealsAssignedGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Calls Per Person": {
			if (base_model.get('settings')["calls-user-list"] != undefined) {
				users = JSON
						.stringify(base_model.get('settings')["calls-user-list"]);
			}
			var url = '/core/api/portlets/calls-per-person?duration='
					+ base_model.get('settings').duration + '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&user=' + users;
			portlet_graph_data_utility.callsPerPersonGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Agile CRM Blog": {
			portlet_ele.find('div').html(getRandomLoadingImg());
			initBlogPortletSync(portlet_ele);
			setPortletContentHeight(base_model);
			break;
		}
		case "Task Report": {
			if (base_model.get('settings')["task-report-user-list"] != undefined) {
				users = JSON
						.stringify(base_model.get('settings')["task-report-user-list"]);
			}
			var url = '/core/api/portlets/task-report?group-by='
					+ base_model.get('settings')["group-by"] + '&split-by='
					+ base_model.get('settings')["split-by"] + '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&tasks=' + base_model.get('settings').tasks + '&user='
					+ users;
			portlet_graph_data_utility.taskReportGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Revenue Graph": {
			var pipeline_id = 0;
			if (base_model.get('settings').track != undefined
					&& base_model.get('settings').track != "anyTrack") {
				pipeline_id = base_model.get('settings').track;
			}
			var url = 'core/api/opportunity/stats/details/'
					+ pipeline_id
					+ '?min='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&max='
					+ (portlet_utility.getStartAndEndDatesOnDue(end_date_str) - 1)
					+ '';
			portlet_graph_data_utility.revenueGraphData(base_model, selector,
					url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Stats Report": {
			portlet_ele = $('#ui-id-' + column_position + '-' + row_position,
					el).find('.stats_report_portlet_body');
			var that = portlet_ele;
			var newContactsurl = '/core/api/portlets/activity-overview-report?reportType=newContacts&duration='
					+ base_model.get('settings').duration
					+ '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&time_zone=' + (new Date().getTimezoneOffset());
			setTimeout(
					function() {
						if (that.find('#new-contacts-count').text().trim() == "")
							that
									.find('#new-contacts-count')
									.html(
											"<img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' />");
					}, 1000);
			portlet_graph_data_utility
					.fetchPortletsGraphData(
							newContactsurl,
							function(data) {
								that
										.find('#new-contacts-count')
										.text(
												portlet_utility
														.getNumberWithCommasForPortlets(data["newContactsCount"]));
								that.find('#new-contacts-label').text(
										"New contacts");
							});

			var wonDealsurl = '/core/api/portlets/activity-overview-report?reportType=wonDeals&duration='
					+ base_model.get('settings').duration
					+ '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&time_zone=' + (new Date().getTimezoneOffset());
			setTimeout(
					function() {
						if (that.find('#won-deal-value').text().trim() == "")
							that
									.find('#won-deal-value')
									.html(
											"<img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' />");
					}, 1000);
			portlet_graph_data_utility
					.fetchPortletsGraphData(
							wonDealsurl,
							function(data) {
								that
										.find('#won-deal-value')
										.text(
												portlet_utility
														.getPortletsCurrencySymbol()
														+ ''
														+ portlet_utility
																.getNumberWithCommasForPortlets(data["wonDealValue"]));
								that
										.find('#won-deal-count')
										.text(
												"Won from "
														+ portlet_utility
																.getNumberWithCommasForPortlets(data['wonDealsCount'])
														+ " deals");
							});

			var newDealsurl = '/core/api/portlets/activity-overview-report?reportType=newDeals&duration='
					+ base_model.get('settings').duration
					+ '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&time_zone=' + (new Date().getTimezoneOffset());
			setTimeout(
					function() {
						if (that.find('#new-deal-value').text().trim() == "")
							that
									.find('#new-deal-value')
									.html(
											"<img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' />");
					}, 1000);
			portlet_graph_data_utility
					.fetchPortletsGraphData(
							newDealsurl,
							function(data) {
								that
										.find('#new-deal-value')
										.text(
												portlet_utility
														.getNumberWithCommasForPortlets(data["newDealsCount"]));
								that
										.find('#new-deal-count')
										.text(
												"New deals worth "
														+ portlet_utility
																.getPortletsCurrencySymbol()
														+ ''
														+ portlet_utility
																.getNumberWithCommasForPortlets(data['newDealValue'])
														+ "");
							});

			var campaignEmailsSentsurl = '/core/api/portlets/activity-overview-report?reportType=campaignEmailsSent&duration='
					+ base_model.get('settings').duration
					+ '&start-date='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&end-date='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)
					+ '&time_zone=' + (new Date().getTimezoneOffset());
			setTimeout(
					function() {
						if (that.find('#emails-sent-count').text().trim() == "")
							that
									.find('#emails-sent-count')
									.html(
											"<img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' />");
					}, 1000);
			var emailsSentCount = 0;
			if (_agile_get_prefs('dashboard_campaign_count_'+CURRENT_DOMAIN_USER.id)) {
				emailsSentCount = _agile_get_prefs('dashboard_campaign_count_'+CURRENT_DOMAIN_USER.id);
			}
			that.find('#emails-sent-count').text(portlet_utility.getNumberWithCommasForPortlets(emailsSentCount));
			that.find('#emails-sent-label').text("Campaign emails sent");
			portlet_graph_data_utility
					.fetchPortletsGraphData(
							campaignEmailsSentsurl,
							function(data) {
								if(emailsSentCount > data["emailsSentCount"]) {
									that
										.find('#emails-sent-count')
										.text(
												portlet_utility
														.getNumberWithCommasForPortlets(data["emailsSentCount"]));
								}
								else {
									that.find('#emails-sent-count')
									  .prop('number', emailsSentCount)
									  .animateNumber(
									    {
									      number: data["emailsSentCount"]
									    },
									    2000
									  );
								}
								that.find('#emails-sent-label').text(
										"Campaign emails sent");
								_agile_set_prefs('dashboard_campaign_count_'+CURRENT_DOMAIN_USER.id, data["emailsSentCount"]);
							});
			setPortletContentHeight(base_model);
			break;
		}
		case "Mini Calendar": {

								$('.portlet_body_calendar', $("#ui-id-"+column_position+"-"+row_position))
										.attr(
												'id',
												'p-body-calendar'
														+ column_position + '-'
														+ row_position)
								$(
										'#p-body-calendar' + column_position
												+ '-' + row_position,
										$('#portlet-res'))
										.each(
												function() {
													$(this)
															.find(
																	'.events_show')
															.html(
																	getRandomLoadingImg());
													setPortletContentHeight(base_model);
													App_Portlets.refetchEvents = false;
													App_Portlets.eventCalendar=$(this);
													var that=$(this);
																head
					.js(
							LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 
							'lib/fullcalendar.min.js',
							function() {
													minicalendar(that);
												});
							});
			break;
		}
		case "Onboarding" : {
			setPortletContentHeight(base_model);
			break;
		}

		case "Deal Goals" : {

					portlet_ele = $('#ui-id-' + column_position + '-' + row_position,
					el).find('.goals_portlet_body');
					portlet_ele
						.attr('id', 'p-body-' + column_position + '-' + row_position);
					var that=portlet_ele;
			   selector= portlet_ele.attr('id');
			var url = '/core/api/portlets/goals/'+CURRENT_DOMAIN_USER.id
						+ '?start-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(start_date_str)
								+ '&end-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(end_date_str);
			portlet_graph_data_utility
					.fetchPortletsGraphData(
							url,
							function(data) {
								that.find('.deal_count').html(
									portlet_utility.getNumberWithCommasForPortlets(data["dealcount"]));
								that.find('.goal_count').html('Won Deals <br> from '+
										portlet_utility.getNumberWithCommasForPortlets(data["goalCount"])+' Goals');
								that.find('.deal_amount').html(portlet_utility.getPortletsCurrencySymbol()+
									'' +
									portlet_utility.getNumberWithCommasForPortlets(data["dealAmount"]));
								that.find('.goal_amount').html('Revenue <br> from '+portlet_utility.getPortletsCurrencySymbol()+
									'' +
									portlet_utility.getNumberWithCommasForPortlets(data["goalAmount"])+' Goals');
									portlet_graph_data_utility.dealGoalsGraphData(selector,data,column_position,row_position);
							});
			setPortletContentHeight(base_model);
			break;
		}
		case "Incoming Deals": {
			var owner_id = 0;
			if (base_model.get('settings').owner) {
				owner_id = base_model.get('settings').owner;
			}
			var url = 'core/api/portlets/incomingDeals/'
					+ owner_id
					+ '?min='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&max='
					+ (portlet_utility.getStartAndEndDatesOnDue(end_date_str) - 1)
					+ '&frequency='
					+ base_model.get('settings').frequency
					+ '&type='
					+ base_model.get('settings').type;
			portlet_graph_data_utility.incomingDealsGraphData(base_model, selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Lost Deal Analysis": {
			var owner_id = 0;
			var track_id = 0;
			var source_id = 0;
			if (base_model.get('settings').owner) {
				owner_id = base_model.get('settings').owner;
			}
			if (base_model.get('settings').track) {
				track_id = base_model.get('settings').track;
			}
			if (base_model.get('settings').source) {
				source_id = base_model.get('settings').source;
			}
			var url = 'core/api/portlets/lossReason/'
					+ owner_id + '/'
					+ track_id + '/'
					+ source_id
					+ '?min='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)
					+ '&max='
					+ (portlet_utility.getStartAndEndDatesOnDue(end_date_str) - 1);

			var sizey = parseInt($('#' + selector).parent().attr("data-sizey"));
			var topPos = 50 * sizey;
			if (sizey == 2 || sizey == 3)
				topPos += 50;
			$('#' + selector)
					.html(
							"<div class='text-center v-middle opa-half' style='margin-top:"
									+ topPos
									+ "px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
			$("#"+selector).addClass("lost-deal-analysis-portlet-pie");
			pieforReports(url, selector, '', undefined, true);
				setPortletContentHeight(base_model);
			break;
		}
			case "Average Deviation": {
			var url = '/core/api/portlets/averageDeviation?start-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(start_date_str)
								+ '&end-date='
								+ portlet_utility
										.getStartAndEndDatesOnDue(end_date_str);
			portlet_graph_data_utility.taskDeviationGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Webstat Visits": {
			var url = '/core/api/web-stats/reports?start_time='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)*1000
					+ '&end_time='
					+portlet_utility.getStartAndEndDatesOnDue(end_date_str)*1000;
			portlet_graph_data_utility.webstatVisitsGraphData(base_model,
					selector, url);
			setPortletContentHeight(base_model);
			break;
		}
		case "Referralurl stats": {
			var ref_url,count;
			selector='referralurl-stats-portlet-body-'+ column_position + '-'
					+ row_position;
			var sizey = parseInt($('.' + selector).parent().attr("data-sizey"));
			var topPos = 50 * sizey;
			if (sizey == 2 || sizey == 3)
				topPos += 50;
			$('.'+selector).html("<div class='text-center v-middle opa-half' style='margin-top:"+ topPos
								+ "px'><img src='"+updateImageS3Path("../flatfull/img/ajax-loader-cursor.gif")+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
			var url = '/core/api/web-stats/refurl-stats?start_time='
					+ portlet_utility.getStartAndEndDatesOnDue(start_date_str)*1000
					+ '&end_time='
					+ portlet_utility.getStartAndEndDatesOnDue(end_date_str)*1000
					+ '&time_zone=' + (new Date().getTimezoneOffset());
			portlet_graph_data_utility.fetchPortletsGraphData(url,function(data) {
				if(data.length==0){
						$('.'+selector).html('<div class="portlet-error-message">No Referral URL Found</div>');
								return;
					}
				var span;
				var element_list=$("<div style=' padding-top: 2px;'></div>");
				$.each( data, function(e) {					
					var width;
					if(e==0)
						width=75;
					else
						width=(data[e].count/data[0].count)*100;
					if(e!=0 && width >75){
						width=100-width;
						width=75-width;
					}

					span = $("<div style='margin: 0px 20px -21px 15px; padding-bottom: 1px;'/>");
					var url_name=data[e].ref_url.substring(data[e].ref_url.indexOf('/')+2,data[e].ref_url.lastIndexOf('/'));
					if(url_name.startsWith("www"))
						url_name= url_name.substring(url_name.indexOf("www")+4);
					span.append("<a data-toggle='popover' class='text-ellipsis' title="+ data[e].ref_url +" style='font-size: 14px; position: absolute;width: 75%;'>" + url_name + "</a>");
		            span.append("<div  style='margin-left: 90%;width: 15%;'>" + data[e].count + "</div>");
		            span.append("<div class='bar' style='width: "+width+"%; margin: 1px;height: .8rem; background: #03A9F4;'></div>");
		            span.append("<br/>");
		            element_list.append(span);
				});
				$('.'+selector).html(element_list);
			});
			
			setPortletContentHeight(base_model);
			break;
		}
		}
	},

	/**
	 * To render collection view of each portlet
	 */
	renderPortletsInnerCollection : function(collectionView, portlet_ele,
			base_model) {
		collectionView.collection.fetch();
		portlet_ele.html(getRandomLoadingImg());
		portlet_ele.html($(collectionView.render().el));
		setPortletContentHeight(base_model);
	},

	/**
	 * It should open settings modal of each portlet with filled or deafult
	 * data.
	 */
	showPortletSettings : function(el) {
		var elData, base_model = Portlets_View.collection.get(el
				.split("-settings")[0]);
		var portlet_name = base_model.get('name'), that = this;

		// Hide previous error messages
		$('.help-inline').hide();

		switch (portlet_name) {
		case "Filter Based": {
			$('#filter', elData).find('option').remove();
			$('.loading-img', elData).show();
			that.addPortletSettingsModalContent(base_model,
					"portletsContactsFilterBasedSettingsModal");
			elData = $('#portletsContactsFilterBasedSettingsForm');
			var existed_filter = base_model.get("settings").filter;
			var options = '<option value="">Select...</option>';
			if (existed_filter == "contacts") {
				options += "<option selected='selected' value='contacts'>All Contacts</option>";
			}
			else {
				options += "<option value='contacts'>All Contacts</option>";
			}
			if (existed_filter == "myContacts") {
				options += "<option selected='selected' value='myContacts'>My Contacts</option>";
			}
			else {
				options += "<option value='myContacts'>My Contacts</option>";
			}
			$.ajax({
				type : 'GET',
				url : '/core/api/filters?type=PERSON',
				dataType : 'json',
				success : function(data) {
					$.each(data, function(index, contactFilter) {
						if (contactFilter.id == existed_filter) {
							options += "<option selected='selected' value=" + contactFilter.id + ">"
								+ contactFilter.name + "</option>";
						}
						else {
							options += "<option value=" + contactFilter.id + ">"
								+ contactFilter.name + "</option>";
						}
						
					});
					$('#filter', elData).html(options);
					$('.loading-img').hide();
				}
			});
			break;
		}
		case "Emails Opened": {
			that.addPortletSettingsModalContent(base_model,
					"portletsContactsEmailsOpenedSettingsModal");
			elData = $('#portletsContactsEmailsOpenedSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Emails Sent": {
			that.addPortletSettingsModalContent(base_model,
					"portletsContactsEmailsSentSettingsModal");
			elData = $('#portletsContactsEmailsSentSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Growth Graph": {
			$('#portlet-ul-tags > li').remove();
			$('#cancel-modal').attr('disabled', false);
			that.addPortletSettingsModalContent(base_model,
					"portletsContactsGrowthGraphSettingsModal");
			elData = $('#portletsContactsGrowthGraphSettingsModal');
			// Saved tags are appended
			var tags = base_model.get('settings').tags.split(",");
			var li = '';
			$
					.each(
							tags,
							function(index, tagName) {
								if (tagName != "")
									li += "<li data='"
											+ tagName
											+ "' class='tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block'>"
											+ tagName
											+ "<a id='remove_tag' class='close m-l-xs'>&times</a></li>";
							});
			$('#portlet-ul-tags').append(li);

			// enable tags properties
			setup_tags_typeahead();

			$("#frequency", elData).find(
					'option[value=' + base_model.get("settings").frequency
							+ ']').attr("selected", "selected");
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Pending Deals": {
			that.addPortletSettingsModalContent(base_model,
					"portletsPendingDealsSettingsModal");
			elData = $('#portletsPendingDealsSettingsModal');
			$("#deals", elData).find(
					'option[value=' + base_model.get("settings").deals + ']')
					.attr("selected", "selected");
			if (base_model.get('settings').track == "anyTrack") {
				options += '<option value="anyTrack" selected="selected">Any</option>';
			} else {
				options += '<option value="anyTrack">Any</option>';
			}
			$.ajax({
				type : 'GET',
				url : '/core/api/milestone/pipelines',
				dataType : 'json',
				success : function(data) {
					$.each(data, function(index, trackObj) {
						if (base_model.get('settings').track == trackObj.id)
							options += "<option value=" + trackObj.id
									+ " selected='selected'>" + trackObj.name
									+ "</option>";
						else
							options += "<option value=" + trackObj.id + ">"
									+ trackObj.name + "</option>";
					});
					$('#track', elData).html(options);
					$('.loading-img').hide();
					var track = $('#track', elData).val();
		if (track!='anyTrack')
		{
			
			$.ajax({
				type : 'GET',
				url : '/core/api/milestone/'+track,
				dataType : 'json',
				success : function(data) {
					var milestonesList=data.milestones.split(",");
					var lost=data.lost_milestone;
					var won= data.won_milestone;
					$('#milestone').html('');
					if(milestonesList.length > 1)
					{
						$('#milestone', elData).html('<option value="anyMilestone">Any</option>');
					}
					$.each(milestonesList, function(index, milestone){
						if(lost!=null && won!=null){
							if(!(milestone==lost) && !(milestone==won) )
							
						$('#milestone', elData).append('<option value="'+milestone+'">'+milestone+'</option>');
					}
						else
						{
							if(!(milestone=='Won') && !(milestone=='Lost') )
							
						$('#milestone', elData).append('<option value="'+milestone+'">'+milestone+'</option>');
						}
					});
					if(base_model.get('settings').milestone && track == base_model.get('settings').track)
									{
										$('#milestone',elData).find('option[value="'+base_model.get('settings').milestone+'"]').attr("selected", "selected");
									}
				}
			});
		}
		else
		{
			$('#milestone', elData).html('<option value="anyMilestone">Any</option>');
		}

				}
			});
	
			/*if (base_model.get('settings').milestone == "anyMilestone") {
				options += '<option value="anyMilestone" selected="selected">Any</option>';
			} else {
				options += '<option value="anyMilestone">Any</option>';
			}
			$("#milestone", elData).find(
					'option[value=' + base_model.get("settings").milestone + ']')
					.attr("selected", "selected");*/
			break;
		}
		//campaign pie chart
		case "Campaign graph": {
			that.addPortletSettingsModalContent(base_model,
					"portletsCampaignGraphSettingsModal");
			elData = $('#portletsCampaignGraphSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			var options = "<option value='All'>All Campaigns</option>";
			$.ajax({
				type : 'GET',
				url : '/core/api/workflows',
				dataType : 'json',
				success : function(data) {
					$.each(data, function(index, campaignfilter) {
						options += "<option value=" + campaignfilter.id + ">"
								+ campaignfilter.name + "</option>";
					});
					$('#campaign_type', elData).html(options);
					$("#campaign_type", elData).find(
							'option[value='
									+ base_model.get("settings").campaign_type
									+ ']').attr("selected", "selected");
					$('.loading-img').hide();
				}
			});
			break;
		}

		case "Deals By Milestone": {
			that.addPortletSettingsModalContent(base_model,
					"portletsDealsByMilestoneSettingsModal");
			elData = $('#portletsDealsByMilestoneSettingsModal');
			var that = this;
			var url = '/core/api/portlets/deals-by-milestone?deals='
					+ base_model.get('settings').deals + '&track='
					+ base_model.get('settings').track;
			if (App_Portlets.track_length != undefined
					&& App_Portlets.track_length > 1)
				$('#portletsDealsByMilestoneTrack', elData).show();

			var tracks = [];
			if (App_Portlets.deal_tracks != undefined
					&& App_Portlets.deal_tracks != null)
				tracks = App_Portlets.deal_tracks;
			else {
				$.ajax({
					type : 'GET',
					url : '/core/api/milestone/pipelines',
					dataType : 'json',
					success : function(data) {
						App_Portlets.track_length = data.length;
						App_Portlets.deal_tracks = data;
						tracks = App_Portlets.deal_tracks;

						that.addTracks(tracks, base_model, elData);
					}
				});

				return;
			}
			that.addTracks(tracks, base_model, elData);
			break;
		}
		case "Closures Per Person": {
			that.addPortletSettingsModalContent(base_model,
					"portletsDealsClosuresPerPersonSettingsModal");
			elData = $('#portletsDealsClosuresPerPersonSettingsModal');
			$("#group-by", elData).find(
					'option[value=' + base_model.get("settings")["group-by"]
							+ ']').attr("selected", "selected");
			$("#due-date", elData)
					.val(
							getDateInFormatFromEpoc(base_model.get("settings")["due-date"]));
			break;
		}
		case "Deals Won": {
			that.addPortletSettingsModalContent(base_model,
					"portletsDealsWonSettingsModal");
			elData = $('#portletsDealsWonSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Deals Funnel": {
			that.addPortletSettingsModalContent(base_model,
					"portletsDealsFunnelSettingsModal");
			elData = $('#portletsDealsFunnelSettingsModal');
			var that = this;
			var url = '/core/api/portlets/deals-funnel?deals='
					+ base_model.get('settings').deals + '&track='
					+ base_model.get('settings').track;
			if (App_Portlets.track_length != undefined
					&& App_Portlets.track_length > 1)
				$('#portletsDealsFunnelTrack', elData).show();

			var tracks = [];
			if (App_Portlets.deal_tracks != undefined
					&& App_Portlets.deal_tracks != null)
				tracks = App_Portlets.deal_tracks;
			else {
				$.ajax({
					type : 'GET',
					url : '/core/api/milestone/pipelines',
					dataType : 'json',
					success : function(data) {
						App_Portlets.track_length = data.length;
						App_Portlets.deal_tracks = data;
						tracks = App_Portlets.deal_tracks;

						that.addTracks(tracks, base_model, elData);

					}
				});

				return;
			}
			that.addTracks(tracks, base_model, elData);
			break;
		}
		case "Deals Assigned": {
			that.addPortletSettingsModalContent(base_model,
					"portletsDealsAssignedSettingsModal");
			elData = $('#portletsDealsAssignedSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Calls Per Person": {
			elData = $('#portletsCallsPerPersonSettingsModal');
			$("#group-by", elData).find(
					'option[value=' + base_model.get("settings")["group-by"]
							+ ']').attr("selected", "selected");
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");

			portlet_utility.setUsersInPortletSettings("calls-user-list",
					base_model, "calls-user-list", "calls-user", elData, function(){
						that.addPortletSettingsModalContent(base_model, "portletsCallsPerPersonSettingsModal");
					});
			break;
		}
		case "Task Report": {
			elData = $('#portletsTaskReportSettingsModal');
			$("#group-by-task-report", elData).find(
					'option[value=' + base_model.get("settings")["group-by"]
							+ ']').attr("selected", "selected");
			if (base_model.get("settings").tasks != undefined)
				$("#tasks-task-report", elData).find(
						'option[value=' + base_model.get("settings").tasks
								+ ']').attr("selected", "selected");
			$("#split-by-task-report", elData).find(
					'option[value=' + base_model.get("settings")["split-by"]
							+ ']').attr("selected", "selected");
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			$('#' + base_model.get("settings")["group-by"] + '', elData).hide();
			if (base_model.get("settings")["group-by"] == "status")
				$('#tasks-control-group').hide();
			if (base_model.get("settings").tasks == "completed-tasks")
				$('#split-by-task-report > option#status').hide();

			portlet_utility.setUsersInPortletSettings("task-report-user-list",
					base_model, "task-report-user-list", "task-report-user",
					elData, function(){
						that.addPortletSettingsModalContent(base_model, "portletsTaskReportSettingsModal");
					});
			break;
		}
		case "Stats Report": {
			that.addPortletSettingsModalContent(base_model,
					"portletsStatsReportSettingsModal");
			elData = $('#portletsStatsReportSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Agenda": {
			that.addPortletSettingsModalContent(base_model,
					"portletsAgendaSettingsModal");
			elData = $('#portletsAgendaSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Today Tasks": {
			that.addPortletSettingsModalContent(base_model,
					"portletsTodayTasksSettingsModal");
			elData = $('#portletsTodayTasksSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Leaderboard": {
			elData = $('#portletsLeaderboardSettingsModal');
			var leaderboardCate = base_model.get("settings").category;
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");

			if (leaderboardCate && leaderboardCate.revenue)
				$("#category-list", elData).find('option[value=revenue]').attr(
						"selected", "selected");

			if (leaderboardCate && leaderboardCate.dealsWon)
				$("#category-list", elData).find('option[value=dealsWon]')
						.attr("selected", "selected");

			if (leaderboardCate && leaderboardCate.calls)
				$("#category-list", elData).find('option[value=calls]').attr(
						"selected", "selected");

			if (leaderboardCate && leaderboardCate.tasks)
				$("#category-list", elData).find('option[value=tasks]').attr(
						"selected", "selected");

			portlet_utility.setUsersInPortletSettings("user-list", base_model,
					"user-list", "user", elData, function(){
						that.addPortletSettingsModalContent(base_model, "portletsLeaderboardSettingsModal");
					});

			$('#ms-category-list', elData).remove();
			head.js(LIB_PATH + 'lib/jquery.multi-select.js', function() {
				$('#category-list, #user-list', elData).multiSelect();
				$('#ms-category-list .ms-selection', elData).children('ul')
						.addClass('multiSelect').attr("name", "category-list")
						.attr("id", "category");
				$('#ms-category-list .ms-selectable .ms-list', elData).css(
						"height", "105px");
				$('#ms-category-list .ms-selection .ms-list', elData).css(
						"height", "105px");
				$('#ms-category-list', elData).addClass(
						'portlet-category-ms-container');
			});
			break;
		}
		case "Revenue Graph": {
			that.addPortletSettingsModalContent(base_model,
					"portletsDealsRevenueGraphSettingsModal");
			elData = $('#portletsDealsRevenueGraphSettingsModal');
			var options = '';
			if (base_model.get('settings').track == "anyTrack") {
				options += '<option value="anyTrack" selected="selected">Any</option>';
			} else {
				options += '<option value="anyTrack">Any</option>';
			}
			$.ajax({
				type : 'GET',
				url : '/core/api/milestone/pipelines',
				dataType : 'json',
				success : function(data) {
					$.each(data, function(index, trackObj) {
						if (base_model.get('settings').track == trackObj.id)
							options += "<option value=" + trackObj.id
									+ " selected='selected'>" + trackObj.name
									+ "</option>";
						else
							options += "<option value=" + trackObj.id + ">"
									+ trackObj.name + "</option>";
					});
					$('#track', elData).html(options);
					$('.loading-img').hide();
				}
			});
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Campaign stats": {
			that.addPortletSettingsModalContent(base_model,
					"portletsCampaignStatsSettingsModal");
			elData = $('#portletsCampaignStatsSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			var options = "<option value='All'>All Campaigns</option>";
			$.ajax({
				type : 'GET',
				url : '/core/api/workflows',
				dataType : 'json',
				success : function(data) {
					$.each(data, function(index, campaignfilter) {
						options += "<option value=" + campaignfilter.id + ">"
								+ campaignfilter.name + "</option>";
					});
					$('#campaign_type', elData).html(options);
					$("#campaign_type", elData).find(
							'option[value='
									+ base_model.get("settings").campaign_type
									+ ']').attr("selected", "selected");
					$('.loading-img').hide();
				}
			});
			break;
		}

		case "Deal Goals": {
			that.addPortletSettingsModalContent(base_model,
					"portletsGoalsSettingsModal");
			elData = $('#portletsGoalsSettingsModal');
			$("#duration", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Incoming Deals": {
			that.addPortletSettingsModalContent(base_model,
					"portletsIncomingDealsSettingsModal");
			elData = $('#portletsIncomingDealsSettingsModal');
			$("#duration-incoming-deals", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			$("#split-by-incoming-deals", elData).find('option[value='+ base_model.get("settings")["type"] + ']').attr("selected", "selected");
			$("#frequency-incoming-deals", elData).find('option[value='+ base_model.get("settings")["frequency"] + ']').attr("selected", "selected");
			portlet_utility.setOwners("owner", base_model, elData);
			break;
		}
		case "Lost Deal Analysis": {
			that.addPortletSettingsModalContent(base_model,
					"portletsLostDealAnalysisSettingsModal");
			elData = $('#portletsLostDealAnalysisSettingsModal');
			$("#duration-lost-deal-analysis", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			portlet_utility.setOwners("owner-lost-deal-analysis", base_model, elData);
			portlet_utility.setTracks("track-lost-deal-analysis", base_model, elData);
			portlet_utility.setSources("source-lost-deal-analysis", base_model, elData);
			break;
		}

		case "Average Deviation": {
			that.addPortletSettingsModalContent(base_model,
					"portletsTaskClosureSettingsModal");
			elData = $('#portletsTaskClosureSettingsModal');
			$("#duration", elData).find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
						break;
		}

		case "User Activities" : {
			that.addPortletSettingsModalContent(base_model,"portletsUserActivitiesSettingsModal");
			elData = $("#portletsUserActivitiesSettingsModal");
			portlet_utility.setOwners("owner-user-activities", base_model, elData);
			$("#duration-user-activities", elData)
					.find(
							'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
					break;
		}
		case "Webstat Visits": {
			that.addPortletSettingsModalContent(base_model,
					"portletsWebstatVisitsSettingsModal");
			elData = $('#portletsWebstatVisitsSettingsModal');
			$("#duration", elData).find(
				               'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;
		}
		case "Referralurl stats": {
			that.addPortletSettingsModalContent(base_model,"portletsReferralurlStatsSettingsModal");
			elData = $('#portletsReferralurlStatsSettingsModal');
			$("#duration", elData).find(
				               'option[value='
									+ base_model.get("settings").duration + ']')
					.attr("selected", "selected");
			break;		
			
		}
		}
		if (base_model.get('name') == "Pending Deals"
				|| base_model.get('name') == "Deals By Milestone"
				|| base_model.get('name') == "Closures Per Person"
				|| base_model.get('name') == "Deals Funnel") {
			$('#due-date', elData).datepicker({
				format : CURRENT_USER_PREFS.dateFormat
			});
		}
	},

	/**
	 * Set portlet type and name in settings modal of each portlet and modal
	 * should be open.
	 */
	addPortletSettingsModalContent : function(base_model, modal_id) {
		$('#' + modal_id).modal('show');
		$(
				'#'
						+ modal_id
						+ ' > .modal-dialog > .modal-content > .modal-footer > .save-modal')
				.attr('id', base_model.get("id") + '-save-modal');
		$("#portlet-type", $('#' + modal_id)).val(
				base_model.get('portlet_type'));
		$("#portlet-name", $('#' + modal_id)).val(base_model.get('name'));
	},

	/**
	 * Set multiselected users data in calls, task report, leaderboard portlet
	 * settings.
	 */
	setUsersInPortletSettings : function(ele_id, base_model, ele_name, ele,
			elData, callback) {

		head.js(LIB_PATH + 'lib/jquery.multi-select.js', function() {
			var user_ele = base_model.get("settings")[ele_id];

			if (user_ele) {
				var options = '';
				$.ajax({
					type : 'GET',
					url : '/core/api/users/partial',
					dataType : 'json',
					success : function(data) {
						$.each(data, function(index, domainUser) {
							if (!domainUser.is_disabled)
								options += "<option value=" + domainUser.id + ">"
										+ domainUser.name + "</option>";
						});
						$('#' + ele_id, elData).html(options);
						$.each(user_ele, function() {
							$("#" + ele_id, elData).find(
									'option[value=' + this + ']').attr("selected",
									"selected");
						});
						$('.loading-img').hide();

						$('#ms-' + ele_id, elData).remove();
						$('#' + ele_id, elData).multiSelect();
						$('#ms-' + ele_id + ' .ms-selection', elData).children('ul')
								.addClass('multiSelect').attr("name", ele_name).attr("id",
										ele);
						$('#ms-' + ele_id + ' .ms-selectable .ms-list', elData).css(
								"height", "130px");
						$('#ms-' + ele_id + ' .ms-selection .ms-list', elData).css(
								"height", "130px");
						$('#ms-' + ele_id, elData).addClass('portlet-user-ms-container');
					}
				});
			} else {
				var options = '';
				$.ajax({
					type : 'GET',
					url : '/core/api/users/partial',
					dataType : 'json',
					success : function(data) {
						$.each(data, function(index, domainUser) {
							if (!domainUser.is_disabled)
								options += "<option value=" + domainUser.id
										+ " selected='selected'>" + domainUser.name
										+ "</option>";
						});
						$('#' + ele_id, elData).html(options);
						$('.loading-img').hide();

						$('#ms-' + ele_id, elData).remove();
						$('#' + ele_id, elData).multiSelect();
						$('#ms-' + ele_id + ' .ms-selection', elData).children('ul')
								.addClass('multiSelect').attr("name", ele_name).attr("id",
										ele);
						$('#ms-' + ele_id + ' .ms-selectable .ms-list', elData).css(
								"height", "130px");
						$('#ms-' + ele_id + ' .ms-selection .ms-list', elData).css(
								"height", "130px");
						$('#ms-' + ele_id, elData).addClass('portlet-user-ms-container');
					}
				});
			}
		});	
		return callback();
	},

	/**
	 * Get the currency symbol based on user's currency
	 */
	getPortletsCurrencySymbol : function() {

		var value = ((CURRENT_USER_PREFS.currency != null) ? CURRENT_USER_PREFS.currency
				: "USD-$");
		var symbol = ((value.length < 4) ? "$" : value.substring(4,
				value.length));

		return symbol;
	},

	/**
	 * Get the number with english number format (ex : 782,345,32)
	 */
	getNumberWithCommasForPortlets : function(value) {

		value = parseFloat(value);
		value = Math.round(value);
		if (value == 0)
			return value;

		if (value)
			return value.toFixed(2).toString().replace(
					/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
	},
	/**
	 * Get the number with english number format (ex : 782,345,32.32)
	 */
	getNumberWithCommasAndDecimalsForPortlets : function(value) {

		value = parseFloat(value);
		if (value == 0)
			return value;

		if (value)
			return value.toFixed(2).toString().replace(
					/\B(?=(?:\d{3})+(?!\d))/g, ",").replace('.00', '');
	},

	/**
	 * Get the time format in (h m s) by passing seconds
	 */
	getPortletsTimeConversion : function(diffInSeconds) {
		if (!diffInSeconds)
			return 0;

		var duration = '';

		var days = Math.floor(diffInSeconds / (24 * 60 * 60));
		var hrs = Math.floor((diffInSeconds % (24 * 60 * 60)) / (60 * 60));
		var mins = Math
				.floor(((diffInSeconds % (24 * 60 * 60)) % (60 * 60)) / 60);
		var secs = Math
				.floor(((diffInSeconds % (24 * 60 * 60)) % (60 * 60)) % 60);

		if(days!=0)
			duration += ' ' + days + 'd';
		if (hrs != 0)
			duration += ' ' + hrs + 'h';
		if (mins != 0)
			duration += ' ' + mins + 'm';
		if (secs != 0)
			duration += ' ' + secs + 's';

		return duration;
	},

	/**
	 * Get the priorities for Events and Tasks portlets.
	 */
	getPortletNormalName : function(name) {

		if (!name)
			return;

		var name_json = {
			"HIGH" : "High",
			"LOW" : "Low",
			"NORMAL" : "Normal",
			"EMAIL" : "Email",
			"CALL" : "Call",
			"SEND" : "Send",
			"TWEET" : "Tweet",
			"FOLLOW_UP" : "Follow Up",
			"MEETING" : "Meeting",
			"MILESTONE" : "Milestone",
			"OTHER" : "Other",
			"YET_TO_START" : "Yet To Start",
			"IN_PROGRESS" : "In Progress",
			"COMPLETED" : "Completed",
			"TODAY" : "Today",
			"TOMORROW" : "Tomorrow",
			"OVERDUE" : "Overdue",
			"LATER" : "Later"
		};

		name = name.trim();

		return (name_json[name] ? name_json[name] : name);

	},

	/**
	 * Get the start and end dates epoch based on duration.
	 */
	getStartAndEndDatesOnDue : function(duration) {

		var d = new Date();

		// Last 24 Hrs
		if (duration == "24-hours") {
			var hrs = (d.setMilliseconds(0) / 1000) - (24 * 60 * 60);
			return hrs;
		}
		// Current time
		if (duration == "now")
			return (d.setMilliseconds(0) / 1000);
		// Today
		if (duration == "1-day" || duration == "today") {
			getGMTTimeFromDate(d) / 1000;
		}

		// This week
		if (duration == "this-week" || duration == "this-week-start") {
			if (new Date().getDay() != 0)
				d.setDate(d.getDate() - (new Date().getDay() - 1));
			else
				d.setDate(d.getDate() - (new Date().getDay() + 6));
		}
		// This week end
		if (duration == "this-week-end") {
			if (new Date().getDay() != 0)
				d.setDate((d.getDate() - (new Date().getDay() - 1)) + 7);
			else
				d.setDate((d.getDate() - (new Date().getDay() + 6)) + 7);
		}
		// Last week start
		if (duration == "last-week" || duration == "last-week-start")
			d.setDate(d.getDate() - d.getDay() - 6);

		// Lats week end
		if (duration == "last-week-end")
			d.setDate((d.getDate() - d.getDay()) + 1);

		// 1 Week ago
		if (duration == "1-week")
			d.setDate(d.getDate() - 6);

		// 1 Month ago
		if (duration == "1-month")
			d.setDate(d.getDate() - 29);

		// This month
		if (duration == "this-month" || duration == "this-month-start")
			d.setDate(1);

		// Last month start
		if (duration == "last-month" || duration == "last-month-start") {
			d.setDate(1);
			d.setMonth(d.getMonth() - 1);
		}

		// Lats month end
		if (duration == "last-month-end") {
			d.setDate((d.getDate() - d.getDate()) + 1);
			d.setMonth(d.getMonth());
		}

		// Tomorrow
		if (duration == "TOMORROW")
			d.setDate(d.getDate() + 1);

		// Yesterday
		if (duration == "yesterday")
			d.setDate(d.getDate() - 1);

		// Last 2 days
		if (duration == "2-days")
			d.setDate(d.getDate() - 1);

		// next 7 days
		if (duration == "next-7-days")
			d.setDate(d.getDate() + 8);

		// next 7 days
		if (duration == "today-and-tomorrow")
			d.setDate(d.getDate() + 2);

		// this quarter start
		if (duration == "this-quarter-start"
				|| duration == "this-and-next-quarter-start") {
			var currentMonth = d.getMonth();
			if (currentMonth < 3)
				d.setMonth(0);
			else if (currentMonth >= 3 && currentMonth < 6)
				d.setMonth(3);
			else if (currentMonth >= 6 && currentMonth < 9)
				d.setMonth(6);
			else if (currentMonth >= 9 && currentMonth < 12)
				d.setMonth(9);
			d.setDate(1);
		}

		// this quarter end
		if (duration == "this-quarter-end") {
			var currentMonth = d.getMonth();
			if (currentMonth < 3)
				d.setMonth(3);
			else if (currentMonth >= 3 && currentMonth < 6)
				d.setMonth(6);
			else if (currentMonth >= 6 && currentMonth < 9)
				d.setMonth(9);
			else if (currentMonth >= 9 && currentMonth < 12) {
				d.setFullYear(d.getFullYear() + 1);
				d.setMonth(0);
			}
			d.setDate(1);
		}

		// last quarter start
		if (duration == "last-quarter-start") {
			var currentMonth = d.getMonth();
			if (currentMonth < 3) {
				d.setFullYear(d.getFullYear() - 1);
				d.setMonth(9);
			} else if (currentMonth >= 3 && currentMonth < 6)
				d.setMonth(0);
			else if (currentMonth >= 6 && currentMonth < 9)
				d.setMonth(3);
			else if (currentMonth >= 9 && currentMonth < 12)
				d.setMonth(6);
			d.setDate(1);
		}

		// last quarter end
		if (duration == "last-quarter-end") {
			var currentMonth = d.getMonth();
			if (currentMonth < 3)
				d.setMonth(0);
			else if (currentMonth >= 3 && currentMonth < 6)
				d.setMonth(3);
			else if (currentMonth >= 6 && currentMonth < 9)
				d.setMonth(6);
			else if (currentMonth >= 9 && currentMonth < 12)
				d.setMonth(9);
			d.setDate(1);
		}

		// This month end
		if (duration == "this-month-end") {
			d.setDate(1);
			d.setMonth(d.getMonth() + 1);
		}

		// next quarter start
		if (duration == "next-quarter-start") {
			var currentMonth = d.getMonth();
			if (currentMonth < 3)
				d.setMonth(3);
			else if (currentMonth >= 3 && currentMonth < 6)
				d.setMonth(6);
			else if (currentMonth >= 6 && currentMonth < 9)
				d.setMonth(9);
			else if (currentMonth >= 9 && currentMonth < 12) {
				d.setFullYear(d.getFullYear() + 1);
				d.setMonth(0);
			}
			d.setDate(1);
		}

		// next quarter end
		if (duration == "next-quarter-end"
				|| duration == "this-and-next-quarter-end") {
			var currentMonth = d.getMonth();
			if (currentMonth < 3)
				d.setMonth(6);
			else if (currentMonth >= 3 && currentMonth < 6)
				d.setMonth(9);
			else if (currentMonth >= 6 && currentMonth < 9) {
				d.setFullYear(d.getFullYear() + 1);
				d.setMonth(0);
			} else if (currentMonth >= 9 && currentMonth < 12) {
				d.setFullYear(d.getFullYear() + 1);
				d.setMonth(3);
			}
			d.setDate(1);
		}

		// this year start
		if (duration == "this-year-start") {
			d.setMonth(d.getMonth() - d.getMonth());
			d.setDate(1);
		}

		// this year end
		if (duration == "this-year-end") {
			d.setFullYear(d.getFullYear() + 1);
			d.setMonth(d.getMonth() - d.getMonth());
			d.setDate(1);
		}

		// next year start
		if (duration == "next-year-start") {
			d.setFullYear(d.getFullYear() + 1);
			d.setMonth(d.getMonth() - d.getMonth());
			d.setDate(1);
		}

		// next year end
		if (duration == "next-year-end") {
			d.setFullYear(d.getFullYear() + 2);
			d.setMonth(d.getMonth() - d.getMonth());
			d.setDate(1);
		}

		// last year start
		if (duration == "last-year-start") {
			d.setFullYear(d.getFullYear() - 1);
			d.setMonth(d.getMonth() - d.getMonth());
			d.setDate(1);
		}

		// last year end
		if (duration == "last-year-end") {
			d.setFullYear(d.getFullYear());
			d.setMonth(d.getMonth() - d.getMonth());
			d.setDate(1);
		}

		return (getGMTTimeFromDate(d) / 1000);
	},

	/**
	 * To add newly added portlet to gridster.
	 */
	addWidgetToGridster : function(base_model) {

		if (!gridster)
			return;

		var add_flag = true;
		var portletId = 'ui-id-' + base_model.get("column_position") + '-'
				+ base_model.get("row_position") + '';

		gridster.$widgets.each(function(index, widget) {
			if (widget.id == portletId)
				add_flag = false;
		});

		if (!add_flag)
			return;

		gridster.add_widget($('#' + portletId), base_model.get("size_x"),
				base_model.get("size_y"), base_model.get("column_position"),
				base_model.get("row_position"));

		/*gridster.set_dom_grid_height();
		window
				.scrollTo(
						0,
						((parseInt($('#' + portletId).attr('data-row')) - 1) * 200) + 5);*/

	},

	getActivityObject : function(id, callback) {
		
		$.ajax({ 
			type : "GET", 
			url : 'core/api/activitylog/' + id,
			success : function(data) {
				return callback(data);
			}
		});
	

	},

	is_legend_enable_in_desktop : function(base_model){
	        
	        if(!base_model.get("size_x") || base_model.get("size_x") > 1)
	        		return true;	

	        return false;
	},

	is_legend_enable : function(base_model){
		return (!agile_is_mobile_browser()) ? true : false;
	},

	toggle_chart_legends: function(chart, base_model){
		if(!chart.series)
			  return;

		var items = chart.series; 
		for (var i = 0; i < items.length; i++) {
			this.toggle_legend_item(chart, items[i], base_model);
		};

	},
	toggle_legend_item : function(chart, item, base_model){
		if(this.is_legend_enable_in_desktop(base_model))
		{
			item.options.showInLegend = true;
			try{
				chart.legend.renderItem(item);	
			}catch(e){}
			try{
				chart.legend.render();	
			}catch(e){}
    		
		}else {
			item.options.showInLegend = false;
    		item.legendItem = null;
    		try{
				chart.legend.destroyItem(item);	
			}catch(e){}
			try{
				chart.legend.render();	
			}catch(e){}
		}
	},

	/**
	 * Set owners data in incoming deals and lost deal analysis portlet
	 * settings.
	 */
	setOwners : function(ele_id, base_model, elData) {
		var options = '<option value="">All</option>';
		$.ajax({
			type : 'GET',
			url : '/core/api/users/partial',
			dataType : 'json',
			success : function(data) {
				$.each(data, function(index, domainUser) {
					options += "<option value=" + domainUser.id + ">"
								+ domainUser.name + "</option>";
				});
				$('#' + ele_id, elData).html(options);
				$('#' + ele_id, elData).find("option[value="+base_model.get("settings")["owner"]+"]").attr("selected", "selected");
				$('.loading-img').hide();
			}
		});
	},

	setSources : function(ele_id, base_model, elData) {
		var sources = new Base_Collection_View({url : '/core/api/categories?entity_type=DEAL_SOURCE', sort_collection: false});
		sources.collection.fetch({
			success: function(data){
				var jsonModel = data.toJSON();
				var html =  '<option class="default-select" value="">All Sources</option>' + 
							'<option class="default-select" value="1">Unknown</option>';
				
				$.each(jsonModel,function(index,dealSource){
					html+='<option class="default-select" value="'+dealSource.id+'">'+dealSource.label+'</option>';
				});
				$('#'+ele_id, elData).html(html);
				$('#'+ele_id, elData).find('option[value='+base_model.get("settings")["source"]+']').attr("selected", "selected");

				// Hide loading bar
				hideTransitionBar();
			}
		});
	},

	setTracks : function(ele_id, base_model, elData) {
		fillSelect(ele_id, "/core/api/milestone/pipelines", undefined, function()
		{
			$('#'+ele_id, elData).find('option[value='+base_model.get("settings")["track"]+']').attr("selected", "selected");
		}, '<option class="default-select" value="{{id}}">{{name}}</option>', false, undefined, "All Tracks");
	}
};/**
 * Initializes listener to perform various event function related to activity
 * reports
 */
function initializeActivityReportsListeners()
{

	$('body').on('hidden.bs.modal', '#activityReportModal', function(e)
	{
		$('#users-list, #activity-type-list').multiSelect('deselect_all');
	});

	$('#reports-listerners-container').on('click', '#activity-reports-email-now', function(e)
	{
		e.preventDefault();
		e.stopPropagation();
		
		var id = $(this).attr('data');
		var date = Math.floor(Date.now() / 1000);
		var url='/core/api/activity-reports/email/' + id + '?end_time=' + date;
		$("#report-send-confirmation").find('input').attr("data",url);
		$('#report-send-confirmation').modal('show');
		initializeReportSendConfirm();
	});

	$('#reports-listerners-container').on('click', '#activity-type-list-select-all', function(e){
		e.preventDefault();
		$('#activity-type-list').multiSelect('select_all');
	});
	$('#reports-listerners-container').on('click', '#activity-type-list-select-none', function(e){
		e.preventDefault();
		$('#activity-type-list').multiSelect('deselect_all');
	});

	$('#reports-listerners-container').on('click', '#users-list-select-all', function(e){
		e.preventDefault();
		$('#users-list').multiSelect('select_all');
	});
	$('#reports-listerners-container').on('click', '#users-list-select-none', function(e){
		e.preventDefault();
		$('#users-list').multiSelect('deselect_all');
	});

}


/**
 * Confirmation box event to send email reports
 */
function initializeReportSendConfirm()
{

	$("#report-send-confirm")
			.click(
					function(event)
					{
						event.preventDefault();
						$('.report-message').html(getRandomLoadingImg());
						var url= $('#report-send-confirmation').find('input').attr('data');
						if ($(this).attr("disabled"))
							return;

						$(this).attr("disabled", "disabled");
						$
								.get(
										url,
										function(data)
										{

											console.log("sending email");
											$save_info = $('<div style="display:inline-block"><small><p class="text-success"><i>Report will be sent shortly</i></p></small></div>');

											$('.report-message').html($save_info);

											$save_info.show();

											setTimeout(function()
											{
												$('#report-send-confirmation').modal('hide');
												$('.report-message').empty();
												$("#report-send-confirm").removeAttr("disabled");
											}, 2000);

										})
								.fail(
										function(response)
										{
											$save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>' + response.responseText + '</i></p></small></div>');

											$('.report-message').html($save_info);

											$save_info.show();

											setTimeout(function()
											{
												$('#report-send-confirmation').modal('hide');
												$('.report-message').empty();
												$("#report-send-confirm").removeAttr("disabled");
											}, 2000);

										});
					});

}
/**
 * Initializes listener to perform various event function related to graph
 * reports
 */
function initializeChartReportsListeners()
{

	$('#reports-listerners-container').on('click', '.report-chorts', function(e)
	{
		e.preventDefault();

		var formelement = $(this).parents('form');
		if (!isValidForm($(formelement)))
		{
			return false;
		}

		var object = serializeForm($(formelement).attr('id'));
		var report_type = object["report_chart_type"];
		var tags = "";

		if (object["tags"] && isArray(object["tags"]))
			$.each(object["tags"], function(i, tag)
			{
				if (i == 0)
					tags += tag;
				else
					tags += ", " + tag;
			});

		console.log(tags);

		if (report_type == 'GROWTH')
		{
			Backbone.history.navigate("report-growth/" + tags, { trigger : true });
			return;
		}
		else if (report_type == 'FUNNEL')
		{
			Backbone.history.navigate("report-funnel/" + tags, { trigger : true });
			return;
		}
		else if (report_type == 'RATIO')
		{
			var tag1 = object["tag1"];
			var tag2 = object["tag2"];
			Backbone.history.navigate("report-ratio/" + tag1 + "/" + tag2, { trigger : true });
			return;
		}

	});
}
/** Activity and contact report add edit functionality * */
var report_utility = {

/** Loads add report for activity email report* */
load_activities : function(el)
{
	// Fills owner select element
	fillSelect("users-list", '/core/api/users/partial', 'domainUser', function()
	{
		loadActivityReportLibs(function()
		{

			$('#activity-type-list, #users-list', el).multiSelect();
			$('#ms-activity-type-list .ms-selection', el).children('ul').addClass('multiSelect').attr("name", "activity").attr("id", "activity_type");
			$('#ms-users-list .ms-selection', el).children('ul').addClass('multiSelect').attr("name", "user_ids").attr("id", "user_ids");
			++count;
			if (count > 0)
				$("#reports-listerners-container").html(el);

			$('.activity_time_timepicker', el).timepicker({ 'timeFormat' : 'H:i ', 'step' : 30 });
			$(".activity_time_timepicker", el).val("09:00");
			$("#report_timezone", el).val(ACCOUNT_PREFS.timezone);

		});

	}, '<option value="{{id}}">{{name}}</option>', true, el);
},

/** Editing the condition for an existing activity email report* */
edit_activities : function(el, json)
{
	var frequency=json.frequency;
	$('#activity-type-list, #users-list', el).multiSelect();
	$('#ms-activity-type-list .ms-selection', el).children('ul').addClass('multiSelect').attr("name", "activity").attr("id", "activity_type");
	$('#ms-users-list .ms-selection', el).children('ul').addClass('multiSelect').attr("name", "user_ids").attr("id", "user_ids");

	$("#reports-listerners-container").html(el)
	$.each(json.user_ids, function(i, user_id)
	{
		$('#users-list').multiSelect('select', user_id);
		console.log('select user---', user_id);
	});
	$.each(json.activity, function(i, activity)
	{
		$('#activity-type-list').multiSelect('select', activity);
		console.log('select activity-------', activity);
	});
	$('#ms-activity-type-list .ms-selection').children('ul').addClass('multiSelect').attr("name", "activity").attr("id", "activity_type");
	$('#ms-users-list .ms-selection').children('ul').addClass('multiSelect').attr("name", "user_ids").attr("id", "user_ids");

	if (json.report_timezone == null)
	{
		$("#report_timezone").val(ACCOUNT_PREFS.timezone);
	}
	// based on frequency we are showing and hiding the time and date and
	// month fields
	updateWeekDayReportVisibility(frequency, "activity");
	$('.activity_time_timepicker').timepicker({ 'timeFormat' : 'H:i ', 'step' : 30 });
},

/** Loads add report for contact email report* */
load_contacts : function(el)
{

	fillSelect("custom-fields-optgroup", "core/api/custom-fields/scope?scope=CONTACT", undefined, function()
	{
		loadActivityReportLibs(function()
		{

			$('#multipleSelect', el).multiSelect({ selectableOptgroup : true });

			$('.ms-selection', el).children('ul').addClass('multiSelect').attr("name", "fields_set").attr("id", "fields_set").sortable();

			++count;
			if (count > 1)
				$("#reports-listerners-container").html(el);

			$('.report_time_timepicker', el).timepicker({ 'timeFormat' : 'H:i ', 'step' : 30 });
			$(".report_time_timepicker", el).val("09:00");
			$("#report_timezone", el).val(ACCOUNT_PREFS.timezone);

		});

	}, '<option value="custom_{{field_label}}">{{field_label}}</option>', true, el);

	head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
	{
		scramble_input_names($(el).find('div#report-settings'));
		chainFiltersForContact(el, undefined, function()
		{
			++count;
			if (count > 1 )
				$("#reports-listerners-container").html(el)
		});
	});
},

/** Editing the condition for an existing contacts email report* */
edit_contacts : function(el, report, flag)
{
	console.log(el);
	console.log(report.toJSON());
	$('#multipleSelect', el).multiSelect({ selectableOptgroup : true });
	++count;
	if (count > 1 )
		deserialize_multiselect(report.toJSON(), el, flag);

	setTimeout(function()
	{
		$('.report_time_timepicker').timepicker({ 'timeFormat' : 'H:i ', 'step' : 30 });

		var frequency = report.toJSON().duration;
		updateWeekDayReportVisibility(frequency,"contact");

		if (report.toJSON().report_timezone == null)
		{
			$("#report_timezone").val(ACCOUNT_PREFS.timezone);
		}
	}, 1000);
}, 
/**Function block to be executed for every call back for Call Reports*/
call_reports : function(url,reportType,graphOn){
	var selector="calls-chart";


		if(reportType == 'timebased'){
			showBar(url,selector,null,"","");
			//report_utility.call_timeBased(selector,data);
			return;
		}
	var answeredCallsCountList=[];
	var busyCallsCountList=[];
	var failedCallsCountList=[];
	var voiceMailCallsCountList=[];
	var missedCallsCountList= [];
	var inquiryCallsCountList= [];
	var interestCallsCountList= [];
	var noInterestCallsCountList= [];
	var incorrectReferralCallsCountList= [];
	var newOpportunityCallsCountList= [];
	var meetingScheduledCallsCountList = [];
	var queuedCallsCountList = [];
	var callsDurationList=[];
	var totalCallsCountList=[];
	var domainUsersList=[];
	var domainUserImgList=[];
	var averageCallList=[];
	var sizey = parseInt($('#'+selector).parent().attr("data-sizey"));
	var topPos = 50*sizey;
	if(sizey==2 || sizey==3)
		topPos += 50;
	$('#'+selector).html("<div class='text-center v-middle opa-half' style='margin-top:"+topPos+"px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");

	portlet_graph_data_utility.fetchPortletsGraphData(url,function(data){
		if(data.status==403){
			$('#'+selector).html("<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
			return;
		}

		answeredCallsCountList=data["answeredCallsCountList"];
		busyCallsCountList=data["busyCallsCountList"];
		failedCallsCountList=data["failedCallsCountList"];
		voiceMailCallsCountList=data["voiceMailCallsCountList"];
		missedCallsCountList = data["missedCallsCountList"];
		inquiryCallsCountList = data["inquiryCallsCountList"];
		interestCallsCountList = data["interestCallsCountList"];
		noInterestCallsCountList = data["noInterestCallsCountList"];
		incorrectReferralCallsCountList = data["incorrectReferralCallsCountList"];
		meetingScheduledCallsCountList = data["meetingScheduledCallsCountList"];
		newOpportunityCallsCountList = data["newOpportunityCallsCountList"];
		queuedCallsCountList = data["queuedCallsCountList"];
		callsDurationList=data["callsDurationList"];
		totalCallsCountList=data["totalCallsCountList"];
		domainUsersList=data["domainUsersList"];
		domainUserImgList=data["domainUserImgList"];
		pieGraphRegions=['Answered Calls','Busy Calls','Failed Calls','Voice Mail Calls','Missed','Inquiry',
		'Interest','No Interest','Incorrect Referral','Meeting Scheduled','New Opportunity','Other'];
		
		var series=[];
		var text='';
		var colors;
		
		/**This executes for plotting pie chart*/
		
		if(reportType == 'pie-graph'){ /**When it is a pie graph and dropdown is Number of calls */
			
			var answeredCallCount=0;
			var CompleteCallsCount=[];
			$.each(answeredCallsCountList,function(index,answeredCall){
				answeredCallCount +=answeredCall;
			});
			CompleteCallsCount.push(answeredCallCount);
			var busyCallCount=0;
			$.each(busyCallsCountList,function(index,busyCall){
				busyCallCount +=busyCall;
			});
			CompleteCallsCount.push(busyCallCount);
			var failedCallCount=0;
			$.each(failedCallsCountList,function(index,failedCall){
				failedCallCount +=failedCall;
			});
			CompleteCallsCount.push(failedCallCount);
			var voicemailCallCount=0;
			$.each(voiceMailCallsCountList,function(index,voicemailCall){
				voicemailCallCount +=voicemailCall;
			});
			CompleteCallsCount.push(voicemailCallCount);

			var missedCallsCount=0;
			$.each(missedCallsCountList,function(index,missedCall){
				missedCallsCountList +=missedCall;
			});
			CompleteCallsCount.push(missedCallsCount);

			var inquiryCallsCount=0;
			$.each(inquiryCallsCountList,function(index,inquiryCall){
				inquiryCallsCount +=inquiryCall;
			});
			CompleteCallsCount.push(inquiryCallsCount);

			var interestCallsCount=0;
			$.each(interestCallsCountList,function(index,interestCall){
				interestCallsCount +=interestCall;
			});
			CompleteCallsCount.push(interestCallsCount);

			var noInterestCallsCount=0;
			$.each(noInterestCallsCountList,function(index,noInterestCall){
				noInterestCallsCount +=noInterestCall;
			});
			CompleteCallsCount.push(noInterestCallsCount);

			var incorrectReferralCallsCount=0;
			$.each(incorrectReferralCallsCountList,function(index,incorrectReferralCall){
				incorrectReferralCallsCount +=incorrectReferralCall;
			});
			CompleteCallsCount.push(incorrectReferralCallsCount);


			var meetingScheduledCallsCount=0;
			$.each(meetingScheduledCallsCountList,function(index,meetingScheduledCall){
				meetingScheduledCallsCount +=meetingScheduledCall;
			});
			CompleteCallsCount.push(meetingScheduledCallsCount);

			var newOpportunityCallsCount=0;
			$.each(newOpportunityCallsCountList,function(index,newOpportunityCall){
				newOpportunityCallsCount +=newOpportunityCall;
			});
			CompleteCallsCount.push(newOpportunityCallsCount);

			var queuedCallsCount=0;
				$.each(queuedCallsCountList,function(index,queuedCall){
					queuedCallsCount +=queuedCall;
				});
				CompleteCallsCount.push(queuedCallsCount);
			
			portlet_graph_utility.callsByPersonPieGraph(selector,pieGraphRegions,CompleteCallsCount);
			return;
			
		}
		
		/**This executes for plotting the Bar graph*/ 
		if(graphOn == "number-of-calls"){
			var tempData={};
			tempData.name="Answered";
			tempData.data=answeredCallsCountList;
			series[0]=tempData;
			
			tempData={};
			tempData.name="Busy";
			tempData.data=busyCallsCountList;
			series[1]=tempData;
			
			tempData={};
			tempData.name="Failed";
			tempData.data=failedCallsCountList;
			series[2]=tempData;
			
			tempData={};
			tempData.name="Voicemail";
			tempData.data=voiceMailCallsCountList;
			series[3]=tempData;

			tempData = {};
			tempData.name = "Missed ";
			tempData.data = missedCallsCountList;
			series[4] = tempData;

			tempData = {};
			tempData.name = "Inquiry";
			tempData.data = inquiryCallsCountList;
			series[5] = tempData;

			tempData = {};
			tempData.name = "Interest";
			tempData.data = interestCallsCountList;
			series[6] = tempData;

			tempData = {};
			tempData.name = "No Interest";
			tempData.data = noInterestCallsCountList;
			series[7] = tempData;

			tempData = {};
			tempData.name = "Incorrect Referral";
			tempData.data = incorrectReferralCallsCountList;
			series[8] = tempData;

			tempData = {};
			tempData.name = "Meeting Scheduled";
			tempData.data = meetingScheduledCallsCountList;
			series[9] = tempData;

			tempData = {};
			tempData.name = "New Opportunity";
			tempData.data = newOpportunityCallsCountList;
			series[10] = tempData;

				tempData = {};
			tempData.name = "Other";
			tempData.data = queuedCallsCountList;
			series[11] = tempData;

			text="Total Calls";
			colors=['green','blue','red','violet'];
		}
		else if(graphOn == "average-calls"){
			
				var tempData={};
				tempData.name="Average Call Duration";
			    $.each(callsDurationList,function(index,duration){
			    if(duration > 0){
			    	
					var callsDurationAvg=duration/answeredCallsCountList[index];
					averageCallList.push(callsDurationAvg);
			    	
			    }else{
			    	averageCallList.push(0);
			    }
				
			    });
			    tempData.data=averageCallList;
			    tempData.showInLegend=false;
			    series[0]=tempData;
			    text="Average Call Duration (Sec)";
			    colors=['green'];
		}
		else
		{
			var tempData={};
			tempData.name="Total Call Duration";
			var callsDurationInMinsList = [];
			$.each(callsDurationList,function(index,duration){
				if(duration > 0){
					callsDurationInMinsList[index] = duration;
				}else{
					callsDurationInMinsList[index] = 0;
				}
				
			});
			tempData.data=callsDurationInMinsList;
			tempData.showInLegend=false;
			series[0]=tempData;
			text="Calls Duration (Sec)";
			colors=['green'];
		}
		
		portlet_graph_utility.callsPerPersonBarGraph(selector,domainUsersList,series,totalCallsCountList,callsDurationList,text,colors,domainUserImgList);
	});

	return;

},

/**Function block to be executed on every call back for User Reports*/
user_reports :function(callReportUrl){
	
	
	   var selector="calls-chart-user";
		
		var answeredCallsCountList=[];
		var busyCallsCountList=[];
		var failedCallsCountList=[];
		var voiceMailCallsCountList=[];
		var missedCallsCountList= [];
		var inquiryCallsCountList= [];
		var interestCallsCountList= [];
		var noInterestCallsCountList= [];
		var incorrectReferralCallsCountList= [];
		var newOpportunityCallsCountList= [];
		var meetingScheduledCallsCountList = [];
		var queuedCallsCountList = [];
		var callsDurationList=[];
		var totalCallsCountList=[];
		var domainUsersList=[];
		var domainUserImgList=[];
		var averageCallList=[];
		var callsDurationAvg=0;
		var sizey = parseInt($('#'+selector).parent().attr("data-sizey"));
		var topPos = 50*sizey;
		if(sizey==2 || sizey==3)
			topPos += 50;
		$('#'+selector).html("<div class='text-center v-middle opa-half' style='margin-top:"+topPos+"px'><img src='"+updateImageS3Path('../flatfull/img/ajax-loader-cursor.gif')+"' style='width:12px;height:10px;opacity:0.5;' /></div>");
		
		portlet_graph_data_utility.fetchPortletsGraphData(callReportUrl,function(data){
			if(data.status==403){
				$('#'+selector).html("<div class='portlet-error-message'><i class='icon-warning-sign icon-1x'></i>&nbsp;&nbsp;Sorry, you do not have the privileges to access this.</div>");
				return;
			}
			answeredCallsCountList=data["answeredCallsCountList"];
			busyCallsCountList=data["busyCallsCountList"];
			failedCallsCountList=data["failedCallsCountList"];
			voiceMailCallsCountList=data["voiceMailCallsCountList"];
			callsDurationList=data["callsDurationList"];
			totalCallsCountList=data["totalCallsCountList"];
			domainUsersList=data["domainUsersList"];
			domainUserImgList=data["domainUserImgList"];
			missedCallsCountList = data["missedCallsCountList"];
			inquiryCallsCountList = data["inquiryCallsCountList"];
			interestCallsCountList = data["interestCallsCountList"];
			noInterestCallsCountList = data["noInterestCallsCountList"];
			incorrectReferralCallsCountList = data["incorrectReferralCallsCountList"];
			meetingScheduledCallsCountList = data["meetingScheduledCallsCountList"];
			newOpportunityCallsCountList = data["newOpportunityCallsCountList"];
			queuedCallsCountList = data["queuedCallsCountList"];
			callsDurationList=data["callsDurationList"];
			totalCallsCountList=data["totalCallsCountList"];
			domainUsersList=data["domainUsersList"];
			domainUserImgList=data["domainUserImgList"];
			pieGraphRegions=['Answered Calls','Busy Calls','Failed Calls','Voice Mail Calls','Missed','Inquiry',
			'Interest','No Interest','Incorrect Referral','Meeting Scheduled','New Opportunity','Other'];
			
			var series=[];
			var text='';
			var colors;
			
			/**This executes for plotting pie chart*/
				
				var answeredCallCount=0;
				var CompleteCallsCount=[];
				$.each(answeredCallsCountList,function(index,answeredCall){
					answeredCallCount +=answeredCall;
				});
				CompleteCallsCount.push(answeredCallCount);
				var busyCallCount=0;
				$.each(busyCallsCountList,function(index,busyCall){
					busyCallCount +=busyCall;
				});
				CompleteCallsCount.push(busyCallCount);
				var failedCallCount=0;
				$.each(failedCallsCountList,function(index,failedCall){
					failedCallCount +=failedCall;
				});
				CompleteCallsCount.push(failedCallCount);
				var voicemailCallCount=0;
				$.each(voiceMailCallsCountList,function(index,voicemailCall){
					voicemailCallCount +=voicemailCall;
				});
				CompleteCallsCount.push(voicemailCallCount);

				var missedCallsCount=0;
				$.each(missedCallsCountList,function(index,missedCall){
					missedCallsCountList +=missedCall;
				});
				CompleteCallsCount.push(missedCallsCount);

				var inquiryCallsCount=0;
				$.each(inquiryCallsCountList,function(index,inquiryCall){
					inquiryCallsCount +=inquiryCall;
				});
				CompleteCallsCount.push(inquiryCallsCount);

				var interestCallsCount=0;
				$.each(interestCallsCountList,function(index,interestCall){
					interestCallsCount +=interestCall;
				});
				CompleteCallsCount.push(interestCallsCount);

				var noInterestCallsCount=0;
				$.each(noInterestCallsCountList,function(index,noInterestCall){
					noInterestCallsCount +=noInterestCall;
				});
				CompleteCallsCount.push(noInterestCallsCount);

				var incorrectReferralCallsCount=0;
				$.each(incorrectReferralCallsCountList,function(index,incorrectReferralCall){
					incorrectReferralCallsCount +=incorrectReferralCall;
				});
				CompleteCallsCount.push(incorrectReferralCallsCount);

				var meetingScheduledCallsCount=0;
				$.each(meetingScheduledCallsCountList,function(index,meetingScheduledCall){
					meetingScheduledCallsCount +=meetingScheduledCall;
				});
				CompleteCallsCount.push(meetingScheduledCallsCount);

				var newOpportunityCallsCount=0;
				$.each(newOpportunityCallsCountList,function(index,newOpportunityCall){
					newOpportunityCallsCount +=newOpportunityCall;
				});
				CompleteCallsCount.push(newOpportunityCallsCount);

				var queuedCallsCount=0;
				$.each(queuedCallsCountList,function(index,queuedCall){
					queuedCallsCount +=queuedCall;
				});
				CompleteCallsCount.push(queuedCallsCount);

				if(callsDurationList[0]!=0)
				   callsDurationAvg=callsDurationList[0]/answeredCallsCountList[0];

				$('.avg-duration').html("Average Time Spent on Call:"+portlet_utility.getPortletsTimeConversion(Math.round(callsDurationAvg)));
				
				portlet_graph_utility.callsByPersonPieGraph(selector,pieGraphRegions,CompleteCallsCount);
			
		});
},

	Goal_report : function(url)
	{
		var selector1="count_goals_chart";
		var selector2="amount_goals_chart";
		var colors1=[ '#ffffff', '#27C24C' ];
		var colors2= ['#ffffff','#fad733'];
		portlet_graph_data_utility.fetchPortletsGraphData(url,function(data){
					if(data["goalCount"]==0)
					{
						$('#' + selector1)
									.html(
										'<div class="portlet-error-message" style=" font-size: 14px;font-style: normal;padding-top: 174px;padding-bottom : 203px">No Deals Goals set </div>');
								
					}
					else{

					 showGuage(selector1,data["dealcount"],data["goalCount"],'Won Deals','',true);
					}
					if(data["goalAmount"]==0)
					{
						$('#' + selector2)
										.html(
												'<div class="portlet-error-message" style="font-size: 14px;font-style: normal;padding-top: 174px;padding-bottom : 203px">No Amount Goals set </div>');
								
					}
					else{

					 showGuage(selector2,data["dealAmount"],data["goalAmount"],'Revenue','',true);
					}
		});

	},
	
		conversion_report : function(url)
		{

			
			portlet_graph_data_utility.fetchPortletsGraphData(url,function(data){

				console.log(data);
				//var div='';
				var pipeline_json=[];
				$.each(data,function(index,data1){
				$.each(data1,function(index,data2){
				 	 $.each(data2,function(k,v){
				 	 	var total=0;
				 	 	$.each(v,function(k1,v1){
				 	 		total=total+v1;
				 	 	});
				 	 	if(total>0){
				 	var div='<div id="'+k+'" class="conversion_track col-sm-4 panel wrapper"></div>';
				 	
				 	$(".converionsPipeline").append(div);

				 	
				 	showFunnelForConversion(k,k,true,v);
				 }
				 	/*//var innerdiv='';
				 	var index=0;
				 		$.ajax({ url : 'core/api/milestone/pipelinesbyName/'+k, type : 'GET', success : function(data)
					{
							console.log(data);
							pipeline_json.push(k,data[0].won_milestone);
							 $('.conversion_track ').each(function(index)
								 {
								 		var id=$(this).attr('id');
								 		var won_class=pipeline_json.pop(id);
								 		$(this).find('.'+won_class);

								 });
					}
				 });
				 	var percent='';
				 	var value;
				 	var total=0;
				 	var first_name;
				 		var first;
				 	$.each(v,function(k1,v1){
				 		var percent='';
				 		var percent_base='';
				 		
				 		total=total+v1;
				 		if(index==0){
				 				if(v1!=0)
				 				percent=100;
				 				else
				 					percent=0;
				 				first=v1;
				 				first_name=k1;
				 			}
				 			else
				 			{
				 				if(value!=0)
				 				percent=(v1*100)/value;
				 				else
				 					percent=0;
				 				if(first!=0)
				 					percent_base=(v1*100)/first;
				 			}
				 				
				 			value=v1;
				 		index++;
				 		if(first_name==k1)
				 			div=div.concat('<div class="'+k1+'">'+
				 				'<span class="pull-right text-primary">(' +v1+')</span>'+
				 				'<span>'+k1+'</span>'+
           				' </div>')
				 		else
				 			div=div.concat('<div class="'+k1+'">'+
              '<span class="pull-right text-primary">'+Math.round(percent)+'% ('+percent_base+'% of ' +first_name+')(' +v1+')</span>'+
              '<span>'+k1+'</span>'+
           ' </div>');
				 			div=div.concat(
            '<div class="progress progress-xs m-t-sm bg-light">'+
              '<div class="progress-bar bg-primary" data-toggle="tooltip" data-original-title="'+Math.round(percent)+'%" style="width: '+Math.round(percent)+'%"></div>'+
            '</div>');
				 	});

				 	if(total==0)
				 		div=div.concat('<div class="hidden"></div>');
				 	div=div.concat('</div>');
				 	
				 		//$('.conversion_track').hide();*/
				 	
				 });
});				
}); 
				 if($('.converionsPipeline').children().length!=0)
				 	$('.converionsPipeline').parents('.row').find('.bg-primary').show();

				
			});
				
		},

getRepPerformanceLog : function(url) {
		fetchReportData(url, function(data)
		{
			if(data.length!=0){
				console.log("Inside RepPerform");
				getTemplate("report-user-data", data, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#rep-performance-reports').html($(template_ui));	
				
				showLossReasonGraphForUserReports();

								/*var callReportUrl='core/api/portlets/calls-per-person/' + getSelectedDates();
							
							if ($('#owner').length > 0)
							{
								if ($("#owner").val() != ""){
									var user=$("#owner").val();
								//var user=CURRENT_DOMAIN_USER.id;
								callReportUrl=callReportUrl+'&user=["'+user+'"]';
							}
							}
							
							report_utility.user_reports(callReportUrl);*/

							var goal_url = '/core/api/portlets/goals/';
							var user;
							if ($('#owner').length > 0)
							{
								if ($("#owner").val() != ""){
									user=$("#owner").val();
								//var user=CURRENT_DOMAIN_USER.id;
								goal_url=goal_url+user;
							}
							}
							goal_url=goal_url+ getSelectedDates();
							report_utility.Goal_report(goal_url);

							var conversion_url='/core/api/opportunity/conversionRate/'+user+getSelectedDates();
							report_utility.conversion_report(conversion_url);
							
			}, "#rep-performance-reports");
			}
			else
			{
				$('#rep-performance-reports').html('<div style="padding-left:50%;color:#98A6AD">No Data to display</div>');
			}
		});
	

},
 
 	loadReportsTemplate : function(callback){
 		if (!tight_acl.checkPermission('REPORT'))
					return;

				//$("#content").html("<div id='reports-listerners-container'></div>");
				getTemplate('report-categories', {}, undefined, function(template_ui)
				{
					if (!template_ui)
						return;
					$('#content').html($(template_ui));

						preloadImages([
							'flatfull/img/reports_images/Growth-graph.png',
							'flatfull/img/reports_images/ratio.png',
							'flatfull/img/reports_images/funnel-graph.png',
							'flatfull/img/reports_images/Campaign-stats.png',
							'flatfull/img/reports_images/Calls-By-User.png',
							'flatfull/img/reports_images/averageofcall.png',
							'flatfull/img/reports_images/user-activities-call.png',
							'flatfull/img/reports_images/Incoming-Deals.png',
							'flatfull/img/reports_images/Lost-Deal-Analysis.png',
							'flatfull/img/reports_images/Revenue.png',
							'flatfull/img/reports_images/Sales-forecast.png',
							'flatfull/img/reports_images/User-reports.png',
							'flatfull/img/reports_images/Call-Outcomes.png',
							'flatfull/img/reports_images/contact.png',
							'flatfull/img/reports_images/user-activities.png',
							'flatfull/img/reports_images/Daily-reports.png',
							'flatfull/img/reports_images/Call_Report_Time.png',
							'flatfull/img/reports_images/Rep_Performance.png',
							'flatfull/img/reports_images/Comparison_Report.png',
							]);
				initializeReportsListeners();
				hideTransitionBar();
				$(".active").removeClass("active");
				$("#reportsmenu").addClass("active");
				var tab_id=$('a[href="'+window.location.hash+'"]').parents('.tab-pane').attr('id');
				if(tab_id!=undefined){
						tab_id=$('a[href="#'+tab_id+'"]').parents('.maintab').find('a').attr("href").substring(1);
						_agile_set_prefs('reports_tab', tab_id);
					}
				var reportsTab = _agile_get_prefs("reports_tab");
				$('.sub-nav-tab',$('#reports-tab-container a[href="#'+reportsTab+'"]').parent()).show();
				$('#reports-tab-container a[href="#'+reportsTab+'"]').parent().addClass('report-selected');
				

					$('[data-toggle="tooltip"]').tooltip();
					callback();

				}, "#content");
				
 	}
 };


/* Loads libraries needed for reporting * */
function initReportLibs(callback)
{

	head.load(LIB_PATH + 'lib/date-charts.js', LIB_PATH + 'lib/date-range-picker.js'+'?_=' + _agile_get_file_hash('date-range-picker.js'), function()
	{
		callback();

	});
}

/* Loads libraries needed for activity reporting * */
function loadActivityReportLibs(callback)
{

	head.js(LIB_PATH + 'lib/jquery.multi-select.js', CSS_PATH + 'css/businesshours/jquerytimepicker.css', LIB_PATH + 'lib/businesshours/jquerytimepicker.js',
			function()
			{
				callback();
			});

}
/* format the selected start and end dates  as an url * */
function getSelectedDates(){
	var options = "?";

	var range = $('#range').html().split("-");
	var start_time=new Date(range[0]).getTime() / 1000;

	var end_value = $.trim(range[1]);

	
	if (end_value)
		end_value = end_value + " 23:59:59";

	var end_time=new Date(end_value).getTime() / 1000;
	options += ("start-date=" + start_time + "&end-date=" + end_time);
return options;
}
//Stores report object, so it can be used while creating report table headings
var REPORT;

$(function()
{
  $('body').on('mouseover','.highcharts-container',function(e){
      $(this).find('.highcharts-button').show();
  });
  $('body').on('mouseout','.highcharts-container',function(e){
      $(this).find('.highcharts-button').hide();
  });
});
/**
 * Initializes listener to perform various event function related to contact
 * reports
 */
function initializeReportsListeners(){


	$('#reports-listerners-container')
			.on(
					'click',
					'#reports-email-now',
					function(e)
					{
						// e.preventDefault();
						e.stopPropagation();

						var id = $(this).attr('data');
						var url='core/api/reports/send/' + id;
						$("#report-send-confirmation").find('input').attr("data",url);
						$('#report-send-confirmation').modal('show');
						initializeReportSendConfirm();
						
					});

	$('#reports-listerners-container')
			.on(
					'click',
					'#reports-campaign-email-now',
					function(e)
					{
						// e.preventDefault();
						e.stopPropagation();

						var id = $(this).attr('data');
						var url='core/api/campaignReports/send/' + id;
						$("#report-send-confirmation").find('input').attr("data",url);
						$('#report-send-confirmation').modal('show');
						initializeReportSendConfirm();
						
					});

	$('#reports-listerners-container').on(
			'click',
			'#campaign_id',
			function(e)
			{
				e.preventDefault();
				e.stopPropagation();
				$.ajax({ url : '/core/api/workflows?page_size=1', type : 'GET', dataType : "json",
					accept : { json : 'application/json', xml : 'application/xml' }, success : function(data)
					{
						if (data[0])
						{
							window.document.location = "#email-reports/" + data[0].id;
							$(window).scrollTop(0);
						}
						else
							window.document.location = "#workflows";

						return;

					}, error : function(response)
					{
						showAlertModal("retry", undefined, function(){
							window.document.location = "#reports";
						});
					} });

			});

	$('#reports-listerners-container').on('click', '#report-instant-results', function(e) 
			{
		e.stopPropagation();
		
	});

	$('#reports-listerners-container').on('change', '#frequency, #duration', function(e) 
			{

		var container = $(this).attr("id") == "duration" ? "contact" : "activity";
		updateWeekDayReportVisibility($(this).val(), container);
	});

	/*
	 * author jaagdeesh
	 */
	$('#reports-listerners-container').on('click', '#report-dashlat-navigate', function(e)
	{
		e.preventDefault();

		Backbone.history.navigate("add-dashlet", { trigger : true });

	});

	$('#reports-listerners-container').on('click', '#activity_advanced', function(e)
	{
		e.preventDefault();
		var el = $("#activity_advanced span i");
		el.toggleClass("fa-minus").toggleClass("fa-plus");

		});


	$('#reports-listerners-container').on('click', '#report_advanced', function(e) 
			{
		e.preventDefault();
		var el = $("#report_advanced span i");
		el.toggleClass("fa-minus").toggleClass("fa-plus");
			});

		$('.col-md-3')
			.on(
					"mouseenter",
					'.show_screenshot',
					function(e) {

						$('.show_screenshot').popover();
					});
			$('.tab-pane')
			.on(
					"click",
					'.report-go',
					function(e) {

						var tab_id=$(this).parents('.tab-pane').attr('id');
						tab_id=$('a[href="#'+tab_id+'"]').parents('.maintab').find('a').attr("href").substring(1);
						_agile_set_prefs('reports_tab', tab_id);
						return;
					
					});
			$('#reports-listerners-container')
			.off(
					"click",'#reports-tab-container>div>ul>li');
			$('#reports-listerners-container')
			.on(
					"click",'#reports-tab-container>div>ul>li',function(e){

						var flag=$(this).find('.sub-nav-tab').is(":visible");
						if($('.reports_tab_content').is(":visible"))
							$('.reports_tab_content').hide();
						$('.sub-nav-tab').hide();
						if(flag){
							//$("i", this).first().removeClass("fa-minus").addClass("fa-plus");
							$(this).find('.sub-nav-tab').hide();
						}
							
						else{
							//$("i", this).first().removeClass("fa-plus").addClass("fa-minus");
							$(this).find('.sub-nav-tab').show();
						}
						//$('.reports_tab_content').show();
					});

		$('#reports-listerners-container')
			.off("mouseenter",'.sub-nav-tab');
			$('#reports-listerners-container')
			.on("mouseenter",'.sub-nav-tab',function(e){
					$('.reports_tab_content').show();
					var top= $(this).offset().top;top = top-130;
					$('.reports_tab_content').css('top',top+'px')
				});

			$('#reports-listerners-container')
			.off("mouseleave",'#reports-tab-container');
			$('#reports-listerners-container')
			.on("mouseleave",'#reports-tab-container',function(e){
					$('.reports_tab_content').hide();
					$('.nav-tabs .active').removeClass('active');
				});
				$('#reports-listerners-container')
			.off("mouseover",'.reports_tab_content');
			$('#reports-listerners-container')
			.on("mouseover",'.reports_tab_content',function(e){
					$('.reports_tab_content').hide();				});


			$('#reports-listerners-container')
			.off(
					"mouseover",
					'.sub-nav-tab a');
			$('#reports-listerners-container')
			.on(
					"mouseover",
					'.sub-nav-tab a',
					function(e) {
						var tab_id = $(this).attr('href').substring(1);

		$('.sub-nav-tab a').removeClass('active');
		$('.tab-pane').removeClass('active');

		$(this).addClass('active');
		$("#"+tab_id).addClass('active');
					});

			$('#reports-listerners-container')
			.off(
					"click",
					'.sub-nav-tab li');
			$('#reports-listerners-container')
			.on(
					"click",
					'.sub-nav-tab li',
					function(e) {
						e.preventDefault();
						e.stopPropagation();

						var tab_id=$('a',$(this)).attr('href').substring(1);
						//$('._upgrade','#'+tab_id).trigger('click');
						var upgrade_id=$('._upgrade','#'+tab_id).attr('id');
						var upgrade_span=$('.'+upgrade_id,'#'+tab_id);
						if(upgrade_span.length!=0)
						{$('#reportsUpgradeModal').html(getTemplate('upgradeModal'));
					var cloned_upgrade=upgrade_span.clone();
							$('.modal-body','#reportsUpgradeModal').html(cloned_upgrade);
							$(cloned_upgrade,'.modal-body').show();
							$('.text-info',cloned_upgrade).addClass('upgrade_close');
									$('#reportsUpgradeModal').modal('show');
								}
						var url=($("#"+tab_id).find('a:not(.text-info)').attr('href') || $("#"+tab_id).find('a#call-activity-link').attr('id'))
						if(url!=undefined)
						{
							$("#"+tab_id).find('a').trigger('click');
							if(url=='call-activity-link' || url=='#')
								return;
							url=url.substring(1);
						Backbone.history.navigate(url,{trigger:true});
					}
					});
			$('#reportsUpgradeModal').on('click','.upgrade_close',function(e){
					$('#reportsUpgradeModal').modal('hide');
			});
			

}

function reportsContactTableView(base_model, customDatefields, view)
{
	/*
	 * Old Code : Using this fails on firefox, works on Chrome though // Creates
	 * list view for var itemView = new Base_List_View({ model : base_model,
	 * template : 'contacts-custom-view-model', tagName :
	 * this.options.individual_tag_name }); // Reads the modelData (customView
	 * object) var modelData = this.options.modelData; // Reads fields_set from
	 * modelData var fields = modelData['fields_set']; // Converts base_model
	 * (contact) in to JSON var contact = base_model.toJSON(); // Clears the
	 * template, because all the fields are appended, has to be reset // for
	 * each contact $('#contacts-custom-view-model-template').empty(); //
	 * Iterates through, each field name and appends the field according to //
	 * order of the fields $.each(fields, function(index, field_name) {
	 * if(field_name.indexOf("properties_") != -1) field_name =
	 * field_name.split("properties_")[1];
	 * 
	 * $('#contacts-custom-view-model-template').append(
	 * getTemplate('contacts-custom-view-' + field_name, contact)); }); //
	 * Appends model to model-list template in collection template $(("#" +
	 * this.options.templateKey + '-model-list'), this.el).append(
	 * itemView.render().el); // ----------- this line fails on Firefox
	 */

	getTemplate('contacts-custom-view-custom', {}, undefined, function(ui){

			var modelData = view.options.modelData; // Reads the modelData (customView
			// object)
			var fields = modelData['fields_set']; // Reads fields_set from modelData
			var contact = base_model.toJSON(); // Converts base_model (contact) in to
			// JSON
			var final_html_content = "";
			var element_tag = view.options.individual_tag_name;
			var templateKey = view.options.templateKey;

			// Iterates through, each field name and appends the field according to
			// order of the fields
			$.each(fields, function(index, field_name)
			{

				if (field_name.indexOf("custom_") != -1)
				{
					field_name = field_name.split("custom_")[1];
					var property = getProperty(contact.properties, field_name);
					if (!property)
						property = {};

					if (isDateCustomField(customDatefields, property))
						final_html_content += getTemplate('contacts-custom-view-custom-date', property);
					else
						final_html_content += getTemplate('contacts-custom-view-custom', property);

					return;
				}

				if (field_name.indexOf("properties_") != -1)
					field_name = field_name.split("properties_")[1];

				final_html_content += getTemplate('contacts-custom-view-' + field_name, contact);
			});

			// Appends model to model-list template in collection template
			$(("#" + templateKey + '-model-list'), view.el).append('<' + element_tag + '>' + final_html_content + '</' + element_tag + '>');

			// Sets data to tr
			$(('#' + templateKey + '-model-list'), view.el).find('tr:last').data(base_model);



	 }, null);

}


function deserialize_multiselect(data, el, flag)
{
	$("#reports-listerners-container").html(el);

	if (!data['fields_set'])
		return;
	$.each(data['fields_set'], function(index, field)
	{
	  if(flag !==true)
		$('#multipleSelect', el).multiSelect('select', field);
	});

	$('.ms-selection', el).children('ul').addClass('multiSelect').attr("name", "fields_set").attr("id", "fields_set").sortable();
}

function getEpochTimeFromReport(time, day, frequency)
{

	var time_array = new Array();
	var d = new Date();
	var hour, min;
	if (time)
	{
		time_array = time.toString().split(':');
		hour = time_array[0];
		min = time_array[1];
	}

	if (frequency == "DAILY")
	{
		var date = new Date();

		var day_of_month = date.getDate();

		date.setDate(day_of_month + 1);
		date.setHours(hour);
		date.setMinutes(min);
		return (date.getTime()) / 1000;

	}

	if (frequency == "WEEKLY")
	{
		var date = new Date();

		var weekday = date.getDay();
		var day_of_month = date.getDate();

		if (day > weekday)
		{
			day_of_month += (parseInt(day) - weekday);
		}
		else
		{
			day_of_month = (day_of_month - (weekday - parseInt(day))) + 7;
		}

		date.setDate(day_of_month);
		date.setHours(hour);
		date.setMinutes(min);
		return (date.getTime()) / 1000;

	}

	if (frequency == "MONTHLY")
	{
		var date = new Date();
		var day_of_month = date.getDate();
		var month_in_year = date.getMonth();
		if (day > day_of_month)
		{
			month_in_year = month_in_year;
		}
		else
		{
			month_in_year = month_in_year + 1;
		}
		date.setMonth(month_in_year);
		date.setDate(day);
		date.setHours(hour);
		date.setMinutes(min);
		return (date.getTime()) / 1000;

	}

}

function getNextMonthEppoch(time, day, month)
{
	var time_array = new Array();
	var hour, min;
	if (time)
	{
		time_array = time.toString().split(':');
		hour = time_array[0];
		min = time_array[1];
	}
	var date = new Date();
	var day_of_month = date.getDate();
	var month_in_year = date.getMonth();
	if (day > day_of_month)
	{
		month_in_year = month_in_year + 1;
	}
	else
	{
		month_in_year = month_in_year + 2;
	}

	date.setMonth(month_in_year);
	date.setDate(day);
	date.setHours(hour);
	date.setMinutes(min);
	return (date.getTime()) / 1000;
}


function updateWeekDayReportVisibility(report_value, container_id){

		var day_visibility = "none", weekday_visibility = "none", time_visibility = "none";
		if (report_value == "DAILY")
		{
			time_visibility = "block";
		}
		else if (report_value == "WEEKLY")
		{
			weekday_visibility = "block";
			time_visibility = "block";
		}
		else if (report_value == "MONTHLY")
		{
			time_visibility = "block";
			day_visibility = "block";
		}

		$("#" + container_id + "_report_weekday").css("display",weekday_visibility );
		$("#" + container_id + "_report_day").css("display", day_visibility);
		$("#" + container_id + "_report_time").css("display", time_visibility);

}
/**This is being invoked from call category -call logs under reports:where it should redirect to activities with calls as a entity type*/
$(function()
		{
	
	$("body").on("click","a#call-activity-link", function(e){
	var entitytype = "Calls";
	var entity_attribute = "CALL";
	buildActivityFilters(entitytype,entity_attribute,"entityDropDown");
	//ActivitylogRouter.activities("id");
	App_Activity_log.navigate("activities", { trigger : true });
	
});
	
		});
/**
 * contact-filter.js defines functionalities to show filter in dropdown, events
 * on selecting filter, call to set cookie when filter is selected. Shows name
 * of the selected filter on dropdown button client side. This also defines
 * clone function, used while adding multiple filter conditions
 * 
 * @module Search author: Yaswanth
 */
var filter_name;
var CONTACTS_DYNAMIC_FILTER_COOKIE_STATUS = "toggle_dynamic_filter_" + CURRENT_DOMAIN_USER.id;

/**
 * Change name of input[name='temp'] to more random i.e. temp-<unique_number>.
 * This is necessary for showing correct validation errors when multiple entries with same field-name are on the page.
 * @param el
 */
var scrambled_index=0;
function scramble_input_names(el)
{
	el.find("input").each(function(){
		$(this).attr('name','temp-'+scrambled_index);
		$(this).addClass('required');
		scrambled_index+=1;
	});
}
SEARCHABLE_CONTACT_CUSTOM_FIELDS = undefined;
COMPANY_CUSTOM_FIELDS = undefined;

/**
*  Contact Reports filters event view
*/
var Report_Filters_Event_View = Base_Model_View.extend({
    events: {
    	'click .filter-contacts-multiple-add' : 'contactsFilterMultipleAdd',
    	'click .filter-contacts-multiple-add-or-rules' : 'contactsFilterAddOrRules',
    	'click .filter-companies-multiple-add' : 'companiesFilterMultipleAdd',
    	'click .filter-companies-multiple-add-or-rules' : 'companiesFilterAddOrRules',
    	'click i.filter-contacts-multiple-remove' : 'contactsFilterRemove',
    	'click .filter' : 'filterResults',
    	'click .default_filter' : 'defaultFilterResults',

    	'click #companies-filter' : 'companyFilterResults',
    	'change .lhs_chanined_parent' : 'onParentLHSChanged',
    	'change #condition > select' : 'onConditionChanged',
    	'change #contact_type' : 'onChangeContactType',
    	
    },

	// Filter Contacts- Clone Multiple
	contactsFilterMultipleAdd: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var that = targetEl;
		// To solve chaining issue when cloned

		getTemplate("filter-contacts", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			
			var htmlContent = $($(template_ui).find('.chained-table.contact')[0]).find('tr').clone();
			$(htmlContent).removeClass('hide');
			scramble_input_names($(htmlContent));

			// boolean parameter to avoid contacts/not-contacts fields in form
			chainFilters(htmlContent, function(){
			}, false);

	//		$(this).hide();
			// var htmlContent = $(this).closest("tr").clone();
			$(htmlContent).find("i.filter-contacts-multiple-remove").css("display", "inline-block");
			//hide camapign status
			//$(htmlContent).find('#LHS select').find("optgroup[label='Activities']").remove();
			$(that).prev('table').find("tbody").append(htmlContent);

		}, null);
	},
	
	// Filter Contacts- Clone Multiple
	contactsFilterAddOrRules: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		var that = targetEl;
		// To solve chaining issue when cloned
		getTemplate("filter-contacts", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var htmlContent = $($(template_ui).find('.chained-table.contact')[1]).find('tr').clone();
			$(htmlContent).removeClass('hide');
			scramble_input_names($(htmlContent));

			// boolean parameter to avoid contacts/not-contacts fields in form
			chainFilters(htmlContent, function(){
			}, false);

	//		$(this).hide();
			// var htmlContent = $(this).closest("tr").clone();
			$(htmlContent).find("i.filter-contacts-multiple-remove").css("display", "inline-block");
			//hide camapign status
			//$(htmlContent).find('#LHS select').find("optgroup[label='Activities']").remove()
			$(that).prev('table').find("tbody").append(htmlContent);

		}, null);
		
	},
	
	// Filter Contacts- Clone Multiple
	companiesFilterMultipleAdd: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		// To solve chaining issue when cloned
		var that = targetEl;
		getTemplate("filter-contacts", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var htmlContent = $($(template_ui).find('.chained-table.company')[0]).find('tr').clone();
			$(htmlContent).removeClass('hide');
			scramble_input_names($(htmlContent));

			// boolean parameter to avoid contacts/not-contacts fields in form
			chainFilters(htmlContent,undefined, function(){
			}, false, true);

	//		$(this).hide();
			// var htmlContent = $(this).closest("tr").clone();
			$(htmlContent).find("i.filter-contacts-multiple-remove").css("display", "inline-block");
			$(that).prev("table").find("tbody").append(htmlContent);

		}, null);
		
	},
	
	// Filter Contacts- Clone Multiple
	companiesFilterAddOrRules: function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);
		
		var that = targetEl;
		// To solve chaining issue when cloned
		getTemplate("filter-contacts", {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var htmlContent = $($(template_ui).find('.chained-table.company')[1]).find('tr').clone();
			$(htmlContent).removeClass('hide');
			scramble_input_names($(htmlContent));

			// boolean parameter to avoid contacts/not-contacts fields in form
			chainFilters(htmlContent,undefined, function(){
			}, false, true);

	//		$(this).hide();
			// var htmlContent = $(this).closest("tr").clone();
			$(htmlContent).find("i.filter-contacts-multiple-remove").css("display", "inline-block");
			$(that).prev("table").find("tbody").append(htmlContent);

		}, null);

		
	},

	// Filter Contacts- Remove Multiple
	contactsFilterRemove: function(e)
	{
		var targetEl = $(e.currentTarget);
		$(targetEl).closest("tr").remove();
	},

	// Fetch filter result without changing route on click
	filterResults:  function(e)
	{

		contact_filters_util.filterResults(e);
	},

	/*
	 * If default filter is selected, removes filter cookies an load contacts
	 * with out any query condition
	 */
	defaultFilterResults:  function(e)
	{
		e.preventDefault();
		revertToDefaultContacts();
	},

	companyFilterResults: function(e)
	{
		contact_filters_util.companyFilterResults(e);
		
	},
	

	onParentLHSChanged:  function(e)
	{
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		if (($(targetEl).val()).indexOf('tags') != -1)
		{
			var element = $(targetEl).closest('tr').find('div#RHS');
			addTagsDefaultTypeahead(element);
		}
	},
	
	onConditionChanged: function(e){
		e.preventDefault();
		var targetEl = $(e.currentTarget);

		if ($(targetEl).find("option:selected").hasClass('tags'))
		{
			var element = $(targetEl).parents().closest('tr').find('div#RHS');
			addTagsDefaultTypeahead(element);
		}

		if ($(targetEl).closest('tr').find('td.lhs-block').find('option:selected').attr('field_type') == "CONTACT")
		{
			var that = targetEl;
			var custom_contact_display = function(data, item)
			{
				setTimeout(function(){
					$('input', $(that).closest('tr').find('td.rhs-block')).val(item);
					$('input', $(that).closest('tr').find('td.rhs-block')).attr("data", data);
				},10);
				
			}
			$('input', $(targetEl).closest('tr').find('td.rhs-block')).attr("id", $(targetEl).closest('tr').find('td.lhs-block').find('option:selected').attr("id"));
			$('input', $(targetEl).closest('tr').find('td.rhs-block')).attr("placeholder", "Contact Name");
			$('input', $(targetEl).closest('tr').find('td.rhs-block')).addClass("contact_custom_field");
			agile_type_ahead($('input', $(targetEl).closest('tr').find('td.rhs-block')).attr("id"), $(targetEl).closest('tr').find('td.rhs-block'), contacts_typeahead, custom_contact_display, 'type=PERSON');
		}

		if ($(targetEl).closest('tr').find('td.lhs-block').find('option:selected').attr('field_type') == "COMPANY")
		{
			var that = targetEl;
			var custom_company_display = function(data, item)
			{
				setTimeout(function(){
					$('input', $(that).closest('tr').find('td.rhs-block')).val(item);
					$('input', $(that).closest('tr').find('td.rhs-block')).attr("data", data);
				},10);
				
			}
			$('input', $(targetEl).closest('tr').find('td.rhs-block')).attr("id", $(targetEl).closest('tr').find('td.lhs-block').find('option:selected').attr("id"));
			$('input', $(targetEl).closest('tr').find('td.rhs-block')).attr("placeholder", "Company Name");
			$('input', $(targetEl).closest('tr').find('td.rhs-block')).addClass("company_custom_field");
			agile_type_ahead($('input', $(targetEl).closest('tr').find('td.rhs-block')).attr("id"), $(targetEl).closest('tr').find('td.rhs-block'), contacts_typeahead, custom_company_display, 'type=COMPANY');
		}
		
	},
	
	onChangeContactType: function(e)
	{
		var targetEl = $(e.currentTarget);

		if($(targetEl).val() == 'COMPANY') {
			$('#companies-filter-wrapper').show();
			$('#contacts-filter-wrapper').hide();
		} else {
			$('#companies-filter-wrapper').hide();
			$('#contacts-filter-wrapper').show();
		}
	},
	
});

/**
 * Sets up contact filters list in contacts list page, also whether cookie is
 * save with filter name to load filter results instead of all contacts
 * 
 * @method setupContactFilterList
 * @param cel
 *            Html form element to append filters list,
 */
var contactFiltersListView
function setupContactFilterList(cel, tag_id)
{
	if (tag_id){

		var template = Handlebars.compile('<ul id="added-tags-ul" class="tagsinput p-n m-b-sm m-t-sm m-l-sm"><li  class="inline-block tag btn btn-xs btn-primary" data="developer"><span class="m-l-xs pull-left">{{name}}</span><a class="close default_contact_remove_tag m-l-xs pull-left">&times</a></li></ul>');

	 	// Adds contact name to tags ul as li element
		$('.filter-criteria', cel).html(template({name : decodeURI(tag_id)})).attr("_filter", tag_id);

	}

	var filter_id = null;
	setTimeout(function(){
		
			contactFiltersListView = new Base_Collection_View(
			{
				url : '/core/api/filters?type=PERSON',
				sort_collection : false,
				restKey : "ContactFilter",
				templateKey : "contact-filter-list",
				individual_tag_name : 'li',
				sort_collection : false,
				no_transition_bar : true,
				postRenderCallback : function(el)
				{
					var filter_name;
					// Set saved filter name on dropdown button
					if (filter_name = _agile_get_prefs('contact_filter'))
					{
						/*
						 * Check whether filter contains recent of lead to set
						 * system filter names, to load results based on those
						 * filters
						 */
						if (filter_name.toLowerCase().indexOf('recent') >= 0)
							filter_name = "Recent";

						else if (filter_name.toLowerCase().indexOf('contacts') >= 0)
							filter_name = "My Contacts";

						else if (filter_name.toLowerCase().indexOf('leads') >= 0)
							filter_name = "Leads";

						// If is not system type get the name of the filter from
						// id(from cookie)
						else if (filter_name.indexOf("system") < 0)
						{
							filter_id = filter_name;
							if(contactFiltersListView.collection.get(filter_name))
									filter_name = contactFiltersListView.collection.get(filter_name).toJSON().name;
							
						}

						el.find('.filter-dropdown').append(Handlebars.compile('{{name}}')({name : filter_name}));
					}

					if (!filter_name)
						return;

					var template = Handlebars.compile('<ul id="added-tags-ul" class="tagsinput p-n m-b-sm m-t-sm m-l-sm"><li class="inline-block tag btn btn-xs btn-primary" data="developer"><span class="inline-block m-r-xs v-middle">{{name}}</span><a class="close default_filter">&times</a></li></ul>');

				 	// Adds contact name to tags ul as li element
					$('.filter-criteria', cel).html(template({name : filter_name}));

					if(filter_id)
						$('.filter-criteria', cel).attr("_filter", filter_id);
					else
						$('.filter-criteria', cel).attr("_filter", filter_name);
						
				} });

			// Fetchs filters
			contactFiltersListView.collection.fetch();
		
			// Shows in contacts list
			$('#filter-list', cel).html(contactFiltersListView.render().el);

	}, 500);

		
}

/**
 * Removes filter from cookie and calls function to load default contacts
 * without filter
 */
function revertToDefaultContacts()
{
	// Erase filter cookie. Erases both contact and company filter
	_agile_delete_prefs('contact_filter');
	_agile_delete_prefs('contact_filter_type');
	_agile_delete_prefs('company_filter');
	_agile_delete_prefs('dynamic_filter');

	if (App_Contacts.contactsListView)
		App_Contacts.contactsListView = undefined;
	if (App_Contacts.contact_custom_view)
		App_Contacts.contact_custom_view = undefined;

	// Loads contacts
	App_Contacts.contacts();
}

function chainFiltersForContactAndCompany(el, data, callback) {
	if(data && data.contact_type) {
		if(data.contact_type == 'PERSON') {
			chainFilters($(el).find('.chained-table.contact.and_rules'), data.rules, undefined, false, false);
			chainFilters($(el).find('.chained-table.contact.or_rules'), data.or_rules, undefined, false, false);
			chainFilters($(el).find('.chained-table.company.and_rules'), undefined, undefined, false, true);
			chainFilters($(el).find('.chained-table.company.or_rules'), undefined, callback, false, true);
		} else if(data.contact_type == 'COMPANY') {
			chainFilters($(el).find('.chained-table.company.and_rules'), data.rules, undefined, false, true);
			chainFilters($(el).find('.chained-table.company.or_rules'), data.or_rules, undefined, false, true);
			chainFilters($(el).find('.chained-table.contact.and_rules'), undefined, undefined, false, false);
			chainFilters($(el).find('.chained-table.contact.or_rules'), undefined, callback, false, false);
		}
	} else {
		chainFilters($(el).find('.chained-table.contact.and_rules'), undefined, undefined, false, false);
		chainFilters($(el).find('.chained-table.contact.or_rules'), undefined, undefined, false, false);
		chainFilters($(el).find('.chained-table.company.and_rules'), undefined, undefined, false, true);
		chainFilters($(el).find('.chained-table.company.or_rules'), undefined, callback, false, true);
	}
}

function chainFiltersForContact(el, data, callback) {
	if(data) {
		chainFilters($(el).find('.chained-table.contact.and_rules'), data.rules, undefined, false, false);
		chainFilters($(el).find('.chained-table.contact.or_rules'), data.or_rules, callback, false, false);			
	} else {
		chainFilters($(el).find('.chained-table.contact.and_rules'), undefined, undefined, false, false);
		chainFilters($(el).find('.chained-table.contact.or_rules'), undefined, callback, false, false);
	}
}

/**
 * Chains fields using jquery.chained library. It deserialzed data into form
 * 
 * @param el
 */
function chainFilters(el, data, callback, is_webrules, is_company)
{
	if(is_company) {
		fillCompanyCustomFieldsInFilters(el, function(){
			show_chained_fields(el, data, true);
			if (callback && typeof (callback) === "function")
			{
				// execute the callback, passing parameters as necessary
				callback();
			}
		});
		return;
	} else {
		if(!SEARCHABLE_CONTACT_CUSTOM_FIELDS)
		{			
			/*if(window.location.hash.indexOf("contact-filter") != -1)
			   $("#content").html(getRandomLoadingImg());*/
			fillContactCustomFieldsInFilters(el, function(){
				show_chained_fields(el, data, true);
				if (callback && typeof (callback) === "function")
				{
					// execute the callback, passing parameters as necessary
					callback();
				}
			}, is_webrules)
			return;
		}
		
		fillCustomFields(SEARCHABLE_CONTACT_CUSTOM_FIELDS, el, undefined, false)
	}
	
	
	show_chained_fields(el, data);
	if (callback && typeof (callback) === "function")
	{
		// execute the callback, passing parameters as necessary
		callback();
	}
	
}

function show_chained_fields(el, data, forceShow)
{
	var el_self = $(el).clone();
	var LHS, condition, RHS, RHS_NEW, NESTED_CONDITION, NESTED_RHS, NESTED_LHS;

	// LHS, RHS, condition blocks are read from DOM
	LHS = $("#LHS", el);
	condition = $("#condition", el);
	RHS = $("#RHS", el);

	// Extra field required for (Between values condition)
	RHS_NEW = $("#RHS-NEW", el);

	NESTED_CONDITION = $("#nested_condition", el);
	NESTED_RHS = $("#nested_rhs", el);
	NESTED_LHS = $("#nested_lhs", el);
	
	RHS.chained(condition, function(chained_el, self){
		var selected_field = $(chained_el).find('option:selected');
		var placeholder = $(selected_field).attr("placeholder");
		var is_custom_field = $(selected_field).hasClass("custom_field");
		
		var field_type = $(selected_field).attr("field_type");
		
		// If there are any select fields without option elements they should be removed
		$("select", self).each(function(index, value){
			if($("option", value).length == 0)
				$(this).remove();
		})
		
		
		if(placeholder)
		{
			$("input", self).attr("placeholder", placeholder);
		}
		if(field_type && field_type == 'LIST')
		{
			var field_name = $(selected_field).attr("field_name");
			
			$("input", self).remove();
			$($('select[name="'+field_name+'"]', self)[0]).show();
			$('select:not([name="'+field_name+'"])', self).remove();
		}
		
		
	});
	condition.chained(LHS);
	
	RHS_NEW.chained(condition);
	NESTED_CONDITION.chained(LHS);
	NESTED_LHS.chained(NESTED_CONDITION);
	NESTED_RHS.chained(NESTED_CONDITION);

	if(data && data.rules) {
		deserializeChainedSelect(el, data.rules, el_self);
	} else if(data) {
		deserializeChainedSelect(el, data, el_self);
	}
		
	
	// If LHS selected is tags then typeahead is enabled on rhs field
	if ($(':selected', LHS).val() && ($(':selected', LHS).val()).indexOf('tags') != -1)
	{
		addTagsDefaultTypeahead(RHS)
	}

	// If there is a change in lhs field, and it has tags in it then tags are
	// loaded into its respective RHS block
	$(el).on('change', '.lhs', function(e)
	{
		e.preventDefault();
		var value = $(this).val();

		if (value.indexOf('tags') != -1)
		{
			addTagsDefaultTypeahead($(this).closest('td').siblings('td.rhs-block'));
		}

		if ($(this).find('option:selected').attr("field_type") == "CONTACT")
		{
			var that = this;
			var custom_contact_display = function(data, item)
			{
				setTimeout(function(){
					$('input', $(that).closest('td').siblings('td.rhs-block')).val(item);
					$('input', $(that).closest('td').siblings('td.rhs-block')).attr("data", data);
				},10);
				
			}
			$('input', $(this).closest('td').siblings('td.rhs-block')).attr("id", $(this).find("option:selected").attr("id"));
			$('input', $(this).closest('td').siblings('td.rhs-block')).attr("placeholder", "Contact Name");
			$('input', $(this).closest('td').siblings('td.rhs-block')).addClass("contact_custom_field");
			agile_type_ahead($('input', $(this).closest('td').siblings('td.rhs-block')).attr("id"), $(this).closest('td').siblings('td.rhs-block'), contacts_typeahead, custom_contact_display, 'type=PERSON');
		}

		if ($(this).find('option:selected').attr("field_type") == "COMPANY")
		{
			var that = this;
			var custom_company_display = function(data, item)
			{
				setTimeout(function(){
					$('input', $(that).closest('td').siblings('td.rhs-block')).val(item);
					$('input', $(that).closest('td').siblings('td.rhs-block')).attr("data", data);
				},10);
				
			}
			$('input', $(this).closest('td').siblings('td.rhs-block')).attr("id", $(this).find("option:selected").attr("id"));
			$('input', $(this).closest('td').siblings('td.rhs-block')).attr("placeholder", "Company Name");
			$('input', $(this).closest('td').siblings('td.rhs-block')).addClass("company_custom_field");
			agile_type_ahead($('input', $(this).closest('td').siblings('td.rhs-block')).attr("id"), $(this).closest('td').siblings('td.rhs-block'), contacts_typeahead, custom_company_display, 'type=COMPANY');
		}

	});

	// If LHS selected is contact type custom field then contacts typeahead is enabled on rhs field
	if ($(':selected', LHS).val() && $(':selected', LHS).attr("field_type") == "CONTACT")
	{
		var custom_contact_display = function(data, item)
		{
			setTimeout(function(){
				$('input', RHS).val(item);
				$('input', RHS).attr("data", data);
			},10);
		}
		$('input', RHS).attr("id", LHS.find("option:selected").attr("id"));
		$('input', RHS).attr("placeholder", "Contact Name");
		$('input', RHS).addClass("contact_custom_field");
		agile_type_ahead($('input', RHS).attr("id"), RHS, contacts_typeahead, custom_contact_display, 'type=PERSON');
	}

	if ($(':selected', LHS).val() && $(':selected', LHS).attr("field_type") == "COMPANY")
	{
		var custom_company_display = function(data, item)
		{
			setTimeout(function(){
				$('input', RHS).val(item);
				$('input', RHS).attr("data", data);
			},10);
		}
		$('input', RHS).attr("id", LHS.find("option:selected").attr("id"));
		$('input', RHS).attr("placeholder", "Company Name");
		$('input', RHS).addClass("company_custom_field");
		agile_type_ahead($('input', RHS).attr("id"), RHS, contacts_typeahead, custom_company_display, 'type=COMPANY');
	}
}

/**
 * Added tags typeahead on fields
 * 
 * @param element
 */
function addTagsDefaultTypeahead(element)
{
	var tags_array = [];

	// 'TAGS' are saved in global variable when they are fetched to show stats
	// in contacts page. If it is undefined, tags are fetched from DB an then type ahead is built
	if (!TAGS)
	{
		var TagsCollection = Backbone.Collection.extend({ url : '/core/api/tags', sortKey : 'tag' });

		tagsCollection = new TagsCollection();

		tagsCollection.fetch({ success : function(data)
		{
			TAGS = tagsCollection.models;
			addTagsArrayasTypeaheadSource(tagsCollection.toJSON(), element);

		} });
		return;
	}
	

	// Adds typeahead to given element
	addTagsArrayasTypeaheadSource(tagsCollection.toJSON(), element);
}

// With tags JSON sent type ahead is built on input fields
function addTagsArrayasTypeaheadSource(tagsJSON, element)
{
	var tags_array = [];

	$.each(tagsJSON, function(index, element)
	{
		tags_array.push(element.tag.toString());
	});

	// $("input", element).attr("data-provide","typeahead");
	$("input", element).typeahead({ "source" : tags_array }).attr('placeholder', "Enter Tag").width("92%");
}


function fillContactCustomFieldsInFilters(el, callback, is_webrules)
{

	$.getJSON("core/api/custom-fields/searchable/scope?scope=CONTACT", function(fields){
		console.log(fields);
		SEARCHABLE_CONTACT_CUSTOM_FIELDS = fields;
		fillCustomFields(fields, el, callback, is_webrules)
	})
}

function fillCompanyCustomFieldsInFilters(el, callback)
{
	if(!COMPANY_CUSTOM_FIELDS)
	{
		$.getJSON("core/api/custom-fields/searchable/scope?scope=COMPANY", function(fields){
			console.log(fields);
			COMPANY_CUSTOM_FIELDS = fields;
			fillCustomFields(fields, el, callback, false);
		});
	} else {
		fillCustomFields(COMPANY_CUSTOM_FIELDS, el, callback, false)
	}
}

var _AGILE_CUSTOM_DIVIDER_ = ' _AGILE_CUSTOM_DIVIDER_';
var custom_chained_filter = "custom_chained_class";
function fillCustomFields(fields, el, callback, is_webrules)
{
	var lhs_element = $("#LHS > select > #custom-fields", el);
	var rhs_element = $("#RHS", el);
	var condition = $("#condition > select", el);

	var _AGILE_CUSTOM_DIVIDER_ = ' _AGILE_CUSTOM_DIVIDER_';
	for(var i = 0; i < fields.length ; i++)
	{
		if(i == 0)
			lhs_element.removeClass('hide');
		var field = fields[i];

		condition.append('<option value="EQUALS" custom_chained_class= "'+field.field_label+ " " + _AGILE_CUSTOM_DIVIDER_ +'  custom_field" class="'+field.field_label + _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is</option>');
		condition.append('<option value="NOTEQUALS" custom_chained_class= "'+field.field_label+ " " +_AGILE_CUSTOM_DIVIDER_+'  custom_field" class="'+field.field_label + _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">isn\'t</option>');

		if(field.field_type == "DATE")
		{
			lhs_element.append('<option value="'+field.field_label+'_time" field_type="'+field.field_type+'">'+field.field_label+'</option>');
			//condition.find("option.created_time").addClass(field.field_label+'_time');
			var element = condition.find("option.created_time"); 
			add_custom_class_to_filter_elements(element, field.field_label+'_time');
			$(element).addClass(field.field_label+'_time' + _AGILE_CUSTOM_DIVIDER_);
			if(!is_webrules)
			{
				condition.append('<option value="DEFINED" custom_chained_class= "'+field.field_label+'_time'+ " " + _AGILE_CUSTOM_DIVIDER_ +'  custom_field" class="'+field.field_label +'_time '+ _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is defined</option>');
				condition.append('<option value="NOT_DEFINED" custom_chained_class= "'+field.field_label+'_time'+ " " +_AGILE_CUSTOM_DIVIDER_+'  custom_field" class="'+field.field_label +'_time																																				 '+ _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is not defined</option>');
			}
		} else if(field.field_type == "NUMBER")
		{
			lhs_element.append('<option value="'+field.field_label+'_number" field_type="'+field.field_type+'">'+field.field_label+'</option>');
			// condition.find("option.lead_score").addClass(field.field_label+'_number');
			var element = condition.find("option.lead_score");
			add_custom_class_to_filter_elements(element, field.field_label+'_number');
			$(element).addClass(field.field_label+'_number' + _AGILE_CUSTOM_DIVIDER_);
			if(!is_webrules)
			{
				condition.append('<option value="DEFINED" custom_chained_class= "'+field.field_label+'_number'+ " " + _AGILE_CUSTOM_DIVIDER_ +'  custom_field" class="'+field.field_label +'_number '+ _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is defined</option>');
				condition.append('<option value="NOT_DEFINED" custom_chained_class= "'+field.field_label+'_number'+ " " +_AGILE_CUSTOM_DIVIDER_+'  custom_field" class="'+field.field_label +'_number '+ _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is not defined</option>');
			}
		
		} else if(field.field_type == "CONTACT" || field.field_type == "COMPANY")
		{
			lhs_element.append('<option value="'+field.field_label+'" field_type="'+field.field_type+'" id="'+field.id+'">'+field.field_label+'</option>');
		}
		else
		{
			lhs_element.append('<option value="'+field.field_label+'" field_type="'+field.field_type+'" >'+field.field_label+'</option>');
			if(!is_webrules)
			{
				condition.append('<option value="DEFINED" custom_chained_class= "'+field.field_label+ " " + _AGILE_CUSTOM_DIVIDER_ +'  custom_field" class="'+field.field_label + _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is defined</option>');
				condition.append('<option value="NOT_DEFINED" custom_chained_class= "'+field.field_label+ " " +_AGILE_CUSTOM_DIVIDER_+'  custom_field" class="'+field.field_label + _AGILE_CUSTOM_DIVIDER_ + ' custom_field" field_type="'+field.field_type+'" field_name="'+field.field_label+'">is not defined</option>');
			}
		
		}
		
		// Contacts and not contains should only be in webrules form
		if(is_webrules)
		{
			condition.append('<option value="MATCHES" custom_chained_class= "'+field.field_label+ " " + _AGILE_CUSTOM_DIVIDER_+'  custom_field" class="'+field.field_label +' custom_field" field_name="'+field.field_label+'">contains</option>');
			condition.append('<option value="NOT_CONTAINS"  custom_chained_class= "'+field.field_label+ " " +_AGILE_CUSTOM_DIVIDER_+'  custom_field" class="'+field.field_label+' custom_field" field_name="'+field.field_label+'">doesn\'t contain</option>');
		}
		
		if(field.field_type == "LIST")
		{
			var custom_list_values = field.field_data.split(";");
			el = "<select class='form-control' style='display:none' name='"+field.field_label+"'>"
			for(var j = 0; j < custom_list_values.length; j++)
			{
				
				el = el + '<option value="'+custom_list_values[j]+'" class="EQUALS NOTEQUALS MATCHES NOT_CONTAINS" field_type="'+field.field_type+'">'+custom_list_values[j]+'</option>';
			}
			el = el +"</select>";
			rhs_element.append(el);
		}
		console.log(rhs_element[0]);
	}
	
	if (callback && typeof (callback) === "function")
	{
		// execute the callback, passing parameters as necessary
		callback();
	}
}

function add_custom_class_to_filter_elements(element, className)
{
	var custom_class = $(element).attr(custom_chained_filter);
	 var attrClass = $(element).attr('class');
	if(!custom_class)
		custom_class = "";
	else
		{
		 var classArray = attrClass.split(" ");
	     if(classArray && classArray.length > 0)
	      {
	       for(var i = 0 ; i < classArray.length ; i++)
	        {
	         custom_class += (_AGILE_CUSTOM_DIVIDER_ + " " +classArray[i]); 
	        }
	      }
		}
	
	custom_class += (_AGILE_CUSTOM_DIVIDER_ + " " +className);
	console.log(custom_class)
	
	$(element).attr('custom_chained_class', custom_class);
}

function showDynamicFilters(el){
	if(_agile_get_prefs(CONTACTS_DYNAMIC_FILTER_COOKIE_STATUS)=="hide"){
		$('#contacts-lhs-filters-toggle').hide();
	}
	else{
		$('#contacts-lhs-filters-toggle').show();
	}
}


function setUpContactView(cel,tagExists){

	
	if (_agile_get_prefs("agile_contact_view"))
	{
		$('#contacts-view-options', cel).html("<a data-toggle='tooltip' data-placement='bottom' data-original-title='List View' class='btn btn-default btn-sm contacts-view' data='list'><i class='fa fa-list'  style='margin-right:3px'></i></a>");
	}
	else{
		$('#contacts-view-options', cel).html("<a data-toggle='tooltip' data-placement='bottom' data-original-title='Grid View' class='btn btn-default btn-sm contacts-view' data='grid'><i class='fa fa-th-large' style='margin-right:3px'></i></a>");
	}
	
}


var contact_filters_util = {

	// Fetch filter result without changing route on click
	filterResults:  function(e)
	{

		e.preventDefault();
		var targetEl = $(e.currentTarget);

		_agile_delete_prefs('dynamic_contact_filter');

		var filter_id = $(targetEl).attr('id');
		var filter_type = $(targetEl).attr('filter_type');

		// Saves Filter in cookie
		_agile_set_prefs('contact_filter', filter_id)
		_agile_set_prefs('contact_filter_type', filter_type)

		// Gets name of the filter, which is set as data
		// attribute in filter
		filter_name = $(targetEl).attr('data');

		CONTACTS_HARD_RELOAD=true;
		App_Contacts.contacts();
		return;
		// /removed old code from below,
		// now filters will work only on contact, not company
	},

	companyFilterResults: function(e)
	{

		e.preventDefault();
		_agile_delete_prefs('contact_filter');
		_agile_delete_prefs('contact_filter_type');

		_agile_set_prefs('company_filter', "Companies");
		CONTACTS_HARD_RELOAD = true;
		App_Contacts.contacts(); // /Show Companies list, explicitly hard
		// reload
		return;
		
	},

};

function setupContactFields(el){
		// Update el with default dropdown
		$('#contact-static-fields-group', el).html(getTemplate("contact-custom-fields"));

		get_custom_fields(function(data){
		
 		for(i=0; i<data.length; i++){
		getTemplate("contact-custom-fields-append", data[i], undefined, function(template_ui){
     				if(!template_ui)
    					  return;
    		$("#custom-fields-group",el).append(template_ui);
 		});
	}

			$.ajax({
					url : 'core/api/contact-view-prefs',
					type : 'GET',
					dataType : 'json',
					
					success : function(data)
						{
							console.log("")
						var customfields = $("#contact-static-fields");
						deserializecontactsForm(data.fields_set, customfields);
						console.log(data);
					}
				});
			
		
		});


}



	/**
 * Search.js is a used to show typeahead results in different page and also
 * initialized typeahead on search field in navbar client side.
 * 
 * @module Search author: Yaswanth
 */

/**
 * showSearchResults method is used to show the simple search/ typeahead results
 * in a separate page
 * 
 * @method showSearchResults
 */
function showSearchResults()
{
	/*
	 * Reads query keyword from input field to send a query request and show in
	 * separate page.
	 */
	var query_text = $("#searchText").val();

	// If keyword/input field is empty returns with out querying
	if (query_text == "")
		return;

	/*
	 * If App_Contacts route is not initialized, initializes it because
	 * typeahead can be accessed without entering in to contacts list view
	 */
	if (!App_Contacts)
		App_Contacts = new ContactsRouter();

	// Initialize contacts search results view
	App_Contact_Search.navigate("contacts/search/" + query_text, { trigger : true });
}

function navigateToDetailsPage(data, name)
{
	var model;
	for ( var i = 0; i < QUERY_RESULTS.length; i++)
	{
		if (QUERY_RESULTS[i].id != data)
			continue;

		model = QUERY_RESULTS[i];
		break;
	}
	console.log(model);
	if (model.entity_type == "contact_entity" || model.entity_type == "company_entity")
	{
		if(model.type == "COMPANY")
			App_Companies.navigate("company/" + data, { trigger : true });
		else
			App_Contacts.navigate("contact/" + data, { trigger : true });
		return;
	}
	if(model.entity_type == "deal")
	{
		if(!tight_acl.checkPermission('DEALS')){
			var obj = {};
			obj.entity = 'Deals';
			getTemplate('no-permission',obj, undefined, function(template_ui){
				if(!template_ui)
					  return;

				$(template_ui).modal('show');
			}, null);
			return;
		}
		// updateDeal(new BaseModel(model));
		console.log(model);
		var currentdeal=model;
		Backbone.history.navigate("deal/"+currentdeal.id , {
            trigger: true
        });
		return;
	}
	if(model.entity_type == "document")
	{
		if(!tight_acl.checkPermission('DOCUMENT')){
			var obj = {};
			obj.entity = 'Documents';

			getTemplate('no-permission',obj, undefined, function(template_ui){
				if(!template_ui)
					  return;

				$(template_ui).modal('show');
			}, null);

			return;
		}

		console.log(model);
		updateDocument(new BaseModel(model));
		return;
	}

	if(model.entity_type == "tickets")
	{
		/*if(!tight_acl.checkPermission('DOCUMENT')){
			var obj = {};
			obj.entity = 'Documents';

			getTemplate('no-permission',obj, undefined, function(template_ui){
				if(!template_ui)
					  return;

				$(template_ui).modal('show');
			}, null);

			return;
		}*/

		var url = '#ticket/' +  model.id;

		Backbone.history.navigate(url, {trigger : true});

		return;
	}
		
	if(!tight_acl.checkPermission('CASES')){
		var obj = {};
		obj.entity = 'Cases';
		getTemplate('no-permission',obj, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$(template_ui).modal('show');
		}, null);

		return;
	}
	updatecases(new BaseModel(model));
}

/**
 * Initializes typeahead functionality on search field in top navbar, and
 * defines event action on the filed
 */
$(function()
{

	/*
	 * Enables typeahead in search field in top nav-bar, custom callback to
	 * redefine events on dropdown, which takes to contact details page
	 */
	agile_type_ahead("searchText", undefined, contacts_typeahead, navigateToDetailsPage, undefined, undefined, 'core/api/search/all/keyword', undefined, undefined, undefined, 5);

	/*
	 * Click on search icon in search field top nav-bar, shows simple search
	 * results in separate page
	 */
	$('body').on('click', '#search-results', function(e)
	{
		e.preventDefault();
		showSearchResults();
	});
});
function initWebstatsDateRange() {
    $('#activities_date_range')
        .daterangepicker({
                ranges: {
                    'Today': ['today', 'today'],
                    'Yesterday': ['yesterday', 'yesterday'],
                    'Last 7 Days': [Date.today().add({
                        days: -6
                    }), 'today'],
                    'Last 30 Days': [Date.today().add({
                        days: -29
                    }), 'today'],
                    'This Month': [
                        Date.today().moveToFirstDayOfMonth(),
                        Date.today().moveToLastDayOfMonth()
                    ],
                    'Last Month': [
                        Date.today().moveToFirstDayOfMonth().add({
                            months: -1
                        }),
                        Date.today().moveToFirstDayOfMonth().add({
                            days: -1
                        })
                    ]               
                    
                    
                },
                locale: {
                    applyLabel: 'Apply',
                    cancelLabel: 'Cancel',
                    fromLabel: 'From',
                    toLabel: 'To',
                    customRangeLabel: 'Custom',
                    daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr',
                        'Sa'
                    ],
                    monthNames: ['January', 'February', 'March',
                        'April', 'May', 'June', 'July', 'August',
                        'September', 'October', 'November',
                        'December'
                    ],
                    firstDay: parseInt(CALENDAR_WEEK_START_DAY)
                }
            },
            function(start, end) {
                if (start && end) {
                    $('#activities_date_range #range').html(
                        start.toString('MMMM d, yyyy') + ' - ' + end.toString('MMMM d, yyyy'));
                    VISITORS_HARD_RELOAD = true;
                    App_VisitorsSegmentation.visitorssegmentation(
                        getTimeWebstats(), true);
                } else {
                    var from_date = Date.parse('today');
                    var to_date = Date.today().add({
                        days: parseInt(-6)
                    });
                    $('#activities_date_range #range').html(
                        to_date.toString('MMMM d, yyyy') + " - " + from_date
                        .toString('MMMM d, yyyy'));
                    VISITORS_HARD_RELOAD = true;
                    App_VisitorsSegmentation.visitorssegmentation(
                        getTimeWebstats(), true);

                    $('.daterangepicker > .ranges > ul > li.active')
                        .removeClass("active");
                }
            });
    $('.daterangepicker > .ranges > ul').on("click", "li", function(e) {
        $('.daterangepicker > .ranges > ul > li').each(function() {
            $(this).removeClass("active");
        });
        $(this).addClass("active");
    });
}

function getTimeWebstats() {

    var time_range = new Array();

    var range = $('#range').html().split("-");
    var start_time = new Date(range[0]).getTime();
    var end_value = $.trim(range[1]);
    end_value = end_value + " 23:59:59";
    var end_time = new Date(end_value).getTime();

    time_range[0] = start_time;
    time_range[1] = end_time;

    if (_agile_get_prefs('duration') != null)
        _agile_delete_prefs('duration');

    _agile_set_prefs('duration', 'start_time :' + start_time + ',end_time :' + end_time);

    return time_range;

}

function getFirstTimeWebstats() {

    var time_range = new Array();

    lastday=Date.today();
    lastday.setDate(new Date().getDate()-6);
    var start_time = lastday.getTime();
    var end_value =new Date();
    var end_time = end_value.getTime();

    time_range[0] = start_time;
    time_range[1] = end_time;

    return time_range;
}

function deserializeRhsFilters(data) {

    var range = data.split(",");

    var start = new Date(Number(range[0].substr(range[0].indexOf(":") + 1)));
    var end = new Date(Number(range[1].substr(range[1].indexOf(":") + 1)));

    $('#activities_date_range #range').html(
        start.toString('MMMM d, yyyy') + " - " + end.toString('MMMM d, yyyy'));
    
}
function  addModalEvent(modal,collection){

    $('#'+ modal).off("click", ".new-segment");
    $('#'+ modal).on('click', '.new-segment',{ filter_list : collection }, function(e)
        {
            e.preventDefault();
            if($('#save-new-type').prop('checked')==true)
                return;
            $("div.update-segment-name").toggle();
            $("div.choose-segment-filter").toggle();
            $('#save-new-type').prop('checked', true);
             var filter_list=e.data.filter_list;
             var current_filter=$('.update-segment-name input').val();
             if(!current_filter || current_filter) 
             $.each(filter_list, function( key) {
                if(filter_list[key].name==current_filter){
                    $('#segmentsModal #duplicate-name').removeClass('hide');
                    $('#segmentsModal .save').addClass('disabled');
                    return;
                }
            });
    }); 
    $('#'+ modal).off("click", ".replace-segment");
    $('#'+ modal).on('click', '.replace-segment', function(e)
        {   
            e.preventDefault();
            if(($('#save-replace-type').prop('checked') || $(".choose-segment-filter").prop("disabled"))==true)
                return;
            if(!$('#segmentsModal #duplicate-name').hasClass("hide")){
                $('#segmentsModal #duplicate-name').addClass('hide');
                $('#segmentsModal .save').removeClass('disabled');
            }
            $("div.update-segment-name").toggle();
            $("div.choose-segment-filter").toggle();
            $('#save-replace-type').prop('checked', true);

        }); 
    $('#'+ modal).on('click', '.save', function(e)
        {   
           e.preventDefault();
           disable_save_button($('#segmentsModal .save'));

        }); 

    $('#'+ modal).on('change', '#saveSegmentFilterForm .choose-segment-filter select', function(e)
    {
        e.preventDefault();
        var selectedFilterName = $('[name="filter-collection"] option:selected').text()

        $('input[name="name"]', $('form#saveSegmentFilterForm')).val(selectedFilterName);
    }); 
   
    $('#'+ modal).on('blur', '.update-segment-name input' ,{ filter_list : collection }, function(e)
    {
         e.preventDefault();
         var filter_list=e.data.filter_list;
         var current_filter=$(this).val();
         $.each(filter_list, function( key) {
            //console.log( key + ": " + filter_list[key].name );
            if(filter_list[key].name==current_filter){
                $('#segmentsModal #duplicate-name').removeClass('hide');
                $('#segmentsModal .save').addClass('disabled');
                return;
            }
        });
       
    }); 

    $('#'+ modal).on('keyup', '.update-segment-name input' , function(e)
    {
         e.preventDefault();
                   
        if(!$('#segmentsModal #duplicate-name').hasClass("hide")){
            $('#segmentsModal #duplicate-name').addClass('hide');
            $('#segmentsModal .save').removeClass('disabled');
        }
        
        return;          
       
    });  
   
}
function  addEventFilter(filter_id){
    
    $('#' + filter_id).on('click', '.segment-lilist' ,function(e)
    {
       
        if(e.target.nodeName=="BUTTON"){
            setupSegmentFilterList("");
            return;
        }
        e.preventDefault();
        var targetEl = $(e.currentTarget);

        _agile_delete_prefs('dynamic_visitors_filter');
        _agile_delete_prefs("visitor_repeat_filter");

        var filter_id = $(targetEl).attr('id');
        
        // Saves Filter in cookie
        _agile_set_prefs('visitor_filter', filter_id);

        VISITORS_HARD_RELOAD=true;
        App_VisitorsSegmentation.visitorssegmentation();
        return;
       
    });      

    $('#' + filter_id).on('mouseenter','li', function(e){
        $(this).find('#remove-segment-filter').removeClass('hide')
    });

    $('#' + filter_id).on('mouseleave','li', function(e){
        $(this).find('#remove-segment-filter').addClass('hide');
    });
    $('#' + filter_id).on('click', '#remove-segment-filter' ,function(e)
    {   

        e.preventDefault();
        var remove_id=$(this).attr('data');
        var remove_filter_name=$(this).attr("data-name");
        _agile_delete_prefs('dynamic_visitors_filter');
        $.ajax({
            url: '/core/api/web-stats/filters?Id='+remove_id,
            type: 'DELETE',
            contentType : "application/json"
            
        });
        if($('#filters-tour-step i span').text()==remove_filter_name){
            setupAnalyticsLhsFilters('');
            _agile_delete_prefs('visitor_filter');
        }
        return;
               
    });  
 
}

var segmentFilterList
function setupSegmentFilterList(cel,id)
{
    var filter_name;
        segmentFilterList = new Base_Collection_View(
            {
                url : '/core/api/web-stats/filters',
                sort_collection : false,
                restKey : "SegmentFilter",
                templateKey : "segment-filter-list",
                individual_tag_name : 'li',
                postRenderCallback : function(el, collection)
                {   
                    if(collection.length==0)
                        $('#filters-tour-step >button').addClass("disabled");

                    else
                        $('#filters-tour-step >button').removeClass("disabled");
                    addEventFilter("segment-filter-list-model-list"); 
                    if(id){
                        var filter_name=collection.get(id).attributes.name;

                        if(_agile_get_prefs('visitor_filter') && filter_name!= $('#filters-tour-step button i span').text()){                        
                            if(!_agile_get_prefs("visitor_repeat_filter"))
                               deserializeLhsFilters($('#lhs-contact-filter-form'), collection.get(id).attributes.segmentConditions);      
                            else
                                _agile_set_prefs('visitor_filter',id);
                        }else{
                         _agile_delete_prefs('dynamic_visitors_filter');
                         _agile_set_prefs('visitor_filter',id);
                        } 

                        if(filter_name!= $('#filters-tour-step button i span').text()){
                            var addFilterName='<span class="segment-filter-name" style= "padding-left:3px;">'+filter_name +'</span>';
                            $('#filters-tour-step').find('#segment-filter').append(addFilterName);
                        }
                    } 
                    else
                       $('#filters-tour-step').find('#segment-filter').find('.segment-filter-name').remove();
                } });

            // Fetchs filters
            segmentFilterList.collection.fetch();
        
            // Shows in contacts list
            $('#filter-list', cel).html(segmentFilterList.render().el);

}                
   function load_imap_folders(el, model) {
	var id = model.id;
	var optionsTemplate = "<option {{selected}}>{{name}}</option>";
	fillSelect('imap-folders-multi-select', '/core/api/imap/' + id
			+ '/imap-folders', 'folders', function fillNew() {
		$("#imap-folders-multi-select .default-select", el).remove();

	}, optionsTemplate, false, el);
	var el2 = $(".imap-folders-settings-click", el).closest("div");
	$(".imap-folders-settings-click", el).css("display", "none");
	el2.find(".imap-folders-settings-txt").css("display", "none");
	el2.find(".imap-folders-select").css("display", "inline");
}

function load_gmail_widgets(limit) {
	// Gets Social Prefs (Same as Linkedin/Twitter) for Gmail
	gmailListView1 = new Settings_Collection_Events({
		url : 'core/api/social-prefs/GMAIL/list',
		templateKey : "settings-social-prefs",
		individual_tag_name : 'div',
		postRenderCallback : function(el) {
			var gmail_count = gmailListView1.collection.length;
			if ((gmail_count < limit && !HAS_EMAIL_ACCOUNT_LIMIT_REACHED)
					|| gmail_count === 0) {
				var data1 = {
					"service" : "Gmail",
					"return_url" : encodeURIComponent(window.location.href)
				};

				getTemplate("settings-social-prefs-model", data1, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#prefs-tabs-content').find("#social-prefs").append($(template_ui));
				}, null);
			}
			updateTimeOut();
		}
	});
	gmailListView1.collection.fetch();
	App_Settings.gmailListView = gmailListView1;
	$('#prefs-tabs-content').find("#social-prefs").html(App_Settings.gmailListView.el);
			
}
function load_imap_widgets(limit) {
	// Gets imap prefs
	imapListView1 = new Settings_Collection_Events({
		url : 'core/api/imap/',
		templateKey : "settings-imap-access",
		individual_tag_name : 'div',
		postRenderCallback : function(el) {
			var imap_count = imapListView1.collection.length;
			if ((imap_count < limit && !HAS_EMAIL_ACCOUNT_LIMIT_REACHED)
					|| imap_count === 0) {
				var data1 = {};

				getTemplate("settings-imap-access-model", data1, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#prefs-tabs-content').find("#imap-prefs").append($(template_ui));
				}, null);
			}
			updateTimeOut();
		}
	});
	imapListView1.collection.fetch();
	App_Settings.imapListView = imapListView1;
	$('#prefs-tabs-content').find("#imap-prefs").html(App_Settings.imapListView.el);
}

function load_office365_widgets(limit) {
	// Gets office prefs list
	officeListView1 = new Settings_Collection_Events({
		url : 'core/api/office/',
		templateKey : "settings-office-access",
		individual_tag_name : 'div',
		postRenderCallback : function(el) {
			var office_count = officeListView1.collection.length;
			if ((office_count < limit && !HAS_EMAIL_ACCOUNT_LIMIT_REACHED)
					|| office_count === 0) {
				var data1 = {};

				getTemplate("settings-office-access-model", data1, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#prefs-tabs-content').find("#office-prefs").append($(template_ui));
				}, null);
			}
			updateTimeOut();
		}
	});
	officeListView1.collection.fetch();
	App_Settings.officeListView = officeListView1;
	$('#prefs-tabs-content').find("#office-prefs").html(App_Settings.officeListView.el);
}

function updateTimeOut(widget_height) {
	setTimeout(function() {
		$('#all-email-settings-prefs .col-md-4 .panel').each(function() {	
			if($(this).height() > EMAIL_PREFS_WIDGET_SIZE)
				EMAIL_PREFS_WIDGET_SIZE = $(this).height();
		});
		$('#all-email-settings-prefs .col-md-4 .panel').each(function() {
			$(this).height(EMAIL_PREFS_WIDGET_SIZE);
		});
	},1000);
}

function load_imap_properties(model, el) {
	var id = model.id;
	var optionsTemplate1 = "<option value='{{id}}' {{selected}}>{{name}}</option>";
	var el1 = $('.imap-share-settings-select', el).closest("div");
	fillSelect('imap-share-user-select', 'core/api/imap/shared-to-users?id='
			+ id, 'users', function fillNew() {
		$("#imap-share-user-select .default-select", el).remove();
		$(".imap-share-select .loading", el).hide();
	}, optionsTemplate1, false, el1);

	var el2 = $('.imap-folders-settings-click', el).closest("div");
	var optionsTemplate2 = "<option {{selected}}>{{name}}</option>";
	fillSelect('imap-folders-multi-select', 'core/api/imap/' + id
			+ '/imap-folders', 'folders', function fillNew() {
		$("#imap-folders-multi-select .default-select", el).remove();

	}, optionsTemplate2, false, el2);
}


/**
*  Settings modal event listeners
*/
var Settings_Modal_Events = Base_Model_View.extend({

	/**
	 * For adding new document
	 */
	onGmailShareOptionsSelect: function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var id = $(target_el).attr("oid");
		var el = $(target_el).closest("div");

		$(target_el).css("display", "none");
		el.find(".gmail-share-select").css("display", "inline");
		el.find(".gmail-share-settings-txt").css("display",
				"none");
		var optionsTemplate = "<option value='{{id}}' {{selected}}>{{name}}</option>";
		fillSelect(
				'gmail-share-user-select',
				'core/api/social-prefs/shared-to-users?id='
						+ id,
				'users',
				function fillNew() {
					$(
							"#gmail-share-user-select .default-select",
							el).remove();
				}, optionsTemplate, false, el);
	},

	 /**
	 * To cancel the imap share settings event
	 */
	onGmailShareOptionsCancel : function(e){

		if(e.target.parentElement.attributes[0].name!="href" && e.target.parentElement.attributes[1].name!="href"){
     		e.preventDefault();
     		var target_el = $(e.currentTarget);

     	 	var el = $(target_el).closest("div");
			var name = $(target_el).attr('name');
			el.find(".gmail-share-select").css("display", "none");
			el.find(".gmail-share-settings-select").css("display", "inline");
			el.find(".gmail-share-settings-txt").css("display", "inline");
	     }
	},

	/**
	 * Share imap settings with othe users
	 */
	onImapShareOptionsSelect : function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var id = $(target_el).attr("oid");
		var el = $(target_el).closest("div");
		$(target_el).css("display", "none");
		el.find(".imap-share-settings-txt").css("display",
				"none");
		el.find(".imap-share-select").css("display", "inline");
		var optionsTemplate = "<option value='{{id}}' {{selected}}>{{name}}</option>";
		fillSelect(
				'imap-share-user-select',
				'core/api/imap/shared-to-users?id=' + id,
				'users',
				function fillNew() {
					$(
							"#imap-share-user-select .default-select",
							el).remove();
				}, optionsTemplate, false, el);
	},

	/**
	 * To cancel the imap share settings event
	 */
	onImapShareOptionsCancel : function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var el = $(target_el).closest("div");
		var name = $(target_el).attr('name');
		el.find("#imap-share-user-select").empty();
		el.find(".imap-share-select").css("display", "none");
		el.find(".imap-share-settings-select").css("display", "inline");
		el.find(".imap-share-settings-txt").css("display", "inline");
	},

	/**
	 * Select imap server folder, will fetch mails from these folders
	 */
	onImapFoldersOptionsSelect :  function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var el = $(target_el).closest("div");
		var id = $(target_el).attr("oid");
		$(target_el).css("display", "none");
		el.find(".imap-folders-select").css("display", "inline");
		var optionsTemplate = "<option {{selected}}>{{name}}</option>";
		fillSelect('imap-folders-multi-select', 'core/api/imap/' + id
				+ '/imap-folders', 'folders', function fillNew() {
			$("#imap-folders-multi-select .default-select", el)
					.remove();
		}, optionsTemplate, false, el);
	},

	/**
	 * To cancel the imap folder settings
	 */
	onImapFoldersOptionsCancel :  function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var el = $(target_el).closest("div");
		el.find('#imap-folders-multi-select').empty();
		el.find(".imap-folders-select").css("display", "none");
		el.find(".imap-folders-settings-click").css("display", "inline");
	},


	/**
	 * Share office settings with other users
	 */
	onOfficeShareOptionsSelect : function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var el = $(target_el).closest("div");
		$(target_el).css("display", "none");
		var id = $(target_el).attr("oid");
		el.find(".office-share-settings-txt").css("display",
				"none");
		el.find(".office-share-select")
				.css("display", "inline");
		var optionsTemplate = "<option value='{{id}}' {{selected}}>{{name}}</option>";
		fillSelect(
				'office-share-user-select',
				'core/api/office/shared-to-users?id=' + id,
				'users',
				function fillNew() {
					$(
							"#office-share-user-select .default-select",
							el).remove();
				}, optionsTemplate, false, el);
	},

	/**
	 * To cancel the imap share settings event
	 */
	onOfficeShareOptionsCancel : function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var el = $(target_el).closest("div");
		var name = $(target_el).attr('name');
		el.find(".office-share-select").css("display", "none");
		el.find(".office-share-settings-select").css("display", "inline");
		el.find(".office-share-settings-txt").css("display", "inline");
	},


	events: {
		'click .gmail-share-settings-select': 'onGmailShareOptionsSelect',
		'click .gmail-share-settings-cancel': 'onGmailShareOptionsCancel',		
		'click .imap-share-settings-select': 'onImapShareOptionsSelect',		
		'click .imap-share-settings-cancel': 'onImapShareOptionsCancel',	
		'click .imap-folders-settings-click': 'onImapFoldersOptionsSelect',	
		'click .imap-folders-settings-cancel': 'onImapFoldersOptionsCancel',	
		'click .office-share-settings-select': 'onOfficeShareOptionsSelect',	
		'click .office-share-settings-cancel': 'onOfficeShareOptionsCancel',	
	},

});

/**
*  Settings modal event listeners
*/
var Settings_Collection_Events = Base_Collection_View.extend({
	events: {
		'click #gmail-prefs-delete': 'onGmailPrefsDelete',	
		'click #office-prefs-delete,#imap-prefs-delete': 'onImapOfficePrefsDelete',	
	},

	
	onGmailPrefsDelete : function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var saveBtn = $(target_el);
		var id = $(saveBtn).attr("oid");

		// Returns, if the save button has disabled attribute
		if ($(saveBtn).attr('disabled'))
			return;

		showAlertModal("delete", "confirm", function(){
			// Disables save button to prevent multiple click event issues
			disable_save_button($(saveBtn));

			$.ajax({
				url : '/core/api/social-prefs/delete' + "/" + id,
				type : 'DELETE',
				success : function() {
					enable_save_button($(saveBtn));
					App_Settings.email();
					return;
				}
			});
		});
	},

	onImapOfficePrefsDelete : function(e){
		e.preventDefault();
		var target_el = $(e.currentTarget);

		var saveBtn = $(target_el);		
		var id = $(saveBtn).attr("oid");

		// Returns, if the save button has disabled attribute
		if ($(saveBtn).attr('disabled'))
			return;
		
		showAlertModal("delete", "confirm", function(){
			// Disables save button to prevent multiple click event issues
			disable_save_button($(saveBtn));

			var button_id = $(saveBtn).attr("name");

			$.ajax({
				url : '/core/api/' + button_id + "/delete/" + id,
				type : 'DELETE',
				success : function()
				{
					enable_save_button($(saveBtn));
					App_Settings.email();
					return;
				}
			});
		});		

	},
});


$(function(){
	
	$("#content").on("click", '#email-gateway-delete', function(e) {
		e.preventDefault();
		
    	showAlertModal("delete", "confirm", function(){
    		$.ajax({
				url: 'core/api/email-gateway',
				type: 'DELETE',
				success: function(){
					
					if(App_Admin_Settings.email_gateway && App_Admin_Settings.email_gateway.model)
				     {
				    	 var data = App_Admin_Settings.email_gateway.model.toJSON();
				    	 
				    	 if(data.email_api == "MANDRILL")
				    	 {
				    		 	// Delete mandrill webhook
								$.getJSON("core/api/email-gateway/delete-webhook?api_key="+ data.api_key+"&type="+data.email_api, function(data){
									
									console.log(data);
									
								});
				    	 }
				     }	
					
					location.reload(true);
				}
			});
		});
		
		
	});

	$("#content").on('click', '#sms-gateway-delete', function(e){ 
		e.preventDefault();
		var id=$(this).attr('data');
    	showAlertModal("delete", "confirm", function(){
    		$.ajax({
				url: 'core/api/widgets/integrations/'+id,
				type: 'DELETE',
				success: function(){
					location.reload(true);
				}
			});
		});
	});

	$("#prefs-tabs-content .widgets_inner ul li").off("click");
	$("#prefs-tabs-content").on("click",".widgets_inner ul li",function(){
		var temp = $(this).find("a").attr("href").split("#");
		_agile_set_prefs('widget_tab', temp[1]);
		Backbone.history.navigate('add-widget', { trigger : true });
	});
	
});


function loadip_access_events()
{
	$(".blocked-panel-ip-delete").on('click', function(e) {
         e.preventDefault();
         var formId = $(this).closest('form');
 
         var ip = $(this).closest("tr").find('input').val();
         var id = $(this).closest("form").find('input[name="id"]').val();
         var $that = $(this);
		showAlertModal("delete", "confirm", function(){
			$.ajax({ url : 'core/api/allowedips/delete_ip?id='+id+'&ip='+ip,
		 			type : 'DELETE',
			 		success : function()
			 		{
			 			$that.closest("tr").remove(); 
			 
			 		},error : function(response)
		 			{
		 
		 				console.log(response);
		 			}
			 
	 		});
		});
          
     });

	//To add new ip to allow access
    $(".upsert-ip").on('click',function(e){
    	var obj = {};
    	if(element_has_attr($(this), "data-position")){
    		obj.position = $(this).attr("data-position");
    		obj.ip = $(this).closest("tr").find("input").val();
    	}

		$("#ipaccess-modal").html(getTemplate('add-new-ip', obj)).modal('show');
		$("#ip-add").on('click',function(e){
			
			var form = $(this).closest("form");
			if (!isValidForm(form)) {
				return;
			}
            
            // Get ip new value
            var userEnteredIp = $("#iplist").val();

            // Set add/edit field value
            if(element_has_attr($(this), "data-position")){
				 var trIndex = $(this).attr("data-position");
				 $(".iptable tbody tr").eq(trIndex).find("input").val(userEnteredIp);
			}else {
				$(".newip").val(userEnteredIp);	
			}            

			form.trigger("reset");
			$('.newip').closest('form').find('.save').trigger("click");
			$("#ipaccess-modal").html(getTemplate('add-new-ip', {})).modal('hide');
		});
	});


}

function element_has_attr(ele, attr_name){
	var attr = $(ele).attr(attr_name);

	// For some browsers, `attr` is undefined; for others,
	// `attr` is false.  Check for both.
	return (typeof attr !== typeof undefined && attr !== false);
}

	
var Calendar_Sync_Settings_View = Base_Model_View.extend({
	events : {
		'click .save' : "save_calendar_prefs",
		'click .delete' : "delete_calendar_prefs",
	},
	options :{
		errorCallback : function(data){							
			$('.tab-content').removeClass('c-progress');		
			showNotyPopUp("error", "Invalid Details", "bottomRight", 1000);
		}
	},
	save_calendar_prefs : function (e, data)
	{
		e.preventDefault();
		$('.tab-content').addClass('c-progress');
		this.options.prePersist = this.prePersist;
		this.options.saveCallback = this.saveCallback;
		this.save(e);
	},
	saveCallback : function(data)
	{		
		App_Datasync.dataSync();
		Backbone.history.navigate('sync');
		$('.tab-content').removeClass('c-progress');
	},
	delete_calendar_prefs : function(e, data)
	{
		e.preventDefault();
		var _that = this;
		showAlertModal("delete_calendar_prefs", "confirm", function(){
			if(_that.model.get("calendar_type") == "OFFICE365"){
				var eventFilters = JSON.parse(_agile_get_prefs('event-lhs-filters'));
				var userBasedFilter = eventFilters[CURRENT_AGILE_USER.id];

				if(userBasedFilter){
					eventFilters = userBasedFilter;
				}

				var filtterList = eventFilters.cal_type;
				var indexOf = filtterList.indexOf("office");
				
				if( indexOf >= 0){
					var calendarItem = "office" ;
			        var removeItem = "light";
			        eventFilters.cal_type = $.grep(filtterList, function(value){
			         return value != calendarItem;
			       });

			        var eventData = JSON.parse(_agile_get_prefs('event-lhs-filters'));	
					eventData[CURRENT_AGILE_USER.id] = eventFilters;

					/*
					 * if (event_list_type) json_obj.event_type = event_list_type;
					 */
					_agile_set_prefs('event-lhs-filters', JSON.stringify(eventData));		        
				}
			}

			_that.model.destroy({success: function(){			
				_that.model.clear();
				//_that.render(true);				
			}});
		});
		
	},
	prePersist : function(data)
	{
		if(!data || !data.get("prefs"))
			return;

		data.set("prefs", JSON.stringify(data.get("prefs")), {silent: true});
		console.log(data);
	},
	show_loading : function(el)
	{
		this.model.destroy();
	}	


});/**
 * Calls from onload of Profile image on add contact form to fill account
 * holder's name in Form.
 */
function onloadProfileImg()
{
	// Save button for twitter on addStreamModal is shown.
	$('#add_twitter_stream').show();

	getTemplate('twitter-stream-type', {}, undefined, function(template_ui){
		if(!template_ui)
			  return;

		// Add twitter stream types template.
		$("#streamDetails").html($(template_ui));

		// Add profile image to account description.
		$('#twitter_profile_img').attr("src", document.getElementById("twitter_profile_img_url").src);

		// Add screen name to label.
		document.getElementById('account_description_label').innerHTML = '<b>' + $('#twitter_account').val() + '</b>';

	}, "#streamDetails");
	
}

// Add website and select network on continue form in add contact form flow for update page.
function socialsuite_add_website()
{
	if (Tweet_Owner_For_Add_Contact != null)
	{
		// Add values in continue form after add contact form.
		// Add website / handle of twitter of tweet owner.
		$("#website", $('#continueform')).attr("value", Tweet_Owner_For_Add_Contact);

		// Select network type.
		$("div.website select").val("TWITTER");

		Tweet_Owner_For_Add_Contact = null;
	}
}

/*
 * Change property of website and select network in add contact form. When email
 * id is entered, pic is related to that. When email id is not there so twitter
 * profile image is selected. There is some error already, so to adjust size of
 * image and twitter handle text size as per that.
 */
function changeProperty()
{
	
	try{
		var display = $('#network_handle', $('#personModal')).css("display");
		var picDisplay = $("#pic", $('#personModal')).css("display");
		var picValue = $("#pic", $('#personModal')).html();

		var $networkEle = $("#network_handle");
		var $handle = $("#handle");;

		if ((picDisplay == 'inline' || picDisplay == 'block') && picValue != '')
		{
			if (display == 'none')
				$networkEle.removeAttr('class').addClass('after-img-load-hide');
			else if (display == 'block')
				$networkEle.removeAttr('class').addClass('after-img-load-show');

			$handle.removeAttr('class').addClass('add-form-input');
		}
		else if ((picDisplay == 'none' || picDisplay == null || picDisplay == '') || (picValue == null || picValue == ''))
		{
			if (display == 'none')
				$networkEle.removeAttr('class').addClass('network-handle');
			else if (display == 'block')
				$networkEle.removeAttr('class').addClass('socialsuite-network-handle');

			$handle.removeAttr('class');
		}

	}catch(e){}
}SOCIAL_SUITE_CONTACT = {};
$(function()
{
	/**
	 * After display of add contact form, Fills name with tweet owner's name in
	 * add-contact popup form.
	 */
	 
	$('body').on('click', '.add-twitter-contact', function(e)
	{
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		SOCIAL_SUITE_CONTACT["streamId"] = streamId;
		SOCIAL_SUITE_CONTACT["tweetId"] = tweetId;

		// Get stream from collection.
		var modelStream = Streams_List_View.collection.get(streamId);

		// Get tweet from stream.
		var tweet = modelStream.get('tweetListView').get(tweetId).toJSON();

		// Tweet owner's full name.
		var fullName = tweet.user.name;

		// Tweet owner's description.
		var description = tweet.user.description;

		// Tweet owner's handle/Screen name.
		Tweet_Owner_For_Add_Contact = tweet.user.screen_name;

		// Separate full name.
		var firstName = fullName.substr(0, fullName.indexOf(' '));
		var lastName = fullName.substr(fullName.indexOf(' ') + 1);

		// Add values in add contact form.
		$("#fname", $('#personModal')).val(firstName);
		$("#lname", $('#personModal')).val(lastName);
		$("#job_title", $('#personModal')).attr("value", description);
		//adding this  lines of code for the remove the error
		$("#network_handle").addClass("socialsuite-network-handle");

		//document.getElementById("network_handle").className = 'socialsuite-network-handle';
		$("#handle", $('#personModal')).attr("value", Tweet_Owner_For_Add_Contact);

		// Add website / handle of twitter of tweet owner.
		$("#website", $('#personModal')).attr("value",Tweet_Owner_For_Add_Contact);
		//$("#website", $('#personModal')).attr("value", Tweet_Owner_For_Add_Contact);
		$("#image", $('#personModal')).attr("value", tweet.user.profile_image_url);

		// Select network type.
		$("div.website select").val("TWITTER");

		// If picture is not null and undefined, display it by given width, else
		// display none
		var pic = tweet.user.profile_image_url;
		if (pic != undefined && pic != null)
		{
			var el = $('<img class="imgholder thumbnail person-img" onload="changeProperty()" style="display: inline;"  src="' + pic + '"></img>');
			$('#pic').html(el).show();
			$("img").error(function()
			{
				$('#pic').css("display", "none");
			});
		}

		// As per pic property need to change social suites element property.
		changeProperty();
	});

	// Hide network handle from add contact form.
	$('#personModal').on('hidden.bs.modal', function()
	{
		$("#network_handle").addClass("network-handle");	
		$("#handle").addClass("");
			//document.getElementById("handle").className = '';
		$('#pic').css("display", "none");
		$('#pic').empty();
		changeProperty();
	});

	// If img is shown then reduce size of network handle on add contact form.
	$('#personModal').on('shown.bs.modal', function(e)
	{
		changeProperty();
		/*adding this code for the getting the name and the twitter id and picture 
		*when new contact popup will open(pre-populated)
		*/
		var streamId = SOCIAL_SUITE_CONTACT["streamId"];
		var tweetId = SOCIAL_SUITE_CONTACT["tweetId"];

		// Get stream from collection.
		var modelStream = Streams_List_View.collection.get(streamId);

		// Get tweet from stream.
		var tweet = modelStream.get('tweetListView').get(tweetId).toJSON();
      
		// Tweet owner's full name.
		var fullName = tweet.user.name;

		// Tweet owner's description.
		var description = tweet.user.description;

		// Tweet owner's handle/Screen name.tweeterId is coming here 
	    var Tweet_Owner_For_Add_Contact = tweet.user.screen_name;
        //appending the @ symbol for the tweeterID
        var Tweet_Owner_For_Add_Contact="@"+Tweet_Owner_For_Add_Contact;   
        
		// Separate full name.
		var firstName;
		var lastName;
		if(!fullName.includes(" "))
			firstName = fullName.substr(0);
		else{
			firstName = fullName.substr(0, fullName.indexOf(' '));
			lastName = fullName.substr(fullName.indexOf(' ') + 1);
		}
		// Add values in add contact form.
		$("#fname", $('#personModal')).val(firstName);
		$("#lname", $('#personModal')).val(lastName);
		$("#job_title", $('#personModal')).attr("value", description);
		//adding this  lines of code for the remove the error that is in live
		$("#network_handle").addClass("socialsuite-network-handle");

		//document.getElementById("network_handle").className = 'socialsuite-network-handle';
		$("#handle", $('#personModal')).attr("value",Tweet_Owner_For_Add_Contact);

		// Add website / handle of twitter of tweet owner.
		$("#website", $('#personModal')).attr("value", Tweet_Owner_For_Add_Contact);
		$("#image", $('#personModal')).attr("value",tweet.user.profile_image_url);
		//$("#handle", $('#personModal')).attr("value",Tweet_Owner_For_Add_Contact);

		// Select network type.
		$("div.website-select").val("TWITTER");
		
		// If picture is not null and undefined, display it by given width, else
		// display none
		var pic = tweet.user.profile_image_url;
		if (pic != undefined && pic != null)
		{
			var el = $('<img class="imgholder thumbnail person-img" onload="changeProperty()" style="display: inline;"  src="' + pic + '"></img>');
			$('#pic').html(el).hide();
			/*for appending twitterId and hiding it*/
			$('#handle').val(Tweet_Owner_For_Add_Contact).hide();
		   $("#img").error(function()
			{
				/*
				*due to error picture will not display
				*/
				$('#pic').css("display", "none");
			});
		}


	});

	$("#pic").change(function()
	{
		changeProperty();
	});
});
/**
 * When social tab is not selected or user is in different tab, so add isNew
 * field with value true in tweet. so that will usefull to count unread tweets
 * and display that count in stream notification.
 */
function isNewUnreadTweet(tweet)
{
	var modelStream = null;

	// Newly register stream tweet or first tweet. So need to take stream from
	// original collection.
	if (tweet.id == "000" || tweet.type == "ACK")
	{
		console.log("got 000");
	}
	else
	{
		tweet["isNew"] = "true";
	}

	// Get stream from collection.
	modelStream = Streams_List_View.collection.get(tweet.stream_id);

	// Add tweet to stream model.
	rebuildTweet(modelStream, tweet);
}

/**
 * Calls method to Add Tweet in relevant stream (in sub-collection) with some extra tags as per
 * requirement are added. We were not having pubnub channel capacity so this solution
 * applied.
 */
function rebuildTweet(modelStream, tweet)
{
	// Hide waiting symbol.
	$("#stream-spinner-modal-" + tweet.stream_id).hide();

	// Add type of message
	if (tweet.text == "There is no tweets to show here." || tweet.text == "Dear you do not have any tweets.")
	{
		tweet["msg_type"] = "NoTweet";
		tweet["show"] = true;
		tweet.text = "No Tweets to show here.";
	}
	else if (tweet.type == "ACK")
	{
		// This ACK is from our social server to indicate current stream is
		// registered.
		tweet["msg_type"] = "ACK";
		tweet["text"] = "ACK";
	}
	else
	{
		//console.log(tweet);
		if (tweet.text == null || tweet.user == null)
			return;

		tweet["msg_type"] = "Tweet";

		//console.log(modelStream.get('tweetListView').length);

		// Remove no tweet notification.
		if (modelStream.get('tweetListView').length == 2)
			clearNoTweetNotification(modelStream);

		// If stream owner is tweet owner no need to show retweet icon.
		if (modelStream.get('screen_name') != tweet.user.screen_name)
			tweet["tweetowner_not_streamuser"] = true;

		// If stream is Sent or tweet owner is stream owner then show delete
		// option.
		if (tweet.stream_type == "Sent" || modelStream.get('screen_name') == tweet.user.screen_name)
			tweet["deletable_tweet"] = true;

		// If tweet is DM then show delete options and hide other options.
		if (tweet.stream_type == "DM_Inbox" || tweet.stream_type == "DM_Outbox")
		{
			tweet["direct_message"] = true;
			tweet["deletable_tweet"] = true;
		}

		// To set RT icon green, to show tweet is RT by user.
		var checkRT = modelStream.get('screen_name') + " retweeted";
		if (tweet.retweeted == checkRT)
			tweet["retweeted_by_user"] = true;

		// Save original text for other actions.
		tweet["original_text"] = tweet.text;

		// Converts normal text to tweet with link on url, # and @.
		tweet.text = convertTextToTweet(tweet);
	}

	// console.log("tweet : "+tweet.text);
	// console.log("add at "+modelStream.get('tweetListView').length);

	// On scroll down, To avoid freezing, collect 5 tweets in JSON Array and then add to stream.
	if (Scroll_Down_Call == true)
	{
		checkPastTweetAdd(tweet, modelStream);
		return;
	}

	/*
	 * Ack from server that shows current streams registration is done. So call
	 * register all with new counter to register next stream
	 */
	if (tweet.type == "ACK")
	{
		Register_Counter++;
		registerAll(Register_Counter);
	}

	// Add tweet to relevant stream.
	addTweetToStream(tweet, modelStream);
}

/**
 * Add given tweets in given stream model which is sub-collection.
 */
function addTweetToStream(tweet, modelStream)
{
	// Sort stream on tweet id basis which is unique and recent tweet has highest value.
	modelStream.get('tweetListView').comparator = function(model)
	{
		if (model.get('id'))
			return -model.get('id');
	};

	// Add tweet to stream.
	modelStream.get('tweetListView').add(tweet);

	// Sort stream on id. so recent tweet comes on top.
	modelStream.get('tweetListView').sort();

	// Create normal time.
	displayTimeAgo($(".chirp-container"));
}

/**
 * Removes isNew field from tweet so new unread tweet can be visible in stream. 
 */
function mergeNewUnreadTweets(streamId)
{
	// Get stream from collections.
	var stream = Streams_List_View.collection.get(streamId);

	var newAddedTweets = stream.get('tweetListView').where({ isNew : "true" });

	$.each(newAddedTweets, function(i, tweetModel)
	{
		tweetModel.unset("isNew");
	});

	// Create normal time.
	displayTimeAgo($(".chirp-container"));

	// Remove waiting symbol.
	removeWaiting();
}
/*
 * Remove waiting symbol from stream's column header, 
 * when user return to social tab as well as after getting reply from social server.
 */
function removeWaiting()
{
	var streamsJSON = Streams_List_View.collection.toJSON();

	// Streams not available.
	if (streamsJSON == null)
		return;

	// Get stream
	$.each(streamsJSON, function(i, stream)
	{
		// Get stream from collection.
		var modelStream = Streams_List_View.collection.get(stream.id);

		if (modelStream != null || modelStream != undefined)
		{
			// If any collection have some tweets then remove waiting.
			if (modelStream.get('tweetListView').length >= 1)
			{
				// Hide waiting symbol.
				$("#stream-spinner-modal-" + stream.id).hide();
			}
		}
	});
}
/*
 * Check valid scheduled. Selected schedule should be in future time. 
 * If it is past or current time then revert action and show alert.
 */
function isTimeInPast()
{
	// Get selected date and time.
	var scheduledDate = document.getElementById('scheduled_date').value;
	var scheduledTime = document.getElementById('scheduled_time').value;

	// Current date and time.
	var today = new Date().format('mm/dd/yyyy');
	var now = new Date();

	var min = (now.getMinutes() < 10 ? '0' : '') + now.getMinutes();

	now = now.getHours() + ':' + min;

	// Convert selected schedule in epoch time.

	// selected schedule.
	var schedulearray = (scheduledTime).split(":");
	var sdate = new Date(scheduledDate);
	var selectedSchedule = sdate.setHours(schedulearray[0], schedulearray[1]) / 1000.0;

	// current schedule.
	var currentSchedulearray = (now).split(":");
	var currentSdate = new Date(today);
	var currentSchedule = currentSdate.setHours(currentSchedulearray[0], currentSchedulearray[1]) / 1000.0;

	if (selectedSchedule > currentSchedule) // Future Time
	{
		// Appending schedule.
		var schedulearray = (scheduledTime).split(":");
		var sdate = new Date(scheduledDate);
		sdate = sdate.setHours(schedulearray[0], schedulearray[1]) / 1000.0;
		document.getElementById('schedule').value = sdate;

		var myDate = new Date(sdate * 1000);

		// Changes in UI.
		$('#send_tweet').removeAttr("disabled");
		Schedule_In_Future = true;

		// To check text limit after button text change.
		$('#twit-tweet').keypress();
	}
	
	// Past Time
	else
	{
		showAlertModal("future_date", undefined, function(){
			$("#send_tweet").attr("disabled", "disable");
			Schedule_In_Future = false;
		});
	}
}

/**
 * Gets Scheduled Updates count fron DB and show or hide button which links to
 * scheduled updates page.
 */
function checkScheduledUpdates()
{	
	// Get scheduled updates count
	$.getJSON("/core/scheduledupdate/getscheduledupdatescount", function(data)
	{
		if (data > 0)
			$("#show_scheduled_updates").show();
		
	}).error(function(jqXHR, textStatus, errorThrown)
	{
		$("#show_scheduled_updates").hide();
		console.log("Error occured in scheduled updates search.");
	});
}

/**
 * On click of scheduled update it will open message modal. And on click of
 * schedule it will save modified scheduled update.
 */
function scheduledmessagesEdit(id)
{
	$('#socialsuite_twitter_messageModal').remove();

	// Gets the update from its collection
	var selectedUpdate = Scheduled_Updates_View.collection.get(id);

	Scheduled_Edit = true;

	Message_Model = new Base_Model_View({ url : '/core/scheduledupdate', model : selectedUpdate, template : "socialsuite-twitter-message",
		modal : '#socialsuite_twitter_messageModal', window : 'scheduledmessages', postRenderCallback : function(el)
		{
			// Remove back drop, It remains there so need to remove.
			$('.modal-backdrop').remove();

			// Only once it will execute for same scheduled update on one click.
			if (!selectedUpdate.hasChanged())
			{
				// After displaying modal with details, need to show schedule from selected message.
				$("#socialsuite_twitter_messageModal", el).on('shown.bs.modal', function()
				{
					/*
					 * Shows scheduling clock icon on message modal with
					 * selected scheduled with disabled click event, so user
					 * only can schedule message.
					 */
					$("#tweet_scheduling", el).click();

					// Display date from selected message in message modal.
					$('input.date', $('#schedule_controls')).val((new Date(selectedUpdate.toJSON().scheduled_date * 1000)).toLocaleDateString());

					// For Testing: Enables schedule button if selected
					// scheduled update having future schedule.
					//isTimeInPast();
					// Changes in UI.
					$('#send_tweet').removeAttr("disabled");
				});

				// Show modal with details.
				$('#socialsuite_twitter_messageModal', el).modal('show');
			}
		}, saveCallback : function(data)
		{			
			// Hide message modal.
			$('#socialsuite_twitter_messageModal').modal('hide');
			$('#socialsuite_twitter_messageModal').remove();
			$('.modal-backdrop').remove();
			Scheduled_Edit = false;

			// Default check box is not added so need to add from handlebar so that will check this condition.
			data["checkbox"] = true;

			// Update changes in UI.
			selectedUpdate.set(data);
			
			// Creates normal time.
			displayTimeAgo($(".is-actionable"));
		} });

	// Add modal in "#schedule-edit-modal" Div on same page, to display modal with details.
	$('#schedule-edit-modal').html(Message_Model.render().el);

} // scheduledmessagesEdit end

/**
 * This file contains event of button which shows calendar and timer in message
 * modal and check selected schedules range.
 */

$(function()
{
	/* Show calender and time for selection on message modal. */
	$('body').on('click', '#tweet_scheduling', function(e)
			{
				// Message modal open for edit scheduled update.
				if ($("#schedule_controls").css("display") == "block" && Scheduled_Edit)
					return;

				// Toggle calendar and timer.
				$("#schedule_controls").toggle();

				if ($("#schedule_controls").css("display") == "block")
				{
					// Change send button's text.
					document.getElementById("send_tweet").innerHTML = "Schedule";
					$("#send_tweet").attr("disabled", "disable");

					this.className = "tweet-scheduling tweet-scheduling-active";

					// Set current date.
					$('input.date').val(getDateInFormat(new Date()));
					$('#scheduled_date').datepicker({ startDate : "today", autoclose : true, todayHighlight : true, format : CURRENT_USER_PREFS.dateFormat }).on('changeDate',
							function(ev)
							{
								console.log(new Date(ev.date));

								// Check selected schedule
								isTimeInPast();
							});

					// Set current time.
					$('#scheduled_time').timepicker({ showMeridian : false, defaultTime : 'current' }).on('changeTime.timepicker',
							function(e)
							{
								console.log(e.time.value);

								// Check selected schedule
								isTimeInPast();
							});

					// Save original URL from model.
					Previous_URL = Message_Model.model.url;

					// Update scheduled URL in model.
					Message_Model.model.url = '/core/scheduledupdate';
				}
				else
				{
					// Message modal open for scheduled update edit.
					if (Scheduled_Edit)
						return;

					this.className = "tweet-scheduling";
					// $('input.date').val()='';
					$('#scheduled_time').attr("value", '');

					// Set original URL back to model.
					Message_Model.model.url = Previous_URL;

					// Change send button's text.
					document.getElementById("send_tweet").innerHTML = "Send";
					$('#send_tweet').removeAttr("disabled");

					// Scheduling de-select
					Schedule_In_Future = false;

					// To check text limit after button text change.
					$('#twit-tweet').keypress();
				}
			});

	/**
	 * Calls function to check selected time after cloasing Time picker modal.
	 */
	/**$('.bootstrap-timepicker').live('hide', function()
	{
		isTimeInPast();
	});
	*/

	/**
	 * Calls function to open Message modal with selected scheduled update
	 * details and save into DB after modifications.
	 */
	$('body').on('click', '.edit-scheduled-update', function(e)
	{
		var updateId = $(this).closest('tr').find('.data').attr('data');

		// Opens Message Modal and save modifications in DB, makes changes in
		// UI.
		scheduledmessagesEdit(updateId);
	});
});
/**
 * Fill details of stream in add-stream form and arrange elements as per
 * requirement.
 */
function fillStreamDetail()
{
	// Network Type not selected
	Network_Type = null;

	// Stream Type not selected
	Stream_Type = null;

	// Empty screen name means Oauth is not done.
	$("#twitter_account", $('#addStreamModal')).attr("value", '');

	// Empty stream type.
	$("#stream_type", $('#addStreamModal')).attr("value", '');

	// remove keyword input element
	$('.remove-keyword').remove();

	// Add value to hidden input element.
	$("#domain_user_id", $('#addStreamModal')).attr("value", CURRENT_DOMAIN_USER.id);
	$("#client_channel", $('#addStreamModal')).attr("value", CURRENT_DOMAIN_USER.id + "_Channel");

	// Add button for twitter is hidden.
	$('#add_twitter_stream').hide();

	// To hide stream type description.
	document.getElementById("stream_description_label").className = 'description-hidden txt-mute';

	// Empty hidden profile image on form.
	$('#twitter_profile_img_url').attr("src", "");
}


/**
 * Register all streams on social server.
 */
function registerAll(index)
{
	var streamsJSON = Streams_List_View.collection.toJSON();

	// Streams not available OR streams already registered OR pubnub not
	// initialized OR (index 0 stream is done and Register_Counter is increased.)
	if (streamsJSON == null || Register_All_Done == true || Pubnub == null || (Register_Counter != null && index == 0))
	{
		console.log("Register_All_Done : " + Register_All_Done);
		return;
	}

	// Get stream.
	var stream = Streams_List_View.collection.at(index);

	// Check stream is present or added in collection.
	if (stream == null || stream == undefined)
		return;

	// First stream from collection to register and assign value to RC.
	if (index == 0 && Register_Counter == null)
	{
		Register_Counter = 0;

		// Add user's profile img from twitter to stream header.
		if (Add_Img_Done == false)
			addUserImgToColumn();
	}

	// Publish data to register on server
	var publishJSON = { "message_type" : "register", "stream" : stream };
	sendMessage(publishJSON);

	// All added streams registered.
	if (Register_Counter == (Streams_List_View.collection.length - 1))
		Register_All_Done = true;
}

/**
 * On logout or browser/window clise, Unregister all streams on server.
 */
function unregisterAll()
{
	// Collection not defined.
	if (!Streams_List_View)
		return;

	// Streams not available OR pubnub not initialized.
	if (Streams_List_View == undefined || Pubnub == null)
		return;

	// Unregister on server
	var publishJSON = { "message_type" : "unregister_all", "client_channel" : CURRENT_DOMAIN_USER.id + "_Channel" };
	sendMessage(publishJSON);

	// Flush all data.
	Register_All_Done = false;
	Register_Counter = null;
	Add_Img_Done = false;
	Streams_List_View = undefined;
}

/**
 * Add relevant profile img from twitter to stream in column header.
 */
function addUserImgToColumn()
{
	var streamsJSON = Streams_List_View.collection.toJSON();

	// Get stream
	$.each(streamsJSON, function(i, stream)
	{
		// Get stream from collection.
		var modelStream = Streams_List_View.collection.get(stream.id);

		// Fetching profile image url from twitter server
		$.get("/core/social/getprofileimg/" + stream.id, function(url)
		{
			// Set url in stream model.
			modelStream.set("profile_img_url", url);

			// Append in collection
			socialsuitecall.streams(modelStream);
		});
	});
	Add_Img_Done = true;
}

/**
 * On click of retry button in stream notification,
 * Sends register message again to twitter server. 
 */
function registerStreamAgain(streamId)
{
	// Fetch stream from collection
	var stream = Streams_List_View.collection.get(streamId).toJSON();

	// Register on server
	var publishJSON = { "message_type" : "register", "stream" : stream };
	sendMessage(publishJSON);

	// Show waiting symbol.
	$("#stream-spinner-modal-" + streamId).show();
}
/**
 * Calls updateNotification method to update or add new tweet notification with
 * count of new unread tweets in stream.
 * 
 * @param stream
 */
function showNotification(stream)
{
	if (stream)
		updateNotification(stream);
	else
	{
		var streamsJSON = Streams_List_View.collection.toJSON();

		// Streams not available.
		if (streamsJSON == null)
			return;

		// Get stream
		$.each(streamsJSON, function(i, stream)
		{
			updateNotification(stream);
		});
	}

	// Remove deleted tweet element from ui
	$('.deleted').remove();
}

/**
 * Check for new tweets when user was not in social tab. Show new tweet
 * notification on respective stream with number of new tweet.
 */
function updateNotification(stream)
{
	// Get stream from collection.
	var modelStream = Streams_List_View.collection.get(stream.id);

	// Get all new unread tweet on basis of isNew field value true.
	var newAddedTweets = modelStream.get('tweetListView').where({ isNew : "true" });

	// If no new unread tweets are available but stream has some tweets so clear
	// no tweet notification from stream.
	if (newAddedTweets.length == 0 && modelStream.get('tweetListView').length >= 1)
	{
		// Remove no tweet notification.
		clearNoTweetNotification(Streams_List_View.collection.get(stream.id));

		return;
	}
	else if (newAddedTweets.length == 1)
	{
		// Add notification of new tweet on stream.
		document.getElementById('stream_notifications_' + stream.id).innerHTML = '<p class="bg-info">' + newAddedTweets.length + ' new Tweet </p>';
	}
	else if (newAddedTweets.length > 1)
	{
		// Add notification of new tweets on stream.
		document.getElementById('stream_notifications_' + stream.id).innerHTML = '<p class="bg-info">' + newAddedTweets.length + ' new Tweets </p>';
	}

	/*
	 * Add relation from <div> for notification. So on click of notification we
	 * can add new unread tweets to stream.
	 */
	$('#stream_notifications_' + stream.id).attr("rel", 'add-new-tweet');
}

/**
 * Remove no tweet notification. Search for that tweet in collection and makes
 * that tweets model hide.
 */
function clearNoTweetNotification(modelStream)
{
	// Get tweet from stream.
	var modelTweet = modelStream.get('tweetListView').get('000');

	if (modelTweet != null || modelTweet != undefined)
	{
		// Set show false, so handlebar condition check will avoid to display.
		modelTweet.set("show", false);

		// Add back to stream.
		modelStream.get('tweetListView').add(modelTweet);
	}
}

/**
 * When request rate limit is exceeded so Twitter server send code 88, It will
 * not accept any more REST call. When Twitter service or network is unavailable
 * User have to wait for some time and retry again. We need to display
 * notification for that in relavant stream.
 */
function displayErrorInStream(errorMsg)
{
	var streamId = null;

	// Get stream id.
	if (errorMsg.id == "001") // from Tweet
		streamId = errorMsg.stream_id;
	else
		// from Stream
		streamId = errorMsg.id;

	// Hide waiting symbol.
	$("#stream-spinner-modal-" + streamId).hide();

	var modelStream = Streams_List_View.collection.get(streamId);

	if (modelStream.get('tweetListView').length == 0)
	{
		// Add notification of error on stream.
		document.getElementById('stream_notifications_' + streamId).innerHTML = '<p>Request rate limit exceeded, Retry after some time. <i class="icon icon-refresh" title="Retry again."></i></p>';

		// Add relation from <div> for notification.
		$('#stream_notifications_' + streamId).attr("rel", 'retry');
	}
}
/**
 * Checks scroll reached to end or not. Suppose it reached to end then call past
 * tweets and add to stream as well as maintain scrolls current position.
 * 
 * @param elementDiv -
 *            element where scrollDown performed
 */
function OnScrollDiv(elementDiv)
{
	// Check scroll bar is reached to end and function is not called before.
	if (($(elementDiv).scrollTop() + $(elementDiv).innerHeight() >= $(elementDiv)[0].scrollHeight) && ($(elementDiv).attr("data") == "0"))
	{

		// Function is alredy called for this stream.
		$(elementDiv).attr("data", "1");

		// Get stream id.
		var streamId = ($(elementDiv).closest('li').attr('id'));

		// Get stream from collection.
		var modelStream = Streams_List_View.collection.get(streamId);

		// Stream not found.
		if (modelStream == undefined || modelStream == null)
			return;

		// model to json.
		var stream = modelStream.toJSON();

		// Get tweet from stream.
		var modelTweet = modelStream.get('tweetListView').at(modelStream.get('tweetListView').length - 2);
		var tweet = modelTweet.toJSON();
	
		// Store reference to top message
		var currMsg = $("#" + tweet.id);

		// Store current scroll/offset
		var curOffset = currMsg.offset().top - $(elementDiv).scrollTop();

		// Append loading icon.
		$(elementDiv)
				.append(
						'<span id="stream-waiting-modal-' + streamId + '" class="social-loader-icon text-center"><img class="thumb-tiny" src="'+updateImageS3Path("img/ajax-spinner.gif")+'"></span>');

		/*
		 * Calls TwitterAPI class to request for 20 more updates tweeted before
		 * the tweet id of the last update
		 */
		$
				.getJSON(
						"/core/social/pasttweets/" + stream.id + "/" + tweet.id + "/" + tweet.id_str,
						function(data)
						{
							// If no more updates available, show message.
							if (data == null)
							{
								showNotyPopUp('information', "No more updates available for stream " + stream.stream_type + " of " + stream.screen_name, "top",
										5000);

								// Remove loading icon.
								$('#stream-waiting-modal-' + streamId).remove();

								// Do not call this function again once its
								// called on one scroll.
								$(elementDiv).attr("data", "1");

								// Twitter icon and up arrow appended in stream
								// to show no more tweets available.
								$(elementDiv)
										.append(
												'<span id="past-tweet-end-' + streamId + '" class="text-light p-t-sm p-b-sm  block text-center"><i class="icon icon-twitter icon-2x m-r-xs"></i><i class="icon icon-long-arrow-up icon-2x"></i></span>');
								return;
							}
							if (data.length == 0)
							{
								showNotyPopUp('information', "No more updates available for stream " + stream.stream_type + " of " + stream.screen_name, "top",
										5000);
								$('#stream-waiting-modal-' + streamId).remove();
								$(elementDiv).attr("data", "1");
								$(elementDiv)
										.append(
												'<span id="past-tweet-end-' + streamId + '" class="text-light p-t-sm p-b-sm  block text-center"><i class="icon icon-twitter icon-2x m-r-xs"><i class="icon icon-long-arrow-up icon-2x"></i></i></span>');
								return;
							}

							
							 // Populate the collection with update stream
							 // details and show
							 
							var i;
							var myObject;

							// Global flag set.
							Scroll_Down_Call = true;

							for (i = 0; i < data.length; i++)
							{
								// String to json.
								myObject = eval('(' + data[i] + ')');

								// Add tweet to stram.
								handleMessage(myObject);

								// All tweets done.
								if (i + 1 == data.length)
									Scroll_Down_Call = false;
							}

							// Add remaining tweets.
							if (Scroll_Down_Call == false && Past_Tweets_Count != 0 && Past_Tweets.length != 0)
								addPastTweetsToStream(modelStream);

							// Set scroll to current position minus previous
							// offset/scroll
							var scrollOnDiv = $('#' + streamId).find('#Column-model-list');
							scrollOnDiv.scrollTop((currMsg.offset().top - curOffset) + 650);

							// Remove loading icon.
							$('#stream-waiting-modal-' + streamId).remove();

							// One function call for current stream is over.
							$(elementDiv).attr("data", "0");

						}).error(function(data)
				{
					// Loading icon remove.
					$('#stream-waiting-modal-' + streamId).remove();

					// One function call for current stream is over.
					$(elementDiv).attr("data", "0");

					var result = data.responseText;

					// Error message is shown to the user
					if (data.responseText == "")
						showNotyPopUp('information', "No more updates available for stream " + stream.stream_type + " of " + stream.screen_name, "top", 7000);
					else if (result.indexOf("rate") != -1)
						showNotyPopUp('information', "Request rate limit exceeded, Retry after some time.", "top", 5000);
					else if (result.indexOf("Could not fetch URL") != -1)
						showNotyPopUp('information', "Please, check your internet connection.", "top", 5000);
					else
						showNotyPopUp('information', data.responseText, "top", 5000);
				});
	}

	// Remove deleted tweet element from ui
	$('.deleted').remove();
}

// Checks counter and adds tweet in json array.
function checkPastTweetAdd(tweet, modelStream)
{
	// If collected tweets less than 5.
	if (Past_Tweets_Count < 5)
	{
		// Add tweet in json array.
		Past_Tweets[Past_Tweets_Count] = tweet;

		// Increment counter.
		Past_Tweets_Count++;
	}
	else if (Past_Tweets_Count == 5)
	{
		// If collected tweets are 5 then add them in to stream.
		addPastTweetsToStream(modelStream);
	}
}

/**
 * Fetches relavant stream model from collection and update that collection with
 * past tweets fetched on scroll down.
 */
function addPastTweetsToStream(modelStream)
{
	// If no tweets to add in collection.
	if (Past_Tweets.length == 0)
		return;

	// Update collection.
	addTweetToStream(Past_Tweets, modelStream);

	// Reset json array and counter.
	Past_Tweets_Count = 0;
	Past_Tweets = [];
}
/** 
 * This file contains all event related actions on Stream, 
 * Like add stream, remove stream, select network type, select stream type, etc.
 */

/** On load of social suites page. */
$(function()
{
	// Default values
	Stream_Type = null;
	Network_Type = null;
	Register_All_Done = false;
	Tweet_Owner_For_Add_Contact = null;
	Focused = true;
	Scheduled_Edit = false;
	Register_Counter = null;
	Add_Img_Done = false;

	/*
	 * When user click on clock icon to schedule update so need to save original
	 * URL of model, in case of user de-select scheduling.
	 */
	Previous_URL = null;

	// If selected schedule is future time then it will be true.
	Schedule_In_Future = false;

	// Flag for Scroll down reached to end of stream.
	Scroll_Down_Call = false;

	// How many Tweets ready for display.
	Past_Tweets_Count = 0;
});

// To collect tweets in temp collection.
window.onfocus = function()
{
	Focused = true;
};
window.onblur = function()
{
	Focused = false;
};

window.onbeforeunload = unregisterAll;

function initializeSocialSuite()
{
	// On close tab/window unregister all streams on server.
	$(window).unload(function()
	{
		unregisterAll();
	});

	// After clicking on logout, unregister all streams on server.
	$('a').click(function(event)
	{		
		var herfLogout = $(this).attr("href");
		if (herfLogout == "/login")
			unregisterAll();
	});

	/**
	 * Display popup form with stream details.
	 */
	$('body').on('click', '.add-stream', function(e)
	{
		// Need to call openTwitter function in ui.js for Oauth.
		head.js('js/designer/ui.js', function()
		{
		});

		// Reset all fields
		$('#streamDetail').each(function()
		{
			this.reset();
		});

		// Enable button of add stream on form of stream detail
		// $('#addStreamModal').find('#add_twitter_stream').removeAttr('disabled');

		// Fill elements on form related to stream.
		fillStreamDetail();

		getTemplate('socialsuite-social-network', {}, undefined, function(template_ui){
			if(!template_ui)
				  return;
			// Add social network types template
			$('#streamDetails').html($(template_ui));

			// Show form modal
			$('#addStreamModal').modal('show');

		}, "#streamDetails");
		
	});

	/**
	 * On click of twitter icon, Calls Oauth for selected network type.
	 */
	$('body').on('click', '.network-type', function(e)
	{
		// User select Twitter.
		if (this.id == "twitter_option")
		{
			// Oauth for twitter.
			openTwitter();

			/**
			 * Get network type from selected option of social networks. Icon
			 * can not store value attribute so need store on options.
			 */
			Network_Type = "TWITTER";
		}

		// Store network type on input element for form feild.
		$("#network_type", $('#addStreamModal')).attr("value", Network_Type);
	});

	/**
	 * Get stream name from selected option in list of streams.
	 */
	$('body').on('click', '.stream-type', function(e)
					{
						e.preventDefault();

						if (this.className == "stream-type stream-type-button-color")
						{
							// remove keyword input element
							$('.remove-keyword').remove();

							// Remove all selection.
							$('.stream-type').removeClass("stream-type-button-color");

							// Button deselected.
							this.className = "stream-type";

							// Empty stream type.
							Stream_Type = null;
							$("#stream_type", $('#addStreamModal')).attr("value", '');
						}
						else
						{
							// Remove all other selection.
							$('.stream-type').removeClass("stream-type-button-color");

							// Button selected.
							this.className = "stream-type stream-type-button-color";

							// Store stream type.
							Stream_Type = $(this).attr("value").trim();
							$("#stream_type", $('#addStreamModal')).attr("value", Stream_Type);

							// Display keyword field.
							if (Stream_Type == "Search")
							{
								$("#search_stream_keyword").html('<div class="remove-keyword"><div class="row"><div class="control-group col-md-5"><span class="controls"><input id="keyword" name="keyword" type="text" class="required form-control" required="required" autocapitalize="off" placeholder="Search Keyword..." value="" autofocus></span></div></div></div>');
							}
							else
							{
								// Remove keyword input element
								$('.remove-keyword').remove();
							}
						}

						// Removes bg color.
						$(this).css('background-color', '');
					});

	/**
	 * Get description of stream on mouse over and show at bottom of add stream
	 * form.
	 */
	$(document)
			.on(
					"mouseover",
					".stream-type",
					function(e)
					{
						// To show stream type description.
						$("#stream_description_label").addClass("txt-mute");

						// Gets value of selected stream type.
						mouseoverStream = $(this).attr("value");

						var theColorIs = $(this).css("background-color");

						if (theColorIs != 'rgb(187, 187, 187)')
						{
							// Changes bg color.
							$(this).css('background-color', '#EDEDED');
						}

						getTemplate('socialsuite-hover-helptext', {"item":mouseoverStream}, undefined, function(template_ui){
							if(!template_ui)
								  return;
							$("#stream_description_label").removeClass('description-hidden');
							$('#stream_description_label').html(template_ui);	
						}, null);

						
					});

	/**
	 * Remove description of stream on mouse out and from bottom of form.
	 */
	$(document).on("mouseout", ".stream-type", function(e)
	{
		// Removes bg color.
		$(this).css('background-color', '');

		// To hide stream type description.
		$("#stream_description_label").addClass('description-hidden txt-mute');
	});

	/**
	 * Fetchs data from popup stream add form and save stream as well as add to
	 * the collection, publish register message to the server.
	 */
	$('body').on('click', '.save-twitter-stream', function(e)
					{
						// Check add-stream button is not enable
						if ($('#addStreamModal').find('#add_twitter_stream').attr('disabled'))
							return;

						// Check if Oauth is done.
						if ($('#twitter_account').val() == null || $('#twitter_account').val() == '')
						{
							showAlertModal("social_access", undefined, function(){
								$("#add-stream").click();
							});
							return;
						}

						// Check if stream type is not selected.
						if (Stream_Type == null || Stream_Type == '')
						{
							// To show error description.
							$("#stream_description_label").addClass("txt-mute").html('<span style="color: red;"><i class="icon-exclamation"></i> You have to select your favorite stream type.</span>');
							return;
						}

						// Check if the form is valid
						if (!isValidForm('#streamDetail'))
						{
							$('#streamDetail').find("input").focus();
							return false;
						}

						// Disables add button to prevent multiple add on click
						// event issues
						$('#addStreamModal').find('#add_twitter_stream').attr('disabled', 'disabled');

						// Show notification for adding stream.
						showNotyPopUp('information', "Adding Stream...", "top", 2500);

						// Get data from form elements
						var formData = jQuery(streamDetail).serializeArray();
						var json = {};

						// Convert into JSON
						jQuery.each(formData, function()
						{
							json[this.name] = this.value || '';
						});

						// Add collection's column index in stream.
						json["column_index"] = Streams_List_View.collection.length + 1;

						// Create new stream
						var newStream = new Backbone.Model();
						newStream.url = '/core/social';
						newStream.save(json, { success : function(stream)
						{
							// Append in collection,add new stream
							socialsuitecall.streams(stream);

							// Scroll down the page till end, so user can see
							// newly added stream.
							$("html, body").animate({ scrollTop : $(document).height() - $(window).height() });

							// Register on server
							var publishJSON = { "message_type" : "register", "stream" : stream.toJSON() };
							sendMessage(publishJSON);

							// Notification for stream added.
							showNotyPopUp('information', "Stream added. You can add another Stream now.", "top", 4000);

							setTimeout(function()
							{
								// Find selected stream id.
								var idOfStreamType = $('#addStreamModal').find("div[value='" + Stream_Type + "']").attr('id');
								$("#" + idOfStreamType).click();

								// Make send button enable
								$('#addStreamModal').find('#add_twitter_stream').removeAttr('disabled');

								Stream_Type = "";
							}, 4000);

							// Adds tag in 'our' domain to track usage
							addTagAgile(SOCIAL_TAG);

						}, error : function(data)
						{
							console.log(data);
						} });
					});

	/**
	 * Gets stream, Delete it from collection and dB and publish unregister
	 * stream.
	 */
	$('body').on('click', '.stream-delete', function(e)
	{
		var id = $(this).attr('id');
		showAlertModal("delete_stream", "confirm", function(){
			// Fetch stream from collection
			var stream = Streams_List_View.collection.get(id).toJSON();

			// Stream size is too big, can not handle by pubnub so remove list of
			// tweet.
			delete stream.tweetListView;

			// Unregister on server
			var publishJSON = { "message_type" : "unregister", "stream" : stream };
			sendMessage(publishJSON);

			// Delete stream from collection and DB
			//Streams_List_View.collection.get(id).destroy();
			$.ajax({ type : 'DELETE', url : '/core/social/' + id, contentType : "application/json; charset=utf-8",
				success : function(data){
					Streams_List_View.collection.remove(id);
					Streams_List_View.render(true).el;
				}, dataType : 'json' });
		});
	});

	/**
	 * In stream on click of notification, Gets relation and perform action as
	 * per that. like Retry : re-register stream on server. Add-new -tweet : Add
	 * new unread tweets on stream.
	 */
	$('body').on('click', '.action-notify', function(e)
	{
		// Get relation for action.
		var relation = $(this).attr('rel');

		// Get stream id.
		var streamId = $(this).attr('data');

		// Remove notification of new tweets on stream.
		$("#"+this.id).html('');

		if (relation == "add-new-tweet")
			mergeNewUnreadTweets(streamId);
		else if (relation == "retry")
			registerStreamAgain(streamId);

		// Remove relation from <div> for notification.
		$(this).attr("rel", '');

		// Remove deleted tweet element from ui
		$('.deleted').remove();
	});
}
/**
 * As per given action type it selects url to send get request and perfome
 * action on tweet. Tweet actions are Follow, un follow, Favorite, undo favorite
 * etc.
 * 
 * @param streamId
 * @param tweetId
 * @param tweetOwner
 * @param actionType
 */
function performTweetAction(streamId, tweetId, tweetOwner, actionType)
{
	// Get stream from collection.
	var modelStream = Streams_List_View.collection.get(streamId);

	if (tweetId)
	{
		// Get tweet from stream.
		var modelTweet = modelStream.get('tweetListView').get(tweetId);
		var tweet = modelTweet.toJSON();

		var tweetIdStr = tweet.id_str;
	}

	var urlForGet = null;

	switch (actionType) {
		case "favorite":
		{
			/*
			 * Sends get request to url "core/social/favorite/" and Calls
			 * StreamAPI with Stream id, tweet idStr as path parameters.
			 */
			urlForGet = "/core/social/favorite/" + streamId + "/" + tweetIdStr;
		}
			break;
		case "undofavorite":
		{
			/*
			 * Sends get request to url "core/social/undofavorite/" and Calls
			 * StreamAPI with Stream id, tweet idStr as path parameters.
			 */

			urlForGet = "/core/social/undofavorite/" + streamId + "/" + tweetIdStr;
		}
			break;
		case "followuser":
		{
			// Calls method to send request to follow user.
			urlForGet = "/core/social/followuser/" + streamId + "/" + tweetOwner;
		}
			break;
		case "unfollowuser":
		{
			// Calls method to send request to unfollow user.
			urlForGet = "/core/social/unfollowuser/" + streamId + "/" + tweetOwner;
		}
			break;
		case "blockuser":
		{
			// Calls method to send request to block user.
			urlForGet = "/core/social/blockuser/" + streamId + "/" + tweetOwner;
		}
			break;
		case "unblockuser":
		{
			// Calls method to send request to unblock user.
			urlForGet = "/core/social/unblockuser/" + streamId + "/" + tweetOwner;
		}
			break;
	}

	requestAction(urlForGet, actionType, modelStream, modelTweet, tweetOwner);
}

/**
 * Call REST api and perfome action as per reply from backend.
 */
function requestAction(urlForGet, actionType, modelStream, modelTweet, tweetOwner)
{
	$.get(urlForGet, function(data)
	{
		// Favorite is Unsuccessful.
		if (data == "Unsuccessful" || data == "false")
		{
			showNotyPopUp('information', "Retry after sometime.", "top", 5000);
			return;
		}

		// As per reply from get request reflect that in UI on tweet in stream.
		reflectActionOnTweet(data, actionType, modelStream, modelTweet, tweetOwner);

		// Create normal time.
		displayTimeAgo($(".chirp-container"));
		
	}).error(function(data)
	{
		// Error message is shown when error occurs
		displayError(null, data);
	});
}

/**
 * Accept data and reflect action in UI on tweet in stream. like On favorite :
 * change icon color to orange, Undo same action on undo favorite. On Block user ,
 * unfollow user and show noty... etc.
 * 
 * @param data
 * @param actionType
 * @param modelStream
 * @param modelTweet
 * @param tweetOwner
 */
function reflectActionOnTweet(data, actionType, modelStream, modelTweet, tweetOwner)
{
	if (modelTweet)
		var tweet = modelTweet.toJSON();

	switch (actionType) {
		case "favorite":
		{
			// On success, the color of the favorite is shown orange.
			// Update attribute in tweet.
			modelTweet.set("favorited_by_user", "true");

			// Add back to stream.
			modelStream.get('tweetListView').add(modelTweet);
		}
			break;

		case "undofavorite":
		{
			// On success, Change favorite icon to normal.
			// Delete tweet from stream
			modelTweet.unset("favorited_by_user");

			// Add back to stream.
			modelStream.get('tweetListView').add(modelTweet);
		}
			break;
		case "followuser":
		{
			if (data == "true")
				showNotyPopUp('information', "Now you are following @" + tweetOwner, "top", 5000);
		}
			break;
		case "unfollowuser":
		{
			if (data == "Unfollowed")
				showNotyPopUp('information', "Now you are not following @" + tweetOwner, "top", 5000);
		}
			break;
		case "blockuser":
		{
			if (data == "true")
				showNotyPopUp('information', "You just blocked @" + tweetOwner, "top", 5000);
		}
			break;
		case "unblockuser":
		{
			if (data == "Unblock")
				showNotyPopUp('information', "You just unblock @" + tweetOwner, "top", 5000);
		}
			break;

	}
}

// Displays Error notification.
function displayError(modalToDisplay, data)
{
	$("#spinner-modal").hide();

	if (modalToDisplay != null)
	{
		// If error occurs while posting modal is removed and error message is
		// shown
		$('#' + modalToDisplay).modal("hide");
	}
	
	var result = data.responseText;

	// Error message is shown if error occurs
	if (result.trim() == "Status is a duplicate.")
		showNotyPopUp('information', "Whoops! You already tweeted that...", "top", 5000);
	else if(result.trim() == "Sorry, that page does not exist")
		showNotyPopUp('information', "Sorry, that tweet does not exist.", "top", 5000);
	else
		showNotyPopUp('information', "Retry after sometime.", "top", 5000);

	console.log(data.responseText);
}
/**
 * This file contains all event related actions on tweet, Like delete tweet,
 * follow, unfollow, favorite, block, etc.
 */

$(function()
{
	/**
	 * Get stream and perform favorite action on selected tweet.
	 */
	$('body').on('click', '.favorite-status', function(e)
	{
		// Get the id of the tweet on which retweet is clicked
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		performTweetAction(streamId, tweetId, null, "favorite");
	});

	/**
	 * Get stream and perform undo-favorite action on selected tweet.
	 */
	$('body').on('click', '.undo-favorite-status', function(e)
	{
		// Get the id of the tweet on which retweet is clicked
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		performTweetAction(streamId, tweetId, null, "undofavorite");
	});

	/**
	 * Sends details of tweet and stream id. Method will check whether
	 * relashionship of stream owner and tweet owner, so more options will be
	 * displyed as per that.
	 * 
	 * @param stream_id
	 *            stream id to fetch stream details.
	 * @param tweetOwner
	 *            Twitter user's screen name.
	 */
	$('body').on('click', '.more-options', function(e)
					{
						var streamId = ($(this).closest('article').attr('stream-id'));
						var tweetId = ($(this).closest('article').attr('id'));
						var elementId = $(this).attr("id");

						// Get stream from collection.
						var modelStream = Streams_List_View.collection.get(streamId);

						// Get tweet from stream.
						var modelTweet = modelStream.get('tweetListView').get(tweetId);
						var tweet = modelTweet.toJSON();

						var tweetIdStr = tweet.id_str;
						var tweetOwner = tweet.user.screen_name;

						// Fetch stream from collection
						var stream = modelStream.toJSON();

						// Remove extra element from dropdown menu list.
						$('.list-clear').remove();

						// Close all dropdowns of other tweets.
						$('.more-options-list').toggle(false);

						// Open dropdown with slow speed.
						$('#' + elementId + '_list', $('#' + streamId)).toggle("slow");

						// Tweet belongs to stream owner so no extra options
						// required.
						if (stream.screen_name == tweetOwner)
							return;

						// Check stream owner relashionship tweet owner.
						$
								.get(
										"/core/social/checkrelationship/" + streamId + "/" + tweetOwner,
										function(data)
										{
											// Stream owner follows tweet owner
											// then add unfollow option
											if (data.follow == "true")
											{
												$('#' + elementId + '_list', $('#' + streamId))
														.append(
																'<li class="list-clear"><a href="#social" class="unfollow-user" tweet-owner=' + tweetOwner + '>Unfollow @' + tweetOwner + '</a></li>');
											}
											// Stream owner not following tweet
											// owner then add follow option
											else if (data.follow == "false")
											{
												$('#' + elementId + '_list', $('#' + streamId))
														.append(
																'<li class="list-clear"><a href="#social" class="follow-user" tweet-owner=' + tweetOwner + '>Follow @' + tweetOwner + '</a></li>');
											}

											// Tweet owner is stream owner's
											// follower then add send DM option
											if (data.follower == "true")
											{
												$('#' + elementId + '_list', $('#' + streamId)).append(
														'<li class="list-clear"><a href="#social" class="direct-message">Send Direct Message</a></li>');
											}

											// Check tweet owner is Block or
											// Unblock
											if (data.blocked == "true")
											{
												$('#' + elementId + '_list', $('#' + streamId))
														.append(
																'<li class="list-clear"><a href="#social" class="unblock-user" tweet-owner=' + tweetOwner + '>Unblock @' + tweetOwner + '</a></li>');
											}
											else if (data.blocked == "false")
											{
												$('#' + elementId + '_list', $('#' + streamId))
														.append(
																'<li class="list-clear"><a href="#social" class="block-user" tweet-owner=' + tweetOwner + '>Block @' + tweetOwner + '</a></li>');
											}
										}).error(function(data)
								{
									// Error message is shown when error occurs
									displayError(null, data);
								});
					});

	/**
	 * Sends follow request to Follow the contact's Twitter profile in Twitter
	 * based on stream id and Twitter user's screen name
	 * 
	 * @param stream_id
	 *            stream id to fetch stream details
	 * @param tweetOwner
	 *            Twitter user's screen name to send follow request
	 */
	$('body').on('click', '.follow-user', function(e)
	{
		// Details to be pass on to method.
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetOwner = $(this).attr("tweet-owner");

		performTweetAction(streamId, null, tweetOwner, "followuser");
	});
	
	/**
	 * Sends unfollow request to unFollow the contact's Twitter profile in
	 * Twitter based on stream id and Twitter user's screen name
	 * 
	 * @param stream_id
	 *            stream id to fetch stream details
	 * @param tweetOwner
	 *            Twitter user's screen name to send unfollow request
	 */
	$('body').on('click', '.unfollow-user', function(e)
	{
		// Details to be pass on to method.
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetOwner = $(this).attr("tweet-owner");

		performTweetAction(streamId, null, tweetOwner, "unfollowuser");
	});

	/**
	 * Sends block request to Block the contact's Twitter profile in Twitter
	 * based on stream id and Twitter user's screen name.
	 * 
	 * @param stream_id
	 *            stream id to fetch stream details
	 * @param tweetOwner
	 *            Twitter user's screen name to send block request
	 */
	$('body').on('click', '.block-user', function(e)
	{
		// Details to be pass on to method.
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetOwner = $(this).attr("tweet-owner");

		performTweetAction(streamId, null, tweetOwner, "blockuser");
	});

	/**
	 * Sends unblocked request to unBlocked the contact's Twitter profile in
	 * Twitter based on stream id and Twitter user's screen name.
	 * 
	 * @param stream_id
	 *            stream id to fetch stream details
	 * @param tweetOwner
	 *            Twitter user's screen name to send unblock request
	 */
	$('body').on('click', '.unblock-user', function(e)
	{
		// Details to be pass on to method.
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetOwner = $(this).attr("tweet-owner");

		performTweetAction(streamId, null, tweetOwner, "unblockuser");
	});

	/**
	 * Sends delete request to Twitter profile in Twitter based on stream id,
	 * Twitter user's screen name and tweet id.
	 */
	$('body').on('click', '.delete-tweet', function(e)
	{
		// Ask confirmation to user.
		var $that = $(this);
		showAlertModal("delete_tweet", "confirm", function(){
			// Details to pass on to method.
			var streamId = ($that.closest('article').attr('stream-id'));
			var tweetId = ($that.closest('article').attr('id'));

			// Get stream from collection.
			var modelStream = Streams_List_View.collection.get(streamId);

			// Get tweet from stream.
			var modelTweet = modelStream.get('tweetListView').get(tweetId);
			var tweet = modelTweet.toJSON();

			var tweetIdStr = tweet.id_str;
			var tweetOwner = tweet.user.screen_name;

			// Call method with details of tweet to be deleted.
			$.get("/core/social/deletetweet/" + streamId + "/" + tweetOwner + "/" + tweetIdStr, function(data)
			{
				if (data == "Successful")
				{
					modelTweet.set("deleted_msg", "deleted");

					// Add back to stream.
					modelStream.get('tweetListView').add(modelTweet);

					showNotyPopUp('information', "Your tweet has been deleted.", "top", 5000);

					// Remove tweet element from ui
					$('.deleted').remove();
				}
				else if (data == "Unsuccessful")
				{
					showNotyPopUp('information', "Retry after sometime.", "top", 5000);
				}
			}).error(function(data)
			{
				// Error message is shown if error occurs
				displayError(null, data);
			});
		});
	});

	/**
	 * Get tweet, show tweet in modal with list of user with details, who
	 * retweeted that tweet.
	 */
	$('body').on('click', '.show-retweet', function(e)
	{		
		// Close all dropdowns of all tweets.
		$('.more-options-list').toggle(false);

		// Details to be pass on to method.
		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		// Get stream from collection.
		var modelStream = Streams_List_View.collection.get(streamId);

		// Get tweet from stream.
		var modelTweet = modelStream.get('tweetListView').get(tweetId);
		var tweet = modelTweet.toJSON();

		/*
		 * Suppose input json has id then modal will not be display. Before
		 * calling displayModal need to remove tweet id. Tweet id is not used
		 * here in future.
		 */
		delete tweet.id;

		// Display Modal
		displayModal("socialsuite_RT_userlistModal", "socialsuite-RT-userlist", tweet, null, null, "/core/social/tweet/" + streamId);

		$("#spinner-modal").show();
		
		// Collection for user's list.
		var RTUserListView = new Base_Collection_View({ url : function()
		{
			return '/core/social/getrtusers/' + streamId + "/" + tweet.id_str;
		}, restKey : "user", templateKey : "socialsuite-RT-userlist", individual_tag_name : 'li', });

		RTUserListView.collection.fetch({
		    success : function(data) {		        
		        $("#spinner-modal").hide();
		    },
		    error: function(response) {
		        console.log("ON ERROR");
		        console.log(response);
		        
		        var data = {}; data["responseText"] = "Sorry, that page does not exist";
		        
		        displayError("socialsuite_RT_userlistModal", data);
		    }
		});

		$('#RTuser_list').html(RTUserListView.render(true).el);

		// Create normal time.
		displayTimeAgo($("#socialsuite_RT_userlistModal"));		
	});
});
/**
 * AS per tweet data and type, It will perform actions like : display rate limit
 * exceed error, add tweet, show notification if user is not in social
 * tab/window.
 * if tweet id is 001 : Rate limit exceeded.
 * if tweet id is 000 : tweets not available for stream..
 * if tweet type is ACK : tweet is register on server and all REST tweets are sent.
 */
function handleMessage(tweet)
{
	// We need this messages to reflect actions in all added relevant streams.
	if (tweet["delete"] != null) // (tweet.delete != null)
	{
		return;
	}

	// Error message from server "Rate limit exceeded." or "server not connected."
	if (tweet.id == "001") // (tweet.delete != null)
	{
		displayErrorInStream(tweet);
		return;
	}

	// Get stream from collection.
	var modelStream = Streams_List_View.collection.get(tweet.stream_id);

	if (modelStream != undefined)
	{
		// User on #social as well as window is active.
		if (Current_Route == "social" && Focused == true)
		{
			// New tweet notification not yet clicked in stream.
			if ($('#stream_notifications_' + tweet.stream_id).is(':empty') == false)
			{
				// console.log("not clicked");

				// User did not click on notification so mark tweet as new unread tweet.
				isNewUnreadTweet(tweet);

				// Change notification to show number of new tweets.
				showNotification(modelStream);
			}
			else
			{
				// User is in #social and there is no notification on stream.
				// Rebuild tweet and Add tweet to model in normal way.
				rebuildTweet(modelStream, tweet);
			}
		}
		else
		{			
			// Add tweet as new unread, because user is on another tab or window is inactive.
			isNewUnreadTweet(tweet);

			// User in #social but window is inactive.
			if (Current_Route == "social")
			{
				// Change notification to show number of new tweets.
				showNotification(modelStream);
			}
		}
	} // If End

	// Remove deleted tweet element from ui
	$('.deleted').remove();
}

/*
 * Convert normal text of tweet to tweet with links on @screen_name , #hashtags
 * and url.
 */
function convertTextToTweet(tweet)
{
	var linkableTweetArray = new Array();
	var tweetText = tweet.text;
	var regex = new RegExp();
	var temp;

	// Replace &amp; with &
	regex = new RegExp("&amp;", "g");
	tweetText = tweetText.replace(regex, '&');

	// Split text in array.
	linkableTweetArray = tweetText.split(/[\s,?&;.'":!)({}]+/);

	// Remove duplicate words.
	linkableTweetArray = _.uniq(linkableTweetArray);

	for ( var i = 0; i < linkableTweetArray.length; i++)
	{
		if (linkableTweetArray[i].charAt(0) == "@") // Mentions
		{
			regex = new RegExp(linkableTweetArray[i], "g");
			tweetText = tweetText
					.replace(
							regex,
							'&lt;a href=\'https://twitter.com/' + linkableTweetArray[i].substring(1) + '\' target=\'_blank\' class=\'cd_hyperlink\'>' + linkableTweetArray[i] + '&lt;/a>');
		}
		else if (linkableTweetArray[i].charAt(0) == "#") // Hashtags
		{
			regex = new RegExp(linkableTweetArray[i], "g");
			var url = "https://twitter.com/search?q=%23" + linkableTweetArray[i].substring(1) + "&src=hash";
			tweetText = tweetText.replace(regex, '&lt;a href=\'' + url + '\' target=\'_blank\' class=\'cd_hyperlink\'>' + linkableTweetArray[i] + '&lt;/a>');
		}
	}

	// URL
	linkableTweetArray = new Array();
	linkableTweetArray = tweetText.split(/\s/);
	var exp = "^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]";

	$.each(linkableTweetArray, function(index, word)
	{
		if (word.match(exp))
			tweetText = tweetText.replace(word, '&lt;a href=\'' + word + '\' target=\'_blank\' class=\'cd_hyperlink\'>' + word + '&lt;/a>');
	});

	regex = new RegExp("&lt;", "g");
	tweetText = tweetText.replace(regex, '<');
	return tweetText;
}
// Displays modal with filled details.
function displayFilledModal(streamId, tweetId, tweetOwner, messageType)
{
	var urlForPost = "/core/social/tweet/" + streamId;

	// Fetch stream from collection
	var modelStream = Streams_List_View.collection.get(streamId);
	var stream = modelStream.toJSON();

	if (tweetId != null)
	{
		// Get tweet from stream.
		var modelTweet = modelStream.get('tweetListView').get(tweetId);
		var tweet = modelTweet.toJSON();
	}

	// Store info in a json, to send it to the modal window when making send
	// tweet request
	var json = {};

	json["streamId"] = streamId;
	json["profileImg"] = $("#" + streamId + "-profile-img").prop("src");
	json["domain_user_id"] = CURRENT_DOMAIN_USER.id;
	json["screen_name"] = stream.screen_name;
	json["network_type"] = "TWITTER";
	json["token"] = stream.token;
	json["secret"] = stream.secret;
	json["schedule"] = "0";

	switch (messageType) {
	case "Tweet":
	{
		// Set headline of modal window as Send Message
		json["headline"] = "Tweet";

		// Information to be shown in the modal to the user while sending
		// message
		json["info"] = "Status from " + stream.screen_name;
		json["description"] = "What's happening?";
	}
		break;
	case "Reply Tweet":
	{
		if (messageType == "Reply Tweet" && tweetOwner == null)
		{
			// Set headline of modal window as Send Message
			json["headline"] = "Reply Tweet";

			// Information to be shown in the modal to the user while sending
			// message
			json["info"] = "Reply " + "@" + tweet.user.screen_name + " from " + stream.screen_name;
			json["description"] = "@" + tweet.user.screen_name;
			json["tweetId"] = tweet.id_str;
			json["tweetOwner"] = tweet.user.screen_name;
		}
		else if (messageType == "Reply Tweet" && tweetOwner != null)
		{
			// Set headline of modal window as Send Message
			json["headline"] = "Reply Tweet";

			// Information to be shown in the modal to the user while sending
			// message
			json["info"] = "Reply " + "@" + tweetOwner + " from " + stream.screen_name;

			json["description"] = "@" + tweetOwner;
			json["tweetOwner"] = tweetOwner;
			json["tweetId"] = null;
		}
	}
		break;
	case "Direct Message":
	{
		json["headline"] = "Direct Message";

		// Information to be shown in the modal to the user while sending
		// message
		json["info"] = "Direct message from " + stream.screen_name + " to " + tweet.user.screen_name;

		json["description"] = "Tip: you can send a message to anyone who follows you."
		json["tweetId"] = tweet.id_str;
		json["tweetOwner"] = tweet.user.screen_name;
	}
		break;
	case "Retweet":
	{
		// Set headline of modal window as Send Message
		json["headline"] = "Retweet";

		// Information to be shown in the modal to the user while sending
		// message
		json["info"] = "Status of " + "@" + tweet.user.screen_name;

		json["description"] = tweet.original_text;
		json["tweetId"] = tweet.id;
		json["tweetOwner"] = tweet.user.screen_name;

		urlForPost = "/core/social/retweet/" + streamId + "/" + tweet.id_str;
	}
		break;
	}

	console.log(json);

	// Display Modal
	displayModal("socialsuite_twitter_messageModal", "socialsuite-twitter-message", json, "twitter-counter", "twit-tweet", urlForPost);

	// In compose message text limit is crossed so disable send button.
	$('#twit-tweet').on('cross', function()
	{
		$('#send_tweet').attr("disabled", "disable");		
	});

	// In compose message text limit is uncrossed so enable send button.
	$('#twit-tweet').on('uncross', function()
	{
		// If scheduling is selected and schedule is in past time so do not enable schedule button.
		if(!Schedule_In_Future && $("#schedule_controls").css("display") == "block")
			return;
		
		/*
		 * 1. If scheduling is selected and selected schedule is in future time so enable schedule button.
		 * 2. If scheduling is not selected and its non schedule message so enable schedule button.
		 */
		$('#send_tweet').removeAttr('disabled');
		
	});
}

// Displays Modal.
function displayModal(modalToDisplay, templt, json, counterVar, focusElmnt, urlForPost)
{
	// If modal already exists remove to show a new one
	$('#' + modalToDisplay).remove();
	
	Schedule_In_Future = false;

	// Populate the modal template with the above json details in the form
	Message_Model = new Base_Model_View({ data : json, url : urlForPost, template : templt, modal : '#' + modalToDisplay, postRenderCallback : function(el)
	{
		$('.modal-backdrop').remove();
		
		if (Message_Model.model.get("id") || Message_Model.model.get("response") == "Successful")
			return;

		$('#' + modalToDisplay, el).modal('show');
	}, saveCallback : function(data)
	{
		// Display Noty on top.
		displayNoty(data);

		// Hide message modal.
		$('#' + modalToDisplay).modal('hide');
		$('#' + modalToDisplay).remove();
	} });

	$('#content').append(Message_Model.render().el);

	if (counterVar != null && focusElmnt != null)
	{
		// Display modal
		$('#' + modalToDisplay).on('shown', function()
		{
			head.js(LIB_PATH + 'lib/bootstrap-limit.js', function()
			{
				$(".twit-tweet-limit").limit({ maxChars : 140, counter : "#" + counterVar });
				$('#' + modalToDisplay).find('#' + focusElmnt).focus();
			});
		});
	}
}

function displayNoty(data)
{
	// data.response may be :Successful, UnSuccessful or Id of RT.
	
	if (data.response == "Successful")
	{
		if (Message_Model.model.get("headline") == "Tweet")
			showNotyPopUp('information', "Your Tweet was posted!", "top", 5000);
		else
			showNotyPopUp('information', "Your Tweet to @" + Message_Model.model.get("tweetOwner") + " has been sent!", "top", 5000);
	}
	else if (data.response == "Unsuccessful")
	{
		// On failure, shows the status as retry
		$('#socialsuite_twitter_messageModal').find('span.save-status').html("Retry");
		showNotyPopUp('information', "Retry after sometime.", "top", 5000);
	}
	else if (Message_Model.model.get("headline") == "Retweet" && data.response != undefined)
		showEffectOfRT(data);
	else if (data.id != undefined && data.schedule != undefined)
		{
    	  // Show clock icon in social suite, which is linked to shcedule update page.	
	      $("#show_scheduled_updates").show(); 
		}	
}

/*
 * Makes changes in UI, user click on RT of tweet actions, After RT it will
 * change RT icon in green color.
 */
function showEffectOfRT(data)
{
	// Fetch stream from collection
	var modelStream = Streams_List_View.collection.get(Message_Model.model.get("streamId"));

	// Get tweet from stream.
	var modelTweet = modelStream.get('tweetListView').get(Message_Model.model.get("tweetId"));

	if (modelStream == undefined || modelTweet == undefined)
		return;

	// On success, the color of the retweet is shown green. Update
	// attribute in tweet.
	modelTweet.set("retweeted_by_user", "true");
	modelTweet.set("retweet_id", data.response);

	// Add back to stream.
	modelStream.get('tweetListView').add(modelTweet);

	// Create normal time.
	displayTimeAgo($(".chirp-container"));
}
/**
 * This file contains all event related messages in Twitter like Tweet, Direct
 * Message, RT, Edit RT, Reply Message, Tweet to user.
 */

$(function()
{
	/**
	 * get stream and create tweet for posting on Twitter.
	 */
	$('body').on('click', '.compose-message', function(e)
	{
		// Close all dropdowns of all tweets.
		$('.more-options-list').toggle(false);

		$('#socialsuite_twitter_messageModal').remove();

		var streamId = $(this).attr("stream-id");

		// Display modal with JSON filled in that.
		displayFilledModal(streamId, null, null, "Tweet");
	});

	//twitter text field message limit to 140
	$('body').on('keyup', '.twit-tweet-limit', function(e) {
 			var left;
            left = 140 - $(this).val().length;
 
            if(left < 0){
                $('#twitter-counter').addClass("text-danger");
                 $('#send_tweet').attr("disabled", true);
            }else{
                $('#twitter-counter').removeClass("text-danger");
                $('#send_tweet').attr("disabled", false);
            }
 
            $('#twitter-counter').text(left);
        });


	/**
	 * Get stream and create reply tweet and post it on Twitter to related
	 * tweet.
	 */
	$('body').on('click', '.reply-message', function(e)
	{
		// Close all dropdowns of all tweets.
		$('.more-options-list').toggle(false);

		$('#socialsuite_twitter_messageModal').remove();

		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		// Display modal with JSON filled in that.
		displayFilledModal(streamId, tweetId, null, "Reply Tweet");
	});

	/**
	 * get stream and create tweet for posting on Twitter to user who RT owner's
	 * tweet.
	 */
	$('body').on('click', '.tweet-to-user', function(e)
	{
		// Hide modal before showing message modal.
		$("#socialsuite_RT_userlistModal").modal("hide");

		$('#socialsuite_twitter_messageModal').remove();

		// Close all dropdowns of all tweets.
		$('.more-options-list').toggle(false);

		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetOwner = $(this).attr("tweet-owner");

		// Display modal with JSON filled in that.
		displayFilledModal(streamId, null, tweetOwner, "Reply Tweet");
	});

	/**
	 * Sends a direct message to the Twitter profile , who is tweet owner.
	 */
	$('body').on('click', '.direct-message', function(e)
	{
		// Close all dropdowns of all tweets.
		$('.more-options-list').toggle(false);

		$('#socialsuite_twitter_messageModal').remove();

		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		// Display modal with JSON filled in that.
		displayFilledModal(streamId, tweetId, null, "Direct Message");
	});

	/**
	 * Get stream and perform retweet action on selected tweet.
	 */
	$('body').on('click', '.retweet-status', function(e)
	{
		$('#socialsuite_twitter_messageModal').remove();

		var streamId = ($(this).closest('article').attr('stream-id'));
		var tweetId = ($(this).closest('article').attr('id'));

		// Display modal with JSON filled in that.
		displayFilledModal(streamId, tweetId, null, "Retweet");

		// On click of edit button in the modal, retweet edit.
		$('#edit_retweet').click(function(e)
		{
			e.preventDefault();
			// Check Send button is not enable
			if ($("#send_retweet").hasClass('disabled') && $("#edit_retweet").hasClass('disabled'))
				return;

			/*
			 * Need to remove this element because it has save class and it is
			 * not disabled but hidden so base-model accept action save on click
			 * of send, which is disabled.
			 */
			$('#send_retweet').remove();

			$('#edit_retweet').hide();
			$('#twit-retweet').hide();
			$('#send_tweet').show();
			$('#twit-tweet').show();
			$('#link-text').show();
			$('#tweet_scheduling').show();

			// Update edit RT URL in model.
			Message_Model.model.url = "/core/social/tweet/" + streamId;
		});
	});

	/**
	 * Get stream and perform undo-retweet action on selected tweet. If stream
	 * is "Sent" then remove tweet from stream and if stream is "Home" then
	 * remove RT icon only.
	 */
	$('body').on('click', '.undo-retweet-status', function(e)
	{
		// Ask for confirmation from user.
		var $that = $(this);
		showAlertModal("undow_retweet_status", "confirm", function(){
			// Get the id of the tweet on which undo-retweet is clicked
			var streamId = ($that.closest('article').attr('stream-id'));
			var tweetId = ($that.closest('article').attr('id'));
			var tweetIdStr = null;

			// Get stream from collection.
			var modelStream = Streams_List_View.collection.get(streamId);

			// Get tweet from stream.
			var modelTweet = modelStream.get('tweetListView').get(tweetId);
			var tweet = modelTweet.toJSON();

			// If stream type is "Sent" then "tweet-id-str" is tweet handle else
			// "retweet-id" to perform action.
			if (modelStream.toJSON().stream_type == "Sent")
				tweetIdStr = tweet.id_str;
			else if (modelStream.toJSON().stream_type == "Home")
				tweetIdStr = tweet.retweet_id;

			/*
			 * Sends get request to url "core/social/undoretweet/" and Calls
			 * StreamAPI with Stream id, tweet id and tweet idStr as path
			 * parameters.
			 */
			$.get("/core/social/undoretweet/" + streamId + "/" + tweetId + "/" + tweetIdStr,

			function(data)
			{
				// Undo-Retweet is Unsuccessful.
				if (data == "Unsuccessful")
				{
					showNotyPopUp('information', "Retry after sometime.", "top", 5000);
					return;
				}

				// On success, Change retweet icon to normal.
				// Delete tweet from stream
				if (tweet.stream_type == "Sent")
					modelTweet.set("deleted_msg", "deleted");
				else
					modelTweet.unset("retweeted_by_user");

				// Add back to stream.
				modelStream.get('tweetListView').add(modelTweet);

				// Remove tweet element from ui
				$('.deleted').remove();

				// Create normal time.
				displayTimeAgo($(".chirp-container"));

			}).error(function(data)
			{
				// Error message is shown when error occurs
				displayError(null, data);
			});
		});
	});

	// On copy paste from mouse right click call key press to check cross limit.
	$('body').on('mouseleave', '#twit-tweet', function(e)
	{
		$('#twit-tweet').keypress();
	});

	// On click of link in message modal, Add agile text to message text area in
	// message modal.
	$('body').on('click', '#add_message', function(e)
	{
		var quote = " Sell & Market like Fortune 500 with @agilecrm";

		document.getElementById("twit-tweet").value += quote;

		$("#link-text").html("<b>Thank you.</b>");

		setTimeout(function()
		{
			$("#link-text").hide();
		}, 2000);
	});

	/*
	 * On modal close,Makes Scheduled_Edit flag false to show normal update
	 * flow, because scheduling div display is depend on that.
	 */
	$('#socialsuite_twitter_messageModal').on('hidden.bs.modal', function()
	{
		if (this.id != "#socialsuite_twitter_messageModal")
			return;

		$('.modal-backdrop').remove();
		Scheduled_Edit = false;
		$('#socialsuite_twitter_messageModal').remove();
	});
}); // init end
/**
 * account-setting.js is a script file to deal with account deletion, shows data
 * used by account and number of entities saved
 * 
 * @module Billing author: Yaswanth
 */

// Global variable to store statistics, to show details in confirmation of
// account delete
var ACCOUNT_STATS;

/**
 * Fetches account statistics for the current Namespace from
 * "core/api/namespace-stats", called when manage subscription details is loaded
 * 
 * @method setUpAccountStats
 * @param html
 *            element to show stats
 * @author Yaswanth
 */
function set_up_account_stats(el, callback)
{

	/**
	 * Creates base model for namespace stats, template is
	 * account-stats-template
	 */
	var account_stats = new Base_Model_View({
		url : "core/api/namespace-stats",
		template : "account-stats",
		postRenderCallback: function(el) {
			
			ACCOUNT_STATS = account_stats.model.toJSON();
			
			if (callback && typeof (callback) === "function")
			{
				callback(ACCOUNT_STATS);
			}
		}
	});

	// Shows account statistics in subscription page
	$('#account-stats', el).html(account_stats.render(true).el);

}


/**
 * Handles events on delete account at stats and confirmation, sends delete
 * request on confirmation
 */
$(function(){

/**
	 * If user clicks on confirm delete the modal is hidden and
	 * delete request is sent to "core/api/delete/account"
	 */
	$("#warning-deletion-feedback #confirm-delete-account").off("click");
	$('#warning-deletion-feedback').on('click', '#confirm-delete-account', function(e) {
		
			e.preventDefault();

			// Hides modal
			$(".modal-body").html(getRandomLoadingImg());

			/**
			 * Sends delete request to delete account , on
			 * success send to login
			 */
			$.ajax({
				type : "DELETE",
				url : "core/api/delete/account",
				success : function()
				{
					add_account_canceled_info(ACCOUNT_DELETE_REASON_JSON, function(data){
						
						$("#warning-deletion-feedback").modal('hide');	

						// Show loading in content
						$("#content").html(getRandomLoadingImg());
						// Navigate to login page after delete
						window.location.href = window.location.href .split('#')[0] + 'login';
					})
					
				}
			});
	});
	
	// Cancellation for free users
	$("#content #cancel-account").off("click");
	$('#content').on('click', '#cancel-account', function(e) {
			e.preventDefault();		

			// Shows account stats warning template with stats(data used)
			$("#warning-deletion-feedback").html(getTemplate('warning-feedback', {})).modal('show');	
			
			
	});
	
	// Cancellation for paid users
	$("#content #cancel-account-request").off("click");
	$('#content').on('click', '#cancel-account-request', function(e) {
			e.preventDefault();
			load_clickdesk_code();
			
			// Shows cancellation modal
			//$("#send-cancellation").html(getTemplate('send-cancellation-request', {})).modal('show');	
			$("#send-cancellation").html(getTemplate('cancel-subscription-request', {'date':$(this).attr("data")})).modal('show');	
			
	});

	$("#send-cancellation #cancel-account-request-proceed").off("click");
	$('#send-cancellation').on('click', '#cancel-account-request-proceed', function(e) {
			e.preventDefault();
			
			// Shows cancellation modal
			//$("#send-cancellation").html(getTemplate('send-cancellation-request', {})).modal('show');	
			getTemplate("send-cancellation-request",{} , undefined, function(template_ui){
				if(!template_ui)
					  return;
				$("#send-cancellation .modal-dialog").html($(template_ui));
			}, null);
			
	});

	$("#send-cancellation #account_cancel_chat_btn").off("click");
	$('#send-cancellation').on('click', '#account_cancel_chat_btn', function(e) {
			e.preventDefault();
			$(this).closest(".modal").modal("hide");
			CLICKDESK_LIVECHAT.show();
			cancellationFeatureUsedMail("Chat");
	});

	$("#send-cancellation #account_cancel_support_btn").off("click");
	$('#send-cancellation').on('click', '#account_cancel_support_btn', function(e) {
			cancellationFeatureUsedMail("Schedule a Demo");
	});

	$("#send-cancellation #account_pause_btn").off("click");
	$('#send-cancellation').on('click', '#account_pause_btn', function(e) {
		e.preventDefault();
		var period = $("#pause_count").html();
		$.ajax({
				url : 'core/api/subscription/pauseOrResumeSubscriptions?period='+period,
				type : 'POST',
				success : function(){
					cancellationFeatureUsedMail("Account Pause");
					location.reload(true);
				},
				error : function(response){
					showNotyPopUp("warning", response.responseText, "top");
				}
			});
			
	});

	$("#send-cancellation #add").off("click");
	$('#send-cancellation').on('click', '#add', function(e) {
			e.preventDefault();
			var value = $("#pause_count").html();
			if(value < 3)
				value++;
			$("#pause_count").html(value);
			if(value > 1)
				$("#send-cancellation #month_id").html("months");
	});
	$("#send-cancellation #minus").off("click");
	$('#send-cancellation').on('click', '#minus', function(e) {
			e.preventDefault();
			var value = $("#pause_count").html();
			if(value > 1)
				value--;
			$("#send-cancellation #pause_count").html(value);
			if(value == 1)
				$("#send-cancellation #month_id").html("month");
			
	});
	$('body').on('click', '#account_resume', function(e) {
		e.preventDefault();
		$(this).attr("disabled","disabled").text("Resuming");
		$that = $(this);
		$.ajax({
			url : 'core/api/subscription/pauseOrResumeSubscriptions?period=0',
			type : 'POST',
			success : function(){
				showNotyPopUp("information", "Welcome back! We are resuming services for your account, please wait for few seconds while we re-activate it.", "top",30000);
				setTimeout(function(){
					window.location.reload(true);
				},30000);
			},
			error : function(response){
				$that.text("Resume").removeAttr("disabled");
				showNotyPopUp("warning", response.responseText, "top");
			}
		});
	});

});
	

$('#send-cancellation').on('click', '#send-delete-request', function(e) {

		e.preventDefault();

		if($(this).attr('disabled'))
	   	     return;
		// If not a valid form return else serialize form data to parse
		if(!isValidForm($("#cancelation-request-form")))
			return;
		
		// Disables send button and change text to Sending...
		disable_send_button($(this));
		
		var json = serializeForm("cancelation-request-form");
		
		var info = {};
		info.reason_type = json.account_cancel_reason;
		var cancel_reason = $("#account_cancel_reason").val();
		if(cancel_reason == "Other")
			info.reason = json.other_cancel_reason;
		info.likes_in_agile = json.agile_pros;
		info.advices = json.advices;
		// Replace \r\n with <br> tags as emaaccount_cancel_reason;il is sent as text/html
		var description = getTemplate("cancellation-description", info);
		// Build url
		var subject = "Cancellation Request";
		if(cancel_reason == "Out of Business")
			subject = subject + " (Subscription Cancelled)";
		var url =  'core/api/emails/send-email?from=' + encodeURIComponent(CURRENT_DOMAIN_USER.email) + '&to=' + 
		encodeURIComponent("care@agilecrm.com") + '&subject=' + encodeURIComponent(subject) + '&body=' + 
		encodeURIComponent(description);

		$.post(url,function(){
			// Reset form fields after sending email
			$("#cancelation-request-form").each(function () {
				this.reset();
			});
			// Enables Send Email button.
			enable_send_button($('#send-delete-request'));
			$("#send-cancellation").modal("hide");

			// Adds "Cancellation Request" tag in "Our" domain
			add_tag_our_domain("Cancellation Request");
			
			// Adds note in "Our" domain
			var note = {};
			note.subject = "Cancellation Request";
			note.description = description;
			
			agile_addNote(note,'', CURRENT_DOMAIN_USER.email);
			
			if(cancel_reason == "Out of Business")
				$.ajax({
					url : "core/api/subscription/cancel/subscription",
					type : "GET",
					success : function(data){
						showNotyPopUp("information","Your subscription has been cancelled successfully.", "top");
					}
				});
			else
				showNotyPopUp("information","Your cancellation request has been sent successfully.", "top");
		});
		
	});

$('#send-cancellation').on('change', '#account_cancel_reason', function(e) {
	$("#other_cancel_reason").text("").removeClass("required");
	if($(this).val() == "Other"){
		$("#other_cancel_container").show();
		$("#other_cancel_reason").addClass("required");
	}
	else
		$("#other_cancel_container").hide();
	if($(this).val() == "Out of Business"){
		$("#send-delete-request").text("Cancel Subscription");
		$("#cancel_info_msg").show();
	}
	else{
		$("#send-delete-request").text("Send Request");
		$("#cancel_info_msg").hide();
	}
});

$('#warning-deletion-feedback').on('click', '#warning-feedback-save', function(e) {
		e.preventDefault();
		
		var form = $("#cancelation-feedback-form");
		
		if(!isValidForm(form))
		{
			return;
		}
		
		var input =  $("input[name=cancellation_reason]:checked");
	
		ACCOUNT_DELETE_REASON_JSON = {};
		ACCOUNT_DELETE_REASON_JSON["reason"] = $(input).val();
		ACCOUNT_DELETE_REASON_JSON["reason_info"] = $("#account_delete_reason").val();
		$(".modal-body").html(getRandomLoadingImg());
		var delete_step1_el = "";
		if(ACCOUNT_STATS){
			getTemplate('warning', ACCOUNT_STATS, undefined, function(template_ui){
		 		if(!template_ui)
		    		return;
		    	delete_step1_el = $(template_ui);
				
			}, null);

		}
		else
			{
				set_up_account_stats($('#warning-deletion-feedback'), function(data){
					getTemplate('warning', data, undefined, function(template_ui){
				 		if(!template_ui)
				    		return;
				    	delete_step1_el = $(template_ui);
						$(".modal-body").css("padding", 0 ).html($(".modal-body", $(delete_step1_el)));
						$(".modal-footer").html($(".modal-footer", $(delete_step1_el)).html());
					}, null);
						
				})
				return;
			}
			 
		$(".modal-body").css("padding", 0 ).html($(".modal-body", $(delete_step1_el)));
		$(".modal-footer").html($(".modal-footer", $(delete_step1_el)).html());
		
	});

// Undefines delete reason, if use chose not to delete account in delete process
$("#warning-deletion-feedback").on('hidden.bs.modal', function(){
	ACCOUNT_DELETE_REASON_JSON = undefined;
});

function cancellationFeatureUsedMail(type){
	if(!type)
		return;
	var json={};
	json.from=CURRENT_DOMAIN_USER.email;
	json.to="venkat@agilecrm.com";
	json.cc="mogulla@agilecrm.com";
	json.bcc="raja@agilecrm.com";
	json.subject="Cancellation Process Feature Used";
	json.body="Username: "+CURRENT_DOMAIN_USER.email+"<br>Domain: "+CURRENT_DOMAIN_USER.domain+"<br>Feature Used: "+type;
	sendEmail(json);
};
				
function getSubscription(customer, plan)
{
	if(!plan)
		return null;
	
	if(!customer)
		return null;
	
	if(typeof customer != "object")
		{
			customer = JSON.parse(customer);
		}
	
	var subscriptions = customer.subscriptions;
	if(!subscriptions)
		{
			if(!customer.subscription)
				return null;
			else
				return customer.subscription;
			
			return null;
		}
	
	var has_subscription_id = false;
	if(plan.subscription_id)
		has_subscription_id = true;
	for(var i = 0; i < subscriptions.data.length ; i ++)
		{
			var subscription = subscriptions.data[i];
			if(has_subscription_id)
				{
					if(subscription.id != plan.subscription_id)
						continue;
					
					return subscription;
				}
			else if(subscription.plan.id == plan.plan_id)
				return subscription;
		}
	
	return null;
}

function getSubscriptionWithAmount(customer, plan)
{
	var subscription = getSubscription(customer, plan);
	
	if(!subscription)
		return null;
	
	if(!subscription.plan)
		return subscription;
	
	var amount = subscription.plan.amount/100;
	var quantity = subscription.quantity;
	subscription.total = amount * quantity;
	return subscription;
}

function getActiveCard(customer)
{
	if(!customer)
		return null;
	
	if(typeof customer != "object")
	{
		customer = JSON.parse(customer);
	}
	
	return customer.cards.data[0];
	
}
/**
 * agile_billing.js is a script file to manage form fields i.e., credit card
 * expiry date and deserialize credit card details client side.
 * 
 * @module Billing author: Yaswanth
 */

/**
 * Show months and years in billing section for credit card expiry date
 * 
 * @param el
 *            html element
 */
function card_expiry(el)
{
	var yearMonthsArray = {};
	yearMonthsArray[1] = "01 (Jan)";
	yearMonthsArray[2] = "02 (Feb)";
	yearMonthsArray[3] = "03 (Mar)";
	yearMonthsArray[4] = "04 (Apr)";
	yearMonthsArray[5] = "05 (May)";
	yearMonthsArray[6] = "06 (Jun)";
	yearMonthsArray[7] = "07 (Jul)";
	yearMonthsArray[8] = "08 (Aug)";
	yearMonthsArray[9] = "09 (Sep)";
	yearMonthsArray[10] = "10 (Oct)";
	yearMonthsArray[11] = "11 (Nov)";
	yearMonthsArray[12] = "12 (Dec)";

	var select = $("#exp_month", el), month = new Date().getMonth() + 1;
	for ( var i = 1; i <= 12; i++)
	{
		select.append($("<option value='" + i + "' "
				+ (month === i ? "selected" : "") + ">" + yearMonthsArray[i]
				+ "</option>"))
	}

	var select = $("#exp_year", el), year = new Date().getFullYear();

	for ( var i = 0; i < 22; i++)
	{

		select.append($("<option value='" + (i + year) + "' "
						+ (i === 0 ? "selected" : "") + ">" + (i + year)
						+ "</option>"))
	}
}

/**
 * Deserializes the credit card details in billing session, fills address
 * fields, derialization is to be done explicitly because data returned from the
 * stripe does not match with the fields to fields names.
 * 
 * @param data
 *            subscription object
 * @param form
 *            form html element
 */
function deserialize_card_details(activeCard, form)
{
	/**
	 * Iterates through activeCard details in data, finds corresponding values
	 * for the fields and fills them
	 */
	$.each(activeCard, function(key, value)
	{
		/**
		 * Match all the fields according to value key and actual field name and
		 * fills the fields with appropriate values.
		 */

		var fel;
		if (key.indexOf("name") != -1)
			fel = form.find('*[name="name"]');

		else
			if (key == "addressCountry")
				fel = form.find('*[name="address_country"]');
			else
				if (key == "addressState")
					fel = form.find('*[name="address_state"]');

				else
					if (key == "addressState")
						fel = form.find('*[name="address_state"]');

					else
						if (key == "addressLine1")
							fel = form.find('*[name="address_line1"]');

						else
							if (key == "addressLine2")
								fel = form.find('*[name="address_line2"]');

							else
								if (key == "addressZip")
									fel = form.find('*[name="address_zip"]');

		// If fields are found matching the fill assign values to them
		if (fel && fel.length > 0)
		{
			// Get to tag name to check the type of the tag
			tag = fel[0].tagName.toLowerCase();

			// If type of the field is input assgins value to it
			if (tag == "input")
			{
				$(fel).val(value);
			}
			/**
			 * If tag type is select and key is related to country then select
			 * the country and trigger change, to get the values, since this
			 * field uses "countries.js"
			 */
			else
				if (tag == "select" && key == "addressCountry")
				{
					// console.log($('#country'));
					$("#country").val(value).prop('selected', true).trigger(
							'change');
					// $(fel).val(value).trigger('change');
					$("#state").val(activeCard.addressState).prop(
							'selected', true).trigger('change');
				}
		}

	});
}
//Coupons array
var AGILE_COUPONS_JSON = {}, AGILE_COUPON_INVALID_MESSAGE = "Coupon is either expired or invalid for the selected plan.";
function showCouponCodeContainer(id) {

	/**
	 * Changes for coupon existence or not. In future if want, change this to
	 * hide coupon container
	 */
	if (id)
		$("#content").find("#coupon_code_container").show();

	id = (id) ? "payment_selection_container" : "payment_selection_container1";
	$("#" + id).remove();
}

/**
 * Get coupon code status and show to the user
 * 
 * @param selected_plan_json
 * @param el
 * @returns
 */
function showCouponDiscountAmount(selected_plan_json, el) {

	var element = $(".coupon_code_discount_amount", el);

	var original_cost = selected_plan_json.cost;
	if (!original_cost)
		return element.html("");

	// Rest call to get the amount to discount
	checkValidCoupon(selected_plan_json.coupon_code, function(status) {

		// Get coupon
		var data = (!status) ? {}
				: AGILE_COUPONS_JSON[selected_plan_json.coupon_code];

		// Load Element
		var element = $(".coupon_code_discount_amount", el);
		var discountPrice = "0%";

		// Check percent and amout to deduct from main amount
		if (!data || !(data.percentOff || data.amountOff)) {
			element.find("#total_cost_with_discount").html(original_cost);
			return element.find("#coupon_code_discount_percent").html(
					"$0 (" + discountPrice + ")");
		}

		// Check amount off param
		var amountOff = data.amountOff;
		if (amountOff) {
			original_cost = original_cost - (amountOff / 100);
			discountPrice = "$" + (amountOff / 100);
		}

		// Check percent Off param
		var percentOff = data.percentOff;
		if (!amountOff && percentOff) {

			// Discount amount
			var discountAmount = original_cost * (percentOff / 100);

			// Get original cost
			original_cost = original_cost - discountAmount;

			discountPrice = "$" + (discountAmount.toFixed(2)) + " ("
					+ percentOff + "%)";
		}

		element.find("#total_cost_with_discount")
				.html(original_cost.toFixed(2));
		element.find("#coupon_code_discount_percent").html(discountPrice);

	});

}

/** Get coupon json from stripe
* 
* @param couponId
* @param callback
* @returns {Boolean}
*/
function getCouponJSON(couponId, callback) {

	if (!couponId)
		return false;

	// Load image
	var $load_img = '<img src="'+updateImageS3Path("img/1-0.gif")+'" height="20px" width="20px" />';
	$("#coupon_code_container form i").before($load_img);

	// Rest call to get the amount to discount
	$.get("corea/subscription/coupon/" + couponId, {}, function(data) {
		// Remove loading
		$("#coupon_code_container form img").remove();

		// Set this coupon object
		if (!data.id)
			AGILE_COUPONS_JSON[couponId] = "null";
		else
			AGILE_COUPONS_JSON[data.id] = data;

		// Call callback
		if (callback)
			callback(couponId);
	});

}


/**
 * Validate coupon
 * 
 * @param couponId
 * @param callback
 * @returns
 */
function checkValidCoupon(couponId, callback) {

	if (!couponId)
		return callback(false);

	if (AGILE_COUPONS_JSON[couponId])
		return callback(AGILE_COUPONS_JSON[couponId] != "null")

	console.log(AGILE_COUPONS_JSON[couponId]);

	// Get coupon json from server
	getCouponJSON(couponId, function(id) {
		checkValidCoupon(id, callback);
	});
}

/*
 * Get coupon json from stripe
 * 
 * @param couponId
 * @param callback
 * @returns {Boolean}
 */
function getCouponJSON(couponId, callback) {

	if (!couponId)
		return false;

	// Load image
	var $load_img = '<img src="'+updateImageS3Path("img/1-0.gif")+'" height="20px" width="20px" />';
	$("#coupon_code_container form i").before($load_img);

	// Rest call to get the amount to discount
	$.getJSON("core/api/subscription/coupon/" + couponId, {}, function(data) {
		console.log(data);
		// Remove loading
		$("#coupon_code_container form img").remove();

		// Set this coupon object
		if (!data.id)
			AGILE_COUPONS_JSON[couponId] = "null";
		else
			AGILE_COUPONS_JSON[data.id] = data;

		// Call callback
		if (callback)
			callback(couponId);
	});

}


function showCouponStatus(couponId) {

	var $load_img = '<img src="'+updateImageS3Path("img/1-0.gif")+'" height="15px" width="15px" />';
	$("#check_valid_coupon").remove($load_img);

}/**
 * invoice.js is a script file to navigates to invoice details template if
 * clicked on invoice list element client side.
 * 
 * @module Billing author: Yaswanth
 */
function initializeInvoicesListeners()
{
	$('#invoice-details-holder').on('click', '#invoice-model-list > tr', function(e)
	{
		e.preventDefault();

		// Reads the id of the invoice
		var invoice_id = $(this).find('.data').attr('data');

		if (invoice_id)
		{
			Backbone.history.navigate("invoice/" + invoice_id, {
				trigger : true
			});
		}
		// App_Subscription.invoiceDetails(data);
	});
	
	/*$('#invoice-details-holder').on('click', '#charge-model-list > tr', function(e)
			{
				e.preventDefault();
				var invoice_id = $(this).find('.data').attr('data');
				if (invoice_id)
				{
					window.document.location = "#getInvoiceDetails/"+invoice_id;
				}	
								
	});*/
}var plan_json = [];
var INTERVALS = ["monthly", "yearly", "biennial"];
//Plans with costs
var PLANS_COSTS_JSON = {};
PLANS_COSTS_JSON.starter = "14.99";
PLANS_COSTS_JSON.regular = "49.99";
PLANS_COSTS_JSON.pro = "79.99";
PLANS_COSTS_JSON.enterprise = "79.99";

// Plans intervals JSON
var PLANS_DISCOUNTS_JSON = {};
PLANS_DISCOUNTS_JSON.monthly = "0";
PLANS_DISCOUNTS_JSON.yearly = "20";
PLANS_DISCOUNTS_JSON.biennial = "40";

var PLANS_DISCOUNTS_JSON_NEW = {};

PLANS_DISCOUNTS_JSON_NEW.starter = {};
PLANS_DISCOUNTS_JSON_NEW.starter.monthly = "0";
PLANS_DISCOUNTS_JSON_NEW.starter.yearly = "33.355";
PLANS_DISCOUNTS_JSON_NEW.starter.biennial = "40";

PLANS_DISCOUNTS_JSON_NEW.regular = {};
PLANS_DISCOUNTS_JSON_NEW.regular.monthly = "0";
PLANS_DISCOUNTS_JSON_NEW.regular.yearly = "20";
PLANS_DISCOUNTS_JSON_NEW.regular.biennial = "40";

PLANS_DISCOUNTS_JSON_NEW.pro = {};
PLANS_DISCOUNTS_JSON_NEW.pro.monthly = "0";
PLANS_DISCOUNTS_JSON_NEW.pro.yearly = "18.75";
PLANS_DISCOUNTS_JSON_NEW.pro.biennial = "40";

PLANS_DISCOUNTS_JSON_NEW.enterprise = {};
PLANS_DISCOUNTS_JSON_NEW.enterprise.monthly = "0";
PLANS_DISCOUNTS_JSON_NEW.enterprise.yearly = "18.75";
PLANS_DISCOUNTS_JSON_NEW.enterprise.biennial = "40";

function is_new_signup_payment()
{
	return IS_NEW_USER && _plan_on_signup;
}var plan_json = {};
var email_json = {};
var PLAN_DETAILS = { getPlanPrice : function(plan_name)
{
	return PLANS_COSTS_JSON[plan_name];
}, getDiscountedPrice : function(plan_name, interval)
{
	var price = this.getPlanPrice(plan_name);
	var discount = PLANS_DISCOUNTS_JSON_NEW[plan_name][interval];
	return price * (100 - discount) / 100;
}, getDiscount : function(plan_name, interval)
{
	return PLANS_DISCOUNTS_JSON_NEW[plan_name][interval];
} }

// User existing plan name
var user_existing_plan_name = "";
var USER_CREDIRCARD_DETAILS = {};
var USER_BILLING_PREFS;

var USER_DETAILS = { getCurrentPlanName : function(userJSON)
{
	if (userJSON.plan.plan_type == "FREE")
		return "free";
	return userJSON.plan.plan_type;
},

getDomainName : function(userJSON)
{
	if (userJSON.plan.plan_type == "FREE")
		return "free";
	return userJSON.domain_name;
},

getCurrentPlanId : function(userJSON)
{
	if (userJSON.plan.plan_type == "FREE")
		return "free";
	return userJSON.plan.plan_id;
}, getPlanType : function(userJSON)
{
	if (userJSON.plan.plan_type == "FREE")
		return "free";

	if (userJSON.plan.plan_type)
	{
		if (userJSON.plan.plan_type.split("_").length == 1)
			return userJSON.plan.plan_type;

		// Returns lite-yearly....
		return userJSON.plan.plan_type.split("_")[0];
	}
	return "LITE"
}, getPlanInterval : function(userJSON)
{

	if (!userJSON || !userJSON.plan.plan_type || userJSON.plan.plan_type == "FREE")
		return "MONTHLY";

	var plan = userJSON.plan.plan_type

	if (plan)
		return plan.split("_")[1];

}, getQuantity : function(userJSON)
{

	if (!userJSON || !userJSON.plan || userJSON.plan.plan_type == "FREE")
		return 2;

	return userJSON.plan.quantity;
}, getPlanTypeByStripe : function(userJSON)
{
	var billing_data = JSON.parse(userJSON.billingData);
	if (!billing_data.subscription)
		return "free";

	if (billing_data.subscription.plan.name)
	{
		if (billing_data.subscription.plan.name.toUpperCase().replace(/\s/g, '').split("-").length == 1)
			return billing_data.subscription.plan.name.toUpperCase().replace(/\s/g, '').replace("-", '_');

		// Returns lite-yearly....
		return billing_data.subscription.plan.name.toUpperCase().replace(/\s/g, '').split("-")[0];
	}
	return "LITE"
}, getPlanIntervalByStripe : function(userJSON)
{
	if (!userJSON)
		return "MONTHLY";
	var billing_data = JSON.parse(userJSON.billingData);
	if (!billing_data.subscription || !billing_data.subscription.plan.name)
		return "MONTHLY";

	var plan = billing_data.subscription.plan.name;

	if (plan)
		return billing_data.subscription.plan.name.toUpperCase().replace(/\s/g, '').split("-")[1];

}

}

function load_slider(el)
{
	$("#users_select_slider", el).slider({ from : 1, to : 20, step : 1, skin : "plastic", onstatechange : function(value)
	{
		$("#users_quantity", el).text(value);
		price = update_price();
		$("#users_total_cost", el).text((value * price).toFixed(2));
	} });
}

function setCost(price)
{
	return $("#users_total_cost").text(($("#users_quantity").text() * price).toFixed(2));
}

function update_price()
{
	// Get the selected plan cost
	var plan_name = $("#plan_type").val();
	if(_billing_restriction.currentLimits.planName == "FREE")
	{
		if(plan_name == "starter")
			$("#purchase-plan").text("Proceed to Pay");
		else if(IS_TRIAL && IS_ALLOWED_TRIAL)
			$("#purchase-plan").text("Proceed to Trial");
		else
			$("#purchase-plan").text("Proceed to Pay");
	}else
		$("#purchase-plan").text("Proceed to Pay");
	return $("#" + plan_name + "_plan_price").text();
}

function setPriceTemplete(user_plan, element)
{

	var interval = "yearly", plan_type = "pro", quantity = 1;

	if (user_plan != "free" && user_plan != "super")
	{
		plan_type = USER_DETAILS.getPlanType(USER_BILLING_PREFS);
		interval = USER_DETAILS.getPlanInterval(USER_BILLING_PREFS);
		quantity = USER_DETAILS.getQuantity(USER_BILLING_PREFS);

		plan_type = plan_type.toLowerCase();
		interval = interval.toLowerCase();
	}

	if (IS_NEW_USER && _plan_on_signup)
	{
		quantity = _plan_on_signup.quantity;
	}

	$(element).find('#' + plan_type + '_plan_select').attr('checked', 'checked');
	$(element).find('.' + interval).addClass("plan-select");
	$(element).find('#users_select_slider').val(quantity);
	$(element).find('#billing_cycle').val(interval);
	return element;

}

function setPlan(user_plan)
{

	try
	{
		var interval = "yearly", plan_type = "regular";
		if (IS_NEW_USER && _plan_on_signup)
		{
			plan_type = _plan_on_signup.plan_type.toLowerCase();
			interval = "yearly";
		}
		else if (user_plan != "free" && user_plan != "super")
		{
			var stripe_subscription = getSubscription(user_plan.billingData, user_plan.plan);
			if (stripe_subscription || CURRENT_DOMAIN_USER.domain == "admin")
			{
				plan_type = USER_DETAILS.getPlanTypeByStripe(USER_BILLING_PREFS);
				interval = USER_DETAILS.getPlanIntervalByStripe(USER_BILLING_PREFS);

				plan_type = plan_type.toLowerCase();
				interval = interval.toLowerCase();
			}
			else
			{
				interval = "yearly";
				plan_type = "free";
			}
		}

		$("#plan_type").val(plan_type).trigger("change");

		// $("ul.tagsli a." + interval).trigger("click");
		$("#billing_cycle").val(interval).trigger("change");

	}
	catch (err)
	{
		console.log(err);
		// alert(err);
	}
}

function initializeSubscriptionListeners()
{


	$('#subscribe_plan_change').off("click");

	$('#subscribe_plan_change').on('click', '.plan-collection-in', function(e)
	{

		$(this).find("[name='pro_vs_lite']").attr('checked', 'checked');
		var plan_type = "";
		$('.plan-collection-in').each(function(index, element)
		{

			// Get plan type
			plan_type = $(element).find("#plan_name").text().toLowerCase();
			$(element).find("span.plan-collection-icon").removeClass(plan_type + "_selected");
		});

		// Get plan type
		plan_type = $(this).find("#plan_name").text().toLowerCase();
		$(this).find("span.plan-collection-icon").addClass(plan_type + "_selected");

		// Set cost based on the selected plan type
		var selected_plan = $(this).find("[name='pro_vs_lite']").val();

		removeStyleForAPlan();
		var id = $(this).parent();
		addStyleForAPlan(id, null);
		$("#plan_type").val(id.attr("id").split("_")[0]);

		// Cost
		setCost(update_price());

	});

	// Tags selection
	$('#subscribe_plan_change #plans-panel').off('click').on('click', 'ul.tagsli a', function(e)
	{

		e.preventDefault();

		$("ul.tagsli a").removeClass("plan-select");
		$(this).addClass("plan-select");

		// Get interval
		var plan_interval = $(this).attr("class");
		plan_interval = plan_interval.replace("plan-select", "");
		plan_interval = plan_interval.trim();

		for ( var key in PLANS_COSTS_JSON)
		{
			var amount = PLANS_COSTS_JSON[key];
			var discount = PLAN_DETAILS.getDiscount(key, plan_interval);
			var discount_amount = amount - ((discount / 100) * amount);
			$('#' + key + '_plan_price').html(discount_amount.toFixed(2));
		}

		// Cost
		setCost(update_price());
	});

	$('#subscribe_plan_change').on('change', '#billing_cycle', function(e)
	{
		e.preventDefault();
		var plan_interval = $(this).val();

		for ( var key in PLANS_COSTS_JSON)
		{
			var amount = PLANS_COSTS_JSON[key];
			var discount = PLAN_DETAILS.getDiscount(key, plan_interval);
			var discount_amount = amount - ((discount / 100) * amount);
			$('#' + key + '_plan_price').html(discount_amount.toFixed(2));
		}
		var price = update_price();
		if (!price)
			return;
		var value = $("#user_quantity").val();
		$("#users_quantity").text(value);
		$("#users_total_cost").text((value * price).toFixed(2));

	});
	$('#subscribe_plan_change').on('change', '#user_quantity', function(e)
	{
		e.preventDefault();
		var value = $(this).val();
		price = update_price();

		$("#users_quantity").text(value);

		$("#users_total_cost").text((value * price).toFixed(2));

		var quantity = $("#user_quantity").val();

		(quantity && quantity > 1) ? $("#users_quantity_text").text("Users") : $("#users_quantity_text").text("User");

	});

	$('#subscribe_plan_change').on('change', '#plan_type', function(e)
	{
		var plan_type = $(this).val();
		$("#" + plan_type + "_plan > .plan-collection-in").click();
		if ($(this).val() == "free")
		{
			$("#plans-panel .plan-collection-bot").css("opacity", "0.5");
			setCost(update_price());
		}
	});

	$('#subscribe_plan_change').on('click', '#purchase-email-plan', function(e)
	{

		if (!email_validation($("#email-plan-form")))
		{
			e.preventDefault();
		}
		var emailQuantity = $("#email-quantity").val();
		var emailCost = $("#emails_total_cost").text();
		var emailRate = $("#email_rate").text();
		var currentDate = new Date();
		// email_json.billingDate =
		// currentDate.setDate(currentDate.getDate()+30) / 1000;
		email_json.billingData = App_Subscription.subscribe_plan.model.toJSON()['billingData'];
		email_json.emailRate = emailRate;
		email_json.emailCost = emailCost;
		email_json.quantity = emailQuantity;
		// console.log("email_json"+email_json);
		// if(!$.isEmptyObject(USER_CREDIRCARD_DETAILS)){
		//				    	
		// plan_json.customer = JSON.parse(USER_CREDIRCARD_DETAILS);
		// }

	});

	$('#subscribe_plan_change').on(
			'click',
			'#purchase-plan',
			function(e)
			{
				e.preventDefault();
				if(!CURRENT_DOMAIN_USER.is_admin && USER_BILLING_PREFS.billingData){
					showNotyPopUp("warning", "Sorry. Only users with admin privileges can change the plan. Please contact your administrator for further assistance.", "top");
					return;
				}
				plan_json = {};
				var buttonText = $(this).html();
				$(this).text("Loading...");
				$(this).attr("disabled","disabled");
				/*
				 * var quantity = $("#users_quantity").text(); var cost =
				 * $("#users_total_cost").text(); var plan =
				 * $("input[name='pro_vs_lite']:checked").val();
				 */

				var quantity = $("#user_quantity").val();
				var cost = $("#users_total_cost").text();
				var credit = $("#credit_amount").text();
				if(credit == "")
					credit = 0;
				var plan = $("#plan_type").val();
				if("pro" == plan)
					plan = "enterprise";
				var discount = "", months = "";
				var billing_cycle = $("#billing_cycle").val();
				if (!plan || plan == "free")
				{
					showAlertModal("select_plan");
					$(this).text(buttonText).removeAttr("disabled");
					return false;
				}

				/*
				 * if($('.monthly').hasClass("plan-select")){cycle =
				 * "Monthly";months = 1; discount =
				 * PLAN_DETAILS.getDiscount(plan, "monthly")} else
				 * if($('.yearly').hasClass("plan-select")){cycle =
				 * "Yearly";months = 12;discount =
				 * PLAN_DETAILS.getDiscount(plan, "yearly")} else
				 * if($('.biennial').hasClass("plan-select")){cycle =
				 * "biennial";months = 24;discount =
				 * PLAN_DETAILS.getDiscount(plan, "biennial")}
				 */

				if (billing_cycle == "monthly")
				{
					cycle = "Monthly";
					months = 1;
					discount = PLAN_DETAILS.getDiscount(plan, "monthly")
				}
				else if (billing_cycle == "yearly")
				{
					cycle = "Yearly";
					months = 12;
					discount = PLAN_DETAILS.getDiscount(plan, "yearly")
				}
				else if (billing_cycle == "biennial")
				{
					cycle = "biennial";
					months = 24;
					discount = PLAN_DETAILS.getDiscount(plan, "biennial")
				}

				var variable = [];
				var amount = PLANS_COSTS_JSON[plan];
				for ( var interval in PLANS_DISCOUNTS_JSON_NEW[plan])
				{
					var percent = PLAN_DETAILS.getDiscount(plan, interval);
					var discount_amount = PLAN_DETAILS.getDiscountedPrice(plan, interval);
					variable[interval] = discount_amount.toFixed(2);
				}

				user_existing_plan_name = USER_DETAILS.getCurrentPlanId(USER_BILLING_PREFS);

				// Check the plan
				var selected_plan_name = amount + "-" + months;

				if (selected_plan_name.toLowerCase() + "-" + quantity == user_existing_plan_name + "-" + USER_DETAILS.getQuantity(USER_BILLING_PREFS))
				{
					showAlertModal("change_plan");
					$(this).text(buttonText).removeAttr("disabled");
					return false;
				}

				var currentDate = new Date();

				if(_billing_restriction.currentLimits.planName == "FREE")
				{
					if(plan_name == "starter")
						plan_json.date = currentDate.setMonth(currentDate.getMonth() + months) / 1000;
					else if(IS_TRIAL && IS_ALLOWED_TRIAL)
						plan_json.date = currentDate.setHours(currentDate.getHours()+168);
					else
						plan_json.date = currentDate.setMonth(currentDate.getMonth() + months) / 1000;
				}else
					plan_json.date = currentDate.setMonth(currentDate.getMonth() + months) / 1000;

				
				plan_json.new_signup = is_new_signup_payment();
				plan_json.price = update_price();
				plan_json.cost = (cost * months).toFixed(2);
				if(credit > 0){
					plan_json.costWithCredit = plan_json.cost;
					plan_json.credit = credit;
					plan_json.cost = (plan_json.cost - credit).toFixed(2);
				}
				plan_json.months = months;
				plan_json.plan = plan;
				plan_json.plan_type = plan.toUpperCase() + "_" + cycle.toUpperCase();
				plan_json.cycle = cycle;
				plan_json.billingData = App_Subscription.subscribe_plan.model.toJSON()['billingData'];
				// Set coupon Only for Pro users
				delete plan_json["coupon_code"];
				var couponCode = $("#coupon_code").val();
				if (couponCode)
					plan_json.coupon_code = couponCode;

				if (cycle != "biennial")
				{
					plan_json.yearly_discount = ([
						cost * 12
					] - [
						variable.yearly * quantity * 12
					]).toFixed(2);
					plan_json.bi_yearly_discount = ([
						cost * 24
					] - [
						variable.biennial * quantity * 24
					]).toFixed(2);
				}

				if ((USER_DETAILS.getPlanType(USER_BILLING_PREFS) + "-" + USER_DETAILS.getQuantity(USER_BILLING_PREFS) + "-" + USER_DETAILS
						.getPlanInterval(USER_BILLING_PREFS)) == (plan.toUpperCase() + "-" + quantity + "-" + cycle.toUpperCase()))
				{

					showAlertModal("change_plan");
					$(this).text(buttonText).removeAttr("disabled");
					return false;
				}

				var plan_id = (months > 1) ? PLANS_COSTS_JSON[plan] + "-" + months : PLANS_COSTS_JSON[plan];

				plan_json.plan_id = plan_id;
				plan_json.discount = discount;
				plan_json.quantity = quantity;
				plan_json.current_plan = USER_DETAILS.getCurrentPlanName(USER_BILLING_PREFS);
				plan_json.domain_name = USER_DETAILS.getDomainName(USER_BILLING_PREFS);
				if(IS_TRIAL)
					plan_json.trialStatus = "apply";
				if (!$.isEmptyObject(USER_CREDIRCARD_DETAILS))
				{

					plan_json.customer = JSON.parse(USER_CREDIRCARD_DETAILS);
				}
				var that = this;
				// Get plan restrictions and check downgrade conditions.
				$.ajax({
					url :"/core/api/subscription/planRestrictions" ,
					type : "POST",
					dataType: "json",
					contentType : "application/json; charset=utf-8",
					data : JSON.stringify(plan_json),
					success : function(data){
						var errorsCount = 0;
						$(that).text(buttonText).removeAttr("disabled");
						data.plan = plan.substr(0, 1).toUpperCase() + plan.substr(1);
						if(data.is_more_users)
						{
							errorsCount++;
							data.newCount = quantity;
							data.errorsCount = errorsCount;
							getTemplate("subscribe-error-modal",data , undefined, function(template_ui){
								if(!template_ui)
									  return;
								$(template_ui).modal('show');
							}, null);
							return;
						}else if(data.is_allowed_plan){
							Backbone.history.navigate("purchase-plan", { trigger : true });
						}else if(data.lines){
							$.each( JSON.parse(USER_BILLING_PREFS.billingData).subscriptions.data, function( key, value ) {
							  if(value.plan.id.indexOf("email") == -1)
							  {
							  	if((cost * months).toFixed(2) > value.quantity*(value.plan.amount/100))
							  	{
							  		plan_json.unUsedCost = data.lines.data[0].amount*(-1)/100;
							  		plan_json.remainingCost = data.lines.data[1].amount/100;
							  		plan_json.cost = (plan_json.remainingCost - plan_json.unUsedCost - credit).toFixed(2);
							  	}else
							  	{
							  		plan_json.unUsedCost = undefined;
							  		plan_json.remainingCost = undefined;
							  	}
							  }
							});
							
						}else{
							var restrictions = data.restrictions;
							restrictions.plan = data.plan;
							if(restrictions.contacts.count > restrictions.contacts.limit)
								errorsCount++;
							if(restrictions.webrules.count > restrictions.webrules.limit)
								errorsCount++;
							if(restrictions.users.count > restrictions.users.limit)
								errorsCount++;
							if(restrictions.workflows.count > restrictions.workflows.limit)
								errorsCount++;
							if(restrictions.triggers.count > restrictions.triggers.limit)
								errorsCount++;
							if(errorsCount >= 1)
							{
								restrictions.errorsCount = errorsCount;
								getTemplate("subscribe-error-modal",restrictions , undefined, function(template_ui){
									if(!template_ui)
										  return;
									$(template_ui).modal('show');
								}, null);
								return;
							}
						}
						plan_json.date = data.nextPaymentAttempt;
						if(months == 24)
							plan_json.date = plan_json.date + 31557600;
						Backbone.history.navigate("purchase-plan", { trigger : true });
							
					},
					error : function(data){
						showNotyPopUp("warning", data.responseText, "top");
						$(that).text(buttonText).removeAttr("disabled");
					}
				});


			});

	// Check coupon functionality
	$('#subscribe_plan_change').on('click', '#check_valid_coupon', function(e)
	{
		// Get coupon input value
		var couponId = $("#coupon_code").val();
		if (!couponId)
		{
			$("#coupon_code_container").find(".error").html("Invalid Coupon");
			return false;
		}

		$("#coupon_code_container i").removeAttr("class");
		var iconClass = "icon-", that = $(this);

		// Check coupon status
		checkValidCoupon(couponId, function(response)
		{
			iconClass += (response) ? "ok" : "remove";
			$("#coupon_code_container i").removeAttr("class").addClass(iconClass);
		});

	});

	$('#subscribe_plan_change').on("keyup", '#email-quantity', function(e)
	{
		// console.log(e.which);
		var quantity = $(this).val();
		if (isNaN(quantity))
			return;

		var emails = quantity * 1000;

		if (IS_HAVING_MANDRILL)
		{
			if(emails < 5000)
			{
				$("#emails_total_cost").html(quantity * 0);
				$("#email_rate").html("$2");
			}
			else
			{
				$("#emails_total_cost").html(quantity * 2);
				$("#email_rate").html("$2");
			}
		}
		else
		{
		if(emails < 5000)
		{
			$("#emails_total_cost").html(quantity * 0);
			$("#email_rate").html("$3");
		}
		else if (emails < 100000)
		{
			$("#emails_total_cost").html(quantity * 3);
			$("#email_rate").html("$3");
		}

		else if (emails < 1000000)
		{
			$("#emails_total_cost").html((quantity * 2.5).toFixed(2));
			$("#email_rate").html("$2.50");
		}
		else if (emails >= 1000000)
		{
			$("#emails_total_cost").html((quantity * 1.5).toFixed(2));
			$("#email_rate").html("$1.50");
		}
		}
		email_validation($("#email-plan-form"));
		jQuery.validator.addMethod("email_plan_minimum", function(value, element)
		{

			if (this.optional(element))
				return true;

			return parseInt(value) >= 5;
		}, " Should purchase a minimum of 5000 emails.");
	});

	$("#subscribe_plan_change").on("click","#cancel_free_trial",function(e){
		e.preventDefault();
		showAlertModal("delete_free_trial", "confirm", function(){
			$.ajax({url:'core/api/subscription/cancel/trial',
				type:'GET',
				success:function(data){
					if(data && JSON.parse(data).is_success)
					{
						add_tag_our_domain("Cancelled Trial");
						document.location.reload();
					}else if(data)
					{
						getTemplate("trial-error-modal",JSON.parse(data) , undefined, function(template_ui){
							if(!template_ui)
								  return;
							$(template_ui).modal('show');
						}, null);
					}


					
				},error: function(){
					alert("Error occured, Please try again");
				}
			});
		});
		
	});

	$('#subscribe_plan_change').on('mouseenter', '.show_limits', function(e)
	{
		e.preventDefault();
		$(this).closest(".plan-collection-in").find(".plan_features").css("display","block");
		
	});
	$('#subscribe_plan_change').on('mouseleave', '.show_limits', function(e)
	{
		e.preventDefault();
		$(this).closest(".plan-collection-in").find(".plan_features").css("display","none");
	});

	$("#subscribe_plan_change").on("click","#cancel_email_plan",function(e){
		e.preventDefault();
		getTemplate("cancel-email-conformation-modal",{} , undefined, function(template_ui){
			if(!template_ui)
				  return;
			$(template_ui).modal('show');
		}, null);
	});

	//From modal popup
	$("#cancel_email_plan_conform").off("click");
	$("body").on("click","#cancel_email_plan_conform",function(e){
		e.preventDefault();
		$.ajax({url:'core/api/subscription/cancel/email',
			type:'GET',
			success:function(data){
				showNotyPopUp("information", "Email subscription has been cancelled successfully.", "top"); 
				setTimeout(function(){ 
					document.location.reload();
				}, 1000);				
			},error: function(){
				showAlertModal("retry");
			}
		});
	});
	$("#purchase_credits").off("click");
	$("#email-content").on("click","#purchase_credits", function(e){
		e.preventDefault();
		getTemplate("purchase-credits-info-modal",{} , undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("#purchase-credits-info-modal").html($(template_ui)).modal('show');
		}, null);
			
	});

	$('#purchase-credits-info-modal').on("keyup", '#email_credits_count', function(e)
	{
		var quantity = $(this).val();
		if(quantity == ""){
			$("#total_credits_cost").html(quantity*10);
			return;
		}
		if (isNaN(quantity) || quantity < 0)
			return;
		$("#total_credits_cost").html(quantity*4);
	});
}

function is_new_signup_payment()
{
	return IS_NEW_USER && _plan_on_signup;
}

function email_validation(form)
{

	$(form).validate(
			{ rules : { atleastThreeMonths : true, multipleEmails : true, email : true, phone : true }, debug : true, errorElement : 'span',
				errorClass : 'help-inline',

				// Higlights the field and addsClass error if validation failed
				highlight : function(element, errorClass)
				{
					$(element).closest('#email_validation_container').addClass('single-error');
				},

				// Unhiglights and remove error field if validation check passes
				unhighlight : function(element, errorClass)
				{
					$(element).closest('#email_validation_container').removeClass('single-error');
				},

				errorPlacement : function(error, element)
				{
					console.log(error);
					console.log($(element).closest('#email_validation_container').length);

					try
					{
						if ($(element).closest('#email_validation_container').length)
						{
							error.insertAfter($(element).closest('#email_validation_container'));
						}
						else
						{
							error.insertAfter($(element).closest(element));
						}
					}
					catch (err)
					{
						console.log(err);
					}

				} });
	return $(form).valid();
}

function emailClickEvent() {
	$('ul.nav.nav-tabs').removeClass("hide");
	$("#email").addClass("hide");
	$("#currentPlan").addClass("p-t-md");
	$("#usertab").removeClass("active");
	$("#emailtab").addClass("active");
	$("#users-content").removeClass("active");
	$("#email-content").addClass("active");
}

$(function(){

  $("#purchase_credits_conform").off("click");
	$("#purchase-credits-info-modal").on("click","#purchase_credits_conform",function(e){
		e.preventDefault();
		var $form = $("#purchaseCreditsForm");
		if(!isValidForm($form))
			return;
		$(this).attr("disabled", "disabled").html("Processing...");
		var credits_count = $form.find("#email_credits_count").val();
		$.ajax({url:'core/api/subscription/purchaseEmailCredits?quantity='+credits_count,
			type:'POST',
			success:function(data){
				$form.closest(".modal").modal("hide");
				showNotyPopUp("information", "Email credits have been added successfully.", "top"); 
				setTimeout(function(){ 
					document.location.reload();
				}, 1000);				
			},error: function(response){
				$form.closest(".modal").modal("hide");
				showNotyPopUp("warning", response.responseText, "top"); 
			}
		});
	});

});

var _plan_restrictions = {};
$(function() {
	init_acl_restriction();
});

function init_acl_restriction()
{
	_plan_restrictions = {

			billing_restriction : _billing_restriction,
			plan : _billing_restriction.currentLimits,
			is_social_suite :  [ function(){
				return _plan_restrictions.plan.socialSuite;
			},
			function() {
				return {
					"message" : "Please <a href='#subscribe-plan' class='c-p text-info'>upgrade</a> to Regular or Pro plan to use this feature."
				}
			}
			],

			// Emails tags
			is_email_gateway_allowed : [ function() {
				return _plan_restrictions.plan.emailGateway;
			}, function() {
				return {
					"message" : "Please <a href='#subscribe-plan' class='c-p text-info'>upgrade</a> to Enterprise plan"
				}
			} ],
			
			// Emails tags
			is_sms_gateway_allowed : [ function() {
				return _plan_restrictions.plan.smsgateway;
			}, function() {
				return {
					"message" : "Please <a href='#subscribe-plan' class='c-p text-info'>upgrade</a> to Regular or Pro plan"
				}
			} ],
			is_ecommerce_sync_allowed : [ function() {
				return _plan_restrictions.plan.ecommerceSync;
			},
			function()
			{
				return {
					"message" : "Please <a href='#subscribe-plan' class='c-p text-info'>upgrade</a> to Regular or Pro plan"
				}
			}
			],
			
			is_accounting_sync_allowed : [function(){
				return _plan_restrictions.plan.accountingSync;
			},
			function() {
				return {
					"message" : "Please <a href='#subscribe-plan' class='c-p text-info'>upgrade</a> to Regular or Pro plan"
				}
			}
			],

			// ACLs
			is_ACL_allowed : [ function() {
				return _plan_restrictions.plan.acl;
			}, function() {
				return {
					"message" : " Please <a href=\"#subscribe-plan\" class='c-p text-info'>upgrade</a> to Enterprise plan to use this feature. "
				}
			} ],
			is_calling_widget : [function(){
				return _plan_restrictions.plan.callingWidget;
			},
			function(){
				return {
					"message" : "Please <a href=\"#subscribe-plan\" class='c-p text-info'>upgrade</a> to Regular or Pro plan to use this feature. "
				}
			}
			],
			is_custom_widget : [function(){
				return _plan_restrictions.plan.customWidget;
			},
			function(){
				return {
					"message" : "Please <a href=\"#subscribe-plan\" class='c-p text-info'>upgrade</a> to Regular or Pro plan."
				}
			}
			],

			// Calendar
			online_appointment : [ function() {
				return _plan_restrictions.plan.onlineAppointment;

			}, function() {
				return 

			} ],

			// Mobile Integration
			is_mobile_integration : [function() {
				return _plan_restrictions.plan.mobileIntegration;
			},
			function () {
				
			}
			],

			/**
			 * Sync
			 * 
			 */
			// Google sync
			is_google_sync : function() {
				return this.plan.googleSync;
			},

			// Ecommerce Sync
			is_ecommerce_sync : function() {
				return this.plan.ecommerceSync;
			},

			// Payment Sync
			is_payment_sync : function() {
				return this.plan.paymentSync;
			},

			// Repoprts
			is_activity_reports_enabled : [ function() {
				return _plan_restrictions.plan.activityReports;
			}, function() {
				return {
					"message" : "Please <a href='#subscribe-plan' class='c-p text-info'>upgrade</a> to Enterprise plan"
				}
			} ],
			is_cohort_reports_enabled : [ function() {
				return _plan_restrictions.plan.cohortReports;
			}, function() {
				return {
					"message" : "Regular/Pro plan only"
				}
			} ],
			process_widgets : function(data) {
				
				var collection = data.where({"is_added" : true});
				if(collection && collection.length >= _plan_restrictions.plan.widgetsLimit)
				{
					var collectionToBlock = data.where({"is_added" : false});
					
					for(var i= 0 ;i < collectionToBlock.length ; i++)
						{
						collectionToBlock[i].set("allowedToAdd", false);
						}
				}
				else if(collection && collection.length == 0)
				{
					var collectionToBlock = data.where({"allowedToAdd" : false});
					
					for(var i= 0 ;i < collectionToBlock.length ; i++)
						{
						collectionToBlock[i].set("allowedToAdd", true);
						}
				}
				console.log(data);
				
				if(!this.is_calling_widget[0]())
				{
					var call_widget_collection = data.where({"is_added" : false, "widget_type" : "CALL"});
					if(call_widget_collection && call_widget_collection.length)
					{
						for(var i = 0; i < call_widget_collection.length ; i++)
						{
							var widget_type= call_widget_collection[i].get("widget_type");
							if(widget_type == "CALL")
								{
									call_widget_collection[i].set("allowedToAdd", false);
								}
						}
					}
				}
			}
		}
		
		$('#content').on('click', '._upgrade', function(e) {
			e.preventDefault();
			var id = $(this).attr('id');
			if(!id)
				return;
			var element = $("." + id);
			
			if(!element || element.length == 0)
				return;
			
			$(element).show().delay(3000).hide(1);;
		})
}

function getDomainUserFromDeserialize(user)
{
	var json = {};
	json["menu_scopes"] = {};
	json ["user_scopes"] = {};
	
	json.menu_scopes["checked"] = true;
	json.menu_scopes["disabled"] = false;
	
	json.user_scopes["checked"] = true;
	json.user_scopes["disabled"] = false;
	
	if(!_plan_restrictions.is_ACL_allowed[0]())
		{
			json.menu_scopes["disabled"] = true;
			json.user_scopes["disabled"] = true;
			return json;
		}
	
	
	if(user && user.id)
		{
			json.menu_scopes["checked"] = false;
			json.menu_scopes["disabled"] = false;
		
			json.user_scopes["checked"] = false;
			json.user_scopes["disabled"] = false;
		}
	
	// If it is new user
	if(user != null && user.id && user.is_admin)
		{
			json.user_scopes["disabled"] = true;
		}
	console.log(user);
	console.log(json);
	return json;
}/*
 * Creates an view object on the model, with events click on .delete, .edit,
 * .agile_delete and respective funtionalities are defined and binds to current
 * view.
 */
var TAG_MODEL_VIEW = Backbone.View
		.extend(
		{
			events : {
				"click .delete" : "deleteItem",
				"click .edit" : "edit",
				"delete-checked .agile_delete" : "deleteItem",
				"keypress .edit-input" : "renameTag",
				"blur .edit-input" : "updateTag",
				"mouseover" : "showActionButtons",
				"mouseout" : "hideActionButtons",
				'click .details' : "showDetails",
				"click #add-new-tag" : "addNewTag",

			},
			/*
			 * Binds events on the model
			 */
			initialize : function() {
				_.bindAll(this, 'render', 'deleteItem', 'edit'); // every
																	// function
				// that uses 'this'
				// as the current
				// object should be
				// in here
				this.model.bind("destroy", this.close, this);

				this.model.bind("change", this.render, this);
			},
			showDetails : function(e) {
				e.preventDefault();
				var _that = this;
				var details_el = $(".details", this.el);

				/**
				 * Checks for last 'tr' and change placement of popover to 'top'
				 * inorder to prevent scrolling on last row of list
				 */
				/*$(this.el).popover(
						{
							"rel" : "popover",
							"trigger" : "click",
							"popover-title" : "\""
									+ this.model.get('tag') + "\" Stats",
							"content" : LOADING_HTML,
							'show' : true,
							"html" : true,
							'data-container' : this.el
						// "data-container" : '.tag'
						});*/


				$.getJSON('core/api/tags/getstats/' + this.model.get('tag'),
						function(data) {
							_that.model.set('availableCount',
									data.availableCount);
							console.log(_that.model.toJSON());
							$(_that.el).find('.tag_tooltip').tooltip({
						        title: _that.model.get('availableCount')+ " Contacts",
						        placement : 'right'
						    }).on("mouseleave",function(){
						    	$(".tags-management #actions").hide();
						    });
						    
						    $(_that.el).find('.tag_tooltip').trigger("mouseover");
						    $(_that.el).find('.details').hide();
							/*$(_that.el).attr(
									'data-content',
									_that.model.get('availableCount')
											+ " Contacts");
							$(_that.el).popover('show');*/
						})
			},
			renameTag : function(e) {
				if (e.keyCode == 13) {
					$(e.currentTarget).blur();
				}
			},
			updateTag : function(e) {
				// console.log(this.input);

				if (this.model.get('tag') == this.input.val()) {
					$("#tag-solid-state", this.el).show();
					$("#editing", this.el).hide();
					$(this.el).addClass('tag');
					return;
				}
				if (!isValidTag(this.input.val(), true)) {
					this.input.val(this.model.get('tag')).focus();
					return;
				}

				var newTag = this.input.val().trim();
				var oldTag = this.model.get('tag');

				var r = false;
				var newTagObject = {};
				newTagObject.tag = newTag;
				var is_merge = isMergeTag(newTagObject);

				var message = "";
				if (is_merge)
					message = '<p>Tag "' + newTag
							+ '" exists already. Do you want to merge "'
							+ oldTag + '" and "' + newTag + '" ?</p>';
				else
					message = "<p>Rename tag \"" + oldTag + "\" to \"" + newTag
							+ "\" ?</p>";

				var _that = this;
				r = showModalConfirmation(
						'Tag Management Action',
						message,
						function() {
							_that.model.url = 'core/api/tags/bulk/rename?tag='
									+ newTag;

							_that.model
									.save(
											[],
											{
												success : function(data) {
													if (is_merge)
														showNotyPopUp(
																'information',
																"Merging tags \""
																		+ oldTag
																		+ "\" and \""
																		+ newTag
																		+ "\". This may take a while.  You may see the merged tag on some contacts cc",
																"top", 5000);
													else
														showNotyPopUp(
																'information',
																"Renaming tag \""
																		+ oldTag
																		+ "\" to \""
																		+ newTag
																		+ "\". This may take a while. You may see the renamed tag on some contacts while this happens",
																"top", 5000);

													renameTags(newTag, oldTag);
													App_Admin_Settings.tagManagement();
												}
											});

							if (is_merge) {
								_that.remove();
								return;
							}

							_that.model.set('tag', _that.input.val().trim());
							$(_that.el).addClass('tag');
							if(isValidTag(_that.input.val().trim(), false)) {
								$(_that.el).removeClass('error');
							}

						}, function() {
							_that.reset();
							return;
						}, function() {
							_that.reset();
							return;
						});

			},
			reset : function() {
				$("#tag-solid-state", this.el).show();
				$("#editing", this.el).hide();
				$(this.el).addClass('tag');
			},
			showActionButtons : function(e) {
				e.preventDefault();
				$('#actions', this.el).show();
				$("a", this.el).popover('toggle');
			},
			hideActionButtons : function(e) {
				e.preventDefault();
				$('#actions', this.el).hide();
				$(this.el).attr(
						{
							"data-trigger" : "click",
						})
				$(this.el).popover({"trigger" : "focus", 'hide': true});
			},
			addNewTag : function(e) {
				e.preventDefault();
				$("#add-new-tag", this.el).addClass("hide");
				$("#new_tag_field_block", this.el).removeClass("hide");
			},
			/*
			 * On click on ".delete" model representing the view is deleted, and
			 * removed from the collection
			 */
			deleteItem : function(e) {
				e.preventDefault();
				var _that = this;
				showModalConfirmation(
						'Tag Management',
						"<p>Delete \"" + this.model.get('tag') + "\" tag ?</p>",
						function() {
							_that.model.url = "core/api/tags/bulk/delete?tag="
									+ escape(_that.model.get('tag'));
							_that.model.set({
								"id" : _that.model.get('tag')
							});
							_that.model
									.destroy({
										success : function(model, respone) {
											showNotyPopUp(
													'information',
													"Deleting tag \""
															+ _that.model
																	.get('tag')
															+ "\".  You may see the deleted tag on some contacts while this happens",
													"top", 5000);
											App_Admin_Settings.tagManagement();
										}
									});
						});
			},
			edit : function(e) {
				e.preventDefault();

				$("#tag-solid-state", this.el).hide();
				$(this.el).removeClass('tag');
				$("#editing", this.el).show();
				addTagsDefaultTypeahead($("#editing", this.el));
				this.input.attr('width', '100%').focus();
				this.input.val(this.model.get('tag'));

			},
		render : function(callback) {
				$(this.el)
						.html(
								getTemplate(this.options.template, this.model
										.toJSON()));
				$(this.el).data(this.model);
				this.input = $('.edit-input', this.el);
				// Add model as data to it's corresponding row

				return this;
		
			}
		});

function append_tag_management(base_model) {

	var itemView = new TAG_MODEL_VIEW({
		model : base_model,
		"view" : "inline",
		template : this.options.templateKey + "-model",
		tagName : 'li',
	});

	console.log(itemView);

	var key = base_model.get('tag').charAt(0).toUpperCase();
	console.log($('div[tag-alphabet="' + encodeURI(key) + '"]', this.el))

	var el = itemView.render().el;
	$(el).addClass('tag bg-white').css("margin-top","10px");
	
	var tag_name = base_model.get('tag');
	if(!isValidTag(tag_name, false)) {
		$(el).addClass('error');
	}

	var element = $('div[tag-alphabet="' + encodeURI(key) + '"] ul', this.el);
	console.log(element.length);
	if (element.length > 0)
		$('div[tag-alphabet="' + encodeURI(key) + '"] ul', this.el).append(
				$(el));
	else {
		$(this.model_list_element).append("<div class='clearfix'></div>")
				.append($(el));
	}

	// $(this.model_list_element).append($(el));
}

function initializeTagManagementListeners(){


$('#admin-prefs-tabs-content').on('click', '#add-new-tag', function(e){
	e.preventDefault();

	toggleAddTag(true);
});

$('#admin-prefs-tabs-content').on('keydown', '#new_tag', function(event){
	console.log(event.which)

	if (event.which == 0) {
		blur_out_input_field(this);
		return;
	} else if (event.which != 13)
		return;
	saveTag(this);
});
}

function blur_out_input_field(element) {
	var value = $(element).val().trim();

	if (value == "") {
		toggleAddTag(false);
		return;
	}
	
	saveTag(element);
}

function toggleAddTag(show) {
	if (show) {
		$("#add-new-tag").hide();
		$("#new_tag_field_block").show();
		$("#add_new_tag").removeAttr('disabled');
		$("#new_tag").focus();
		console.log($("#add_new_tag").attr('disabled'));
		
		return;
	}
	$("#add-new-tag").show();
	$("#new_tag_field_block").hide();

}

/*
 * $("#new_tag").on('blur', function(event){
 * 
 * });
 */

$('body').on('click', '#add_new_tag', function(e){
	e.preventDefault();
	var newTag = $().val();

	blur_out_input_field("#new_tag");
});

function saveTag(field) {
	var fieldValue = $(field).val();

	if ($(field).attr('disabled'))
		return;

	if (!isValidTag(fieldValue, true)) {
		$(field).focus();
		return;
	}
	var existingTagObject = App_Admin_Settings.tagsview1.collection.where({tag:fieldValue.trim()});
	if(existingTagObject && existingTagObject.length > 0) {
		var message = "<p>Tag \"" + fieldValue.trim() + "\" exists already. Please choose a different name.</p>";

		var _that = this;
		r = showModalConfirmation(
				'Tag Management Action',
				message,
				function() {
					return;
				},function() {
					return;
				},function() {
					return;
				}, 'Ok');

		return;
	}

	var tagObject = {};
	tagObject.tag = fieldValue.trim();

	// Disables input field
	$(field).attr('disabled', 'disabled');

	var model = new BaseModel(tagObject);
	model.url = "core/api/tags";
	model.save([], {
		success : function(response) {
			$(field).val("");
			$(field).removeAttr('disabled');
			toggleAddTag(false);
			
			showNotyPopUp('information', "New tag \"" + model.get('tag')
					+ "\" created.", "top", 5000);

			// Adds tag to global connection
			if(tagsCollection && tagsCollection.models)
				tagsCollection.add(response.toJSON());
            App_Admin_Settings.tagManagement();
		}
	});
	console.log(App_Admin_Settings);
	App_Admin_Settings.tagsview1.collection.add(model);

}

function isValidTag(tag, showAlert) {
	
	var r = '\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC';
	var regexString = '^['+r+']['+r+' 0-9_-]*$';
	var is_valid = new RegExp(regexString).test(tag);
	if (showAlert && !is_valid)
		showAlertModal("tag_name_restriction");
	return is_valid;
}

/**
 * Added tags typeahead on fields
 * 
 * @param element
 */
function addTagsDefaultTypeaheadTagManagement(element) {
	var tags_array = [];

	// 'TAGS' are saved in global variable when they are fetched to show stats
	// in contacts page. If it is undefined, tags are fetched from DB an then
	// type ahead is built
	if (!TAGS) {
		var TagsCollection = Backbone.Collection.extend({
			url : '/core/api/tags',
			sortKey : 'tag'
		});

		tagsCollection = new TagsCollection();

		tagsCollection
				.fetch({
					success : function(data) {
						TAGS = tagsCollection.models;
						addTagsArrayasTypeaheadSource(tagsCollection.toJSON(),
								element);

					}
				});
		return;
	}

	// Adds typeahead to given element
	addTagsArrayasTypeaheadSourceTagManagement(tagsCollection.toJSON(), element);
}

function isMergeTag(tag) {
	console.log(App_Admin_Settings.tagsview1.collection.where({
		"tag" : tag.tag
	}));
	return (App_Admin_Settings.tagsview1.collection.where({
		"tag" : tag.tag
	}).length > 0);
}

// With tags JSON sent type ahead is built on input fields
function addTagsArrayasTypeaheadSource(tagsJSON, element) {
	var tags_array = [];

	$.each(tagsJSON, function(index, element) {
		tags_array.push(element.tag.toString());
	});

	// $("input", element).attr("data-provide","typeahead");
	$("input", element).typeahead({
		"source" : tags_array
	}).attr('placeholder', "Enter Tag");
}

function showModalConfirmation(title, body, yes_callback, no_callback,
		close_callback, yes_button_text, no_button_text) {
	if(!yes_button_text && !no_button_text)
	{
		yes_button_text = "Yes";
		no_button_text = "No";
	}
	var yes_action = "";
	var no_action = "";
	if(yes_button_text)
		yes_action = '<a href="#" id="confirm" class="action btn btn-primary" action="confirm">'+yes_button_text+'</a>';
	if(no_button_text)
		no_action = '<a  href="#" id="deny" class="btn btn-danger action" data-dismiss="modal" action="deny">'+no_button_text+'</a>';
		
	var confirmationModal = $('<div id="confirmation" class="modal fade in">'
			+ '<div class="modal-dialog">'
			+ '<div class="modal-content">'
			+ '<div class="modal-header" >'
			+ '<a href="#" data-dismiss="modal" class="close">&times;</a>'
			+ '<h3>'
			+ title
			+ '</h3></div>'
			+ '<div class="modal-body">'
			+ body
			+ '</div>'
			+ '<div class="modal-footer">'
			+ '<div>'
			+ no_action
			+ yes_action
			+ '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>');

	confirmationModal.modal('show');
	confirmationModal.focus();

	confirmationModal.on('hidden.bs.modal', function(e) {
		if (close_callback && typeof close_callback == "function")
			close_callback();

	});

	$(".action", confirmationModal).click(
			function(e) {
				e.preventDefault();
				var action = $(this).attr('action');

				confirmationModal.modal('hide');

				if (action == "confirm" && yes_callback
						&& typeof yes_callback == "function") {
					yes_callback();
					return;
				}

				if (no_callback && typeof no_callback == "function")
					no_callback(this);

			})

}// Before selecting proper type array from map, need to fill map with user's detail.
function startMakingCollection(criteria, pending)
{
	console.log("in startMakingCollection");
	console.log(criteria+" "+ pending);
	
	// Check for list view 
	if(criteria == "LIST")
		{	
		  // Display list view
		  displayListView();
		  return;
		}

	// Check for calendar view 
	if(criteria == "CALENDAR")
	{	
	  // Display calendar view
	  displayCalendarView();
	  return;
	}		
	
	// Hide list view and show column view with loading img
	hideListViewAndShowLoading();
			
	// Get user details and add into GROUPING_MAP's owner array.
	if (criteria == "OWNER" && GROUPING_MAP[criteria].type.length == 0)
		getUserDetails(function(data)
		{
			findArrayForCollection(criteria, pending);
		});
	else
		findArrayForCollection(criteria, pending);
}

// Decide which array to pass for creation of collection.
function findArrayForCollection(criteria, pending)
{
	if (criteria == "CATEGORY")
		categories.getGroupingMap(function(map){
			GROUPING_MAP[criteria] = map;
			console.log('-------------------',map);
			// Sort task list on count of task and then create collection
			//getArraySortOnCount(criteria, GROUPING_MAP[criteria].type, pending);
			createNestedCollection(criteria, GROUPING_MAP[criteria].type, pending);
		});
	else
		// Creates nested collection
		createNestedCollection(criteria, GROUPING_MAP[criteria].type, pending);
}

// Creates nested collection
function createNestedCollection(criteria, criteriaArray, pending)
{
	console.log("In createNestedCollection");

	// Initialize nested collection
	initTaskListCollection();

	// Url to call DB
	var initialURL = null;

	if (criteria == "DUE")
		initialURL = '/core/api/tasks/fordue' + getParamsNew() + "&pending=" + pending;
	else
		initialURL = '/core/api/tasks/forcategory' + getParamsNew() + "&pending=" + pending;

	// Creates main collection with Task lists
	for ( var i in criteriaArray)
	{
		var newTaskList;

		// Url to call DB
		var url = null;

		// Add heading to task list in main collection
		if (criteria == "OWNER")
		{
			url = initialURL + "&owner=" + criteriaArray[i].id;
			newTaskList = { "heading" : criteriaArray[i].name, "owner_id" : criteriaArray[i].id, "url" : url, "flag" : true };
		}
		else
		{
			url = initialURL + "&type=" + criteriaArray[i];
			newTaskList = { "heading" : criteriaArray[i], "url" : url, "flag" : true };
		}

		if (!newTaskList)
			return;

		// Add task list in main collection
		TASKS_LIST_COLLECTION.collection.add(newTaskList);// main-collection
	}

	// Render it
	$('#new-task-list-based-condition').html(TASKS_LIST_COLLECTION.render(true).el);

	// Fetch tasks from DB for first task list
	fetchForNextTaskList();
}

// Initialize nested collection
function initTaskListCollection()
{
	// Define main collection
	TASKS_LIST_COLLECTION = new Base_Collection_View({ restKey : "task", templateKey : "new-tasks-lists", individual_tag_name : 'div',
		className : "list-area-wrapper", sort_collection : false, postRenderCallback : function(el)
		{
			// Remove loding imgs
			$('.loading-img', el).remove();
			$('.loading', el).remove();

			// Adjust Height Of Task List And Scroll as per window size
			adjustHeightOfTaskListAndScroll();			
		} });

	// Over write append function
	TASKS_LIST_COLLECTION.appendItem = taskAppend;
}

// Append sub collection and model
function taskAppend(base_model)
{
	var tasksListModel = new Base_List_View({ model : base_model, "view" : "inline", template : "new-tasks-lists-model", tagName : 'div',
		className : "task-trello-list panel panel-default", id : base_model.get("heading") });

	// Render model in main collection
	var el = tasksListModel.render().el;

	// Append model from main collection in UI
	$('#new-tasks-lists-model-list', this.el).append(el);
	taskFetch(base_model);
}

/**
 * Create sub collection, ad to model in main collection, fetch tasks from DB
 * for sub collection and update UI.
 */
function taskFetch(base_model)
{


	if (!base_model)
		return;

	// Define sub collection
	var taskCollection = new Base_Collection_View({
		url : base_model.get("url"),
		templateKey : 'task',
		individual_tag_name : 'div',
		sort_collection : false,
		cursor : true,
		page_size : 20,
		postRenderCallback : function(el)
		{
			var flag = false;

			if (base_model.has("owner_id"))
				flag = $("div[id='list-tasks-" + base_model.get("heading") + "-" + base_model.get("owner_id") + "']")[0];
			else
				flag = $("div[id='list-tasks-" + base_model.get("heading") + "']")[0];

			// If we have task list then only need to apply following
			if (flag)
			{
				// Remove loading icon from task list header
				removeLoadingIcon(base_model.toJSON());

				// Display task count
				addTaskCount(base_model.toJSON());

				// Apply infi scroll on sub-collection
				if (base_model.has("owner_id"))
					initialize_infinite_scrollbar($("div[id='list-tasks-" + base_model.get("heading") + "-" + base_model.get("owner_id") + "']")[0],
							taskCollection);
				else
					initialize_infinite_scrollbar($("div[id='list-tasks-" + base_model.get("heading") + "']")[0], taskCollection);
			}
		} });

	// Fetch task from DB for sub collection
	taskCollection.collection.fetch({ success : function(data)
	{
		// Add sub collection in model of main collection.
		base_model.set('taskCollection', taskCollection.collection);

		// Update UI
		if (base_model.has("owner_id"))
			$("div[id='list-tasks-" + base_model.get("heading") + "-" + base_model.get("owner_id") + "']").html(taskCollection.render(true).el);
		else
			$("div[id='list-tasks-" + base_model.get("heading") + "']").html(taskCollection.render(true).el);

		// Adjust Height Of Task List And Scroll as per window size
		adjustHeightOfTaskListAndScroll();

		// Maintain changes in UI
		displaySettings();

		// Gives ability of dragging and dropping to tasks in task list.
		setup_sortable_tasks();

		// Counter to fetch next sub collection
		//FETCH_COUNTER++;

		// Fetch tasks from DB for next task list
		//fetchForNextTaskList();
	} });
}
/*Get user's name and id to add in GROUPING_MAP for owner of task, 
 * user name can be redundant so we need user's id too.*/
function getUserDetails(callback)
{
	$.getJSON('/core/api/users/partial', function(users)
	{
		for ( var i in users)
		{
			GROUPING_MAP.OWNER.type[i] = { "name" : users[i].name, "id" : users[i].id };
		}

		if (callback && typeof (callback) === "function")
			callback();

	}).error(function(data)
	{
		console.log("get user err");
		console.log(data);
	});
}

// Gives heading of task list from due of task
function getHeadingForDueTask(task)
{
	var headingToSearch = null;

	// add to the right task list - overdue, today, tomorrow etc.
	var due = get_due(task.due);

	// OVERDUE
	if (due < 0)
		return headingToSearch = "OVERDUE";

	// Today
	if (due == 0)
		return headingToSearch = "TODAY";

	// Tomorrow
	if (due == 1)
		return headingToSearch = "TOMORROW";

	// Next Week
	if (due > 1)
		return headingToSearch = "LATER";
}

// As per new task list get new due date for task, after task drop
function getNewDueDate(newTaskListId)
{
	var d = new Date();

	// OVERDUE (yesterday)
	if (newTaskListId == "OVERDUE")
		d.setDate(d.getDate() - 1);

	// Today
	if (newTaskListId == "TODAY"){
		(getGMTTimeFromDate(d) / 1000);
	}
		

	// Tomorrow
	if (newTaskListId == "TOMORROW")
		d.setDate(d.getDate() + 1);

	// Later Day after tomorrow
	if (newTaskListId == "LATER")
		d.setDate(d.getDate() + 2);

	return (getGMTTimeFromDate(d) / 1000);
}



//As per new task list get new due date for task, after task drop
function getNewDueDateBasedOnTime(newTaskListId,duedate)
{
	var d = new Date();
	var d1 = new Date(duedate*1000);
	var secs = d1.getSeconds() + (60 * d1.getMinutes()) + (60 * 60 * d1.getHours());
	console.log(secs);

	// OVERDUE (yesterday)
	if (newTaskListId == "OVERDUE")
		d.setDate(d.getDate() - 1);

	// Today
	if (newTaskListId == "TODAY")
		(getGMTTimeFromDate(d) / 1000);

	// Tomorrow
	if (newTaskListId == "TOMORROW")
		d.setDate(d.getDate() + 1);

	// Later Day after tomorrow
	if (newTaskListId == "LATER")
		d.setDate(d.getDate() + 2);

	return (getGMTTimeFromDate(d) / 1000)+secs;
}



// On basis of status return progress value, when criteria is status and task is
// dragged in task lists.
function getProgressValue(status)
{
	if (status == YET_TO_START)
		return 0;
	else if (status == COMPLETED)
		return 100;
	else if (status == IN_PROGRESS)
		return 1;
}

// Get Task id from UI
function getTaskId(element)
{
	if ($(element).hasClass('task-body'))
		return $(element).parent().attr('id');
	else
		return $(element).attr('data');
}

// Get heading of task list
function getTaskListId(element)
{
	return $(element).closest('.task-trello-list').attr('id');
}

/*
 * Get owner's id when heading of task list is Owner's name, name can be
 * duplicate so get owner's Id.
 */
function getTaskListOwnerId(element)
{
	return $(element).closest('.task-trello-list').find('.list-header').attr('ownerID');
}

// Get Criteria from dropdown
function getCriteria()
{
	// Get selection from criteria dropdown
	var criteria = $('#new-type-tasks').data("selected_item");

	// If criteria is not selected then make it default one
	if (!criteria)
		criteria = "DUE";

	if(agile_is_mobile_browser())
		criteria = "LIST";

	return criteria;
}

// Get task list from main-collection by ID
function getTaskList(criteria, taskListId, owner_id)
{
	if(TASKS_LIST_COLLECTION){
		// Get task list
		if (criteria == "OWNER")
			return TASKS_LIST_COLLECTION.collection.where({ heading : taskListId, owner_id : parseInt(owner_id) });
		else
			return TASKS_LIST_COLLECTION.collection.where({ heading : taskListId });
	}
	return null
}

// Get form ID for notes in task
function getTaskFormId(element)
{
	// Get form Id
	var formId = $(element).closest('form').attr('id');
	console.log(formId);
	return formId;

}

// Get task count of all task list and call function to sort array and create
// collection.
function getArraySortOnCount(criteria, criteriaArray, pending)
{
	var initialURL = '/core/api/tasks/countoftype' + getParamsNew() + "&pending=" + pending;

	var countTypeArray = {};

	$.each(criteriaArray, function(index, type)
	{
		var url = initialURL + "&type=" + criteriaArray[index];

		$.getJSON(url, function(data)
		{
			countTypeArray[data.type] = data.count;

			if (_.size(countTypeArray) == criteriaArray.length)
				sortArray(criteria, countTypeArray, pending);

		}).error(function(data)
		{
			console.log("get count err");
			console.log(data);
		});
	});
}

// Sort array on count and call function to create collection.
function sortArray(criteria, countTypeArray, pending)
{
	var array = [];
	var result = [];

	for (a in countTypeArray)
		array.push([
				a, countTypeArray[a]
		]);

	array.sort(function(a, b)
	{
		return a[1] - b[1]
	});

	array.reverse();

	for (a in array)
		result.push(array[a][0]);

	// Creates nested collection
	createNestedCollection(criteria, result, pending);
}

// Get details from dropdown and call function to create collection
function getDetailsForCollection()
{
	FETCH_COUNTER = 0;
	IS_FECHING_DONE = false;

	// Make drop down intelligent and return Pending value task to fetch or not
	var pending = dropdownintelligence();

	// Get selection from criteria dropdown
	var criteria = getCriteria();

	// Get selection from owner's dropdown
	var owner = $('#new-owner-tasks').data("selected_item");

	// Creates nested collection
	startMakingCollection(criteria, pending);
}

/**
 * getParams() method returns a string(used as query param string) contains user
 * selected type and owners
 * 
 * @returns {String} query string
 */
function getParamsNew()
{
	var params = "?";

	// Get task type and append it to params
	var criteria = getCriteria();
	if (criteria)
		params += ("&criteria=" + criteria);

	if (criteria == "DUE")
	{
		params += ("&start_time=" + getNewDueDate("TODAY"));
		params += ("&end_time=" + getNewDueDate("TOMORROW"));
	}

	// Get owner name and append it to params
	var owner = $('#new-owner-tasks').data("selected_item");
	if (owner == 'my-pending-tasks')
	{
		params += ("&pending=" + true);
		params += ("&owner=" + CURRENT_DOMAIN_USER.id);
		return params;
	}
	if (owner == 'all-pending-tasks')
	{
		params += ("&pending=" + true);
		owner = "";
	}
	if (owner)
		params += ("&owner=" + owner);
	else if (owner == undefined)		
		params += ("&owner=" + CURRENT_DOMAIN_USER.id);	
		
	return params;
}$(function()
{
	/**
	 * Displays note modal. Also prepends the contact name to related to field
	 * of activity modal.
	 */
	$('body').on('click', '.task-add-note, .deal-add-note', function(e){
		e.preventDefault();

		// Get form id
		var formId = getTaskFormId(this);
		
		// Append note form
		var that = this;
		getTemplate('note-form', {}, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$("#forNoteForm", "#" + formId).html($(template_ui));	
			$(".deal-note-label").show();
			// Hide + Add note link
			//$(that).hide();

		}, $("#forNoteForm", "#" + formId));
	});			
			
});

// Add related notes of task to task form modal
function showNoteOnForm(formName, notes)
{
	console.log("showNoteOnForm");	

	$.each(notes, function(index, note)
	{
		getTemplate('notes-for-task', note, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$("#notes", "#" + formName).append($(template_ui));
		}, null);

		
	});
}

/**
 * Reads the note values from the elements having class "notes" and maps them as
 * a json object to return.
 * 
 * @method get_notes
 * @param {String}
 *            form_id to read notes from the form
 * @returns json object of notes
 */
function get_notes(form_id)
{
	var notes_json = $('#' + form_id + ' .notes').map(function()
	{
		var values = [];

		$.each($(this).children(), function(index, data)
		{
			values.push(($(data).attr("data")).toString())
		});
		return { "name" : $(this).attr('name'), "value" : values };
	}).get();
	
	return notes_json;
}
// Adds task to task list
function addTaskToTaskList(headingToSearch, tasksToAdd, conditionToCheck)
{
	console.log("In addTaskToTaskList");

	var modelTaskList;

	// Get task list on basis of heading and id in case of owner criteria
	if (conditionToCheck == "OWNER") // new task
	{
		modelTaskList = getTaskList("OWNER", tasksToAdd.taskOwner.name, tasksToAdd.taskOwner.id);

		// Remove Loading Icon from task list
		$('.task-list-loading-img-' + tasksToAdd.taskOwner.name + "-" + tasksToAdd.taskOwner.id, ".task-trello-list").hide();
	}
	else if ((conditionToCheck == "dragged" || conditionToCheck == true) && headingToSearch == "taskOwner.name")
	// dragged/edited task
	{
		modelTaskList = getTaskList("OWNER", tasksToAdd.get("taskOwner").name, tasksToAdd.get("taskOwner").id);

		// Remove Loading Icon from task list
		$('.task-list-loading-img-' + tasksToAdd.get("taskOwner").name + "-" + tasksToAdd.get("taskOwner").id, ".task-trello-list").hide();
	}
	else
	// task other than owner criteria
	{
		modelTaskList = getTaskList(null, headingToSearch, null);

		// Remove Loading Icon from task list
		$('.task-list-loading-img-' + headingToSearch + "-", ".task-trello-list").hide();
	}

	if (!modelTaskList)
		return;

	// Copy cursor for infi-scroll
	tasksToAdd = setCursor(modelTaskList[0], tasksToAdd, conditionToCheck);

	// Add task in sub collection means in Task List
	if (conditionToCheck == "dragged") // if dragged task then do not update UI
		modelTaskList[0].get('taskCollection').add(tasksToAdd.toJSON(), { silent : true });// sub-collection
	else
	{
		modelTaskList[0].get('taskCollection').add(tasksToAdd);// sub-collection

		// change task count in header of task list
		changeTaskCount(modelTaskList[0].toJSON(), true);
	}

	// Maintain changes in UI
	displaySettings();
}

// Delete Task
function deleteTask(taskId, taskListId, taskListOwnerId)
{
	var modelTaskList;

	// Get Task list
	if (taskListOwnerId)
		modelTaskList = getTaskList("OWNER", taskListId, taskListOwnerId);
	else
		modelTaskList = getTaskList(null, taskListId, null);
	if(modelTaskList && modelTaskList.length){
		// Call method with task id to be deleted.
		var new_task = modelTaskList[0].get('taskCollection').get(taskId);
		new_task.url = '/core/api/tasks/' + taskId;
		new_task.destroy({ success : function(model, response)
		{
			// Creates normal time.
			displayTimeAgo($(".task-trello-list"));

			// change task count in header of task list
			changeTaskCount(modelTaskList[0].toJSON(), false);
			
			getDueTasksCount(function(count){
				var due_task_count= count;
				if(due_task_count==0)
					$(".navbar_due_tasks").css("display", "none");
				else
					$(".navbar_due_tasks").css("display", "inline-block");
				if(due_task_count !=0)
					$('#due_tasks_count').html(due_task_count);
				else
					$('#due_tasks_count').html("");

			});
			
		} });
	}
	else
		$.ajax({ type : "DELETE", url :'core/api/tasks/'+taskId, async : false, dataType : 'json', success : function()
			{
				App_Calendar.allTasksListView.collection.remove(taskId);
				App_Calendar.allTasksListView.render(true);
				var taskCount = App_Calendar.allTasksListView.collection.length;
				var count = $('#tasks-list-template').find('.tasks-count').attr('data');
				if(count){
					count = count - 1 ;
					$('#tasks-list-template').find('.tasks-count').removeAttr('data');
					$('#tasks-list-template').find('.tasks-count').attr('data' , count);
					$('#tasks-list-template').find('.tasks-count').text('('+count+' Total)');
				}
			} 
		});
}

/*
 * Compare counter with length of criteria array and call function to Fetch
 * tasks from DB for next task list if available.
 */
function fetchForNextTaskList()
{
	// is All task list are done?
	if (IS_FECHING_DONE)
		return;

	var criteria = getCriteria();
	var criteriaArray = GROUPING_MAP[criteria].type;

	// Some task list are pending
	if (FETCH_COUNTER < criteriaArray.length)
	{
		// call fetch for next task list.
		taskFetch(FETCH_COUNTER);
	}

	// All task list are done.
	if (FETCH_COUNTER >= criteriaArray.length)
		IS_FECHING_DONE = true;
}
function addDetailsInCookie(elmnt)
{
	console.log("In addDetailsInCookie");
	console.log($(elmnt));

	var name = $(elmnt).html();
	var id = $(elmnt).attr("href");

	var taskField = null;
	var taskFieldValue = null;
	var taskFieldForGroupView = null;
	var taskFieldValueForGroupView = null;

	if ($(elmnt).closest("ul").attr('id') == "new-type-tasks")
	   {
		taskField = "task_criteria";
		taskFieldForGroupView = "task_criteria_forgroupview";
	   }	
	else if ($(elmnt).closest("ul").attr('id') == "new-owner-tasks")
	   {
		taskField = "task_owner";
		taskFieldForGroupView = "task_owner_forgroupview";
	   }		
	
	taskFieldValue = name + "_" + id;
	taskFieldValueForGroupView = name + "_" + id;

	// Creates the cookie
	_agile_set_prefs(taskField, taskFieldValue);
	
	// Save setting for group view	
	if(getCriteria() != "LIST" && getCriteria() != "CALENDAR")
		{
		 // Creates the cookie
		 _agile_set_prefs(taskFieldForGroupView, taskFieldValueForGroupView);
		}	
}

function readDetailsFromCookie()
{
	console.log("In readDetailsFromCookie");

	var task_criteria = _agile_get_prefs("task_criteria");
	var task_owner = _agile_get_prefs("task_owner");

	console.log(task_criteria + " " + task_owner);
	
	withoutEventChangeDropDowns(task_criteria, task_owner, undefined);	
}
/**
 * Sets tasks as sortable list.
 */
function setup_sortable_tasks()
{
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function()
	{
		$(".task-model-list").sortable(
				{
					connectWith : '.task-model-list',
					cursor : "move",
					/*containment : ".list-area-wrapper",*/
					scroll : false,
					helper : "clone",
					placeholder : "ui-sortable-placeholder",
					forcePlaceholderSize : true,					
					revert : true,

					start: function(e, ui){
				        ui.placeholder.height(ui.item.height());
				    },
					
					beforeStop : function(event, ui)
					{
						// If sender and receiver is same
						if ($(ui.helper).closest('.task-trello-list').find('.list-header').attr('attr') === $(ui.placeholder).closest('.task-trello-list').find('.list-header').attr(
								'attr'))
						{
							// If criteria is owner
							if ($(ui.helper).closest('.task-trello-list').find('.list-header').attr('ownerID'))
							{
								// If sender and receiver is same owner
								if ($(ui.helper).closest('.task-trello-list').find('.list-header').attr('ownerID') === $(ui.placeholder).closest('.task-trello-list').find(
										'.list-header').attr('ownerID'))
									return false;
								// $(this).sortable('cancel');
							}
							else
								return false;
							// $(this).sortable('cancel');
						}
					},

					// When task is dragged to adjust the horizontal scroll
					change : function(event, ui)
					{						
						var width = $('.list-area-wrapper > div').width();
						var scrollX = $('.list-area-wrapper > div').scrollLeft();

						if (event.pageX > (width * 0.9)) // right 90%
							$('.list-area-wrapper > div').scrollLeft(scrollX + 100);
						else if (event.pageX < (width * 0.2)) // left 10%
							$('.list-area-wrapper > div').scrollLeft(scrollX - 105);

					},
					// When task is dropped its criteria is changed
					update : function(event, ui)
					{
						// Same task list
						if (ui.sender == null)
							return;

						// Make UI and DB changes after task dropped.
						changeAfterDrop(event, ui);

					} }).disableSelection();
	});
}

// Make changes after task dropped to other task list
function changeAfterDrop(event, ui)
{
	var item = ui.item[0];
	var sender = ui.sender[0];

	// Get heading of task list
	var oldTaskListId = getTaskListId(sender);
	var newTaskListId = getTaskListId(item);

	var oldTaskListOwnerId = getTaskListOwnerId(sender);
	var newTaskListOwnerId = getTaskListOwnerId(item);

	// Get selected criteria
	var criteria = getCriteria();

	var getUpdatedUI = false;

	// If criteria is owner and task is dragged to other task list
	if (criteria == "OWNER" && oldTaskListOwnerId != newTaskListOwnerId)
		getUpdatedUI = true;
	else if (oldTaskListId != newTaskListId) // Checks current task list is
		// different from previous
		getUpdatedUI = true;

	if (getUpdatedUI)
	{
		// Gets search key from map so we can change that field in task as per
		// new task list.
		var fieldToChange = GROUPING_MAP[criteria].searchKey;

		// Get task id
		var taskId = $(item).find('.listed-task').attr('id');

		// Get old task list
		var modelOldTaskList = getTaskList(criteria, oldTaskListId, oldTaskListOwnerId);

		// Gets task from old sub collection (task list) to var type json
		var oldTask = modelOldTaskList[0].get('taskCollection').get(taskId).toJSON();

		// Make updation in task and save in DB as well as collection
		updateDraggedTask(oldTask, criteria, oldTaskListOwnerId, oldTaskListId, newTaskListId, newTaskListOwnerId, taskId, fieldToChange);

		// Change count of old task list.
		changeTaskCount(modelOldTaskList[0].toJSON(), false);
	}
}

// Make updation in task and save in DB as well as collection
function updateDraggedTask(oldTask, criteria, oldTaskListOwnerId, oldTaskListId, newTaskListId, newTaskListOwnerId, taskId, fieldToChange)
{
	// Changes field of task
	if (fieldToChange == "due")
	{
		// Criteria is due
		if (oldTask.taskOwner)
			oldTask.owner_id = oldTask.taskOwner.id;
		oldTask["due"] = getNewDueDateBasedOnTime(newTaskListId,oldTask['due']);
	}
	else if (fieldToChange == "taskOwner.name")
	{
		// Criteria is owner
		oldTask.owner_id = newTaskListOwnerId;
		oldTask["taskListOwnerId"] = oldTaskListOwnerId;
	}
	else
	{
		if (oldTask.taskOwner)
			oldTask.owner_id = oldTask.taskOwner.id;
		oldTask[fieldToChange] = newTaskListId;

		// Criteria is status
		if (fieldToChange == "status")
		{
			// send new status
			oldTask.progress = getProgressValue(newTaskListId);

			if (newTaskListId == "COMPLETED")
				oldTask.is_complete = true;
			else
				oldTask.is_complete = false;
		}
	}

	// To change task list in collection we need old task list id.
	oldTask["taskListId"] = oldTaskListId;

	// Replace contacts object with contact ids
	var contacts = [];
	$.each(oldTask.contacts, function(index, contact)
	{
		contacts.push(contact.id);
	});

	// Replace notes object with note ids
	var notes = [];
	$.each(oldTask.notes, function(index, note)
	{
		notes.push(note.id);
	});

	oldTask.contacts = contacts;
	oldTask.notes = notes;
	oldTask.due = new Date(oldTask.due).getTime();

	// Save task after dropped to new task list
	saveAfterDrop(oldTask, criteria, newTaskListId, newTaskListOwnerId, taskId);
}

// Save task after dropped to new task list
function saveAfterDrop(oldTask, criteria, newTaskListId, newTaskListOwnerId, taskId)
{
	// Save task in DB
	var newTask = new Backbone.Model();
	newTask.url = 'core/api/tasks';
	newTask.save(oldTask, { success : function(data)
	{
		// Will add new task to dropped task list and remove task from dragged
		// task list.
		updateTask("dragged", data, oldTask);

		// Update task in UI
		if (criteria == "OWNER")
			$(".list-header[ownerID=" + newTaskListOwnerId + "]").parent().find("#" + taskId).parent().html(getTemplate('task-model', data.toJSON()));
		else
			$("#" + newTaskListId).find("#" + taskId).parent().html(getTemplate('task-model', data.toJSON()));

		// Maintain changes in UI
		displaySettings();

		// Get new task list
		var modelNewTaskList = getTaskList(criteria, newTaskListId, newTaskListOwnerId);

		// Change count of new task list.
		changeTaskCount(modelNewTaskList[0].toJSON(), true);
		getDueTasksCount(function(count){
			var due_task_count= count;
			if(due_task_count==0)
				$(".navbar_due_tasks").css("display", "none");
			else
				$(".navbar_due_tasks").css("display", "block");
			if(due_task_count !=0)
				$('#due_tasks_count').html(due_task_count);
			else
				$('#due_tasks_count').html("");

		});
		
	} });
}
function initialize_infinite_scrollbar(element_id, targetCollection)
{
	console.log("initialize_infinite_scrollbar");

	if (element_id == undefined || element_id == null)
	{
		console.log("no elmnt");
		return;
	}

	targetCollection.infiniScroll = new Backbone.InfiniScroll(targetCollection.collection, {
		target : element_id,
		untilAttr : 'cursor',
		param : 'cursor',
		strict : false,
		pageSize : targetCollection.page_size,
		success : function(colleciton, response)
		{
			console.log('in success');

			if (!colleciton.last().get("cursor"))
			{
				this.strict = true;
				targetCollection.infiniScroll.disableFetch();
			}

			// Maintain changes in UI
			displaySettings();

			// Remove loading icon
			$(targetCollection.infiniScroll.options.target.nextElementSibling).html('');
		},
		onFetch : function()
		{
			console.log('in fetch');

			// Add loading icon
			$(targetCollection.infiniScroll.options.target.nextElementSibling).html(
					'<div class="scroll-loading"> <img src="'+updateImageS3Path("/img/ajax-loader.gif")+'" style="margin-left: 44%;"> </div>');
		} });
}

/*
 * Copy cursor of last task in targeted task list to new task because newly
 * added task will go to end of collection and we lost cursor, cursor is
 * important for infi-scroll
 */
function setCursor(targetTaskListModel, newTaskToAdd, conditionToCheck)
{
	console.log("In setCursor");

	if (!targetTaskListModel.get('taskCollection') || targetTaskListModel.get('taskCollection').length == 0)
		return newTaskToAdd;

	var len = targetTaskListModel.get('taskCollection').length;
	var crsr = targetTaskListModel.get('taskCollection').at(len - 1).get("cursor");

	if (crsr)
	{
		if (conditionToCheck == "dragged" || conditionToCheck == true)
		{
			newTaskToAdd.set({ cursor : crsr });
		}

		else if (newTaskToAdd.attributes)
		{
			newTaskToAdd.attributes.cursor = crsr;
		}
		else
			newTaskToAdd["cursor"] = crsr;
	}

	return newTaskToAdd;
}
// Shows and Fill Task Edit Modal
function editTask(taskId, taskListId, taskListOwnerId)
{
	console.log("editTask");
	var modelTaskList;var modelTask;

	if (taskListOwnerId)
		modelTaskList = getTaskList("OWNER", taskListId, taskListOwnerId);
	else
		modelTaskList = getTaskList(null, taskListId, null);

	if (modelTaskList && modelTaskList.length)
		modelTask = modelTaskList[0].get('taskCollection').get(taskId).toJSON();
	else
		modelTask = App_Calendar.allTasksListView.collection.get(taskId).toJSON();
	if (!modelTask)
		return;

	var taskJson = modelTask;

	taskJson["taskListId"] = taskListId;
	taskJson["taskListOwnerId"] = taskListOwnerId;

	// Show modal
	$("#updateTaskModal").html(getTemplate("task-update-modal")).modal('show');
	
	loadProgressSlider($("#updateTaskForm"), function(el){
		// Fill form
		deserializeForm(taskJson, $("#updateTaskForm"));
		$('.update-task-timepicker').val(fillTimePicker(taskJson.due));

		categories.getCategoriesHtml(taskJson,function(catsHtml){
			$('#type',$("#updateTaskForm")).html(catsHtml);
			// Fills owner select element
			populateUsers("owners-list", $("#updateTaskForm"), taskJson, 'taskOwner', function(data)
			{
				$("#updateTaskForm").find("#owners-list").html(data);
				if (taskJson.taskOwner)
				{
					$("#owners-list", $("#updateTaskForm")).find('option[value=' + taskJson['taskOwner'].id + ']').attr("selected", "selected");
				}
		
				$("#owners-list", $("#updateTaskForm")).closest('div').find('.loading-img').hide();
			});
		});

		showNoteOnForm("updateTaskForm", taskJson.notes);

		// Creates normal time.
		displayTimeAgo($(".task-trello-list"));
	});

}

// Update edited task
function updateTask(isUpdate, data, json)
{
	console.log("In updateTask");

	// Get selected criteria
	var criteria = getCriteria();

	var headingToSearch = json[GROUPING_MAP[criteria].searchKey];

	if (criteria == "DUE")
		headingToSearch = getHeadingForDueTask(json);

	// To update task with criteria owner, it will skip if of changeTaskList()
	// and will continue to update task
	if (criteria == "OWNER" && parseInt(json.taskListOwnerId) == data.get("taskOwner").id)
		headingToSearch = json.taskListId;

	// Task list change
	if (json.taskListId != undefined)
		if (headingToSearch != json.taskListId) // Not belongs to same task list
		{
			// Change task's list
			changeTaskList(data, json, criteria, headingToSearch, isUpdate);
			return;
		}

	// Task update(edit)
	if (isUpdate == true)
	{
		var modelTaskList;

		// Get Task List
		if (criteria == "OWNER")
			modelTaskList = getTaskList(criteria, json.taskListId, json.taskListOwnerId);
		else
			modelTaskList = getTaskList(null, headingToSearch, null);

		if (!modelTaskList)
			return;

		// Set new details in Task
		modelTaskList[0].get('taskCollection').get(json.id).set(data);

		// Update task in UI : set() won't work on task which is dragged, so need to do manually. 
		if (criteria == "OWNER")
			$(".list-header[ownerID=" + json.taskListOwnerId + "]").parent().find("#" + json.id).parent().html(getTemplate('task-model', data.toJSON()));
		else
			$("#" + headingToSearch).find("#" + json.id).parent().html(getTemplate('task-model', data.toJSON()));

		// Maintain changes in UI
		displaySettings();

		return;
	}

	// Add new task
	if (criteria == "OWNER")
		addTaskToTaskList(headingToSearch, data.toJSON(), criteria);
	else
		addTaskToTaskList(headingToSearch, data, null);
}

// Removes task from old task list and add to new task list.
function changeTaskList(data, json, criteria, headingToSearch, isUpdate)
{
	console.log("In changeTaskList");

	var modelOldTaskList;

	// Get old task list
	if (criteria == "OWNER")
	{
		var ownerId;

		if (json.taskListOwnerId)
			ownerId = parseInt(json.taskListOwnerId);
		else
			ownerId = json.taskOwner.id;

		if (!ownerId)
			return;

		modelOldTaskList = getTaskList(criteria, json.taskListId, ownerId);

		headingToSearch = "taskOwner.name";

		// Find proper column with owner id and then dlt task in UI
		$(".list-header[ownerID=" + ownerId + "]").parent().find("#" + json.id).remove();
	}
	else
	{
		modelOldTaskList = getTaskList(null, json.taskListId, null);

		// Remove task from UI
		$("#" + json.taskListId).find("#" + json.id).remove();
	}

	if (!modelOldTaskList)
		return;

	// Remove from task from old task list
	modelOldTaskList[0].get('taskCollection').remove(modelOldTaskList[0].get('taskCollection').get(json.id));

	// Add in task in new task list
	addTaskToTaskList(headingToSearch, data, isUpdate);
}

// On click of task action , makes task completed
function completeTask(taskId, taskListId, taskListOwnerId)
{
	var modelTaskList;var modelTask;

	if (taskListOwnerId)
		modelTaskList = getTaskList("OWNER", taskListId, taskListOwnerId);
	else
		modelTaskList = getTaskList(null, taskListId, null);

	if (modelTaskList && modelTaskList.length)
		modelTask = modelTaskList[0].get('taskCollection').get(taskId).toJSON();
	else
		modelTask = App_Calendar.allTasksListView.collection.get(taskId).toJSON();
	if (!modelTask)
		return;

	var taskJson = modelTask;

	if (taskJson.status == COMPLETED || taskJson.is_complete == true)
		return;

	// Replace contacts object with contact ids
	var contacts = [];
	$.each(taskJson.contacts, function(index, contact)
	{
		contacts.push(contact.id);
	});

	// Replace notes object with note ids
	var notes = [];
	$.each(taskJson.notes, function(index, note)
	{
		notes.push(note.id);
	});

	taskJson.contacts = contacts;
	taskJson.notes = notes;
	taskJson.is_complete = true;
	taskJson.due = new Date(taskJson.due).getTime();
	taskJson.status = COMPLETED;
	taskJson.progress = 100;
	taskJson.note_description = "";

	if (taskJson.taskOwner)
		taskJson.owner_id = taskJson.taskOwner.id;

	taskJson.taskListId = taskListId;

	if (taskListOwnerId)
		taskJson.taskListOwnerId = taskListOwnerId;

	var newTask = new Backbone.Model();
	newTask.url = 'core/api/tasks';
	newTask.save(taskJson, { success : function(data)
	{
		getDueTasksCount(function(count){
			var due_task_count= count;
			if(due_task_count==0)
				$(".navbar_due_tasks").css("display", "none");
			else
				$(".navbar_due_tasks").css("display", "block");
			if(due_task_count !=0)
				$('#due_tasks_count').html(due_task_count);
			else
				$('#due_tasks_count').html("");

		});
		if (modelTaskList && modelTaskList.length)
			updateTask(true, data, taskJson);
		else{
			App_Calendar.allTasksListView.collection.get(taskJson).set(new BaseModel(data));
			App_Calendar.allTasksListView.render(true);
		}

		// Maintain changes in UI
		displaySettings();
	} });
}
// Main Collection
var TASKS_LIST_COLLECTION = null;

// Grouping Map After selection from filter/ drop down
var GROUPING_MAP = { 
		"PRIORITY" : { "type" : ["HIGH", "NORMAL", "LOW"], "searchKey" : "priority_type" }, 
		"CATEGORY" : { "type" : ["CALL","EMAIL","FOLLOW_UP","MEETING", "MILESTONE","OTHER","SEND","TWEET"], "searchKey" : "type" }, 
        "STATUS" : { "type" : ["YET_TO_START", "IN_PROGRESS", "COMPLETED"], "searchKey" : "status" }, 
        "DUE" : { "type" : ["OVERDUE", "TODAY", "TOMORROW", "LATER"], "searchKey" : "due" }, 
        "OWNER" : { "type" : [], "searchKey" : "taskOwner.name" } };

// Status of Task
var YET_TO_START = "YET_TO_START";
var IN_PROGRESS = "IN_PROGRESS";
var COMPLETED = "COMPLETED";

var flag = true;

var FETCH_COUNTER = 0;
var IS_FECHING_DONE = false;

$(function()
{	
	$(document).ready(function() {
		// Adjust Height Of Task List And Scroll as per window size
	    adjustHeightOfTaskListAndScroll();
	});

	// for the window resize
	$(window).resize(function() {
		// Adjust Height Of Task List And Scroll as per window size
		adjustHeightOfTaskListAndScroll();
	});	
	
	// Display task actions
	
});
// Maintain changes in UI
function displaySettings()
{
	// Creates normal time.
	displayTimeAgo($(".task-trello-list"));

	$(".listed-task").parent().addClass("task-striped");

	// Get selected criteria
	var criteria = getCriteria();

	// Change task UI as per group selection
	if (criteria == "CATEGORY")
	{
		// Remove type of task from UI when category filter selected
		$(".new-task-type").remove();

		// Assign new setting to Owner image
		$(".new-task-owner").addClass("shift-up");

		// Assign new min height to task
		$(".task-body").addClass("task-body-category");
	}

	if (criteria == "OWNER")
	{
		// Remove owner pic of task from UI when owner filter selected
		$(".new-task-owner").remove();

		// Assign new min height to task
		$(".task-body").addClass("task-body-owner");
	}
}

// Load and display slider in update task modal of task for progress.
function loadProgressSlider(el, callback)
{
	head.load(LIB_PATH + 'lib/jquery.slider.min.js', function()
	{
		$(".progress_slider", el).slider({ 
			from : 0, 
			to : 100, 
			step : 1, 
			skin : "round", 
			onstatechange : function(value){
				changeProgress(value, $(".status", el).val(), el);
			}
		});

		if(callback)
			  callback(el);
	});
}

/*
 * Make changes in UI on status button and add new value to input field of
 * status in task edit modal.
 */
function changeStatus(status, parentForm)
{
	var value;

	if (status == YET_TO_START)
		value = 0;
	else if (status == COMPLETED)
		value = 100;
	else if (status == IN_PROGRESS)
		value = 1;

	changeProgress(value, status, parentForm);
}

/*
 * Make changes in UI in progress slider and add new value to input field of
 * progress in task edit modal.
 */
function changeProgress(value, status, parentForm)
{	
	// Add progress % to input field
	$("#progress", parentForm).val(value);

	// Show slider for progress
	showProgressSlider(value, status, parentForm);
}

/*
 * Make changes in UI on status selection and display progress slider in task
 * update modal.
 */
function showProgressSlider(value, status, parentForm)
{	
	if (value == 100 || status == COMPLETED){
		$(".status", parentForm).val(COMPLETED);
		$("#progress", parentForm).val(100);
		$("#is_complete", parentForm).val(true);
	}else{
		$("#is_complete", parentForm).val(false);
	}

	if (status == IN_PROGRESS){
		$(parentForm).find(".progress-slider").css("display", "block");
		if($(parentForm).find(".jslider-label-to").is(':visible'))
			$(parentForm).find(".jslider-label-to").hide();
	}else{
		$(parentForm).find(".progress-slider").css("display", "none");
	}
}

function resetForm(formToReset)
{
	$('#progress', formToReset).val(0);
	$('#is_complete', formToReset).val(false);
	$('#priority_type', formToReset).val("NORMAL");
	$('#status', formToReset).val(YET_TO_START);
	$(".progress_slider", formToReset).slider("value", 0);
}

/*
 * After loading update task modal check is_completed is true or false, is it is
 * true so change status and progress, make status completed and progress 100%.
 */
function setForm(formToSet)
{
	var isComplete = $("#is_complete", formToSet).val();

	if (isComplete == "true")
	{
		// loadProgressSlider(formToSet, function(formToSet){
				// Show slider for progress
				showProgressSlider(100, COMPLETED, formToSet);
		// });
	}
	else
	{
		// loadProgressSlider(formToSet, function(formToSet){

			// Show slider for progress
			showProgressSlider($('#progress', formToSet).val(), $('#status', formToSet).val(), formToSet);

			$(".progress_slider", formToSet).slider("value", $('#progress', formToSet).val());

		// });

		
	}
}

// Change Page heading as per selection of owner criteria
function changeHeadingOfPage(heading)
{
	// Change page heading
	$('#new-task-heading').html(heading + '&nbsp<small class="tasks-count"></small>');
}

/*
 * Remove Loading Icon from task list which is just loaded.
 */
function removeLoadingIcon(target)
{
	// Hide loading icon in same task list
	if (target.owner_id)
		$("img[id='task-list-loading-img-" + target.heading + "-" + target.owner_id + "']").hide();
	else
		$("img[id='task-list-loading-img-" + target.heading + "-']").hide();
}

/*
 * Display Task Count from task list in task list header.
 */
function addTaskCount(target)
{
	if (!target.taskCollection)
		return;

	var targetModel = target.taskCollection.at(0);
	
	if (!targetModel)
		return;

	var count = targetModel.get("count");

	// Display task count in header of task list.
	displayTaskCount(count, target.heading, target.owner_id);
}

// Display task count in header of task list.
function displayTaskCount(count, heading, owner_id)
{
	if (count == 0)
		count = "";

	if (owner_id)
	{
		$("span[id='task-count-" + heading + "-" + owner_id + "']").html(count);
		$("span[id='task-count-" + heading + "-" + owner_id + "']").attr("count", count);
	}

	else
	{
		$("span[id='task-count-" + heading + "-']").html(count);
		$("span[id='task-count-" + heading + "-']").attr("count", count);
	}
}

/*
 * Change Task Count from task list in task list header after drag-drop, delete
 * or add task.
 */
function changeTaskCount(target, increased)
{
	var targetModel = target.taskCollection.at(0);
	
	if (!targetModel)
		return;

	var count = null;

	// Get task count from header of task list.
	if (target.owner_id)
		count = $("span[id='task-count-" + target.heading + "-" + target.owner_id + "']").attr("count");
	else
		count = $("span[id='task-count-" + target.heading + "-']").attr("count");

	if (count != null)
	{		
		if (increased)
			count++;
		else
			count--;
	}
	else
		count = 1;

	// Display task count in header of task list.
	displayTaskCount(count, target.heading, target.owner_id);
}

// Make drop down intelligent and return Pending value task to fetch or not
function dropdownintelligence()
{
	// As per selected criteria change owner dropdown's options
	changesOnCriteria();

	// As per selected owner change criteria dropdown's options
	return changesOnOwner();
}

// As per selected criteria change owner dropdown's options
function changesOnCriteria()
{
	var criteria = getCriteria();

	if (criteria == "OWNER")
	{
		// Hide pending task selection options from dropdown
		$(".hide-on-status").show();
		// $(".hide-on-owner").hide();
	}
	else if (criteria == "STATUS")
	{
		// Hide pending task selection options from dropdown
		$(".hide-on-owner").show();
		$(".hide-on-status").hide();
	}
	else
	{
		// show pending task selection options from dropdown
		$(".hide-on-status").show();
		$(".hide-on-owner").show();
	}
}

// As per selected owner change criteria dropdown's options
function changesOnOwner()
{
	// Get selection from owner's dropdown
	var owner = $('#new-owner-tasks').data("selected_item");

	if (owner == "all-pending-tasks")
	{
		// Show owner and status
		$(".hide-on-pending").show();

		// Hide status task selection options from dropdown
		$(".hide-on-all-pending").hide();

		return true;
	}
	else if (owner == "my-pending-tasks" || owner == undefined)
	{
		// Hide owner's and status task selection options from dropdown
		$(".hide-on-pending").hide();

		changeCriteriaToCategory();

		return true;
	}
	else if (owner == CURRENT_DOMAIN_USER.id) // My task
	{
		// Show owner's and status task selection options from dropdown
		$(".hide-on-pending").show();
		$(".hide-on-my-task").hide();

		changeCriteriaToCategory();

		return false;
	}
	else
	// All task
	{
		// Show owner's and status task selection options from dropdown
		$(".hide-on-pending").show();

		return false;
	}
}

// On selection of
function changeCriteriaToCategory()
{
	var criteria = getCriteria();

	if (criteria != "OWNER")
		return;

	$("#new-type-tasks").data("selected_item", "CATEGORY");
	$("#new-type-tasks").closest(".btn-group").find(".selected_name").text("Category");
}

// Adjust Height Of Task List And Scroll as per window size
function adjustHeightOfTaskListAndScroll()
{
	var bodyheight = $(window).height();

	$("#new-task-list-based-condition").height(bodyheight - 155);
	$(".list-tasks").css('max-height', bodyheight - 245);
}

/**
 * Hide task in list view and display column view with loading img. 
 */
function hideListViewAndShowLoading()
{	
	// Hide list view and show column view
	$('#new-task-list-based-condition').show();
	$('#task-list-based-condition').hide();
	$('.tasks-count').html("");

	var criteria = getCriteria();
	if(criteria && criteria != 'CALENDAR'){
		//Hide the calendar view
		$('#task-calendar-based-condition').addClass("hide");
		$('#task-calendar-based-condition').html("");
		// Hide daya and month buttons
		$('#calendarTasksButtons').addClass("hide");
	}
	
	// Shows loading image untill data gets ready for displaying
	$('#new-task-list-based-condition').html(LOADING_HTML);	
}

/**
 * Display task in list view with selected filter. 
 */
function displayListView()
{
	console.log("in displayListView");
	$('#new-task-list-based-condition').hide();
	$('#task-list-based-condition').show();
	
	// Display group view
	$(".group-view").hide();
	
	// Hide group by
	$(".do-onclick-nothing").show();
	
	// Hide list view
	$(".list-view").hide();

	// Display calendar view
	$(".calendar-view").show();

	// Hide daya and month buttons
	$('#calendarTasksButtons').addClass("hide");
	
	var url = getParamsNew();
	
	// When user hit list view first time and my pending is selected as default one, we have to set pending true.
	var owner = $('#new-owner-tasks').data("selected_item");
	if(owner == undefined)
		url = url  + "&pending=" + true;
	
	console.log("url for list view: "+url);	
	
	updateData(url);
}

//
function bindDropdownEvents()
{
	$('.dropdown-menu').find(".group-view").on("click",function(e)
	 {
	    e.stopImmediatePropagation();
	 });
	
	// Click events to agents dropdown of Owner's list and Criteria's list
	$("ul#new-owner-tasks li a,ul#new-type-tasks .new-type-task").on("click", function(e)
	{        
		e.preventDefault();

		// Show selected name
		var name = $(this).html(), id = $(this).attr("href");
		
		var selectedDropDown = $(this).closest("ul").attr("id");
				
		if(selectedDropDown == "new-type-tasks") // criteria type
		    $(this).closest("ul.main-menu").data("selected_item", id);
		else  // owner type
			$(this).closest("ul").data("selected_item", id);
		
		$(this).closest(".btn-group").find(".selected_name").text(name);

		var criteria = getCriteria();

		if(criteria && criteria == "CALENDAR" && !$(this).hasClass("calendar-view"))
		{
			fullCalTasks.fullCalendar( 'refetchEvents' );
			// Hide list view and show column view with loading img
			addDetailsInCookie(this);
			return; 
		}			
				
		// Hide list view and show column view with loading img
		hideListViewAndShowLoading();		
		
		// Hide dropdown
		if($(".type-task-button").hasClass("open"))
			$(".type-task-button").removeClass("open");

		if(criteria == "CATEGORY" || criteria == "DUE" || criteria == "PRIORITY" )
		{
			$(".list-view").css('display', '');
			$(".calendar-view").css('display', '');
		}			

		// Empty collection
		if(TASKS_LIST_COLLECTION != null)
		TASKS_LIST_COLLECTION.collection.reset();
		
		// Add selected details of dropdown in cookie
		addDetailsInCookie(this);
				
		setTimeout(function() { // Do something after 2 seconds
			// Get details from dropdown and call function to create collection
			getDetailsForCollection();
		}, 2000);
	});

	// Change page heading as per owner selection
	$("ul#new-owner-tasks li a").on("click", function()
	{		
		// Change heading of page
		changeHeadingOfPage($('#new-owner-tasks').closest(".btn-group").find(".selected_name").html());
	});	
}

// Change UI and input field 
function applyDetailsFromGroupView()
{
	console.log("In applyDetailsFromGroupView");
	
	var task_criteria_forgroupview = _agile_get_prefs("task_criteria_forgroupview");
	var task_owner_forgroupview = _agile_get_prefs("task_owner_forgroupview");

	console.log(task_criteria_forgroupview + " " + task_owner_forgroupview);
			
	withoutEventChangeDropDowns(task_criteria_forgroupview, task_owner_forgroupview, true);	

	// Hide group view
	$(".group-view").hide();
	
	// Display group by
	$(".do-onclick-nothing").show();
	
	// Display list view
	$(".list-view").show();

	// Display calendar view
	$(".calendar-view").show();
	
	var ownerType = $('#new-owner-tasks').data("selected_item");
	
	// Add owner type in cookie
	addDetailsInCookie($("ul#new-owner-tasks").find('a[href='+ownerType+']'));
	
	// Add task type in cookie
	addDetailsInCookie($("ul#new-type-tasks").find('a[href='+getCriteria()+']'));
}

//
function withoutEventChangeDropDowns(task_criteria, task_owner, apply_groupview)
{
	console.log("In withoutEventChangeDropDowns");
	console.log(task_criteria + " " + task_owner);	
	
	if (task_criteria)
	{
		var res = task_criteria.split("_");

		console.log(res);

		$('#new-type-tasks').data("selected_item", res[1]);
		$('#new-type-tasks').closest(".btn-group").find(".selected_name").text(res[0]);
	}

	if (task_owner)
	{
		var res = task_owner.split("_")

		console.log(res);

		$('#new-owner-tasks').data("selected_item", res[1]);
		$('#new-owner-tasks').closest(".btn-group").find(".selected_name").text(res[0]);
	}

	if(!task_criteria && !task_owner && apply_groupview)
	  {
		// Type of task
		$('#new-type-tasks').data("selected_item", "DUE");
		$('#new-type-tasks').closest(".btn-group").find(".selected_name").text("Due");		
	  }
	
	// Change heading of page
	changeHeadingOfPage($('#new-owner-tasks').closest(".btn-group").find(".selected_name").html());

	// Get details from dropdown and call function to create collection
	getDetailsForCollection();
}

//Add details about task list where add task btn is clicked
function addTasklListDetails(addTaskElement)
{
	console.log("In addTasklListDetails");
	console.log(addTaskElement);	
	
	if(!$(addTaskElement).hasClass("list-bottom"))
		return;	
	
	switch (getCriteria()) {
	case "STATUS":
	{ 
		$("#status", $("#taskForm")).val($(addTaskElement).attr("heading"));
		changeStatus($(addTaskElement).attr("heading"), $("#taskForm"));
	}
		break;	
	case "CATEGORY":
	{$("#type", $("#taskForm")).val($(addTaskElement).attr("heading"));}
		break;
	case "OWNER":
	{$("#owners-list", $("#taskForm")).val($(addTaskElement).attr("ownerID"));}
		break;
	case "DUE":
	{		
		var epochTime = getNewDueDate($(addTaskElement).attr("heading"));
		var startDate = getDateInFormatFromEpoc(epochTime);
		$("#taskForm").find("input.date").val(startDate);
		// .datepicker('update');		
	}
		break;		
	case "PRIORITY":
	{$("#priority_type", $("#taskForm")).val($(addTaskElement).attr("heading"));}
		break;	
	}	
}

/**
 * Display task in calendar view with selected filter. 
 */
function displayCalendarView()
{
	// Hide calendar view
	$(".calendar-view").hide();

	// Display group view
	$(".group-view").hide();
	
	// Hide group by
	$(".do-onclick-nothing").show();

	// Display group view
	$(".list-view").show();

	$('#new-task-list-based-condition').hide();
	$('#task-list-based-condition').hide();
	$('#task-calendar-based-condition').removeClass("hide");
	$('#calendarTasksButtons').removeClass("hide");

	var calendarView = (!_agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id)) ? 'month' : _agile_get_prefs('taskCalendarDefaultView_'+CURRENT_DOMAIN_USER.id);

	$('#'+calendarView,$('#calendarTasksButtons')).addClass('bg-light');

	head.js(LIB_PATH + 'lib/jquery-ui.min.js', LIB_PATH + 'lib/fullcalendar.min.js', function()
	{
		$('#task-calendar-based-condition').html("");
		getCalendarView();
		initilizeTasksCalendarViewListeners();
	});

}/**
 * This page contains all the click or other events related to Bria calling
 * 
 *@author Prakash 
 */
 
$(function()
{
	
//mute the current call	
	$('body').on('click', '.noty_bria_mute', function(e)
	{
		
		e.preventDefault();
		var json = {"command" : "mute"};
	  	var action = makeCallAction(json);
	  	sendActionToClient(action);
		$('.noty_buttons').find('.noty_bria_unmute').css('display','inline');
		$('.noty_buttons').find('.noty_bria_mute').toggle();
		
	});

//unmute the call	
	$('body').on('click', '.noty_bria_unmute', function(e)
	{
		
		e.preventDefault();
		var json = {"command" : "unMute"};
	  	var action = makeCallAction(json);
	  	sendActionToClient(action);
	  	
		$('.noty_buttons').find('.noty_bria_unmute').toggle();
		$('.noty_buttons').find('.noty_bria_mute').toggle();
	});


	
//	This function is to hide the information shown to the client when the user is not running bria client
	$('#briaInfoModal').on('click', '#bria_info_ok', function(e)	{
		e.preventDefault();
		$('#briaInfoModal').modal('hide');
	});
	
	
// this function is to hide the already on call alert 	
	$('#briaInfoModal').on('click', '#bria_status_ok', function(e)	{
		e.preventDefault();
		$('#briaInfoModal').modal('hide');
	});
	
	

	
});

/*
 * this wil create a dynamic message to show in noty - as per the current phhone status
 */
function _getMessageBria(message, callback){
	var state = message.state;
	var number = message.number;
	var callId = message.callId;
	var displayName = message.displayName;
	var message="";

	try{
		var inValid = /^\s/;
		var k = inValid.test(number);
		if(k){
			number = "+" + number.trimLeft()
		}
	}catch(e){
	}
	console.log("state--" + state + " number --" + number + "   briaCallId" + callId + "  displayName" + displayName);
	
	if (state == "ringing"){
			
			globalCall.callDirection = "Incoming";
			globalCall.callStatus = "Ringing";
			globalCall.calledFrom = "Bria";
			globalCall.callId = callId;
			globalCall.callNumber = number;
			globalCallForActivity.justCalledId = callId;
				
	}else if(state == "connected"){
			globalCall.callStatus = "Connected";
	
	}else if(state == "missed"){
		//To_Number = number;
		
		globalCall.callDirection = "Incoming";
		globalCall.callStatus = "Missed";
		
		globalCall.callId = callId;
		globalCall.callNumber = number;
		globalCallForActivity.justCalledId = callId;
		
	}else if(state == "connecting"){
		//var contactDetailsObj = agile_crm_get_contact();
		//displayName = getContactName(contactDetailsObj);
		
		globalCall.callDirection = "Outgoing";
		globalCall.callStatus = "Connecting";
		
		globalCall.callId = callId;
		globalCall.callNumber = number;
		globalCallForActivity.justCalledId = callId;
		
	}else if(state == "failed"){
		
		globalCall.callStatus = "Failed";
		globalCallForActivity.justCalledId = callId;

	
	}else if(state == "ended"){
		if(globalCall.callStatus && globalCall.callStatus == "Connected"){
			globalCall.callStatus = "Answered"; //change form completed
		}else if(globalCall.callStatus && globalCall.callStatus == "Connecting"){
			globalCall.callStatus = "Busy";
		}else if(globalCall.callStatus && globalCall.callStatus == "Ringing"){
			globalCall.callStatus = "Missed";
		}
		
		number = globalCall.callNumber;
		replicateglobalCallVariable();
		resetglobalCallVariables();		
		
		
		//this is called to save the call activity of the user after the call
		if(!callId)
			callId = "";
		var action = {"command":  "getLastCallDetail", "number": number, "callId": callId};
		sendActionToClient(action);
	}
}

/*
 * This will show the note to the user after the call is completed sucessfully
 */
function saveCallNoteBria(){
	
	if(	globalCallForActivity.justCalledId == globalCallForActivity.justSavedCalledIDForNote){
		return;
	}
	globalCallForActivity.justSavedCalledIDForNote = globalCallForActivity.justCalledId;
	
	if(!globalCallForActivity.callDirection || !globalCallForActivity.callStatus  || !globalCallForActivity.callNumber){
		return;
	}
	
	var callStatus = globalCallForActivity.callStatus;
	var direction = globalCallForActivity.callDirection;
	var number = globalCallForActivity.callNumber;
	var callId = globalCallForActivity.callId;
	var duration = globalCallForActivity.duration;
	var contact;
	var desc;
	resetglobalCallForActivityVariables();
	
	var noteSub = direction + " Call - " + callStatus;

	if(direction == "Incoming"){
	    accessUrlUsingAjax("core/api/contacts/search/phonenumber/"+number, function(responseJson){
	    	if(!responseJson){
	    		return showNewContactModal(number);
	    	}
	    	contact = responseJson;
	    	contact_name = getContactName(contact);
	    	if(callStatus == "Answered"){
	    		
				var data = {};
				data.url = "/core/api/widgets/bria/";
				data.subject = noteSub;
				data.number = number;
				data.callType = "inbound";
				data.status = "answered";
				data.duration = duration;
				data.contId = contact.id;
				data.contact_name = contact_name;
				data.widget = "Bria";
				showDynamicCallLogs(data);
/*				
				var el = $('#noteForm');

				var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="{{id}}">{{name}}</li>');
			 	// Adds contact name to tags ul as li element
				$('.tags',el).html(template({name : contact_name, id : contact.id}));

			 	$("#noteForm #subject").val(noteSub);
					$("#noteForm #description").val("Call duration - "+ twilioSecondsToFriendly(duration));
					$("#noteForm").find("#description").focus();
				$('#noteModal').modal('show');
				agile_type_ahead("note_related_to", el, contacts_typeahead);*/
				
	    	}else{
	    		var note = {"subject" : noteSub, "message" : "", "contactid" : contact.id,"phone": number, "callType": "inbound", "status": callStatus, "duration" : 0 };
				autosaveNoteByUser(note);
	    	}
	    });
	}else{
		var cntId = globalCall.contactedId;
		if(cntId){
				if( callStatus == "Answered"){
					twilioIOSaveContactedTime();
					accessUrlUsingAjax("core/api/contacts/"+cntId, function(resp){
					var json = resp;
					if(json == null) {
						return;
					}

					contact_name = getContactName(json);
					var data = {};
					data.url = "/core/api/widgets/bria/";
					data.subject = noteSub;
					data.number = number;
					data.callType = "outbound-dial";
					data.status = "answered";
					data.duration = duration;
					data.contId = cntId;
					data.contact_name = contact_name;
					data.widget = "Bria";
					showDynamicCallLogs(data);
					
/*					var el = $('#noteForm');
				 	$('.tags',el).html('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ cntId +'">'+contact_name+'</li>');
				 	$("#noteForm #subject").val(noteSub);
				 	$("#noteForm #description").val("Call duration - "+ twilioSecondsToFriendly(duration));
						$("#noteForm").find("#description").focus();
					$('#noteModal').modal('show');
					agile_type_ahead("note_related_to", el, contacts_typeahead);*/
					
					});
				}else{
					var note = {"subject" : noteSub, "message" : "", "contactid" : cntId,"phone": number,"callType": "outbound-dial", "status": callStatus, "duration" : 0 };
					autosaveNoteByUser(note);
				}
		}
	}
}

/*
 * This will save the note for the call
 */
function autosaveNoteByUser(note){
	$.post( "/core/api/widgets/twilio/autosavenote", {
		subject: note.subject,
		message: note.message,
		contactid: note.contactid,
		phone: note.phone,
		callType: note.callType,
		status: note.status,
		duration: note.duration
		});
}

/*
 * This will save the activity for call 
 */
function saveCallActivityBria(call){
	
	if(	globalCallForActivity.justCalledId == globalCallForActivity.justSavedCalledIDForActivity){
		return;
	}
	globalCallForActivity.justSavedCalledIDForActivity = globalCallForActivity.justCalledId;

	if(call.status == "Answered"){
		return;
	}
	if(call.direction == "Outgoing" || call.direction == "outgoing"){
		var callerObjectId = globalCall.contactedId;
		if(!callerObjectId){
			return;
		}
		$.post( "/core/api/widgets/bria/savecallactivityById",{
			id:callerObjectId,
			direction: call.direction, 
			phone: call.phone, 
			status : call.status,
			duration : call.duration 
			});
		
	}else{
		$.post( "/core/api/widgets/bria/savecallactivity",{
			direction: call.direction, 
			phone: call.phone, 
			status : call.status,
			duration : call.duration
			});
	}
}

/*
 * This method sends the command to client to gets the log - for a given number
 */
function getLogsForBria(num){
	
	if(window.location.hash.indexOf("contact/") == -1)
	  {
		return;
	  }
	
	var logNumber;
	var parameter = {};
	parameter['error_message'] = "There is no phone number associated with this contact. <a href='#contact-edit' class='text-info' style='color:#23b7e5'>Add phone number</a>";
	parameter['num'] = agile_crm_get_contact_properties_list("phone");

	if($("#bria-logs-panel").length > 0){
			$("#bria_logs_load").show();
		}else{
			getTemplate('bria-logs', parameter, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#Bria').html($(template_ui));	
				
				if(parameter['num'].length == 0){
					$("#bria_no_phone").html(parameter.error_message);
				}

				$("body").on("change", '#bria_contact_number', function(e)
						{
							$("#bria_logs_load").show();
							getLogsForBria($("#bria_contact_number").val());
						});
				
			}, "#Bria");
		}
	
	
	if(num){
		logNumber = num;
		//$("#bria_contact_number option[value='"+num+"']").attr('selected', 'selected');
	}else{
		$('#bria_contact_number option:eq(0)').attr('selected', 'selected');
		logNumber = $("#bria_contact_number option:selected").val();
	}
	
		if(parameter['num'].length > 0){
			if(!logNumber){
				logNumber = parameter['num'][0].value;
			}
			var previousCalledClient  = globalCall.calledFrom;
			var action = {"command":  "getLogs", "number": logNumber, "callId": ""};
			globalCall.calledFrom = "Bria";
			sendActionToClient(action);
			globalCall.calledFrom = previousCalledClient;
		}
}

/*
 * This function handles the logs message sent from the client side to server
 */
function handleLogsForBria(message){
	$("#bria_logs_load").hide();
	
	getTemplate('bria-logs-fetch', message.data , undefined, function(template_ui){
		if(!template_ui)
			  return;
	   	var bria_logs_template = $(template_ui);
		$('#bria-logs-panel').html(bria_logs_template);

			// Load jquery time ago function to show time ago in logs
			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$(".time-ago", bria_logs_template).timeago();
			});

	}, "#bria-logs-panel");
}/**
 * Global object of call campaign to maintain state, call status and contact
 * details.
 * 
 * STATE = START, DISCONNECTED,PAUSE
 * Start = you can call for auto-dial // This is initial state
 * Pause = You cant dial from campaign // this state tells not to make twilio call request  because the campaing has been paused 
 * Disconnected = Call disconnected by twilio error or no answer or failed. //This state tells twilio call has been disconnected by twilio
 * 
 *call_status = IDEAL,CALL-ENDED,CONNECTED,CONNECTING
 *Ideal = The campaign is in ideal state // twilio call function is not called
 *Connecting = The camapign is connecting the call  //The twilio call has been made 
 *Connected = The call has been connected. // call connected by twilio
 *
 *
 *To start the manual call you have to call the below methods:
 * 1)changeContactDeatilView(); // only changes the contact detail page view taking the current object from campaign
 * 2)startCall();	//It will reset the campaign variabe, get contact detail, edit container and then make campaign call
 *
 *To start the call in case of autodial 
 * 1)getContactDetails();
 * 2)editCallContainer();
 * 3)makeCampaigncall();
 * 
 * 
 */

/**
 * Initialised the campaign variable to default value.
 */

var CALL_CAMPAIGN = {};

function campaignVariableToInitialState()
{
	CALL_CAMPAIGN = { "start" : false, "state" : "START", "total_count" : 0, "current_count" : 0, "temp_count" : 0, "contact_id_list" : null, "cursor" : 0,
		"select_all" : false, "autodial" : false, "total_time" : 0, "user_timer" : 0, "current_contact" : null, "current_contact_name" : null,
		"current_contact_img" : null, "current_contact_email" : null, "current_contact_phonenumber" : null, "countdown_timer" : 0, "call_duration" : 0,
		"call_status" : "IDEAL", "contact_update" : false, "selected_number" : null, "call_from_campaign" : false, "remember_phone" : [],
		"last_clicked" : null, "tag" : null, "has_tag" : false, "callObject" : null, "timeObject" : null };

}

/**
 * start call campaign will start calling to selected contacts or to all
 * contacts if selected all is true then fetch next 25 and call them too.
 * 
 * @param id_array
 */

function startCallCampaign(id_array)
{
	try
	{
		console.log("In startCallCampaign");

		// If collection is there then proceed otherwise refresh the page
		if (!App_Contacts.contactsListView || !App_Contacts.contactsListView.collection)
			return;

		console.log("collection found");
		// step1:
		CALL_CAMPAIGN.start = true;
		// step2:
		addCallContainer();
		// step3:
		updateContactInCampaignVariable();
		// step4:

		// step5:
		startCall();
	}
	catch (err)
	{
		console.log("error-->" + err.message);
		CALL_CAMPAIGN.start = false;
		//routeToPage("contacts");
		$('#startCampaignAgain').modal('show');
	}

}

/**
 * It will stop the ongoing campaign and disconnect the current call if any.
 * 
 */
function stopCallCampaign()
{
	console.log("In stopCallCampaign");

	// step1:
	disconnectAnyTwilioCall();
	// step2:
	removeCallContainer();
	// step3:
	campaignVariableToInitialState();
	// step4:
	routeToPage("contacts");

}

function showSettingPage()
{

	// changes for new requirement
	// when SELECT_ALL is true i.e., all contacts are selected.
	campaignVariableToInitialState();
	CALL_CAMPAIGN.contact_id_list = get_contacts_bulk_ids();

	if (CALL_CAMPAIGN.contact_id_list.length === 0)
	{
		console.log("all are selected");
		// Get id of first selected all contacts
		CALL_CAMPAIGN.select_all = true;
		CALL_CAMPAIGN.contact_id_list = getIdOfContacts(App_Contacts.contactsListView.collection.toJSON());
		CALL_CAMPAIGN.total_count = getAvailableContacts();
	}
	else
	{
		console.log("some are selected");
		CALL_CAMPAIGN.total_count = CALL_CAMPAIGN.contact_id_list.length;
	}

	console.log(CALL_CAMPAIGN.contact_id_list);

	Backbone.history.loadUrl("#call-contacts");

}

/**
 * this will route the page to given url
 * 
 * @param url
 */
function routeToPage(url)
{
	if(window.location.hash == ("#" + url))
        return;

	if (window.location.hash.indexOf("#" + url) != -1)
	{
		Backbone.history.loadUrl("#" + url);
	}
	else
	{
		Backbone.history.navigate(url, { trigger : true });
	}
}

/**
 * This will end any connected call by twilio
 */
function disconnectAnyTwilioCall()
{
	if (Twilio.Device.status() == "busy")
	{
		Twilio.Device.disconnectAll();
	}
}

/**
 * true if more contact is remaining to call otherwise false
 */
function hasMoreContactLeftToDial()
{
	var value = CALL_CAMPAIGN.total_count - 1;
	if (CALL_CAMPAIGN.current_count >= value)
	{
		return false;
	}
	else
	{
		return true;
	}
}

function getNextContactIdSet()
{
	// fetch next 25 contacts id
	if ((CALL_CAMPAIGN.select_all == true) && (CALL_CAMPAIGN.current_count == (CALL_CAMPAIGN.contact_id_list.length - 1)))
	{
		if (CALL_CAMPAIGN.current_count == (CALL_CAMPAIGN.total_count-1))
			return;

		getNextContactsId(function(id_array)
		{
			CALL_CAMPAIGN.contact_id_list = CALL_CAMPAIGN.contact_id_list.concat(id_array);
		});

	}
}

/**
 * This will automatically dial next call otherwise return false
 */
function dialNextCallAutomatically()
{

	if (hasMoreContactLeftToDial())
	{
		pointToNextContact();
		updateContactInCampaignVariable();
		changeContactDeatilView();
		startCall();
		getNextContactIdSet();
	}
	else
	{
		console.log("Last call done");
		stopCallCampaign();
		var alertMessage = '<center><div class="alert alert-success fade in" style="z-index:10000;margin-bottom:0px;margin-right:-4px;font-size: 14px;"><a href="#" class="close" data-dismiss="alert" aria-label="close" title="close">×</a><strong>Congrats!</strong> Your call campaign has been completed successfully.</div></center>';
		var timeToDisplay = 5000;
		showCampaignAlert(alertMessage, timeToDisplay);
		return;
	}
}

/**
 * This will called for manual dialing of call
 */
function dialNextCallManually()
{

	restartCalling();
	getNextContactIdSet();
}

/**
 * 
 */

function startCall()
{
	console.log("In startCall");
	console.log(CALL_CAMPAIGN.total_count);
	console.log(CALL_CAMPAIGN.current_count);
	console.log(CALL_CAMPAIGN.contact_id_list[CALL_CAMPAIGN.current_count]);

	// step1 : check if campaign is already started
	if (!CALL_CAMPAIGN.start)
		return;

	// step2: reset some variable to make next call without error
	resetSomeCampaignVariable();
	// step3:
	editCallContainer();
	// step4: After 2 sec procedure will start.
	setTimeout(function()
	{
		if (CALL_CAMPAIGN.state == "START" && CALL_CAMPAIGN.autodial == true)
			makeCampaignCall();
	}, 2000);
}

/**
 * fetch the current contact and store in camaign variable
 */
function updateContactInCampaignVariable()
{
	try
	{
		CALL_CAMPAIGN.current_contact = getContact(CALL_CAMPAIGN.contact_id_list[CALL_CAMPAIGN.current_count]);
		getContactDetails();
		console.log(CALL_CAMPAIGN.current_contact);
	}
	catch (err)
	{
		console.log("error" + err.message);
	}

}

/**
 * It will move the current object pointer to next contact..
 */
function pointToNextContact()
{
	// Increase current_count
	var lastClick = CALL_CAMPAIGN.last_clicked;
	if (lastClick != "CONTINUE" && lastClick != "STOP")
	{
		if (CALL_CAMPAIGN.current_count <= CALL_CAMPAIGN.total_count)
		{
			CALL_CAMPAIGN.current_count++;
		}
	}

}

/**
 * Show the alert in campaign style to the user for n seconds
 */
function showCampaignAlert(alertMessage, timeToDisplay)
{
	try
	{
		$('#call-campaign-content').show();
		$("div#call-campaign-content center:first").remove();
		$("#call-campaign-content").prepend(alertMessage);
		removeAlertAutomaticallyAfter(timeToDisplay);
	}
	catch (err)
	{
		console.log("error in showCampaignAlert" + err.message);
	}
}

/**
 * 
 * This function is actually calling the twiliocall function to make the call If
 * the device is busy it will show alert message and return If the state is
 * pause it will show the aert messae and return This will take the nunber to
 * dail and dial the call
 * 
 */
function makeCampaignCall()
{
	console.log("In makeCampaignCall");

	// Step1: check whether to make a call or not
	if (Twilio.Device.status() == "busy")
	{
		$('#alreadyOnCall').modal('show');
		return;
	}
	if (CALL_CAMPAIGN.state === "PAUSE")
	{
		$('#pleaseWait').modal('show');
		return;
	}
	// Step2: get selected phone number to call otherwise select default phone
	if ($("#call_campaign_contact_number").length)
	{
		CALL_CAMPAIGN.selected_number = $("#call_campaign_contact_number option:selected").attr("value");
		$("#call_campaign_contact_number").attr("disabled", "disabled");
	}
	// else get from contact
	else
	{
		CALL_CAMPAIGN.selected_number = getPropertyValue(CALL_CAMPAIGN.current_contact.properties, "phone");
	}

	// Step3: If selected number is present then dial
	if (CALL_CAMPAIGN.selected_number)
	{

		// step3.1:Twilio setings for outgoing call
		TWILIO_CALLTYPE = "Outgoing";
		TWILIO_DIRECTION = "outbound-dial";
		TWILIO_IS_VOICEMAIL = false;

		// step3.2:update campaign variable
		CALL_CAMPAIGN.call_from_campaign = true;
		var rampUP_Time = 0;

		// step3.3:check for 1st contact and dial without rampup time/delay for
		// autodial
		if (CALL_CAMPAIGN.autodial)
		{
			var current_id = (CALL_CAMPAIGN.contact_id_list[CALL_CAMPAIGN.current_count]);
			var first_id = CALL_CAMPAIGN.contact_id_list[0];
				
			if (current_id != first_id)
			{
				// Step3.4: Initialize campaign variables
				rampUP_Time = CALL_CAMPAIGN.user_timer * 1000; // Time selected
				// by user to
				// start call
				// after n
				// seconds
				var callText = " Next call starts in ";
				CALL_CAMPAIGN.countdown_timer = CALL_CAMPAIGN.user_timer; // timer
				// variable
				// set
				// to
				// run
				// countdown
				// to
				// start
				// call

				// Step3.5: Show message when the next cal is going to start
				changeHtml("#callStartText", callText);
				changeHtml("#callStartTime", CALL_CAMPAIGN.countdown_timer);
				Tick();

				// Step3.6: show pause and resume button
				$("#pauseCallDiv").show();
				$("#campaign_resumeCall").hide();
				$("#campaign_pauseCall").show();
				$("#start").show();
			}
			// step3.7: Change the call icon from green to grey
			// $("#start").hide();
			// $("#start").css({'background':'rgb(185, 185,
			// 185)','cursor':'context-menu'});
			// $("#start").attr('id','non-start');
		}

		// step3.8: change the state to pause so that in mean time no other call
		// can be dialled from campaign
		CALL_CAMPAIGN.state = "PAUSE";
		console.log("CALL will start after -- >" + rampUP_Time + "sec.");

		// step3.9: twiliocall function is called after n sec, where n=0 for
		// manual or n otherwise
		CALL_CAMPAIGN.callObject = setTimeout(function()
		{
			CALL_CAMPAIGN.last_clicked = null; // this is to check the last
			// click variable in disconnect
			// call
			CALL_CAMPAIGN.state = "START";
			twiliocall(CALL_CAMPAIGN.selected_number, getContactName(CALL_CAMPAIGN.current_contact));
			CALL_CAMPAIGN.callObject = null;
		}, rampUP_Time);

	}

}
/**
 * Write html inside id or class.
 */
function changeHtml(select, value)
{
	$(select).html(value);
}

/**
 * For Auto dial restart calling from continue/call/resume btn only to current
 * call
 */
function restartCalling()
{
	resetSomeCampaignVariable();
	editCallContainer();
	if (CALL_CAMPAIGN.autodial == true)
	{
		makeCampaignCall();
	}
}

/**
 * Reset some variable to initial state : State variables we are not doing
 * anything with contact data here
 */
function resetSomeCampaignVariable()
{
	// Remove Dialpad
	if ($(".call_campaign_dialpad_btns").length != 0)
		$(".call_campaign_dialpad_btns").remove();

	// CALL_CAMPAIGN.call_duration : The current call duration
	CALL_CAMPAIGN.call_duration = 0;

	// CALL_CAMPAIGN.countdown_timer : Timer to start call after n seconds
	CALL_CAMPAIGN.countdown_timer = 0;

	// CALL_CAMPAIGN.selected_number : The number to dial the call
	CALL_CAMPAIGN.selected_number = null;

	// CALL_CAMPAIGN.callObject : The setTimeOut object to call twilio call
	// function
	CALL_CAMPAIGN.callObject = null;

	// CALL_CAMPAIGN.timeObject : The setTimeOut object to decrease the
	// countdown timer
	CALL_CAMPAIGN.timeObject = null;

	// CALL_CAMPAIGN.call_from_campaign : true if the call is dialled by
	// campaign otherwise manually
	CALL_CAMPAIGN.call_from_campaign = false;

	// CALL_CAMPAIGN.contact_update : true if the contact update is calle by
	// campaign otherwise false
	CALL_CAMPAIGN.contact_update = false;

	// CALL_CAMPAIGN.call_status : IDEAL if the twiliocall function is not
	// called
	CALL_CAMPAIGN.call_status = "IDEAL";
}

/** ***** Contacts function ****** */
/**
 * Returns array of ids of given contacts.
 */
function getIdOfContacts(contactsArray)
{
	console.log("In getIdOfContacts");
	console.log(contactsArray);

	var idArray = [];
	for (var i = 0; i < contactsArray.length; i++)
	{
		idArray[idArray.length] = contactsArray[i].id;
	}

	return idArray;
}

/**
 * 
 * It takes the contact id as a prarameter and return the contact object
 * 
 * @param contactId
 * @returns
 */
function getContact(contactId)
{
	console.log("In getContact");

	return App_Contacts.contactsListView.collection.where({ id : contactId })[0].toJSON();

	// var json = $.parseJSON($.ajax({ url : '/core/api/contacts/' + contactId,
	// async : false, dataType : 'json' }).responseText);

	// return json;
}

/**
 * IT will get the properties of contact. If the contact has no phone it will
 * set the campaign in pause state and autodial will not work
 */
function getContactDetails()
{
	// Contact name in normal format like "fname lname"
	To_Name = getContactName(CALL_CAMPAIGN.current_contact);

	// Contact id for twilio reference
	TWILIO_CONTACT_ID = CALL_CAMPAIGN.current_contact.id;

	CALL_CAMPAIGN.current_contact_name = To_Name;
	CALL_CAMPAIGN.current_contact_email = getPropertyValue(CALL_CAMPAIGN.current_contact.properties, "email");
	CALL_CAMPAIGN.current_contact_phonenumber = getPhoneNumbersInArray(CALL_CAMPAIGN.current_contact.properties);
}

/**
 * It will return the phone in array having more than one contact
 */
function getPhoneNumbersInArray(items)
{
	var va = [];
	var name = "phone";
	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == name)
		{
			// If phone number has value only then add to array
			if (items[i].value != "" || items[i].value != null)
				va[va.length] = items[i].value;
		}
	}
	return va;
}

/** ***** Fetching next contacts related functions ****** */
/**
 * Fetch next 25 contacts on cursor from db and append ids in contact id list of
 * call campaign.
 */
function getNextContactsId(callback)
{
	console.log("In getNextContactsId");

	var url = null;

	// Get sort key
	var sortKey = _agile_get_prefs("sort_by_name");
	if (!sortKey || sortKey == null)
	{
		sortKey = '-created_time';
		// Saves Sort By in cookie
		_agile_set_prefs('sort_by_name', sortKey);
	}

	console.log("1. CALL_CAMPAIGN.cursor");
	console.log(CALL_CAMPAIGN.cursor);

	// First time get cursor from collection
	if (CALL_CAMPAIGN.cursor == 0 || CALL_CAMPAIGN.cursor == undefined)
		CALL_CAMPAIGN.cursor = getCursor();

	console.log("after getcursor() CALL_CAMPAIGN.cursor");
	console.log(CALL_CAMPAIGN.cursor);

	if (!CALL_CAMPAIGN.cursor)
		return;

	// If there is a filter saved in cookie then show filter results
	if (_agile_get_prefs('dynamic_contact_filter') && !_agile_get_prefs('company_filter'))
		url = 'core/api/filters/filter/dynamic-filter?data=' + encodeURIComponent(_agile_get_prefs('dynamic_contact_filter')) + '&cursor=' + CALL_CAMPAIGN.cursor + '&page_size=25&global_sort_key=' + sortKey;
	else if (_agile_get_prefs('dynamic_company_filter') && _agile_get_prefs('company_filter'))
		url = 'core/api/filters/filter/dynamic-filter?data=' + encodeURIComponent(_agile_get_prefs('dynamic_company_filter')) + '&cursor=' + CALL_CAMPAIGN.cursor + '&page_size=25&global_sort_key=' + sortKey;
	else if (_agile_get_prefs('contact_filter'))
		url = 'core/api/filters/query/' + _agile_get_prefs('contact_filter') + '?cursor=' + CALL_CAMPAIGN.cursor + '&page_size=25&global_sort_key=' + sortKey;
	else if (_agile_get_prefs('company_filter'))
		url = 'core/api/contacts/companies?cursor=' + CALL_CAMPAIGN.cursor + '&page_size=25&global_sort_key=' + sortKey;
	else
		url = '/core/api/contacts?cursor=' + CALL_CAMPAIGN.cursor + '&page_size=25&global_sort_key=' + sortKey;

	// Get next 25 contacts
	$.ajax({ url : url, dataType : 'json', success : function(nextContacts)
	{

		console.log("nextContacts");
		console.log(nextContacts);

		// update CURRENT_CURSOR for next fetch
		CALL_CAMPAIGN.cursor = nextContacts[nextContacts.length - 1].cursor;

		console.log("after contacts fetch CALL_CAMPAIGN.cursor");
		console.log(CALL_CAMPAIGN.cursor);

		// Get Id of fetched contact
		var idArray = getIdOfContacts(nextContacts);

		return callback(idArray);

	} });

}

/**
 * Get cursor from contacts collection
 * 
 * @returns
 */
function getCursor()
{
	console.log("In getCursor");
	var contactsJson = App_Contacts.contactsListView.collection.toJSON();
	return contactsJson[CALL_CAMPAIGN.current_count].cursor;
}

/**
 * It will add the container for noty to dail calls
 */
function addCallContainer()
{
	// show the div for call campaign
	$('#call-campaign-content').show();
	$('#call-campaign-content').html(getTemplate("call-campaign-start"));
	$('body').find('#wrap').addClass("call-campaign-running"); // the class is
}

/**
 * It will remove the contaner from page
 */
function removeCallContainer()
{
	try
	{
		$('#call-campaign-content').find('#callnoty-container').remove();
		$('body').find('#wrap').removeClass("call-campaign-running");
		// Remove Dialpad if there
		if ($(".call_campaign_dialpad_btns").length != 0)
			$(".call_campaign_dialpad_btns").remove();
	}
	catch (err)
	{
		console.log("error" + err.message);
	}

}

/**
 * It will automatically remove alert of campaign
 */
function removeAlertAutomaticallyAfter(time)
{
	if (CALL_CAMPAIGN.alertObject != null)
	{
		clearTimeout(CALL_CAMPAIGN.alertObject);
	}
	CALL_CAMPAIGN.alertObject = setTimeout(function hide()
	{
		$("div#call-campaign-content center:first").remove();
	}, time);
}

/**
 * This will edit the container with the current object of campaign get contact
 * method
 */
function editCallContainer()
{
	CALL_CAMPAIGN.temp_count = CALL_CAMPAIGN.current_count + 1;
	$('#call-campaign-content').find('#callnoty-container').html(getTemplate("call-campaign-body", CALL_CAMPAIGN));

	var dialpad = $(getTemplate("campaign-dialpad"), {});
	$('.campaign_noty_buttons').append(dialpad);

	accessUrlUsingAjax("core/api/voicemails", function(resp){

		var responseJson = resp;
		getTemplate("campaign-voicemail",responseJson, undefined, function(template_ui){
			if(!template_ui)
				  return;
				
			$('.campaign_voicemail_buttons').html($(template_ui));
			


		}, null);
	});
	lookForSelectedNumber();
}

/*
 * If contact have multiple number and so display selected number in list If
 * number is present in select box then select it. if number is present then
 * save it in select_number varables ** If the contact having many number is
 * selected to change the callin number in campaign. It wills store the number
 * to show in future : campaign variable
 */
function lookForSelectedNumber()
{
	CALL_CAMPAIGN.selected_number = null;
	CALL_CAMPAIGN.remember_phone = setSelectedPhone(CALL_CAMPAIGN.remember_phone, TWILIO_CONTACT_ID);

	if (CALL_CAMPAIGN.selected_number == null)
	{
		if ($("#call_campaign_contact_number"))
		{
			if ($("#call_campaign_contact_number > option").length > 1)
			{
				$("#call_campaign_contact_number option:selected").next().attr('selected', 'selected');
			}
		}
	}

	$("#call_campaign_contact_number").change(function()
	{
		console.log("In call_campaign_contact_number change function");
		console.log($(".noty_twilio_call"));
		CALL_CAMPAIGN.selected_number = $("#call_campaign_contact_number").val();
		CALL_CAMPAIGN.remember_phone = setValueInArray(CALL_CAMPAIGN.remember_phone, TWILIO_CONTACT_ID, CALL_CAMPAIGN.selected_number);
	});

}

/**
 * IT will show the countdown time to start the call
 */
function Tick()
{
	if (CALL_CAMPAIGN.countdown_timer <= 0)
	{
		$("#callStartText").html("");
		$("#callStartTime").html("");
		return;
	}

	CALL_CAMPAIGN.countdown_timer -= 1;
	$("#callStartTime").html(CALL_CAMPAIGN.countdown_timer + '  sec');

	// Set for next sec
	CALL_CAMPAIGN.timeObject = window.setTimeout("Tick()", 1000);
}

/**
 * This will set the value in remember_phone variable if not present - for
 * manual call only
 */
function setValueInArray(arrayObject, id, value)
{
	// var obj = $.parseJSON(arrayObject);
	var obj = arrayObject;
	var flag = false;
	// check if id is present -- if present then modify the existing selected
	// number
	// if not present then push a new record
	if (obj != undefined)
	{
		$.each(obj, function(index, element)
		{
			// alert(element.timeStamp);
			if (element.id == id)
			{
				flag = true;
				element.number = value;
			}
		});
	}
	else
	{
		obj = [];
	}
	if (!flag)
	{
		obj.push({ "id" : id, "number" : value });
	}
	return obj;
}

// function to select the number in select box if phone number is present -- for
// manual call only
// set the number in selected number variable if the number is present
function setSelectedPhone(arrayObject, id)
{
	// var obj = $.parseJSON(arrayObject );
	var obj = arrayObject;
	if (obj != undefined)
	{
		$.each(obj, function(index, element)
		{
			// alert(element.timeStamp);
			if (element.id == id)
			{
				if ($("#call_campaign_contact_number").find('option[value="' + element.number + '"]'))
				{
					$("#call_campaign_contact_number").find('option[value="' + element.number + '"]').prop('selected', true);
					CALL_CAMPAIGN.selected_number = element.number;
				}
				else
				{
					obj.splice(index, 1);
				}
			}
		});
	}

	return obj;
}

/**
 * It will change the contact detail view pointed by the current_count pointer
 */
function changeContactDeatilView()
{
	var id = (CALL_CAMPAIGN.contact_id_list[CALL_CAMPAIGN.current_count]);
	Backbone.history.navigate("contact/" + id, { trigger : true });
}

/**
 * changes the timer value to 00:00:00 format
 */
function secToColonFormat(time)
{
	var friendlyTime = null;
	var min = 0;
	var hours = 0;
	var sec = 0;
	if (time >= 3600)
	{
		hours = Math.floor(time / 3600);
		time = time - hours * 3600;
		if (hours < 10)
		{
			hours = "0" + hours;
		}
		friendlyTime = hours;
	}

	if (time >= 60)
	{
		min = Math.floor(time / 60);
		time = time - min * 60;
	}
	if (min < 10)
	{
		min = "0" + min;
	}
	if (friendlyTime != null)
	{
		friendlyTime += ":" + min;
	}
	else
	{
		friendlyTime = min;
	}

	sec = time;
	if (sec < 10)
	{
		sec = "0" + sec;
	}

	if (friendlyTime != null)
	{
		friendlyTime += ":" + sec;
	}
	else
	{
		friendlyTime = "00:" + sec;
	}

	return friendlyTime;
}

/**
 * provided time it will change it to 0sec format
 * 
 * @param time
 * @returns {String}
 */
function SecondsToCampaignTime(time)
{
	if (time == 0)
		return "0 sec";
	var hours = Math.floor(time / 3600);
	if (hours > 0)
		time = time - hours * 60 * 60;
	var minutes = Math.floor(time / 60);
	var seconds = time - minutes * 60;
	var friendlyTime = "";
	if (hours == 1)
		friendlyTime = hours + " hour";
	if (hours > 1)
		friendlyTime = hours + " hour";
	if (minutes > 0)
		friendlyTime += minutes + " min";
	if (seconds > 0)
		friendlyTime += seconds + " sec";
	if (friendlyTime != "")
		return friendlyTime;
}

/**
 * This method is remaining for future
 */
function holdCurrentCall()
{
	var widgetDetails = twilioGetWidgetDetails();
	var widgetPrefs = $.parseJSON(widgetDetails.prefs);
	var acc_sid = widgetPrefs.twilio_acc_sid;
	var auth_token = widgetPrefs.twilio_auth_token;
	var url = "/core/api/widgets/twilio/holdtone/" + acc_sid + "/" + auth_token + "/" + globalconnection.parameters.CallSid;
	// rest is to be implemented later.

}

/**
 * After the call is success the function should be called to save tag for
 * particular contact
 */
function saveTagForCampaign()
{
	console.log("inside saveTagForCampaign --->");
	if (CALL_CAMPAIGN.has_tag)
	{
		var tag = CALL_CAMPAIGN.tag;
		var json = CALL_CAMPAIGN.current_contact;
		json.tagsWithTime.push({ "tag" : tag.toString() });
		var contact = new Backbone.Model();
		contact.url = 'core/api/contacts';
		contact.save(json, { success : function(data)
		{
			addTagToTimelineDynamically(tag, data.get("tagsWithTime"));
			tagsCollection.add(new BaseModel({ "tag" : tag }));
		}

		});
		console.log("Tag added to campaign call");
	}

}

/**
 * Update the total time by campaign
 * 
 * @param timeToAdd
 */
function updateTotalTime(timeToAdd)
{
	CALL_CAMPAIGN.total_time = CALL_CAMPAIGN.total_time + parseInt(timeToAdd);
	$("#totalTime").html('(' + SecondsToCampaignTime(CALL_CAMPAIGN.total_time) + ')');
}

/**
 * provided time it will give the sec, min and hour
 * 
 * @param time
 * @returns {String}
 */
function getTimeInArray(time)
{
	var hours = 0;
	var minutes = 0;
	var seconds = 0;
	var timeArray = [0,0,0];
	if (time == 0)
		return timeArray;
	
	 hours = Math.floor(time / 3600);
	 	if (hours > 0)
	 		time = time - hours * 60 * 60;
	 minutes = Math.floor(time / 60);
	 seconds = time - minutes * 60;
	timeArray = [hours,minutes,seconds];
	
	return timeArray;
}$(function(){
	
	
// This method is called when the add-note modal is closed .....
//This will check if the campaign is started and need to dial the next call....
	$('#noteModal').on('hidden.bs.modal', function (e) {
		console.log(CALL_CAMPAIGN.start +"  closeTwilioNoty "+CALL_CAMPAIGN.call_from_campaign);
			
			// If call campaign then update call noty
		if(CALL_CAMPAIGN.last_clicked == "ADD-NOTE"){
				CALL_CAMPAIGN.last_clicked = null;
				return;
		}
			
		if(CALL_CAMPAIGN.start){
			if(CALL_CAMPAIGN.call_status == "DISCONNECTED"){
				  CALL_CAMPAIGN.state = "START";
				  if(CALL_CAMPAIGN.autodial){
					  dialNextCallAutomatically();
				  }else{
					  dialNextCallManually();
				  }
			}
		}	
			
	});  
	
	// This method is called when the add-note modal is closed .....
	//This will check if the campaign is started and need to dial the next call....
		$('#logCallModal').on('hidden.bs.modal', function (e) {
			console.log(CALL_CAMPAIGN.start +"  closeTwilioNoty "+CALL_CAMPAIGN.call_from_campaign);
				
			if(CALL_CAMPAIGN.start){
				if(CALL_CAMPAIGN.call_status == "DISCONNECTED"){
					  CALL_CAMPAIGN.state = "START";
					  if(CALL_CAMPAIGN.autodial){
						  dialNextCallAutomatically();
					  }else{
						  dialNextCallManually();
					  }
				}
			}	
				
		});  
		
	
//This method is called when the personmodal is closed....
//This will check if the campaign is started and need to dial the next call....
	$('#personModal').on('hidden.bs.modal', function (e) {
			
			
		if(CALL_CAMPAIGN.start){
			if(CALL_CAMPAIGN.call_status == "DISCONNECTED"){
				  CALL_CAMPAIGN.state = "START";
				  if(CALL_CAMPAIGN.autodial){
					  dialNextCallAutomatically();
				  }else{
					  dialNextCallManually();
				  }
			}
		}	
			
	});  

//This method is called when the user click on select box for wrapup time in call-campaign setting page....
//This will update the selected value in variable....
	$('body').on('click', '#timerValue', function(e){
			e.preventDefault();
			if(CALL_CAMPAIGN.start){return;}
			var time = $(this).attr("value");
			var timeHtml = $(this).html();
			$("#call_campaign_timer").attr("value",time);
			$("#call_campaign_timer").html(timeHtml);
			CALL_CAMPAIGN.user_timer = time;
	});
	
//This method is called when the user checks the autodial radio button in call-campaign setting page....
//This will update the selected value in variable....
	$('body').on('click', '#call_campaign_autodial', function(e)
	{
					if(CALL_CAMPAIGN.start){return;}
					var autoDial = false;
					var type = $(this).val();
					$("#wrapUpDiv").hide();
					//$("#rampTimeButton").attr("disabled","disabled");
					if(type == "autodial"){
						autoDial = true;
						$("#wrapUpDiv").show();
						//$("#rampTimeButton").removeAttr('disabled');
					}
					
					CALL_CAMPAIGN.autodial = autoDial;
	});
			
//This method is called when the user clicks on close button in call-campaign setting page.... 
//This method will take the user back to contact list page....	
	$('body').on('click', '#bulk-close-call-campaign', function(e)
	{
				e.preventDefault();
				console.log("Cancel call campaign");
				if(CALL_CAMPAIGN.callObject != null){
					clearTimeout(CALL_CAMPAIGN.callObject);
					CALL_CAMPAIGN.callObject = null;
				}
				routeToPage("contacts");

	});	
	
//This method is called when the user clicks on start-campaign button in call-campaign setting page.... 	
//This method will start the call-campaign and take the user to contact detail page....		
	$('body').on('click', '#bulk-start-call-campaign', function(e)
	{
		
		try{
					e.preventDefault();
					if(CALL_CAMPAIGN.last_clicked == "start-bulk-campaign"){
						return;
					}
					
					// Disabled the buttons and fields......
					$("#bulk-start-call-campaign").attr("disabled","disabled");
					$("#bulk-start-call-campaign").html("Loading...");
					$("#call_campaign_autodial").attr("disabled","disabled");
					$("#addTag").attr("disabled","disabled");
					$("#rampTimeButton").attr("disabled","disabled");
					
					
					//set the rampup timer value to the variable.......
					CALL_CAMPAIGN.user_timer = $("#call_campaign_timer").attr("value");
					
					
					//set the dial type value to the variable.......
					var autoDial = false;
					var type = $("input[name=call_campaign_autodial]:checked").val();
					if(type == "autodial"){
						autoDial = true;
					}
					CALL_CAMPAIGN.autodial = autoDial;
					
					
					//check and set tag................
					var tag = $("#addTag").val().trim();
					if(tag.length>0)
					{
						if (!isValidTag(tag, false) || (/^\s*$/).test(tag)) {
							console.log("not valid tag");
							$('#correctTag').modal('show');
							$("#bulk-start-call-campaign").removeAttr('disabled');
							$("#bulk-start-call-campaign").html("Start Campaign");
							$("#call_campaign_autodial").removeAttr('disabled');
							$("#addTag").removeAttr('disabled');
							$("#addTag").val("");
							if(CALL_CAMPAIGN.autodial == true){
								$("#rampTimeButton").removeAttr('disabled');
							}
							return;
						}
						CALL_CAMPAIGN.tag = tag;
						CALL_CAMPAIGN.has_tag = true;	
							
					}	
					
					
					
					// check whether the twilio widget is loaded. If loaded then move to contact detail page.
					// after timeout it is not loaded ask client to check internet connection.
					if (!Twilio_Start)
					{
						
							var waitTime=1000; // this is in milisecond
							
							CALL_CAMPAIGN.callObject = setTimeout( function wait(){
									if(Twilio_Start){
										
										CALL_CAMPAIGN.last_clicked = "start-bulk-campaign";
										var id = (CALL_CAMPAIGN.contact_id_list[0]);
										Backbone.history.navigate("contact/" + id, { trigger : true });
										//CALL_CAMPAIGN.start = true;
										CALL_CAMPAIGN.callObject = null;
										$( window ).scrollTop( 0 );
										
									}else{
										
										waitTime = waitTime+1000;
										if(waitTime < 7000){
											CALL_CAMPAIGN.callObject = setTimeout(wait,waitTime);
										}else{
											
											$("#bulk-start-call-campaign").removeAttr('disabled');
											$("#bulk-start-call-campaign").html("Start Campaign");
											$("#call_campaign_autodial").removeAttr('disabled');
											$("#addTag").removeAttr('disabled');
											if(CALL_CAMPAIGN.autodial == true){
												$("#rampTimeButton").removeAttr('disabled');
											}
											$('#hitRefreshModel').modal('show');
										}
									}
									
								}, waitTime);
					
					}else{
						CALL_CAMPAIGN.last_clicked = "start-bulk-campaign";
						var id = (CALL_CAMPAIGN.contact_id_list[0]);
						Backbone.history.navigate("contact/" + id, { trigger : true });
						//CALL_CAMPAIGN.start = true;
						$( window ).scrollTop( 0 );
					}		
		}catch(err){
			console.log("error in -start-call-campaign " + err.message);
			CALL_CAMPAIGN.last_clicked = null;
			$("#bulk-start-call-campaign").removeAttr('disabled');
			$("#bulk-start-call-campaign").html("Start Campaign");
			$("#call_campaign_autodial").removeAttr('disabled');
			$("#addTag").removeAttr('disabled');
			if(CALL_CAMPAIGN.autodial == true){
				$("#rampTimeButton").removeAttr('disabled');
			}
		}
	   });
	
//This method is called when the user clicks on startcallcampaign button in contact list page.... 	
//This method will take the user to call campaign setting page....		
	$('body').on('click', '#show-callcampaignModal', function(e)
	{
				e.preventDefault();
				console.log("In show-callcampaignModal");
				
				if (CALL_CAMPAIGN.start)
				{
					var alertMessage = '<center><div class="alert alert-danger fade in" style="z-index:10000;margin-bottom:0px;margin-right:-4px;font-size: 14px;"><a href="#" class="close" data-dismiss="alert" aria-label="close" title="close">×</a><strong>Alert!</strong> Call campaign is already running.</div></center>';
					var timeToDisplay = 10000;
					showCampaignAlert(alertMessage,timeToDisplay);
					return;
				}
			
				// twilio check
				if (!Twilio_Start)
				{
					//-----------
					$.getJSON("/core/api/widgets/TwilioIO", function(twilioio_widget)
							{
								if (twilioio_widget == null){
									$('#twilioStateModal').modal('show');
									return;
								}	
								console.log("twilioio_widget");
								showSettingPage();
							}).error(function(data)
							{
								console.log("twilioio_widget error");
								console.log(data);
								return;
							});
					return;
					
				}else{
					showSettingPage();
				}
				
	});
			

//This method is called when the user clicks on mute button in campaign.... 	
//This method will mute the call and change the mute icon....	
	$('body').on('click', '#pause', function(e)
	{
				e.preventDefault();
				console.log("Twilio mute from noty");
				
					//CALL_CAMPAIGN.last_clicked = "PAUSE";
					//CALL_CAMPAIGN.state = "PAUSE";
					
					$("#pauseDiv").hide();
					$("#resumeDiv").show();
					if(globalconnection){
						globalconnection.mute(true);
					}
					
	});
	
//This method is called when the user clicks on unmute button in campaign.... 	
//This method will unmute the call and change the unmute icon....		
	$('body').on('click', '#resume', function(e)
			{
				e.preventDefault();
				console.log("Twilio unmute from noty");
				
					//CALL_CAMPAIGN.last_clicked = "RESUME";
					//CALL_CAMPAIGN.state = "RESUME";
					
					$("#resumeDiv").hide();
					$("#pauseDiv").show();
					if(globalconnection){
						globalconnection.mute(false);
					}
			});
	
//This method is called when the user clicks on exit button in campaign.... 	
//This method will show the alert to user confirming to exit from the campaign....		
	$('body').on('click', '#stop', function(e)
			{
				e.preventDefault();
				console.log("Twilio call noty_twilio_stop from noty");
				
				CALL_CAMPAIGN.last_clicked = "STOP";
				$('#exitCampaignModal').modal('show');
				//holdCurrentCall();
			});
	
//This method is called when the user clicks on hangup button in campaign.... 	
//This method will end the current call and dial next call in case of autodial....	
	$('body').on('click', '#hangup', function(e)
	{
				e.preventDefault();
				console.log("Twilio call hang up from noty");
				CALL_CAMPAIGN.last_clicked = "HANGUP";
				
				if(CALL_CAMPAIGN.call_status == "DISCONNECTED"  && (($("#noteModal").data('bs.modal') || {}).isShown != true)){
					CALL_CAMPAIGN.state = "START";
					
						  if(CALL_CAMPAIGN.autodial){
							  dialNextCallAutomatically();
						  }else{
							  dialNextCallManually();
						  }
					
				}
				
				Twilio.Device.disconnectAll();
				

				
				//if the call campaign is started then we try to make a next call from campaign
				// After 24hrs check where call is connected or not 
/*							if(CALL_CAMPAIGN.start && CALL_CAMPAIGN.call_from_campaign)
							  {
								// if state is pause i.e callresp.status != completed then make another call
								// if state is pause i.e callresp.status = completed then hidden function will make the call 
									if(CALL_CAMPAIGN.state == "DISCONNECTED"  && (($("#noteModal").data('bs.modal') || {}).isShown != true)){
										CALL_CAMPAIGN.state = "START";
										
											  if(CALL_CAMPAIGN.autodial){
												  dialNextCallAutomatically();
											  }else{
												  dialNextCallManually();
											  }
										
									}
								
										// Next contact call
									  
							  }*/
	});
	
//This method is called when the user clicks on start button in campaign.... 	
//This method will start the call in case of manual dailing....		
	$('body').on('click', '#start', function(e)	
	{
					e.preventDefault();
					console.log("Twilio call noty_twilio_call from noty");

					if(CALL_CAMPAIGN.autodial){
						if(CALL_CAMPAIGN.callObject != null){
							clearTimeout(CALL_CAMPAIGN.callObject);
							CALL_CAMPAIGN.callObject = null;
						}
						if(CALL_CAMPAIGN.timeObject != null){
							clearTimeout(CALL_CAMPAIGN.timeObject);
							CALL_CAMPAIGN.timeObject = null;
						}
							CALL_CAMPAIGN.state = "START";
							CALL_CAMPAIGN.last_clicked = null; // this is to check the last
							CALL_CAMPAIGN.countdown_timer = 0;
							twiliocall(CALL_CAMPAIGN.selected_number, getContactName(CALL_CAMPAIGN.current_contact));
						
					}else{
						if(CALL_CAMPAIGN.callObject != null){
							return;
						}
						makeCampaignCall();
					}
					

	});
	
//This method is called when the user .......... 	
//This method will .......		
			
	$('body').on('click', '#noty-show-note', function(e)
	{	
				e.preventDefault();
				console.log("Twilio call noty-show-note from noty");
				CALL_CAMPAIGN.last_clicked = "ADD-NOTE";
				// Show add note modal with current contact from call
				// noty
				var el = $("#noteForm");
				var template = Handlebars.compile('<li class="tag"  style="display: inline-block; vertical-align: middle; margin-right:3px;" data="{{id}}">{{name}}</li>');
			 	// Adds contact name to tags ul as li element
				$('.tags',el).html(template({name : CALL_CAMPAIGN.current_contact_name, id : CALL_CAMPAIGN.current_contact.id}));

				$("#noteForm").find("#description").focus();
				$('#noteModal').modal('show');
				agile_type_ahead("note_related_to", el, contacts_typeahead);
	});
	
	
//This method is called when the user clicks on next button in campaign in case of manual dialing.... 	
//This method will show the modal to confirm in case of ongoing call otherwise take to next contact....		
	$('body').on('click', '.noty_twilio_next', function(e)	
	{
				e.preventDefault();
				
				if(CALL_CAMPAIGN.call_status != "IDEAL"){
					$('#campaignNextModal').modal('show');
					
				}else{
					
					console.log("Twilio call noty_twilio_next from noty");
					CALL_CAMPAIGN.last_clicked = "NEXT"	;
					  
					  dialNextCallAutomatically();					
				}
	});
	
//This method is called when the user clicks on skip button in campaign in case of Autodaial dialing.... 	
//This method will show the modal to confirm in case of ongoing call otherwise take to next contact....
	$('body').on('click', '.noty_twilio_skip', function(e)	
	{
			e.preventDefault();
			if(CALL_CAMPAIGN.current_contact_phonenumber.length != 0 && (Twilio.Device.status() == "busy" || CALL_CAMPAIGN.call_status == "CALLING")){
					$('#campaignSkipModal').modal('show');
				
			}else{
				console.log("Twilio call noty_twilio_skip from noty");
				if(CALL_CAMPAIGN.callObject != null){
					clearTimeout(CALL_CAMPAIGN.callObject);
					CALL_CAMPAIGN.callObject = null;
				}
				CALL_CAMPAIGN.last_clicked = "SKIP"	;
				CALL_CAMPAIGN.state = "START";
				dialNextCallAutomatically();
			}
			
	});

//This method is called when the user clicks on next button in campaign in case of manual dialing.... 	
//This method will show the modal to confirm in case of ongoing call otherwise take to previous contact....

	$('body').on('click', '.noty_twilio_previous', function(e)
	{
					e.preventDefault();
					if(CALL_CAMPAIGN.call_status != "IDEAL"){
						$('#campaignPreviousModal').modal('show');
					}else{
						console.log("Twilio call noty_twilio_previous from noty");
						CALL_CAMPAIGN.last_clicked = "PREVIOUS"	;
						CALL_CAMPAIGN.current_count = CALL_CAMPAIGN.current_count - 2;
						  dialNextCallAutomatically();
							
					}
					
	});


//This method is called when the user clicks on addphonenumber button in campaign.... 	
//This method will show the continue edit page to edit the contact....
	$('body').on('click', '.noty_add_phone', function(e)	
	{
				e.preventDefault();
				console.log("Twilio call noty_add_phone from noty");
				CALL_CAMPAIGN.last_clicked = "ADD-PHONE";
				// Add loading img till contact update
				$(".noty_new_phone").html('<img src="'+updateImageS3Path("/img/ajax-loader.gif")+'">');

				CALL_CAMPAIGN.contact_update = true;

				var contact = CALL_CAMPAIGN.current_contact;

				// Open current contact edit
				// Contact Edit - take him to continue-contact form
				add_custom_fields_to_form(contact, function(contact)
				{
					if (contact.type == 'COMPANY')
						deserialize_contact(contact, 'continue-company');
					else
						deserialize_contact(contact, 'continue-contact');
				//	$("#continueform").css({"pointer-events":"auto"});
					$(".noty_new_phone").html('');
				}, contact.type);
	});

//This method is called when the user clicks on dialpad button in campaign.... 	
//This method will show the dialpad which can be closed by clicking anywhere on screen....
	$('body').on('click', '#dialpad', function(e)
	{
							e.preventDefault();
							e.stopPropagation();
							console.log("Twilio call dailpad from noty");
							$('#dialpad').hide();
							$('#campaign_dialpad_btns').show();
	});


//This method is called when the user clicks on dialpad buttons to prevent it from disappear in campaign.... 	
	$('body').on('click', '#campaign_dialpad_btns', function(e)	
	{
							e.stopPropagation();
	});


//This method will close the dialpad which can be closed by clicking anywhere on screen....
	$(document).on('click', function(e)
	{
			if($('#campaign_dialpad_btns').length !=0){
				$('#campaign_dialpad_btns').hide();
				$('#dialpad').show();
			}
	});	
	

//This method is called when the user clicks on No option in exitmodal in campaign.... 	
//This method will close the shown model....				
	$('body').on('click', '#exit_campaign_no', function(e)
	{
						e.preventDefault();
						$('#exitCampaignModal').modal('hide');
						
	});


//This method is called when the user clicks on Yes option in exitmodal in campaign.... 	
//This method will close the shown model and end the campaign taking the user to contact list page....
	$('body').on('click', '#exit_campaign_yes', function(e)
	{
				e.preventDefault();
				if(CALL_CAMPAIGN.start){
					$('#exitCampaignModal').modal('hide');
					if(CALL_CAMPAIGN.callObject != null){
						clearTimeout(CALL_CAMPAIGN.callObject);
					}
				
					stopCallCampaign();
					 var alertMessage = '<center><div class="alert alert-success fade in" style="z-index:10000;margin-bottom:0px;margin-right:-4px;font-size: 14px;"><a href="#" class="close" data-dismiss="alert" aria-label="close" title="close">×</a>You have successfully exited the call campaign.</div></center>'; 
					 var timeToDisplay = 10000;
					 showCampaignAlert(alertMessage,timeToDisplay) 
				}
	});


//This method is called when the user clicks on No option in previousModal in campaign.... 	
//This method will close the shown model....
	$('body').on('click', '#previous_contact_no', function(e)
	{
					e.preventDefault();
					$('#campaignPreviousModal').modal('hide');
					
	});


//This method is called when the user clicks on Yes option in previousmodal in campaign in manualmode.... 	
//This method will close the shown model and take the user to next conntact....
	$('body').on('click', '#previous_contact_yes', function(e)
	{
			e.preventDefault();
			$('#campaignPreviousModal').modal('hide');
			console.log("Twilio call noty_twilio_previous from noty");
			CALL_CAMPAIGN.last_clicked = "PREVIOUS"	;
			
			CALL_CAMPAIGN.current_count = CALL_CAMPAIGN.current_count - 2;
		
			if (CALL_CAMPAIGN.call_status == "CONNECTED" || Twilio.Device.status() == "busy" || CALL_CAMPAIGN.call_status == "CALLING"){
				Twilio.Device.disconnectAll();
			}				

		//	  dialNextCallAutomatically();

	});



//This method is called when the user clicks on No option in Nextmodal in campaign.... 	
//This method will close the shown model....	
	$('body').on('click', '#next_contact_no', function(e)
	{
				e.preventDefault();
				$('#campaignNextModal').modal('hide');
				
	});


//This method is called when the user clicks on No option for skipModel in campaign for autodial mode.... 	
//This method will close the shown model....	
	$('body').on('click', '#skip_contact_no', function(e)
	{
				e.preventDefault();
				$('#campaignSkipModal').modal('hide');
				
	});



//This method is called when the user clicks on Skip option in twiliostatemodal in campaign.... 	
//This method will close the shown model....
	$('body').on('click', '#twilio_state_skip', function(e)	
	{
				e.preventDefault();
				$('#twilioStateModal').modal('hide');
	});



//This method is called when the user clicks on Add option in twiliostatemodal in campaign.... 	
//This method will close the shown model and take the user to add-widget page....	
	$('body').on('click', '#twilio_state_add', function(e)	
	{
		e.preventDefault();
		$('#twilioStateModal').modal('hide');
		routeToPage("add-widget");
	});


//This method is called when the user clicks on Ok option in alert message in campaign.... 	
//This method will close the shown model....
	$('body').on('click', '#info_onCall_ok', function(e)
	{
				e.preventDefault();
				$('#alreadyOnCall').modal('hide');
	});



//This method is called when the user clicks on Ok option in alert message in campaign.... 	
//This method will close the shown model....	
	$('body').on('click', '#info_wait_ok', function(e)
	{
				e.preventDefault();
				$('#pleaseWait').modal('hide');
	});


//This method is called when the user clicks on Ok option in alert message for tagmodal in campaign.... 	
//This method will close the shown model....	
	$('body').on('click', '#info_tag_ok', function(e)
	{
		e.preventDefault();
		$('#correctTag').modal('hide');
	});

//This method is called when the user clicks on Ok option in alert message for noconnection shown at the time of startcampaign in campaign.... 	
//This method will close the shown model....		
	$('body').on('click', '#hitRefresh_ok', function(e)
	{
		e.preventDefault();
		$('#hitRefreshModel').modal('hide');
	});

//This method is called when the user clicks on Pause button in campaign.... 	
//This method will pause the call which is scheduled to start after n sec....		
	$('body').on('click', '#campaign_pauseCall', function(e)
	{
				e.preventDefault();
				console.log("Twilio pause from noty");
				CALL_CAMPAIGN.last_clicked = "PAUSE";
				$("#campaign_pauseCall").hide();
				$("#campaign_resumeCall").show();
				$("#callPauseText").show();
				$("#pauseCallDiv").tooltip('hide')
				  .attr('data-original-title', "Resume current call.")
				  .tooltip('fixTitle')
				  .tooltip('show');
				
				if(CALL_CAMPAIGN.callObject != null){
					clearTimeout(CALL_CAMPAIGN.callObject);
					CALL_CAMPAIGN.callObject = null;
				}
				if(CALL_CAMPAIGN.timeObject != null){
					clearTimeout(CALL_CAMPAIGN.timeObject);
					CALL_CAMPAIGN.timeObject = null;
				}
	});


//This method is called when the user clicks on Resume button in campaign.... 	
//This method will start the pasued call....		
	$('body').on('click', '#campaign_resumeCall', function(e)
	{
				e.preventDefault();
				console.log("Twilio resume from noty");
				CALL_CAMPAIGN.last_clicked = "RESUME";
				$("#campaign_resumeCall").hide();
				$("#campaign_pauseCall").show();
				$("#callPauseText").hide();
				$("#pauseCallDiv").tooltip('hide')
				  .attr('data-original-title', "Pause current call.")
				  .tooltip('fixTitle')
				  .tooltip('show');
				var time = CALL_CAMPAIGN.countdown_timer * 1000;
				Tick();
				CALL_CAMPAIGN.callObject = setTimeout( function(){
					CALL_CAMPAIGN.state = "START";
					CALL_CAMPAIGN.last_clicked = null;   // this is to check the last click variable in disconnect call
					twiliocall(CALL_CAMPAIGN.selected_number, getContactName(CALL_CAMPAIGN.current_contact));
				}, time);
	});


//This method is called when the user clicks Yes option in campaign in manul mode.... 	
//This method will disconnect any ongoing call and the user to next contact....		
	$('body').on('click', '#next_contact_yes', function(e)
	{
		e.preventDefault();
		$('#campaignNextModal').modal('hide');
		console.log("Twilio call noty_twilio_next from noty");
		CALL_CAMPAIGN.last_clicked = "NEXT"	;

		if (CALL_CAMPAIGN.call_status == "CONNECTED" || Twilio.Device.status() == "busy" || CALL_CAMPAIGN.call_status == "CALLING"){
			Twilio.Device.disconnectAll();
		}				

		//  dialNextCallAutomatically();

	});


//This method is called when the user clicks Yes option in skipmodel in campaign in Autodial mode.... 	
//This method will disconnect any ongoing call and the user to next contact....		
	$('body').on('click', '#skip_contact_yes', function(e)
	{
		e.preventDefault();
		$('#campaignSkipModal').modal('hide');
		console.log("Twilio call noty_twilio_skip from noty");
		CALL_CAMPAIGN.last_clicked = "SKIP"	;
		
		if(CALL_CAMPAIGN.callObject != null){
			clearTimeout(CALL_CAMPAIGN.callObject);
			//CALL_CAMPAIGN.callObject = null;
		}

		if (CALL_CAMPAIGN.call_status == "CONNECTED" || Twilio.Device.status() == "busy" || CALL_CAMPAIGN.call_status == "CALLING"){
			Twilio.Device.disconnectAll();
		}				
	//	CALL_CAMPAIGN.state = "START";
	//	dialNextCallAutomatically();

	});


	//This will hide the info shown to the user at the time of starting of campaign
	$('body').on('click', '#reStartCampaign_ok', function(e)
			{
				e.preventDefault();
				$('#startCampaignAgain').modal('hide');
			});
	
	
	window.onbeforeunload = function() {
		var message = 'You are currently running a call campaign. If you reload the page the current call campaign will be exited automatically.';
		 if(CALL_CAMPAIGN.start){
			 return message;
		 }else{
			 return;
		 }
	}
});

//end call campaign related @Thnx Prakash @ 24/9/2015

/**
 * Telephony noty functions.
 */

/**
 * Show noty popup at bottom right.
 * 
 * @param state :
 *            Event happen with SIP
 * @param type :
 *            noty type like error, default, information, warning, etc.
 * @param message :
 *            text to display eg. callee details, etc.
 * @param duration :
 *            false or sec.
 */
function showCallNotyPopup(state, type, message, duration)
{
	// return if call under notification prefs is disabled
	if (state === "incoming" || state === "missedCall")
	{
		if (notification_prefs && notification_prefs["call"] === false)
			return;
	}

	head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH + 'lib/noty/layouts/bottom.js', LIB_PATH + 'lib/noty/layouts/bottomRight.js',
			LIB_PATH + 'lib/noty/themes/default.js', LIB_PATH + 'lib/noty/packaged/jquery.noty.packaged.min.js', function()
			{
				if (state == "incoming") // confirm
					incomingCallNoty(message, type);
				else if (state == "connected") // success
					connectedCallNoty(message, type);
				else if (state == "outgoing") // confirm
					outgoingCallNoty(message, type);
				else
					showCallNoty(type, message, duration); // as per
				// requirement
			});
}

/**
 * Default noty without buttons.
 * 
 * @param type
 * @param message
 * @param duration
 */
function showCallNoty(type, message, duration)
{
	// Close event
	if (CALL != undefined)
		CALL.close();

	// Set properties
	CALL = noty({ text : message, type : type, layout : "bottomLeft", timeout : duration,
	// delay for closing event. Set false for sticky notifications
	});
}

/**
 * Incoming call noty with buttons : Answer and Ignore
 * 
 * @param message
 */
function incomingCallNoty(message, type)
{
	if (type == "Twilio")
	{
		// Close noty
		if (Twilio_Call_Noty != undefined)
			Twilio_Call_Noty.close();

		// Set properties
		Twilio_Call_Noty = noty({ text : message, type : "confirm", layout : "bottomLeft", buttons : [
				{ addClass : 'btn btn-primary noty_twilio_answer', text : 'Answer' }, { addClass : 'btn btn-danger noty_twilio_ignore', text : 'Ignore' }
		] });

		return;
	}

	// Close event
	if (CALL != undefined)
		CALL.close();

	// Set properties
	CALL = noty({ text : message, type : "confirm", layout : "bottomLeft", buttons : [
			{ addClass : 'btn btn-sm btn-primary answer', text : 'Answer' }, { addClass : 'btn btn-danger ignore', text : 'Ignore' }
	] });
}

/**
 * Connected noty displayed, After received call from callee or user with
 * Dialpad and Hangup buttons.
 * 
 * @param message
 */
function connectedCallNoty(message, type)
{
	if (type == "Twilio")
	{
		// Close noty
		if (Twilio_Call_Noty != undefined)
			Twilio_Call_Noty.close();

		// Set properties
		Twilio_Call_Noty = noty({ text : message, type : "success", layout : "bottomLeft", buttons : [
				{ addClass : 'btn btn-sm btn-default noty_twilio_mute', text : '<i class="icon-microphone"></i>' },
				{ addClass : 'btn btn-sm btn-default noty_twilio_unmute', text : '<i class="icon-microphone-off"></i>' },
				{ addClass : 'btn btn-sm btn-default noty_twilio_dialpad', text : '<i class="icon-th"></i>' }, 
				{ addClass : 'btn btn-sm btn-danger noty_twilio_hangup', text : 'Hangup' }
		] });
		
		if(TWILIO_DIRECTION == "outbound-dial") {

			accessUrlUsingAjax("core/api/voicemails", function(resp){

					var responseJson = resp;
					getTemplate("twilioio-voicemail",responseJson, undefined, function(template_ui){
						if(!template_ui)
							  return;
							
						$('.noty_buttons').prepend($(template_ui));

						// Add dialpad template in twilio content
						$('.noty_buttons').prepend(getTemplate("twilioio-dialpad"));

					}, null);
			});
		
		} else {

			// Add dialpad template in twilio content
			getTemplate("twilioio-dialpad", {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('.noty_buttons').prepend($(template_ui));	
			}, null);
		}
		
		return;
	}

	// Close event
	if (CALL != undefined)
		CALL.close();

	// Set properties
	CALL = noty({ text : message, type : "success", layout : "bottomLeft", buttons : [
			{ addClass : 'btn dialpad noty_sip_dialpad', text : '<i class="icon-th"></i>' }, { addClass : 'btn btn-danger hangup', text : 'Hangup' }
	] });
}

/**
 * On Outgoing call, noty with cancel button shows.
 * 
 * @param message
 */
function outgoingCallNoty(message, type)
{
	if (type == "Twilio")
	{
		// Close noty
		if (Twilio_Call_Noty != undefined)
			Twilio_Call_Noty.close();

		// Set properties
		Twilio_Call_Noty = noty({ text : message, type : "confirm", layout : "bottomLeft", buttons : [
			{ addClass : 'btn btn-default btn-sm noty_twilio_cancel', text : 'Cancel' }
		] });

		return;
	}

	// Close event
	if (CALL != undefined)
		CALL.close();

	// Set properties
	CALL = noty({ text : message, type : "confirm", layout : "bottomLeft", buttons : [
		{ addClass : 'btn btn-default btn-sm hangup', text : 'Cancel' }
	] });
}

function voiceMailDropAction() { 
//	alert("clicked");
	$( "div.noty_bar" ).parent().css( "overflow", "visible" );
}

function showMissedNotyPopUp(type, message,position,notyTimeout)
{
	head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH + 'lib/noty/layouts/bottom.js', LIB_PATH
			+ 'lib/noty/themes/default.js', function(){
	var n = noty({
		text : message,
		layout : position,
		type : type,
		animation : {
			open : {
				height : 'toggle'
			},
			close : {
				height : 'toggle'
			},
			easing : 'swing',
			speed : 500
			// opening & closing animation speed
		},
		timeout : notyTimeout == undefined ? notyTimeout : (notyTimeout == "none" ? undefined : 20000), // delay for closing event. Set false for sticky
						// notifications
				
	});
			});		
}


function ShowWidgetCallNoty(message){
	var state = message.state;
	var number = message.number;
	var callId = message.callId;
	var displayName = message.displayName;
	var widgetype = (message.callType).toLowerCase();

	

	
	console.log("calling call noty");
	
if(message.state == "connected"){
	
	var btns = [];
	if(widgetype !=  "skype"){
		btns.push({"id":"", "class":"btn btn-sm btn-default p-8 noty_"+widgetype+"_mute icon-microphone","title":""});
		btns.push({"id":"", "class":"btn btn-sm btn-default p-8 noty_"+widgetype+"_unmute icon-microphone-off none","title":""});
	}
	btns.push({"id":"", "class":"btn btn-sm btn-default noty_"+widgetype+"_dialpad icon-th","title":""});
	btns.push({"id":"", "class":"btn btn-sm btn-danger noty_"+widgetype+"_hangup","title":"Hangup"});
	var json = {"callId": callId};
	showDraggableNoty(widgetype, globalCall.contactedContact, "connected", globalCall.callNumber, btns,json);
	
}else if(message.state == "ringing"){
	searchForContactImg(number, function(currentContact){
		if(!currentContact){
			globalCall.contactedContact = {};
			globalCall.contactedId = "";
		}else{
			globalCall.contactedContact = currentContact;
			globalCall.contactedId = currentContact.id;
		}
		var btns = [{"id":"", "class":"btn btn-primary noty_"+widgetype+"_answer","title":"Answer"},{"id":"","class":"btn btn-danger noty_"+widgetype+"_ignore","title":"Ignore"}];
		var json = {"callId": callId};
		showDraggableNoty(widgetype, globalCall.contactedContact, "incoming", number, btns,json);
	});
}else if(message.state == "missed"){
	var btns = [];
	showDraggableNoty(widgetype, globalCall.contactedContact , "missedCall", globalCall.callNumber, btns);
	
}else if(message.state == "connecting"){
	
	var btns = [{"id":"", "class":"btn btn-default btn-sm noty_"+widgetype+"_cancel","title":"Cancel"}];
	var json = {"callId": callId};
	showDraggableNoty(widgetype, globalCall.contactedContact , "outgoing", number, btns, json);
	
}else if(message.state == "failed"){
	
	var btns = [];
	showDraggableNoty(widgetype, globalCall.contactedContact , "failed", globalCall.callNumber, btns);
	
}else if(message.state == "busy"){
	
	var btns = [];
	showDraggableNoty(widgetype, globalCall.contactedContact , "busy", globalCall.callNumber, btns);
	
}else if(message.state == "ended" ||message.state == "refused" || message.state == "missed"){
	closeCallNoty(true);
}
	
	
}


// added by prakash for bria call notification
function showBriaCallNoty(message){
	

	
	var state = message.state;
	var number = message.number;
	var callId = message.callId;
	var displayName = message.displayName;
	
		if(!globalCall.lastReceived){
		}else{
			if(globalCall.lastReceived == message.state){
				console.log("duplicate message recived");
				return;
			}
		}
		globalCall.lastReceived =  message.state;

		if(message.state == "ringing"){
				if(checkForActiveCall()){
					sendCommandToClient("busy","Bria");
					return;
				}
		}else if(!globalCall.contactedContact){
				console.log("contact or id not found to make popup..");
				return;
		}

		_getMessageBria(message);
		ShowWidgetCallNoty(message);
		return;
			
			// write new noty code here ...

}


//added by prakash for skype call notification
function showSkypeCallNoty(message){

		if(message.state == "ringing"){
			if(checkForActiveCall()){
				sendCommandToClient("busy","Skype");
				return;
			}
		}else if(!globalCall.contactedContact){
			console.log("contact or id not found to make popup..");
			return;
		}
		
		_getMessageSkype(message);
		ShowWidgetCallNoty(message);
		return;
		
}

function showCallNotyMessage(message,type,position,timeout){
	head.js(LIB_PATH + 'lib/noty/jquery.noty.js', LIB_PATH + 'lib/noty/layouts/bottom.js', LIB_PATH + 'lib/noty/layouts/bottomRight.js',
			LIB_PATH + 'lib/noty/themes/default.js', LIB_PATH + 'lib/noty/packaged/jquery.noty.packaged.min.js', function()
		{
			noty({ text : message, type : "error", layout : "bottomRight", timeout : 3000});
		});
}

function showDraggableNoty(widgetName, contact, status, number, btns, json){
	var w = widgetName;
	//var c = contact;
	var c = {};
	$.extend(c,contact);
	var s = status;
	var n = number;
	var arr = btns;
	if(!c){
		c = {};
	}
	if(json){
		c['callId'] = json.callId;
	}
	var txt = makeDraggableMessage(s);
	c['phone'] = n;
	var msg = {};
	msg['buttons'] = arr;
	c.msg = msg;
	showDraggablePopup(c);
	$("#noty_text_msg").html(txt);
	if(s == "connected"){
		if(widgetName == "Twilioio"){
			makeDraggableVoicemail();
			makeDraggableDialpad("twilioio-dialpad",{},$('.noty_buttons'));
		}else if(widgetName == "bria" || widgetName == "skype"){
			makeDraggableDialpad("bria-widgetdialpad",{},$('.noty_buttons'));
		}
		if(containsOption(default_call_option.callOption, "name", "CallScript") != -1 && !jQuery.isEmptyObject(contact)){
			$("#draggable_noty #call-noty-l2").find(".internal-col").prepend("<div id='' class='noty_call_callScript btn btn-sm btn-default p-xs'>CS</div>");
			$(".noty_call_callScript","#draggable_noty").data("contact",contact);
		}
		
	}else if(s == "dialing"){
		$("#draggable_noty .draggable_noty_notes").html("");
		
	}else if(s == "connecting" || s == "outgoing" || s == "ringing" || s == "incoming"){
		$("#draggable_noty .draggable_noty_notes").html($(getTemplate("call-noty-notes")));	
		if(containsOption(default_call_option.callOption, "name", "CallScript") != -1 && !jQuery.isEmptyObject(contact)){
			$("#draggable_noty #call-noty-l2").find(".internal-col").prepend("<div id='' class='noty_call_callScript btn btn-sm btn-default p-xs'>CS</div>");
			$(".noty_call_callScript","#draggable_noty").data("contact",contact);
		}
	}
	
	if(s == "missedCall" || s == "missed" || s == "busy" || s == "failed"){
		$("#draggable_noty").show().delay(5000).hide(1);
	}
}


function showDraggablePopup(param){
	
	var position = _agile_get_prefs("dragableNotyPosition");
	var flag = false;
	var y = $(window).height()-200;
	//var x = ($(window).width())-520;
	var x = 200;
	if(position){
		var a = position.split("-");
		x = a[0]*1;
		y = a[1]*1;
	}
	var popup = $(getTemplate("call-noty",param));
	$("#draggable_noty .draggable_noty_info").html(popup);
	$("#draggable_noty").css({'left':x,'top': y});
	$("#draggable_noty").show();
	$("#draggable_noty").draggableTouch();
	

	$("#draggable_noty").bind("dragstart", function(e, pos) {
	 flag = true;
		//you can do anything related to move
    }).bind("dragend", function(e, pos) {
    	if(flag){
    		flag = false;
            var position = _agile_get_prefs("dragableNotyPosition");
  		  var maxWidth = ($(window).width())-190;
  		  var maxHeight = $(window).height()-100;
  		  var popup_position_top = $(this).css('top').split("px")[0];
  		  var popup_position_left = $(this).css('left').split("px")[0];
  		  if(popup_position_left < 50 || popup_position_left > maxWidth || popup_position_top < 50 || popup_position_top > maxHeight){
  				//var y = $(window).height()-300;
  				var y = $(window).height()-200;
  				//var x = ($(window).width())-520;;
  				var x = 200;
  				if(position){
  					var a = position.split("-");
  					x = a[0]*1;
  					y = a[1]*1;
  				}
  				
  			  if( popup_position_top > maxHeight){
  				$("#draggable_noty").animate({ top: y, left:x }, 500);
  			  }
  			  return;
  		  }else{
  			  _agile_set_prefs("dragableNotyPosition", popup_position_left+"-"+popup_position_top);
  		  }
    	}
    });
	
	
/*	$("#agilecrm-container").on("mousedown",".noty-heading",function(){
		$("#draggable_noty").addClass("draggable-popup").parents().on("mousemove",function(e){
			$(".draggable-popup").offset({
				top:e.pageY - $(".drag-pop-div").outerHeight()/2,
				left:e.pageX - $(".drag-pop-div").outerWidth()/2 
			});
		});
	}).on("mouseup",".noty-heading",function(){
		$("#draggable_noty").removeClass("draggable-popup");
		 var position = _agile_get_prefs("dragableNotyPosition");
		  var maxWidth = ($(window).width())-190;
		  var maxHeight = $(window).height()-100;
		  var popup_position_top = $("#draggable_noty").css('top').split("px")[0];
		  var popup_position_left = $("#draggable_noty").css('left').split("px")[0];
		  if(popup_position_left < 50 || popup_position_left > maxWidth || popup_position_top < 50 || popup_position_top > maxHeight){
				//var y = $(window).height()-300;
				var y = $(window).height()-200;
				//var x = ($(window).width())-520;;
				var x = 200;
				if(position){
					var a = position.split("-");
					x = a[0]*1;
					y = a[1]*1;
				}
			  $("#draggable_noty").animate({ top: y, left:x }, 500);
			  return;
		  }else{
			  _agile_set_prefs("dragableNotyPosition", popup_position_left+"-"+popup_position_top);
		  }
	});*/
	

	
}

function makeDraggableMessage(status){
	
	if(status == "connecting" || status == "outgoing" ){
		return "Calling";
	}else if(status == "ringing" || status == "incoming"){
		return "Incoming call";
	}else if(status == "connected"){
		return "On call";
	}else if(status == "missedCall" || status == "missed"){
		return "Missed call";
	}else if(status == "failed"){
		return "Call Failed";
	}else if(status == "busy"){
		return "Call Busy";
	}else if(status == "dialing"){
		return "Dialing <img src='/img/ajax-loader-cursor.gif' width='15px' height='5px'  style='margin-left:8px;margin-right:-3px;'></img>";
	}else{
		return "";
	}
}

function makeDraggableDialpad(templateName, param, ele){
	
	// Add dialpad template in twilio content
	getTemplate(templateName, param, undefined, function(template_ui){
		if(!template_ui)
			  return;
		ele.prepend($(template_ui));	
	}, null);
	
}

function makeDraggableVoicemail(widgetName){
	
	accessUrlUsingAjax("core/api/voicemails", function(resp){

			$('#call-noty-l1').html($(getTemplate("twilioio-voicemail",resp)));

	});
	
}


/* SIP related functions */

/**
 * SIPml initialization, stack creation and session regisration does after
 * adding sip widget / updating sip widget / re-login user.
 */
function sipStart()
{
	// After 15 sec procedure will start.
	setTimeout(function()
	{
		// after DOM ready.
		if (document.readyState === "complete")
		{
			// If sip already register.
			if (Sip_Start == true)
				return;

			// If sip not register yet.
			// Get Sip widget
			$.getJSON("/core/api/widgets/Sip", function(sip_widget)
			{
				if (sip_widget == null)
					return;

				Sip_Widget_Object = sip_widget;

				if (sip_widget.prefs != undefined)
				{
					head.js(LIB_PATH + 'lib/telephony/SIPml-api.js?_=v3', function()
					{
						// SIPml.setDebugLevel("error");

						// initialize SIPML5
						if (SIPml.isInitialized()){
							// If already done.
							sipRegister();
						} 
						else{
							SIPml.init(sipRegister);
						}
							
					});
				}
			}).error(function(data)
			{
				console.log("Sip error");
				console.log(data);
			});

		}
	}, 15000); // 15 sec
}

/**
 * Create stack, to register a sip.
 */
function sipRegister()
{

	// Add audio tags in home page.
	addAudio();

	// Properties for session object.
	Config_Call = { audio_remote : document.getElementById('audio_remote'), events_listener : { events : '*', listener : sipSessionEventsListener } };

	// If sip is already started.
	if (Sip_Start == true)
		return;

	// If sip is not started yet.
	// Set flag to avoid recall.
	Sip_Start = true;

	var url = null;

	// Get widget details.
	var credentials = eval('(' + Sip_Widget_Object.prefs + ')');

	var message = null;

	try
	{
		// Check Sip Public Identity is valid.
		var o_impu = tsip_uri.prototype.Parse(credentials.sip_publicid);

		if (!o_impu || !o_impu.s_user_name || !o_impu.s_host)
		{
			Sip_Start = false;
			message = credentials.sip_publicid + " is not a valid Public identity. Please provide valid credentials.";
			showCallNotyPopup("failed", "error", message, 5000);
		}
		else
		{
			// Check websocket_proxy_url
			if (credentials.sip_wsenable == "true")
			{
				console.log(window.location.protocol);
				if (window.location.protocol != "https:")
					//url = "ws://54.83.12.176:10060/ws"; // http
					url = "ws://rtc.agilecrm.com:10060/ws"; 
				else
					url = "wss://rtc.agilecrm.com:10062/wss"; 
					//url = "wss://54.83.12.176:10062/wss"; // https
			}

			
			// Define sip stack
			Sip_Stack = new SIPml.Stack({ realm : credentials.sip_realm, impi : credentials.sip_privateid, impu : credentials.sip_publicid,
				password : credentials.sip_password, display_name : credentials.sip_username, websocket_proxy_url : url, enable_rtcweb_breaker : true,
				events_listener : { events : '*', listener : sipStackEventsListener } });

			// sip stack start
			if (Sip_Stack.start() != 0)
			{
				Sip_Start = false;
				message = 'Failed to start the SIP stack. Please provide valid credentials.';
				showCallNotyPopup("failed", "error", message, 5000);
			}
		} // else end
	}
	catch (e)
	{
		Sip_Start = false;
		message = e + " Please provide valid credentials.";
		showCallNotyPopup("failed", "error", message, 5000);
	}

}

/**
 * Register or login on sip server for session.
 */
function sipLogin()
{
	try
	{
		// LogIn (REGISTER) as soon as the stack finish starting
		Sip_Register_Session = Sip_Stack.newSession('register', { events_listener : { events : '*', listener : sipSessionEventsListener } });
		Sip_Register_Session.register();
	}
	catch (e)
	{
		Sip_Start = false;
	}
}

/**
 * sends SIP REGISTER (expires=0) to logout. Sip unregister stack and session,
 * On logout / window close / SIP details in Sip widget modified.
 */
function sipUnRegister()
{
	// Check stack available.
	if (Sip_Stack)
	{
		// shutdown all sessions
		var done = Sip_Stack.stop();

		console.log("Sip_Stack.stop() :" + done);

		// If not then recursive call.
		if (done != 0)
			sipUnRegister();
	}
}
/**
 * Onclick of number buttons in dialpad, It send dtmf tone to SIP and will play
 * sound on success.
 * 
 * @param c
 */
function sipSendDTMF(digit)
{
	//console.log("sipSendDTMF: " + digit);

	// session for call is active and number is available.
	if (Sip_Session_Call && digit)
	{
		// play sound.
		play_sound("dtmf");
		
		// send dtmf on SIP
		if (Sip_Session_Call.dtmf(digit) == 0)
		{
			// Dtmf sent.
		}
	}
}
/* SIP event listeners */

/**
 * Callback function for SIP Stack or Events Listener for sip stack
 */
function sipStackEventsListener(e /* SIPml.Stack.Event */)
{	
	//console.log(e.type);
	//console.log(e.description);

	//tsk_utils_log_info('==agile stack event = ' + e.type);

	switch (e.type) {
	case 'started':
	{
		// Register on sip.
		sipLogin();
		break;
	}
	case 'failed_to_start':
	{
		showCallNotyPopup("disconnected", 'error', "SIP: There was an error registering your account. Please modify and try again.", 5000);
	}
	case 'failed_to_stop':
	case 'stopping':
	case 'stopped':
	{
		// Empty all data.
		Sip_Start = false;
		Sip_Stack = null;
		Sip_Register_Session = null;
		Sip_Session_Call = null;
		User_Name = null;
		User_Number = null;
		User_Img = null;
		User_ID = null;
		SIP_Call_Noty_IMG = "";
		Show_Add_Contact = false;

		// Stop sound.		
		stopRingTone();

		break;
	}
	case 'i_new_call':
	{
		// Incoming call.
		newIncomingCall(e);
		break;
	}
	case 'starting':
	{		
		break;
	}
	case 'm_permission_requested':
	{
		break;
	}
	case 'm_permission_accepted':
	{
		break;
	}
	case 'm_permission_refused':
	{
		// Stop sound.		
		stopRingTone();

		// Display
		showCallNotyPopup("mediaDeny", 'warning', "SIP: Media stream permission denied.", 5000);

		// SIP hangup call.
		hangupCall();
		break;
	}
	default:
	{
		console.log("In sipStack event Listner. " + e.type);
		break;
	}
	}
};

/**
 * Callback function for SIP sessions (INVITE, REGISTER, MESSAGE...)
 */
function sipSessionEventsListener(e /* SIPml.Session.Event */)
{	
	//console.log(e.type);
	//console.log(e.description);

	//tsk_utils_log_info('==agile session event = ' + e.type);

	switch (e.type) {
	case 'connecting':
	{
		break;
	}
	case 'sent_request':
	{
		break;
	}
	case 'connected':
	{
		if (e.session == Sip_Register_Session)
		{
			// Play sound on sip register.
			play_sound();

			// Display.
			showCallNotyPopup("register", 'information', "SIP: You are now registered to make and receive calls successfully.", 5000);

			// call action and telephone icon, Make visible.
			//$(".contact-make-sip-call").show();
			
			// Contact with tel: is hidden
			//$(".contact-make-call").hide();		
			//$(".contact-make-twilio-call").hide();
			
			// enable notifications if not already done
			if (window.webkitNotifications && window.webkitNotifications.checkPermission() != 0)
			{
				window.webkitNotifications.requestPermission();
			}
		}
		else if (e.session == Sip_Session_Call)
		{
			// Call received.
			stopRingTone();

			// Display.
			showCallNotyPopup("connected", "success", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><b>On call  </b>' + User_Number +'<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', false);

			// Close html5 notification.
			if (Notify_Call)
			{
				Notify_Call.cancel();
				Notify_Call = null;
			}
		}
		break;
	} // 'connecting' | 'connected'
	case 'terminating':
	case 'terminated':
	{
		if (e.session == Sip_Register_Session)
		{
			// Session terminated.
			Sip_Start = false;
			Sip_Session_Call = null;
			Sip_Register_Session = null;
			User_Name = null;
			User_Number = null;
			User_Img = null;
			User_ID = null;
			SIP_Call_Noty_IMG = "";
			Show_Add_Contact = false;

			if (Sip_Updated == true && e.description == "Disconnecting...")
			{
				Sip_Updated = false;
				showCallNotyPopup("disconnected", 'warning', "SIP : Terminated for modifications. Registering again...", 5000);
			}
			else if (No_Internet == true && e.description == "Disconnecting...")
			{
				No_Internet = false;
				showCallNotyPopup("disconnected", 'error', "SIP : Terminated because no internet connectivity.", 5000);
			}
			else
				showCallNotyPopup("disconnected", 'error', "SIP : Terminated because " + e.description, 5000);
		}
		else if (e.session == Sip_Session_Call)
		{
			// Call terminated.
			Sip_Session_Call = null;
			stopRingTone();

			// Show state of call.
			if (e.description == "Request Cancelled")
				showCallNotyPopup("missedCall", "error", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><b>Missed call </b>' + User_Number +'<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', 5000);
			else if (e.description == "PSTN calls are forbidden")
				showCallNotyPopup("forbidden", "error", "SIP: PSTN calls are forbidden.", 5000);
			else if (e.description == "Not acceptable here")
				showCallNotyPopup("noresponce", "error", "SIP: Not acceptable here.", 5000);
			else if (e.description == "Media stream permission denied")
				showCallNotyPopup("permissiondenied", "error", "SIP: Media stream permission denied.",5000);
			else if (e.description == "Call terminated")
				showCallNotyPopup("hangup", "information", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><b>Call ended with  <b>' + User_Number +'<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', 5000);
			else if (e.description == "Decline")
				showCallNotyPopup("decline", "error", "Call Decline.", 5000);
			else if (e.description == "Request Timeout")
				showCallNotyPopup("requestTimeout", "error", "SIP: Request Timeout.", 5000);
			else if (e.description == "Hackers Forbidden")
				showCallNotyPopup("hackersForbidden", "error", "SIP: Hackers Forbidden.", 5000);
			else if (e.description == "User not found")
				showCallNotyPopup("userNotFound", "error", "SIP: User not found.", 5000);
			else if(e.description == "Call terminating...")
			    console.log("SIP : Terminated because " + e.description);
			else if(!Is_Ignore)
				showCallNotyPopup("disconnected", 'error', "SIP : Terminated because " + e.description, 5000);

			// Show add contact modal if contact id not added
			if(Show_Add_Contact == true)
				{
				 $('#personModal').modal('show');
				 $("#personForm").find("#phone").val(User_Number);
				}			
			
			// call terminated.			
			User_Name = null;
			User_Number = null;
			User_Img = null;
			User_ID = null;
			SIP_Call_Noty_IMG = "";
			Is_Ignore = false;
			Show_Add_Contact = false;

			// Close html5 notification.
			if (Notify_Call)
			{
				Notify_Call.cancel();
				Notify_Call = null;
			}
		}
		break;
	} // 'terminating' | 'terminated'
	case 'i_ao_request':
	{
		if (e.session == Sip_Session_Call)
		{
			var iSipResponseCode = e.getSipResponseCode();
			if (iSipResponseCode == 180 || iSipResponseCode == 183)
			{
				// On outgoing call.
				startRingTone("ringbacktone");
				//console.log("Remote ringing....");
			}
		}

		break;
	}
	case 'media_added':
	{
		break;
	}
	case 'media_removed':
	{
		break;
	}
	case 'i_request':
	{
		break;
	}
	case 'o_request':
	{
		break;
	}
	case 'cancelled_request':
	{
		break;
	}
	case 'sent_request':
	{
		break;
	}
	case 'transport_error':
	{
		break;
	}
	case 'global_error':
	{
		break;
	}
	case 'message_error':
	{
		break;
	}
	case 'webrtc_error':
	{
		break;
	}

	case 'm_early_media':
	{
		// Call refused.
		stopRingTone();
		break;
	}
	case 'm_stream_audio_local_added':
	{
		break;
	}
	case 'm_stream_audio_local_removed':
	{
		break;
	}
	case 'm_stream_audio_remote_added':
	{
		break;
	}
	case 'm_stream_audio_remote_removed':
	{
		break;
	}
	case 'i_info':
	{
		break;
	}
	default:
	{
		console.log("Sip Session event Listner. " + e.type);
		break;
	}
	}
}
/**
 * On incoming call, It finds relevant contact user from added contacts with
 * same phone number.
 */
function findContact()
{	
	console.log("FindContact. " + Sip_Session_Call.getRemoteUri());

	// Get contact details on phone number
	$.getJSON("/core/api/contacts/search/phonenumber/" + removeBracesFromNumber(Sip_Session_Call.getRemoteUri()), function(caller)
	{
		console.log(caller);

		// Contact added
		if (caller != null)
		{
			// Get details to update call noty.
			//if (caller.properties[0].name == 'first_name' || caller.properties[1].name == 'last_name')
			{
				User_ID = caller.id;
				User_Name = getContactName(caller);
				User_Number = removeBracesFromNumber(Sip_Session_Call.getRemoteUri());
				User_Img = getGravatar(caller.properties, 40);
				SIP_Call_Noty_IMG = addSipContactImg();				

				// Set details if call is still active.
				if (CALL != undefined)
					CALL.setText(SIP_Call_Noty_IMG+'<span class="noty_contact_details"><i class="icon icon-phone"></i><b>Incoming call  </b>'+ User_Number +'<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>' );
			}
		}
		else
			Show_Add_Contact = true;
	}).error(function(data)
	{
		console.log("Find contact : " + data.responseText);
	});
}
var default_call_option = { "callOption" : [] };
var callOptionDiv = "" ;
var globalCall = { "callDirection" : null, "callStatus" : "Ideal", "callId" : null, "callNumber" : null, "timeObject" : null, "lastReceived":null, "lastSent":null , "calledFrom":null, "contactedId":null, "contactedContact" : null};
var globalCallForActivity = { "callDirection" : null, "callId" : null, "callNumber" : null, "callStatus" : null, "duration" : 0, "requestedLogs" : false, "justCalledId" : null, "justSavedCalledIDForNote" : null, "justSavedCalledIDForActivity" : null}; 
var widgetCallName = { "Sip" : "Sip", "TwilioIO" : "Twilio", "Bria" : "Bria", "Skype" : "Skype", "CallScript" : "CallScript" };
var CallLogVariables = {"callActivitySaved" : false, "id" : null, "callType" : null, "status" : null, "callWidget" : null, "duration" : null, "phone" : null, "url" : null };

$(function()
{
	initToPubNub();
	globalCallWidgetSet();
});

function getContactImage(number, type, callback)
{
	if (type)
	{
		if (type == "Outgoing")
		{
			var currentContact = agile_crm_get_contact();
			getTemplate('contact-image', currentContact, undefined, function(image)
			{
				if (!image)
					callback("");
				callback(image);
			});

		}
		else
		{

			searchForContactImg(number, function(currentContact)
			{
				if (!currentContact)
				{
					 callback("");
					 return;
				}
				getTemplate('contact-image', currentContact, undefined, function(image)
				{
					if (!image){
						callback("");
						return;
					}
					callback(image);
				});
			});
		}
	}

}

function globalCallWidgetSet()
{
	$
			.getJSON(
					"/core/api/widgets/availableCallWidgets",
					function(call_widget)
					{
						console.log("default call option selected is :" + call_widget);

						if (call_widget.length == 0)
						{
							return;
						}

						callOptionDiv = "<span class='inner-call-option m-l-sm'>";

						$
								.each(
										call_widget,
										function(index, widget)
										{
											if (widget != undefined)
											{
												var temp = { "name" : widget.name, "logo" : widget.mini_logo_url };
												addtoCallOption(temp);
												var name = widget.name;
												if(name != "CallScript"){
													callOptionDiv = callOptionDiv
													.concat("<img class ='" + name + "_call c-p active' src='" + widget.mini_logo_url + "' style='width: 20px; height: 20px; margin-right: 5px;' data-toggle='tooltip' data-placement='top' title='' data-original-title='" + widgetCallName[name] + "'>");
												}
											}
										});

						callOptionDiv = callOptionDiv.concat("</span>");

						$.each(default_call_option.callOption, function(i, obj)
						{
							if (obj.name == "Bria" || obj.name == "Skype")
							{
								sendTestCommand();
								return false;
							}
						});

						$('body').on({ mouseenter : function(e)
						{
							if (!Pubnub)
							{
								return;
							}
							else
							{
								if (!Pubnub.is_connected_call)
								{
									return;
								}
							}

							if ($(".contact-make-call").hasClass("c-progress"))
							{
								$(".contact-make-call").removeClass("c-progress");
							}
							$(".inner-call-option").remove();
							$(this).append(callOptionDiv);
							$('[data-toggle="tooltip"]').tooltip();
							if (Twilio_Start != true)
							{
								$(".TwilioIO_call").removeClass("active");
								$(".TwilioIO_call").addClass("disable");

							}
							if (Sip_Stack != undefined && Sip_Register_Session != undefined && Sip_Start == true)
							{
								$(".Sip_call").removeClass("active");
								$(".Sip_call").addClass("disable");
							}

						}, mouseleave : function()
						{
							$(".inner-call-option").remove();

						} }, '.contact-make-call');

						$('body')
								.on(
										{
											mouseenter : function(e)
											{
												if (!Pubnub)
												{
													return;
												}
												else
												{
													if (!Pubnub.is_connected_call)
													{
														return;
													}
												}

												if ($(".contact-make-skype-call").hasClass("c-progress"))
												{
													$(".contact-make-skype-call").removeClass("c-progress");
												}
												$(".inner-call-option").remove();

												var array = default_call_option.callOption;
												var index = containsOption(array, "name", "Skype");

												if (index != -1)
												{
													var ele = "<span class='inner-call-option m-l-sm'>";
													ele = ele
															.concat("<img class ='" + array[index].name + "_call c-p active' src='" + array[index].logo + "' style='width: 20px; height: 20px; margin-right: 5px;' data-toggle='tooltip' data-placement='top' title='' data-original-title='" + array[index].name + "'>");
													ele = ele.concat("</span>")
													$(this).append(ele);
												}
												$('[data-toggle="tooltip"]').tooltip();
											}, mouseleave : function()
											{
												$(".inner-call-option").remove();

											} }, '.contact-make-skype-call');

					}).error(function(data)
			{
				console.log("error in fetching the default call widget name");
				console.log(data);
			});
}

function changeTooltipTo(selector, text)
{
	$(selector).tooltip('hide').attr('data-original-title', text).tooltip('fixTitle');

}

function removeFromCallOption(name)
{
	var index;
	$.each(default_call_option.callOption, function(i, obj)
	{
		if (obj.name == name)
		{
			index = i;
		}
	});

	if (!index)
	{
		return;
	}
	default_call_option.callOption.splice(index, 1); // this will remove the
	// index value and leave
	// the remaining
	// variable with change
}

function addtoCallOption(option)
{

	$.each(default_call_option.callOption, function(i, obj)
	{
		if (obj.name == option.name)
		{
			return;
		}
	});
	default_call_option.callOption.push(option);
}

function containsOption(array, property, name)
{
	var result = -1;
	$.each(array, function(i, obj)
	{
		if (obj[property] == name)
		{
			result = i;
			return result;
		}
	});
	return result;
}

function sendTestCommand()
{
		setTimeout(function()
				{
					if(!Pubnub){
						sendTestCommand();
						return;
					}
					if(!Pubnub.is_connected_call){
						sendTestCommand();
						return;
					}
					
					var image = new Image();

					var domain = CURRENT_DOMAIN_USER['domain'];
					var id = CURRENT_DOMAIN_USER['id'];

					var command = "testConnection";
					var number = "";
					var callid = "";

					image.onload = function(png)
					{
						console.log("test sucess");
						window.focus();
					};
					image.onerror = function(png)
					{
						showCallNotyMessage("Executable file is not running");
					};
					image.src = "http://localhost:33333/" + new Date().getTime() + "?command=" + command + ";number=" + number + ";callid=" + callid + ";domain=" + domain + ";userid=" + id + ";type=test?";

					
				}, 5000);
		
	
	}

function sendCommandToClient(command,widget)
{
			var command = command;
			var number =  "";
			var callId = "";
			if(widget == "Skype"){
				sendMessageToSkypeClient(command,number,callId);
			}else{
				sendMessageToBriaClient(command,number,callId);
			}
			
			return;
}

function replicateglobalCallVariable()
{

	globalCallForActivity.callStatus = globalCall.callStatus;
	globalCallForActivity.callDirection = globalCall.callDirection;
	globalCallForActivity.callNumber = globalCall.callNumber;
	globalCallForActivity.callId = globalCall.callId;
	globalCallForActivity.requestedLogs = false;
}

// This method resets the varibles which are need to show values in noty for new
// call...

function resetglobalCallVariables()
{
	globalCall.callDirection = null;
	globalCall.callStatus = "Ideal";
	globalCall.callId = null;
	globalCall.callNumber = null;
	globalCall.lastReceived = null;
	globalCall.lastSent = null;
	//globalCall.calledFrom = null;
	if (globalCall.timeObject != null)
	{
		clearTimeout(globalCall.timeObject);
		globalCall.timeObject = null;
	}

}

function resetglobalCallForActivityVariables()
{
	globalCallForActivity.callDirection = null;
	globalCallForActivity.callStatus = null;
	globalCallForActivity.callId = null;
	globalCallForActivity.callNumber = null;
	globalCallForActivity.duration = 0;
}

function resetCallLogVariables(){
	CallLogVariables.callActivitySaved = false;
	CallLogVariables.id = null;
	CallLogVariables.callType = null;
	CallLogVariables.status = null;
	CallLogVariables.callWidget = null;
	CallLogVariables.duration = null;
	CallLogVariables.phone = null;
	CallLogVariables.url = null;
}

function handleCallRequest(message)
{
	// Display message in stream.
	if ((message || {}).callType == "Bria")
	{
		var index = containsOption(default_call_option.callOption, "name", "Bria");
		if( index == -1){
			sendCommandToClient("notConfigured","Bria");
			return;
		}
		if (message.state == "lastCallDetail")
		{
			globalCallForActivity.duration = message.duration;
			var call = { "direction" : message.direction, "phone" : globalCallForActivity.callNumber, "status" : globalCallForActivity.callStatus,
				"duration" : message.duration };
			var num = globalCallForActivity.callNumber;
			saveCallNoteBria();
			saveCallActivityBria(call);
			try
			{
				var phone = $("#bria_contact_number").val();
				if (!phone || phone == "")
				{
					phone = agile_crm_get_contact_properties_list("phone")[0].value;
				}
				if (phone == num)
				{
					getLogsForBria(num);
				}
			}
			catch (e)
			{
			}
			return;
		}
		else if (message.state == "error")
		{
			closeCallNoty(true);
						try
						{
							if(globalCall.calledFrom == "Bria"){
								resetglobalCallVariables();
								resetglobalCallForActivityVariables();
							}
						}
						catch (e)
						{
						}
			resetglobalCallVariables();
			resetglobalCallForActivityVariables();
			return;
		}
		else if (message.state == "logs")
		{
			handleLogsForBria(message);
			return;
		}
		else if (message.state == "closed")
		{
			if(globalCall.calledFrom == "Bria"){
				showCallNotyMessage("Bria is not running");
				closeCallNoty(true);
				resetglobalCallVariables();
				resetglobalCallForActivityVariables();
			}
			return;
		}
		showBriaCallNoty(message);
		return;
	}
	else if ((message || {}).callType == "Skype")
	{
		var index = containsOption(default_call_option.callOption, "name", "Skype");
		if( index == -1){
			sendCommandToClient("notConfigured","Skype");
			return;
		}
		// start from here
		if (message.state == "lastCallDetail")
		{
			globalCallForActivity.duration = message.duration;
			console.log("message.direction : " + message.direction + "-----" + globalCallForActivity.callDirection);
			var call = { "direction" : globalCallForActivity.callDirection, "phone" : globalCallForActivity.callNumber,
				"status" : globalCallForActivity.callStatus, "duration" : message.duration };
			var num = globalCallForActivity.callNumber;
			console.log("last called : " + call);
			saveCallNoteSkype();
			saveCallActivitySkype(call);
			try
			{
				
				//var contact = agile_crm_get_contact();

				var phone = $("#skype_contact_number").val();
				if (!phone || phone == "")
				{
					phone = agile_crm_get_contact_properties_list("phone")[0].value;
					//phone = getPhoneWithSkypeInArray(contact.properties)[0];
				}
				if (phone == num)
				{
					getLogsForSkype(num);
				}
			}
			catch (e)
			{
			}
			globalCallForActivity.requestedLogs = false;
			return;
		}
		else if (message.state == "error")
		{
			closeCallNoty(true);
						try
						{
							if(globalCall.calledFrom == "Skype"){
								resetglobalCallVariables();
								resetglobalCallForActivityVariables();
							}
						}
						catch (e)
						{
						}
			console.log("error message received...");
		}
		else if (message.state == "logs")
		{
			handleLogsForSkype(message);
			return;
		}
		else if (message.state == "closed")
		{
			
			if(globalCall.calledFrom == "Skype"){
				closeCallNoty(true);
				showCallNotyMessage("Skype is not running");
				resetglobalCallVariables();
				resetglobalCallForActivityVariables();
			}
			return;
		}
		showSkypeCallNoty(message);
		return;
	
		}
}

// this is to download the jar file....
$('body').on('click', '#downloadCallJar', function(e)
{
	e.preventDefault();
	window.location.href = 'https://s3.amazonaws.com/agilecrm/website/widgetCall.jar';
});

function checkForActiveCall()
{
	var flag = false;
	try
	{
		if (Twilio.Device.status() == "busy")
		{
			flag = true;
		}
	}
	catch (e)
	{

	}
	try
	{
		if (globalCall.callStatus != "Ideal")
		{
			flag = true;
		}
	}
	catch (e)
	{

	}
	return flag;
}

function closeCallNoty(option){
	
	if(!option){
		if(checkForActiveCall()){
			return;
		}
	}
	$("#draggable_noty").hide();
	$(".draggable_noty_callScript","#draggable_noty").html("");
	$("#draggable_noty").removeClass("draggable-popup");
	
	
}



function setTimerToCheckDialing(name)
{
	globalCall.timeObject = setTimeout(function()
	{
		if (globalCall.callStatus == "dialing")
		{
			closeCallNoty(true);
			var number = globalCall.contactedId ;
			var cont = globalCall.contactedContact;
			var previousCalledClient  = globalCall.calledFrom; 
			resetglobalCallVariables();
			resetglobalCallForActivityVariables();
			globalCall.calledFrom = previousCalledClient;
			globalCall.contactedId = number;
			globalCall.contactedContact = cont;
		}
	}, 20000);
}


/**
 * It will return the phone and skype phone in array having more than one
 * contact
 */
function getPhoneWithSkypeInArray(items)
{
	var va = [];
	var phone = "phone";
	var skype = "skypePhone";
	for (var i = 0, l = items.length; i < l; i++)
	{
		if (items[i].name == phone || items[i].name == skype)
		{
			// If phone number has value only then add to array
			if (items[i].value != "" || items[i].value != null)
				va[va.length] = items[i].value;
		}
	}
	return va;
}

/**
 * @ author - prakash - 15/6/15
 * This method updates two fields of contact object - lastcalled and last contacted
 * This method retrieves the current contact object and make the json call to server to save json time in server.
 */
function twilioIOSaveContactedTime(contactId)
{
	console.log ('in IOSaveContactedTime');
	var id;
	if(contactId){
		id = contactId;
	}else{
		id = agile_crm_get_contact().id;
	}
	console.log('contact id = ' + id);
	$.get("/core/api/widgets/twilio/save/time/?id=" + id , function(result)
			{
				console.log('processed In twilioIOSaveContactedTime');
				console.log('Results : ' + result);
				console.log('result = ' + result);
			}).error(function(data)
			{
				console.log('Error - Results :' + data);
			});
}

/**
 * On i_new_call event of sip stack, New session is created and noty displyed.
 */
function newIncomingCall(e)
{
	// Session for call is already created.
	if (Sip_Session_Call != null)
	{
		//showNotyPopUp('information', "You are already in call.", "top", 5000);
		//alert("Already on call.");
		var newCall = e.newSession;
		newCall.setConfiguration(Config_Call);
		console.log(e);
		console.log(newCall);
		 
		showMissedNotyPopUp("warning", '<b>Missed call : </b><br>' + (newCall.getRemoteFriendlyName() || 'unknown')+' '+ removeBracesFromNumber(newCall.getRemoteUri()), "bottomRight");
		
		// do not accept the incoming call if we're already 'in call'
		e.newSession.hangup(); // comment this line for multi-line support
	}
	else
	{
		// Create new session for call.
		Sip_Session_Call = e.newSession;

		// start listening for events and set properties.
		Sip_Session_Call.setConfiguration(Config_Call);

		// Assign display name and number for noty.
		var sRemoteName = (Sip_Session_Call.getRemoteFriendlyName() || 'unknown');
		User_Name = sRemoteName;
		User_Number = removeBracesFromNumber(Sip_Session_Call.getRemoteUri());

		// Show noty
		showIncomingCall();
	}
}

// show details in noty popup for incoming call.
function showIncomingCall()
{
	// return if call under notification prefs is disabled
	if(notification_prefs && notification_prefs["call"] === false)
		return;
	
	showCallNotyPopup("incoming", "confirm", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><i class="icon icon-phone"></i><b>Incoming call </b>'+ User_Number + '<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', false);

	// Incoming call sound play.
	startRingTone("ringtone");

	// notification display permission already asked when we registered	
	show_desktop_notification("../img/plugins/sipIcon.png", "Incoming Call :", User_Name + " " + User_Number, undefined, "SipCall");
	
	// Find contact for incoming call and update display.
	findContact();
}
/**
 * Makes a call (SIP INVITE). Outgoing call.
 * 
 * @param phoneNumber
 * @returns {Boolean}
 */
function makeCall(phoneNumber)
{
	// Check Stack is available, Session is empty and phone number is available.
	if (Sip_Stack && !Sip_Session_Call && !tsk_string_is_null_or_empty(phoneNumber))
	{
		// create call session
		Sip_Session_Call = Sip_Stack.newSession('call-audio', Config_Call);

		// make call
		if (Sip_Session_Call.call(phoneNumber) != 0)
		{
			// If failed.
			Sip_Session_Call = null;
			showCallNotyPopup("failed", "error", "Failed to make call.", false);

			return false;
		}
		return true;
	}
	else if (Sip_Stack != null && Sip_Session_Call != null)
	{
		//showNotyPopUp('information', "You are already in call.", "top", 5000);
		showAlertModal("on_call");
		return false;
	}
	else if (!Sip_Stack)
	{
		showNotyPopUp('information', "You are not register with SIP server, Please refresh the page.", "top", 5000);
		return false;
	}
}

/**
 * terminates the call (SIP BYE or CANCEL)
 */
function hangupCall()
{
	// Call session not null.
	if (Sip_Session_Call != null)
	{
		// stop ringtone.
		stopRingTone();
		
		//console.log("Terminating the call...");
		
		// Hangup call
		Sip_Session_Call.hangup({ events_listener : { events : '*', listener : sipSessionEventsListener } });
	}

	// Close notification.
	if (Notify_Call)
	{
		Notify_Call.cancel();
		Notify_Call = null;
	}
}
/* functions related to audio */

/**
 * Add audio tag in home.jsp after SIP registration is done successfully.
 * It is required for Voice in Call. It is SIP API requirement.
 */
function addAudio() {
	var audioElmt = document.getElementById("audio_remote");

	// Already added.
	if (audioElmt != undefined)
		return;
	else if (audioElmt == undefined) // not added.
	{
		// add audio
		$('body')
				.append(
						'<!-- Sip Audios --><audio id="audio_remote" autoplay="autoplay" />');
	}
}

/**
 * On incoming call it starts. On outgoing call after remote connect it will
 * starts.
 */
function startRingTone(sound) {
	try {
		Sip_Audio = new Audio("../res/" + sound + ".mp3");
		if (typeof Sip_Audio.loop == 'boolean') {
			Sip_Audio.loop = true;
		} else {
			var onEnded = function() {
				//console.log("play");
				this.play();
			};

			Sip_Audio.addEventListener('ended', onEnded, false);
		}

		Sip_Audio.play();
	} catch (e) {
		console.log("Error Sip_Audio can not play.");
	}
}

/**
 * Incoming call: After receive / missed / ignore from user and on error it
 * stops. Outgoing call: After received / missed / ignored from callee and on
 * error it stops.
 */
function stopRingTone() {
	try {
		Sip_Audio.pause();
	} catch (e) {
		console.log("Error Sip_Audio can not stop.");
	}
}

//Run callscriptrules against a contact
function _agile_execute_callscriptrules(_agile_web_rules)
{
	// Get All callscriptrules and execute each
	for ( var j = 0; j < _agile_web_rules.length; j++)
	{
		if(_agile_execute_callscriptrule(_agile_web_rules[j]))
			{
			console.log("condition applied");
			return;			
			}			
	}
	
	// show default text as no rule defined 
	$('#CallScript').html("<div class='wrapper-sm'>No matching call script found.</div>");	
}

// Run a single web rule
function _agile_execute_callscriptrule(callscriptrule)
{
	// Get all conditions and return if any of it doesn't match
	var l = callscriptrule.rules.length;
	for ( var i = 0; i < l; i++)
	{
		var condition = callscriptrule.rules[i];

		if (!_agile_check_condition(condition))
		 {
			console.log("not matched: ")
			return false;
		 }
	}
		
	// Replace data with merge fields
	var displayText = replaceMergeFields(callscriptrule.displaytext);
	// show text as per rules
	$('#CallScript').html("<div class='wrapper-sm'><span class='text-base'>"+displayText+"</span></div>");	
	
	return true;
}

// Replace data of contact with merge fields
function replaceMergeFields(displayText)
{
	var result = displayText;
	
	// Get merge fields	
	var matches = [];

	var pattern = /\{{(.*?)\}}/g;
	var match;
	while ((match = pattern.exec(displayText)) != null)
	{
	  matches.push(match[1]);
	}
	
    // Counter for how many merge fields replcae with data
	var j = 0;
	
	// Replace merge fields with data
	for(var i =0;i<matches.length;i++)
	{
		var tempMatch =matches[i];
		if(matches[i] == "score"){
			tempMatch = 'lead_score';
		}
	  // Get contact property data
	  var k = _agile_contact.properties.length;
		for ( var s = 0; s < k; s++)
		{			
			// Check if contact properties from callscriptrules match with contact properties
			if (_agile_contact.properties[s].name == matches[i])
			{
				// Replace merge fields with contact property data
				result = result.replace('{{'+matches[i]+'}}', _agile_contact.properties[s].value);				
				j++;
				break;
			}else if(_agile_contact[tempMatch]){
				result = result.replace('{{'+matches[i]+'}}', _agile_contact[tempMatch]);				
				j++;
				break;
			}else{
				try{
					var temp = matches[i];
					temp = temp.split('.');
					var tempVar = _agile_contact;
					if(temp[0] == "owner"){
						for(var p=0;p<temp.length;p++){
							tempVar = tempVar[temp[p]];
						}
					}else if(temp[0] == "location"){
						temp[0] = 'address';
						if (_agile_contact.properties[s].name == temp[0]){
							tempVar = JSON.parse(_agile_contact.properties[s].value);
							for(var p=1;p<temp.length;p++){
								tempVar = tempVar[temp[p]];
							}
						}
					}
					if(typeof tempVar != "object"){
						result = result.replace('{{'+matches[i]+'}}', tempVar);				
						j++;
						break;
					}
				}catch(e){
				}
				
			}
			
		} // for end s	  	
 	}// for end i
		
	// if no such field found, then replace with null
	while(j < matches.length)
	 {		
		var match;
		while ((match = pattern.exec(result)) != null)
		{
			// Replace remaining merge fields which are not with contact property data
			result = result.replace(match[0], "");
			j++;
		}
  	 }
	return result;
}

//Core Function which checks if the condition matches with the contact (global)
function _agile_check_condition(condition)
{
	switch (condition.LHS) {
	case "tags":
	{
		switch (condition.CONDITION) {
		case "EQUALS":
			return _agile_rules["tags_in"](condition);
		case "NOTEQUALS":
			return _agile_rules["tags_out"](condition);
		}

	}
		break;	
	case "tags_time":
		return _agile_rules["tags_time"](condition);
	case "created_time":
		return _agile_rules["contact_time"](condition);
	case "title":
	{
		switch (condition.CONDITION) {
		case "EQUALS":
			return _agile_rules["contact_properties_in"](condition);
		case "NOTEQUALS":
			return _agile_rules["contact_properties_out"](condition);
		}
	}
		break;
	case "company":
	{
		switch (condition.CONDITION) {
		case "EQUALS":
			return _agile_rules["contact_properties_in"](condition);
		case "NOTEQUALS":
			return _agile_rules["contact_properties_out"](condition);
		}
	}
		break;
	case "lead_score":
	{
		switch (condition.CONDITION) {
		case "IS_LESS_THAN":
			return _agile_rules["max_score"](condition);
		case "IS_GREATER_THAN":
			return _agile_rules["min_score"](condition);
		case "EQUALS":
			return _agile_rules["score"](condition);
		}
	}
		break;		
	case "visitor":
	{
		switch (condition.CONDITION) {
		case "KNOWN":
			return _agile_rules["is_known_visitor"](condition);
		case "UNKNOWN":
			return _agile_rules["is_unknown_visitor"](condition);
		}
	}
		break;	
	case "owner_id":
	{
		switch (condition.CONDITION) {
		case "EQUALS":
			return _agile_rules["owner_is"](condition);
		case "NOTEQUALS":
			return _agile_rules["owner_is_not"](condition);
		}
	}
		break;
	default:
	{		
		switch (condition.CONDITION) {
		case "EQUALS":
			return _agile_rules["contact_properties_in"](condition);			
		case "NOTEQUALS":
			return _agile_rules["contact_properties_out"](condition);			
		case "MATCHES":
			return _agile_rules["contact_properties_match"](condition);
		case "NOT_CONTAINS":
			return _agile_rules["contact_properties_doesnot_match"](condition);
		default:
		{
			return _agile_rules["custom_time"](condition);
		}
		}
	}
	}
}

var _agile_rules = {

	// To check if tags are equal
	tags_in : function(condition)
	{
		if (condition.RHS && _agile_contact)
		{
			var j = _agile_contact.tags.length;
			for ( var l = 0; l < j; l++)
			{

				// Check if tags from callscriptrules match with contact
				// tags
				if (condition.RHS === _agile_contact.tags[l])
				{
					return true;
				}
			}
		}
	},

	// To check if tags are not equal
	tags_out : function(condition)
	{
		// If contact is not present, return true as he doesn't have any tags
		if (!_agile_contact)
			return true;

		if (_agile_contact && condition.RHS)
		{
			var flag = 0;
			var j = _agile_contact.tags.length;
			for ( var l = 0; l < j; l++)
			{

				// Check if tags from callscriptrules match contact tags
				if (_agile_contact.tags[l] !== condition.RHS)
				{
					flag++;
				}
			}
			if (flag == j && flag !== 0 && j !== 0)
				return true;
		}
	},

	// To check if tags match and verify time conditions like tags created
	// after, before, in the last specified days
	tags_time : function(condition)
	{
		if (condition.RHS && _agile_contact)
		{
			var tag = condition.RHS;
			var time = condition.nested_lhs;
			var time_max = condition.nested_rhs;

			var j = _agile_contact.tagsWithTime.length;
			for ( var l = 0; l < j; l++)
			{
				if (tag == _agile_contact.tagsWithTime[l].tag)
				{
					var current_time = new Date().getTime();
					var created_time = (_agile_contact.tagsWithTime[l].createdTime);
					var dif = (current_time - created_time);
					if ((condition.nested_condition == "LAST" && (0 <= dif && dif <= (time * 86400000))) || (condition.nested_condition == "AFTER" && (time <= created_time) && ((created_time - time) >= 86400000)) || (condition.nested_condition == "BEFORE" && (time >= created_time)) || (condition.nested_condition == "EQUALS" && (0 <= (created_time - time) && (created_time - time) <= 86400000)) || (condition.nested_condition == "BETWEEN" && (time <= created_time && created_time <= time_max)))
					{
						return true;
					}
				}
			}
		}
	},

	// To check if score greater than min_score
	min_score : function(condition)
	{
		if (_agile_contact && condition.RHS && _agile_contact.lead_score > condition.RHS)
			return true;
	},

	// To check if score less than max_score
	max_score : function(condition)
	{
		if (_agile_contact && condition.RHS && _agile_contact.lead_score < condition.RHS)
			return true;
	},

	// To check if score is equal to score
	score : function(condition)
	{
		if (_agile_contact && condition.RHS && _agile_contact.lead_score == condition.RHS)
			return true;
	},

	// To check if referrer url matches with url in callscriptrules
	referrer_is : function(condition)
	{
		if (condition.RHS == document.referrer)
			return true;
	},

	// To check if referrer url matches with specified string in callscriptrules
	referrer_matches : function(condition)
	{
		var url = document.referrer;
		if (url.indexOf(condition.RHS) !== -1)
			return true;
	},

	// To check if referrer url does not matches with specified string in
	// callscriptrules
	referrer_not_matches : function(condition)
	{
		var url = document.referrer;
		if (url.indexOf(condition.RHS) == -1)
			return true;
	},

	// To check if referrer url doesnot match with url in callscriptrules
	referrer_is_not : function(condition)
	{
		if (condition.RHS !== document.referrer)
			return true;
	},

	// To check current page matches with given url in callscriptrules
	page_view_is : function(condition)
	{
		if (condition.RHS === document.location.href)
			return true;
	},

	// To check if referrer url doesnot match with url in callscriptrules
	page_view_is_not : function(condition)
	{
		if (condition.RHS !== document.location.href)
			return true;
	},

	// To check if page url does not matches with specified string in
	// callscriptrules
	page_view_not_matches : function(condition)
	{
		var url = document.location.href;
		if (url.indexOf(condition.RHS) == -1)
			return true;
	},

	// To check if current page url matches with given string in callscriptrules
	page_view_matches : function(condition)
	{
		var url = document.location.href;
		if (url.indexOf(condition.RHS) !== -1)
			return true;
	},

	// To check if contact properties match or not
	contact_properties_in : function(condition)
	{		
		if (_agile_contact && condition.RHS)
		{
			var k = _agile_contact.properties.length;
			for ( var s = 0; s < k; s++)
			{
				// Check if contact properties from callscriptrules match with
				// contact properties
				if (condition.LHS == _agile_contact.properties[s].name && condition.RHS == _agile_contact.properties[s].value)
				{
					return true;
				}
			}
		}
	},

	// To check if contact properties do not match
	contact_properties_out : function(condition)
	{
		if (_agile_contact && condition.RHS)
		{
			var flag = 0;
			var k = _agile_contact.properties.length;
			for ( var h = 0; h < k; h++)
			{

				// Check if contact properties from callscriptrules match with
				// contact properties
				if (condition.LHS == _agile_contact.properties[h].name && condition.RHS != _agile_contact.properties[h].value)
				{
					return true;
				}
				if (condition.LHS !== _agile_contact.properties[h].name)
					flag++;
			}
			if (flag == k && flag != 0 && k != 0)
				return true;
		}
	},

	// To check contact created time is after, before or in the last few
	// days
	contact_time : function(condition)
	{
		if (_agile_contact && condition.RHS)
		{
			var current_time = new Date().getTime();
			var created_time = (_agile_contact.created_time * 1000);
			var dif = (current_time - created_time);
			var time = condition.RHS;
			var time_max = condition.RHS_NEW;
			if ((condition.CONDITION == "LAST" && (0 <= dif && dif <= (time * 86400000))) || (condition.CONDITION == "AFTER" && (time <= created_time) && ((created_time - time) >= 86400000)) || (condition.CONDITION == "BEFORE" && (time >= created_time)) || (condition.CONDITION == "ON" && (0 <= (created_time - time) && (created_time - time) <= 86400000)) || (condition.CONDITION == "BETWEEN" && (time <= created_time && created_time <= time_max)))
				return true;
		}
	},

	// To check custom date condition is after, before or in the last few
	// days
	custom_time : function(condition)
	{
		if (_agile_contact && condition.RHS)
		{
			var time = condition.RHS;
			var time_max = condition.RHS_NEW;
			var l = _agile_contact.properties.length;
			for ( var g = 0; g < l; g++)
			{
				if (condition.LHS == (_agile_contact.properties[g].name + "_time"))
				{
					var current_time = new Date().getTime();
					var property_time = _agile_contact.properties[g].value * 1000;
					var dif = (current_time - property_time);
					if ((condition.CONDITION == "LAST" && (0 <= dif && dif <= (time * 86400000))) || (condition.CONDITION == "AFTER" && (time <= property_time) && ((property_time - time) >= 86400000)) || (condition.CONDITION == "BEFORE" && (time >= property_time)) || (condition.CONDITION == "ON" && (0 <= (property_time - time) && (property_time - time) <= 86400000)) || (condition.CONDITION == "BETWEEN" && (time <= property_time && property_time <= time_max)))
						return true;
				}
			}
		}
	},

	// To check owner equals
	owner_is : function(condition)
	{
		if (_agile_contact && condition.RHS && _agile_contact.owner.id.toString() == condition.RHS)
			return true;
	},

	// To check if owner is not equal
	owner_is_not : function(condition)
	{
		if (_agile_contact && condition.RHS && _agile_contact.owner.id.toString() !== condition.RHS)
			return true;
	},

	// To check if contact custom properties contains input string
	contact_properties_match : function(condition)
	{
		if (_agile_contact && condition.RHS)
		{
			var k = _agile_contact.properties.length;
			for ( var g = 0; g < k; g++)
			{
				if ((condition.LHS == _agile_contact.properties[g].name) && _agile_contact.properties[g].value && (_agile_contact.properties[g].value
						.indexOf(condition.RHS) !== -1))
					return true;
			}
		}
	},

	// To check if contact custom properties doesnot contains input string
	contact_properties_doesnot_match : function(condition)
	{
		if (_agile_contact && condition.RHS)
		{
			var k = _agile_contact.properties.length;
			var a = 0;
			for ( var g = 0; g < k; g++)
			{
				if ((condition.LHS == _agile_contact.properties[g].name) && _agile_contact.properties[g].value && (_agile_contact.properties[g].value
						.indexOf(condition.RHS) == -1))
					return true;
				if (condition.LHS !== _agile_contact.properties[g].name)
					a++;
			}
			if (a == k && k != 0 && a != 0)
				return true;
		}
	},

	// To check if cart is empty
	is_cart_empty : function(condition)
	{
		try
		{
			return (_agile_shopify_cart.item_count == 0);
		}
		catch (e)
		{
		}

		return false;
	},

	// To check if cart is not
	is_cart_not_empty : function(condition)
	{
		try
		{
			return (_agile_shopify_cart.item_count != 0);
		}
		catch (e)
		{
		}

		return false;
	},

	// To check if cart has a particular item
	cart_has_item : function(condition)
	{
		try
		{
			for ( var i = 0; i < _agile_shopify_cart.items.length; i++)
			{
				if (condition.RHS == _agile_shopify_cart.items[i].title)
				{
					return true;
				}
			}
			return false;
		}
		catch (e)
		{
		}

		return false;
	},

	// To check if cart value is greater than
	cart_value_greater_than : function(condition)
	{
		try
		{
			return ((_agile_shopify_cart.total_price / 100) >= condition.RHS);
		}
		catch (e)
		{
		}

		return false;
	},

	// To check if cart value is less than
	cart_value_less_than : function(condition)
	{
		try
		{
			return ((_agile_shopify_cart.total_price / 100) <= condition.RHS);
		}
		catch (e)
		{
		}

		return false;
	},

	// To check if device is mobile
	is_mobile : function(condition)
	{
		try
		{
			return (_agile_is_mobile_browser() && condition.RHS == "MOBILE");
		}
		catch (e)
		{
		}
	},

	// To check if device is not mobile
	is_not_mobile : function(condition)
	{
		try
		{
			return (!_agile_is_mobile_browser() && condition.RHS == "MOBILE");
		}
		catch (e)
		{
		}
	},

	// To check if visitor is known or not
	is_known_visitor : function(condition)
	{
		if (typeof _agile_email == "string" && typeof _agile_contact !== "undefined")
			return true;
	},

	// To check if visitor is unknown
	is_unknown_visitor : function(condition)
	{
		if (typeof _agile_email !== "string" || typeof _agile_contact == "undefined")
			return true;
	},

	// To check if callscriptrule_id is present in only once persistent cookie
	once : function(condition)
	{
		if (!agile_read_cookie("agile-callscriptrules_v2"))
			return true;

		if (_agile_callscriptrule_get_cookie("agile-callscriptrules_v2", condition.callscriptrule_id))
			return false;
	},

	// To check if callscriptrule_id is present in once per session session cookie
	once_per_session : function(condition)
	{
		if (!agile_read_cookie("agile-session-callscriptrules_v2"))
			return true;

		if (_agile_callscriptrule_get_cookie("agile-session-callscriptrules_v2", condition.callscriptrule_id))
			return false;
	},

	// To check for web rule count
	max_of : function(condition)
	{
		if (!agile_read_cookie("agile-maxof-callscriptrules_v2"))
			return true;

		var web_rule_cookie = _agile_callscriptrule_get_cookie("agile-maxof-callscriptrules_v2", condition.callscriptrule_id);
		if (!web_rule_cookie)
			return true;

		return (condition.RHS > web_rule_cookie.count);

	},

	// To check for web rule time
	once_every : function(condition)
	{
		if (!agile_read_cookie("agile-every-callscriptrules_v2"))
			return true;

		var web_rule_cookie = _agile_callscriptrule_get_cookie("agile-every-callscriptrules_v2", condition.callscriptrule_id);
		if (!web_rule_cookie)
			return true;

		// Get Web Rule Cookie time and add the condition time (in mins)
		var time = web_rule_cookie.time + condition.RHS * 1000 * 60;

		return (new Date().getTime() > time);
	},

	// To check if country matches
	country_is : function(condition)
	{
		return (condition.RHS == condition.callscriptrule_country);
	},

	// To check if country doesnt match
	country_is_not : function(condition)
	{
		return (condition.RHS != condition.callscriptrule_country);
	},

	// To check if userAgent is equal
	ua_is : function(condition)
	{
		return (window.navigator.userAgent == condition.RHS);
	},

	// To check if userAgent is not equal
	ua_is_not : function(condition)
	{
		return (window.navigator.userAgent !== condition.RHS);
	},

	// To check if userAgent contains
	ua_contains : function(condition)
	{
		return (window.navigator.userAgent.indexOf(condition.RHS) != -1);
	},

	// To check if userAgent doesnot contains
	ua_not_contains : function(condition)
	{
		return (window.navigator.userAgent.indexOf(condition.RHS) == -1);
	},

	// To execute callscriptrule everytime
	everytime : function(condition)
	{
		return true;
	} };

function GiveCallScriptName(contact, callback){
	_agile_contact = contact;
	CallScript_PLUGIN_NAME = "CallScript";
	var callscript_widget = null;
	if(App_Widgets.Catalog_Widgets_View){
		  callscript_widget = App_Widgets.Catalog_Widgets_View.collection.where({ name : CallScript_PLUGIN_NAME })[0].toJSON();
	}else{
		// Following wont give current updated widget 
		if (window.location.hash.indexOf("#contact/") != -1)
		{
			callscript_widget = agile_crm_get_widget(CallScript_PLUGIN_NAME);
		}else{
			$.getJSON("/core/api/widgets/CallScript", function(CallScript_wid)
			{
				callscript_widget = CallScript_wid;
				var rules = GiveRulesInArray(callscript_widget);
				return callback(rules);
			});
		}
	}
	if(callscript_widget){
		var rules = GiveRulesInArray(callscript_widget);
		return callback(rules);
	}
}

function GiveRulesInArray(callscript_widget){
	var array_callScript = [];
	  if(callscript_widget){
		  
		  	if (callscript_widget.prefs == undefined || callscript_widget.prefs == "{}")
			{
				// show default text
				console.log("no rule defined");
				return array_callScript;
			}
		  	
			  var callscript_prefs = JSON.parse(callscript_widget.prefs);
			  var _agile_web_rules = callscript_prefs.csrules;
			  
				for ( var j = 0; j < _agile_web_rules.length; j++)
				{
						var name = _agile_web_rules[j].name;
						array_callScript.push(name);
						console.log("name is " + name);
				}
		}
		return array_callScript;
}


function GiveCallScriptText(name, contact, callback){
	if(!contact){
		return "!@#";
	}
	_agile_contact = contact;

	CallScript_PLUGIN_NAME = "CallScript";
	var callscript_widget = null;
	if(App_Widgets.Catalog_Widgets_View){
		  callscript_widget = App_Widgets.Catalog_Widgets_View.collection.where({ name : CallScript_PLUGIN_NAME })[0].toJSON();
	}else{
		// Following wont give current updated widget 
		if (window.location.hash.indexOf("#contact/") != -1)
		{
			callscript_widget = agile_crm_get_widget(CallScript_PLUGIN_NAME);
		}else{
			$.getJSON("/core/api/widgets/CallScript", function(CallScript_wid)
			{
				callscript_widget = CallScript_wid;
				var rulesValue = checkRuleAndDisplayValue(callscript_widget, name);
				return callback(rulesValue);
			});
		}
	}
	if(callscript_widget){
		var rulesValue = checkRuleAndDisplayValue(callscript_widget, name);
		return callback(rulesValue);
	}
}


function checkRuleAndDisplayValue(callscript_widget, name){
	var text = "!@#";
	if(callscript_widget){
		  
		  	if (callscript_widget.prefs == undefined || callscript_widget.prefs == "{}")
			{
				// show default text
				console.log("no rule defined");
				return text;
			}
		  	
			  var callscript_prefs = JSON.parse(callscript_widget.prefs);
			  var _agile_web_rules = callscript_prefs.csrules;
			  
				for ( var j = 0; j < _agile_web_rules.length; j++)
				{
						var name1 = _agile_web_rules[j].name;
						if(name1 == name){
							var display = _agile_web_rules[j].displaytext;
							var displayText = replaceMergeFields(display);
							console.log ("display text - " + displayText);
							text = displayText;
						}
				}
		}
		return text;
}

function showvalue(contact){
	if(!contact){
		return;
	}
	
	GiveCallScriptName(contact,function(nameArray){
		//option(name.value)
		if(nameArray.length == 0){
			$("#callScriptForm #callScriptText").val("No call script to display.");
		}
		
		for(var i=0;i<nameArray.length;i++){
			var $option = new Option(nameArray[i],nameArray[i]);
			$("#callScriptForm #callScriptName").append($option);
		}
		
		$("body").on("change", "#callScriptName", function(e){
			
			var rule = $("#callScriptName").val();
			var contact = $(".noty_call_callScript","#draggable_noty").data("contact");
			GiveCallScriptText(rule, contact,function(textToDisplay){
				if(textToDisplay == "!@#"){
					textToDisplay = "Please select a call script to display.";
				}
				$("#callScriptForm #callScriptText").val(textToDisplay);
			});

			
		});
	});

			
}






 
$(function()
{
	
//	This function is to hide the information shown to the client when the user is not running skype client
	$('#skypeInfoModal').on('click', '#skype_info_ok', function(e)	{
		e.preventDefault();
		$('#skypeInfoModal').modal('hide');
	});
	
// this function is to hide the already on call alert 	
	$('#skypeInfoModal').on('click', '#skype_status_ok', function(e)	{
		e.preventDefault();
		$('#skypeInfoModal').modal('hide');
	});
});	


function _getMessageSkype(message, callback){
	var state = message.state;
	var number = message.number;
	var callId = message.callId;
	var displayName = message.displayName;
	var message="";
	globalCallForActivity.justCalledId = callId;
	
	try{
		var inValid = /^\s/;
		var k = inValid.test(number);
		if(k){
			number = "+" + number.trimLeft()
		}
	}catch(e){
	}

	console.log("state--" + state + " number --" + number + "   skypeCallId" + callId + "  displayName" + displayName);
	
	if (state == "ringing"){
				
		
			globalCall.callDirection = "Incoming";
			globalCall.callStatus = "Ringing";
			globalCall.calledFrom = "Skype";
			globalCall.callId = callId;
			globalCall.callNumber = number;
				
	}else if(state == "connected"){
			
			globalCall.callStatus = "Connected";
	
	}else if(state == "connecting"){
		
		globalCall.callDirection = "Outgoing";
		globalCall.callStatus = "Connecting";
		
		globalCall.callId = callId;
		globalCall.callNumber = number;
		
	}else if(state == "failed"){
		
		if(globalCallForActivity.requestedLogs){
			return;
		}	
		globalCall.callStatus = "Failed";
		
		globalCall.callId = callId;
		globalCall.callNumber = number;
		replicateglobalCallVariable();
		resetglobalCallVariables();		
		
		//this is called to save the call activity of the user after the call
		if(!callId){
			consolee.log("call id not present...");
			resetglobalCallForActivityVariables();
			globalCallForActivity.requestedLogs = false;
			return;
		}
		var action = {"command":  "getLastCallDetail", "number": globalCallForActivity.callNumber, "callId": globalCallForActivity.callId};
		sendActionToClient(action);
		
	}else if(state == "busy"){
		
		if(globalCallForActivity.requestedLogs){
			return;
		}	
		globalCall.callStatus = "Busy";
		
		globalCall.callId = callId;
		globalCall.callNumber = number;
		replicateglobalCallVariable();
		resetglobalCallVariables();		
		
		//this is called to save the call activity of the user after the call
		if(!callId){
			consolee.log("call id not present...");
			resetglobalCallForActivityVariables();
			globalCallForActivity.requestedLogs = false;
			return;
		}
		var action = {"command":  "getLastCallDetail", "number": globalCallForActivity.callNumber, "callId": globalCallForActivity.callId};
		sendActionToClient(action);
		
	}else if(state == "refused" || state == "missed"){
			globalCall.callStatus = "Missed";
			globalCall.callId = callId;
			globalCall.callNumber = number;
			replicateglobalCallVariable();
			resetglobalCallVariables();	
			
			//this is called to save the call activity of the user after the call
			if(!callId){
				consolee.log("call id not present...");
			resetglobalCallForActivityVariables();
			globalCallForActivity.requestedLogs = false;
				return;
			}
			var action = {"command":  "getLastCallDetail", "number": globalCallForActivity.callNumber, "callId": globalCallForActivity.callId};
			sendActionToClient(action);
			return;
			
	}else if(state == "ended"){
		
		if(globalCall.callStatus && globalCall.callStatus == "Connected"){
			globalCall.callStatus = "Answered"; //change form completed
		}else if(globalCall.callStatus && globalCall.callStatus == "Connecting"){
			globalCall.callStatus = "Busy";
		}else if(globalCall.callStatus == "Failed" || globalCall.callStatus == "REFUSED" || globalCall.callStatus == "Ringing" || globalCall.callStatus == "Missed"){
			return;
		}
		
		globalCall.callId = callId;
		globalCall.callNumber = number;
		replicateglobalCallVariable();
		resetglobalCallVariables();		
		
		//this is called to save the call activity of the user after the call
		if(!callId){
			consolee.log("call id not present...")
			return;
		}
		globalCallForActivity.requestedLogs = true;
		var action = {"command":  "getLastCallDetail", "number": globalCallForActivity.callNumber, "callId": globalCallForActivity.callId};
		sendActionToClient(action);
		
	}
	
}


function saveCallActivitySkype(call){
	
	
	if(	globalCallForActivity.justCalledId == globalCallForActivity.justSavedCalledIDForActivity){
		return;
	}
	globalCallForActivity.justSavedCalledIDForActivity = globalCallForActivity.justCalledId;
	
	if(call.status == "Answered"){
		return;
	}
	
	if(call.direction == "Outgoing" || call.direction == "outgoing"){
		var callerObjectId = globalCall.contactedId;
		if(!callerObjectId){
			return;
		}
		$.post( "/core/api/widgets/skype/savecallactivityById",{
			id:callerObjectId,
			direction: call.direction, 
			phone: call.phone, 
			status : call.status,
			duration : call.duration 
			});
	}else{
		$.post( "/core/api/widgets/skype/savecallactivity",{
			direction: call.direction, 
			phone: call.phone, 
			status : call.status,
			duration : call.duration
			});
	}
}

function saveCallNoteSkype(){
	
	
	if(	globalCallForActivity.justCalledId == globalCallForActivity.justSavedCalledIDForNote){
		return;
	}
	globalCallForActivity.justSavedCalledIDForNote = globalCallForActivity.justCalledId;
	
	if(!globalCallForActivity.callDirection || !globalCallForActivity.callStatus  || !globalCallForActivity.callNumber){
		return;
	}
	
	var callStatus = globalCallForActivity.callStatus;
	var direction = globalCallForActivity.callDirection;
	var number = globalCallForActivity.callNumber;
	var callId = globalCallForActivity.callId;
	var duration = globalCallForActivity.duration;
	var contact;
	var id;
	var desc;
	resetglobalCallForActivityVariables();
	
	var noteSub = direction + " Call - " + callStatus;

	if(direction == "Incoming"){
	    accessUrlUsingAjax("core/api/contacts/search/phonenumber/"+number, function(responseJson){
	    	if(!responseJson){
	    		return showNewContactModal(number);
	    	}
	    	id = responseJson.id;
	    	contact = responseJson;
	    	contact_name = getContactName(contact);
	    	if(callStatus == "Answered"){

				var data = {};
				data.url = "/core/api/widgets/skype/";
				data.subject = noteSub;
				data.number = number;
				data.callType = "inbound";
				data.status = "answered";
				data.duration = duration;
				data.contId = id;
				data.contact_name = contact_name;
				data.widget = "Skype";
				showDynamicCallLogs(data);

/*				var el = $('#noteForm');
			 	$('.tags',el).html('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ id +'">'+contact_name+'</li>');
			 	$("#noteForm #subject").val(noteSub);
					$("#noteForm #description").val("Call duration - "+ twilioSecondsToFriendly(duration));
					$("#noteForm").find("#description").focus();
				$('#noteModal').modal('show');
				agile_type_ahead("note_related_to", el, contacts_typeahead);*/
	    	}else{
	    		var note = {"subject" : noteSub, "message" : "", "contactid" : id,"phone": number, "callType": "inbound", "status": callStatus, "duration" : 0 };
				autosaveNoteByUser(note);
	    	}
	    });
	}else{
		var cntId = globalCall.contactedId;
		if(cntId){
				if( callStatus == "Answered"){
					twilioIOSaveContactedTime();
					accessUrlUsingAjax("core/api/contacts/"+cntId, function(resp){
						var json = resp;
						if(json == null) {
							return;
						}
						
						contact_name = getContactName(json);
						var data = {};
						data.url = "/core/api/widgets/skype/";
						data.subject = noteSub;
						data.number = number;
						data.callType = "outbound-dial";
						data.status = "answered";
						data.duration = duration;
						data.contId = cntId;
						data.contact_name = contact_name;
						data.widget = "Skype";
						showDynamicCallLogs(data);
						
/*					var el = $('#noteForm');
				 	$('.tags',el).html('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block" data="'+ cntId +'">'+contact_name+'</li>');
				 	$("#noteForm #subject").val(noteSub);
				 	$("#noteForm #description").val("Call duration - "+ twilioSecondsToFriendly(duration));
						$("#noteForm").find("#description").focus();
					$('#noteModal').modal('show');
					agile_type_ahead("note_related_to", el, contacts_typeahead);*/
					});
				}else{
					var note = {"subject" : noteSub, "message" : "", "contactid" : cntId,"phone": number, "callType": "outbound-dial", "status": callStatus, "duration" : 0 };
					autosaveNoteByUser(note);
				}
		}
	}
}




function getLogsForSkype(num){
	
	if(window.location.hash.indexOf("contact/") == -1)
	  {
		return;
	  }
	
	var logNumber;
	var parameter = {};
	
	parameter['error_message'] = "There is no phone number or skype id associated with this contact. <a href='#contact-edit' class='text-info' style='color:#23b7e5'>Add phone number or skype id</a>";
	//var contact = agile_crm_get_contact();
	//parameter['num'] = getPhoneWithSkypeInArray(contact.properties);
	parameter['num'] = agile_crm_get_contact_properties_list("phone");
	if($("#skype-logs-panel").length > 0){
			$("#skype_logs_load").show();
		}else{
			getTemplate('skype-logs', parameter, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$('#Skype').html($(template_ui));	

				if(parameter['num'].length == 0){
					$("#skype_no_phone").html(parameter.error_message);
				}
				
				$("body").on("change", '#skype_contact_number', function(e)
						{
							$("#skype_logs_load").show();
							getLogsForSkype($("#skype_contact_number").val());
						});
				
			}, "#Skype");
		}
	
	
	if(num){
		logNumber = num;
		//$("#skype_contact_number option[value='"+num+"']").attr('selected', 'selected');
	}else{
		$('#skype_contact_number option:eq(0)').attr('selected', 'selected');
		logNumber = $("#skype_contact_number option:selected").val();
	}
	
		if(parameter['num'].length > 0){
			if(!logNumber){
				logNumber = parameter['num'][0].value;
			}
			var previousCalledClient  = globalCall.calledFrom;
			var action = {"command":  "getLogs", "number": logNumber, "callId": ""};
			globalCall.calledFrom = "Skype";
			sendActionToClient(action);
			globalCall.calledFrom = previousCalledClient;
			
		}
}

function handleLogsForSkype(message){
	$("#skype_logs_load").hide();
	
	getTemplate('skype-logs-fetch', message.data , undefined, function(template_ui){
		if(!template_ui)
			  return;
	   	var skype_logs_template = $(template_ui);
		$('#skype-logs-panel').html(skype_logs_template);

			// Load jquery time ago function to show time ago in logs
			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$(".time-ago", skype_logs_template).timeago();
			});

	}, "#skype-logs-panel");
}

// Sip stack.
var Sip_Stack;

// Sip register session.
var Sip_Register_Session;

// Sip call session.
var Sip_Session_Call;

/*
 * Sip call session properties. Used to create incoming call, outgoing call, and
 * sip registration. Even we need when user reject or accept call.
 */
var Config_Call;

// Sip widget.
var Sip_Widget_Object;

// User details of callee / contact user. We can not set fields in session. 
var User_Name;
var User_Img;
var User_Number;
var User_ID;
var SIP_Call_Noty_IMG = "";
var Contact_Link = "";
var Show_Add_Contact = false;

// Call is ignored
var Is_Ignore = false;

// Call noty.
var CALL;

// HTML5 notification.
var Notify_Call;

// Sip flags.
var Sip_Start = false;
var Sip_Updated = false;
var No_Internet = false;

// Audio object
var Sip_Audio;

// If user get disconnect from internet.
window.addEventListener("offline", function(e)
{	
	No_Internet = true;

	// Unregister all sessions and stop sip stack.
	sipUnRegister();
}, false);

// If user get reconnect with internet.
window.addEventListener("online", function(e)
{
	No_Internet = false;

	// Re-register on sip.
	sipStart();
}, false);

// For telephony on SIP.
$(function()
{
	// Register SIP
	sipStart();
});
/**
 * Handles events related to telephony.
 */
$(function()
{
	/**
	 * On click of dialpad button on call noty, will display/remove keypad.
	 */
	$('body').on('click', '.dialpad,.noty_sip_dialpad', function(e)
	{
		e.preventDefault();

		// If noty do not have dialpad then add
		if ($('.noty_buttons').find('.dialpad_btns').html() == null)
		{
			getTemplate('dialpad', {}, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$(".noty_buttons").prepend($(template_ui));	
			},null);
		}
		else
		{
			// If noty has dialpad then remove
			$("#dialpad_btns").remove();
		}
	});

	/**
	 * On click of call action on contact page from list, will make SIP call to
	 * hard coded number. For Testing purpose. Call action is not visible to
	 * user.
	 */
	$('body').on('click', '.make-call', function(e)
	{
		e.preventDefault();

		// SIP
		/*
		 * if (makeCall('sip:+18004321000@proxy.ideasip.com')) { // Hard coded
		 * user details. User_Name = "Agile"; User_Number =
		 * "sip:+18004321000@proxy.ideasip.com";
		 */

		if (makeCall('sip:farah@sip2sip.info'))
		{
			User_Name = "farah";
			User_Number = "sip:farah@sip2sip.info";

			// Display
			showCallNotyPopup("outgoing", "confirm", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><i class="icon icon-phone"></i><b>Calling </b>' + User_Number +'<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', false);
		}
	});

	/**
	 * On click of telephone icon on contact page before phone number at top
	 * right panel, will make SIP call to same number.
	 */
	$('body').on('click', '.contact-make-sip-call, .Sip_call', function(e)
	{
		e.preventDefault();

		// Get details from UI
		var userid = $(this).closest(".contact-make-call").attr('userid');
		var phone = $(this).closest(".contact-make-call").attr('phone');

		// Check number is available.
		if (phone == "" || phone == null)
		{
			showAlertModal(name + "'s contact number not added.", undefined, undefined, undefined, "Error");
			return;
		}

		// SIP outgoing call.
		if (makeCall(phone))
		{
			var currentContact = App_Contacts.contactDetailView.model.toJSON();
			
			// Assign details to set in noty.
			User_Name = getContactName(currentContact);
			User_Number = removeBracesFromNumber(phone);
			User_Img = getGravatar(currentContact.properties, 40);
			User_ID = currentContact.id;
			SIP_Call_Noty_IMG = addSipContactImg();
			Show_Add_Contact = false;

			// Display
			showCallNotyPopup("outgoing", "confirm", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><i class="icon icon-phone"></i><b>Calling  </b>' + User_Number +'<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', false);
		}
	});

	/**
	 * Onclick of hangup button in call noty, when call is connected.
	 */
	$('body').on('click', '.hangup', function(e)
	{
		e.preventDefault();

		// Display
		showCallNotyPopup("hangup", "information", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><b>Call ended with  </b>' + User_Number + '<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', 5000);

		// SIP hangup call.
		hangupCall();
	});

	/**
	 * On incoming call noty, on ignore button click. It will cut the call.
	 */
	$('body').on('click', '.ignore', function(e)
	{
		// Display
		showCallNotyPopup("ignored", "error", SIP_Call_Noty_IMG+'<span class="noty_contact_details"><b>Ignored call  </b>'+ User_Number + '<br><a href="#'+Contact_Link+'" style="color: inherit;">' + User_Name +  '</a><br></span><div class="clearfix"></div>', 5000);

		// SIP reject call.
		Sip_Session_Call.reject(Config_Call);

		Is_Ignore = true;
		
		// Remove html5 notification.
		if (Notify_Call)
		{
			Notify_Call.cancel();
			Notify_Call = null;
		}
	});

	/**
	 * On incoming call noty, on answer button click. It will connect call.
	 */
	$('body').on('click', '.answer', function(e)
	{
		// SIP accept call.
		Sip_Session_Call.accept(Config_Call);
	});

});

//Add contact img in html for call noty text with contact url
function addSipContactImg()
{
  console.log("User_Img:");
  console.log(User_Img);
	
  Contact_Link = "";
  
  if(User_ID)
	  Contact_Link = Contact_Link+"contact/"+User_ID;
	  
  // Default img 
  var notyContactImg = '<a href="#'+Contact_Link+'" style="float:left;margin-right:10px;"><img class="thumbnail" width="40" height="40" alt="" src="'+DEFAULT_GRAVATAR_url+'" style="display:inline;"></a>';
	
  // If contact have img
  if(User_Img)
     notyContactImg = '<a href="#'+Contact_Link+'" style="float:left;margin-right:10px;"><img class="thumbnail" width="40" height="40" alt="" src="'+User_Img+'" style="display:inline;"></a>';
	 
  console.log("notyContactImg: "+notyContactImg);
  return notyContactImg;     
}

// Remove <> from sip number
function removeBracesFromNumber(number)
{
	console.log("number: "+number);
	if(number.match("^<") && number.match(">$"))
		number = number.substr(1, number.length-2);	
 	
	var regExp = /\:([^@]+)\@/;
	var matches = regExp.exec(number);
	
	if(matches)
    {	
	  //matches[1] contains the value between the parentheses
	  console.log(matches[1]);
	  number = matches[1];
    }
	return number;
}/**
 * This page contains all the click or other events related to Bria calling
 * 
 *@author Prakash 
 */
 //callDirection : Incoming, Outgoing
 //callStatus :Ideal, Incoming,Missed,  Connecting,Connected,  Ended,Failed

$(function()
{
	
	$('body').on('click', '.contact-make-bria-call, .Bria_call', function(e)
	{
	  	e.preventDefault();
		if(checkForActiveCall()){
			$('#briaInfoModal').html(getTemplate("briaCallStatusModal"));
			$('#briaInfoModal').modal('show');
			return;
		}
		var action ={};
	  	action['command'] = "startCall";
	  	action['number'] = $(this).closest(".contact-make-call").attr("phone");
	  	action['callId'] = "";

	  	
		try{
			closeCallNoty(true);
			resetglobalCallVariables();
			resetglobalCallForActivityVariables();
			globalCall.callStatus = "dialing";
			globalCall.calledFrom = "Bria";
			setTimerToCheckDialing("bria");
			var contactDetailsObj = agile_crm_get_contact();
			globalCall.contactedId = contactDetailsObj.id;
			globalCall.contactedContact = contactDetailsObj;
		  	sendActionToClient(action);
		}catch (e) {
		}
	});
	
	
	// this function is used to make call frn skype
	$('body').on('click', '.Skype_call', function(e)
			{
			  	e.preventDefault();
				var action ={};
			  	action['command'] = "startCall";
			  	action['number'] = $(this).closest(".contact-make-call-div").children().first().attr("phone");
			  	action['callId'] = "";
			  	
				if(checkForActiveCall()){
					$('#skypeInfoModal').html(getTemplate("skypeCallStatusModal"));
					$('#skypeInfoModal').modal('show');
					return;
				}
				
				try{
					closeCallNoty(true);
					resetglobalCallVariables();
					resetglobalCallForActivityVariables();
				}catch(e){
				}
				
				globalCall.callStatus = "dialing";
				globalCall.calledFrom = "Skype";
				setTimerToCheckDialing("skype");
				try{
					var contactDetailsObj = agile_crm_get_contact();
					globalCall.contactedId = contactDetailsObj.id;
					globalCall.contactedContact = contactDetailsObj;
					sendActionToClient(action);
				}catch (e) {
				}
			});
	
	
// }


//call script button
	$('body #wrap #agilecrm-container').on('click', '.noty_call_callScript', function(e)
		{
			e.preventDefault();
			$("#draggable_noty").find(".draggable_noty_callScript").toggle();
			
			if($("#draggable_noty").find(".draggable_noty_callScript").is(':visible')){
				$("#draggable_noty").find(".draggable_noty_callScript").html($(getTemplate("callScript")));	
				var contact = $(this).data("contact");
				showvalue(contact);
				}
	  });
	
	
//answer the callT
	$('body #wrap #agilecrm-container').on('click', '.noty_bria_answer, .noty_skype_answer', function(e)
		{
			e.preventDefault();
			
			var json = {"command" : "answerCall"};
		  	var action = makeCallAction(json);
		  	sendActionToClient(action);
		  	play_sound("dtmf");
	  });
	  
//ignore the incoming call
	$('body #wrap #agilecrm-container').on('click', '.noty_bria_ignore, .noty_skype_ignore', function(e)
		{
			e.preventDefault();
			var json = {"command" : "ignoreCall"};
		  	var action = makeCallAction(json);
		  	sendActionToClient(action);
		  	play_sound("dtmf");
	});


//hang up the call	
	$('body #wrap #agilecrm-container').on('click', '.noty_bria_hangup, .noty_skype_hangup', function(e)
		{
		
		e.preventDefault();
		if(globalCall.lastSent){
			if(globalCall.lastSent == "endCall"){
				console.log("duplicate command recived endCall");
				closeCallNoty(true);
				return;
			}
		}	
		var json = {"command" : "endCall"};
	  	var action = makeCallAction(json);
	  	sendActionToClient(action);
	  	play_sound("dtmf");	
	  	
	});


//cancel the outgoing call	
	$('body #wrap #agilecrm-container').on('click', '.noty_bria_cancel, .noty_skype_cancel', function(e)
	{
		
		e.preventDefault();
		if(globalCall.lastSent){
			if(globalCall.lastSent == "endCall"){
				console.log("duplicate command recived endCall");
				closeCallNoty(true);
				return;
			}
		}
		var json = {"command" : "cancelCall"};
	  	var action = makeCallAction(json);
	  	sendActionToClient(action);
	  	play_sound("dtmf");
	  	
	});

	
//show dialpad	 ---note implemented
	$('body #wrap #agilecrm-container').on('click', '.noty_bria_dialpad, .noty_skype_dialpad', function(e)
	{
	e.preventDefault();
	e.stopPropagation();
	$('#dialpad_btns').toggle();
	if($('#dialpad_btns:visible').length > 0){
		$("#panel-body1, #draggable-noty" ).css({"height":"150px"});
	}else{
		$("#panel-body1, #draggable-noty" ).css({"height":"45px"});
	}
	});


//this is to close the dialpad when clicked anywhere in screen
	$(document).on('click', function(e){
		if($('#dialpad_btns').length !=0){
			$('#dialpad_btns').hide();
			$("#panel-body1, #draggable-noty" ).css({"height":"45px"});
		}
	});	
	
// this is used to prevent dialpad from closing 	
	$('body #wrap #agilecrm-container').on('click', '#dialpad_btns', function(e)	{
		e.stopPropagation();
	});
	
	
});

function makeCallAction(json){
	
	var action = {};
	action['command'] = json.command;
	try{
		action['number'] = $("#notyCallDetails").attr("number");
		action['callId'] = $("#notyCallDetails").attr("callId");
	}catch(e){
	}
	return action;
}
//function for sending DTMF
function sendDTMF(digit)
{
	if(digit){
			play_sound("dtmf");
			var action = {"command":  "sendDTMF", "number": digit, "callId": ""};
			sendActionToClient(action);
			return;
	}
}

// This function sends the command to local jar running in client side to make the call
//{paramerters} -- command to execute, number to call and call id of the ingoing call if any

function sendActionToClient(action){
	
	var domain = CURRENT_DOMAIN_USER['domain'];
	var id = CURRENT_DOMAIN_USER['id'];
	var command = action.command;
	var number = action.number;
	var callid = action.callId;
	var client = globalCall.calledFrom;
	
	if(command == "startCall"){
		var btns = [];
		showDraggableNoty(client, globalCall.contactedContact , "dialing", globalCall.callNumber, btns);
	}
	var image = new Image();
	image.onload = function(png) {
		console.log("client sucess");
		globalCall.lastSent =  command;
		window.focus();
	};
	image.onerror= function(png) {
		console.log("client failure");
		window.focus();
		resetglobalCallVariables();
		if(command == "getLogs"){
			var message ={};
			message["data"] = "";
			if(client == "Bria"){
				handleLogsForBria(message);		
			}else if(client == "Skype"){
				handleLogsForSkype(message);
			}
			showCallNotyMessage("Executable file is not running");
			return;
		}
		if(client == "Bria"){
			$('#briaInfoModal').html(getTemplate("briaInfoModal"));
			$('#briaInfoModal').modal('show');
			closeCallNoty(true);
			return;
		}else if(client == "Skype"){
			$('#skypeInfoModal').html(getTemplate("skypeInfoModal"));
			$('#skypeInfoModal').modal('show');
			closeCallNoty(true);
			return;
		}
	};
	image.src = "http://localhost:33333/"+ new Date().getTime() +"?command="+command+";number="+number+";callid="+callid+";domain="+domain+";userid="+id+";type="+client+"?";
}


;$(function ($) {
	
    $.fn.initial = function (options) {

        // Defining Colors
        var colors = ["#1abc9c", "#16a085", "#f1c40f", "#f39c12", "#2ecc71", "#27ae60", "#e67e22", "#d35400", "#3498db", "#2980b9", "#e74c3c", "#c0392b", "#9b59b6", "#8e44ad", "#bdc3c7", "#34495e", "#2c3e50", "#95a5a6", "#7f8c8d", "#ec87bf", "#d870ad", "#f69785", "#9ba37e", "#b49255", "#b49255", "#a94136"];

        return this.each(function () {

            var e = $(this);
            var settings = $.extend({
                // Default settings
                name: 'Name',
                charCount: 1,
                textColor: '#ffffff',
                height: 100,
                width: 100,
                fontSize: 40,
                fontWeight: 400,
                fontFamily: 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif'
            }, options);

            // overriding from data attributes
            settings = $.extend(settings, e.data());

            settings.name = "" + settings.name;
            // making the text object
            var c = settings.name.substr(0, settings.charCount).toUpperCase();
            var cobj = $('<text text-anchor="middle"></text>').attr({
                'y': '50%',
                'x': '50%',
                'dy' : '0.35em',
                'pointer-events':'auto',
                'fill': settings.textColor,
                'font-family': settings.fontFamily
            }).html(c).css({
                'font-weight': settings.fontWeight,
                'font-size': settings.fontSize+'px',
            });

            var colorIndex = null;
            if(c.length > 1)
            	colorIndex = Math.abs(Math.floor((((c.charCodeAt(0) - 65) + (c.charCodeAt(1) - 65))/2)  % colors.length));
            else
            	colorIndex = Math.abs(Math.floor((c.charCodeAt(0) - 65) % colors.length));

            var svg = $('<svg></svg>').attr({
                'xmlns': 'http://www.w3.org/2000/svg',
                'pointer-events':'none',
                'width': settings.width,
                'height': settings.height
            }).css({
                'background-color': colors[colorIndex],
                'width': settings.width+'px',
                'height': settings.height+'px'
            });

            svg.append(cobj);
           // svg.append(group);
            var svgHtml = window.btoa(unescape(encodeURIComponent($('<div>').append(svg.clone()).html())));

            e.attr("src", 'data:image/svg+xml;base64,' + svgHtml);

        })
    };

});


function image_error(element)
{
		var name = $(element).attr("_data-name");
		
		if(!name)
			return;

        //console.log("image_error");
		$(element).attr("data-name", name);

        var initialCSS = {charCount: 2,fontWeight: 'normal'};

        if(isIE()){
             initialCSS.fontSize = 20;
             initialCSS.width = $(element).width();
             initialCSS.height = $(element).height();
        }

		$(element).initial(initialCSS);
}

function image_load(element)
{
	//alert(element);
	var name = $(element).attr("_data-name");
	var src = $(element).attr('src');
	
	if(!src)
	{
		$(element).attr('src', DEFAULT_GRAVATAR_url);
		return;
	}
	
	if(src.indexOf(DEFAULT_GRAVATAR_url) >= 0)
	{
		$(element).attr("data-name", name);
		$(element).removeAttr("onLoad");
		//$(element).initial({charCount: 2, fontWeight : 'normal'});
	}

    if(src.indexOf(DEFAULT_GRAVARTAR_IMG) > -1 && is_agile_default_image_loaded(src)){
        image_error(element);
    }
}

function is_agile_default_image_loaded(src){
    try{
        var image = document.createElement("img");
        image.src = src;
        return ((image.width == 9 && image.height == 9) || (image.width == 1 && image.height == 1));    
    }catch(e){}
    return true;
}

//Ticket_Attachments variable contains functions which can used to attach documents to tickets.
var Ticket_Attachments = {
		
	//Fetches documents from DB
	renderExistingDocs: function(selectId, el){
		
		var collection_def = Backbone.Collection.extend({ url : 'core/api/documents'});

		// Creates a collection and fetches the data from the url set in collection
		var collection = new collection_def();

		collection.fetch({ success : function()
		{
			var data = collection.toJSON();
			data.sort(function(a, b)
			{
				if (a.name < b.name)
					return -1;
				if (b.name < a.name)
					return 1;
				return 0;
			});

			var template = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' file-name='{{name}}' size='{{size}}' url='{{url}}'>{{name}}</option>";

			// Convert template into HTML
			var modelTemplate = Handlebars.compile(template);

			$("#" + selectId).empty();

			// Iterates though each model in the collection and
			// populates the template using handlebars
			$.each(data, function(index, model)
			{
				$("#" + selectId).append(modelTemplate(model));
			});

			$("#" + selectId).append("<option value='new'>Upload new doc</option>");
		}});
	},

	toggleDocsDropdown: function(){

		$('.docs-container').css('display', 'inline');
		$('.toggle-docs-dropdown').hide();

		this.renderExistingDocs('choose-document');	
	},

	addDocument: function(){

		var $option = $('select.choose-document').find(":selected");

		var json = {};
		json.name = $option.attr('file-name');
		json.url = $option.attr('url');
		json.size = $option.attr('size');

		$('ul.attachments-list').append(getTemplate('ticket-attachment-li', json));
	},

	cancelDocsDropdown: function(){

		$('.toggle-docs-dropdown').show();
		$('.docs-container').hide();
	},

	removeAttachment: function(e){
		$(e.target).closest('li').remove();
	},

	//When user submitted the form selected documents list be parsed and returns 
	//a json containing selected file name, url and its size
	serializeList: function(form_id){

		var array = [];
		var attachments_json = $('#' + form_id + ' ul.attachments-list').map(function() {

	        $.each($(this).children(), function(g, li) {

	        	var $li = $(li);

	    		var json = {};
				json.name = $li.attr('file-name');
				json.url = $li.attr('url');
				json.size = $li.attr('size');

				array.push(json);
		    });

		    return { name: 'attachments_list', value: array };
		}).get();

		return attachments_json;
	}
};//Ticket_Bulk_Ops handles bulk operations performed by assignee. It initializes the events on
//all checkboxes and bulk operation buttons.
var Ticket_Bulk_Ops = {

	selected_all_filter_tickets : false,
	selected_ticket_ids : new Array(),
	initEvents: function(el){

		var $el = $('.tickets-div', el);

		/**
		 * Initializing click event on top ticket checkbox
		 */
		$('label.select-all', el).off('click', "input.select-all");
		$('label.select-all', el).on('click', "input.select-all", function(e){
			
			var selected_all = $(this).is(':checked');

			//Checking/unchecking checkboxes
			selected_all ? Ticket_Bulk_Ops.checkAllTickets($el) : Ticket_Bulk_Ops.clearSelection();
		});

		/**
		 * Initializing click event on bulk action close tickets
		 */
		$el.off('click', ".bulk-ticket-close");
		$el.on('click', ".bulk-ticket-close", function(e){
			e.preventDefault();
			
			Ticket_Bulk_Ops.renderTemplate('close-tickets');
		});

		/**
		 * Initializing click event on bulk action close tickets
		 */
		$el.off('click', ".bulk-favorite-tickets");
		$el.on('click', ".bulk-favorite-tickets", function(e){
			e.preventDefault();
			
			Ticket_Bulk_Ops.renderTemplate('mark-favorite');
		});

		/**
		 * Initializing click event on bulk action close tickets
		 */
		$el.off('click', ".bulk-spam-tickets");
		$el.on('click', ".bulk-spam-tickets", function(e){
			e.preventDefault();
			
			Ticket_Bulk_Ops.renderTemplate('mark-spam');
		});

		/**
		 * Initializing click event on bulk action delete tickets
		 */
		$el.off('click', ".bulk-ticket-delete");
		$el.on('click', ".bulk-ticket-delete", function(e){
			e.preventDefault();

			Ticket_Bulk_Ops.renderTemplate('delete-tickets');
		});

		/**
		 * Initializing click event on bulk action delete tickets
		 */
		$el.off('click', "a#select-all-tickets");
		$el.on('click', "a#select-all-tickets", function(e){
			e.preventDefault();

			Ticket_Bulk_Ops.selected_all_filter_tickets = true;

			//Check all tickets
			$('.ticket-checkbox').prop('checked', true);

			//Rendering suggestion text.Template incl. in tickets-groups-container-template.html
			$('#tickets-bulk-select').html(getTemplate('ticket-bulk-ops-text', {total_tickets_selected : true}));
		});

		/**
		 * Initializing click event on clear selection tickets
		 */
		$el.off('click', "a#clear-ticket-selection");
		$el.on('click', "a#clear-ticket-selection", function(e){
			e.preventDefault();

			Ticket_Bulk_Ops.clearSelection();
		});
	},

	checkAllTickets: function(){

		//Iterating through all ticket checkboxes
		$('.each-ticket.ticket-checkbox').each(function(){

			//Set checkbox as enabled
		    $(this).prop('checked', true);
		    
		    var ticketID = $(this).data('ticket-id');

		    if(!ticketID)
		    	return false;

		    if(Ticket_Bulk_Ops.selected_ticket_ids.indexOf(ticketID) == -1)
		    	//Set selected ticket id
		    	Ticket_Bulk_Ops.selected_ticket_ids.push(ticketID);
		});

		//Show bulk actions and hide ticket filters dropdown
		$('.bulk-action-btn').removeClass('disabled');

		Ticket_Bulk_Ops.showText();
	},

	clearSelection: function(){

		//Unchecking all tickets
		$('.ticket-checkbox').prop('checked', false);

		//disabling bulk action button group
		$('.bulk-action-btn').addClass('disabled');
		$('#tickets-bulk-select').html('');
		Ticket_Bulk_Ops.selected_all_filter_tickets = false;

		//Initializing tickets array to empty
		Ticket_Bulk_Ops.selected_ticket_ids = [];
	},

	showText: function(){

		var selected_tickets_count = Ticket_Bulk_Ops.selected_ticket_ids.length;

		//Checking if total selected tickets count is equal to tickets collection
		if(selected_tickets_count > 0){
			var total_tickets_count = Tickets_Count.ticketsCount[Ticket_Filter_ID], json = {};

			//Checking if all tickets selected and is equal to tickets count
			if(selected_tickets_count == total_tickets_count){
				Ticket_Bulk_Ops.selected_all_filter_tickets = true;
				$('.ticket-checkbox.select-all').prop('checked', true);
				json.total_tickets_selected = true;
				json.total_tickets_count = total_tickets_count;

				//Rendering suggestion text. Template incl. in tickets-groups-container-template.html
				$('#tickets-bulk-select').html(getTemplate('ticket-bulk-ops-text', json));
			}
			else if(selected_tickets_count == App_Ticket_Module.ticketsCollection.collection.length){

				json.tickets_count = selected_tickets_count;
				json.total_tickets_count = total_tickets_count;

				//Rendering suggestion text. Template incl. in tickets-groups-container-template.html
				$('#tickets-bulk-select').html(getTemplate('ticket-bulk-ops-text', json));
			}
			else{
				Ticket_Bulk_Ops.selected_all_filter_tickets = false;
			}

			$('.bulk-action-btn').removeClass('disabled');
		}else{
			Ticket_Bulk_Ops.clearSelection();
		}
	},

	//This method will be called when ticket checkbox is either checked or unchecked
	addOrRemoveTicketID: function(that){
		
		//Get selected ticket id
		var ticketID = $(that).data('ticket-id');

		if($(that).is(':checked')){
			 Ticket_Bulk_Ops.selected_ticket_ids.push(ticketID);
		}
		else{
			var index = Ticket_Bulk_Ops.selected_ticket_ids.indexOf(ticketID);
			
			if (index > -1) {
			    Ticket_Bulk_Ops.selected_ticket_ids.splice(index, 1);
			}
		}	
	},

	getSelectedTickesObj: function(){
		return Ticket_Bulk_Ops.selected_ticket_ids.toString();
	},

	//When bulk operation is performed we need to change template accordingly.
	renderTemplate: function(action_type){

		if (!App_Ticket_Module.ticketsCollection || App_Ticket_Module.ticketsCollection.collection.length == 0)
		{	
			Backbone.history.navigate("tickets", { trigger : true });
			return;
		}
		
		switch(action_type){
			case 'manage-labels':{

				var view = new Ticket_Base_Model({
					isNew : true,
					template : "ticket-bulk-actions-add-labels",
					url : "/core/api/tickets/bulk-actions/manage-labels",
					saveCallback: function(){
						Tickets.renderExistingCollection();
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets)
							json.conditions = Ticket_Custom_Filters.customFilters;

						model.set(json, { silent : true });
					},
					postRenderCallback : function(el){

						Ticket_Labels.showSelectedLabels(new Array(), $(el));
					}
				});

				$('#content').html(view.render(true).el);
				break;
			}
			case 'change-assignee':{

				var view = new Ticket_Base_Model({
					isNew : true, 
					template : "ticket-bulk-actions-change-assignee",
					url : "/core/api/tickets/bulk-actions/change-assignee",
					saveCallback: function(){
						//Backbone.history.navigate('#tickets/filter/' + Ticket_Filter_ID,{render:true});
						Tickets.renderExistingCollection();
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets){
							json.conditions = Ticket_Custom_Filters.customFilters;
							//json.filterID =  Ticket_Filter_ID;
						}
						
						json.assigneeID = $('[name="groupID"]').find('option:selected').data('assignee-id');

						model.set(json, { silent : true });
					},
					postRenderCallback: function(el){

						//Fetching all groups, assignees and appending them to select dropdown
						fillSelect('groupID', '/core/api/tickets/new-ticket', '', function(collection){
							$('#groupID').html(getTemplate('select-assignee-dropdown', collection.toJSON()));
						}, '', false, el);
					}
				});

				$('#content').html(view.render().el);
				break;
			}	
			case 'execute-workflows':

				var view = new Ticket_Base_Model({
					isNew : true, 
					template : "ticket-bulk-actions-execute-workflow",
					url : "/core/api/tickets/bulk-actions/execute-workflow",
					saveCallback: function(){
						//Backbone.history.navigate('#tickets/filter/' + Ticket_Filter_ID,{render:true});
						Tickets.renderExistingCollection();
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets){
							json.conditions = Ticket_Custom_Filters.customFilters;
							//json.filterID =  Ticket_Filter_ID;
						}

						model.set(json, { silent : true });
					},
					postRenderCallback: function(el){

						var template = '<option value="{{id}}" {{#is_disabled}}disabled{{/is_disabled}}>{{name}}</option>';

						//Fetching all groups, assignees and appending them to select dropdown
						fillSelect('workflowID', '/core/api/workflows', '', null, template, false, el);
					}
				});

				$('#content').html(view.render().el);
				break;
			case 'close-tickets':

				var view = new Ticket_Base_Model({
					isNew : true, 
					template : "ticket-bulk-actions-close-tickets",
					url : "/core/api/tickets/bulk-actions/close-tickets",
					saveCallback: function(){
						Ticket_Bulk_Ops.clearSelection();
						//$('#close-tickets-modal').modal('hide');

						Ticket_Utils.resetModalSettings($('#ticketsModal'));
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets)
							json.conditions = Ticket_Custom_Filters.customFilters;

						model.set(json, { silent : true });
					}
				});

				$('#ticketsModal').html(view.render().el).modal('show');
				break;
			case 'delete-tickets':

				var view = new Ticket_Base_Model({
					isNew : true,
					template : "ticket-bulk-actions-delete-tickets",
					url : "/core/api/tickets/bulk-actions/delete-tickets",
					saveCallback: function(){
						
						if(Ticket_Bulk_Ops.selected_all_filter_tickets)
							Tickets_Count.ticketsCount[Ticket_Filter_ID] = 0;
						else
							Tickets_Count.ticketsCount[Ticket_Filter_ID] = Tickets_Count.ticketsCount[Ticket_Filter_ID] - 
												Ticket_Bulk_Ops.selected_ticket_ids.length;

						Tickets_Rest.removeTicketsFromCollection(Ticket_Bulk_Ops.getSelectedTickesObj());
						Ticket_Bulk_Ops.clearSelection();
						//$('#delete-tickets-modal').modal('hide');

						Ticket_Utils.resetModalSettings($('#ticketsModal'));
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets)
							json.conditions = Ticket_Custom_Filters.customFilters;
						
						model.set(json, { silent : true });
					}
				});

				$('#ticketsModal').html(view.render().el).modal('show');
				break;
			case 'mark-spam':

				var view = new Ticket_Base_Model({
					isNew : true,
					template : "ticket-bulk-actions-spam-tickets",
					url : "/core/api/tickets/bulk-actions/spam-tickets",
					saveCallback: function(){
						Ticket_Bulk_Ops.clearSelection();
						//$('#spam-tickets-modal').modal('hide');

						Ticket_Utils.resetModalSettings($('#ticketsModal'));
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets)
							json.conditions = Ticket_Custom_Filters.customFilters;
						
						model.set(json, { silent : true });
					}
				});

				$('#ticketsModal').html(view.render().el).modal('show');
				break;
			case 'mark-favorite':

				var view = new Ticket_Base_Model({
					isNew : true,
					template : "ticket-bulk-actions-favorite-tickets",
					url : "/core/api/tickets/bulk-actions/favorite-tickets",
					saveCallback: function(){
						Ticket_Bulk_Ops.clearSelection();
						//$('#favorite-tickets-modal').modal('hide');

						Ticket_Utils.resetModalSettings($('#ticketsModal'));
					},
					prePersist : function(model)
					{
						var json = {};
						json.ticketIDs = Ticket_Bulk_Ops.getSelectedTickesObj();

						if(Ticket_Bulk_Ops.selected_all_filter_tickets)
							json.conditions = Ticket_Custom_Filters.customFilters;
						
						model.set(json, { silent : true });
					}
				});

				$('#ticketsModal').html(view.render().el).modal('show');
				break;
		}
	},
	
	ajax_call: function(url, data, callback){

		$.ajax({
			url : url,
			type: 'POST',
			data: data,
			ContentType: 'application/x-www-form-urlencoded',
			success : function(data){

				if(callback)
					callback(data);
			}
		});
	}
};//Ticket_Canned_Response allows you to fetch canned responses collection from DB.
var Ticket_Canned_Response = {

	cannedResponseCollection : undefined,

	//Fetches canned responses collection from DB. Returns same collection 
	//if collection already exists.
	fetchCollection: function(callback){

		if(this.cannedResponseCollection){
			if(callback)
				callback(this.cannedResponseCollection);

			return;
		}

		var cannedResponses = Backbone.Collection.extend({
		  url: '/core/api/tickets/canned-messages'
		});

		new cannedResponses().fetch({success: function(collection){

			console.log('cannedResponses collection length: ' + collection.length);
			Ticket_Canned_Response.cannedResponseCollection = collection;

			if(callback)
				callback(collection);
		}});
	},

	//If canned responses collection. If collection don't exists then it fetches 
	//from server and returns.
	// getCannedResponses: function(){

	// 	if(!this.cannedResponseCollection || $.isEmptyObject(this.cannedResponseCollection))
	// 		this.fetchCollection();

	// 		return;
	// }
};

//Initializes click event on recommendations. When user click on canned response 
//textarea will be filled with selected canned message
function initTicketCannedResponseEvents(el){

	$('#canned-response-merge-fields', el).on("click", "li > a", function(e){

		var mergeField = $(this).attr('data-field-val');

		var refEle = $("#canned-response-message", el)

		refEle.val(refEle.val() + "{{" + mergeField +"}}");
	})
}//Ticket_Custom_Filters allows you to initialize events on LHS filters, cancel and save as options.
var Ticket_Custom_Filters = {

	customFilters: new Array(),
	filters: [],
	//template_ui: '',
	//template_data_json: {},

	reset: function(){
		this.customFilters = new Array();
		//template_data_json = {};
	},
	
	initEvents: function(){

		var $container = $('#custom-filters-container');

		//Initializing date picker
		Ticket_Utils.loadDateChartAndDatePicker(function()
		{	
			var $input = $('.due-date-input', $container);

			$input.datepicker({ 
				drops: "down", 
				dateFormat : CURRENT_USER_PREFS.dateFormat
			}).on('changeDate', function(ev)
			{
				//Show clear button
				$('#clear-due-date').show();

				$input.blur();

				$input.datepicker("hide");

				Ticket_Custom_Filters.changeDueDate(Date.parse($input.val()).getTime());
			});

			$('.daterangepicker').remove();

			// Bootstrap date range picker.
			$('#created-date-input').daterangepicker({drops: 'up', locale : { applyLabel : 'Apply', cancelLabel : 'Cancel', firstDay : parseInt(CALENDAR_WEEK_START_DAY)}}, function(start, end)
			{
				var range = $('#created-date-input').val();

				if(!range)
					return;
				
				var range_array = range.split('-');

				$('#clear-created-date').show();

				Ticket_Custom_Filters.changeCreatedDate(range_array[0], range_array[1]);
			});
		});

		var options = [];
		
		//Initializing click event on clear due date button
	  	$container.off('click','a#clear-due-date');
	  	$container.on('click','a#clear-due-date', function(event){

	  		$(this).hide();

	  		$('input.due-date-input').val('');
	  		
	  		//Re-render collection with updated filter conditions
	  		Ticket_Custom_Filters.changeDueDate();
	  	});

	  	//Initializing click event on clear create date button
	  	$container.off('click','a#clear-created-date');
	  	$container.on('click','a#clear-created-date', function(event){

	  		$(this).hide();

	  		$('input.created-date-input').val('');
	  		
	  		//Re-render collection with updated filter conditions
	  		Ticket_Custom_Filters.changeCreatedDate();
	  	});


	  	//Initializing click event on due date button
	  	$container.off('click','a.choose-due-date');
	  	$container.on('click','a.choose-due-date', function(event){

	  		var value = $(this).data('value'), current_date = new Date();

	  		var $input = $('.due-date-input', $container);

	  		//Show clear button
	  		$('#clear-due-date').show();

	  		$input.blur();

			$input.datepicker("hide");

			switch(value){
	  			case 'overdue':
	  				current_date.setDate(current_date.getDate());
	  				break;
	  			case 'tomorrow':
	  				current_date.setDate(current_date.getDate() + 1);
	  				break;
	  			case 'next_two_days':
	  				current_date.setDate(current_date.getDate() + 2);
	  				break;
	  			case 'next_three_days':
	  				current_date.setDate(current_date.getDate() + 3);
	  				break;
	  			case 'next_five_days':
	  				current_date.setDate(current_date.getDate() + 5);
	  				break;
	  		}

	  		//Set date in daterange picker
	  		$input.val(current_date.format('mm/dd/yyyy'));

	  		//Re-render collection with updated filter conditions
	  		Ticket_Custom_Filters.changeDueDate(current_date.getTime());
	  	});

		//Initializing click event on 'Save as' button in LHS filters 
		$container.off('click','.save-new-filter');
		$container.on('click','.save-new-filter', function(e){

			var view = new Ticket_Base_Model({
				isNew : true, 
				template : "ticket-create-filter-modal",
				url : '/core/api/tickets/filters',
				saveCallback: function(model){

					$('#ticketsModal').modal('hide');
					App_Ticket_Module.ticketFiltersList.collection.add(model);
					App_Ticket_Module.ticketsByFilter(model.id);

					$('body').removeClass('modal-open').animate({ scrollTop: 0 }, "slow");
				},
				prePersist : function(model)
				{
					var json = {};
					json.conditions = Ticket_Custom_Filters.customFilters;

					var formJSON = model.toJSON();

					if(formJSON['save-type'] == 'replace')
					 	json.id = $('[name="filter-collection"]').val();

					model.set(json, { silent : true });
				}
			});

			$('#ticketsModal').html(view.render().el).modal('show');
		});

		//Initializing click event on 'Save as' button in LHS filters 
		$container.off('click','.clear-custom-filter');
		$container.on('click','.clear-custom-filter', function(e){
			e.preventDefault();

			if(!Ticket_Custom_Filters.isFilterChanged())
				return;

			App_Ticket_Module.ticketsByFilter(Ticket_Filter_ID);

			Ticket_Bulk_Ops.clearSelection();
		});

		var $select = $(".chosen-select");
		$select.off('change');
		$select.on('change', function(evt, params) {

			if (params && params.deselected) {
				
				for(var i=0; i< Ticket_Custom_Filters.customFilters.length; i++){

					var condition = Ticket_Custom_Filters.customFilters[i];

					if(condition.LHS != 'labels' || condition.RHS != params.deselected)
						continue;

					Ticket_Custom_Filters.customFilters.splice(i, 1);
					break;
				}
			}
			else{
				var condition = {};
				condition.LHS = 'labels';
				condition.RHS = params.selected;
				condition.CONDITION = 'TICKET_LABEL_IS';

				Ticket_Custom_Filters.customFilters.push(condition);
			}

			//Re-render collection with customized filters
			Tickets.fetchTicketsCollection();
		});
	},

	//Initializing click events on checkboxes (status, priority, type, assignees, groups etc)
	initCheckboxEvents: function(){

		var $container = $('#custom-filters-container');

		//Initializing on change events on all checkboxes in LHS
		$('[type="checkbox"]', $container).off('change');
		$('[type="checkbox"]', $container).on('change', function(evt) {

			var isSelected = $(this).is(':checked');
			var attributeName = $(this).attr('name');
			
			//Remove value from custom json if value is deselected
			if (isSelected) {
				var condition = {};
				condition.LHS = attributeName;
				condition.RHS = $(this).val();

				switch(condition.LHS){
					case 'status':
						condition.CONDITION = 'TICKET_STATUS_IS';
						break;
					case 'priority':
						condition.CONDITION = 'TICKET_PRIORITY_IS';
						break;
					case 'assignee_id':
					case 'group_id':
						condition.CONDITION = 'EQUALS';
						break;
					case 'ticket_type':
						condition.CONDITION = 'TICKET_TYPE_IS';
						break;
					case 'ticket_favorite':
					case 'ticket_spam':
						condition.CONDITION = 'TICKET_IS';
						break;
				}

				Ticket_Custom_Filters.customFilters.push(condition);
			}else{
				for(var i=0; i< Ticket_Custom_Filters.customFilters.length; i++){

					var condition = Ticket_Custom_Filters.customFilters[i];

					if(condition.LHS == attributeName && condition.RHS == $(this).val()){

						Ticket_Custom_Filters.customFilters.splice(i, 1);
						break;
					}
				}
			}

			//Re-render collection with customized filters
			Tickets.fetchTicketsCollection();
		});
	},

	//Renders the LHS custom filters layout
	renderLayout: function(){

		getTemplate("ticket-custom-filters", {}, undefined, function(template_ui){

			if(!template_ui)
		  		return;

		  	//Ticket_Custom_Filters.template_ui = template_ui;
			var $container = $('#custom-filters-container');

		  	$container.html($(template_ui));

		  	//Loading labels library and initializing click events on all checkboxes
		  	Ticket_Labels.loadChosenLibrary(function() {

		  		//Initializes chosen dropdown, fetches labels collection
			  	Ticket_Labels.fetchCollection(function(labelsCollection){

			  		var optionList = "";
					$.each(labelsCollection.toJSON(), function(index, label) {
						optionList += getTemplate('ticket-label-option', label);
					});

					var $select = $(".chosen-select");

					$select.html(optionList);

					// Initliazing multi select drop down
					$select.chosen({no_results_text: "No labels found"});

					//Initializes click events
		  			Ticket_Custom_Filters.initEvents();
				});
		  	});

		  	//Fetching assignees and groups
		  	Ticket_Utils.fetchAssignees(function(){

		  		var assigneeCollection = new Base_Collection_View({
		  			data: Assingees_Collection.collection.toArray(),
	 				url : '/core/api/users/partial',
	 				templateKey : "ticket-lhs-assignees",
	 				individual_tag_name : 'div'
	 			});

	 			$('.assignee-select', $container).html(assigneeCollection.render(true).el);

	 			Ticket_Utils.fetchGroups(function(){

			  		var groupsCollection = new Base_Collection_View({
			  			data : Groups_Collection.collection.toArray(),
		 				url : '/core/api/tickets/groups',
		 				templateKey : "ticket-lhs-groups",
		 				individual_tag_name : 'div'
		 			});

		 			$('.group-select', $container).html(groupsCollection.render(true).el);

		 			Ticket_Custom_Filters.checkSelectedConditions();
					Ticket_Custom_Filters.initCheckboxEvents();
			  	});
		  	});
		});
	},

	//Selects the view conditions on LHS filters. 
	//For eg if view is 'New Tickets' then status new checkbox alone will be checked.
	checkSelectedConditions: function(){

		if(Ticket_Custom_Filters.customFilters.length == 0){

			var filterJSON = App_Ticket_Module.ticketFiltersList.collection.get(Ticket_Filter_ID).toJSON();

			//Cloning filter object to avoid changing in collection when LHS changed
			var copiedFilterJSON = $.extend(true, {}, filterJSON)

			Ticket_Custom_Filters.customFilters = copiedFilterJSON.conditions;
		}

		for(var i=0; i<Ticket_Custom_Filters.customFilters.length; i++){

			var condition = Ticket_Custom_Filters.customFilters[i];

			switch(condition.LHS){
				case 'labels':{

					var $select = $(".chosen-select");

					var $option = $select.find('option[value="'+ condition.RHS +'"]');
					$option.attr('selected', 'selected');

					$select.trigger("chosen:updated");
					break;
				}
				case 'status':{

					if(condition.CONDITION == 'TICKET_STATUS_IS')
						$('input[value="' + condition.RHS + '"]').attr('checked', 'checked');
					
					break;
				}	
				case 'priority':
					
					if(condition.CONDITION == 'TICKET_PRIORITY_IS')
						$('input[value="' + condition.RHS + '"]').attr('checked', 'checked');

					break;
				case 'ticket_type':
					
					if(condition.CONDITION == 'TICKET_TYPE_IS')
						$('input[value="' + condition.RHS + '"]').attr('checked', 'checked');

					break;
				case 'assignee_id':
					
					if(condition.CONDITION == 'EQUALS'){

						if(condition.RHS == '0')
							condition.RHS = CURRENT_DOMAIN_USER.id;

						$('input[value="' + condition.RHS + '"]').attr('checked', 'checked');
					}
					
					break;	
				case 'group_id':
					
					if(condition.CONDITION == 'EQUALS')
						$('input[value="' + condition.RHS + '"]').attr('checked', 'checked');
					
					break;	
				case 'ticket_favorite':{

					if(condition.CONDITION == 'TICKET_IS')
						$('input[name="ticket_favorite"]').attr('checked', 'checked');
					
					break;
				}
				case 'ticket_spam':{
					
					if(condition.CONDITION == 'TICKET_IS'){
						$('input[name="ticket_spam"]').attr('checked', 'checked');
					}
				}
				case 'due_date':{
					
					if(condition.CONDITION == 'IS_LESS_THAN'){
						$('input[name="due-date-input"]').val(
							new Date(parseInt(condition.RHS) * 1000).format(CURRENT_USER_PREFS.dateFormat));
						$('#clear-due-date').show();	
					}
				}
				case 'created_between':{
					
					if(condition.CONDITION == 'BETWEEN'){

						var val = new Date(parseInt(condition.RHS) * 1000).format(CURRENT_USER_PREFS.dateFormat) + ' - ' + 
									new Date(parseInt(condition.RHS_NEW) * 1000).format(CURRENT_USER_PREFS.dateFormat);

						$('input[name="created-date-input"]').val(val);
						$('#clear-created-date').show();
					}
				}
			}
		}
	},

	//Callback function if due date is changed
	changeDueDate: function(epoch_time){

		//Removing existing due date conditions from custom filters
  		for(var i=0; i< Ticket_Custom_Filters.customFilters.length; i++){

			var condition = Ticket_Custom_Filters.customFilters[i];

			if(condition.LHS != 'due_date')
				continue;

			Ticket_Custom_Filters.customFilters.splice(i, 1);
		}

		if(epoch_time){

			//Add 23 hrs 59 mins & 59 secs to make due time to End of day
			var date = new Date(epoch_time);
			date.setHours(23);
			date.setMinutes(59);
			date.setSeconds(59);

			var condition = {};
			condition.LHS = 'due_date';
			condition.CONDITION = 'IS_LESS_THAN';
			condition.RHS = Math.floor(date.getTime()/1000);

			Ticket_Custom_Filters.customFilters.push(condition);
		}

		//Re-render collection with customized filters
		Tickets.fetchTicketsCollection();
	},

	//Callback function if created date is changed
	changeCreatedDate: function(start, end){

		//Removing existing due date conditions from custom filters
  		for(var i=0; i< Ticket_Custom_Filters.customFilters.length; i++){

			var condition = Ticket_Custom_Filters.customFilters[i];

			if(condition.LHS != 'created_between')
				continue;

			Ticket_Custom_Filters.customFilters.splice(i, 1);
			break;
		}

		if(start && end){

			var condition = {};
			condition.CONDITION = 'BETWEEN';
			condition.LHS = "created_between";
			condition.RHS = Math.floor(new Date(start).getTime()/1000);
			condition.RHS_NEW =  Math.floor(new Date(end).getTime()/1000);
			
			//Adding seconds to end date to change end time to End of day
			condition.RHS_NEW += 86400;

			Ticket_Custom_Filters.customFilters.push(condition);
		}

		//Re-render collection with customized filters
		Tickets.fetchTicketsCollection();
	},

	//Returns true if selected view conditions are changed.
	isFilterChanged: function(){

		var filterJSON = App_Ticket_Module.ticketFiltersList.collection.get(Ticket_Filter_ID).toJSON();
		var conditions = filterJSON.conditions;

		if(conditions.length != Ticket_Custom_Filters.customFilters.length)
			return true;

		for(var i=0; i<conditions.length; i++){

			var condition = conditions[i];
			var new_condition_exists = false;

			for(var j=0; j<Ticket_Custom_Filters.customFilters.length; j++){

				var changedCondition = Ticket_Custom_Filters.customFilters[j];

				if(condition.CONDITION == changedCondition.CONDITION && 
					condition.RHS == changedCondition.RHS)
					new_condition_exists = true;
			}

			if(!new_condition_exists)
				return true;
		}

		return false;
	},

	toggleFields: function(){
		$('div.choose-filter').toggle();
		
		$('div.update-name').toggle();
	},

	changViewName: function(){
		var selectedFilterName = $('[name="filter-collection"] option:selected').text()

		$('input[name="name"]', $('form#saveFilterForm')).val(selectedFilterName);
	}
};//Ticket_Filters varaible contains methods allows to create/update tcket filters in helpdesk settings tab.
var Ticket_Filters = {

	//Initializing chaining on select fields.
	initChaining: function(el, data){

		var el_self = $(el).clone();
		var LHS, condition, RHS;

		// LHS, RHS, condition blocks are read from DOM
		LHS = $("#LHS", el);
		condition = $("#condition", el);
		RHS = $("#RHS", el);
		
		RHS.chained(condition, function(chained_el, self){

			var selected_field = $(chained_el).find('option:selected');
			var placeholder = $(':selected', LHS).attr("placeholder");
			
			// If there are any select fields without option elements they should be removed
			$("select", self).each(function(index, value){
				if($("option", value).length == 0)
					$(this).remove();
			})
			
			
			if(placeholder)
			{
				$("input", self).attr("placeholder", placeholder);
			}
		});

		condition.chained(LHS);
		
		if(data && data.conditions) {
			deserializeChainedSelect(el, data.conditions, el_self);
		} else if(data) {
			deserializeChainedSelect(el, data, el_self);
		}
			
		
		// If LHS selected is tags then typeahead is enabled on rhs field
		if ($(':selected', LHS).val() && ($(':selected', LHS).val()).indexOf('tags') != -1)
		{
			addTagsDefaultTypeahead(RHS)
		}
	},

	//Clones ticket filter select dropdowns to add new condition to views. 
	//It will be fired when clicked on plus icon in add filter
	cloneTicketFiltersRow : function(event){

		// To solve chaining issue when cloned
		getTemplate('ticket-filter-add-edit', {}, undefined, function(template_ui){
			
			if(!template_ui)
				return;

			var htmlContent = $(template_ui).find('.ticket-filter-conditions-table tr').clone();

			scramble_input_names($(htmlContent));

			Ticket_Filters.initChaining(htmlContent);

			// var htmlContent = $(this).closest("tr").clone();
			$(htmlContent).find("i.remove-filter-ticket-conditions").show();
			$('.ticket-filter-conditions-table').find("tbody").append(htmlContent);

		}, null);
	},

	//Removes selected condition when clicked on close button
	removeTicketFiltersRow : function(event){

		var $currentTarget = $(event.currentTarget);
		$currentTarget.closest("tr").remove();
	},

	//Fetches all views from DB
	fetchFiltersCollection: function(callback){
		
		var force_render = true;

		App_Ticket_Module.ticketFiltersList = new Base_Collection_View({
			url : '/core/api/tickets/filters',
			sortKey:"updated_time",
			descending: true,
			customLoader: true,
			preserveAcrossRoutes: true,
			customLoaderTemplate: 'ticket-filters-loader',
			templateKey : "ticket-filters-list",
			individual_tag_name : 'li',
			postRenderCallback : function(el){

				//Fetch ticket collection count
				Tickets_Count.fetchFilterTicketsCount();

				if(!App_Ticket_Module.ticketFiltersList.collection || 
					App_Ticket_Module.ticketFiltersList.collection.length ==0){

					$('div.tickets-collection-pane').html(getTemplate('ticket-collection'));
					return;
				}

				if(!Ticket_Filter_ID)
					Ticket_Filter_ID =  App_Ticket_Module.ticketFiltersList.collection.at(0).id;

				var url = '#tickets/filter/' + Ticket_Filter_ID;
				Backbone.history.navigate(url, {trigger : false});

				if(force_render)
				{
					force_render = false;

					if(callback)
						callback();
				}	
			}
		});

		App_Ticket_Module.ticketFiltersList.collection.fetch();
		
		//$("#filters-list-container").html(App_Ticket_Module.ticketFiltersList.el);
		$("div.filters-drp-down").html(App_Ticket_Module.ticketFiltersList.el);
	},

	renderFiltersCollection: function(callback){

		//Rendering existing filter tickets drop down view
		$("div.filters-drp-down").html(App_Ticket_Module.ticketFiltersList.render(true).el);

		if(callback)
			callback();
	},

	updateFilterName: function(){

		var filterJSON = {};

		if(!Ticket_Filter_ID){
			filterJSON = App_Ticket_Module.ticketFiltersList.collection.at(0).toJSON();
			Ticket_Filter_ID =  !Ticket_Filter_ID ? filterJSON.id : Ticket_Filter_ID;
		}else{
			filterJSON = App_Ticket_Module.ticketFiltersList.collection.get(Ticket_Filter_ID).toJSON();
		}
		
		//Highlighting choosen li
		$('ul.ticket-types').find('li').removeClass('active');
		$('.filter-name-btn').text(filterJSON.name);
		$('a[filter-id="' + Ticket_Filter_ID + '"]').closest('li').addClass('active');
	},

	getCurrentFilterName: function(){
		return App_Ticket_Module.ticketFiltersList.collection.get(Ticket_Filter_ID).toJSON().name;
	}
};
var Current_Ticket_ID = null;
var Current_Ticket_Contact = null;
var Ticket_Filter_ID = null;

var	Tickets_Util = {};
var Sort_By = "-";
var Sort_Field = 'last_updated_time';
var Ticket_Position = null;

var Popover_Function = undefined;
var Helpdesk_Enabled = false;

var Assingees_Collection = null, Groups_Collection = null;


var Ticket_Groups = {

	//Fetches ticket groups and stores view in Tickets_Group_View for re-rendering
	// fetchGroups: function(){

	// 	//Rendering Groups dropdown
	// 	Tickets_Group_View = new Ticket_Base_Model({
	// 		isNew : false,
	// 		template : "tickets-groups-container",
	// 		url : "/core/api/tickets/groups",
	// 		postRenderCallback : function(el, data) {

	// 			//Including group name on drop down
	// 			$('a#group_name', el).html($('a[data-group-id="'+ Group_ID +'"]').attr('data-group-name'));
	// 		}
	// 	});

	// 	$('#groups-list-container').html(Tickets_Group_View.render().el);
	// },

	// //Renders existing groups view
	// renderGroupsView: function(){

	// 	var el = Tickets_Group_View.render().el;

	// 	//Rendering existing ticket group view
	// 	$('#groups-list-container').html(el);

	// 	//Including group name on drop down
	// 	$('a#group_name', el).html($('a[data-group-id="'+ Group_ID +'"]').attr('data-group-name'));

	// 	Tickets_Group_View.delegateEvents();
	// }
};var Ticket_Labels = {

	labelsCollection : undefined,

	initChoosenSelect : function(el, execute_callback) {

		this.loadChosenLibrary(function() {
			var $select = $(".chosen-select", el);

			// Initliazing multi select drop down
			$select.chosen({no_results_text: "No labels found"});
            
            if(execute_callback) {
				$select.off('change');
				$select.on('change', function(evt, params) {

					if (params && params.deselected) {
						Ticket_Labels.updateLabel(params.deselected, 'remove');
						return;
					}

					Ticket_Labels.updateLabel(params.selected, 'add');
				});
		    }
		});
	},

	fetchCollection : function(callback) {

		if(this.labelsCollection && this.labelsCollection.length > 0 && this.labelsCollection.toJSON() && callback){
			callback(this.labelsCollection);
			return;
		}

		var Labels = Backbone.Collection.extend({
			url : '/core/api/tickets/labels'
		});

		new Labels().fetch({
			success : function(collection) {

				console.log('Label collection length: ' + collection.length);
				Ticket_Labels.labelsCollection = collection;

				if (callback)
					callback(collection);
			}
		});
	},

	showSelectedLabels : function(labels, el, execute_callback) {

		this.fetchCollection(function() {
			Ticket_Labels.prepareOptionsList(labels, el, execute_callback);
		});

		return;
	},

	prepareOptionsList : function(labels, el, execute_callback) {

		if (!this.labelsCollection)
			return;

		var newLabelJSON = {};
		var optionList = "";
		$.each(this.labelsCollection.toJSON(), function(index, eachLabel) {

			if ($.inArray(eachLabel.id, labels) != -1)
				optionList += "<option value='" + eachLabel.id
						+ "' selected='selected'>" + eachLabel.label + "</option>";
			else
				optionList += "<option value='" + eachLabel.id + "'>"
						+ eachLabel.label + "</option>";

		});

		$(".chosen-select", el).html(optionList);

		// Initializing type ahead for tags
		this.initChoosenSelect(el, execute_callback);
	},

	updateLabel : function(label, command, callback) {

		//console.log(command);
		if (!label || !Current_Ticket_ID 
			 || Current_Route.indexOf('edit-canned-response') != -1) {
			if (callback)
				callback();

			return;
		}

        
		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/update-labels";
		var json = {command: command, labelID: label, id: Current_Ticket_ID};

       	Tickets.updateModel(url, json, function(model){
       		

       		var label_text = $('.chosen-select option[value="'+json.labelID+'"]', 
       								App_Ticket_Module.ticketView.el).text();
       		
       		//Updating model
       		
       		if(App_Ticket_Module.ticketsCollection){

            var ticket_model = App_Ticket_Module.ticketsCollection.collection.get(Current_Ticket_ID);
            var ticket_labels = ticket_model.get('labels');
		    //console.log(ticket_labels);  
		    
		    if(!ticket_labels)
			    ticket_labels = [];

		   	if(command=='add'){
	        	ticket_labels.push(parseInt(label));
	        }
		    else{
				
				ticket_labels= jQuery.grep(ticket_labels, function(value) {
				 	return value != label;
				});                   
			}
		    ticket_model.set({labels:ticket_labels},{silent: true});
		} 		         
		
       		var msg = "Label "+ label_text + " has been deleted from ticket";

       		if(json.command == 'add')
				msg = "Label " + label_text + " has been added to ticket" ;
                   		
       		Ticket_Utils.showNoty('information', msg, 'bottomRight', 5000);

       		if (callback)
				callback();
		});
	},

	loadChosenLibrary: function(callback){

		head.js('/flatfull/css/misc/chosen.css', '/lib/chosen.jquery.min.js', function() {

			if (callback)
				callback();
		});
	}
};var Tickets_Notes = {

	sendReply : function(e) {

		e.preventDefault();

		var $save_btn = $(e.target);
		
		$("#send-reply").validate({
  			  debug : true,
			  highlight : function(element, errorClass) {
			   $(element).closest('div').addClass('has-error');
			  },
			 unhighlight : function(element, errorClass) {
			   $(element).closest('div').removeClass('has-error');
			  },
			  errorPlacement: function(error, element) {
				$(element).closest('div').addClass('has-error');
			  }
		});

		if(!$("#send-reply").valid()){

			if($(e.target).hasClass('forward'))
				this.forwardTicket(json, $save_btn, false);
			    return;
		}
			

		var json = serializeForm("send-reply");

		json.html_text = json.html_text.trim() + "\r\n\r\n" + CURRENT_USER_PREFS.signature;

		if($(e.target).hasClass('forward')){
		    this.forwardTicket(json, $save_btn, true);
			return;
        }

		var note_type = $(e.target).hasClass('private') ? 'PRIVATE' : 'PUBLIC';
		json.note_type = note_type;

        var is_ticket_closed = $(e.target).hasClass('close-ticket');
         
        if(is_ticket_closed)
			json.close_ticket="true";
        
        disable_save_button($save_btn);

		var newTicketNotesModel = new BaseModel();
		newTicketNotesModel.url = '/core/api/tickets/notes/' + Current_Ticket_ID;
		newTicketNotesModel.save(json, {

			success : function(model) {

				enable_save_button($save_btn);
				
				var notes_json = model.toJSON();

				// Remove draft message from local staorage
				$('textarea#reply_textarea').val("");

				Tickets.remove_draft_message(Current_Ticket_ID, ((note_type == 'PUBLIC') ? 'reply' : 'comment'));
                
                if(notes_json.note_type == 'PRIVATE'){
                	Ticket_Utils.showNoty('information', "Comment has been added" + ((is_ticket_closed) ? ' and status changed to Closed' : ''), 'bottomRight', 5000);
                }else{
	                
	                var msg = 'Comment has been added and ticket status changed to ' + ((is_ticket_closed) ? 'Closed' : 'Pending');

	                Ticket_Utils.showNoty('information', msg, 'bottomRight', 5000);
				}
				
				var json = {};
                
                if(is_ticket_closed){
	            	$(".ticket_status").val("CLOSED");
	            	json.status = 'CLOSED';
	            	$(".remove-date").css("display", "none");
                    $('#ticket_change_sla').attr("disabled","disabled");
	            }
                else{
                    $('#ticket_change_sla').removeAttr("disabled"); 
                }
	            if( App_Ticket_Module.ticketsCollection){

	            	var ticket_model = App_Ticket_Module.ticketsCollection.collection.get(Current_Ticket_ID);

	            	if(ticket_model){
	                
						//Update model in collection
						if(notes_json.note_type != 'PRIVATE'){
		                    
							var current_date = new Date().getTime();
		                    
		                    json.status = (is_ticket_closed) ? 'CLOSED' : 'PENDING'; 
		   					json.last_updated_time = current_date;
							json.closed_time= (is_ticket_closed) ? current_date : '';
							json.last_reply_text = notes_json.plain_text;
							json.last_updated_by = 'AGENT';
							json.user_replies_count = notes_json.user_replies_count;
						}

						ticket_model.set(json, {silent: true});
					}

					var next_ticket_url = $(".navigation .next-ticket").attr("href");

					if(next_ticket_url)
						Backbone.history.navigate(next_ticket_url, {
							trigger : true
						});
                    else{
                    	Tickets.renderExistingCollection();
			        } 

					return;
				}

				Tickets.renderExistingCollection();
				return;
			},
			error : function(data, response) {

				$('.error-msg').html(response.responseText);

				enable_save_button($save_btn);

				setTimeout(function() {
					$('.error-msg').html('');
				}, 3000);
			}
		});
	},

	forwardTicket : function(data, targetEle, isValid){

		var emails = [];

		$('ul.forward-emails > li').each(function(index){
			var email =  $(this).find('a.anchor').text();
			if(email)
				emails.push(email);
		});

		if(emails.length == 0){
			$('ul.forward-emails').addClass("ticket-input-border-error");
			return;
		}
		
		if(!isValid)
			return;

		//set to emails
		data.email = emails.join();

		$.ajax({
			url : '/core/api/tickets/forward-ticket',
			method: "POST",
			data: data,
			contentType: 'application/x-www-form-urlencoded',
			accept: 'application/json',
			success : function(data){
				
				Ticket_Utils.showNoty('information', "Ticket has been forwarded to " + emails.join(), 
					'bottomRight', 5000);

				// Remove draft message from local staorage
				$('textarea#reply_textarea').val("");
				Tickets.remove_draft_message(Current_Ticket_ID, 'forward');

				var next_ticket_url = $(".navigation .next-ticket").attr("href");
				if(next_ticket_url){
					Backbone.history.navigate(next_ticket_url, {
						trigger : true
					});
					return;
				}

				Tickets.renderExistingCollection();
			}	
		});
	},

	repltBtn : function(reply_type, el) {

		var ticketModel = App_Ticket_Module.ticketView.model;

		var data = ticketModel.toJSON();

		data.reply_type = (reply_type) ? reply_type : "reply";
		if(data.reply_type == 'forward')
		 data.notes = this.constructTextComments(App_Ticket_Module.notesCollection.collection.toJSON());
		

		if(Ticket_Canned_Response.cannedResponseCollection && 
			Ticket_Canned_Response.cannedResponseCollection.toJSON())
			data.canned_responses = Ticket_Canned_Response.cannedResponseCollection.toJSON();

		data.label_matched_canned_responses = this.getMatchedCannedResponses(data.labels);
		data.draft_message = (Tickets.get_draft_message())[data.id];

		var $container = (el) ?  $('#send-reply-container', el): $('#send-reply-container');

		$container.html(getTemplate('create-ticket-notes', data));

		if(data.reply_type == 'forward'){
			$("#macro_list", $container).addClass("disabled text-muted");
			$("#macro_list").css("cursor","no-drop");
		}

		Ticket_Utils.loadTextExpander(function()
		{	
			try{
				$('textarea#reply_textarea', $container).TextAreaExpander({'padding' : '8px 8px 1px 8px' });
				$('textarea#reply_textarea', $container).css({'height':'60px'});
			}catch(e){}
		});

		Tickets.start_ticket_draft_timer(data.id, 'textarea#reply_textarea');

		//Initializing type ahead for cc emails
		$($container).on('keypress', '#forward_email_input', function(e){

			e.stopImmediatePropagation();
			
			if(e.which == 13) {

				var email = $('#forward_email_input').val();

	        	if(!email)
	        		return;
	        	
	        	var err_email = !Tickets.isValidEmail(email);

	        	$('ul.forward-emails').prepend(getTemplate('forward-email-li', {email: email, err_email: err_email}));
	        	$('#forward_email_input').val('');

	        	var emails = [];
	        	$('ul.forward-emails > li').each(function(index){
					var email =  $(this).find('a.anchor').text();
					if(email)
						emails.push(email);
				});

				if(emails.length > 0){
					$('ul.forward-emails').removeClass("ticket-input-border-error");
				}

	        	return false;
	    	}
		});

		if($("#forward_email_input", $container).length > 0){
			agile_type_ahead("forward_email_input", $container, Tickets_Typeahead.contact_typeahead, function(arg1, arg2){

				arg2 = arg2.split(" ").join("");

				var email = TYPEHEAD_EMAILS[arg2 + '-' + arg1];

				if(!email || email == 'No email')
					return;

				$('ul.forward-emails').prepend(getTemplate('forward-email-li', {email: email}));
				$('#forward_email_input').val('');

				$('ul.forward-emails').removeClass("ticket-input-border-error");
		  		
		  	},undefined, undefined, 'core/api/search/');
		}

		$($container).on('click', '.remove-ticket-forward-emails', function() {
			$(this).closest('li').remove();
		});

		
		// $('textarea#reply_textarea', $container).focus();

		$($container).on('click', '#ticket_canned_response', function() {

			var ticketModel = App_Ticket_Module.ticketView.model;

			var cannedResponseId = $(this).attr('rel');

			var message;

			var cannedResponseArray = (Ticket_Canned_Response.cannedResponseCollection) ? Ticket_Canned_Response.cannedResponseCollection.toJSON() : [];

			for (var i = 0; i < cannedResponseArray.length; i++) {
				if(cannedResponseArray[i].id == cannedResponseId){
					var template = Handlebars.compile(cannedResponseArray[i].message);
					message = template(data);;
					break;
				}
			};

			if(!message)
				return;

			Ticket_Utils.loadInsertCursor(function()
			{	
				$container.find("#reply_textarea").insertAtCaret(message);
			});
		})
	},

	getMatchedCannedResponses : function(labels){

		var allowedCannedResponses = [];

		if(!Ticket_Canned_Response.cannedResponseCollection)
			return;

		$.each(Ticket_Canned_Response.cannedResponseCollection.toJSON(), function(index, eachCannedResponse){

			     cannedResponseLabels = eachCannedResponse.labels;

			     if(!cannedResponseLabels)
			     	return true;

			     var isAllowed = (cannedResponseLabels.length == 0) ? false : true;

			     for (var i = 0; i < cannedResponseLabels.length; i++) {
					if($.inArray(cannedResponseLabels[i], labels) == -1){
			     		isAllowed = false;
			     		break;
			     	}
				}

			     if(isAllowed)
			     	allowedCannedResponses.push(eachCannedResponse);
		});

		return allowedCannedResponses;

	},

	constructTextComments : function(notesCollection) {

		var notesText = "";

		if(!notesCollection || notesCollection.length == 0)
			return notesText;
           
		$.each(notesCollection, function(index, note){
			
			if(note.note_type == "PRIVATE")
              	return;

            var noteAttachment=note.attachments_list;

            notesText += note.plain_text;
              
	        if(noteAttachment.length >0)
	            notesText +="\n\nAttachments:";   

	        $.each(noteAttachment,function(index,note_Attachment){
	           notesText += '\n <a href="' + encodeURI(note_Attachment.url) + '">' 
	           	+ note_Attachment.name + '</a>';
	        });
	         
            notesText += "\n\n-----------------------------------------\n\n";

            notesText = notesText.replace(/<br\s*[\/]?>/gi, "\n");
        });

		return notesText;
	},

	showCannedMessages : function(e) {

		var deleteTicketView = new Base_Model_View({
			isNew : true,
			url : "/core/api/tickets/delete-ticket?id=" + Current_Ticket_ID,
			template : "ticket-delete",
			saveCallback : function() {

				$('#ticketsModal').modal('hide');
				var url = '#tickets/group/'
						+ (!Group_ID ? DEFAULT_GROUP_ID : Group_ID) + '/'
						+ (Ticket_Status ? Ticket_Status : 'new');

				Backbone.history.navigate(url, {
					trigger : true
				});
			}
		});

		$('#ticketsModal').html(deleteTicketView.render().el).modal('show');
	},

	executeWorkflow : function(e) {

		var workflowId = $(e.target).attr('id');

		if(!workflowId)
			return;

		var json = {};
		json.workflow_id = workflowId;
		json.ticket_id = Current_Ticket_ID;

		// Send req to trigger campaign
		var newTicketModel = new BaseModel();
		newTicketModel.url = "core/api/tickets/execute-workflow";
		newTicketModel.save(json, {	
				success: function(model){
					Ticket_Utils.showNoty('information', 'Workflow execution has been started successfully', 'bottomRight', 5000);
			}}
		);
	},

	showOriginal: function(id, type){

		var params  = 'width=550';
		params += ', height=' + (screen.height-200);
		params += ', scrollbars=yes, top=0, left=0';

		type = (!type) ? "html" : type;

		newwin=window.open('ticket-notes.jsp?id=' + id + '&type=' + type,'Help Desk | Agile CRM', params);

		if (window.focus)
			newwin.focus();

		return false;
	}
};
var Ticket_Reports = {

	tickets: function(){

		var range = $('#range').html().split("-");
    
	    var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));
	    var d = new Date();
	    start_time=start_time+(d.getTimezoneOffset()*60*1000);
	    start_time=start_time/1000;
	    var end_value = $.trim(range[1]);

	    // To make end value as end time of day
	    if (end_value)
	        end_value = end_value + " 23:59:59";

	    // Returns milliseconds from end date.
	    //var end_time = Date.parse(end_value).valueOf();
	    //Get the GMT end time
	    var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	    end_time += (((23*60*60)+(59*60)+59)*1000);
	    end_time=end_time+(d.getTimezoneOffset()*60*1000);
	    end_time=end_time/1000;
		
	    var frequency = $('#frequency').find('option:selected').val();

	    $('#frequency').off('change');
		$('#frequency').change(function()
		{	
			frequency = $(this).find('option:selected').val();
			showBar('/core/api/tickets/reports/daily?start_time=' + start_time + '&end_time=' 
					+ end_time + '&frequency=' + frequency, 'tickets-chart', '', 'Tickets count', false);
		});

		var status = $('#status').find('option:selected').val();
		$('#status').off('change');
		$('#status').change(function()
		{	
			status = $(this).find('option:selected').val();
			showBar('/core/api/tickets/reports/daily?start_time=' + start_time + '&end_time=' 
					+ end_time + '&frequency=' + frequency + '&status=' + status, 'tickets-chart', '', 'Tickets count', false, ((status == 'NEW') ? ['#f0ad4e'] : ['#5cb85c']));
		});

		showBar('/core/api/tickets/reports/daily?start_time=' + start_time + '&end_time=' 
				+ end_time + '&frequency=' + frequency + '&status=' + status, 'tickets-chart', '', 'Tickets count', false, ((status == 'NEW') ? ['#f0ad4e'] : ['#5cb85c']));
	},

	priorityReports: function(){

		var range = $('#range').html().split("-");
    
	    var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));
	    var d = new Date();
	    start_time=start_time+(d.getTimezoneOffset()*60*1000);
	    start_time=start_time/1000;
	    var end_value = $.trim(range[1]);

	    // To make end value as end time of day
	    if (end_value)
	        end_value = end_value + " 23:59:59";

	    // Returns milliseconds from end date.
	    //var end_time = Date.parse(end_value).valueOf();
	    //Get the GMT end time
	    var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	    end_time += (((23*60*60)+(59*60)+59)*1000);
	    end_time=end_time+(d.getTimezoneOffset()*60*1000);
	    end_time=end_time/1000;
		
	    var report_type = $('#report_type').find('option:selected').val();

	    $('#report_type').off('change');
		$('#report_type').change(function()
		{	
			report_type = $(this).find('option:selected').val();

			var url = '/core/api/tickets/reports/priority?start_time=' + start_time + '&end_time=' + end_time,
			    report_title = 'Priority Report';

			if(report_type == 'status'){
				url = '/core/api/tickets/reports/status?start_time=' + start_time + '&end_time=' + end_time;
			    report_title = 'Status Report';
			}

			Ticket_Reports.pieforReports(url,'report-chart', '', true);
			$('.report_name').text(report_title);
		});

		//report_type = $(this).find('option:selected').val();

		var url = '/core/api/tickets/reports/priority?start_time=' + start_time + '&end_time=' + end_time,
		    report_title = 'Priority Report';
		if(report_type == 'status'){
			url = '/core/api/tickets/reports/status?start_time=' + start_time + '&end_time=' + end_time;
		    report_title = 'Status Report';
		}

		Ticket_Reports.pieforReports(url,'report-chart', '', true);
		$('.report_name').text(report_title);
	},

	avgFirstRespTime: function(){

		var range = $('#range').html().split("-");
    
	    var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));
	    var d = new Date();
	    start_time=start_time+(d.getTimezoneOffset()*60*1000);
	    start_time=start_time/1000;
	    var end_value = $.trim(range[1]);

	    // To make end value as end time of day
	    if (end_value)
	        end_value = end_value + " 23:59:59";

	    // Returns milliseconds from end date.
	    //var end_time = Date.parse(end_value).valueOf();
	    //Get the GMT end time
	    var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	    end_time += (((23*60*60)+(59*60)+59)*1000);
	    end_time=end_time+(d.getTimezoneOffset()*60*1000);
	    end_time=end_time/1000;
		
		Ticket_Reports.pieforReports('/core/api/tickets/reports/first-response-time?start_time=' + start_time + '&end_time=' + end_time,
			'avg-first-resp-time-chart', '', true);

		// pie('/core/api/tickets/reports/status-report?start_time=' + start_time + '&end_time=' + end_time,
		// 	'status-report-chart', '');
	},

	slaReport: function(){

		var range = $('#range').html().split("-");
    
	    var start_time = getUTCMidNightEpochFromDate(new Date(range[0]));
	    var d = new Date();
	    start_time=start_time+(d.getTimezoneOffset()*60*1000);
	    start_time=start_time/1000;
	    var end_value = $.trim(range[1]);

	    // To make end value as end time of day
	    if (end_value)
	        end_value = end_value + " 23:59:59";

	    // Returns milliseconds from end date.
	    //var end_time = Date.parse(end_value).valueOf();
	    //Get the GMT end time
	    var end_time = getUTCMidNightEpochFromDate(new Date(end_value));

	    end_time += (((23*60*60)+(59*60)+59)*1000);
	    end_time=end_time+(d.getTimezoneOffset()*60*1000);
	    end_time=end_time/1000;
		
		Ticket_Reports.pieforReports('/core/api/tickets/reports/sla?start_time=' + start_time + '&end_time=' + end_time,
			'sla-report-chart', '', true);

		// pie('/core/api/tickets/reports/sla-report?start_time=' + start_time + '&end_time=' + end_time,
		// 	'sla-report-chart', '');
	},

	pieforReports: function(url, selector, name){


		$('#' + selector).html("<div class='text-center v-middle opa-half'>" + 
			"<img src='../flatfull/img/ajax-loader-cursor.gif' style='width:12px;height:10px;opacity:0.5;' /></div>");

		var chart;
		var AllData=[];

		setupCharts(function()
		{
			fetchReportData(url, function(data)
			{
				// Convert into labels and data as required by Highcharts
				var pieData = [];
				var total = 0;
				var count = 0;

				// Iterates through data and calculate total number
				$.each(data, function(k, v)
				{
					var totalData=[];
					totalData.push(k);
					totalData.push(v.count);
					totalData.push(v.total);
					AllData.push(totalData);
					total += v.count;
					count ++;
				});

				console.log(data,total);
				// Iterates through data, gets each tag, count and
				// calculate
				// percentage of each tag
				$.each(data, function(k, v)
				{
					var item = [];

					
					// Push tag name in to array
					item.push(k);

					item.push(v.count/ total * 100);
					item.push(total);
					pieData.push(item);
				});

				console.log(pieData);

				var animation = count > 20 ? false : true;

				Ticket_Reports.createAPieChart(selector, name, animation, AllData, pieData);
			});
		});
	},

	createAPieChart: function(selector, name, animation, AllData, pieData){

		console.log('All data');
		console.log(AllData);
		console.log('pieData');
		console.log(pieData);

		chart = new Highcharts.Chart({
				chart : { renderTo : selector, type : 'pie', plotBackgroundColor : null, plotBorderWidth : null, plotShadow : false,
					marginBottom:30, marginTop:20, marginLeft: 70, marginRight: 70},
				colors: ['#7266ba','#23b7e5','#27c24c','#fad733','#f05050','#FF9900','#7AF168','#167F80','#0560A2','#D3E6C7'],
				title : { text : name },
				tooltip: {
					formatter:  function(){
						return  '<div>' + 
	                        '<div class="p-n">'+this.series.name+': <b>'+ getNumberWithCommasForCharts(AllData[this.point.x][1]) + '</b></div>' +
	                        '</div>'+
	                        '<div class="p-n">Total: <b>' + pieData[this.point.x][2]+ '</b></div>';
					},
					shared: true,
					useHTML: true,
					borderWidth : 1,
					backgroundColor : '#313030',
					shadow : false,
					borderColor: '#000',
					borderRadius : 3,
					style : {
						color : '#EFEFEF'
					}
				},
				legend : { itemWidth : 75},
				plotOptions : {
					pie : {
						animation: animation,
						allowPointSelect : true,
						cursor : 'pointer',
						borderWidth : 0,
						dataLabels : { 
							enabled : true,
							useHTML: true,
							formatter : function()
							{
								return 	'<div class="text-center text-cap"><span style="color:'+this.point.color+';display:block"><b>'+this.point.name+'</b></span>' +
    							'<span style="color:'+this.point.color+'"><b>'+Math.round(this.point.percentage)+'%</b></span></div>';
							}, 
							distance : 25 
						}, 
						showInLegend : false,
						size: '90%',
						innerSize : '65%',
						shadow : false, 
						borderWidth : 0
					},
					series : { events : { mouseOver : function()
						{
							$('.tooltip-default-message').hide();
						}, mouseOut : function(e)
						{
							$('.tooltip-default-message').show();
						} },
						borderWidth : 0
					}
				},
				series : [{ type : 'pie', name : 'Tickets', data : pieData, startAngle : 90 }], 
				exporting : { enabled : false },
				lang: { noData: "No Data found"},
				noData: {
					style: {
						fontSize: '14px',
						fontWeight : 'normal',
						color : '#98A6AD'
					},
					position :{y: 5},
				}
		});
	}
};var ticket_timeline_collection_view = null;
var Ticket_Timeline = {
	render_ticket_timeline: function(ticket_id){

		//Removing existing items from view
		var $timeline = $('#timeline', App_Ticket_Module.ticketView.el);
		try{
			var $allAtoms = $timeline.data('isotope').$allAtoms;
    		$timeline.isotope( 'remove', $allAtoms );
    	}catch(e){}

		// Load plugins for timeline
		head.load(FLAT_FULL_PATH + "lib/isotope.pkgd.js", FLAT_FULL_PATH + "lib/jquery.event.resize.js", FLAT_FULL_PATH + "css/misc/agile-timline.css", function()
		{
			// customize_isotope()
			configure_timeline(App_Ticket_Module.ticketView.el);
			ticket_timeline_collection_view = new ticket_timeline_view();

			var url = 'core/api/tickets/activity?id=' + ticket_id;

			showTransitionBar();

			$.getJSON(url, function(data)
			{
				ticket_timeline_collection_view.addItems(data);

				hideTransitionBar();
			}).error(function(){ hideTransitionBar(); });

			ticket_timeline_collection_view.render();
		});
	},

	render_individual_ticket_timeline: function(){

		$('#notes-collection-container').html(getRandomLoadingImg());

		//Fetching users collection
		var collection_def = Backbone.Collection.extend({url : 'core/api/tickets/activity?id=' + Current_Ticket_ID});
		var collection = new collection_def();

		collection.fetch({ success : function(){

			// To timeline in sorting(dec) order
			var data = new BaseCollection(collection.toJSON(), {sortKey : "time",descending:true}).toJSON();

			var $template = $(getTemplate("ticket-timeline", data));

			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$("time", $template).timeago();
			});

			//Initialize tooltips
			$('[data-toggle="tooltip"]', $template).tooltip();

			$('#notes-collection-container').html($template);
			
		}}

		);

	}
};	

var ticket_timeline_view = Backbone.View.extend({ 
	initialize : function()
	{
		// Binds functions to view
		_.bindAll(this, 'render', 'appendItem', 'addItems');

		this.options.data = [];

		this.collection = new BaseCollection([], {});
		this.month_year_marker = [];
		this.month_year_marker_objects = [];
		configure_timeline_comparator(this.collection);

		// load_other_timline_entities();
		this.queue = new Queue;

		// this.render();
		this.collection.bind('add', this.appendItem);
	}, 
	appendItem : function(model)
	{
		this.collection.add(model, { silent : true });
		var temp = [];
		temp.push(model.toJSON());
		var elements = getTemplate("timeline1", temp, undefined, function(result)
		{
			$('#timeline', App_Ticket_Module.ticketView.el).isotope("insert", $(result));
		});
	}, 
	addItems : function(models)
	{
		this.collection.add(models, { silent : true });
		this.buildTimlinePosts(models);

	}, 
	render : function()
	{
		this.buildTimlinePosts(this.collection.toJSON());
	}, 
	buildTimlinePosts : function(models)
	{
		var length = models.length;
		if (!length)
			return;

		this.addToQueue(models)
		return;

		var i = 0;
		while (i < length)
		{
			var end = i + 50;

			end = end > length ? length : end;
			if (end == i)
				break;
			this.addToQueue(models.slice(i, end));
			i += 50;
		}
	}, 
	addToQueue : function(models)
	{
		this.queue.add_function(function(models){

			getTemplate("timeline1", models, undefined, function(result)
			{
				$("#timeline", $(App_Ticket_Module.ticketView.el)).isotope('insert', $(result), function(ele)
				{
					ticket_timeline_collection_view.queue.running = false;
					ticket_timeline_collection_view.queue.next();
				});
			});

		}, models);
	}
});var Ticket_Utils = {

	fetchAssignees: function(callback){

		if(Assingees_Collection &&
			Assingees_Collection.collection){

			if(callback)
				callback();

			return;
		}

		//Initializing base collection with groups URL
		Assingees_Collection = new Base_Collection_View({
			url : '/core/api/users/partial',
			preserveAcrossRoutes: true
		});

		//Fetching assingnee collection
		Assingees_Collection.collection.fetch({
			success: function(){
				
				if(callback)
					callback();
			}
		});
	},

	fetchGroups: function(callback){

		if(Groups_Collection &&
			Groups_Collection.collection){

			if(callback)
				callback();

			return;
		}

		//Initializing base collection with groups URL
		Groups_Collection = new Base_Collection_View({
			url : '/core/api/tickets/groups',
			preserveAcrossRoutes: true
		});

		//Fetching groups collection
		Groups_Collection.collection.fetch({
			success: function(model){
				
				if(callback)
					callback();
			}
		});
	},

	fetchContact: function(contact_id, callback){

		var contact = Backbone.Model.extend({
			url : "/core/api/contacts/" + contact_id
		});

		new contact().fetch({
			success : function(contactModel) {

				Ticket_Utils.Current_Ticket_Contact = contactModel;

				if (callback)
					callback();
			}
		});
	},

	dateDiff: function(date_future, date_now){

		// get total seconds between the times
		var delta = Math.abs(date_future - date_now) / 1000;

		// calculate (and subtract) whole days
		var days = Math.floor(delta / 86400);
		delta -= days * 86400;

		// calculate (and subtract) whole hours
		var hours = Math.floor(delta / 3600) % 24;
		delta -= hours * 3600;

		var txt = (days > 0) ? (days + ' day' + (days > 1 ? 's' : '') + ' ') : '';

		txt += (hours > 0) ? (hours + ' hr' + (hours > 1 ? 's' : '')) : '';

		return txt.trim();
	},

	resetModalSettings: function($ele){

		if($ele)
			$ele.modal('hide');

		var $body = $('body');

		if($body.hasClass('modal-open')){
			$body.removeClass('modal-open').animate({scrollTop: 0}, "slow");
			$body.css('padding-right', '');
		}
	},

	loadDateChartAndDatePicker: function(callback){

		head.js(LIB_PATH + 'lib/date-charts.js', 
				  LIB_PATH + 'lib/date-range-picker.js'+'?_=' + _agile_get_file_hash('date-range-picker.js'), function(){

			if(callback)
				callback();
		});
	},

	loadTextExpander: function(callback){

		head.js('/flatfull/lib/jquery.textarea-expander.js?_=' + _agile_get_file_hash('jquery.textarea-expander.js'), function(){

			if(callback)
				callback();
		});
	},

	loadInsertCursor: function(callback){

		head.js('/flatfull/lib/jquery.insertatcursor.js?_=' + _agile_get_file_hash('jquery.insertatcursor.js'), function(){

			if(callback)
				callback();
		});
	},

	enableTooltips: function(el){
		$('[data-toggle="tooltip"]', el).tooltip();
	},

	loadTimeAgoPlugin: function(callback){
		head.js(LIB_PATH + 'lib/jquery.timeago.js', function(){
			
			if(callback)
				callback();
		});
	},

	getPropertyFromTicket: function(property_name){

		if(!App_Ticket_Module.ticketView.model)
			return '';

		var ticketJSON = App_Ticket_Module.ticketView.model.toJSON();

		return ticketJSON[property_name];
	},

	//Should be used only when ticket collection is available
	isTicketAttributesChanged: function(ticket_id, attributesJSON){

		var ticket_json = App_Ticket_Module.ticketsCollection.collection.get(ticket_id).toJSON();

		var isAttributeChanged = false;

		for (var key in attributesJSON) {
		  
		  if(attributesJSON[key] === ticket_json[key])
		  	continue;

		  isAttributeChanged = true;
		}

		return isAttributeChanged;
	},

	showNoty: function(type, message, position, timeout){

		head.js(LIB_PATH + 'lib/noty/jquery.noty.js', function(){
			
			$.noty.clearQueue();

			head.js('lib/noty/layouts/bottom.js', LIB_PATH
				+ 'lib/noty/layouts/bottomRight.js', LIB_PATH
				+ 'lib/noty/themes/default.js', function(){

				noty({
					text : message,
					layout : position,
					//dismissQueue: true,
					type : type,
					animation : {
						open : {
							height : 'toggle'
						},
						close : {
							height : 'toggle'
						},
						easing : 'swing',
						speed : 500
					},
					timeout : timeout,
				});
			});
		});
	},

	getInitials: function(name){

		if(!name)
			return 'X';

		var array = name.split(" ");

		if(array.length >= 2){

			var initials = array[0].substr(0, 1);
			initials += array[1].substr(0, 1);

			return initials;
		}

		return name;
	},

	getInitialsEmptyMethod: function(name){

		return name;
	}
};var Tickets_Count = {

	ticketsCount : {},
	fetchFilterTicketsCount: function(filters_colletion){

		if(!App_Ticket_Module.ticketFiltersList)
			return;
		
		var filters = App_Ticket_Module.ticketFiltersList.collection.toJSON();

		for(var i=0; i<filters.length; i++){

			this.showFiltersTicketCount(filters[i].id);	
		}
	},

	showFiltersTicketCount: function(filter_id){

		var url = '/core/api/tickets/fitered-tickets-count?filter_id='+ filter_id;

		this.ajax_call(url, function(data){

			Tickets_Count.ticketsCount[filter_id] = data.count;
			$('a[filter-id="'+ filter_id +'"]').find('badge').html(data.count);
		});
	},
		
	ajax_call: function(url, callback){

		$.ajax({
			url : url, 
			accept: 'application/json',
			success : function(data){

				if(callback)
					callback(data);
			}	
		});
	}
};var Tickets_Rest={

	removeTicketsFromCollection: function(ticketIDCSV){

		var ticketIDArray = ticketIDCSV.split(",");

		if(!ticketIDArray || ticketIDArray.length ==0)
			return;

		for(var i=0; i<ticketIDArray.length; i++){
			$('td#' + ticketIDArray[i]).closest('tr').remove();
			App_Ticket_Module.ticketsCollection.collection.remove(ticketIDArray[i]);
		}
	},
	changeStatus : function(status, callback){
    
		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-status";
		var json = {status: status};

        var current_time = new Date().getTime();
		Tickets.updateModel(url, json, function(model){

				Ticket_Utils.showNoty('information', 'Ticket status has been changed to '+ status.toLowerCase() , 'bottomRight', 5000);

				 if(status != "NEW")
                     $('.ticket_status option[value="NEW"]').hide()

				if(status != "CLOSED")
				{
				    $(".ticket-addnote-close").removeAttr("disabled");
				    $(".ticket-send-reply .btn").removeAttr("disabled");
				    $('.ticket_change_slatime').removeAttr("disabled");
                	$('#ticket_change_sla').removeAttr("disabled");                    	
                	$(".close-current-ticket").removeAttr("disabled");
                	if($('#ticket_change_sla').val() != "")
                	$(".remove-date").css("display", "block");
				}						
				else
				{
					$(".remove-date").css("display", "none");
				    $(".ticket-addnote_close").attr("disabled","disabled"); 
					$(".ticket-send-reply .btn").attr("disabled","disabled");
					$('#ticket_change_sla').attr("disabled","disabled");
					$('.ticket_change_slatime').attr("disabled","disabled");
					$(".close-current-ticket").attr("disabled","disabled");
					$(".ticket_status").val("CLOSED");

					json.closed_time = current_time;
				}

                Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, json);
				
				if(callback)
					callback(model.toJSON());

			}, null);
	},

	closeTicket : function(e){


		this.changeStatus("CLOSED");
	},

	deleteTicket: function(e){

		//Rendering root template
		getTemplate("ticket-delete", {}, undefined, function(template_ui){

			if(!template_ui)
		  		return;

			$('#ticketsModal').html($(template_ui)).modal('show').on('shown.bs.modal', function() {
			    
			    $('#ticketsModal').on('click', 'a.delete-ticket', function(){

					disable_save_button($(this));

					App_Ticket_Module.ticketView.model.destroy({
						success : function(model, response) {
							
							Ticket_Utils.showNoty('information', "Ticket has been deleted",'bottomRight', 5000);
	                          
							var url = '#tickets/filter/' + Ticket_Filter_ID;
							Backbone.history.navigate(url, {trigger : true});
						}
					});

					$('#ticketsModal').modal('hide');
				});
			});
		});
	},

	showWorkflows: function(e){

		var $this = $(e.target);

		$this.siblings("#workflows_list").html('<li><a href="javascript:void(0);">Loading...</a></li>');

		var workflows = Backbone.Collection.extend({
			url : 'core/api/workflows'
		});

		new workflows().fetch({
			success : function(Collection) {
				$('#workflows_list').html(getTemplate("ticket-show-workflows-list", Collection.toJSON()));
			}
		});
	},

	toggleFavorite : function(e){

		var favourite = true; 

		//Toggling star color
		if($(e.target).hasClass("fa-star text-warning")){
			$(e.target).removeClass("fa-star text-warning").addClass("fa-star-o text-light");
		     favourite=false;
		}else{
		   
			$(e.target).addClass("fa-star text-warning").removeClass("fa-star-o text-light");
		}

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/toggle-favorite";
		var json = {};

		Tickets.updateModel(url, json, function(model){

			var succesmessage = "Ticket marked favourite";

			if(!favourite)
				succesmessage = "Ticket marked as unfavourite";

             Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {is_favorite:favourite});

			 Ticket_Utils.showNoty('information', succesmessage, 'bottomRight', 5000);
		}, null);
	},

	toggleSpam : function(e){

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/toggle-spam";
		var json = {};

		Tickets.updateModel(url, json, function(model){

			var message ="";
			var spam_value=true;

			if(model.toJSON().is_spam)
			{
				$(e.target).addClass("btn-danger").removeClass("btn-default");
			    message="Ticket marked as spam"; 
			}
			else
			{
				$(e.target).removeClass("btn-danger").addClass("btn-default");
                message="Ticket marked as unspam";
                spam_value=false;
            }

            Ticket_Utils.showNoty('information',message, 'bottomRight', 5000);
			
			Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {is_spam:spam_value});

		}, null);
	},
	
	changeTicketType: function(event){

		var $select = $('.ticket_type');
		var new_ticket_type = $select.find('option:selected').val();
		//$select.attr('disabled', true);

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-ticket-type";
		var json = {type: new_ticket_type};

		Tickets.updateModel(url, json, function(){

			// current view
			Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {type : new_ticket_type});
			 
				//update collection 
	   			Ticket_Utils.showNoty('information', 'Ticket Type has been changed to '+ new_ticket_type.toLowerCase(), 'bottomRight', 5000);
			}
		);
	},

	changeTicketPriority: function(event){

		var $priority = $('.ticket_priority');
		var new_priority = $priority.find('option:selected').val();

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-priority";
		var json = {priority: new_priority};

		Tickets.updateModel(url, json, function(){

			Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, json);

			Ticket_Utils.showNoty('information', 'Ticket priority has been changed to '+ new_priority.toLowerCase() , 'bottomRight', 5000);
		});
	},

	changeAssignee : function(e){

		var that = e.target;

		var groupId = $(that).val();
		//console.log(assigneeId);

		if(!groupId)
			return;

	    var assigneeId = $(that.options[that.selectedIndex]).attr('data-assignee-id');

	    if(!assigneeId){
	    	assigneeId = 0;
	    }
       	
       	var ticketJSON = App_Ticket_Module.ticketView.model.toJSON();

       	if(ticketJSON.assigneeID == assigneeId 
       		&& ticketJSON.groupID == groupId)
       		return;

       	var url = "/core/api/tickets/" + ticketJSON.id + "/assign-ticket/" + groupId + "/" + assigneeId;
       	var json = {id: ticketJSON.id};

       	Tickets.updateModel(url, json, function(data){
            
			var modelData = data.toJSON();

			try{
				if(modelData.assigneeID != CURRENT_DOMAIN_USER.id 
					&& Tickets.isCurrentUserExistInGroup(groupId, Tickets.groupsList))
					$('.assign-to-me').show();
				else
					$('.assign-to-me').hide();
			}
			catch(e){
				console.log(e);
			}

			var assigneeName = (modelData.assigneeID) ? (modelData.assignee.name) : modelData.group.group_name;

			var assigned_to_group = true;
			var message = 'Ticket group has been changed to ' + assigneeName;

			if(modelData.assigneeID){
				message = 'Assignee has been changed to ' + assigneeName;
				assigned_to_group = false;
			}
			
			Ticket_Utils.showNoty('information', message, 'bottomRight', 5000);

			modelData.assignee = ((modelData.assignee) ? modelData.assignee : "");
			modelData.group = ((modelData.group) ? modelData.group : "");

			// Update assignee in model and collection 
			Tickets_Rest.updateDataInModelAndCollection(modelData.id, modelData);

			//Do not call updateDataInModelAndCollection for change assignee it causes issues when ticket is assigned to group
			if(!App_Ticket_Module.ticketsCollection)
        		return;

			// Get data from collection with id
			var ticket_model = App_Ticket_Module.ticketsCollection.collection.get(modelData.id);

			if(assigned_to_group)
				ticket_model.unset('assigneeID', {silent: true});

			//Update data in model
			ticket_model.set(data, {silent: true});
		});
    },

    removeDuedate : function(){

	 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/remove-due-date";
	 	var json = {};

	 	Tickets.updateModel(url, json, function(model){

    		$('#ticket_change_sla').val('');
    		$('.ticket_change_slatime').timepicker('setTime', '');

    		$(".remove-date").css("display", "none");

	 		App_Ticket_Module.ticketView.model.set({due_time:''}, {silent:true});
	 		Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {due_time:''});

	 		Ticket_Utils.showNoty('information', "Due date has been removed",'bottomRight', 5000);

	 	}, null);
	 },

    updateDataInModelAndCollection : function(id, data){
	    
	    if(!App_Ticket_Module.ticketsCollection)
        	return;

		// Get data from collection with id
		var model = App_Ticket_Module.ticketsCollection.collection.get(id);


		//Update data in model
		model.set(data, {silent: true});
	},

	loadTicketsByContactId : function(id){

		$('div.tab-content', App_Contacts.contactDetailView.el).find('div.active').removeClass('active');
		$('#tickets', App_Contacts.contactDetailView.el).addClass('active');

		var ticketsCollection = new Base_Collection_View({ 
			url : '/core/api/tickets/contact/' + id, 
			templateKey : "tickets-by-contacts",
			individual_tag_name : 'li', 
			sortKey : "created_time", 
			descending : true, 
			postRenderCallback : function(el)
			{
				head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
				{
					$(".note-created-time", el).timeago();
				})
			} 
		});

		ticketsCollection.collection.fetch();

		$('#tickets', App_Contacts.contactDetailView.el).html(ticketsCollection.el);
	}
};var Tickets_Typeahead = {
	 contact_typeahead :function(data){

	if (data == null)
		return;

	// To store contact names list
	var contact_names_list = [];

	/*
	 * Iterates through all the contacts and get name property
	 */
	$.each(data, function(index, contact)
	{
		var contact_name;

		// Appends first and last name to push in to a list
		contact_name = getContactName(contact) + "-" + contact.id;

		// Spaces are removed from the name, name should be used as a key in map
		// "TYPEHEAD_TAGS"
		contact_names_list.push(contact_name.split(" ").join(""));
	});

	// Returns list of contact/company names
	return contact_names_list;
},

 cc_emails_typeahead :function(data){

	if (data == null)
		return;

	// To store contact names list
	var contact_names_list = [];

	/*
	 * Iterates through all the contacts and get name property
	 */
	$.each(data, function(index, contact)
	{
		var contact_name;

		// Appends first and last name to push in to a list
		contact_name = getContactName(contact) + "-" + contact.id;

		// Spaces are removed from the name, name should be used as a key in map
		// "TYPEHEAD_TAGS"
		contact_names_list.push(contact_name.split(" ").join(""));
	});

	// Returns list of contact/company names
	return contact_names_list;
}


};var Group_ID = null, Current_Ticket_ID = null, Ticket_Filter_ID = null, 
	Tickets_Util = {}, Sort_By = "-", Sort_Field = 'last_updated_time', Ticket_Position= null;
var popoverFunction = undefined, Helpdesk_Enabled = false;

var Tickets = {

	//Renders the basic ticketing layout on which every view will be constructed
	renderLayout: function(callback){

		//Checking root template
		if($('#tickets-container').length == 0){

			//Rendering root template
			getTemplate("tickets-container", {}, undefined, function(template_ui){

				if(!template_ui)
			  		return;

				$('#content').html($(template_ui));	

				Ticket_Utils.resetModalSettings();
				
				var json = {};
				json.sort_by = Sort_By;
				json.sort_field = Sort_Field;

				//Fetching ticket toolbar template
				getTemplate("tickets-toolbar-container", json, undefined, function(toolbar_ui){

					if(!toolbar_ui)
			  			return;

			  		//Rendering top toolbar container
					$('#right-pane').html($(toolbar_ui));

					var loaderEl = $(getRandomLoadingImg());
					$(".tickets-collection-pane").html(loaderEl.css("margin", "10px"));

					if(callback)
						callback();
					
				}, "#right-pane");
				
			}, "#content");
		}else{

			if(!Ticket_Filter_ID)
			{
				if(callback)
					callback();
			}else{

				//Showing selected filter name on top
				Ticket_Filters.updateFilterName();

				//Reset custom filters
				Ticket_Custom_Filters.reset();

				//Initialize custom filters and render layout with filter conditions selected
				Ticket_Custom_Filters.renderLayout();
				
				//Fetching selected filter ticket collection
				Tickets.fetchTicketsCollection();
			}	
		}
	},

	fetchTicketModel : function(ticket_id, callback){

		var ticket = Backbone.Model.extend({
			url : "/core/api/tickets/" + ticket_id
		});

		new ticket().fetch({
			success : function(ticketModel) {

				if (callback)
					callback(ticketModel);
			}
		});
	},

	//Fetches new ticket collection
	fetchTicketsCollection: function(){

		Ticket_Labels.fetchCollection(function() {

			App_Ticket_Module.ticketsCollection = new Base_Collection_View({
				url : '/core/api/tickets/filter?filter_id=' + Ticket_Filter_ID + '&custom_filters=' + encodeURI(JSON.stringify(Ticket_Custom_Filters.customFilters)),
				global_sort_key: Sort_By + Sort_Field,
				sort_collection: false,
				templateKey : Tickets.isSingleRowView() ? 'ticket-single-row' : 'ticket',
				customLoader: true,
				preserveAcrossRoutes: true,
				custom_scrollable_element: '.ticket-collection-container',
				customLoaderTemplate: 'ticket-collection-loader',
				individual_tag_name : 'tr',
				cursor : true,
				page_size : 20,
				slateKey : 'no-tickets',
				infini_scroll_cbk: function(){

					//Updating "showing ticket count" text
					Tickets.setCountText();
				},
				postRenderCallback: function(el){

					//Initializing click event on each ticket li
					Tickets.initEvents(el);

					//Initialize tooltips
					Ticket_Utils.enableTooltips($('#tickets-container'));

					//Initialize time ago plugin
					Ticket_Utils.loadTimeAgoPlugin(function(){
						$("time", el).timeago();
					});
					
					//Clear bulk ops selections
					Ticket_Bulk_Ops.clearSelection();

					//Initializing checkbox events
					Ticket_Bulk_Ops.initEvents(el);

					if(!Tickets.isSingleRowView()){
						var Groups = Backbone.Collection.extend({url: '/core/api/tickets/groups'});
						new Groups().fetch({success: function(model, response, options){
							
							$('ul.ul-select-assignee').html(getTemplate('ticket-model-change-assignee', model.toJSON()))
						}});
					}

					Tickets.setCountText();

					if(Tickets.isSingleRowView()){
						Tickets.setMinHeight();
					}
				}
			});
	
			//Activating main menu
			$('nav').find(".active").removeClass("active");
			$("#tickets").addClass("active");

			App_Ticket_Module.ticketsCollection.collection.fetch();

			$(".tickets-collection-pane").html(App_Ticket_Module.ticketsCollection.el);
		});
	},

	setCountText: function(){


		if(!App_Ticket_Module.ticketsCollection || 
			!App_Ticket_Module.ticketsCollection.collection || 
			App_Ticket_Module.ticketsCollection.collection.length == 0){

			$('.ticket-count-text').html('0 tickets found');
			return;
		}

		var last_model = App_Ticket_Module.ticketsCollection.collection.last().toJSON();

		var count = (last_model.count) ? last_model.count : App_Ticket_Module.ticketsCollection.collection.length;
		
		$('.ticket-count-text').html('Showing ' + App_Ticket_Module.ticketsCollection.collection.length + ' of ' + count);
	},
	renderExistingCollection: function(){

		if(!App_Ticket_Module.ticketsCollection){
			App_Ticket_Module.ticketsByFilter(Ticket_Filter_ID);
		}else{
			this.renderLayout(function(){

				//Initialize custom filters
				Ticket_Custom_Filters.renderLayout();

				Ticket_Filters.renderFiltersCollection(function(){

					//Showing selected filter name on top
					Ticket_Filters.updateFilterName();

					$(".tickets-collection-pane").html(App_Ticket_Module.ticketsCollection.render(true).el);
					
					Tickets.setCountText();

					//Initialize click event on each ticket li
					Tickets.initEvents(App_Ticket_Module.ticketsCollection.el);

					//Clear bulk ops selections
					Ticket_Bulk_Ops.clearSelection();

					//Initializing checkbox events
					Ticket_Bulk_Ops.initEvents(App_Ticket_Module.ticketsCollection.el);
					
					Backbone.history.navigate('#tickets/filter/' + Ticket_Filter_ID, {render:false});

					App_Ticket_Module.ticketsCollection.infiniScroll.enableFetch();

					$(window).scrollTop(Ticket_Position);

					Current_Ticket_ID = null;
				});
			});
		}
	},

	initEvents: function(el){
		
		$('div.assignee-change', el).off('click'); 
		$('div.assignee-change', el).on('show.bs.dropdown', function(e){
			
			var $ul = $(this).find('ul.ul-select');

			var ticket_id = $ul.data('ticket-id');
			var ticket_json = App_Ticket_Module.ticketsCollection.collection.get(ticket_id).toJSON()
			var action = $(this).data('action');

			switch(action){

				case 'status':

					$ul.find('li').removeClass('active');

					var $a = $ul.find('li').find('a[value="' + ticket_json.status + '"]');
					$a.closest('li').addClass('active');
					break;
				case 'priority':

					$ul.find('li').removeClass('active');

					var $a = $ul.find('li').find('a[value="' + ticket_json.priority + '"]');
					$a.closest('li').addClass('active');
					break;
				case 'assignee':

					$ul.find('li').removeClass('active');
					
					var assigneeID = ticket_json.assigneeID, groupID = ticket_json.groupID;

					if(!assigneeID){

						var $a = $ul.find('li').find('a[data-group-id="' + groupID + '"][value="0"]');
						$a.closest('li').addClass('active');
					}else{

						var $a = $ul.find('li').find('a[data-group-id="' + groupID + '"][value="' + assigneeID+ '"]');
						$a.closest('li').addClass('active');
					}
			}
		});

		$('div.assignee-change', el).off('click'); 
		$('div.assignee-change', el).on('hidden.bs.dropdown', function(e){
			$(this).removeClass('bg-light');
			$(this).find('a.caret-btn').removeClass('inline-block');
		});

		/**
		 * Initializing click event on ul lists in ticket collection
		 */
		$('ul.ul-select', el).off('click'); 
		$('ul.ul-select', el).on('click', "li a", function(e){
			e.stopPropagation();
			e.preventDefault();
			
			var $that = $(this);

			if($(this).closest('li').hasClass('active')){
				$that.closest('div').find('.dropdown-menu').dropdown('toggle');
				return;
			}

			var action_type = $that.data('field'), action_value = $that.attr('value');
			var ticket_id = $that.closest('ul').data('ticket-id'); 
			var url = '/core/api/tickets', message = '';
			var json = {};
			var assignee_changed = false;

			switch(action_type){

				case 'status':

					url += "/" + ticket_id + "/activity/change-status";
					json = {status: action_value, id: ticket_id};

			        message = 'Status has been updated to ' + action_value.toLowerCase();
					break;
				case 'priority':

					url += "/" + ticket_id + "/activity/change-priority";
					json = {priority: action_value, id: ticket_id};

					message = 'Priority has been updated to ' + action_value.toLowerCase();
					break;
				case 'assignee':
				{	
					assignee_changed = true;
					
					var group_id = $that.data('group-id');
					json = {id: ticket_id};

					url += "/" + ticket_id + "/assign-ticket/" + group_id + "/" + action_value;

					if(action_value == 0){
						message = 'Ticket group has been changed to ' + $that.data('name');
					}
					else{
						message = 'Assignee has been changed to ' + $that.data('name');
			        }

			        action_value = $that.data('name');
			    }
			}

			Tickets.updateModel(url, json, function(data){

				var modelData = data.toJSON();

				Ticket_Utils.showNoty('information', message, 'bottomRight', 5000);

				$that.closest('tr').find('a.' + action_type).html(action_value);
				$that.closest('div').find('.dropdown-menu').dropdown('toggle');

				if(action_type == 'priority'){
					if(action_value == 'HIGH')
						$('td#'+ticket_id).addClass('b-l b-l-3x high-priority');
					else
						$('td#'+ticket_id).removeClass('b-l b-l-3x high-priority');
				}

				//Clearing selections
				$that.closest('div').removeClass('bg-light');
				$that.closest('div').find('.caret-btn').removeClass('inline-block').addClass('display-none');

				// Get data from collection with id
				var ticket_model = App_Ticket_Module.ticketsCollection.collection.get(ticket_id);

				if(assignee_changed)
					ticket_model.unset('assigneeID', {silent: true});

				//Update data in model
				ticket_model.set(modelData, {silent: true});
			});
		});

		/**
		 * Initializing click event on ticket checkboxes
		 */
		$('.tickets-collection', el).off('change'); 
		$('.tickets-collection', el).on('change', "input.ticket-checkbox", function(e){
			e.stopPropagation();
			e.preventDefault();

			Ticket_Bulk_Ops.addOrRemoveTicketID(this);
			Ticket_Bulk_Ops.showText();
		});

		/**
		 * Initializing click event on each ticket list item
		 */
		$('.tickets-collection', el).off('click');
		$('.tickets-collection', el).on('click', 'tr > td.open-ticket', function(e){

			//Remove popovers when opening a ticket
			if(Tickets.isSingleRowView())
				$('div.ticket-last-notes').remove();
			else
				$('.ticket-last-notes').css('display', 'none').css('top', top);

			var url = '#tickets/filter/' + Ticket_Filter_ID + '/ticket/';

			Ticket_Position = $(window).scrollTop();

			Backbone.history.navigate(url + $(this).closest('tr').find('td.data').data('id'), {trigger : true});
		});

		/*
		 * Hover event on ticket subject for multiline ticket collection view
		 */
		$(el).off('mouseover mouseout');
		$(el)
			.on('mouseover mouseout', 'td.show-notes',
				function(event) {

					clearTimeout(popoverFunction);

					var top = '60px';
					if (event.type == 'mouseover'){

						var $tr = $(this).closest('tr'), $that = $tr.find('td.notes-container');

						popoverFunction = setTimeout(function(){

							if(Current_Ticket_ID || Current_Route.indexOf('ticket') == -1)
								return;

							var popup_height = $that.find('#ticket-last-notes').height();

							if (window.innerHeight - ($tr.offset().top - $(window).scrollTop()) <= (popup_height + 100))
								top = '-' + popup_height + 'px'

							$that.find('#ticket-last-notes').css('top', top).css('left','0').css('display', 'block');

						},600);
					} else {
						$('.ticket-last-notes').css('display', 'none').css('top', top);
					}
				}
			);

		/*
		 * Hover event on ticket subject single line ticket collection view
		 */
		$(el)
			.on('mouseover mouseout', 'tbody.ticket-single-row-model-list > tr',
				function(event) {

					clearTimeout(popoverFunction);
					
					    
					if (event.type == 'mouseover'){

						var $that = $(this);
						
						popoverFunction = setTimeout(function(){

							var ticketID = $that.find('td.data').data('id');
							var ticketJSON = App_Ticket_Module.ticketsCollection.collection.get(ticketID).toJSON();

							getTemplate("ticket-single-row-popup", ticketJSON, undefined, function(template_ui){

                               
                               
                            	  if(!template_ui)
							  		return;

								$('body').append($(template_ui));
								
								         
								if(Current_Ticket_ID || Current_Route.indexOf('ticket') == -1)
									return;

								//Get closest div with row class to set left alignment. Table row left doesn't work as table have scrolling.
								var $closest_div = $that.closest('div.row');
								var top = 0, left = $closest_div.offset().left + 70 + 'px';

								if (window.innerHeight - ($that.offset().top - $(window).scrollTop()) >= 250)
									top = $that.offset().top + 35 + 'px';
								else
									top = $that.offset().top - $('#ticket-last-notes').height() + 'px';
                                
                                Ticket_Utils.loadTimeAgoPlugin(function(){
					        	     var x = $("time","#ticket-last-notes").timeago();
					        	 });
								 
                                
								$('#ticket-last-notes').css('top', top).css('left', left).css('display', 'block');
							});
						},600);
						
					}else{
						$('div.ticket-last-notes').remove();
					}
			});

		//Initialization click event on inline dropdown to change assingee, status or priority
		$('.show-caret').off('click');
		$(el).on('click', '.show-caret', function(e){
			e.preventDefault();
			e.stopPropagation();

			$(this).find('.dropdown-menu').dropdown('toggle');
			$(this).addClass('bg-light open');
			$(this).find('.caret-btn').addClass('inline-block');
		});

		//Initialization click event on refresh button
		$('.tickets-toolbar').off('click');
		$('.tickets-toolbar').on('click', '.refresh-tickets', function(e){
			e.preventDefault();

			App_Ticket_Module.ticketsByFilter(Ticket_Filter_ID);
			
			//Fetch ticket collection count
			Tickets_Count.fetchFilterTicketsCount();
			
			Ticket_Bulk_Ops.clearSelection();
		});

		//Initialization click event on toggle custom filters btn
		$('.tickets-toolbar').on('click', '.toggle-custom-filters', function(e){
			e.preventDefault();

			var $container = $('div#custom-filters-container').closest('div.col');

			if(_agile_get_prefs('hide_ticket_lhs_filter')){

				_agile_delete_prefs('hide_ticket_lhs_filter');
				$(this).find('i').attr('data-original-title', 'Hide Filters').css(
					'opacity', 1);

			}else{
				_agile_set_prefs('hide_ticket_lhs_filter', true);
				$(this).find('i').attr('data-original-title', 'Show Filters').css(
					'opacity', 0.7);
			}

			$container.toggle('slow');
		});

		//Initialization click event on sort filters
		$('.tickets-toolbar').on('click', 'a.sort-field', function(e){
			e.preventDefault();

			if($(this).data('sort-key') == Sort_Field)
				return;

			Sort_Field = $(this).data('sort-key');

			$('.sort-field-check').addClass('display-none');
			$(this).find('i').removeClass('display-none');

			$('.sort-field-txt').html($(this).text());

			App_Ticket_Module.ticketsByFilter(Ticket_Filter_ID);
		});

		//Initialization click event on sort by filter
		$('.tickets-toolbar').on('click', 'a.sort-by', function(e){
			e.preventDefault();

			if($(this).data('sort-key') == Sort_By)
				return;

			Sort_By = $(this).data('sort-by');

			$('.sort-by-check').addClass('display-none');
			$(this).find('i').removeClass('display-none');

			App_Ticket_Module.ticketsByFilter(Ticket_Filter_ID);
		});

		/**
		 * Initializing click event on toggle view button
		 */
		$(el).off('click mouseover mouseout', ".toggle-collection-view");
		$(el).on('click', ".toggle-collection-view", function(e){
			e.preventDefault();

			//Toggle view types
			var view_type = Tickets.isSingleRowView() ? 'MULTILINE' : 'SINGLELINE', $that = $(this);

			//Updating user preferences
			$.post("/core/api/users/helpdesk-settings/toggle-view?view_type=" + view_type, {}, function(){

				CURRENT_DOMAIN_USER.helpdeskSettings.ticket_view_type = view_type;

				App_Ticket_Module.ticketsCollection.options.templateKey = Tickets.isSingleRowView() ? 'ticket-single-row' : 'ticket';

				App_Ticket_Module.ticketsCollection.render(true);

				if(view_type == 'SINGLELINE')
					$('ul.choose-columns').closest('div').addClass('open');
			});
		});

		/**
		 * Initializing hover event on toggle view button
		 */
		$(el).on('mouseover mouseout', ".toggle-collection-view.single-line, ul.choose-columns", function(e){
			e.preventDefault();
			
			if (e.type == 'mouseover'){

				$('ul.choose-columns').closest('div').addClass('open');
				return;
			}

			$('ul.choose-columns').closest('div').removeClass('open');
		});

		//Initializing click event on choose columns for single line row view
		$(el).off('click','ul.choose-columns > li > a');
	  	$(el).on('click','ul.choose-columns > li > a', function(event){
	  		event.preventDefault();
	  		event.stopPropagation();

	  		var $target = $(event.currentTarget);
	  		$(event.target).blur();

	  		var $chbx = $target.find('input[type="checkbox"]');
	  		var isChecked = $chbx.is(':checked') ? false : true;
			$chbx.prop('checked', isChecked);

			var field_name = $chbx.attr('name');

			// if(isChecked){
			// 	$('table.single-row').find('th.' + field_name + '').show();
			// 	$('table.single-row').find('td.' + field_name + '').show();
			// }else{
			// 	$('table.single-row').find('th.' + field_name + '').hide();
			// 	$('table.single-row').find('td.' + field_name + '').hide();
			// }

			var selected_columns = $('.choose-column-chbx:checked'), column_names = [];

			for(var i=0; i<selected_columns.length; i++)
				column_names.push($(selected_columns[i]).attr('name'));

			var json = {};
			json.choosed_columns= column_names;

			var baseModel = new BaseModel();
			baseModel.url = '/core/api/users/helpdesk-settings/choose-columns';
			baseModel.save(json, 
			{	success: function(model){
					CURRENT_DOMAIN_USER.helpdeskSettings = model.toJSON();

					//Tickets.renderExistingCollection();

					$(".tickets-collection-pane").html(App_Ticket_Module.ticketsCollection.render(true).el);
					
					Tickets.setCountText();

					//Initialize click event on each ticket li
					Tickets.initEvents(App_Ticket_Module.ticketsCollection.el);
				}
			});

			return false;
	  	});
	},

     


	fillAssigneeAndGroup : function(el){

		//Fetching all groups, assignees and appending them to select dropdown
		fillSelect('ticket-assignee', '/core/api/tickets/groups', '', function(collection){

			Tickets.groupsList = collection.toJSON();
			 	 
		    $('#ticket-assignee', el).html(getTemplate('select-assignee-ticket-dropdown', collection.toJSON()));

			var selectedAssignee = App_Ticket_Module.ticketView.model.toJSON().assigneeID;
			var selectedGroup = App_Ticket_Module.ticketView.model.toJSON().groupID;

			
			if(!selectedAssignee)
				$('#ticket-assignee', el).find("option[group_id='"+selectedGroup+"']").attr('selected', 'selected');
			else{

				var assignee_name_length = $('#ticket-assignee', el).find("option[data-assignee-id='"+selectedAssignee+"']").length;
      		 	 
      		 	if(assignee_name_length == 0)
      		 	    $('#ticket-assignee', el).find("option[value="+"0"+"]").attr('selected', 'selected');
                else
      		 	$('#ticket-assignee', el).find("optgroup[data-group-id='"+selectedGroup+"']").find("option[data-assignee-id='"+selectedAssignee+"']").attr('selected', 'selected');
      		}
			// If current user not 
      		if(selectedAssignee != CURRENT_DOMAIN_USER.id 
      			&& Tickets.isCurrentUserExistInGroup(selectedGroup, Tickets.groupsList))
      			$('.assign-to-me', el).show();
      		else
				$('.assign-to-me', el).hide();

		}, '', false, el);

		// var groupsAssignees = Backbone.Model.extend({urlRoot : '/core/api/tickets/groups'});
		// new groupsAssignees().fetch({success: function(model, response, options){

		// 	Tickets.groupsList = model.toJSON();
		
		// 	var html = '';
			
		// 	$.each(Tickets.groupsList, function(index, data){
		// 		html += "<option value='"+data.id+"'>"+data.group_name+"</option>";
		// 	});

		// 	html += "<option role='separator' disabled>----------------------------------------------------------</option>";
		// 	html += getTemplate('ticket-change-assignee', Tickets.groupsList);

		// 	var selectedAssignee = App_Ticket_Module.ticketView.model.toJSON().assigneeID;
		// 	var selectedGroup = App_Ticket_Module.ticketView.model.toJSON().groupID;

		// 	$('#ticket-assignee', el).html(html);

		// 	if(!selectedAssignee)
		// 		$('#ticket-assignee', el).find("option[value='"+selectedGroup+"']").attr('selected', 'selected');
		// 	else
  //     		 	$('#ticket-assignee', el).find("optgroup[data-group-id='"+selectedGroup+"']").find("option[value='"+selectedAssignee+"']").attr('selected', 'selected');
      		

  //     		 // If current user not 
  //     		if(selectedAssignee != CURRENT_DOMAIN_USER.id && Tickets.isCurrentUserExistInGroup(selectedGroup, Tickets.groupsList))
  //     			$('.assign-to-me', el).show();
  //     		else
		// 		$('.assign-to-me', el).hide();
		// }, error: function(){

		// }});
	},

	// changeAssignee : function(e){

	// 	var that = e.target;

	// 	var assigneeId = $(that).val();
	// 	//console.log(assigneeId);

	// 	if(!assigneeId)
	// 		return;

	//     var groupId = $(that.options[that.selectedIndex]).closest('optgroup').attr('data-group-id');


	 //   if(!groupId){
	   // 	groupId = $(that).val();
	    //	assigneeId = 0;
	    //}

       	
 //       	var ticketJSON = App_Ticket_Module.ticketView.model.toJSON();

       	// if(ticketJSON.assigneeID == assigneeId 
       	// 	&& ticketJSON.groupID == groupId)
       	// 	return;
 //       	if(ticketJSON.assigneeID == assigneeId 
 //       		&& ticketJSON.groupID == groupId)
 //       		return;


 //       	var url = "/core/api/tickets/" + Current_Ticket_ID + "/assign-ticket/" + groupId + "/" + assigneeId;
 //       	var json = {id: Current_Ticket_ID};

 //       	Tickets.updateModel(url, json, function(data){
            
	// 		var modelData = data.toJSON();

	// 		try{
	// 			if(modelData.assigneeID != CURRENT_DOMAIN_USER.id && Tickets.isCurrentUserExistInGroup(groupId, Tickets.groupsList))
	// 			$('.assign-to-me').show();
	// 		else
	// 			$('.assign-to-me').hide();
	// 		}
	// 		catch(e){
	// 			console.log(e);
	// 		}


			// var assigneeName = '';
			// try{
			//  assigneeName = (modelData.assigneeID) ? (modelData.assignee.name) : modelData.group.group_name;
			// }catch(e){}

	// 		var assigneeName = (modelData.assigneeID) ? (modelData.assignee.name) : modelData.group.group_name;


	// 		var message = 'Ticket group has been changed to ' + assigneeName;

		// if(modelData.assigneeID)
		// 		message = 'Assignee has been changed to ' + assigneeName;

	// 		if(modelData.assigneeID)
	// 			var message = 'Assignee has been changed to ' + assigneeName;

			
	// 		Ticket_Utils.showNoty('information', message, 'bottomRight', 5000);

	// 		modelData.assignee = ((modelData.assignee) ? modelData.assignee : "");
	// 		modelData.group = ((modelData.group) ? modelData.group : "");

		// 	// Update assignee in model and collection 
		// 	Tickets.updateDataInModelAndCollection(Current_Ticket_ID, modelData);

		// 	App_Ticket_Module.ticketView.model.set(modelData, {silent: true});				
		// });
  //   },

	// 		// Update assignee in model and collection 
	// 		Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, modelData); 					
	// 	});
 //    },


	isCurrentUserExistInGroup : function(selectedGroupId, groupsList){

		var isExist = false;

		$.each(groupsList, function(index, data){

			$.each(data.group_users, function(index2, userData){

			if(data.id == selectedGroupId && userData.id == CURRENT_DOMAIN_USER.id)
				isExist = true;

			});
			
		});

		return isExist;
	},

	// changeTicketType: function(event){

	// 	var $select = $('.ticket_type');
	// 	var new_ticket_type = $select.find('option:selected').val();
	// 	$select.attr('disabled', true);

	// 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-ticket-type";
	// 	var json = {type: new_ticket_type};

	// 	this.updateModel(url, json, function(){

	// 		// current view
	// 		Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {type : new_ticket_type}); 
	// 			//update collection 
	//    			$select.attr('disabled', false);
	//             Ticket_Utils.showNoty('information', 'Ticket Type has been changed to '+ new_ticket_type.toLowerCase(), 'bottomRight', 5000);
	// 		},

	// 		function(error){
	// 			$select.attr('disabled', false);
	// 		}
	// 	);
	// },

	// changeTicketPriority: function(event){

	// 	var $priority = $('.ticket_priority');
	// 	var new_priority = $priority.find('option:selected').val();
	// 	$priority.attr('disabled', true);

	// 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-priority";
	// 	var json = {priority: new_priority};

	// 	this.updateModel(url, json, function(){

	// 		Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, json);

	// 		$priority.attr('disabled', false);
	// 		Ticket_Utils.showNoty('information', 'Ticket Type has been changed to '+ new_priority.toLowerCase() , 'bottomRight', 5000);
		    

	// 	}, function(error){
	// 		$priority.attr('disabled', false);
	// 	});
	// },

	// updateDataInModelAndCollection : function(id, data){

	//      App_Ticket_Module.ticketView.model.set(data, {silent: true});
	// 	// if(id !== App_Ticket_Module.ticketView.model.toJSON().id)
	// 	// 	return;
 //        if(!App_Ticket_Module.ticketsCollection)
 //        	return;

	// 	// get data from collection with id
	// 	updated_model = App_Ticket_Module.ticketsCollection.collection.get(id);
		
	// 	// Update data in model
	// 	updated_model.set(data, {silent: true});
	// },

	// 	}, function(error){
	// 		$priority.attr('disabled', false);
	// 	});
	// },

	// updateDataInModelAndCollection : function(id, data){

	//      App_Ticket_Module.ticketView.model.set(data, {silent: true});
	// 	// if(id !== App_Ticket_Module.ticketView.model.toJSON().id)
	// 	// 	return;
 //        if(!App_Ticket_Module.ticketsCollection)
 //        return;
	// 	// get data from collection with id
	// 	updated_model = App_Ticket_Module.ticketsCollection.collection.get(id);
	// 	// Update data in model
	// 	updated_model.set(data, {silent: true});
	// },


	updateModel: function(url, json, success_cbk, err_cbk){

		var newTicketModel = new BaseModel();
		newTicketModel.url = url;
		
		if(!json.id)
			json.id = Current_Ticket_ID;

		newTicketModel.save(json, {
			success: function(model){

			if(App_Ticket_Module.ticketView)
				App_Ticket_Module.ticketView.model.set(model, {silent: true});

			if(success_cbk)
				success_cbk(model);

			}, error: function(){

				if(err_cbk)
					err_cbk(model);
			}}
		);
	},

	toEmails: function(){

		$('.to-emails').hide();

		$('.ticket-email').show(function(){
			$('#cc_emails').focus();
		});
	},

	hideDropDowns: function(ev){

		if(!Current_Ticket_ID)
			return;

		if($(ev.target).closest('div.ticket-details-dropdown').length > 0 
				|| $(ev.target).hasClass('ticket-details-value'))
			return;

		//Hiding dropdowns
		$('.ticket-details-dropdown').hide();
		$('.ticket-details-value').show();
	},

	//Activate enter click event listener and focus out events on CC email field
	initCCEmailsListeners: function(el){

		$(el).on('keypress', '#cc_email_field', function(e){
			Tickets.ccEmailsList(e);
		});

		//$(el).on('focusout', '#cc_email_field', function(e){
			//e.stopImmediatePropagation();
			//Tickets.ccEmailsList(e, true);
		//});
	},

	//Appends email as list item in cc emails list
	ccEmailsList: function(e, force_allow){

		e.stopImmediatePropagation();

		if(e.which == 13 || force_allow) {

			var email = $('#cc_email_field').val();

        	if(!email)
        		return;
        	
        	var err_email = !Tickets.isValidEmail(email);

        	//$('ul.cc-emails').prepend(getTemplate('cc-email-li', {email: email, err_email: err_email}));
        	$('#cc_email_field').val('');

        	// Save cc emails to the
        	if(!err_email)
        	  Tickets.updateCCEmails(email, 'add');
    	}
	},

	addMeToCC: function(){

		var email = CURRENT_DOMAIN_USER.email;
		//$('ul.cc-emails').prepend(getTemplate('cc-email-li', {email: email}));
		$('#cc_email_field').val('');
		Tickets.updateCCEmails(email, 'add');
		$('.add-me-to-cc').hide();
	},

	removeCCEmails: function(e){

		Tickets.updateCCEmails($(e.target).closest('li').attr('data'), 'remove', function(model){

			var email = CURRENT_DOMAIN_USER.email;
			
			var updated_cc_emails = (model) ? model.toJSON().cc_emails : [];

			if(!updated_cc_emails || updated_cc_emails.length == 0 || $.inArray(email, updated_cc_emails) == -1)
				$('.add-me-to-cc').show();

		});

		$(e.target).closest('li').remove();
	},

	updateCCEmails : function(email, command, callback){

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/update-cc-emails";
		var json = {command: command, email: email, id: Current_Ticket_ID};

		this.updateModel(url, json, function(model){

			Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, json);

			var msg = (command == 'remove') ? email + ' removed from CC emails' : email + ' added to CC emails';
                
            if(command != 'remove')
            $('ul.cc-emails').prepend(getTemplate('cc-email-li', {email: email}));

			Ticket_Utils.showNoty('information', msg, 'bottomRight', 5000);
            if(callback)
            	callback(model);

		});
	},

	//Return true if provided email is valid
	isValidEmail : function(email) {

		// Email Regex pattern
		var emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,9}$/;

		if (!emailPattern.test(email))
				return false;

		return true;
	},

	getCCEmailsList: function(form_id){

		return $('#' + form_id + ' [name="cc_emails"]').map(function() {

        	var f = [];
        	$.each($(this).children(), function(g, h) {

        			if($(h).attr("data"))
            			f.push(($(h).attr("data")).toString())
	        	}
	        );

	        return {
	            name: 'cc_emails',
	            value: f
	        }

	    }).get();
	},

	ticket_detail_view_navigation : function(id, el){

			var ticket_list_view = App_Ticket_Module.ticketsCollection;
			if(!ticket_list_view)
				return;

			var ticket_collection = ticket_list_view.collection;

			var collection_length = ticket_collection.length;

		    var current_index = ticket_collection.indexOf(ticket_collection.get(id));

		    var previous_ticket_id;
		    var next_ticket_id;

		    //fetch next set so that next link will work further.
		    if(collection_length <= current_index+5) {
		    	App_Ticket_Module.ticketsCollection.infiniScroll.fetchNext();
		    }
		    if (collection_length > 1 && current_index < collection_length && ticket_collection.at(current_index + 1) && ticket_collection.at(current_index + 1).has("id")) {
		     	next_ticket_id = ticket_collection.at(current_index + 1).id
		    }

		    if (collection_length > 0 && current_index != 0 && ticket_collection.at(current_index - 1) && ticket_collection.at(current_index - 1).has("id")) {
		    	previous_ticket_id = ticket_collection.at(current_index - 1).id
		    }

		    if(previous_ticket_id != null)
		    	$('.navigation .previous-ticket', el).attr("href", "#tickets/filter/"+Ticket_Filter_ID+"/ticket/"+previous_ticket_id);
		    else
		    	$('.navigation .previous-ticket', el).replaceWith("<span class='pull-left text-disabled text-xs'><i class='icon icon-chevron-left v-middle'></i></span>");

		    if(next_ticket_id != null)
		    	$('.navigation .next-ticket', el).attr("href", "#tickets/filter/"+Ticket_Filter_ID+"/ticket/"+next_ticket_id);
		    else
		    	$('.navigation .next-ticket', el).replaceWith("<span class='pull-right text-disabled text-xs'><i class='icon icon-chevron-right v-middle'></i></span>");
		
	},
	
	// changeStatus : function(status, callback){
    
	// 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-status";
	// 	var json = {status: status};

 //        var current_time = new Date().getTime();
	// 	Tickets.updateModel(url, json, function(model){

	// 			if(status != "CLOSED")
	// 			{
	// 			    $(".ticket-addnote-close").removeAttr("disabled");
	// 			    $(".ticket-send-reply .btn").removeAttr("disabled");
 //                	$('#ticket_change_sla').removeAttr("disabled");                    	
 //                	$(".close-current-ticket").removeAttr("disabled");
 //                	$(".remove-date").css("display", "block");
	// 			}						
	// 			else
	// 			{
	// 				$(".remove-date").css("display", "none");
	// 			    $(".ticket-addnote_close").attr("disabled","disabled"); 
	// 				$(".ticket-send-reply .btn").attr("disabled","disabled");
	// 				$('#ticket_change_sla').attr("disabled","disabled");
	// 				$(".close-current-ticket").attr("disabled","disabled");
	// 				$(".ticket_status").val("CLOSED");

	// 				json.closed_time = current_time;
	// 			}

 //                Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, json);
				
	// 			if(callback)
	// 				callback(model.toJSON());

	// 		}, null);
	// },

	// closeTicket : function(e){

	// 	this.changeStatus("CLOSED", function(){
	// 		Ticket_Utils.showNoty('information', "Ticket status has been changed to closed", 'bottomRight', 5000);
	// 	});
	// },

	// deleteTicket: function(e){

	// 	//Rendering root template
	// 	getTemplate("ticket-delete", {}, undefined, function(template_ui){

	// 		if(!template_ui)
	// 	  		return;

	// 		$('#ticketsModal').html($(template_ui)).modal('show').on('shown.bs.modal', function() {
			    
	// 		    $('#ticketsModal').on('click', 'a.delete-ticket', function(){

	// 				disable_save_button($(this));

	// 				App_Ticket_Module.ticketView.model.destroy({
	// 					success : function(model, response) {
							
	// 						Ticket_Utils.showNoty('information', "Ticket has been deleted",'bottomRight', 5000);
	                          
	// 						var url = '#tickets/filter/' + Ticket_Filter_ID;
	// 						Backbone.history.navigate(url, {trigger : true});
	// 					}
	// 				});

	// 				$('#ticketsModal').modal('hide');
	// 			});
	// 		});
	// 	});
	// },

	// showWorkflows: function(e){

	// 	var $this = $(e.target);

	// 	$this.siblings("#workflows_list").html('<li><a href="javascript:void(0);">Loading...</a></li>');

	// 	var workflows = Backbone.Collection.extend({
	// 		url : 'core/api/workflows'
	// 	});

	// 	new workflows().fetch({
	// 		success : function(Collection) {
	// 			$('#workflows_list').html(getTemplate("ticket-show-workflows-list", Collection.toJSON()));
	// 		}
	// 	});
	// },

	loadWidgets: function(){

		var widgetState = _agile_get_prefs("hide_ticket_details_widgets");
		if(widgetState && widgetState == "true")
			return;

		var model_coun = 0;

		var ticketModel = App_Ticket_Module.ticketView.model.toJSON();

		//Loading widgets
		if(ticketModel && ticketModel.contactID){
			/*var contactDetails = Backbone.Model.extend({urlRoot : '/core/api/contacts/' + ticketModel.contactID});
			new contactDetails().fetch({success: function(contact, response, options){
				}, error: function(){}
			});*/
			App_Contacts.contactDetailView = new Base_Model_View({ 
				isNew : false,
				url: '/core/api/contacts/' + ticketModel.contactID,
				template : "contact-detail",
				postRenderCallback : function(el, contact)
				{	
					model_coun++;

					if(model_coun > 1)
						return;

					clearContactWidetQueues(ticketModel.contactID);

					//loadWidgets(App_Contacts.contactDetailView.el, contact, "widgets");
					loadWidgets(App_Ticket_Module.ticketView.el, contact);
				}
			});

			//App_Contacts.contactDetailView.render(true).el;
		}
	},

	isSingleRowView: function(){
		return (CURRENT_DOMAIN_USER.helpdeskSettings && CURRENT_DOMAIN_USER.helpdeskSettings.ticket_view_type == 'SINGLELINE')
								 ? true : false;
	},

	// toggleFavorite : function(e){

	// 	var favourite = true; 

	// 	//Toggling star color
	// 	if($(e.target).hasClass("fa-star text-warning")){
	// 		$(e.target).removeClass("fa-star text-warning").addClass("fa-star-o text-light");
	// 	     favourite=false;
	// 	}else{
		   
	// 		$(e.target).addClass("fa-star text-warning").removeClass("fa-star-o text-light");
	// 	}

	// 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/toggle-favorite";
	// 	var json = {};

	// 	Tickets.updateModel(url, json, function(model){

	// 		var succesmessage = "Ticket marked favourite";

	// 		if(!favourite)
	// 			succesmessage = "Ticket marked as unfavourite";

 //             Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {is_favorite:favourite});

	// 		 Ticket_Utils.showNoty('information', succesmessage, 'bottomRight', 5000);
	// 	}, null);
	// },

	// toggleSpam : function(e){

	// 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/toggle-spam";
	// 	var json = {};

	// 	Tickets.updateModel(url, json, function(model){

	// 		var message ="";
	// 		var spam_value=true;

	// 		if(model.toJSON().is_spam)
	// 		{
	// 			$(e.target).addClass("btn-danger").removeClass("btn-default");
	// 		    message="Ticket marked as Spam"; 
	// 		}
	// 		else
	// 		{
	// 			$(e.target).removeClass("btn-danger").addClass("btn-default");
 //                message="Ticket un marked as Spam";
 //                spam_value=false;
 //            }

 //            Ticket_Utils.showNoty('information',message, 'bottomRight', 5000);
			
	// 		Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, {is_spam:spam_value});

	// 	}, null);
	// },

	toggleWidgets : function(e){

		$('.contact-right-widgetsview').toggle('slow', function(){

			var widgetStatus = true;
			if($('.contact-right-widgetsview').is(':visible'))
				widgetStatus = false;

			_agile_set_prefs('hide_ticket_details_widgets', widgetStatus);

			if($(e.target).hasClass('fa-dedent'))
			$(e.target).addClass('fa-indent').removeClass('fa-dedent');
			else
			$(e.target).addClass('fa-dedent').removeClass('fa-indent');

			if(widgetStatus == false && $("#widgets-model-list").length == 0)
				Tickets.loadWidgets();

		});
	},

	setMinHeight: function(){

		var $row = $('.ticket-collection-row');

		if($row && $row.offset() && $row.offset().top)
			$row.css('min-height', window.innerHeight - $row.offset().top + 'px');
	},

	updateDueDate : function(timeInMilli, el, callback ){
        
        var currentTicketJSON = App_Ticket_Module.ticketView.model.toJSON();
		var date = new Date();
		
		if(Math.floor(currentTicketJSON.due_time/1000) == Math.floor(timeInMilli/1000))   
			return;
		
		if(timeInMilli < date.getTime()){

			var dueDate = null;

			if(currentTicketJSON.due_time)
			   dueDate = new Date(currentTicketJSON.due_time);

			getTemplate("ticket-sla-error", {}, undefined, function(template_ui){

				if(!template_ui)
			  		return;

			  	$('#ticket_change_sla', el).datepicker( "hide" );


			  	if(dueDate){
			  		$('#ticket_change_sla').val(new Date(dueDate).format('mm/dd/yyyy'));
			        $('.ticket_change_slatime').val(new Date(dueDate).format('HH:MM'));
                }
			  	else{
			  		$('#ticket_change_sla').val('');
                    $('.ticket_change_slatime').val('');
			  	}

			  	$('#ticketsModal').html($(template_ui)).modal('show');
			});

        	return;
		}
	
		var due_date_present = currentTicketJSON.due_time ? true : false;

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/change-due-date";
	  	var json = {due_time: Math.floor(timeInMilli)};

	  	Tickets.updateModel(url, json, function(model){

			var formatted_date = new Date(timeInMilli).format('mmm dd, yyyy HH:MM');

			App_Ticket_Module.ticketView.model.set(json,{silent:true});

			Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID, json);

			$(".remove-date").css("display", "block");

			var msg = (due_date_present) ? ("Due date has been changed to " + formatted_date) 
						: ("Due date has been set to " + formatted_date);

			Ticket_Utils.showNoty('information', msg, 'bottomRight', 5000);

			if(callback)
				callback();

		}, null);
	},

	// removeDuedate : function(){

	// 	var url = "/core/api/tickets/" + Current_Ticket_ID + "/activity/remove-due-date";
	// 	var json = {};

	// 	Tickets.updateModel(url, json, function(model){

 //    		$('#ticket_change_sla').val(''); 

 //    		$(".remove-date").css("display", "none");

	// 		Tickets_Rest.updateDataInModelAndCollection(Current_Ticket_ID,{due_time:''});

	// 		Ticket_Utils.showNoty('information', "Due date has been removed",'bottomRight', 5000);

	// 	}, null);
	// },

	initializeTicketSLA : function(el){
		
		var ticket = App_Ticket_Module.ticketView.model.toJSON();

		head.load(LIB_PATH + 'lib/date-charts.js', function()
		{
			$('#ticket_change_sla', el).datepicker({ 
				drops: "down", 
				dateFormat : CURRENT_USER_PREFS.dateFormat
			}).on('changeDate', function(ev)
			{
				//to get the time value 
				var selected_date = $('#ticket_change_sla', el).val();
                var selected_date_epoch_time = Date.parse(selected_date).getTime();
				
				var selected_hours = $('.ticket_change_slatime', el).val(); 

				if(selected_hours){
					var selected_time = selected_hours.split(':');

					if(!selected_time[0] && !selected_time[1])
					{
						//Add 86399000 milli secs to convert due date to end of day
						selected_date_epoch_time += 86399000
					}
					else{

						var hours = parseInt(selected_time[0]);
	                	var minutes = parseInt(selected_time[1]);

						selected_date_epoch_time = Date.parse(selected_date).getTime() + 
													(hours * 3600 * 1000) + (minutes * 60 * 1000);                  
					}
                }else{
                	
                	//Add 86399000 milli secs to convert due date to end of day
					selected_date_epoch_time += 86399000
                }
				
				//Show alert if selected date is less than today start time
				Tickets.updateDueDate(selected_date_epoch_time,el, function(){
					$('#ticket_change_sla', el).datepicker("hide");
					$('#ticket_change_sla', el).blur();

					var date = new Date(selected_date_epoch_time);

					//Set time in time picker
					$('.ticket_change_slatime', el).timepicker('setTime', date.format('HH:MM'));
				});
			});
		});

		//Initializing click event on due date button
	  	$(el).on('click','.choose-due-date', function(event){
         
         	var currentTicketJSON = App_Ticket_Module.ticketView.model.toJSON();

	  		if(currentTicketJSON.status == "CLOSED")
	  			return;
	  		
	  		console.log('Ticket status: ' + currentTicketJSON.status);

	  		var value = $(this).data('value'), current_date = new Date();
            
            current_date.setHours(0);
            current_date.setMinutes(0);
            current_date.setSeconds(0);

	  		switch(value){
	  			case 'tomorrow':
	  				current_date.setDate(current_date.getDate() + 1);
	  				break;
	  			case 'next_two_days':
	  				current_date.setDate(current_date.getDate() + 2);
	  				break;
	  			case 'next_three_days':
	  				current_date.setDate(current_date.getDate() + 3);
	  				break;
	  			case 'next_five_days':
	  				current_date.setDate(current_date.getDate() + 5);
	  				break;
	  		}

            //Get the epoch time
	  		var new_due_date = current_date.getTime();

            var selected_hours = $('.ticket_change_slatime', el).val(); 

            if(selected_hours){
				var selected_time = selected_hours.split(':');

				if(!selected_time[0] && !selected_time[1])
				{
					//Add 86399000 milli secs to convert due date to end of day
					new_due_date += 86399000
				}
				else{

					var hours = parseInt(selected_time[0]);
                	var minutes = parseInt(selected_time[1]);

					new_due_date = Date.parse(current_date).getTime() + 
												(hours * 3600 * 1000) + (minutes * 60 * 1000);                  
				}
            }else{
            	
            	//Add 86399000 milli secs to convert due date to end of day
				new_due_date += 86399000
            }

            //Set date
	  		$('#ticket_change_sla', el).val(new Date(new_due_date).format(CURRENT_USER_PREFS.dateFormat));
            
            //Set hours and minutes
	        $('.ticket_change_slatime', el).timepicker('setTime', new Date(new_due_date).format('HH:MM'));

	  		Tickets.updateDueDate(new_due_date);
		});
	},

	// removeTicketsFromCollection: function(ticketIDCSV){

	// 	var ticketIDArray = ticketIDCSV.split(",");

	// 	if(!ticketIDArray || ticketIDArray.length ==0)
	// 		return;

	// 	for(var i=0; i<ticketIDArray.length; i++){
	// 		$('td#' + ticketIDArray[i]).closest('tr').remove();
	// 		App_Ticket_Module.ticketsCollection.collection.remove(ticketIDArray[i]);
	// 	}
	// },

	showPreviousTicketCount: function(email, el){

		$.get('/core/api/tickets/' + email + '/count', {}, function(count){

			if(count && count > 1){ 
					$(".previous-tickets-panel", el).find("#count").html("(" + (count - 1) + ")");
					$(".previous-tickets-panel", el).show();
				}
		});

	},

	togglePreviousTickets: function(email){

		if($("#previous_tickets_container").is(':visible')){
			$("#previous_tickets_container").toggle();
			$("#toggle_previous_tickets").addClass("fa-plus").removeClass("fa-minus");
			return;
		}

		$("#previous_tickets_container").toggle();
		$("#toggle_previous_tickets").removeClass("fa-plus").addClass("fa-minus");

		// If collection loaded
		if($("#previous_tickets_container").find(".each-previous-ticket").length > 0)
			return;
			
		var previousTickets = Backbone.Model.extend({
			url : '/core/api/tickets/email/' + email
		});
		new previousTickets().fetch({
			success : function(tickets) {

				if(tickets.toJSON().length > 1){
					$(".previous-tickets-panel").hide();
					return;
				}

				$("#previous_tickets_container").html(getTemplate('previous-tickets-list', tickets.toJSON())).show();

				Tickets.initPreviousTicketEvents($("#previous_tickets_container"));

			}
		});

	},

	initPreviousTicketEvents: function(el){

		$(el).off('mouseover mouseout');
		$(el)
			.on('mouseover mouseout', '.show-notes',
				function(event) {

					clearTimeout(popoverFunction);

					var top = '20px';
					if (event.type == 'mouseover'){

						var $tr = $(this).closest('.each-previous-ticket'), $that = $tr.find('#ticket-last-notes');

						popoverFunction = setTimeout(function(){

							var popup_height = $that.height();

							if (window.innerHeight - ($tr.offset().top - $(window).scrollTop()) <= (popup_height + 100))
								top = '-' + (popup_height + 20) + 'px';

							$that.css('top', top).css('left','25px').css('display', 'block');

						},600);
					} else {
						$('.ticket-last-notes').css('display', 'none').css('top', top);
					}
				}
			);

	},

	toggleActivitiesUI :  function(type){

		var targetEle = $(".toggle-activities-notes");
		var currentType = targetEle.attr("rel");

		if(type && type == "hide"){
			targetEle.attr("rel", "activities");
			targetEle.attr("data-original-title", "Hide Activities");
			targetEle.html("<i class='fa fa-ellipsis-v'></i>");
		}
		else{
			//Rendering ticket notes
			targetEle.attr("rel", "notes");
			targetEle.attr("data-original-title", "Show Activities");
			targetEle.html("<i class='fa fa-ellipsis-h'></i>");
		}

	},

	updateIframeHeight : function(iframe){

		$(iframe).height($(iframe).contents().height());

		$(iframe).contents().find('body').css({
		    'font-family': '"Source Sans Pro","Helvetica Neue",Helvetica,Arial,sans-serif',
		    'font-size': '14px',
		    '-webkit-font-smoothing': 'antialiased',
		    'line-height': '1.42857143',
		    'color': '#58666e',
		    'background-color': 'transparent',
		    'margin': '0',
		    'padding': '0'
		});
	},

	message_draft_timer : undefined,

	// Draft typed message
	start_ticket_draft_timer : function(key, ele){

        // Reset timer
		if (Tickets.message_draft_timer)
			clearInterval(Tickets.message_draft_timer);

		if (!ele  || $(ele).hasClass("forward") 
			||$(ele).hasClass('create_ticket_textarea'))
	    	return;

		Tickets.message_draft_timer = setInterval(function() {

			var $ele = $(ele);

			if(!$ele || $ele.length == 0){
				clearInterval(Tickets.message_draft_timer);
				return;
			}

			Tickets.draft_typed_message(key, Tickets.get_typed_message_json($ele));

		}, 2000);

	},

	get_typed_message_json : function($ele){

		var value = $ele.val();

		if($ele.hasClass('forward'))
			return {"forward" : value};
		else if($ele.hasClass('comment'))
			return {"comment" : value};
		else
			return {"reply" : value};
	},

	draft_typed_message :  function(key, ticketDraftJSON) {

		if(!key || !ticketDraftJSON)
			return;

		var draft_mssgs = Tickets.get_draft_message();
		var value = draft_mssgs[key];
		if(!value)
			value = {};

		for (typeKey in ticketDraftJSON) {
			value[typeKey] = ticketDraftJSON[typeKey];
		}

		draft_mssgs[key] = value;

	 	try {
	 		// Add to localstorage
			sessionStorage.setItem("ticket-draft-message", JSON.stringify(draft_mssgs));
	    } catch (e) {

	    	draft_mssgs = {
	    		key:value
	    	}
	    	sessionStorage.setItem("ticket-draft-message", JSON.stringify(draft_mssgs));
	    }

	},

	get_draft_message : function(key){

		var draft_mssgs = sessionStorage.getItem("ticket-draft-message");
		if (!draft_mssgs)
			return {};

		// Parse stringify values
		return JSON.parse(draft_mssgs);
	
	},

	remove_draft_message : function(key, type){

		var draft_mssgs = Tickets.get_draft_message();

		var ticketDraft = draft_mssgs[key];

		// Delete message key
		delete ticketDraft[type];

		draft_mssgs[key] = ticketDraft;
		sessionStorage.setItem("ticket-draft-message", JSON.stringify(draft_mssgs));
	},

	//Written only for new ticket form
	initNewTicketTypeahead: function(el){

		//Fetching all groups, assignees and appending them to select dropdown
		fillSelect('groupID', '/core/api/tickets/new-ticket', '', function(collection){
			$('#groupID').html(getTemplate('select-assignee-dropdown', collection.toJSON()));
		}, '', false, el);

		//Initializing type ahead for labels
		Ticket_Labels.showSelectedLabels(new Array(), $(el));

		//Initializing type ahead for cc emails
		agile_type_ahead("cc_email_field", el, Tickets_Typeahead.contact_typeahead, function(arg1, arg2){

			//Upon selection of any contact in cc field, this callback will be executed
			arg2 = arg2.split(" ").join("");

			var email = TYPEHEAD_EMAILS[arg2 + '-' + arg1];

			if(!email || email == 'No email')
				return;

			//Appending cc email template
			$('ul.cc-emails').prepend(getTemplate('cc-email-li', {email: email, new_ticket: true}));

			$('#cc_email_field').val('');

	  	},undefined, undefined, 'core/api/search/');

  		//Initializing type ahead on email field
		agile_type_ahead("requester_email", el, Tickets_Typeahead.contact_typeahead, function(arg1, arg2){

			var requester_name = arg2;

			arg2 = arg2.split(" ").join("");
			var email = TYPEHEAD_EMAILS[arg2 + '-' + arg1];

			//Showing error if the selected contact doesn't have email
			if(!email || email == 'No email'){
				var $span = $('.form-action-error');

				$span.html('No email address found.');

				setTimeout(function(){
					$span.html('');
				}, 4000);
			}else{
				setTimeout(function(){

					$('#requester_email', el).val(email);
					$('#requester_name', el).val(requester_name);
					$('#contact_id', el).val(arg1);
				}, 0);
			}

		},undefined, undefined, 'core/api/search/');

		$('div#ticketsModal').on('click', 'a.close', function(e){
			$(e.target).closest('li').remove();
		});
	},

	initializeTicketSLAinHours : function(el){

		var TicketJSON = App_Ticket_Module.ticketView.model.toJSON();
		var dueDate = TicketJSON.due_time; 
        var hours, minutes;
		
		//Initializing timepicker with default date
        $('.ticket_change_slatime', el).timepicker({showMeridian: false, defaultTime: false});

        if(dueDate){

        	var date = new Date(dueDate);

	        //set time
	        $('.ticket_change_slatime', el).timepicker('setTime', date.format('HH:MM'));
	    }

        //Binding change event on time picker
        $('.ticket_change_slatime',el).timepicker().on('hide.timepicker', function(e) {
			
			console.log(e.time)

			var TicketJSON = App_Ticket_Module.ticketView.model.toJSON();

	 		var dueDate = TicketJSON.due_time;
	 		console.log(dueDate);

			if(e.time.hours == 0 && e.time.minutes == 0 && !dueDate){

				$('.ticket_change_slatime',el).val('');
				return;
			}

			var currentDate = new Date();

		   	if(dueDate){
		    	currentDate = new Date(dueDate);	
		        //$('#ticket_change_sla',el).val(dueDateModifi.format('mm/dd/yyyy'));
		    }
			
			currentDate.setHours(0);
			currentDate.setMinutes(0);
			currentDate.setSeconds(0);

			var due_date = currentDate.getTime() + (e.time.hours * 3600 * 1000) 
							+ (e.time.minutes * 60 * 1000);

	        Tickets.updateDueDate(due_date, el, function(){

	        	//Set date in date picker field
	        	$('#ticket_change_sla', el).val(new Date(due_date).format(CURRENT_USER_PREFS.dateFormat));
	        	
	        	//Set hours and minutes
	        	$('.ticket_change_slatime', el).timepicker('setTime', new Date(due_date).format('HH:MM'));
	        });
    	});	
    }
};

// fdue_dateu;nction tickets_typeahead(data){

// 	if (data == null)
// 		return;

// 	// To store contact names list
// 	var contact_names_list = [];

// 	/*
// 	 * Iterates through all the contacts and get name property
// 	 */
// 	$.each(data, function(index, contact)
// 	{
// 		var contact_name;

// 		// Appends first and last name to push in to a list
// 		contact_name = getContactName(contact) + "-" + contact.id;

// 		// Spaces are removed from the name, name should be used as a key in map
// 		// "TYPEHEAD_TAGS"
// 		contact_names_list.push(contact_name.split(" ").join(""));
// 	});

// 	// Returns list of contact/company names
// 	return contact_names_list;
// }

// function tickets_cc_emails_typeahead(data){

// 	if (data == null)
// 		return;

// 	// To store contact names list
// 	var contact_names_list = [];

// 	/*
// 	 * Iterates through all the contacts and get name property
// 	 */
// 	$.each(data, function(index, contact)
// 	{
// 		var contact_name;

// 		// Appends first and last name to push in to a list
// 		contact_name = getContactName(contact) + "-" + contact.id;

// 		// Spaces are removed from the name, name should be used as a key in map
// 		// "TYPEHEAD_TAGS"
// 		contact_names_list.push(contact_name.split(" ").join(""));
// 	});

// 	// Returns list of contact/company names
// 	return contact_names_list;
// }
//Ticket_Base_Model let you bind events on dom elements when view is rendered.
var Ticket_Base_Model = Base_Model_View.extend({

	events:{

		//Ticket operations change group, assignee, priority etc
		/*"click .ticket_group_name" : "changeGroup",*/
		"change .ticket_status" : "changeStatus",
		
		"click .ticket_assignee_name" : "changeAssignee",
		"change #ticket-assignee" : "changeAssignee",
		"click .assign-to-me" : "assignToMe",
         "click .remove-date" :"removeTicketDuedate",
		"change .ticket_type" : "changeTicketType",
		"change .ticket_priority" : "changeTicketPriority",
		"click .delete-ticket" : "deleteTicket",
		"click .close-current-ticket" : "closeTicket",
		"click .show-workflows" : "workflows",
		"click #workflows_list li a" : "executeWorkflows",

		"click .toggle-timeline" : "toggleTimeline",
		"click .toggle-activities-notes" : "toggleActivitiesAndNotes",
		
		"click .contact-deals" : "showContactDeals",
		"mouseover .hover-edit" : "showEditIcon",
		"mouseout  .hover-edit" : "hideEditIcon",

		"click .to-emails" : "toEmails",

		//Ticket Filters click events
		"click .clone-filter-ticket-conditions" : "cloneTicketFiltersRow",
		"click .remove-filter-ticket-conditions" : "removeTicketFiltersRow",

		//Ticket tags events
		"click .show-tags-field" : "showTagsField",
		"click .remove-ticket-tags" : "removeTicketTags",

		"click .remove-ticket-cc-emails" : "removeTicketCCEmails",
		"click .add-me-to-cc" : "addMeToCC",

		//New ticket events
		// "click .show_cc_emails_field" : "showCCEmailsField",
		"change .status" : "toggleGroupAssigneeFields",
		"click .nt-reqester_email" : "showContactTypeAhead",
		"click .toggle-options" : "toggleOptions",
		//"click .add-ticket-contact": "toggleAddTicketContact",

		//Attachment events
		"click .toggle-docs-dropdown" : "toggleDocsDropdown",
		"click .add-document" : "addDocument",
		"click .cancel-docs-dropdown" : "cancelDocsDropdown",
		"click .remove-attachment" : "removeAttachment",

		//Ticket notes events
		"click .send-reply" : "sendReply",
		// "click .back-to-tickets" : "backToTickets",
		"click .reply-btn" : "repltBtn",
		"click .discard-reply" : "discardReply",
		"click .timeline" : "renderTicketTimeline",
		"click .canned-messages" : "showCannedMessages",
		// "click .ticket-canned-response" : "appendCannedResponseMessage"

		"click .toggle-favorite" : "toggleFavorite",
		"click .toggle-spam" : "toggleSpam",
		"click .toggle-widgets" : "toggleWidgets",

		//LHS save as button events
		"click [name=\"save-type\"]" : "toggleFields",
		"change [name=\"filter-collection\"]" : "changViewName",

		"click #toggle_previous_tickets" : "togglePreviousTickets"
	},

	changeStatus: function(e){
		e.preventDefault();

		var status = $(e.target).val();

		Tickets_Rest.changeStatus(status);
	},

	changeGroup: function(e){
		e.preventDefault();

		Tickets.changeGroup(e);
	},

	changeAssignee: function(e){
		e.preventDefault();

		Tickets_Rest.changeAssignee(e);
	},

	assignToMe : function(e){

		e.preventDefault();

		var groupId = App_Ticket_Module.ticketView.model.toJSON().groupID;
		var assigneeId = CURRENT_AGILE_USER.domainUser.id;

		var url = "/core/api/tickets/" + Current_Ticket_ID + "/assign-ticket/" + groupId + "/" + assigneeId;
       	var json = {id: Current_Ticket_ID};

       	Tickets.updateModel(url, json, function(model){
        
			Ticket_Utils.showNoty('information', 'Assignee has been changed to ' + CURRENT_AGILE_USER.domainUser.name, 'bottomRight', 5000);

			$('#ticket-assignee option:selected').attr('selected', false);
			
       		$('#ticket-assignee').find("optgroup[data-group-id='" + groupId + "']")
       			.find("option[data-assignee-id='" + assigneeId + "']").prop("selected",true);
          	
          	$('.assign-to-me').hide();
		});
	},

	addMeToCC : function(e){
		e.preventDefault();
		Tickets.addMeToCC();
	},

	changeTicketType: function(e){
		e.preventDefault();

		Tickets_Rest.changeTicketType(e);
	},

	changeTicketPriority: function(e){
		e.preventDefault();

		Tickets_Rest.changeTicketPriority(e);
	},

	toEmails: function(e){
		e.preventDefault();

		Tickets.toEmails();
	},

	cloneTicketFiltersRow: function(e){
		e.preventDefault();

		Ticket_Filters.cloneTicketFiltersRow(e);
	},

	removeTicketFiltersRow: function(e){
		e.preventDefault();

		Ticket_Filters.removeTicketFiltersRow(e);
	},

	showTagsField: function(e){
		e.preventDefault();

		Ticket_Tags.showTagsField();
	},

	removeTicketTags: function(e){
		e.preventDefault();

		Ticket_Tags.removeTag(e);
	},

	removeTicketCCEmails : function(e){
		e.preventDefault();

		Tickets.removeCCEmails(e);
	},
	
	removeTicketDuedate : function(e){
      e.preventDefault();
      Tickets_Rest.removeDuedate(e);
	},


	showCCEmailsField: function(e){
		e.preventDefault();

		$('div.form-group.cc_emails_container').show();
		$('#cc_email_field').focus();
	},

	toggleGroupAssigneeFields: function(e){
		e.preventDefault();

		var disable_selection = ($(e.target).val() == 'OPEN') ? false : true;
		
		$('.grp-assigee').attr('disabled', disable_selection);
	},

	showContactTypeAhead: function(e){
		e.preventDefault();

		$('#reqester_email').hide();
		$('#reqester_email_typeahead').show().val($('#reqester_email').val()).focus();
	},

	toggleOptions: function(e){
		e.preventDefault();

		var $fields = $('.d-nt-show');
		var $icon = $('.toggle-options').find('i');

		if($fields.is(':visible'))
		{
			//hide more fields
			$fields.hide();

			$icon.attr('data-original-title', 'Show fields');

			//change icon to angle down
			$icon.removeClass('fa-angle-double-up').addClass('fa-angle-double-down');

		}else{
			//show more fields
			$fields.show();

			$icon.attr('data-original-title', 'Hide fields');

			//change to angle up icon
			$icon.removeClass('fa-angle-double-down').addClass('fa-angle-double-up');
		}
	},

	sendReply: function(e){
		e.preventDefault();

		Tickets_Notes.sendReply(e);	
	},

	repltBtn: function(e){
		e.preventDefault();

		var $this = $(e.target);
		
		Tickets_Notes.repltBtn($this.attr('rel'));
	},

	/**
	appendCannedResponseMessage : function(e){
		e.preventDefault();
		
		Tickets_Notes.appendCannedResponseMessage(e);
	},
	*/

	discardReply: function(e){
		e.preventDefault();
		
		Tickets_Notes.discardReply(e);	
	},

	toggleTimeline: function(e){

		var tooltip_text = 'Show Timeline';
		if($('.ticket-timeline-container').is(':visible'))
		{
			//Rendering ticket notes
			App_Ticket_Module.renderNotesCollection(Current_Ticket_ID, $('#notes-collection-container', App_Ticket_Module.ticketView.el), function(){});
			Tickets.toggleActivitiesUI("show");
		}
		else{
			Ticket_Timeline.render_individual_ticket_timeline();
			tooltip_text = 'Show Comments';
			Tickets.toggleActivitiesUI("hide");
		}

		$('.toggle-timeline').text(tooltip_text);
	},

	toggleActivitiesAndNotes : function(e){

		var currentType = $(".toggle-activities-notes").attr("rel");

		if(currentType && currentType == "notes"){

			Tickets.toggleActivitiesUI("hide");

			if($('.ticket-timeline-container').length > 0){
				$('.ticket-timeline-container').find(".activity").show();
				return;
			}

			App_Ticket_Module.renderActivitiesCollection(Current_Ticket_ID, $('#notes-collection-container', App_Ticket_Module.ticketView.el), function(){});
					
		}else{

			Tickets.toggleActivitiesUI("show");	

			if($('.ticket-timeline-container').length > 0){
				$('.ticket-timeline-container').find(".activity").hide();
				return;
			}	

			//Rendering ticket notes
			App_Ticket_Module.renderNotesCollection(Current_Ticket_ID, $('#notes-collection-container', App_Ticket_Module.ticketView.el), function(){});
			
		}

	},

	showContactDeals: function(e){
		e.preventDefault();

		var ticketJSON = App_Ticket_Module.ticketView.model.toJSON();
		var contactID = ticketJSON.contact.id;

		if(!contactID)
		{
			$('div#contact-deals').html('No deals');
			return;
		}

		var Deals = Backbone.Collection.extend({
			url: '/core/api/contacts/' + contactID + '/deals'
		});

		new Deals().fetch({success: function(collection){
			$('div#contact-deals').html(getTemplate('ticket-deals-list', collection.toJSON()));
		}});
	},

	renderTicketTimeline: function(e){
		e.preventDefault();

		Ticket_Timeline.render_individual_ticket_timeline();
	},

	showCannedMessages: function(e){
		e.preventDefault();

		Tickets_Notes.showCannedMessages(e);
	},

	toggleFavorite : function(e){
		e.preventDefault();
		
		Tickets_Rest.toggleFavorite(e);
	},

	toggleSpam : function(e){
		e.preventDefault();
		
		Tickets_Rest.toggleSpam(e);
	},

	toggleWidgets : function(e){
		e.preventDefault();
		
		Tickets.toggleWidgets(e);
	},


	deleteTicket: function(e){
		e.preventDefault();
		
		Tickets_Rest.deleteTicket();
	},

	closeTicket : function(e){
		e.preventDefault();
		
		Tickets_Rest.closeTicket();
	},

	workflows: function(e){
		e.preventDefault();
		
		Tickets_Rest.showWorkflows(e);
	},

	executeWorkflows :  function(e){
		e.preventDefault();
		
		Tickets_Notes.executeWorkflow(e);
	},

	showEditIcon: function(e){
		e.preventDefault();
		$(e.target).find('.icon-edit').removeClass('hide');
	},
	
	hideEditIcon: function(e){
		e.preventDefault();
		$(e.target).find('.icon-edit').addClass('hide');
	},

	toggleDocsDropdown: function(e){
		e.preventDefault();

		Ticket_Attachments.toggleDocsDropdown();
	},

	addDocument: function(e){
		e.preventDefault();

		Ticket_Attachments.addDocument();
	},

	cancelDocsDropdown: function(e){
		e.preventDefault();

		Ticket_Attachments.cancelDocsDropdown();
	},

	removeAttachment: function(e){
		e.preventDefault();

		Ticket_Attachments.removeAttachment(e);
	},

	toggleFields: function(e){
		//e.preventDefault();

		Ticket_Custom_Filters.toggleFields();
	},

	changViewName: function(e){
		e.preventDefault();

		Ticket_Custom_Filters.changViewName();
	},

	togglePreviousTickets :  function(e){
		e.preventDefault();

		var ticketJSON = App_Ticket_Module.ticketView.model.toJSON();
		
		Tickets.togglePreviousTickets(ticketJSON.requester_email);
	}

	// toggleAddTicketContact: function(e){
	// 	e.preventDefault();

	// 	$('div.new-contact-row').toggle();
	// 	$('div.search-contact-row').toggle();

	// 	$('#email_input').val($('#requester_email').val());
	// }
});// Contacts on querying
var QUERY_RESULTS;

// Saves map of key: name and value: contact id
var TYPEHEAD_TAGS = {};

// Saves map of key: name and value: contact email
var TYPEHEAD_EMAILS = {};

// Saves map of key: name and value: contact name
var TYPEHEAD_NAMES = {};

var TYPEHEAD_TYPE = {};

// Saves map of key: name and value: related contacts of a deal
var TYPEHEAD_DEAL_RELATED_CONTACTS = {};

/**
 * This script file defines simple search keywords entered in input fields are
 * sent to back end as query through bootstrap typeahead. Methods render,
 * matcher and updater are overridden for custom functionality. Last 2
 * parameters were added later for Companies autofill. They can be left
 * undefined and things will go to default, the way its normally used otherwise
 * throughout the project.
 * 
 * @method agile_type_ahead
 * @param id
 *            Html element id of input field
 * @param el
 *            Html element of the view
 * @param callback
 *            To customer contacts to show in dropdown
 * @param isSearch
 *            Callback to override functionalities of updater function
 * @param urlParams
 *            [Added later] Additional parameters to be append, e.g.
 *            type=COMPANY
 * @param noResultText
 *            [Added later] HTML text to display in case of no result
 * @param isDealSearch
 *            true when it is using for deals typeahead.
 * @module Search
 * @author Yaswanth
 * 
 */
function agile_type_ahead(id, el, callback, isSearch, urlParams, noResultText, url, isEmailSearch, isDealSearch, appendNameToEmail, page_size)
{

	// Turn off browser default auto complete
	$('#' + id, el).attr("autocomplete", "off");
	if (!url)
		url = "core/api/search/"

	var CONTACTS = {};
	if(!page_size)
		page_size = 10;

	var el_typeahead = $('#' + id, el)
			.typeahead(
					{

						// Time delay to start query
						timedelay : 250,

						// Holds current search query xhr object
						searchAJAXRequest : undefined,
						source : function(query, process)
						{

							/* Resets the results before query */
							CONTACTS = {};

							/* Stores type ahead object in temporary variable */
							var that = this;

							this.options.showLoading(this);

							// Drop down with loading image is shown
							// this.shown = true;

							// Get data on query

							var type_url = "";

							if (urlParams && urlParams.length)
								type_url = '&' + urlParams;

							// Sends search request and holds request object,
							// which can be reference to cancel request if there
							// is any new request
							this.options.searchAJAXRequest = $.getJSON(url + "?q=" + encodeURIComponent(query) + "&page_size=" + page_size + "" + type_url, function(data)
							{

								var current_query = $('#' + id, el).val();

								// If current query is not equal to that of
								// token in search url, results are not shown
								// (never occurs now as it is handled in keyup
								// function)
								if (query != current_query)
								{
									return;
								}

								/*
								 * Stores query results to use them in updater
								 * and render functions
								 */
								CONTACTS = data;

								/*
								 * Sets results in global variable, used to show
								 * results in different page (when search symbol
								 * is clicked)
								 */
								QUERY_RESULTS = data;

								/*
								 * If no result found based on query, shows info
								 * in type-ahead drop-down and return
								 */
								if (data.length == 0)
								{
									var txt = '<b>No Results Found</b>';

									if (noResultText && noResultText.length)
										txt = noResultText;

									// Not to show "no Results Found" for email
									// search
									if (txt == "email-search")
									{
										that.$menu.hide();
										return;
									}

									that.$menu.html('<div class="m-t-sm"><p align="center"   class="custom-color">' + txt + '<p></div>');
									that.render();
									return;
								}

								var items_list = [];

								/*
								 * Customizes data for type ahead, items_list
								 * contains list of contact names (first_name +
								 * last_name without space). callback is
								 * contacts_typeahead
								 */
								if (callback && typeof (callback) === "function")
									items_list = callback(data);

								/*
								 * Stores contacts in a map with
								 * first_name+last_name as key and id as value
								 */
								$.each(data, function(index, item)
								{
									tag_name = items_list[index];
									// Used for related to contacts for ids
									TYPEHEAD_TAGS[tag_name] = item.id;
									// Used for related to contacts for emails
									// in send-email
									TYPEHEAD_EMAILS[tag_name] = getContactEmail(item);

									TYPEHEAD_NAMES[tag_name] = getContactName(item);

									TYPEHEAD_DEAL_RELATED_CONTACTS[tag_name] = item.contacts;
									
									if(item.type == 'PERSON')
										TYPEHEAD_TYPE[tag_name] = '#contact/';
									else if(item.type == 'COMPANY')
										TYPEHEAD_TYPE[tag_name] = '#company/';
										
								});

								/*
								 * Calls matcher and render methods by verifying
								 * the data
								 */
								process(items_list);
							});
						},
						showLoading : function(self)
						{
							self.$menu.empty();
							/* Sets css to html data to be displayed */
							if(self.$element.attr("id") == "searchText")
							{
								self.$menu.css({"width" : 300, "max-height" : "calc(100vh - 50px)", "overflow-y" : "auto"});
								self.$menu.addClass("dashboard-search-scroll-bar");	
							}
							else
							{
								self.$menu.css("width", 300);
							}					

							/*
							 * Calls render because menu needs to be initialized
							 * even before first result is fetched to show
							 * loading
							 */

							/*
							 * If loading image is not available in menu then
							 * appends it to menu
							 */
							if (!$(self.$menu.find('li').last()).hasClass('loading-results'))
							{
								self.$menu
								self.$menu.html('<li class="divider"></li><li class="loading-results"><p align="center">' + LOADING_ON_CURSOR + '</p></li>');
								self.render();
							}

						},

						/**
						 * Overridden to return always true (when contacts are
						 * fetched based on email or company name etc..)
						 */
						matcher : function(item)
						{
							if (~item.toLowerCase().indexOf(this.query.toLowerCase()) != 0)
								return ~item.toLowerCase().indexOf(this.query.toLowerCase());
							else
								return -1;
						},

						/**
						 * Overridden to customize the view of matched drop down
						 * entities (i.e with image, email address etc..)
						 */
						render : function()
						{
							var that = this;

							// If query results are not available activate the
							// menu to show info and return
							if (!CONTACTS.length)
							{
								this.show();
								return;
							}
			

							// Stores all the matched elements (<li> drop down)
							// in items
							items = buildcategorizedResultDropdown(CONTACTS, that.options);

							items.css("overflow", "hidden");

							// this.$menu.css("max-height", "400px");
							// this.$menu.css("overflow", "auto");

							// Keeps the list of items in menu (ul) and shows
							// the drop down
							this.$menu.html(items).show();
							this.shown = true;
							//Sets modal backdrop height to sum of modal dialog height and related contacts drop down height after render the related contacts
							$('.modal-backdrop',$('.modal:visible')).height($('.modal-dialog',$('.modal:visible')).height()+$('ul.dropdown-menu',$('.modal:visible')).height());
							return this;
						},

						/**
						 * Handles the select (clicking a drop down element)
						 * event of drop down elements. If, it is search fiel
						 * navigates to detail view, related to field prepends
						 * the name as tag to the field. Also shows all the
						 * matched entities in other page when search symbol is
						 * clicked.
						 */
						updater : function(items)
						{

							//in mobile hiding the searchbar onclick
							setTimeout(function(){
								$('.search-mobile').addClass('hide');
								$('.add-modal-mobile , #search-menu-mobile').addClass('visible-xs');
							},200);

							// To verify whether the entity (task, deal etc..)
							// related to same contact twice
							var tag_not_exist = true;
							var email_not_exist = true;

							/*
							 * Stores items in temp variable so that, shows
							 * first name and last name separated by space
							 */
							if (items)
								var items_temp = items.substr(0, items.lastIndexOf('-'));

							// Trims spaces in names to retrieve contact id from
							// JSON (TYPEHEAD_TAGS)
							if (items)
								items = items.split(" ").join("")

								// Customizes data for type ahead
							if (isSearch && typeof (isSearch) === "function")
							{

								/*
								 * If no item is selected (when clicked on
								 * search symbol or enter) then show results in
								 * different page
								 */
								if (!items)
								{
									showSearchResults(); // fails
									// automatically for
									// non main search
									// bar typeaheads.
									return this.query; // return text of query
									// to set in input field
								}

								// Navigates the item to its detail view
								isSearch(TYPEHEAD_TAGS[items], items_temp);
								return;
							}

							// Return if items are not defined and it is not
							// search in nav bar
							if (!items)
								return;

							if (isEmailSearch)
							{
								// If email already exists returns
								$.each($('#' + id, el).closest("div.controls").find(".tags").children('li'), function(index, tag)
								{

									if ($(tag).attr('data') == TYPEHEAD_EMAILS[items] || ~($(tag).attr('data').indexOf(TYPEHEAD_EMAILS[items])))
									{
										email_not_exist = false;
										return;
									}
								});
								if (email_not_exist && (TYPEHEAD_EMAILS[items] != "No email"))
								{

									var data = TYPEHEAD_EMAILS[items];
									var name = TYPEHEAD_NAMES[items];

									if (appendNameToEmail && data && name && Object.keys(TYPEHEAD_NAMES).length != 0)
									{
										// Replace < or > with spaces
										if (name.indexOf("<") != -1 || name.indexOf(">") != -1)
										{
											name = name.replace(/</g, " ");
											name = name.replace(/>/g, " ");
										}

										// Don't append email
										if (name.trim() != data.trim())
											data = name.trim() + ' <' + data.trim() + '>';
									}

									$('#' + id, el)
											.closest("div.controls")
											.find(".tags")
											.append(getTemplate("tag-item-li", get_tag_item_json(items, items_temp, "email")));


								}

							}
							else if (isDealSearch)
							{
								// If tag already exists returns
								$.each($('.deal_tags', el).children('li'), function(index, tag)
								{

									if ($(tag).attr('data') == TYPEHEAD_TAGS[items])
									{
										tag_not_exist = false;
										return;
									}
								});
								// add tag
								if (tag_not_exist)
								{
									var dealJSON = get_tag_item_json(items, items_temp, "deals");
									var related_contact_ids = "";
									var relatedContactsJOSN = dealJSON["related_contacts"];
									$.each(relatedContactsJOSN, function(index, relContact){
										var rel_contact_exist = true;
										// If tag already exists returns
										$.each($('ul.tags', el).children('li'), function(index, tag)
										{
											if ($(tag).attr('data') == relContact.id)
											{
												rel_contact_exist = false;
												return;
											}
										});

										if(rel_contact_exist)
										{
											related_contact_ids += relContact.id + " ";
											var tplJSON = {};
											tplJSON.email_item = relContact.id;
											if(relContact.type == 'PERSON'){
												tplJSON.type_item = '#contact/';
											}
											else if(relContact.type == 'COMPANY'){
												tplJSON.type_item = '#company/';
											}
											tplJSON.tag_item = relContact.id;
											tplJSON.item = getContactName(relContact);
											$('ul.tags', el).append(getTemplate("tag-item-li", tplJSON));
										}
									});
									dealJSON.related_contact_ids = related_contact_ids;
									$('.deal_tags', el)
											.append(getTemplate("tag-deal-item-li", dealJSON));
								}
							}
							else
							{
								// If tag already exists returns
								var targetContainer = this.$menu.closest("div.controls").find('.tags');
								if(targetContainer.length == 0){
									targetContainer = this.$menu.closest("div.control-group").find('.tags'); 
								} else if(targetContainer.length == 0){
									targetContainer = this.$menu.closest("div.form-group").find('.tags'); 	
								}
									
								$.each(targetContainer.children('li'), function(index, tag)
								{

									if ($(tag).attr('data') == TYPEHEAD_TAGS[items])
									{
										tag_not_exist = false;
										return;
									}
								});

								// add tag
								if (tag_not_exist)
									targetContainer
											.append(getTemplate("tag-item-li", get_tag_item_json(items, items_temp)));

											
							}
							//Sets modal backdrop height to modal dialog height after select the tag
							$('.modal-backdrop',$('.modal:visible')).height($('.modal-dialog',$('.modal:visible')).height()+180);
						},
						// Needs to be overridden to set timedelay on search
						keyup : function(e)
						{
							switch (e.keyCode) {
							case 40: // down arrow
							case 38: // up arrow
							case 16: // shift
							case 17: // ctrl
							case 18: // alt
								break

							case 9: // tab
							case 13: // enter
								if (!this.shown)
									return

								

																

								

																								

								

																

								

																																

								

																

								

																								

								

																

								

								if (isEmailSearch && !CONTACTS.length)
									this.hide();
								else
									this.select();
								break

							case 27: // escape
								if (!this.shown)
									return

								

																

								

																								

								

																

								

																																

								

																

								

																								

								

																

								

								this.hide()
								break

							case 188:
								if (isEmailSearch)
								{
									if (checkEmailValidation(($('#' + id, el).val()).slice(0, -1)))
									{
										var email_check = true;
										var email_value = ($('#' + id, el).val()).slice(0, -1);
										$.each($('#' + id, el).closest("div.controls").find(".tags").children('li'), function(index, tag)
										{

											if ($(tag).attr('data') == email_value || ~($(tag).attr('data').indexOf(email_value)))
											{
												email_check = false;
												return;
											}
										});
										if (email_check){

											var emailJSON = {};
											emailJSON.email_item = email_value;
											emailJSON.item = email_value;
											$('#' + id, el)
													.closest("div.controls")
													.find(".tags")
													.append(getTemplate("tag-item-li", emailJSON));
													
										}
											
										this.select();
									}
									else
										this.hide();
								}
								break

							default:
							{
								// Checks if there is previous request and
								// cancels it
								if (this.options.searchAJAXRequest != null && (this.options.searchAJAXRequest && this.options.searchAJAXRequest.readystate != 4))
								{
									this.options.searchAJAXRequest.abort();
								}

								if (this.timer)
									clearTimeout(this.timer);
								var self = this;

								// Reset results
								CONTACTS = {};

								/*
								 * If loading image is not available in menu
								 * then appends it to menu
								 */
								this.options.showLoading(self);

								this.timer = setTimeout(function()
								{
									self.lookup();
								}, this.options.timedelay);
							}
							}

							e.stopPropagation()
							e.preventDefault()
						}

						,

						// Hides the results list
						hide : function()
						{
							this.$menu.hide();
							this.shown = false;
							return this;

							

						},

						// Handles cursor exiting the textbox
						blur : function(e)
						{
							var that = this;
							e.stopPropagation();
							e.preventDefault();
							setTimeout(function()
							{
								if (!that.$menu.is(':focus'))
									that.hide();
							}, 150)
						}, minLength : 2, })
}

// Removes tags ("Related to" field contacts)
$("body").on("click", '#remove_tag', function(event)
{
	event.preventDefault();var company_name ;var prop = null;var flag = false;
	if($(this).parent().attr("data-deal-related-contacts"))
	{
		var deal_related_contacts = $(this).parent().attr("data-deal-related-contacts").split(" ");
		var el = $(this).closest("form");
		$.each(deal_related_contacts, function(index, contact_id){
			$("li[data="+contact_id+"]", el).remove();
		});
	}
	if($(this).hasClass("companyAddress") && contact_company){
		$.each(contact_company.properties , function(){
			if(this.name == "address" && this.subtype == "office")
				prop = JSON.parse(this.value);
		});
		if(prop){
			if(prop.address && $("#content #address").val() && $("#content #address").val() != prop.address)
				flag = true;
			else if(prop.city && $("#content #city").val() && $("#content #city").val() != prop.city)
				flag = true;
			else if(prop.state && $("#content #state").val() && $("#content #state").val() != prop.state)
				flag = true;
			else if(prop.zip && $("#content #zip").val() && $("#content #zip").val() != prop.zip)
				flag = true;
			else if(prop.country && $("#content #country").val() && $("#content #country").val() != prop.country)
				flag = true ;
			if(!flag){
				$("#content .address-type,#address,#city,#state,#zip,#country").val('');
			}
        }
    }
	$(this).parent().remove();
});

/* Customization of Type-Ahead data */

/**
 * Returns list of contact names (with no space separation) for type ahead
 * 
 * @method contacts_typeahead
 * @param data
 *            contacts on querying, from type-ahead
 */
function contacts_typeahead(data)
{
	if (data == null)
		return;

	// To store contact names list
	var contact_names_list = [];

	/*
	 * Iterates through all the contacts and get name property
	 */
	$.each(data, function(index, contact)
	{

		var contact_name;

		if (contact.entity_type == 'deal')
		{
			// Append the name of the deal and the id for deals in search.
			contact_name = contact.name + "-" + contact.id;
		}
		else
		{
			// Appends first and last name to push in to a list
			contact_name = getContactName(contact) + "-" + contact.id;

		}

		// Spaces are removed from the name, name should be used as a key in map
		// "TYPEHEAD_TAGS"
		contact_names_list.push(contact_name.split(" ").join(""));
	});

	// Returns list of contact/company names
	return contact_names_list;

}

/**
 * Returns list of contact names (with no space separation) for type ahead
 * 
 * @method contacts_typeahead
 * @param data
 *            contacts on querying, from type-ahead
 */
function deals_typeahead(data)
{
	if (data == null)
		return;

	// To store contact names list
	var deal_names_list = [];

	/*
	 * Iterates through all the contacts and get name property
	 */
	$.each(data, function(index, deal)
	{

		var deal_name;

		// Appends first and last name to push in to a list
		deal_name = deal.name.split(" ").join("") + "-" + deal.id;

		// Spaces are removed from the name, name should be used as a key in map
		// "TYPEHEAD_TAGS"
		deal_names_list.push(deal_name);
	});

	// Returns list of contact/company names
	return deal_names_list;

}

function getContactEmail(contact)
{
	var email = getPropertyValue(contact.properties, "email");
	email = email != undefined ? email.trim() : "";

	if (email.length)
		return email;
	else
		return "No email";

}

function checkEmailValidation(value)
{
	return /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/i.test(value);
}

function getContactName(contact)
{
	var name = "";
	if (!contact.type || contact.type == 'PERSON')
	{
		var first_name = getPropertyValue(contact.properties, "first_name");
		var last_name = getPropertyValue(contact.properties, "last_name");
		last_name = last_name != undefined ? last_name.trim() : "";
		first_name = first_name != undefined ? first_name.trim() : "";
		name = (first_name + " " + last_name).trim();
	}
	else if (contact.type == "COMPANY")
	{
		var company_name = getPropertyValue(contact.properties, "name");
		company_name = company_name != undefined ? company_name.trim() : "";
		name = company_name.trim();
	}

	if (name.length)
		return name;

	var email = getPropertyValue(contact.properties, "email");
	email = email != undefined ? email.trim() : "";

	if (email.length)
		return email;

	// if nothing found, assume Company and return with id.

	return 'Company ' + contact.id;
}

function buildcategorizedResultDropdown(items, options)
{
	var contact_custom_view = new Base_Collection_View({ data : items, templateKey : "typeahead-contacts", individual_tag_name : 'li',
		typeahead_options : options });

	contact_custom_view.appendItem = appendItemInResult;

	var el = contact_custom_view.render(true).el;
	return $(el);

	/*
	 * $(items).each(function (i, item){
	 * 
	 * if()
	 * 
	 * Check if item if of company type get company name instead of first name
	 * and last name of person
	 * 
	 * var fullname = getContactName(item) + "-" + item.id;
	 * 
	 * console.log(fullname); // Sets data-value to name i =
	 * $(that.options.item).attr('data-value', fullname); // To add border to
	 * all after li except to last one i.addClass('typeahead-border'); //
	 * Returns template, can be contact or company compares in template
	 * i.find('a').html(getTemplate('typeahead-contacts', item)); return i[0];
	 * });
	 */
}

function appendItemInResult(item)
{

	var fullname = getContactName(item.toJSON()) + "-" + item.id;

	var type = item.toJSON().entity_type;

	if (type && type == "deal")
		fullname = item.toJSON().name + "-" + item.id;

	var itemView = new Base_List_View({ model : item, "view" : "inline", template : this.options.templateKey + "-model", tagName : 'div', });

	// Sets data-value to name
	i = $(this.options.typeahead_options.item).attr('data-data-value', fullname);

	// To add border to all after li except to last one
	i.addClass('typeahead-border');
	// Returns template, can be contact or company compares in template
	i.find('a').html(itemView.render(true).el);

	i.find('a').removeAttr('href');

	if (type)
	{
		if (type == "contact_entity")
		{

			$("#contact-typeahead-heading", this.el).show();
			$("#contact-results", this.el).append(i);
		}
		if (type == "company_entity")
		{

			$("#company-typeahead-heading", this.el).show();
			$("#company-results", this.el).append(i);
		}
		if (type == "deal")
		{
			$("#deal-typeahead-heading", this.el).show();
			$("#deals-results", this.el).append(i);
		}
		if (type == "case")
		{
			$("#case-typeahead-heading", this.el).show();
			$("#case-results", this.el).append(i);
		}
		if (type == "document")
		{
			$("#document-typeahead-heading", this.el).show();
			$("#document-results", this.el).append(i);
		}
		if (type == "tickets")
		{
			$("#tickets-typeahead-heading", this.el).show();
			$("#ticket-results", this.el).append(i);
		}
	}

}

function get_tag_item_json(items, items_temp, type){

	var tag_item_json = {};

	if(type == "email"){
		tag_item_json.email_item = TYPEHEAD_EMAILS[items];
		tag_item_json.type_item = TYPEHEAD_TYPE[items];
	} else if(type == "deals") {
		tag_item_json.email_item = TYPEHEAD_TAGS[items];
		tag_item_json.type_item = TYPEHEAD_TYPE[items];
		tag_item_json.related_contacts = TYPEHEAD_DEAL_RELATED_CONTACTS[items];
	}else {
		tag_item_json.email_item = TYPEHEAD_TAGS[items];
		tag_item_json.type_item = TYPEHEAD_TYPE[items];
	}
	
	tag_item_json.tag_item = TYPEHEAD_TAGS[items];
	tag_item_json.item = items_temp;

	console.log(tag_item_json);
	return tag_item_json;
}
/**
 * TAGS and tagsCollection are taken as global variables.
 * 
 * TAGS --> Stores models of tagsCollection (to avoid fetching the data from server side, 
 * 			every time the tags typeahead is called)
 * tagsCollection --> To show up the added tags in tags view, by adding to this collection 
 */
var TAGS;
var tagsCollection;
var isTagsTypeaheadActive;
var tagsTemplate;
var tagsCollectionView;
/**
 * Creates a list (tags_list) only with tag values (i.e excludes the keys), 
 * by fetching the tags from server side, if they do not exist at client side (in TAGS). 
 * 
 * This tags_list is used as source for the typeahead, to show the matched items 
 * as drop down list, when a key is entered in the input box of typeahead 
 * 
 * @method setup_tags_typeahead
 * 
 */
function setup_tags_typeahead(callback) {
	var tags_list = [];
	
	
	// Fetches tags collection, if no tags are exist (in TAGS) 
    if(!TAGS)
    	{
    		init_tags_collection();
    		return;
    	}
    
    TAGS = tagsCollection.models;
    
    // Iterate TAGS to create tags_list (only with tag values)   
    _(TAGS).each(function (item) { 
        var tag = item.get("tag");
        if ($.inArray(tag, tags_list) == -1) tags_list.push(tag);
    });

    if(!$('.tags-typeahead').attr('placeholder'))
    	$('.tags-typeahead').attr("placeholder", "Separate tags with commas");
    
    // Turn off browser default auto complete
    $('.tags-typeahead').attr("autocomplete","off");
 
    /**
     * typeahead is activated to the input field, having the class "tags-typeahead" 
     */
    $('.tags-typeahead').typeahead({
        
    	/**
    	 * Shows a drop down list of matched elements to the key, entered in the 
    	 * input field (having the class "tags-typeahead") from the list of elements
    	 * (tags_list) passed to the source method of typeahead
    	 */
    	source: function (query, process)
    	{
    		isTagsTypeaheadActive = false;
    		(this.$menu).empty();
    		
    		process(tags_list);
    		
    		if(this.$menu.find('.active').length > 0)
    			isTagsTypeaheadActive = true;
    	},
    	/**
    	 * Performs its operation (adds the tag as an li element to its nearest ul) on selecting 
    	 * a tag from the list of matched items provided by the source method   
    	 */
    	updater: function(tag) {
    		
    		if(!tag || (/^\s*$/).test(tag))
    			{
    				return;
    			}
    	
    		tag = tag.trim();
    	
    		// Saves the selected tag to the contact
    		if((this.$element).closest(".control-group").hasClass('save-tag')){
    			
    			var json = null;
    			if(callback!=undefined)
    			{ callback(tag);
    				return;
    			}
    			if(company_util.isCompany())
    				json = App_Companies.companyDetailView.model.toJSON();
    			else
    				json = App_Contacts.contactDetailView.model.toJSON();
    			
    			// Checks if tag already exists in contact
    			if($.inArray(tag, json.tags) >= 0)
    				return;

    			json.tagsWithTime.push({"tag" : tag});
    			
    			
    			saveEntity(json, 'core/api/contacts', function(data){
    				$("#addTagsForm").css("display", "none");
        		    $("#add-tags").css("display", "block");
        		    
    	     		// Get all existing tags of the contact to compare with the added tags
	       			var old_tags = [];
	       			$.each($('#added-tags-ul').children(), function(index, element){
       					
	       				old_tags.push($(element).attr('data'));
       				});
	       			
	       			if(company_util.isCompany()){
	       				App_Companies.companyDetailView.model.set(data.toJSON(), {silent : true});
	       			// Append to the list, when no match is found 
		       			if ($.inArray(tag, old_tags) == -1) {
                            var template = Handlebars.compile('<li class="tag btn btn-xs btn-default m-r-xs m-b-xs inline-block" data="{{name}}"><span><a class="anchor m-r-xs" href="#tags/{{name}}" >{{name}}</a><a class="close remove-tags" id="{{name}}" tag="{{name}}">&times</a></span></li>');
                            // Adds contact name to tags ul as li element
                            $('#added-tags-ul').append(template({name : tag}));
                                    $.each(data.get("tagsWithTime"), function(e, d) {
                                if (d.tag == tag) {
                                        $('#added-tags-ul').find("li[data='"+tag+"']").attr('title',epochToHumanDate("mmmm dd, yyyy 'at' hh:MM tt",d.createdTime));
                                    }
                                    } );
                        }
	       			}
	       			else{
	       				App_Contacts.contactDetailView.model.set(data.toJSON(), {silent : true});
	       				addTagToTimelineDynamically(tag, data.get("tagsWithTime"));
	       			// Append to the list, when no match is found 
		       			if ($.inArray(tag, old_tags) == -1) {

                            var template = Handlebars.compile('<li class="tag btn btn-xs btn-default m-r-xs m-b-xs inline-block" data="{{name}}"><span><a class="anchor m-r-xs" href="#tags/{{name}}" >{{name}}</a><a class="close remove-tags" id="{{name}}" tag="{{name}}">&times</a></span></li>');
                            // Adds contact name to tags ul as li element
                            $('#added-tags-ul').append(template({name : tag}));
                             $.each(data.get("tagsWithTime"), function(e, d) {
                                if (d.tag == tag) {
                                        $('#added-tags-ul').find("li[data='"+tag+"']").attr('title',epochToHumanDate("mmmm dd, yyyy 'at' hh:MM tt",d.createdTime));
                                    }
                                    } );
                        }
	    				
	       			}
	       			
    			});
    	        return;
    		}
    		
    		// To store existing tags in form.
    		var tags_temp = [];
    		
    	    // If tag already exists returns
            $.each((this.$element).closest(".control-group").find('ul.tags').children('li'), function (index, tag){
            	tags_temp.push($(tag).attr('data'));
            });

            // If tag is not added already, then add new tag.
    		if($.inArray(tag, tags_temp) == -1){
                var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block"   data="{{name}}"><span class="m-r-xs v-middle">{{name}}</span><a class="close" id="remove_tag">&times</a></li>');
                // Adds contact name to tags ul as li element
                (this.$element).closest(".control-group").find('ul.tags').append(template({name : tag}));
            }
    			
        }
    });
    
    $('body').on('keydown', '#addTags', function(e) {
    	if(e.which == 13 && !isTagsTypeaheadActive)
    		{
    			e.preventDefault();
    			
    			var contact_json = App_Contacts.contactDetailView.model.toJSON();
    	
    			var tag = $(this).val().trim();
    			
    			if(!tag || tag.length<=0 || (/^\s*$/).test(tag))
    			{
    				return;
    			}

    			if (!isValidTag(tag, true)) {
    				return false;
    			}
    			$("#addTags").val("");
    			
    			tag = tag.trim();
    			
    			acl_util.canAddTag(tag,function(canAdd){
    				
    				if(!canAdd){
        				return;
        			}
    				
    				// Get all existing tags of the contact to compare with the added tags
        			var old_tags = [];
        			$.each($('#added-tags-ul').children(), function(index, element){
    				
        				old_tags.push($(element).attr('data'));
        			});
    			
        			// Append to the list, when no match is found 
        			if ($.inArray(tag, old_tags) != -1) 
        				return;
       			
        			contact_json.tagsWithTime.push({"tag" : tag});
        	    	
        			saveEntity(contact_json, 'core/api/contacts',  function(data) {
        				// Updates to both model and collection
        				App_Contacts.contactDetailView.model.set(data.toJSON(), {silent : true});
        				addTagToTimelineDynamically(tag, data.get("tagsWithTime"));
        				tagsCollection.add(new BaseModel( {"tag" : tag} ));
        			$("#addTagsForm").css("display", "none");
        		    $("#add-tags").css("display", "block");

                    var template = Handlebars.compile('<li class="inline-block tag btn btn-xs btn-default m-r-xs m-b-xs" data="{{name}}" ><span><a class="anchor m-r-xs" href="#tags/{{name}}">{{name}}</a><a class="close remove-tags" id="{{name}}" tag="{{name}}">&times</a></span></li>');

                    // Adds contact name to tags ul as li element
                    $('#added-tags-ul').append(template({name : tag}));
                     $.each(data.get("tagsWithTime"), function(e, d) {
                                if (d.tag == tag) {
                                        $('#added-tags-ul').find("li[data='"+tag+"']").attr('title',epochToHumanDate("mmmm dd, yyyy 'at' hh:MM tt",d.createdTime));
                                    }
                                    } );
                    
        			},function(model,response){
        				console.log(response);
    	       			showAlertModal(response.responseText, undefined, undefined, undefined, "Error");
        			});
    			});
    			
    		}
    });
    
    
    /**
     * If entered tag is not in typeahead source, create a new tag (enter "," at the end of new tag 
     * element, then it could be added as new tag)
     */
    $(".tags-typeahead").bind("keydown", function(e){
    	
    	// Adds no tags when the key down is "," in contact detail view tags 
    	if($(this).hasClass('ignore-comma-keydown'))
    	  return;
    	
    	var tag = $(this).val().trim();
    	
    	if(!tag || tag.length<=0 || (/^\s*$/).test(tag))
		{
			return;
		}
    	
    	// To make a tag when "," keydown and check input is not empty
    	if(e.which == 188 && tag != "")
    	{
    		e.preventDefault();
    	
    		// Prevents comma (",") as an argument to the input field
    		$(this).val("");
    		
    		var tags_list=$(this).closest(".control-group").find('ul.tags');
    		var add_tag=true;
    		
    		// Iterate over already present tags, to check if this is a new tag
    		tags_list.find('li').each(function(index,elem){
    			
    			if(elem.getAttribute('data')==tag)
    			{
    				add_tag=false; // tag exists, don't add
    				return false;
    			}
    		});
    		
    		if(add_tag){
                var template = Handlebars.compile('<li class="tag btn btn-xs btn-primary m-r-xs m-b-xs inline-block"  data="{{name}}">{{name}}<a class="close m-l-xs" id="remove_tag" tag="{{name}}">&times</a></li>');
                // Adds contact name to tags ul as li element
                tags_list.append(template({name : tag}));
                
            }
    	}
    });
}

/**
 * Fetches the tags collection from server side and shows them in their 
 * separate section along  with contacts list.
 * Called from contacts router and customView router.
 * 
 * @method setup_tags
 * @param {Object} cel 
 * 			contacts list view page as html object
 */
function setup_tags(cel) {
	
	if(!tagsCollection || !tagsCollectionView)
	{
		
		init_tags_collection(cel, function(el){
			$('#tagslist', cel).html(el);
		});
		return;
	}
	  $('#tagslist', cel).html(tagsCollectionView.render(true).el);
}

/**
 * Reads the tag values from the elements having class "tags" and maps 
 * them as a json object to return.
 * 
 * @method get_tags
 * @param {String} form_id 
 * 			to read tags from the form
 * @returns json object of tags
 */
function get_tags(form_id) {
    var tags_json = $('#' + form_id + ' .tags').map(function () {
       	var values = [];

        if(!$(this).hasClass("custom_contact") && !$(this).hasClass("custom_company")) {
            $.each($(this).children(), function(index, data) { 
                values.push(($(data).attr("data")).toString())
            });
            return {
                "name" : $(this).attr('name'),
                "value":values
            };
        }
    }).get();
    
    // Reads input value from input field too.
    var input_filed = $("#" + form_id + " input.tags-typeahead");
    if(input_filed != null)
    {
    	var tag_input = $(input_filed).val();
    	
    	if(tag_input)
    		{
    			tag_input = tag_input.trim();
    			tags_json[0].value.push(tag_input);
    		//	input_filed.val("");
    		}
    }
    return tags_json;
}

/**
 * Reads the tag values from the elements having class "tags" and maps 
 * them as a json object to return.
 * 
 * @method get_tags
 * @param {String} form_id 
 * 			to read tags from the form
 * @returns json object of tags
 */
function get_related_deals(form_id) {
    var tags_json = $('#' + form_id + ' .deal_tags').map(function () {
       	var values = [];

       	$.each($(this).children(), function(index, data) { 
       		values.push(($(data).attr("data")).toString())
    	});
        return {
        	"name" : $(this).attr('name'),
           	"value":values
        };
    }).get();
    
    return tags_json;
}

/**
 * Reads the values of a input field and splits based on comma
 * @param id
 * @returns
 */
function get_new_tags(id){
    // Add Tags
    if (isValidField(id)) {
        var tags = $('#' + id).val();
        
        // Replace multiple space with single space
        tags =  tags.replace(/ +(?= )/g,'');

        
        // Replace ,space with space
        tags = tags.replace(", ", " ");

        // Replace , with spaces
        tags = tags.replace(",", " ");

        return tags;
//        return tags.split(" ");
    }
}

function init_tags_collection(cel, callback, url)
{
	url = url ? url : '/core/api/tags'
	tagsCollectionView = new Base_Collection_View({ 
			url : url, 
			sortKey: 'tag',
			templateKey : 'tags', 
		});
	
	tagsCollectionView.appendItem = append_tag;
	

	tagsCollection = tagsCollectionView.collection;
	
	tagsCollectionView.collection.fetch({success: function(data){
		  TAGS = tagsCollection.models
		  
		// Called to initiate typeahead to the fields with class attribute "tags_typeahead"
        setup_tags_typeahead();
		  
		if(callback && typeof (callback) === "function")
			callback(tagsCollectionView.render(true).el);		  
	}});
}

function append_tag(base_model)
{
	var tag = base_model.get('tag');
	var key = tag.charAt(0).toUpperCase();
	tag_encoded = encodeURIComponent(tag);
	$( 'div[tag-alphabet="'+encodeURI(key)+'"]', this.el).append('<a href="#tags/'+tag_encoded+'" id="'+tag_encoded.replace( / +/g, '' )+'-in-list">'+tag+'</a>&nbsp;');
}

function remove_tags(base_model)
{
	console.log("removed");	
}

function renameTags(newTag, oldTag)
{
    if(!tagsCollection || !tagsCollection.models)
        return;

    var models = tagsCollection.where({"tag" : oldTag});
    
    if(models && models.length)
    {
        var model = models[0];
        model.set({"tag" : newTag});    
    }

    
}

$(function(){

	$('body').on('click', '#refresh-tags', function(e){
		e.preventDefault();
		$('#tagslist', App_Contacts.contactsListView.el).html(getRandomLoadingImg());
		init_tags_collection(App_Contacts.contactsListView.el, function(tags){
			setup_tags(App_Contacts.contactsListView.el);
			pieTags(App_Contacts.contactsListView.el, true);
		}, 'core/api/tags?reload=true');
	})
	$('body').on('focusout', '.contact-detail-addtags', function(e)
	{
		e.preventDefault();
		var contact_tag_temp = $(this).val();
		$('body').on('mousedown', function(s)
		{
			s.preventDefault();
			var t = s.target.id;
			if (!contact_tag_temp && t != "contact-add-tags" && t != "addTags")
			{
				$("#addTagsForm").css("display", "none");
				$("#add-tags").css("display", "block");
			}
		});
	});
});
/**
*  Document collection event listeners
*/
var Document_Collection_Events = Base_Collection_View.extend({
	
	events: {
		'click .documents-add': 'onAddDocument',
		'click #documents-model-list > tr > td:not(":first-child")': 'onDocumentListSelect',		
	},

	/**
	 * For adding new document
	 */
	onAddDocument: function(e){
		e.preventDefault();

		// Show modal
		$('#uploadDocumentModal').html(getTemplate("upload-document-modal", {})).modal('show');
	
		// Add type a head actions
		var el = $("#uploadDocumentForm");
		// Contacts type-ahead
		agile_type_ahead("document_relates_to_contacts", el, contacts_typeahead);
		
		// Deals type-ahead
		agile_type_ahead("document_relates_to_deals", el, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
	},

	 /** 
     * Document list view edit
     */
	onDocumentListSelect : function(e){
		if(e.target.parentElement.attributes[0].name!="href" && e.target.parentElement.attributes[1].name!="href"){
     		e.preventDefault();

     	 	updateDocument($(e.currentTarget).closest('tr').data());
     	 }
	},

});
  
/** Modal event initializer **/
$(function(){

    /** 
     * When clicked on choose network type
     */
    $('#uploadDocumentUpdateModal,#uploadDocumentModal').on('click', '.link', function(e)
	{
		e.preventDefault();
		$(this).closest('form').find('#error').html("");
		var form_id = $(this).closest('form').attr("id");
		var id = $(this).find("a").attr("id");
		
		if(id && id == "GOOGLE")
			var newwindow = window.open("upload-google-document.jsp?id="+ form_id, 'name','height=510,width=800');
		else if(id && id == "S3")
			var newwindow = window.open("upload-custom-document.jsp?id="+ form_id +"&t=" + CURRENT_USER_PREFS.template +"&d=" + CURRENT_DOMAIN_USER.domain, 'name','height=310,width=500');
		
		if (window.focus)
		{
			newwindow.focus();
		}
		return false;
	});
	
	/**
	 * To validate the document add or edit forms
	 */
	$('#uploadDocumentUpdateModal,#uploadDocumentModal').on('click', '#document_validate, #document_update_validate', function(e){
 		e.preventDefault();

 		var modal_id = $(this).closest('.upload-document-modal').attr("id");
    	var form_id = $(this).closest('.upload-document-modal').find('form').attr("id");
    	
    	// serialize form.
    	var json = serializeForm(form_id);
    	console.log(json);

    	if(form_id == "uploadDocumentForm")
    		saveDocument(form_id, modal_id, this, false, json);
    	else
    		saveDocument(form_id, modal_id, this, true, json);
	});

	$('#uploadDocumentModal').on('hidden.bs.modal', function(e){
		$('#GOOGLE',$('#uploadDocumentModal')).parent().show();
	});

});


/**
 * Show document popup for updating
 */ 
function updateDocument(ele) {
	
	var value = ele.toJSON();
	
	add_recent_view(new BaseModel(value));

	var uploadModal = $('#uploadDocumentUpdateModal');
	uploadModal.html(getTemplate("upload-document-update-modal", {}));
	uploadModal.modal('show');
	
	var documentUpdateForm = $("#uploadDocumentUpdateForm");
	deserializeForm(value, $("#uploadDocumentUpdateForm"));
	$('#uploadDocumentUpdateForm').find("#" + value.network_type).closest(".link").find(".icon-ok").css("display", "inline");
	$('#uploadDocumentUpdateForm').find("#" + value.network_type).closest(".link").css("background-color", "#EDEDED");

	// Call setupTypeAhead to get contacts
	agile_type_ahead("document_relates_to_contacts", documentUpdateForm, contacts_typeahead);
	
	// Deals type-ahead
	agile_type_ahead("document_relates_to_deals", documentUpdateForm, deals_typeahead, false,null,null,"core/api/search/deals",false, true);
}

/**
 * Return url of document from JSP and appends to form
 * @param url
 * @param network
 */
function saveDocumentURL(url, network, id)
{
	id = id.split("?id=")[1];
	var form_id = id.split("&")[0];
	
	// Saving extension of document
	var extension = url.split("?");
	if(url.match("agilecrm/panel/uploaded-logo/"))
	{
		extension = extension[0];
		extension = extension.substring(extension.lastIndexOf("/")+1);
	}
	else 
		extension = "Google";
	
	$('#' + form_id).find("#extension").val(extension);
	$('#' + form_id).find("#network_type").val(network);
	$('#' + form_id).find('#network_type').closest(".controls").find("div.link").css("background-color", "#FFFFFF");
	$('#' + form_id).find('#network_type').closest(".controls").find(".icon-ok").css("display", "none");
	$('#' + form_id).find("#" + network).closest(".link").find(".icon-ok").css("display", "inline");
	$('#' + form_id).find('#' + network).closest(".link").css("background-color", "#EDEDED");
   	$('#' + form_id).find('#upload_url').val(url);
   	$('#' + form_id).find('#size').val(CUSTOM_DOCUMENT_SIZE);

    //$('#' + form_id).find('#url').html('<a href="'+ url +'" target="_blank">'+ url +'</a>');
}

/**
 *stores size of document
 */

/**
 * Saves document instance
 * @param form_id
 * @param modal_id
 * @param saveBtn
 * @param update
 * @returns {Boolean}
 */
function saveDocument(form_id, modal_id, saveBtn, isUpdate, json)
{
	// Returns, if the save button has disabled attribute
	if ($(saveBtn).attr('disabled'))
		return;

	// Disables save button to prevent multiple click event issues
	disable_save_button($(saveBtn));
	
	// While attaching document is from existing documenst list, no need of form verification.
	if(form_id)
	{	
		
		if (!isValidForm('#' + form_id)) {

			// Removes disabled attribute of save button
			enable_save_button($(saveBtn));//$(saveBtn).removeAttr('disabled');
			
			return false;
		}
		
		var url = $('#' + form_id).find('#upload_url').val();
		if(url == "")
		{
			$('#' + form_id).find('#network_type').closest(".controls").find(".icon-ok").css("display", "none");
			$('#' + form_id).find('#network_type').closest(".controls").find("div.link").css("background-color", "#FFFFFF");
			$('#' + form_id).find('#error').html('<div class="alert alert-danger col-sm-offset-3 col-sm-7">Sorry! Document not attached properly.</div>');
			enable_save_button($(saveBtn));
			return;
		}
	}
	
	var newDocument = new Backbone.Model();
	newDocument.url = 'core/api/documents';
	newDocument.save(json, {
		success : function(data) {
			// reset document size 
			CUSTOM_DOCUMENT_SIZE = 0;

			// Removes disabled attribute of save button
			enable_save_button($(saveBtn));//$(saveBtn).removeAttr('disabled');
			
			// While attaching document is from existing documenst list, no need of form verification.
			if(form_id)
			{
				$('#' + form_id).find("#network_type").val("");
				$('#' + form_id).find('#network_type').closest(".controls").find(".icon-ok").css("display", "none");
				$('#' + form_id).find('#network_type').closest(".controls").find("div.link").css("background-color", "#FFFFFF");
				$('#' + form_id).find("#upload_url").val("");
				$('#' + form_id).find("#extension").val("");
				
				$('#' + form_id).each(function() {
					this.reset();
				});
			}
			
			//$('#' + modalId).find('span.save-status img').remove();
			if(form_id)
				$('#' + modal_id).modal('hide');
			
			var document = data.toJSON();
			add_recent_view(new BaseModel(document));
			
			// Updates data to timeline
			if (App_Contacts.contactDetailView
					&& Current_Route == "contact/"
							+ App_Contacts.contactDetailView.model.get('id')) {

				// Add model to collection. Disabled sort while adding and called
				// sort explicitly, as sort is not working when it is called by add
				// function
				
				
				/*
				 * Verifies whether the added document is related to the contact in
				 * contact detail view or not
				 */
				$.each(document.contacts, function(index, contact) {
					
					if (contact.id == App_Contacts.contactDetailView.model.get('id'))
					{
						if (documentsView && documentsView.collection)
						{
							if(documentsView.collection.get(document.id))
							{
								documentsView.collection.get(document.id).set(new BaseModel(document));
							}
							else
							{
								documentsView.collection.add(new BaseModel(document), { sort : false });
								documentsView.collection.sort();
							}
						}
						
							// Activates "Timeline" tab and its tab content in
							// contact detail view
							// activate_timeline_tab();
							//add_entity_to_timeline(data);
							/*
							 * If timeline is not defined yet, initiates with the
							 * data else inserts
							 */
							return false;
					}
				});
			} else if (company_util.isCompany()){
				company_util.updateDocumentsList(document,true);
			}
			else if (Current_Route == 'documents') {
				if (isUpdate)
					App_Documents.DocumentCollectionView.collection.remove(json);

				App_Documents.DocumentCollectionView.collection.add(data);

				App_Documents.DocumentCollectionView.render(true);

			}
			else if (App_Deal_Details.dealDetailView
					&& Current_Route == "deal/"
						+ App_Deal_Details.dealDetailView.model.id) {

			// Add model to collection. Disabled sort while adding and called
			// sort explicitly, as sort is not working when it is called by add
			// function
			
			
			/*
			 * Verifies whether the added document is related to the deal in
			 * deal detail view or not
			 */
			$.each(document.deals, function(index, deal) {
				
				if (deal.id == App_Deal_Details.dealDetailView.model.id)
				{
					if (dealDocsView && dealDocsView.collection)
					{
						if(dealDocsView.collection.get(document.id))
						{
							dealDocsView.collection.get(document.id).set(new BaseModel(document));
						}
						else
						{
							dealDocsView.collection.add(new BaseModel(document), { sort : false });
							dealDocsView.collection.sort();
						}
					}
					
						// Activates "Timeline" tab and its tab content in
						// contact detail view
						// activate_timeline_tab();
						//add_entity_to_timeline(data);
						/*
						 * If timeline is not defined yet, initiates with the
						 * data else inserts
						 */
						return false;
				}
			});
		}
		else if (Current_Route == "email-template-add" || Current_Route.indexOf("email-template") == 0 || Current_Route.indexOf("emailbuilder") == 0) {
			$('#tpl-attachment-select').find('select').find('option:last').after("<option value="+document.id+" selected='selected'>"+document.name+"</option>");
			$('.add-tpl-attachment-confirm').trigger("click");
			App_Settings.navigate(Current_Route, {
					trigger : true
				});
		}
			else {
				App_Documents.navigate("documents", {
					trigger : true
				});
			}
		}
	});
}


function saveAttachmentBlobKey(blobKey,fileName)
{
	var el = $("#uploadAttachmentForm");
	$("#uploadAttachmentModal").modal('hide');
	$('#emailForm').find('#eattachment').css('display','block');
	$('#emailForm').find('#attachment_id').find("#attachment_fname").text(fileName);
	$('#emailForm').find('#eattachment_key').attr('value',blobKey);
	$('#emailForm').find('#eattachment_key').attr('name',"blob_key");
	$('#emailForm').find('#attachment-select').find('option:first').attr('selected', 'selected');
	var el = $('#emailForm').find(".attachment-document-select");
	$('#emailForm').find(".attachment-document-select").css('display','none');
	$("#emailForm").find("#agile_attachment_name").val(fileName);
}
$(function(){
	
	$('body').on('click', '.voice-mail-add', function(e){
		e.preventDefault();
		$("#uploadVoiceMailModal").modal('show');
	});
	
	$('body').on('show.bs.modal', '#uploadVoiceMailModal', function(e) {
		// Removes alert message of error related date and time.
		$('#' + this.id).find('.alert').css('display', 'none');		
		// Removes error class of input fields
		$('#' + this.id).find('.error').removeClass('error');
	});
	
	$('body').on('click', '.addFileLink', function(e) {
		e.preventDefault();
		$(this).closest('form').find('#error').html("");
		var form_id = $(this).closest('form').attr("id");
		var id = $(this).find("a").attr("id");
		if(id && id == "S3")
			var newwindow = window.open("upload-voice-mail.jsp?id="+ form_id +"&t=" + CURRENT_USER_PREFS.template +"&d=" + CURRENT_DOMAIN_USER.domain, 'name','height=310,width=500');
		if (window.focus){
			newwindow.focus();
		}
		return false;
	});
	
	$('body').on('click', '#voicemail_validate', function(e){
 		e.preventDefault();
 		var modal_id = $(this).closest('.voice-mail-modal').attr("id");
    	var form_id = $(this).closest('.voice-mail-modal').find('form').attr("id");
    	
    	if(!isValidForm('#' + form_id))
    		return false;
    			
    	// serialize form.
    	var json = serializeForm(form_id);
    	if(form_id == "uploadVoiceMaiForm")
    		saveVoiceMail(form_id, modal_id, this, json);
	});
    
    $("#uploadVoiceMaiForm").submit(function(e){
    	e.preventDefault();
    });
    
    
    //audio javascript controls
    
	$('body').on('click', '.audioPlay', function(e){
	   e.preventDefault();
//	   alert("audioPlay");
	   audio = $(this).find("audio");
	   $(this).addClass("audioPause");
	   $(this).removeClass("audioPlay");
	   $(this).find("i").removeClass("icon-play");
//	   $(this).find("i").addClass("icon-pause");
	   $(this).find("i").addClass("icon-stop");
	   audio.trigger('play');
	   var that = this;
	   audio.bind('ended', function(){
		   $(that).addClass("audioPlay");
		   $(that).removeClass("audioPause");
		   $(that).find("i").removeClass("icon-stop");
		   $(that).find("i").addClass("icon-play");
		});
   });
   
   $('body').on('click', '.audioPause', function(e){
	   e.preventDefault();
//	   alert("audioPause");
	   audio = $(this).find("audio");
	   $(this).addClass("audioPlay");
	   $(this).removeClass("audioPause");
//	   $(this).find("i").removeClass("icon-pause");
	   $(this).find("i").removeClass("icon-stop");
	   $(this).find("i").addClass("icon-play");
	   audio.trigger('pause');
	   audio.prop("currentTime",0);
   });
	
});//end of function


function saveVoiceMailFileURL(url, network, id)
{
	id = id.split("?id=")[1];
	var form_id = id.split("&")[0];
	
	// Saving extension of document
	var extension = url.split("?");
	if(url.match("audiofiles/"))
	{
		extension = extension[0];
		extension = extension.substring(extension.lastIndexOf("/")+1);
	}
	else 
		extension = "";
	
	$('#' + form_id).find("#extension").val(extension);
	$('#' + form_id).find("#network_type").val(network);
	var newUrl = url.substring(0, url.indexOf("?"));//removing query string
   	$('#' + form_id).find('#upload_url').val(newUrl);
   	$(".addFileLink").empty();
   	if(extension != "")
   		$(".addFileLink").html(extension);
}

function saveVoiceMail(form_id, modal_id, saveBtn, json)
{
	// Returns, if the save button has disabled attribute
	if ($(saveBtn).attr('disabled'))
		return;

	disable_save_button($(saveBtn));
	
	if(form_id)
	{
		if (!isValidForm('#' + form_id)) {
			enable_save_button($(saveBtn));
			return false;
		}
		
		var url = $('#' + form_id).find('#upload_url').val();
		if(url == "")
		{
			$('#' + form_id).find('#error').html('<div class="alert alert-danger">Sorry! Voice file not uploaded properly.</div>');
			enable_save_button($(saveBtn));
			return;
		}
	}
	
	var newVoiceMail = new Backbone.Model();
	newVoiceMail.url = 'core/api/voicemails';
	newVoiceMail.save(json, {
		success : function(data) {
		App_VoiceMailRouter.VoiceMailCollectionView.collection.add(data);
		App_VoiceMailRouter.VoiceMailCollectionView.render(true);
		enable_save_button($(saveBtn));
		
		if(form_id)
		{
			$('#' + form_id).find("#network_type").val("");
			$('#' + form_id).find("#upload_url").val("");
			$('#' + form_id).find("#extension").val("");
			$('#' + form_id).find(".addFileLink").empty();
			$('#' + form_id).find('#error').empty();
			$('#' + form_id).find(".addFileLink").html('<a href="#" id="S3"><i class="icon-plus-sign"></i> <span>Add File</span></a>');
			$('#' + form_id).each(function() {
				this.reset();
			});
			
			$('#' + modal_id).modal('hide');
		}
		
	}
	});
	
}

// Convert human date to epoch time
function getEpochTimeFromDate(selectedDate)
{
	var d = new Date(selectedDate);
	return getGMTTimeFromDate(d) / 1000;
}

/**
 * Returns GMT time.
 * 
 * @param date
 * @returns
 */
function getGMTTimeFromDate(date)
{
	var current_sys_date = new Date();
	date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);

	// Adding offset to date returns GMT time
	return date.getTime();
}

// Get Timezone Abbreviation from Time
function GetTimezoneShort(now)
{
	// now is expected as a Date object
	if (now == null)
		return '';
	var str = now.toString();
	// Split on the first ( character
	var s = str.split("(");
	if (s.length == 2)
	{
		// remove the ending ')'
		var n = s[1].replace(")", "");
		// split on words
		var parts = n.split(" ");
		var abbr = "";
		for (i = 0; i < parts.length; i++)
		{
			// for each word - get the first letter
			abbr += parts[i].charAt(0).toUpperCase();
		}
		return abbr;
	}
}

// Convert epoch time to human time
function createNormalTime(slotTime)
{

	var counter = 0;

	var date = new Date(slotTime * 1000);

	var hr = date.getHours();
	var normHr = date.getHours();

	// Get mins
	var min = date.getMinutes();

	var result = new Array();

	// Make hrs in 12hr format
	if (hr > 12)
		normHr = hr - 12;
	else if (hr == 0)
		normHr = "12";

	// add 0 before hr if hr is less than 10, so hr will be 2 digit
	if (normHr < 10)
		result[counter++] = "0";

	result[counter++] = normHr;

	// add : in time
	result[counter++] = ":"

	// add 0 before min if min is less than 10, so min will be 2 digit
	if (min < 10)
		result[counter++] = "0";

	// add min in time
	result[counter++] = min;

	// Decide pm or am
	if (hr >= 12)
		result[counter++] = " pm";
	else
		result[counter++] = " am";

	return result.join('');
}

function getSelectedTimeFromDate(date)
{
	date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());
	return date.getTime();
}

function getConvertedTimeFromEpoch(epoch)
{
	// var dateVal = 1395184260;
	var date = moment.unix(epoch);
	var time = date.tz(SELECTED_TIMEZONE).format('hh:mm a');
	return time;
}

function getNormalBusinessHouts(hr)
{
	var hrs = hr;
	hr = hr.split(":")[0];
	var min = hrs.split(":")[1];
	if (parseInt(hr) == 0 || parseInt(hr) == 24)
		return "12:" + min + "am";
	if (parseInt(hr) >= 12 && parseInt(hr) <= 23)
		return getNormalTimeAMPM(hr) + ":" + min + "pm";
	else
		return parseInt(hr) + ":" + min + "am";
}

function getNormalTimeAMPM(hr)
{
	var name_json = { "12" : "12", "13" : "1", "14" : "2", "15" : "3", "16" : "4", "17" : "5", "18" : "6", "19" : "7", "20" : "8", "21" : "9", "22" : "10",
		"23" : "11" };

	if (name_json[hr])
		return name_json[hr];
	else
		return hr;
}

/**
 * in backend data stored as 0-6(mon-sun) in js 0-6(sun-sat)
 * 
 * @param day
 * @returns {Number}
 */
function convertWeekDayToArray(day)
{
	if (parseInt(day) >= 1 && parseInt(day) <= 6)
		return parseInt(day) - 1;
	if (parseInt(day) == 0)
		return 6;
}

function getTimezoneOffset(timezonename)
{

	return moment.tz.zone(SELECTED_TIMEZONE).offset(new Date().getTime());
}

// current date format is 2013-12-4
function getMidnightEpoch(current_date)
{

	if (CURRENT_DAY_OPERATION == true)
	{
		current_date_mozilla = getUnixTimeStampInSpecificTimezone();
	}
	if (!current_date)
	{
		current_date = current_date_mozilla;
	}
	var d = moment.tz(current_date, SELECTED_TIMEZONE).unix();
	return d;
}

function getUnixTimeStampInSpecificTimezone(timezone)
{
	var m = moment().tz(SELECTED_TIMEZONE);

	m.set('hour', 00);
	m.set('minute', 00);
	m.set('second', 00);
	m.set('millisecond', 00);
	return m.valueOf();
}


/**
 * gets the time
 * @param time
 * @param timezone
 * @param firstTimeLoading if {true} then loading from jsp page
 * @returns
 */
function getTimeInVisitorTimezone(time,timezone,firstTimeLoading)
{
	if(!timezone)
		timezone=$("#timezone-"+User_Id).html();
	var m = moment().tz(timezone);
	var hour=null;
	var min=null;
	var result=null;
	if(time){
		result=time.split(":")
		
	}
	if(result){
		hour=result[0];
		min=result[1];
	}
	m.set('hour', parseInt(hour));
	m.set('minute', parseInt(min));
	m.set('second', 00);
	m.set('millisecond', 00);
	if(firstTimeLoading==true){
		return toTimeZoneFirstTimeLoading(m.valueOf());
	}
	return toTimeZone(m.valueOf());
}



/**
 * 
 * @param time  while loading jsp time will be 09:00-18:00 format.
 * @param timezone  we are change @agile user 09:00 to Visitor time @Us/eastrn 
 * @returns {String}
 */
function getTimeInVisitorTimezoneWhileLoading(time,timezone){
	var workhours=null;
	var times=null;
	if(time!="Today is holiday")
		times=time.split("-");
	if(times){
		workhours=getTimeInVisitorTimezone(times[0],timezone,true)+" - "+getTimeInVisitorTimezone(times[1],timezone,true);
	}
	else{
		workhours="Today is holiday";
	}
	return workhours;
}



/**
 * 
 * @param time  after click on date picker we are changing time to visitor time
 * @param zone
 * @returns
 */
function toTimeZone(time, zone) {
	
	return moment.tz(time, SELECTED_TIMEZONE).format('hh:mm a')
}


/**
 * converts the @agile user time to vistor time
 * @param time
 * @param zone
 * @returns
 */
function toTimeZoneFirstTimeLoading(time, zone) {
	
	return moment.tz(time, jstz.determine().name()).format('hh:mm a');
}

function getVisitorWhileLoading(){
	return jstz.determine().name(); 
}


function updateUserBusinessHoursInVisitorTimezone(dates){
	
	if(!dates)
		dates=selecteddate;
	
	for(var k=0;k<=multi_user_ids.length - 1;k++){
		var array=business_hours_array[k];
		var s=array[convertWeekDayToArray(new Date(dates).getDay())];
		if(s.isActive){
			$("#workhours-"+multi_user_ids[k]).html(getTimeInVisitorTimezone(s.timeFrom)+" - "+getTimeInVisitorTimezone(s.timeTill));
		}
		else{
			$("#workhours-"+multi_user_ids[k]).html("No working hours");
		}
	}
}$(function()
{
	// Total available slots on selected date with selecetd slot
	var Available_Slots = null;
	var selected_user_name = null;
	var MIDNIGHT_START_TIME = null;
	var MIDNIGHT_END_TIME = null;

	// Select slot duration 60/30/15min
	$('body').on('click', '.selected_meeting_time', function(e)
	{
		// e.preventDefault();

		$("#details").empty();
		Selected_Time = $(this).attr('data');
		$(".show_slots").find('input:radio').prop('checked', false);
		$(this, [
			'input:radio'
		]).prop('checked', true);
		appointmenttype = $('input[name="selected_meeting_time"]:checked').val();

		$(".activemin").removeClass("activemin");
		$(this).find('.minutes').addClass("activemin");

		// Make next part enable
		$('.segment2').removeClass('me-disable');
		$(".segment2").fadeIn("slow");
		$('#one').addClass('green-bg').html('<i class="fa fa-check"></i>');

		autoscrol(".segment2");

		var isFirefox = typeof InstallTrigger !== 'undefined';
		if (isFirefox)
		{
			$('#datepick').DatePickerSetDate(current_date_mozilla, true);
		}
		$('.checkbox-main-grid').html('<img class="loading-img" src="'+updateImageS3Path("../../img/21-0.gif")+'" style="width: 40px;margin-left: 216px;"></img>');
		if (!selecteddate)
		{
			selecteddate = new Date();
			CURRENT_DAY_OPERATION = true;

		}
		if (selecteddate)
		{

			get_slots(selecteddate, Selected_Time);
		}

		// Reset all
		// resetAll();
	});

	// Confirm filled info with selected slot
	$('#confirm').click(function(e)
	{
		e.preventDefault();
		// Save scheduled slot
		save_web_event('addEventForm', this);
	});

	// Only single slot selection is allowed
	$('body').on('click', '.selected-slot', function(e)
	{
		var currentId = $(this).attr('id');

		$('.selected-slot').each(function()
		{
			if ($(this).attr('id') != currentId)
				$(this).prop("checked", false);
		});

		// Make next part enable
		enableSegment3();

		$(".segment3").fadeIn("slow");
		$("#confirm").show();
		$('#two').addClass('green-bg').html('<i class="fa fa-check"></i>');
		autoscrol(".segment3");

	});

	$('body').on('click', '#multi-user-avatar', function(e)
	{
		$(".thumbnail").css("background", "none");
		$(this).css("background", "#4A90E2");
		$('#users_div').addClass('green-bg').html('<i class="fa fa-check"></i>');
		var domainUser_id = $(this).attr('data');
		if (domainUser_id != User_Id)
		{
			resetToPrevious();
			if (!isEmpty(mapobject))
			{
				SELECTED_DOMAIN_USER = mapobject[domainUser_id];

				User_Id = SELECTED_DOMAIN_USER['id'];
				Agile_User_Id = SELECTED_DOMAIN_USER['agile_user_id'];
				User_Name = selected_user_name = SELECTED_DOMAIN_USER['name'];
				meeting_duration = SELECTED_DOMAIN_USER['meeting_durations'];
				meeting_types = SELECTED_DOMAIN_USER['meeting_types'];
				BUFFERTIME = SELECTED_DOMAIN_USER['buffer_time'];

				if (meeting_types[0] != "")
				{
					$(".meetingtypes").show();
					$(".meetingtypes").empty();
					$(".meetingtypes").append("<option selected disabled>Meeting Type</option>");
					for (var i = 0; i < meeting_types.length; i++)
					{
						$(".meetingtypes").append("<option value='" + meeting_types[i] + "'>" + meeting_types[i] + "</option>");
					}
				}
				else
					$(".meetingtypes").hide();

				slot_details = SELECTED_DOMAIN_USER['slot_details'];
				$('.show_slots').hide();

				getSlotDurations();
				$(".segment1").fadeIn("slow");
				$(".panel-body").height(parseInt(getPanelBodyMaxHeight()) + 26);
				autoscrol(".segment1");
			}

		}

	});

	$('#user_timezone').change(function()
	{

		SELECTED_TIMEZONE = $('#user_timezone').val();

		if (!selecteddate || !Selected_Time)
			return;
		$("#current_local_time").html("Current Time: " + getConvertedTimeFromEpoch(new Date().getTime() / 1000));
		$('.checkbox-main-grid').html('<img class="loading-img" src="'+updateImageS3Path("../../img/21-0.gif")+'" style="width: 40px;margin-left: 216px;"></img>');
		get_slots(selecteddate, Selected_Time);
	});

	function autoscrol(divclass)
	{

		console.log($(divclass).offset().top);

		$("body,html").animate({ scrollTop : $(divclass).offset().top }, 1000);

	}

	function isEmpty(o)
	{
		for ( var p in o)
		{
			if (o.hasOwnProperty(p))
			{
				return false;
			}
		}
		return true;
	}

});// On change of date, change right column above available slot box
function change_availability_date(selected_date)
{

	var date = new Date(selected_date);

	$('.availability').html("Availability on " + date.getDayName() + ", " + date.getMonthName() + ", " + date.getDate());
}

// Get slot details time n description
function getSlotDurations()
{

	if (multiple_schedule_ids)
	{
		fillSlotDetails();
		return;
	}
	else if (single_user_mapobject[User_Id].length > 0)
	{
		fillSlotDetails(single_user_mapobject[User_Id]);
		return;
	}
	// Send request to get slot details time n description
	var initialURL = '/core/api/webevents/calendar/getslotdetails?userid=' + User_Id;
	$
			.getJSON(
					initialURL,
					function(data)
					{
						var slots_data = data;
						var slot_data_temp = [];
						if (slot_array && slot_array.length > 0)
						{
							for (var i = 0; i < slot_array.length; i++)
							{
								if ((parseInt(slot_array[i]) - 1) < data.length && parseInt(slot_array[i]) != 0)
								{

									slot_data_temp[i] = slot_array[i];
								}
							}
							if (slot_data_temp.length > 0)
							{
								slot_array = [];
								slot_array = slot_data_temp;
							}
							else
							{
								$('.segment1')
										.append(
												'<div class="col-sm-12" align="center"><p class="lead" style="color: #777;font-size: 19px;text-align: center;font-weight:normal">please enter valid slot number </p> </div>');
								return;

							}
						}
						if (slot_array && data.length >= slot_array.length && slot_array.length > 0)
						{
							data = [];
							var j = 0;
							for (var i = 0; i < slot_array.length; i++)
							{

								if ((parseInt(slot_array[i]) - 1) < slots_data.length)
								{
									data[j] = slots_data[parseInt(slot_array[i]) - 1];
									j++;
								}

							}
						}
						if (data.length == 3)
						{
							for ( var slotDetail in data)
							{
								var json = JSON.parse(data[slotDetail]);
								$('.segment1')
										.append(
												'<div class="col-sm-4 show_slots"><p title="' + json.title + '" class="choose timeslot-view" data="' + json.time + '"><span class="minutes">' + json.time + ' mins</span><br />' + addDotsAtEnd(json.title) + '</p></div>');
							}
							$('.segment1').append('<div class="clearfix"></div>');
						}
						if (data.length == 2)
						{
							for ( var slotDetail in data)
							{
								var json = JSON.parse(data[slotDetail]);
								$('.segment1')
										.append(
												'<div class="col-sm-5 col-md-4 show_slots" style="margin-left: 99px;"><p title="' + json.title + '" class="choose" data="' + json.time + '"><span class="minutes">' + json.time + ' mins</span><br />' + addDotsAtEnd(json.title) + '</p></div>');
							}
							$('.segment1').append('<div class="clearfix"></div>');
						}
						if (data.length == 1)
						{
							for ( var slotDetail in data)
							{
								var json = JSON.parse(data[slotDetail]);
								$('.segment1')
										.append(
												'<div class="col-sm-12 show_slots" align="center"><p title="' + json.title + '" class="choose" data="' + json.time + '"><span class="minutes">' + json.time + ' mins</span><br />' + addDotsAtEnd(json.title) + '</p></div>');
							}
						}
					});
}

// Enable segment 3 after selection of slot
function enableSegment3()
{
	// Make input enable
	$('.me-disable').removeAttr("disabled");

	// Make next part enable
	$('.me-disable').removeClass('me-disable');
}

// Reset all, set current date in calendar, clear all slots, clear form and make
// segment 3 disable
function resetAll()
{
	// Get current date
	var newDate = new Date();
	var currMonth = (newDate.getMonth() + 1);
	if (currMonth < 10)
		currMonth = "0" + currMonth;
	var currentDate = newDate.getFullYear() + '-' + currMonth + '-' + newDate.getDate();

	// Set current date as selected date
	Selected_Date = currentDate;

	// Set current date in calendar
	$('#datepick').DatePickerSetDate(Selected_Date, true);

	// Default date in right column above available slot box
	change_availability_date(Selected_Date);

	// Empty div where all slots listed
	$('.checkbox-main-grid').html('');

	// Clear form
	document.getElementById("addEventForm").reset();

	Available_Slots = null;
}

// Send selected slot and selected date and get available slots from all sync
// calendar.
function get_slots(s_date, s_slot)
{
	MIDNIGHT_START_TIME = null;
	MIDNIGHT_END_TIME = null;
	var selected_epoch_start = getSelectedTimeFromDate(s_date);
	// Current timezone name
	var timezoneName = SELECTED_TIMEZONE;

	// selected date in current epoch time
	var epochTime = getEpochTimeFromDate(s_date); // milliseconds

	var d = new Date(s_date);
	var secs = epochTime + d.getSeconds() + (60 * d.getMinutes()) + (60 * 60 * d.getHours());
	// gets the midnight of selected date. selected date will be stored in
	// global variable i.e current_date_mozilla
	MIDNIGHT_START_TIME = selected_epoch_start = getMidnightEpoch();
	MIDNIGHT_END_TIME = selected_epoch_end = selected_epoch_start + 86400;
	var start_time = getEpochTimeFromDate(d);
	d.setDate(d.getDate() + 1)
	var end_time = getEpochTimeFromDate(d);
	var timezone = getTimezoneOffset();

	// Send request to get available slot
	var initialURL = '/core/api/webevents/calendar/getslots?&user_id=' + User_Id + '&date=' + s_date + '&slot_time=' + s_slot + "&timezone_name=" + timezoneName + "&epoch_time=" + epochTime + "&startTime=" + selected_epoch_start + "&endTime=" + selected_epoch_end + "&agile_user_id=" + Agile_User_Id + "&timezone=" + timezone;
	$.getJSON(initialURL, function(data)
	{

		// No slots available for selected day
		if (data.length == 0)
		{
			displayNoSlotsMsg();
			return;
		}

		Available_Slots = data;

		// Update in UI
		displaySlots();
	});
}

// Add no slots available msg in grid of checkbox
function displayNoSlotsMsg()
{
	// Empty div where all slots listed, to display new slots
	$('.checkbox-main-grid').html('');

	var date = new Date(selecteddate);

	$('.availability').html("No slots available for " + date.getDayName() + ", " + date.getMonthName() + ", " + date.getDate());

	// Add msg
	// $('.checkbox-main-grid').append('<label for="no-slots"
	// style="margin-left:112px;">Slots are not available for selected
	// day.</label>');
}

// Add slots in grid checkbox in checkbox list
function displaySlots()
{
	var i = 0, j = 0, k = 0;

	// Empty div where all slots listed, to display new slots
	$('.checkbox-main-grid').html('');

	console.log(Available_Slots.length);
	var after_now = [];
	var date = new Date();
	if (BUFFERTIME == null)
	{
		BUFFERTIME = single_user_mapobject['buffer_time'];
	}
	var current_date_time = date.getTime() + parseInt(BUFFERTIME);
	for (var s = 0; s < Available_Slots.length; s++)
	{
		if (Available_Slots[s][0] * 1000 > parseInt(current_date_time))
		{

			after_now.push(Available_Slots[s]);
		}

	}
	console.log(after_now.length);
	Available_Slots = "";
	Available_Slots = after_now;

	if (Available_Slots.length == 0)
	{
		displayNoSlotsMsg();
		return;
	}

	change_availability_date(selecteddate);
	// Number of row
	var numRow = Available_Slots.length / 5;

	numRow++;

	var addList = function()
	{
		var listSlot = "";
		for (i = 0; i <= numRow; i++)
		{
			if (k < Available_Slots.length)
				listSlot = listSlot + '<li><input class="selected-slot" type="checkbox" id="startTime_' + k + '"name="startTime_' + k + '" value="' + Available_Slots[k][0] + '" /><label for="' + Available_Slots[k][0] + '">' + getConvertedTimeFromEpoch(Available_Slots[k][0]) + '</label></li>';

			k++;
		}
		return listSlot;
	}

	// 5 columns
	for (j = 0; j < 5; j++)
	{
		// Add number of rows, slots with time conversion
		$('.checkbox-main-grid').append('<li><ul class="checkbox-grid">' + addList() + '<ul><li>');
	}
}

// Validates the form fields
function isValid(formId)
{

	$(formId).validate();
	return $(formId).valid();
}

/*
 * // Validates phone number function validatePhone(txtPhone) { var a =
 * document.getElementById(txtPhone).value; var filter = /^[0-9-+]+$/; if
 * (filter.test(a)) return true; else return false; }​
 */

// Save selected slot with user details
function save_web_event(formId, confirmBtn)
{
	// Check if the form is valid
	if (!isValid('#' + formId))
	{
		$('#' + formId).find("input").focus();
		return false;
	}

	// Get details
	var data = $('#' + formId).serializeArray();

	// Make json
	var web_calendar_event = {};
	$.each(data, function()
	{
		if (web_calendar_event[this.name])
		{
			if (!web_calendar_event[this.name].push)
			{
				web_calendar_event[this.name] = [
					web_calendar_event[this.name]
				];
			}
			web_calendar_event[this.name].push(this.value || '');
		}
		else
		{
			web_calendar_event[this.name] = this.value || '';
		}
	});

	// Add selected parameter which are out of form
	web_calendar_event["name"] = appointmenttype;
	// web_calendar_event["date"] = Selected_Date;
	web_calendar_event["slot_time"] = Selected_Time;
	web_calendar_event["domainUserId"] = User_Id;
	web_calendar_event["agileUserId"] = Agile_User_Id;
	web_calendar_event["selectedSlotsString"] = [];
	web_calendar_event["timezone"] = SELECTED_TIMEZONE;
	web_calendar_event["midnight_start_time"] = MIDNIGHT_START_TIME;
	web_calendar_event["midnight_end_time"] = MIDNIGHT_END_TIME;
	web_calendar_event["timezone_offset"] = getTimezoneOffset();
	// Get selected slots in UI from available slots list.
	var i = 0;
	for ( var prop in web_calendar_event)
	{
		if (prop.indexOf("startTime") != -1)
		{
			var res = prop.split("_");

			var result = {};
			result["start"] = Available_Slots[res[1]][0];
			result["end"] = Available_Slots[res[1]][1];
			web_calendar_event["selectedSlotsString"][i] = result;
			i++;

			var dd = new Date(result["start"] * 1000);
			web_calendar_event["date"] = dd.toString();
		}
	}

	if (web_calendar_event["selectedSlotsString"].length == 0)
	{
		showAlertModal("appointment_time");
		return false;
	}
	$('#confirm').attr('disabled', 'disabled');
	$('#three').addClass('green-bg').html('<i class="fa fa-check"></i>');
	// Add selected slots to input json
	web_calendar_event["selectedSlotsString"] = JSON.stringify(web_calendar_event["selectedSlotsString"]);

	// Send request to save slot, if new then contact, event
	$
			.ajax({
				url : '/core/api/webevents/calendar/save',
				type : 'PUT',
				contentType : 'application/json; charset=utf-8',
				data : JSON.stringify(web_calendar_event),
				dataType : '',
				success : function(res){
					console.log(res);		
					// style="border-bottom: 1px solid #ddd;"
					var dates = JSON.parse(web_calendar_event.selectedSlotsString);
					var d = dates[0];
					var start = convertToHumanDateUsingMoment("", d.start);
						$('#mainwrap').addClass("appointment-wrap");
						var appointment_success_img1 = "/img/appointment_confirmation.png";
						var temp = '<div style="margin: 26px;font-size:15px;">'

						+ '<div id="info" ><h3 style="border-bottom: 1px solid #ddd;padding-bottom:8px;margin-bottom:15px;"><img style="margin-right: 8px;margin-top: -4px;" src=' + appointment_success_img1 + '><b>Appointment Scheduled</b></h3>' + '<p >Your appointment (' + appointmenttype + ') has been scheduled with <b>' + User_Name + '</b> for ' + web_calendar_event.slot_time + ' mins on ' + start + '. </div>' + '<div class="row">' + '<div class="col-md-12">' + '<div class="row">' + '<div class="col-md-12">' + '<div class="left">' + '<a class="btn btn-primary" id="create_new_appointment" style="margin-top:20px;">Schedule Another Appointment</a>' + '</div>' + '</div>' + '</div>' + '</div>' + '<div align="right" style="position: absolute;right: 280px;bottom: -80px;">' + '<span style="display: inherit;font-style: italic; font-family: Times New Roman; font-size: 10px; padding-right: 71px;">Powered by</span> <a href="https://www.agilecrm.com?utm_source=powered-by&amp;medium=event_scheduler&amp;utm_campaign=' + domainname + '" rel="nofollow" target="_blank"><img src="https://s3.amazonaws.com/agilecrm/panel/uploaded-logo/1383722651000?id=upload-container" alt="Logo for AgileCRM" style="border: 0;background: white;padding: 0px 10px 5px 2px;height: auto;width: 135px;"></a>' + '</div>'

						resetAll();

						$(".container").html(temp);
				},
				error : function(res){
					console.log(res);
					if(res.responseText == "slot booked")
					{
						alert("Looks like this slot is booked already. Please try another one.");
						get_slots(selecteddate, Selected_Time);
						$('#confirm').attr('disabled', false);
					}

					else
					{
						alert("Something went wrong as your appointment was not scheduled. Please try again in few hours. Error: " + res.statusText);
						resetAll();
						location.reload(true);
					}	
				}
				/*
				complete : function(res, status)
				{

					console.log(status);
					// style="border-bottom: 1px solid #ddd;"
					var dates = JSON.parse(web_calendar_event.selectedSlotsString);
					var d = dates[0];
					var start = convertToHumanDateUsingMoment("", d.start);

					if (res.statusText == "OK"  && res.responseText != "slot booked")
					{
						$('#mainwrap').addClass("appointment-wrap");
						var appointment_success_img1 = "/img/appointment_confirmation.png";
						var temp = '<div style="margin: 26px;font-size:15px;">'

						+ '<div id="info" ><h3 style="border-bottom: 1px solid #ddd;padding-bottom:8px;margin-bottom:15px;"><img style="margin-right: 8px;margin-top: -4px;" src=' + appointment_success_img1 + '><b>Appointment Scheduled</b></h3>' + '<p >Your appointment (' + appointmenttype + ') has been scheduled with <b>' + User_Name + '</b> for ' + web_calendar_event.slot_time + ' mins on ' + start + '. </div>' + '<div class="row">' + '<div class="col-md-12">' + '<div class="row">' + '<div class="col-md-12">' + '<div class="left">' + '<a class="btn btn-primary" id="create_new_appointment" style="margin-top:20px;">Schedule Another Appointment</a>' + '</div>' + '</div>' + '</div>' + '</div>' + '<div align="right" style="position: absolute;right: 280px;bottom: -80px;">' + '<span style="display: inherit;font-style: italic; font-family: Times New Roman; font-size: 10px; padding-right: 71px;">Powered by</span> <a href="https://www.agilecrm.com?utm_source=powered-by&amp;medium=event_scheduler&amp;utm_campaign=' + domainname + '" rel="nofollow" target="_blank"><img src="https://s3.amazonaws.com/agilecrm/panel/uploaded-logo/1383722651000?id=upload-container" alt="Logo for AgileCRM" style="border: 0;background: white;padding: 0px 10px 5px 2px;height: auto;width: 135px;"></a>' + '</div>'

						resetAll();

						$(".container").html(temp);

					}
					else if (res.responseText == "slot booked")
					{
						showAlertModal("slot_booking", undefined, function(){
							get_slots(selecteddate, Selected_Time);
							$('#confirm').attr('disabled', false);
						});
					}

					else
					{
						showAlertModal("Something went wrong as your appointment was not scheduled. Please try again in few hours. Error: " + res.statusText, undefined, function(){
							resetAll();
						location.reload(true);
						},undefined,"Appointment Schedule");
						
					}

				} */
				});
}

function convertToHumanDate(format, date)
{

	if (!format)
		format = "ddd, mmmm d yyyy, h:MM TT";

	if (!date)
		return;

	if ((date / 100000000000) > 1)
	{
		return new Date(parseInt(date)).format(format, 0);
	}
	// date form milliseconds
	var d = new Date(parseInt(date) * 1000).format(format);

	return d
}

function convertToHumanDateUsingMoment(format, date)
{

	if (!format)
		format = "ddd, MMM DD YYYY, hh:mm A";

	if (!date)
		return;
	var date = moment.unix(date);
	var time_s = date.tz(SELECTED_TIMEZONE).format(format);
	return time_s;
}

$(function(){
	$('body').on('click','#create_new_appointment',function(e)
	{
		// reloads the page
		location.reload(true);

	});	
});

/**
 * if value morethan 50 adds .. at the end
 */
function addDotsAtEnd(title)
{
	if (title)
	{
		if (title.length > 10)
		{
			var subst = title.substr(0, 10);
			subst = subst + "....";
			return subst;
		}
	}

	return title;
}

function resetToPrevious()
{
	$("#one").html("2");
	$("#two").html("3");
	$("#three").html("4");
	$('#two').removeClass("green-bg").html('3');
	$('#one').removeClass("green-bg").html('2');
	$('#three').removeClass("green-bg").html('4');
	$("#confirm").hide();
	$(".segment3").hide();
	$(".segment2").hide();

}
function fillSlotDetails(slot_durations_one_user)
{
	var slots_data = data = slot_details;
	if (slot_durations_one_user)
	{
		slots_data = data = slot_durations_one_user;
	}
	var slot_data_temp = [];
	if (slot_array && slot_array.length > 0)
	{
		for (var i = 0; i < slot_array.length; i++)
		{
			if ((parseInt(slot_array[i]) - 1) < data.length && parseInt(slot_array[i]) != 0)
			{

				slot_data_temp[i] = slot_array[i];
			}
		}
		if (slot_data_temp.length > 0)
		{
			slot_array = [];
			slot_array = slot_data_temp;
		}
		else
		{
			$('.segment1')
					.append(
							'<div class="col-sm-12" align="center"><p class="lead" style="color: #777;font-size: 19px;text-align: center;font-weight:normal">please enter valid slot number </p> </div>');
			return;

		}
	}
	if (slot_array && data.length >= slot_array.length && slot_array.length > 0)
	{
		data = [];
		var j = 0;
		for (var i = 0; i < slot_array.length; i++)
		{

			if ((parseInt(slot_array[i]) - 1) < slots_data.length)
			{
				data[j] = slots_data[parseInt(slot_array[i]) - 1];
				j++;
			}

		}
	}
	MEETING_DURATION_AND_NAMES = data = generateNewDataArray(data);
	var dataLength = 12 / data.length;
	for ( var slotDetail in data)
	{
		var json = JSON.parse(data[slotDetail]);
		var meeting_names = json.meeting_names;
		var temp = '';

		for ( var meeting_name in meeting_names)
		{
			temp += '<div class="radio"><label><input class="c-p selected_meeting_time" type="radio" data="' + json.time + '" name="selected_meeting_time" value="' + meeting_names[meeting_name] + '"><i></i>' + meeting_names[meeting_name] + '</label></div>';
		}
		var select = '<div class="panel panel-default">' + '<div class="panel-heading font-bold">' + json.time + ' mins</div>' + '<div class="panel-body">' + '<form class="bs-example form-horizontal">' + '<div class="form-group" style="margin-left:7px;">' + temp + '</div></form></div></div>';
		$('.segment1').append('<div class="col-sm-' + dataLength + ' show_slots"><p class="timeslot-view">' + select + '</p></div>');
	}
	if(multi_user_ids.length<2)
	$(".panel-body").height(parseInt(getPanelBodyMaxHeight()) + 26);
	$('.segment1').append('<div class="clearfix"></div>');

}

function getPanelBodyMaxHeight()
{
	var max = 0;
	$('.panel-body').each(function()
	{
		var height = $(this).height();
		if (height > max)
		{
			max = height;
		}
	});
	return max;
}

function generateNewDataArray(data)
{
	var finalJsonArray = [];
	for ( var slotDetail in data)
	{
		var json = JSON.parse(data[slotDetail]);

		var json_meeting_names = [];
		if (json.title.indexOf(",") > -1)
		{
			json_meeting_names = json.title.split(",");
		}
		else
		{
			json_meeting_names.push(json.title);
		}
		if (json_meeting_names.length > 0)
		{
			var newJson = {};
			newJson.time = json.time;
			newJson.meeting_names = json_meeting_names;
			finalJsonArray.push(JSON.stringify(newJson));

		}
		else
		{
			finalJsonArray.push(JSON.stringify(json));
		}

	}
	return finalJsonArray;
}
// Global variables
var _agile_contact; // Agile contact object
var _agile_webrules; // Array of agile web rule objects

// Rules object with methods, to verify the conditions
var rules = {

	// To check if tags are equal
	tags_in : function(webrules, _agile_contact) {
		if (webrules.tags_in && _agile_contact) {
			var flag = 0;
			var i = webrules.tags_in.length;
			var j = _agile_contact.tags.length;
			if (i <= j) {
				for ( var k = 0; k < i; k++) {
					for ( var l = 0; l < j; l++) {

						// Check if tags from webrules match with contact tags
						if (webrules.tags_in[k] === _agile_contact.tags[l]) {
							flag++;
						}
					}
				}
			}
			if (flag == i && flag !== 0 && i !== 0)
				return true;
		}
	},

	// To check if tags are not equal
	tags_out : function(webrules, _agile_contact) {
		if (_agile_contact && webrules.tags_out) {
			var count = 0;
			var i = webrules.tags_out.length;
			var j = _agile_contact.tags.length;
			for ( var k = 0; k < i; k++) {
				for ( var l = 0; l < j; l++) {

					// Check if tags from webrules match contact tags
					if (_agile_contact.tags[l] !== webrules.tags_out[k]) {
						count++;
					}
				}
			}
			if (count == i * j && count !== 0 && i !== 0 && j !== 0)
				return true;
		}
	},

	// To check if tags match and verify time conditions like tags created
	// after, before, in the last specified days
	tags_time : function(webrules, _agile_contact) {
		if (webrules.tags_time && _agile_contact) {
			var f = 0;
			var i = webrules.tags_time.tags.length;
			var j = _agile_contact.tagsWithTime.length;
			var current_time = new Date().getTime();
			if (i <= j) {
				for ( var d = 0; d < i; d++) {
					for ( var h = 0; h < j; h++) {
						if (webrules.tags_time.tags[d] == _agile_contact.tagsWithTime[h].tag) {
							if ((webrules.tags_time.condition == "LAST" && (0 <= (current_time - _agile_contact.tagsWithTime[h].createdTime) && (current_time - _agile_contact.tagsWithTime[h].createdTime) <= (webrules.tags_time.time * 86400000)))
									|| (webrules.tags_time.condition == "BEFORE" && (webrules.tags_time.time >= _agile_contact.tagsWithTime[h].createdTime))
									|| (webrules.tags_time.condition == "AFTER" && (webrules.tags_time.time <= _agile_contact.tagsWithTime[h].createdTime))
									|| (webrules.tags_time.condition == "EQUALS" && (webrules.tags_time.time <= _agile_contact.tagsWithTime[h].createdTime && _agile_contact.tagsWithTime[h].createdTime <= (webrules.tags_time.time + 86400000)))
									|| (webrules.tags_time.condition == "BETWEEN" && (webrules.tags_time.time_min <= _agile_contact.tagsWithTime[h].createdTime && _agile_contact.tagsWithTime[h].createdTime <= webrules.tags_time.time_max))) {
								f++;
							}
						}
					}
				}
			}
			if (f == i && f !== 0 && i !== 0)
				return true;
		}
	},

	// To check if score greater than min_score
	min_score : function(webrules, _agile_contact) {
		if (_agile_contact && webrules.min_score
				&& _agile_contact.lead_score >= webrules.min_score)
			return true;
	},

	// To check if score less than max_score
	max_score : function(webrules, _agile_contact) {
		if (_agile_contact && webrules.max_score
				&& _agile_contact.lead_score <= webrules.max_score)
			return true;
	},

	// To check if referrer url matches with url in webrules
	referrer_is : function(anon_webrules) {
		if (anon_webrules.referrer_is === document.referrer)
			return true;
	},

	// To check if referrer url matches with specified string in webrules
	referrer_matches : function(anon_webrules) {
		var url = document.referrer;
		if (url.indexOf(anon_webrules.referrer_matches) !== -1)
			return true;
	},

	// To check current page matches with given url in webrules
	page_view_is : function(anon_webrules) {
		if (anon_webrules.page_view_is === document.location.href)
			return true;
	},

	// To check if current page url matches with given string in webrules
	page_view_matches : function(anon_webrules) {
		var url = document.location.href;
		if (url.indexOf(anon_webrules.page_view_matches) !== -1)
			return true;
	},

	// To check if session is new or ongoing
	session_type : function(anon_webrules) {
		if (anon_webrules.session_type === "first")
			return agile_session.new_session;
		if (anon_webrules.session_type === "ongoing")
			return !agile_session.new_session;
	},

	// To check if visit is first visit or repeat
	visit_type : function(anon_webrules) {
		if (anon_webrules.visit_type === "repeat")
			return !agile_guid.new_guid;
		if (anon_webrules.visit_type === "first")
			return agile_guid.new_guid;
	},

	// To check if contact properties match or not
	contact_properties_in : function(webrules, _agile_contact) {
		if (_agile_contact && webrules.contact_properties_in) {
			var flag = 0;
			var l = webrules.contact_properties_in.length;
			var k = _agile_contact.properties.length;
			for ( var r = 0; r < l; r++) {
				for ( var s = 0; s < k; s++) {

					// Check if contact properties from webrules match with
					// contact properties
					if (webrules.contact_properties_in[r].name === _agile_contact.properties[s].name
							&& webrules.contact_properties_in[r].value === _agile_contact.properties[s].value) {
						flag++;
					}
				}
			}
			if (flag == l && flag !== 0 && l !== 0)
				return true;
		}
	},

	// To check if contact properties do not match
	contact_properties_out : function(webrules, _agile_contact) {
		if (_agile_contact && webrules.contact_properties_out) {
			var count = 0;
			var l = webrules.contact_properties_out.length;
			var k = _agile_contact.properties.length;
			for ( var g = 0; g < l; g++) {
				for ( var h = 0; h < k; h++) {

					// Check if contact properties from webrules match with
					// contact properties
					if (webrules.contact_properties_out[g].name === _agile_contact.properties[h].name
							&& webrules.contact_properties_out[g].value !== _agile_contact.properties[h].value) {
						count++;
					}
				}
			}
			if (count == l && count !== 0 && l !== 0 && k !== 0)
				return true;
		}
	},

	// To check contact created time is after, before or in the last few days
	contact_time : function(webrules, _agile_contact) {
		if (_agile_contact && webrules.contact_time) {
			var current_time = new Date().getTime();
			var created_time = (_agile_contact.created_time * 1000);
			var dif = (current_time - created_time);
			if ((webrules.contact_time.condition == "LAST" && (0 <= dif && dif <= (webrules.contact_time.time * 86400000)))
					|| (webrules.contact_time.condition == "AFTER" && (webrules.contact_time.time <= created_time))
					|| (webrules.contact_time.condition == "BEFORE" && (webrules.contact_time.time >= created_time))
					|| (webrules.contact_time.condition == "ON" && (webrules.contact_time.time <= created_time && created_time <= (86400000 + webrules.contact_time.time)))
					|| (webrules.contact_time.condition == "BETWEEN" && (webrules.contact_time.time_min <= created_time && created_time <= webrules.contact_time.time_max)))
				return true;
		}
	}
};

// Modal API function to show modal

function show_modal(modal_data, modal_options, modal_callback) {

	var SM = new SimpleModal(modal_options);
	SM.addButton("Ok", "simple_modal_btn primary", function() {

		// Callback for confirm action of modal
		if (modal_options.form_id && (document.id(modal_options.form_id))) {
			var contact = {};
			var collection = document.id('modal-form');
			for ( var i = 0; i < collection.length; i++) {
				if (collection[i].name.toLowerCase() == "firstname"
						|| collection[i].name.toLowerCase() == "first_name"
						|| collection[i].name.toLowerCase() == "first name"
						|| collection[i].name.toLowerCase() == "name"
						|| collection[i].name.toLowerCase() == "first") {
					contact.first_name = collection[i].value;
				}
				if (collection[i].name.toLowerCase() == "lastname"
						|| collection[i].name.toLowerCase() == "last_name"
						|| collection[i].name.toLowerCase() == "last name"
						|| collection[i].name.toLowerCase() == "last") {
					contact.last_name = collection[i].value;
				}
				if (collection[i].name.toLowerCase().indexOf("email") != -1) {
					contact.email = collection[i].value;
				}
			}
			_agile.create_contact(contact, {
				success : function(data) {
					_agile.set_email(contact.email);
					_agile.add_tag('signup', {
						success : function() {
							console.log("tag added")
						},
						error : function() {
							console.log("error");
						}
					});
					console.log("success");
				},
				error : function(data) {
					console.log("error");
				}
			});
		}
		this.hide();
	});

	// If modal is type confirmation adding cancel button
	if (modal_options.show_btn_cancel) {
		SM.addButton("Cancel", "simple_modal_btn");
	}

	// Assign modal type, title, contents, callback

	SM.show({
		"model" : "modal",
		"title" : modal_data.title,
		"contents" : function() {
			if (modal_options.form_id && (document.id(modal_options.form_id)))
				return '<form id=modal-form>'
						+ document.id(modal_options.form_id).innerHTML
						+ '</form>';
			else
				return modal_data.contents;
		},
	});
}

// Noty API function to show noty

function show_noty(noty_data, noty_options, noty_callback) {
	head.js("lib/noty/jquery.noty.js", "/lib/noty/layouts/" + noty_options.position+".js",
			"lib/noty/themes/default-custom.js", function() {
					
				// Format noty_callback to noty API
				var call_back = {};
				if (noty_callback && typeof (noty_callback) === "function")
					call_back.onClose = noty_callback;

				// Assign noty text, type, theme, callback etc
				var n = noty({
					text : noty_data,
					
					type : noty_options.type,
					dismissQueue : noty_options.dismiss_queue,
					layout : noty_options.position,
					theme : noty_options.theme,
					callback : call_back,
					timeout : 2000
				});
			});
}

function execute_action(modal_data, modal_options, modal_callback, noty_data,
		noty_options, noty_callback, add_campaign_id, rm_campaign_id,
		add_score, rm_score, add_tags, rm_tags, email) {
	// If webrule action is modal
	if (modal_options.btn_ok) {
		show_modal(modal_data, modal_options, modal_callback);
	}

	// If webrule action is noty
	if (noty_options.type) {
		show_noty(noty_data, noty_options, noty_callback);
	}

	// If webrule action is add campaign
	if (add_campaign_id.length !== 0 && email) {
		for ( var u = 0; u < add_campaign_id.length; u++) {
			_agile.add_campaign({
				"id" : add_campaign_id[u]
			}, {
				success : function() {
					console.log("campaign assigned");
				},
				error : function() {
					console.log("error in assigning campaign");
				}
			}, email);
		}
	}

	// If webrule is to add tag
	if (add_tags.length !== 0 && email)
		_agile.add_tag(add_tags.toString(), {
			success : function() {
				console.log("tags added");
			},
			error : function() {
				console.log("failed to add tags");
			}
		}, email);

	// If webrule is to add score
	if (add_score && email)
		_agile.add_score(add_score, {
			success : function() {
				console.log("score added");
			},
			error : function() {
				console.log("failed to add score");
			}
		}, email);

	// If webrule action is unsubscribe campaign
	if (rm_campaign_id.length !== 0 && email) {
		for ( var v = 0; v < rm_campaign_id.length; v++) {
			_agile.unsubscribe_campaign({
				"id" : rm_campaign_id[v]
			}, {
				success : function() {
					console.log("unsubscribed");
				},
				error : function() {
					console.log("error in unsubscribing");
				}
			}, email);
		}
	}

	// If webrule is to remove score
	if (rm_score && email)
		_agile.add_score(rm_score, {
			success : function() {
				console.log("score");
			},
			error : function() {
				console.log("failed to subtract score");
			}
		}, email);

	// If webrule is to remove tags
	if (rm_tags.length !== 0 && email)
		_agile.remove_tag(rm_tags.toString(), {
			success : function() {
				console.log("tags removed");
			},
			error : function() {
				console.log("failed to remove tags");
			}
		}, email);
}

// Function to check if all conditions in a single webrule object are true,
// if yes call API (modal and/or noty and/or add-campaign)

function perform_action(anon_webrules, webrules, modal_data, modal_options,
		modal_callback, noty_data, noty_options, noty_callback,
		add_campaign_id, rm_campaign_id, add_score, rm_score, add_tags, rm_tags) {
	var len = 0; // Length of anon_webrules
	var _counter = 0; // Counter for satisfied anon_webrules
	var t = 0; // Webrules length

	// Get number of webrules
	for ( var j in webrules) {
		if (webrules.hasOwnProperty(j))
			t++;
	}

	// Check if all anonymous conditions are true
	for ( var anon_rule in anon_webrules) {
		len++;
		if (anon_webrules.hasOwnProperty(anon_rule)
				&& rules[anon_rule](anon_webrules)) {
			_counter++;
		}
	}
	var email; // Agile contact email

	// Get email from cookie
	agile_getEmail({
		success : function(data) {
			email = data.email;

			if (email == "null" || email == undefined) {
				if (t == 0) {
					if (len == _counter && len !== 0 && _counter !== 0) {
						execute_action(modal_data, modal_options,
								modal_callback, noty_data, noty_options,
								noty_callback, add_campaign_id, rm_campaign_id,
								add_score, rm_score, add_tags, rm_tags);
					}
				}
			} else if (email) {
				_agile
						.get_contact(
								email,
								{
									success : function(data) {
										_agile_contact = data;
										var counter = 0;
										for ( var rule in webrules) {
											if (webrules.hasOwnProperty(rule)
													&& rules[rule](webrules,
															_agile_contact)) {
												counter++;
											}
										}

										if ((t == 0 && len !== 0 && len == _counter)
												|| (t !== 0 && t == counter && len == 0)
												|| (t != 0 && t == counter
														&& len == _counter && len !== 0)) {
											execute_action(modal_data,
													modal_options,
													modal_callback, noty_data,
													noty_options,
													noty_callback,
													add_campaign_id,
													rm_campaign_id, add_score,
													rm_score, add_tags,
													rm_tags, email);
										}
									},
									error : function() {
										if (t == 0 && len !== 0
												&& len == _counter) {
											execute_action(modal_data,
													modal_options,
													modal_callback, noty_data,
													noty_options,
													noty_callback,
													add_campaign_id,
													rm_campaign_id, add_score,
													rm_score, add_tags, rm_tags);
										}
									}
								});
			}
		}
	});
}

// Webrule API to get array of webrule objects (if multiple webrules defined)
// from agile,
// iterate, and build webrule actions, condition

function execute_webrules() {

	setTimeout(
			function() {
				_agile
						.web_rules({
							success : function(data) {

								// Build webrules
								var r = _agile_webrules[i].rules.length;
								for ( var s = 0; s < r; s++) {

									if (_agile_webrules[i].rules[s].LHS == "tags") {
										if (_agile_webrules[i].rules[s].CONDITION == "EQUALS")
											webrules.tags_in = _agile_webrules[i].rules[s].RHS
													.replace(', ', ',').split(
															',');
										if (_agile_webrules[i].rules[s].CONDITION == "NOTEQUALS")
											webrules.tags_out = _agile_webrules[i].rules[s].RHS
													.replace(', ', ',').split(
															',');
									}
									if (_agile_webrules[i].rules[s].LHS == "page") {
										if (_agile_webrules[i].rules[s].CONDITION == "EQUALS")
											anon_webrules.page_view_is = _agile_webrules[i].rules[s].RHS;
										if (_agile_webrules[i].rules[s].CONDITION == "MATCHES")
											anon_webrules.page_view_matches = _agile_webrules[i].rules[s].RHS;
									}
									if (_agile_webrules[i].rules[s].LHS == "visit") {
										if (_agile_webrules[i].rules[s].CONDITION == "FIRST_TIME")
											anon_webrules.visit_type = "first";
										if (_agile_webrules[i].rules[s].CONDITION == "REPEAT")
											anon_webrules.visit_type = "repeat";
									}
									if (_agile_webrules[i].rules[s].LHS == "referrer") {
										if (_agile_webrules[i].rules[s].CONDITION == "EQUALS")
											anon_webrules.referrer_is = _agile_webrules[i].rules[s].RHS;
										if (_agile_webrules[i].rules[s].CONDITION == "MATCHES")
											anon_webrules.referrer_matches = _agile_webrules[i].rules[s].RHS;
									}
									if (_agile_webrules[i].rules[s].LHS == "tags_time"
											&& _agile_webrules[i].rules[s].CONDITION == "EQUALS") {
										webrules.tags_time = {};
										if (_agile_webrules[i].rules[s].nested_condition == "BETWEEN") {
											webrules.tags_time["tags"] = _agile_webrules[i].rules[s].RHS
													.replace(', ', ',').split(
															',');
											webrules.tags_time["time_min"] = _agile_webrules[i].rules[s].nested_lhs;
											webrules.tags_time["time_max"] = _agile_webrules[i].rules[s].nested_rhs;
											webrules.tags_time["condition"] = _agile_webrules[i].rules[s].nested_condition;
										}
										if (_agile_webrules[i].rules[s].nested_condition == "BEFORE"
												|| _agile_webrules[i].rules[s].nested_condition == "AFTER"
												|| _agile_webrules[i].rules[s].nested_condition == "EQUALS"
												|| _agile_webrules[i].rules[s].nested_condition == "NEXT"
												|| _agile_webrules[i].rules[s].nested_condition == "LAST") {
											webrules.tags_time["tags"] = _agile_webrules[i].rules[s].RHS
													.replace(', ', ',').split(
															',');
											webrules.tags_time["time"] = _agile_webrules[i].rules[s].nested_lhs;
											webrules.tags_time["condition"] = _agile_webrules[i].rules[s].nested_condition;
										}
									}
									if (_agile_webrules[i].rules[s].LHS == "created_time") {
										webrules.contact_time = {};
										if (_agile_webrules[i].rules[s].CONDITION == "BEFORE"
												|| _agile_webrules[i].rules[s].CONDITION == "AFTER"
												|| _agile_webrules[i].rules[s].CONDITION == "ON"
												|| _agile_webrules[i].rules[s].CONDITION == "LAST"
												|| _agile_webrules[i].rules[s].CONDITION == "NEXT") {
											webrules.contact_time["time"] = _agile_webrules[i].rules[s].RHS;
											webrules.contact_time["condition"] = _agile_webrules[i].rules[s].CONDITION;
										}
										if (_agile_webrules[i].rules[s].CONDITION == "BETWEEN") {
											webrules.contact_time["time_max"] = _agile_webrules[i].rules[s].RHS_NEW;
											webrules.contact_time["time_min"] = _agile_webrules[i].rules[s].RHS;
											webrules.contact_time["condition"] = _agile_webrules[i].rules[s].CONDITION;
										}
									}
									if (_agile_webrules[i].rules[s].LHS == "title"
											|| _agile_webrules[i].rules[s].LHS == "company"
											|| _agile_webrules[i].rules[s].LHS == "owner_id") {
										var property_json = {};
										property_json.name = _agile_webrules[i].rules[s].LHS;
										property_json.value = _agile_webrules[i].rules[s].RHS;
										if (_agile_webrules[i].rules[s].CONDITION == "EQUALS") {
											if (!webrules.contact_properties_in)
												webrules.contact_properties_in = [];
											webrules.contact_properties_in
													.push(property_json);
										}
										if (_agile_webrules[i].rules[s].CONDITION == "NOTEQUALS") {
											if (!webrules.contact_properties_out)
												webrules.contact_properties_out = [];
											webrules.contact_properties_out
													.push(property_json);
										}
									}
								}

								perform_actions(data);
							},
							error : function() {
								console.log("error");
							}
						});
			}, 150);
}

function perform_actions(data, validate) {

	// Agile API to get array of webrule objects from datastore
	_agile_webrules = data;
	console.log(_agile_webrules);
	var l = _agile_webrules.length;

	// Iterate array of webrule objects and build rules, options, modal/noty
	// content etc
	// Each webrule object has three main parts webrule conditions, webrule
	// actions, data (title / content)
	for ( var i = 0; i < l; i++) {

		var webrules = {}; // Webrule object
		var anon_webrules = {}; // Webrules object for anonymous visitor
		var modal_data = {}; // Modal data
		var modal_options = {}; // Modal options
		var modal_callback; // Modal callback
		var noty_callback; // Noty callback
		var noty_data = {}; // Noty data
		var noty_options = {}; // Noty options
		var add_campaign_id = []; // Workflow id
		var rm_campaign_id = []; // Workflow id
		var add_tags = []; // Tags array to add
		var rm_tags = []; // Tags array to remove
		var add_score; // Score to add
		var rm_score // Score to remove

		// Build webrule actions
		console.log(_agile_webrules[i]);
		var u = _agile_webrules[i].actions.length;
		console.log()
		console.log(u);
		console.log(data);
		for ( var t = 0; t < u; t++) {

			console.log(_agile_webrules[i].actions[t]);

			// If webrule action is modal
			if (_agile_webrules[i].actions[t].action == "MODAL_POPUP") {

				// If modal is of type confirmation
				if (_agile_webrules[i].actions[t].popup_pattern == "confirmation") {
					modal_options.show_btn_cancel = true;
					modal_data.title = _agile_webrules[i].actions[t].title;
					modal_data.contents = _agile_webrules[i].actions[t].popup_text;
				}

				// If modal is of type information
				if (_agile_webrules[i].actions[t].popup_pattern == "information") {
					modal_options.show_btn_cancel = false;
					modal_data.title = _agile_webrules[i].actions[t].title;
					modal_data.contents = _agile_webrules[i].actions[t].popup_text;
					modal_options.hideHeader = false;
				}

				// If modal is of type form
				if (_agile_webrules[i].actions[t].popup_pattern == "form") {
					modal_options.form_id = _agile_webrules[i].actions[t].title;
					modal_options.hideHeader = true;
					modal_options.show_btn_cancel = true;
				}

				// If modal is of type custom_html
				if (_agile_webrules[i].actions[t].popup_pattern == "custom_html") {
					var e = document.createElement('div');
		        	e.innerHTML = _agile_webrules[i].actions[t].popup_text;
		        	var data = e.childNodes[0].nodeValue;
		        	if(data)
		        	    modal_data.contents = data;
		        	else modal_data.contents = e.innerHTML;
		            modal_options.hideHeader = true;
		            modal_options.hideFooter = true;
				}

				// Build options for webrule action (modal) right now hardcoded
				// as no option from UI
				modal_options.btn_ok = 'Subscribe';
				modal_options.btn_cancel = 'Cancel';
				modal_options.width = 275;
				modal_options.overlayOpacity = 0.6;
				modal_options.onAppend = function() {
					document.id('simple-modal').fade('hide');
					setTimeout((function() {
						document.id('simple-modal').fade('show')
					}), 200);
					var tw = new Fx.Tween(document.id('simple-modal'), {
						duration : 0,
						//transition : 'bounce:out',
						link : 'cancel',
						property : 'top'
					}).start(-400, 150)
				};
				modal_callback = function() {
					test('this_is_modal_callback');
				}
			}

			console.log(_agile_webrules[i].actions[t].action);
			// If webrule action is noty and type is custom_html
			if (_agile_webrules[i].actions[t].action == "CORNER_NOTY"
					&& _agile_webrules[i].actions[t].popup_pattern == "information") {

				if (_agile_webrules[i].actions[t].position == "RIGHT_BOTTOM")
					noty_options.position = "bottomRight";
				if (_agile_webrules[i].actions[t].position == "RIGHT_TOP")
					noty_options.position = "topRight";
				if (_agile_webrules[i].actions[t].position == "LEFT_BOTTOM")
					noty_options.position = "bottomLeft";
				if (_agile_webrules[i].actions[t].position == "LEFT_TOP")
					noty_options.position = "topLeft";
				if (_agile_webrules[i].actions[t].position == "TOP")
					noty_options.position = "top";
				if (_agile_webrules[i].actions[t].position == "BOTTOM")
					noty_options.position = "bottom";

				noty_data = _agile_webrules[i].actions[t].popup_text;
				noty_options.theme = 'defaultTheme';
				noty_options.dismiss_queue = 'true';
				noty_options.type = "information";
				noty_callback = function() {
					test('this_is_noty_callback');
				}
			}

			// If webrule action is campaign
			if (_agile_webrules[i].actions[t].action == "ASSIGN_CAMPAIGN")
				add_campaign_id.push(_agile_webrules[i].actions[t].RHS);
			if (_agile_webrules[i].actions[t].action == "UNSUBSCRIBE_CAMPAIGN")
				rm_campaign_id.push(_agile_webrules[i].actions[t].RHS);

			// If webrule action is tag
			if (_agile_webrules[i].actions[t].action == "ADD_TAG")
				add_tags.push(_agile_webrules[i].actions[t].popup_pattern);
			if (_agile_webrules[i].actions[t].action == "REMOVE_TAG")
				rm_tags.push(_agile_webrules[i].actions[t].popup_pattern);

			// If webrule action is score
			if (_agile_webrules[i].actions[t].action == "ADD_SCORE")
				add_score = _agile_webrules[i].actions[t].popup_pattern;
			if (_agile_webrules[i].actions[t].action == "SUBTRACT_SCORE")
				rm_score = _agile_webrules[i].actions[t].popup_pattern;
		}

		if (!validate) {
			execute_action(modal_data, modal_options, modal_callback,
					noty_data, noty_options, noty_callback, add_campaign_id,
					rm_campaign_id, add_score, rm_score, add_tags, rm_tags)
			return;
		}
		// Call to method to check all conditions in a webrule are true and
		// perform action
		perform_action(anon_webrules, webrules, modal_data, modal_options,
				modal_callback, noty_data, noty_options, noty_callback,
				add_campaign_id, rm_campaign_id, add_score, rm_score, add_tags,
				rm_tags);
	}

}

// Test callback

function test(k) {
	console.log(k);
}
/**
 * For sorting of web rules
 * @param el
 */
function enableWebrulesSorting(el)
{
	$("#webrule-model-list").append("<tr class='pseduo-row' style='display:none;'><td></td><td></td><td></td><td></td></tr>");
	// Loads jquery-ui to get sortable functionality on widgets
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function()
	{
		$('.webrule-sortable', el).sortable( 
		{
				axis: "y" ,
				forcePlaceholderSize: true,
				placeholder:'<tr><td></td></tr>',
				handle: ".icon-move",
				containment: "#webrule-model-list",
				cursor: "move",
				forceHelperSize: true,
				scroll: false,
				items: "> tr",
				helper: function(e, tr)
				{
				    var $originals = tr.children();
				    var $helper = tr.clone();
				    $helper.children().each(function(index)
				    {
				      // Set helper cell sizes to match the original sizes
				      $(this).width($originals.eq(index).width());
				    });
				    return $helper;

				}

		});

		/*
		 * This event is called after sorting stops to save new positions of
		 * widgets
		 */
		$('.webrule-sortable', el).on("sortstop", function(event, ui) {

			var models = [];

			/*
			 * Iterate through each all the widgets and set each widget
			 * position and store it in array
			 */
			$('.webrule-sortable > tr', el).each(function(index, element)
			{
				if(!$(element).hasClass("pseduo-row")){


					var model_id = $(element).find('.data').attr('data');

					// Get Model, model is set as data to widget element
					var model = App_WebReports.webrules.collection.get(model_id);

					model.set({ 'position' : index+1 }, { silent : true });

					models.push({ id : model.get("id"), position : index+1 });
				}

			});

			// Saves new positions in server
			$.ajax({ type : 'POST', url : '/core/api/webrule/positions', data : JSON.stringify(models),
				contentType : "application/json; charset=utf-8", dataType : 'json' });
		});
	});
}
function chainWebRules(el, data, isNew, actions)
{
	var element_clone = $(el).clone();
	
	$("#campaign-actions", el).chained($("#action", el), function(){
	});
	$("#action-details", el).chained($("#action", el),  function(){
	});
	$("#RHS_CALL_POPUOP", el).chained($("#action", el),  function(){
	});
	$("#WEB_RULE_RHS", el).chained($("#action", el), function(el, self){

		var select = $('select', $(self));
		
		if(data)
			{
				$.each(data, function(index, action){
					if(index == "actions" && (action[0].action == "ASSIGN_CAMPAIGN" || action[0].action == "UNSUBSCRIBE_CAMPAIGN"))
					{
						$(select).find('option[value='+ action[0].RHS +']').attr("selected", "selected");
						return false;
					}
				});	
			}
		
		// Enable tags typeahead if tags field is available 
		var element = $(".tags", self);
		if(element.length > 0)
			addTagsDefaultTypeahead(self);
		
	});
	$("#campaign", el).chained($("#action", el));
	
	$("#possition", el).chained($("#action", el));

	
	$("#timer", el).chained($("#delay", el));
	$("#delay", el).chained($("#action", el));
	
	$("#noty-message", el).chained($("#action", el), function(select, self){
		var value = $("select", select).val();					
		$(self).show();
		console.log(value);
	
		if(value == "MODAL_POPUP" || value == "CORNER_NOTY" || value== "CALL_POPUP")
			{
				if(value == "MODAL_POPUP"  || value=="CALL_POPUP")
				$("#tiny_mce_webrules_link", self).show();

				if(value=="CALL_POPUP"){
					loadSavedTemplate("call/callpopup.html");
					$('#twilio-info',self).show();
				}
				self.find(".web-rule-preview").show();
			return;
			}
		self.find(".web-rule-preview").hide();
	});
	
	
	if(data && data.actions)
		deserializeChainedSelect1($(el).find('form'), data.actions, element_clone, data.actions[0]);
	
	scramble_input_names($(".reports-condition-table", element_clone))
}

/**
*  WebRules event view
*/
var Web_Rules_Event_View = Base_Model_View.extend({
		    events: {
		 		'click .web-rule-multiple-add' : 'ruleMultipleAdd',
		 		'click i.webrule-multiple-remove' : 'ruleMultipleRemove',
		 		'click i.filter-contacts-web-rule-multiple-add' : 'webruleMultipleAdd',
		 		'click i.filter-contacts-web-rule-multiple-remove' : 'webruleMultipleRemove',
		 		'click .web-rule-preview' : 'webrulePreview',
		 		'click #tiny_mce_webrules_link' : 'tinymceWebruleLink',
		    },

			// Filter Contacts- Clone Multiple
			ruleMultipleAdd: function(e)
			{
				e.preventDefault();

				// To solve chaining issue when cloned
				getTemplate('webrules-add', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;

					var htmlContent = $(template_ui).find('.webrule-actions > div').clone();
					var action_count=$('#action select').length;
					for(var i=0;i<action_count;i++){

						if($($('#action select')[i]).val()==='CALL_POPUP' || $($('#action select')[i]).val()==='MODAL_POPUP'){
							$($(htmlContent).find('#action select optgroup option')[0]).remove();
							$($(htmlContent).find('#action select optgroup option')[1]).remove();
						}
					}
					chainWebRules($(htmlContent)[0], undefined, true);
					// var htmlContent = $(this).closest("tr").clone();
					$(htmlContent).find("i.webrule-multiple-remove").css("display", "inline-block");
					$(".webrule-actions").append(htmlContent);

				}, null);

			},
			
			// Filter Contacts- Remove Multiple
			ruleMultipleRemove: function(e)
			{
				$(e.currentTarget).closest(".chained-table > div").remove();
			},
			
			// Filter Contacts- Clone Multiple
			webruleMultipleAdd: function(e)
			{
				// To solve chaining issue when cloned
				var that = $(e.currentTarget);
				getTemplate('webrules-add', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;

					var htmlContent = $(template_ui).find('.web-rule-contact-condition-table tr').clone();
					scramble_input_names($(htmlContent));

					chainFilters(htmlContent, undefined, undefined, true);

					$(htmlContent).find("i.filter-contacts-web-rule-multiple-remove").css("display", "inline-block");
					$(that).parents("tbody").append(htmlContent);

				}, null);
				
			},

			// Filter Contacts- Remove Multiple
			webruleMultipleRemove: function(e)
			{
				var targetEl = $(e.currentTarget);
				$(targetEl).closest("tr").remove();
			},

			webrulePreview: function(e){
				e.preventDefault();
				var that = $(e.currentTarget);
				_agile_require_js("https://agiletestapp.appspot.com/agilewebgrabbers/scripts/agile-webrules-min.js", function(){

					// Serializes webrule action to show preview
					var action = serializeChainedElement($(that).closest('table'));
					// Popup va'ue should be in a json object with key value, as it is returned that way from server text field
					var popup_text = {};
					popup_text["value"] = action.popup_text;
					action.popup_text = popup_text;
					action.delay = "IMMEDIATE";
					
						_agile_execute_action(action);
					});
			},

			tinymceWebruleLink: function(e){
				e.preventDefault();

				// If not empty, redirect to tinymce
				if($('#tinyMCEhtml_email').val() !== "" && $('#action select').val()!='CALL_POPUP')
				{
					if($('.custom_html').length > 1){
						showAlertModal("webrule_popup_limit", undefined, function(){
							$($(e.currentTarget)).closest(".alert").remove();
						});
						return;
					}
					loadTinyMCE("tinyMCEhtml_email");
					return;

				}else if($('#callwebrule-code').val() !== "" && $('#action select').val()=='CALL_POPUP'){

					if($('.custom_html').length > 1){
						showAlertModal("webrule_popup_limit", undefined, function() {
                   			 $($(e.currentTarget)).closest(".alert").remove()
                		});
						return;
					}
					loadTinyMCE("callwebrule-code");
					return;
				}
				var strWindowFeatures = "height=650, width=800,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes";
				var new_window = window.open('templates.jsp?id=tinyMCEhtml_email&t=web_rules', 'name', strWindowFeatures);
				new_window.focus();
				/*if(window.focus)
					{
						new_window.focus();
					}*/
				return false;
			},

		});

//Click event on add web rules button
$("#content").on( "click", ".addWebrule", function(e) 
 {
	openEmailTemplate(e);
	console.log($( this ).text());
		
});

function loadTinyMCE(name)
{
	var strWindowFeatures = "height=650, width=800,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes";
	var newwindow = window.open('cd_tiny_mce.jsp?id=' + name,'name',strWindowFeatures);
	if (window.focus)
	{
		newwindow.focus();
	}
	return false;
	
}

function tinyMCECallBack(name, htmlVal)
{
	$('#' + name).val(htmlVal);
}

/**
 * MergeFields function to fetch all available merge-fields.
 * 
 * @param type - to add specific fields for specific nodes
 *               like unsubscribe link to SendEmail node
 **/
function getMergeFields(type, callback)
{
	var options=
	{
		"Select Merge Field": "",
		"First Name": "{{first_name}}",
		"Last Name": "{{last_name}}",
		"Email": "{{email}}",
		"Company":"{{company}}",
		"Title": "{{title}}",
		"Website": "{{website}}",
		"Phone": "{{phone}}",
		"City": "{{city}}",
		"State": "{{state}}",
		"Country": "{{country}}",
		"Zip": "{{zip}}",
		"Domain": "{{domain}}",
		"Address": "{{address}}",
		"Score": "{{score}}",
		"Created Time": "{{created_time}}",
		"Modified Time": "{{modified_time}}",
		"Owner Name": "{{owner_name}}",
		"Owner Email": "{{owner_email}}"
	};
	
	// Get Custom Fields in template format
	get_webrules_custom_fields(function(custom_fields){

		console.log("Custom Fields are");
		console.log(custom_fields);
		
		// Merges options json and custom fields json
		var merged_json = merge_webrules_jsons({}, options, custom_fields);
		if(callback)
			 return callback(merged_json);

		return merged_json;

		});
}

/**
 * Returns custom fields in format required for merge fields. 
 * E.g., Nick Name:{{Nick Name}}
 */
function get_webrules_custom_fields(callback)
{
    var url = window.location.protocol + '//' + window.location.host;
	
	// Sends GET request for customfields.
	accessUrlUsingAjax(url+'/core/api/custom-fields', function(resp){

		var customfields = {}, data = resp;
	
		// Iterate over data and get field labels of each custom field
		$.each(data, function(index,obj)
				{
						// Iterate over single custom field to get field-label
			            $.each(obj, function(key, value){
							
							// Needed only field labels for merge fields
							if(key == 'field_label')
								customfields[value] = "{{[" + value+"]}}"
						});
				});

		if(callback)
			callback(customfields);

	});
	
}

/**
 * Returns merged json of two json objects
 **/
function merge_webrules_jsons(target, object1, object2)
{
	return $.extend(target, object1, object2);
}

/** 
 * It's load email template page on click of add web rule button
 **/
 function openEmailTemplate(e)
 {
 	//e.preventDefault();

				// If not empty, redirect to tinymce
				if($('#tinyMCEhtml_email').val() !== "")
				{
					if($('.custom_html').length > 1){
						showAlertModal("webrule_popup_limit", undefined, function(){
							$($(e.currentTarget)).closest(".alert").remove();
						});
						return;
					}
				}
				var strWindowFeatures = "height=650, width=800,menubar=no,location=yes,resizable=yes,scrollbars=yes,status=yes";
				var new_window = window.open('templates.jsp?id=tinyMCEhtml_email&t=web_rules', 'name', strWindowFeatures);
				
				if(window.focus)
					{
						new_window.focus();
					}
				return false;
 }
/**
 * THIRD PARTY SCRIPTS - PLUGINS - INTEGRATION POINTS.
 * 
 * agile_widgets.js defines third party JavaScript API.
 * Functionalities provided by script API are
 * <pre>
 * -- Return widget object by widget name			 : agile_crm_get_widget(pluginName)
 * -- Return widget preferences by widget name	     : agile_crm_get_widget_prefs(pluginName)
 * -- Save widget preferences  by widget name		 : agile_crm_save_widget_prefs(pluginName, preferences)
 * -- Delete widget preferences by widget name       : agile_crm_delete_widget_prefs(pluginName, callback)
 * -- Saves widget property to contact               : agile_crm_save_widget_property_to_contact(propertyName, value)
 * -- Retrieves widget property from current contact : agile_crm_get_widget_property_from_contact(propertyName)
 * -- Delete widget property from current contact	 : agile_crm_delete_widget_property_from_contact(propertyName)
 * -- Retrieves current contact object				 : agile_crm_get_contact()
 * -- Retrieves property of current contact 	     : agile_crm_get_contact_property(propertyName)
 * -- Retrieves properties list of current contact   : agile_crm_get_contact_properties_list(propertyName)
 * -- Retrieves contact property value by subtype    : agile_crm_get_contact_property_by_subtype(propertyName, subtype)
 * -- Save property to contact for given subtype     : agile_crm_save_contact_property(propertyName, subtype, value, type)
 * -- Updating a contact by specifying property name : agile_crm_update_contact(propertyName, Value)
 * -- Updates contact properties with given values   : agile_crm_update_contact_properties(propertiesArray, callback)
 * -- Delete value given from contact by subtype     : agile_crm_delete_contact_property_by_subtype(propertyName, subtype, value)
 * -- Add Note to current contact					 : agile_crm_add_note(subject, description)
 * </pre>
 */

/**
 * Searches the property fields in current contact with given property name, if
 * property with given property name exists, then returns its value as string
 * 
 * @param propertyName
 *            name of the property
 */
function agile_crm_get_contact_property(propertyName)
{
	// Reads current contact model form the contactDetailView
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets properties field list from contact
	var properties = contact_model.get('properties');
	var property_value;

	/*
	 * Iterates through each property in contact properties and checks for the
	 * match in it for the given property name and retrieves value of the
	 * property if it matches
	 */
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName)
		{
			property_value = property.value;
			return false;
		}
	});

	// If property value is defined then return it
	if (property_value)
		return property_value;

}

/**
 * Searches the property fields in current contact with given property name, if
 * property with given property name exists, then returns its value in a array
 * 
 * <p>
 * This method is used when contact property has multiple values like email,
 * phone, website etc
 * </p>
 * 
 * @param propertyName
 *            name of the property
 * @returns {Array}
 */
function agile_crm_get_contact_properties_list(propertyName)
{
	// Reads current contact model form the contactDetailView
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets properties list field from contact
	var properties = contact_model.get('properties');
	var property_list = [];

	/*
	 * Iterates through each property in contact properties and checks for the
	 * match in it for the given property name and retrieves value of the
	 * property if it matches
	 */
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName)
		{
			property_list.push(property);
		}
	});

	// If property is defined then return property value list
	return property_list;

}

/**
 * Updates a contact based on the property name and its value specified. If
 * property name already exists with the given then replaces the value, if
 * property is new then creates a new field and saves it
 * 
 * @param propertyName:
 *            Name of the property to be created/updated
 * @param value :
 *            value for the property
 */
function agile_crm_update_contact(propertyName, value, callback)
{
	// Gets current contact model from the contactDetailView object
	var contact_model = agile_crm_get_contact_model();

	// Reads properties fied from the contact
	var properties = contact_model.toJSON()['properties'];
	var flag = false;

	/*
	 * Iterates through each property in contact properties and checks for the
	 * match in it for the given property name and if match is found, updates
	 * the value of it with the given value
	 */
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName)
		{
			// flag is set true to indicate property already exists in contact
			flag = true;
			property.value = value;
			return false;
		}
	});



	// If flag is false, given property is new then new field is created
	if (!flag)
		properties.push({ "name" : propertyName, "value" : value, "type" : "CUSTOM" });

	contact_model.set({ "properties" : properties }, { silent : true });

 	
	var model = new Backbone.Model();
	model.url = "core/api/contacts";

	// Save model
	model.save(contact_model.toJSON(), { success : function(model, response)
	{
	// Reset model view
	contact_model.set(model.toJSON(), { silent: true });

	if (callback && typeof (callback) == "function")
	callback(model.toJSON());
	} }, { silent : true });
}



function agile_crm_get_contact_model(){
	
	if(company_util.isCompany()){
		return App_Companies.companyDetailView.model;
	} else {
		return App_Contacts.contactDetailView.model;
	}
}

function agile_crm_is_model_property_changed(propertyName, value){
    var changed = true;

  	var contact_model = agile_crm_get_contact_model();

  	// Reads properties fied from the contact
	var properties = contact_model.toJSON()['properties'];

	/*
	 * Iterates through each property in contact properties and checks for the
	 * match in it for the given property name and if match is found, updates
	 * the value of it with the given value
	 */
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName && property.value == value)
			   changed = false;
	});

	return changed;

}


/**
 * Updates a contact with the list of property name and its value specified in
 * propertiesArray. If property name already exists with the given then replaces
 * the value, if property is new then creates a new field and saves it
 * 
 * @param propertiesArray
 *            Array of the properties to be created/updated
 * @param callback
 */
function agile_crm_update_contact_properties(propertiesArray, callback)
{
	// Gets current contact model from the contactDetailView object
	var contact_model = App_Contacts.contactDetailView.model;

	// Reads properties field from the contact
	var properties = contact_model.toJSON()['properties'];

	// Iterates for each property in properties list
	for ( var i in propertiesArray)
	{
		var flag = false;

		// Iterates through each property in contact properties
$.each(properties, function(index, property)
		{
			/*
			 * checks for the match with given property name in properties list
			 * and if match is found and if given properties has no subtype,
			 * updates the value of it with the given value
			 */
			if (property.name == propertiesArray[i].name)
			{
				// flag is set true to indicate property is not new
				flag = true;

				/*
				 * If given properties list has subtype, then update the value
				 * of it, else flag is set false to indicate it as new property
				 */
				if (propertiesArray[i].subtype)
				{
					if (propertiesArray[i].subtype == property.subtype)
						property.value = propertiesArray[i].value;
					else
						flag = false;
				}
				else
					property.value = propertiesArray[i].value;

				// break each if match is found
				return false;
			}
		});

		// If flag is false, given property is new then new field is created
		if (!flag)
			properties
					.push({ "name" : propertiesArray[i].name, "value" : propertiesArray[i].value, "subtype" : propertiesArray[i].subtype, "type" : "CUSTOM" });

	}

	// If property is new then new field is created
	contact_model.set({ "properties" : properties }, { silent : true });
	var model = new Backbone.Model();
	model.url = "core/api/contacts";


	// Save model
	model.save(contact_model.toJSON(), { success : function(model, response)
	{
		contact_model.set(model.toJSON(), { silent: true });
		if (callback && typeof (callback) == "function")
			callback();
	} }, { silent : true });
	var properties = contact_model.get("properties");
	var i;
	for (i = 0; i < properties.length; i++) {
			 if(properties[i].name == "image"){
			 	var url = properties[i].value;
			 	var id = "contact-container";
			 	$('#' + id).find('.contact-image-view').html('');
	            $('#' + id).find('.contact-image-view').html('<img src="' + url + '" class="upload_pic imgholder submit w-full img-circle" style="width:75px;height:75px;" type="submit" />');
				if($(".toggle-contact-image .contact-delete-option").length == 0) {
			 	$('#' + id).find('.toggle-contact-image').append('|<div style="float:right" class="contact-delete-option"><a name="Delete" value="Delete" onClick="deleteConfirmation();" class="tooltip_info" data-placement="bottom" data-toggle="tooltip" title="Delete"><i class="glyphicon glyphicon-trash" style="color:red"></i></a></div>');	
				$('#' + id).find('.toggle-contact-image').find(".contact-edit-option").removeAttr('style');
				$('#' + id).find('.toggle-contact-image').find(".contact-edit-option").css("float","left");
	}
			 }
	} 
}

/**
 * Retrieves current contact from model
 * 
 * @returns
 */
function agile_crm_get_contact()
{
	return App_Contacts.contactDetailView.model.toJSON();
}

/**
 * Adds note to current contact
 * 
 * @param sub
 * @param description
 */
function agile_crm_add_note(subject, description)
{
	// Get Current Contact Model
	var contact_model = App_Contacts.contactDetailView.model;

	// Get ID
	var note = new Backbone.Model();
	var contactModel = new Backbone.Model();
	note.url = 'core/api/notes';

	note.set("subject", subject);
	note.set("description", description);

	note.set("contacts", [
		contact_model.id.toString()
	]);

	note.save();
	// Create Model and Save
}

/**
 * Retrieves plugin object based on the plugin name specified
 * 
 * @param pluginName :
 *            name of the plugin to fetch
 */
function agile_crm_get_widget(pluginName)
{
	pluginName = pluginName.replace(/ +/g, '');
	console.log('plugin name ' + pluginName);

	/*
	 * Retrieves plugin data from the model data which is set to plugin block
	 * while loading plugins
	 */
	console.log($('#' + pluginName));
	var model_data = $('#' + pluginName, get_current_view_el()).data('model');

	console.log(model_data);

	return model_data.toJSON();
}

/**
 * Retrieves plugin preferences based on the name of the plugin
 * 
 * @param pluginName :
 *            name of the plugin to get preferences
 * @returns plugin preferences
 */
function agile_crm_get_widget_prefs(pluginName)
{
	pluginName = pluginName.replace(/ +/g, '');
	console.log("in get widget prefs " + pluginName);
	// Gets data attribute of from the plugin, and return prefs from that object
	return $('#' + pluginName, get_current_view_el()).data('model').toJSON().prefs;
}

/**
 * Saves given widget preferences to current user based on given plugin name.
 * 
 * @param pluginName :
 *            name of the plugin specified, to associate preferences
 * @param prefs :
 *            preferences to be saved
 */
function agile_crm_save_widget_prefs(pluginName, prefs, callback)
{
	console.log(pluginName);
	pluginName = pluginName.replace(/ +/g, '');

	console.log(get_current_view_el());
	console.log($('#' + pluginName, get_current_view_el()));

	// Get the model from the the element
	var widget = $('#' + pluginName, get_current_view_el()).data('model');

	console.log(widget);
	// Set changed preferences to widget backbone model
	widget.set({ "prefs" : prefs }, { silent : true });

	// URL to connect with widgets
	widget.url = "core/api/widgets"

	console.log(widget);

	var model = new BaseModel();
	model.url = "core/api/widgets";
	model.save(widget.toJSON(), { success : function(data)
	{
		console.log(data);
		console.log("Saved widget: " + data.toJSON());
		
		// Set the changed model data to respective plugin div as data
		$('#' + pluginName, get_current_view_el()).data('model', widget);
		
		if (callback && typeof (callback) === "function")
		{
			console.log("in save callback");
			console.log(data.toJSON());
			// Execute the callback, passing parameters as necessary
			callback(data.toJSON());
		}
	} }, { silent : true });

}

/**
 * Deletes widget preferences saved in widget under the field prefs in widget
 * object
 * 
 * @param pluginName
 *            name of the plugin specified
 */
function agile_crm_delete_widget_prefs(pluginName, callback)
{
	// saves prefs as undefined
	agile_crm_save_widget_prefs(pluginName, undefined, callback);
}

/**
 * Returns widget property value from widget_properties field in contact
 * 
 * @param propertyName :
 *            name(key) of the property value stored in widget_properties JSON
 * @Return widget property value
 * 
 */
function agile_crm_get_widget_property_from_contact(propertyName)
{

	// Gets Current Contact Model
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets WidgetProperties from Contact Model
	var widget_properties = contact_model.get('widget_properties');

	// If widget-properties are null return
	if (!widget_properties)
		return;

	// Converts JSON string to JSON Object
	widget_properties = JSON.parse(widget_properties);

	// Returns value of property from widget_properties JSON
	return widget_properties[propertyName];
}

/**
 * Deletes widget property, the property key value pair from widget_properties
 * JSON string in contact based on given property name
 * 
 * @param propertyName :
 *            Name of the property to be deleted
 */
function agile_crm_delete_widget_property_from_contact(propertyName)
{

	// Gets Current Contact Model from contactDetailView object
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets WidgetProperties from Contact Model
	var widget_properties = contact_model.get('widget_properties');

	// If widget-properties id null return
	if (!widget_properties)
		return;

	/*
	 * If widget_properties are not null, then convert widget_properties string
	 * in to JSON object
	 */
	widget_properties = JSON.parse(widget_properties);

	// deletes value from JSON
	delete widget_properties[propertyName];

	// set Updated widget_properties in to contact model
	contact_model.set("widget_properties", JSON.stringify(widget_properties));

	contact_model.url = "core/api/contacts";

	// Save updated contact model
	contact_model.save();
}

/**
 * Retrieves property value from current contact based on given property name
 * and sub type of the property
 * 
 * @param propertyName
 *            Name of the property
 * @param subtype
 *            Subtype of the property
 */
function agile_crm_get_contact_property_by_subtype(propertyName, subtype)
{

	// Reads current contact model form the contactDetailView
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets properties list field from contact
	var properties = contact_model.get('properties');
	var property;

	// Iterates though each property and finds the value related to the property
	// name
	$.each(properties, function(key, value)
	{
		if (value.name == propertyName && value.subtype == subtype)
		{
			property = value;
		}
	});

	// If property is defined then return property value
	if (property)
		return property.value;

}

/**
 * Deletes contact property value from contact based on given property name and
 * sub type of the property and value of the property
 * 
 * @param propertyName
 *            Name of the property
 * @param subtype
 *            Subtype of the property
 * @param value
 *            Value of the property
 */
function agile_crm_delete_contact_property_by_subtype(propertyName, subtype, value, callback)
{

	// Reads current contact model form the contactDetailView
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets properties list field from contact
	var properties = contact_model.get('properties');

	/*
	 * Iterates though each property and finds the value related to the property
	 * name and deletes it
	 */
	$.each(properties, function(index, property)
	{
		if (property.name == propertyName && property.subtype == subtype && property.value == value)
		{
			properties.splice(index, 1);
			contact_model.set({ "properties" : properties }, { silent : true });

			contact_model.url = "core/api/contacts";

			// Save updated contact model
			contact_model.save([], { silent : true, success : function(data)
			{
				console.log("in success");
				if (callback && typeof callback === "function")
					callback(data);

			} });

			return false;
		}
	});

}

/**
 * Saves contact property value to contact with the given property name and sub
 * type of the property and value of the property.
 * 
 * <p>
 * type should be given as "SYSTEM" if it already exists and "CUSTOM" if it is a
 * new field
 * </p>
 * 
 * 
 * @param propertyName
 * @param subtype
 * @param value
 * @param type
 */
function agile_crm_save_contact_property(propertyName, subtype, value, type)
{
	// Reads current contact model form the contactDetailView
	var contact_model = App_Contacts.contactDetailView.model;

	// Gets properties list field from contact
	var properties = contact_model.get('properties');

	var property = {};
	property["name"] = propertyName;
	property["value"] = value;
	property["subtype"] = subtype;
	property["type"] = type;

	properties.push(property);

	contact_model.set("properties", properties);

	console.log(properties);

	contact_model.url = "core/api/contacts"

	// Save updated contact model
	contact_model.save()

}

/**
 * Saves the given property to widget_properties field in contact as key value
 * pair, which is saved as JSON string object in field name widget_properties.
 * 
 * @param propertyName
 * @param value
 */
function agile_crm_save_widget_property_to_contact(propertyName, value, callback)
{

	// Gets Current Contact Model
	var contact_model = App_Contacts.contactDetailView.model;

	// Get WidgetProperties from Contact Model
	var widget_properties = contact_model.get('widget_properties');

	/*
	 * If widget_properties are null i.e, contact do not contain any widget
	 * properties yet, then create new JSON object to save widget properties
	 */
	if (!widget_properties)
		widget_properties = {};

	/*
	 * If widget properties already exists then convert Stringified JSON in to
	 * JSON object to add new properties
	 */
	else
		widget_properties = JSON.parse(widget_properties);

	/*
	 * Adds the new property name and key value pair, in widget_properties JSON
	 */
	widget_properties[propertyName] = value;

	// Stringifies widget_properties json in to string and set to contact model.
	contact_model.set({"widget_properties": JSON.stringify(widget_properties)}, {silent :true});

	contact_model.url = "core/api/contacts";

	// Saves updated model
	//contact_model.save(contact_model.toJSON);
	
	// Save updated contact model
	contact_model.save(contact_model.toJSON, { silent : true, success : function(data)
	{
		console.log("in success");
		if (callback && typeof callback === "function")
			callback(data);

	} });


}

function agile_crm_add_event_to_timeline(name, title, body, time)
{
	var model = {};
	model['id'] = name;
	model['body'] = body;
	model["title"] = title;
	
	if (time && (time / 100000000000) > 1)
		model["created_time"] = time;
	else
		model["created_time"] = time;
	
	model["entity_type"] = "custom";
	
	add_entity_to_timeline(new BaseModel(model));
}

function agile_crm_get_current_view()
{
	if(App_Contacts.contactDetailView)
		return App_Contacts.contactDetailView.el;
	
	return undefined;
}

function get_current_view_el()
{
	if(Current_Route.indexOf('contact') != -1 && App_Contacts.contactDetailView)
		return App_Contacts.contactDetailView.el;
	
	if(Current_Route.indexOf('ticket') != -1 && App_Ticket_Module.ticketView)
		return App_Ticket_Module.ticketView.el;

	return undefined;
}
var CSRCOLLECTION;

function initializeCallScriptListeners(){

    $('#prefs-tabs-content').off();
    $('#prefs-tabs-content #callscriptruleForm').off('click');
	$('#prefs-tabs-content').on('click', '#callscriptruleForm', function(e)
	 {
		 makeWidgetTabActive();
	 });
	
	// Filter Contacts- Clone Multiple
	$('#prefs-tabs-content .callscript-multiple-add').off('click');
	$('#prefs-tabs-content').on('click', '.callscript-multiple-add', function(e)
	{
		e.preventDefault();
		// To solve chaining issue when cloned
		var that = this;
		
		var  contact_fields = {};
		contact_fields['customFields'] = get_merge_fields();
		
		getTemplate('callscript-rule', contact_fields, undefined, function(template_ui){
			if(!template_ui)
				  return;

			var htmlContent = $(template_ui).find('tr').clone();
			scramble_input_names($(htmlContent));

			// boolean parameter to avoid contacts/not-contacts fields in form
			chainFilters(htmlContent, function()
			{

			}, false);

			// $(this).hide();
			// var htmlContent = $(this).closest("tr").clone();
			$(htmlContent).find("i.callscript-multiple-remove").css("display", "inline-block");
			$(that).siblings("table").find("tbody").append(htmlContent);


		}, null);
	});

	// Filter Contacts- Remove Multiple
	$('#prefs-tabs-content i.callscript-multiple-remove').off('click');
	$('#prefs-tabs-content').on('click', 'i.callscript-multiple-remove', function(e)
	{
		$(this).closest("tr").remove();
	});

	// Add rule from modal to widget form, show save btn , hide add rule btn
	$('#prefs-tabs-content .edit-callscriptrule').off('click');
	$('#prefs-tabs-content').on('click', '.edit-callscriptrule', function(e)
	{
		e.preventDefault();

		// Shows loading image until data gets ready for displaying
		$('#prefs-tabs-content').html(LOADING_HTML);
		
		var editRuleCount = $(this).attr("data");
		
		// Redirect to show call script rules page
		window.location.href = "#callscript/editrules/" + editRuleCount;
		
		// Shows loading image until data gets ready for displaying
		$('#prefs-tabs-content').html(LOADING_HTML);
	});

	// Delete event for call script rule
	$('#prefs-tabs-content .delete-callscriptrule').off('click');
	$('#prefs-tabs-content').on('click', '.delete-callscriptrule', function(e)
	{
		e.preventDefault();
		var $that = $(this);
		// If not confirmed to delete, return
		showAlertModal("delete_rule", "confirm", function(){
			// Remove element
			$that.closest("tr").remove();

			// Delete rule from widget
			deleteCallScriptRule($(this).attr("data"));
		});

	});

	// Display rule actions
	$('#prefs-tabs-content .row-callscriptrule').off('mouseenter');
	$('#prefs-tabs-content').on('mouseenter', '.row-callscriptrule', function(e)
	{
		$(this).find(".callscriptrule-actions").css("visibility", "visible");
	});

	// Hide rule actions
	$('#prefs-tabs-content .row-callscriptrule').off('mouseleave');
	$('#prefs-tabs-content').on('mouseleave', '.row-callscriptrule', function(e)
	{
		$(this).find(".callscriptrule-actions").css("visibility", "hidden");
	});

	
	// On click of save button, check input and save details
	$('#prefs-tabs-content #save_prefs').off('click');
	$('#prefs-tabs-content').on('click', '#save_prefs', function(e)
	{	e.preventDefault();

		if ($(this).text() == "Saving..." || $(this).text() == "Loading...") {
			console.log("Do not hit me again " + $(this).text());
			return;
		}

		// Checks whether all input fields are given
		try {
			if (!isValidForm($("#callscriptruleForm"))) {
				return;
			}
		} catch (err) {
			return;
		}

		// Saves call script preferences in callscript widget object
		saveCallScriptWidgetPrefs();
	});
	
	$('#prefs-tabs-content').on('click', '#callscript-customField-li', function(e)
	{	
		e.preventDefault();
		var value = $(this).attr("value");
		insertValueInAt("#displaytext", value);	
	});
	
}

// Get widget and make adjustment of buttons in widget form
function adjust_form()
{
	// Disable add rule btn
	$("#add_csrule").text("Loading...");
	$("#add_csrule").attr("disabled", true);

	// if widget is already added so display showrules and hide add rule btn
	if (isCallScriptAdded())
	{
		var ruleCount = getCallScriptRuleCount();
		if(ruleCount >0)
		  {
			$(".rule-count").html(ruleCount);
			$("#add_csrule").hide();
			$(".rule-added").show();
			$("#show_csrules").show();
		  }		
		else
			$(".no-rule-added").show();
	}
	else
		$(".no-rule-added").show();

	// Enable add rule btn
	$("#add_csrule").text('Add Rule');
	$("#add_csrule").attr("disabled", false);
}

//Check call script widget is added or not
function isCallScriptAdded()
{
	// Get call script widget
	var callscriptWidget = App_Widgets.Catalog_Widgets_View.collection.where({ name : "CallScript" });
	console.log(callscriptWidget);

	// call script widget not added
	if (callscriptWidget[0].get("is_added") == false)
		return false;

	// call script widget added
	return true;
}

// Get widget from collection and Convert prefs in json
function getCallScriptJSON()
{
	// If Widgets collection is not defined, navigates to add widget
	if (!App_Widgets || !App_Widgets.Catalog_Widgets_View || !App_Widgets.Catalog_Widgets_View.collection)
	{	
		window.location.href = "#add-widget";
		return;
	}	
	
	// Get call script widget
	var callscriptWidget = App_Widgets.Catalog_Widgets_View.collection.where({ name : "CallScript" });

	if (callscriptWidget[0].get("is_added") == false)
		return null;

	// Convert prefs in json
	var callscriptPrefsJson = JSON.parse(callscriptWidget[0].get("prefs"));

	return callscriptPrefsJson;
}

function getCallScriptRuleCount()
{
	var prefs = getCallScriptJSON();
	return prefs.csrules.length;	
}

function createCSRCollection()
{
	var csr = getCallScriptJSON();
	CSRCOLLECTION = new Base_Collection_View({data: csr.csrules});
}

// Add rules in rules array to add same array in widget's prefs
function makeRule()
{
	// Get rule from form
	var json = serializeForm("callscriptruleForm");

	// Get index of edited rule
	var editRuleCount = json.rulecount;
	
	// Get widget from collection and Convert prefs in json
	var callscriptPrefsJson = getCallScriptJSON();

	/*
	 * if widget is already added so get rules from widget and add new rules in
	 * array
	 */
	if (callscriptPrefsJson != null)
	{
		// Edit rule
		if (editRuleCount != "")
		  {
			// Get rule index from rulecount			
			callscriptPrefsJson.csrules[getRuleIndex(callscriptPrefsJson,editRuleCount)] = json;
		  }			
		else
		// Add Rule
		{
			// Add position to rule
			json["position"] = callscriptPrefsJson.csrules.length;

			// Increment csr count
			callscriptPrefsJson["csrcount"]= callscriptPrefsJson.csrcount + 1;

			// Add csr count to rule
			json["rulecount"] = callscriptPrefsJson.csrcount;
			
			// Add rule in rules
			callscriptPrefsJson.csrules.push(json);			
		}

		return callscriptPrefsJson;
	}

	// Add position 0 to first rule
	json["position"] = 0;
	
	// Add csr count to rule
	json["rulecount"] = 1;

	// Make it define
	callscriptPrefsJson = {}; 
	
	// First rule in widget
	callscriptPrefsJson["csrules"]= [json];
	
	// First csr count
	callscriptPrefsJson["csrcount"]= 1;
	
	return callscriptPrefsJson;
}

// Delete selected call script rule from widget
function deleteCallScriptRule(dltRuleIndex)
{
	// Get widget from collection and Convert prefs in json
	var callscriptPrefsJson = getCallScriptJSON();

	/*
	 * if widget is already added so get rules from widget and delete rules in
	 * array
	 */
	if (callscriptPrefsJson != null)
	{
		// Get rule from prefs
		console.log(callscriptPrefsJson.csrules[dltRuleIndex]);

		// Delete rule from widget
		callscriptPrefsJson.csrules.splice(dltRuleIndex, 1);

		// Saves the preferences into widget with sip widget name
		save_widget_prefs("CallScript", JSON.stringify(callscriptPrefsJson), function(data)
		{
			console.log('In call script save success after delete');
			console.log(data);
		});
	}
	initializeCallScriptListeners();
	makeWidgetTabActive();
}

// Get widget from collection and convert prefs to json before display in table.
function showCallScriptRule()
{
	makeWidgetTabActive();

	// Shows loading image untill data gets ready for displaying
	$('#prefs-tabs-content').html(LOADING_HTML);

	// Get widget from collection and Convert prefs in json
	var callscriptPrefsJson = getCallScriptJSON();

	// if widget is already added so
	// Add rules to show rules page
	if (callscriptPrefsJson != null)
	{
		getTemplate("callscript-table", callscriptPrefsJson.csrules, undefined, function(template_ui){
			if(!template_ui)
				  return;

			$("#prefs-tabs-content").html($(template_ui));
			initializeSubscriptionListeners();
			
			// Apply drag drop (sortable)
			setup_sortable_callscriptrules();

		}, null);
	}
	initializeCallScriptListeners();
}

// show add rule page with chaining
function addCallScriptRule()
{
	// If Widgets collection is not defined, navigates to add widget
	if (!App_Widgets || !App_Widgets.Catalog_Widgets_View || !App_Widgets.Catalog_Widgets_View.collection)
	{	
		window.location.href = "#add-widget";
		return;
	}
	
	makeWidgetTabActive();
	var  contact_fields = {};
	get_merge_fields(function(value){
		contact_fields['customFields'] = value;
		var add_csr = new Base_Model_View({ template : "callscript-rule", data : contact_fields,  isNew : "true", postRenderCallback : function(el)
			{
				
				head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
				{
					chainFilters(el, undefined, function()
					{
						$('#prefs-tabs-content').html(el);
						initializeSubscriptionListeners();

						// if this is first rule then set add-widget url on cancel btn
						if (!isCallScriptAdded())
						{
							$(".redirect-to-addwidget").show();
							$(".redirect-to-showrules").hide();
						}
					});
				})
			}
		
		});
		// Shows loading image until data gets ready for displaying
		$("#prefs-tabs-content").html(LOADING_HTML);
		initializeCallScriptListeners();
		add_csr.render();
	});






}

// Get call script rule from widget and display in edit rule page
function editCallScriptRule(ruleCount)
{
	makeWidgetTabActive();

	// Shows loading image until data gets ready for displaying
	$('#prefs-tabs-content').html(LOADING_HTML);

	// Get widget from collection and Convert prefs in json
	var callscriptPrefsJson = getCallScriptJSON();

	// if widget is already added
	if (callscriptPrefsJson != null)
	{
		// get rule from id as in rulecount of rule
		var csrule = getRule(callscriptPrefsJson,ruleCount);
		var  contact_fields = {};
		contact_fields['customFields'] = get_merge_fields();

		$("#prefs-tabs-content").html(LOADING_HTML);
		initializeCallScriptListeners();
		
		head.js(LIB_PATH + 'lib/agile.jquery.chained.min.js', function()
		{
					
			getTemplate('callscript-rule', contact_fields, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$("#prefs-tabs-content").html($(template_ui));

				$("#prefs-tabs-content").find('#filter-settings').find("#loading-img-for-table").html(LOADING_HTML).show();
				$("#prefs-tabs-content").find('#filter-settings').find(".chained-table").hide();
				
				chainFilters($("#prefs-tabs-content"), csrule, function()
				{
					$("#prefs-tabs-content").find('#filter-settings').find("#loading-img-for-table").hide();
					$("#prefs-tabs-content").find('#filter-settings').find(".chained-table").show();
					initializeSubscriptionListeners();
					
					$(".callscript-multiple-remove").show();
					$(".callscript-multiple-remove")[0].style.display = "none";
				});
				scramble_input_names($("#prefs-tabs-content").find('#filter-settings'));

				// Change heading
				$(".addLable").html(" Edit Call Script Rule");

				// Fill input tags
				$("#name").val(csrule.name);
				$("#displaytext").val(csrule.displaytext);
				$("#position").val(csrule.position);
				$("#rulecount").val(csrule.rulecount);

			}, "#prefs-tabs-content");

		});
	}
}

//Get rule from csrules array by rulecount
function getRule(callscriptPrefsJson,ruleCount)
{
	var rules = callscriptPrefsJson.csrules;
	
	for(var i=0;i<rules.length;i++)
		{		
		 if( rules[i].rulecount == ruleCount)
			 {
			   return rules[i];
			 }
		}
}

// Get rule index from csrules array by rulecount 
function getRuleIndex(callscriptPrefsJson,ruleCount)
{
  var rules = callscriptPrefsJson.csrules;
	
  for(var i=0;i<rules.length;i++)
		{
		 if( rules[i].rulecount == ruleCount)
			 {
			   return i;
			 }
		}
}
/**
 * Sets call script rules as sortable list.
 */
function setup_sortable_callscriptrules()
{	
	$(".csr-sortable").append("<tr class='pseduo-row' style='border:none!important;'><td></td><td></td><td></td></tr>");

	// Loads jquery-ui to get sortable functionality on widgets
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function()
	{
		$(".csr-sortable").sortable(
				{		
					axis: "y" ,
					forcePlaceholderSize: true,
					placeholder:'<tr><td></td></tr>',
					handle: ".icon-move",
					containment: ".csr-sortable",
					cursor: "move",
					forceHelperSize: true,
					scroll: false,
					items: "> tr",
					helper: function(e, tr)
					{
					    var $originals = tr.children();
					    var $helper = tr.clone();
					    $helper.children().each(function(index)
					    {
					      // Set helper cell sizes to match the original sizes
					      $(this).width($originals.eq(index).width());
					    });
					    return $helper;
					}
				}).disableSelection();
				
		/*
		 * This event is called after sorting stops to save new positions of
		 * rules
		 */
		$('.csr-sortable').off("sortstop");
		$('.csr-sortable').on("sortstop", function(event, ui) {
					
			// Get new array of rule
			getRulesNewPosition(function(newRules){
				
				// Saves new positions in widget
				saveCSRAfterDrop(newRules);
			});			
		});		
	});
}

// Get new positioned array of rule
function getRulesNewPosition(callback)
{
	var newRules = [];
	
	// Get widget from collection and Convert prefs in json
	var callscriptPrefsJson = getCallScriptJSON();

	/*
	 * Iterate through each all the rules and set each rule
	 * position and store it in array
	 */
	$('.csr-sortable > tr').each(function(index, element)
	{
		if(!$(element).hasClass("pseduo-row")){

			var old_rule_index = $(element).attr('data');
			
			// Get Model, model is set as data to widget element
			var rule = callscriptPrefsJson.csrules[old_rule_index];
			
			if(old_rule_index != index)
			  {									
				rule["position"] = index;				
				$(element).attr('data',index);					
			  }
			
			newRules.push(rule);			
		}
	});
	
	if (callback && typeof (callback) === "function")
		callback(newRules);	
}

// Save rules after dropped 
function saveCSRAfterDrop(newRules)
{
//Get widget from collection and Convert prefs in json
var callscriptPrefsJson = getCallScriptJSON();
 
//Add rule to pref
 callscriptPrefsJson["csrules"] = newRules;
 
 //Saves the preferences into widget with sip widget name
 save_widget_prefs("CallScript", JSON.stringify(callscriptPrefsJson), function(data)
	{
		console.log('In call script save success after drag-drop');
		console.log(data);
	}); 
}

// Make widget tab active
function makeWidgetTabActive()
{
	$('#PrefsTab .select').removeClass('select');
	$('.add-widget-prefs-tab').addClass('select');	
}


// from widget-util.js



/**
 * Calls method in script API (agile_widget.js) to save CallScript preferences
 * in CallScript widget object
 */
function saveCallScriptWidgetPrefs() {
	$("#save_prefs").text("Saving...");
	$("#save_prefs").attr("disabled", true);

	// Retrieve and store the Sip preferences entered by the user as
	// JSON
	var callscript_prefs = makeRule();

	console.log(callscript_prefs);

	// Saves the preferences into widget with sip widget name
	save_widget_prefs("CallScript", JSON.stringify(callscript_prefs), function(
			data) {
		console.log('In call script save success');
		console.log(data);

		// Redirect to show call script rules page
		window.location.href = "#callscript/rules";
	});
}



/**
 * Shows setup if user adds call script widget for the first time or clicks on
 * reset icon on call script panel in the UI
 * 
 */
function callscript_save_widget_prefs() {
	
}



function build_custom_widget_form(el)
{
	var divClone;
	
    $('#prefs-tabs-content').off('click', '#add-custom-widget');
	$('#prefs-tabs-content').on('click', '#add-custom-widget', function(e)
	{
		$('#custom-widget-btn').removeClass('open');
		divClone = $("#custom-widget").clone();
		var widget_custom_view = new Base_Model_View({ url : "/core/api/widgets/custom", template : "add-custom-widget", isNew : true,
			postRenderCallback : function(el)
			{
				console.log('In post render callback');
				console.log(el);
                
				$('#custom-widget').off('change').on('change', '#script_type', function(e)
				{
					var script_type = $('#script_type').val();
					if (script_type == "script")
					{
						$('#script_div').show();
						$('#url_div').hide();
						return;
					}

					if (script_type == "url")
					{
						$('#script_div').hide();
						$('#url_div').show();
					}
				});

			}, saveCallback : function(model)
			{
				console.log('In save callback');

				console.log(model);

				if (model == null){
					showAlertModal("duplicate_widget");
					return;
				}

				App_Widgets.Catalog_Widgets_View.collection.add(model);
				$("#custom-widget").replaceWith(divClone);
			} });

		$('#custom-widget', el).html(widget_custom_view.render(true).el);
		
		// Is Custom widget for all.
		if(!($(this).hasClass('add_to_all'))){
			isForAll = false;
		}

		$('#custom_isForAll').val(isForAll);
		
        $('#prefs-tabs-content').off('click', '#cancel_custom_widget');
		$('#prefs-tabs-content').on('click', '#cancel_custom_widget', function(e)
		{
			// Restore element back to original
			$("#custom-widget").replaceWith(divClone); 
		});
	});
}

//It will insert the value at the cursor point of the given element(textarea)
function insertValueInAt(element,text){
    var txtarea = $(element);
    
    var currentValue = txtarea.val();
    //javascript code to know the browser
    var browser = document.selection ? "ie" : "other" ;
    var scrollPos = txtarea.scrollTop;
    var strPos = 0;
    
    if (browser == "ie") { 
        txtarea.focus();
        var range = document.selection.createRange();
        range.moveStart ('character', -txtarea.value.length);
        strPos = range.text.length;
    }else{
    	strPos = txtarea.prop("selectionStart");
    }
    
    var front = (currentValue).substring(0,strPos);  
    var back = (currentValue).substring(strPos,currentValue.length); 
    var newValue = front+text+back;
    txtarea.val(newValue);
    
    strPos = strPos + text.length;
    
    if (browser == "ie") { 
        txtarea.focus();
        var range = document.selection.createRange();
        range.moveStart ('character', -txtarea.value.length);
        range.moveStart ('character', strPos);
        range.moveEnd ('character', 0);
        range.select();
    }else{
    	txtarea.prop("selectionStart",strPos);
    	txtarea.prop("selectionEnd",strPos);
        txtarea.focus();
    }
    txtarea.scrollTop = scrollPos;
    
	
}
/**

	appends datasync widgets by fetching collection in single call
*/

function organize_sync_widgets(base_model)
{
	var itemView = new Base_List_View({ model : base_model, template : 'admin-settings-import-skeleton', tagName : 'div', });

	// Get widget type from model (widget object)
	var sync_type = base_model.get('type');

	if (sync_type == "GOOGLE")
		$('#contact-prefs', this.el).append($(itemView.render().el));
	if (sync_type == "STRIPE")
		$('#stripe', this.el).append($(itemView.render().el));
	if (sync_type == "FRESHBOOKS")
		$('#freshbook', this.el).append($(itemView.render().el));
	if (sync_type == "OFFICE365")
		$('#office365', this.el).append($(itemView.render().el));
	if (sync_type == "SHOPIFY")
		$('#shopify', this.el).append($(itemView.render().el));
	if (sync_type == "QUICKBOOK")
		$('#quickbook', this.el).append($(itemView.render().el));
	if (sync_type == "SALESFORCE")
		$('#salesforce', this.el).append($(itemView.render().el));

}



/**

single click for all data sync collection events
*/
function initializeDataSyncListners(){	   

	$('#prefs-tabs-content #data-sync-type').off();
    $('#prefs-tabs-content').on('click', '#data-sync-type', function(e){

		var sync_type=$(this).attr("sync_type");
		if(sync_type=="GOOGLE"){
		// URL to return, after fetching token and secret key from LinkedIn
		var callbackURL = window.location.href + "/contacts";
		console.log(callbackURL);
		// For every request of import, it will ask to grant access
		window.open("/scribe?service=google&window_opened=true&return_url=" + encodeURIComponent(callbackURL),'dataSync','height=1000,width=500');
		}
		if(sync_type=="STRIPE"){

			var callbackURL = agileWindowOrigin() + "/#sync/stripe-import";
		// For every request of import, it will ask to grant access
		window.open( "/scribe?service=stripe_import&window_opened=true&return_url=" + encodeURIComponent(callbackURL),'dataSync','height=1000,width=500');
		return false;
		}
		if(sync_type=="SHOPIFY"){

			Backbone.history.navigate("#sync/shopify" , {
                trigger: true
            });
		}
		if(sync_type=="QUICKBOOK"){

		window.open('/OAuthServlet?service=quickbook-import&window_opened=true&return_url=' + encodeURIComponent(window.location.href) + 'quickbooks','dataSync','height=1000,width=500');

		return false;
		}
		if(sync_type=="FRESHBOOKS"){
			Backbone.history.navigate("#sync/freshbooks" , {
                trigger: true
            });
		}
		if(sync_type=="OFFICE365"){
			Backbone.history.navigate("#sync/officeCalendar" , {
                trigger: true
            });
		}
	});




	$('#prefs-tabs-content #sync-import-prefs-delete').off();
    $('#prefs-tabs-content').on('click', '#sync-import-prefs-delete', function(e){
		var $that = $(this);
		showAlertModal("delete", "confirm", function(){
			var sync_widget_type=$that.attr("data_sync_type");

			var sync_widget_id=$that.attr("data_sync_id");

			if(!sync_widget_type)
				return;

			var deleteSyncUrl="core/api/contactprefs/delete/"+sync_widget_type+"/"+sync_widget_id;
			$.ajax({
	 				url : deleteSyncUrl,
					type : 'DELETE',
					success : function(){
						console.log("success");
						
						if(sync_widget_type == "SALESFORCE"){
							DATA_SYNC_FORCE_FETCH=true;
							App_Datasync.salesforce();
						}
							
						else
							App_Datasync.dataSync();
					}
				});
		});
		
		
			

	});



	
}

/**

	function call to close newly opend window after authentication done. 
*/

function executeDataSyncReturnCallback(returnUrl,serviceName){
		
		if(serviceName=='google_calendar'){
			App_Datasync.google_calendar();
			return;
		}

		DATA_SYNC_FORCE_FETCH=true;
		if(serviceName=='shopify'){
			App_Datasync.shopify();
			return;
		}
		returnUrl=returnUrl.substr(returnUrl.indexOf('#'));

		if(window.location.hash==returnUrl && (serviceName=='quickbook-import' || serviceName=='stripe_import')){
			window.location.reload();
			return;
		}

		Backbone.history.navigate(returnUrl , {
                trigger: true
            });		
}

function executeCloseWindowCallback(returnUrl){
	Backbone.history.navigate(returnUrl , {
                trigger: true
            });		
}

var DATA_SYNC_FORCE_FETCH=false;

/**

fetches the model from collection if collection exists
else fetchs colection and returns model
*/
function getSyncModelFromName(name, callback,modelfetch){

       // Checks force fetch
       if(modelfetch && !DATA_SYNC_FORCE_FETCH){
       	var sync_base_model=Backbone.Model.extend(
					{
						url : '/core/api/contactprefs/'+name
					});
       	var base_model=new sync_base_model();
       	base_model.fetch({ success : function(data){
       	App_Datasync.agile_sync_collection_view.collection.get(data.toJSON().id).set('inProgress',data.toJSON().inProgress);
       	 callback(getModalfromName(App_Datasync.agile_sync_collection_view.collection.toJSON(), name));
       }});
       	return;
       }
       if(DATA_SYNC_FORCE_FETCH){
       		DATA_SYNC_FORCE_FETCH=false;

       		App_Datasync.agile_sync_collection_view = new Base_Collection_View({ url : '/core/api/contactprefs/allPrefs' });

			// Fetch the list of widgets
			App_Datasync.agile_sync_collection_view.collection.fetch({ success : function(data)
			{
				callback(getModalfromName(data.toJSON(), name));
				
			} });
       	 
      	 return;
       }

       // Check view obj
       if(App_Datasync.agile_sync_collection_view){
          return callback(getModalfromName(App_Datasync.agile_sync_collection_view.collection.toJSON(), name));
       }
       else{
       	DATA_SYNC_FORCE_FETCH=true;
       	callback(getSyncModelFromName(name,callback));
       }
  }


/**

iterates over collection and fetches model based on type
name is type i.e GOOGLE or STRIPE or SHOPIFY etc
*/
  function getModalfromName(collection, name){

	for (var i in collection){
		var model=collection[i];
		if(model.type==name){
			return model;
		}
	}
      
  }

/**

renders inner sync view and binds all model events to DataSync_Event_Modal_View
*/

  function renderInnerSyncView(url,templateName,data,callback,form_custom_validate_callback){
  		 var data_sync = new DataSync_Event_Modal_View({
			                    url: url,
			                    template: templateName,
			                    data:data,
			                    form_custom_validate : form_custom_validate_callback,
			                    saveCallback: function(model) {			                      
			                       callback(model);
			                    }
			                });

  		 var el = $("#data-sync-settings-tab-content");
  		 if(el.length == 0)
			el = $("#data-import-settings-tab-content");  		 	 

		el.html(data_sync.render().el);
  }


// Twilio call noty when user change tab
var Twilio_Call_Noty;
var Twilio_Call_Noty_IMG = "";

var To_Number;
var To_Name = "";

var Twilio_Token;
var Verfied_Number;
var globalconnection;
var Twilio_Setup_Called = false;
var Twilio_Start = false;
var Restart_Twilio = false;
TWILIO_CONTACT_ID = 0;
TWILIO_CALLTYPE = "";
TWILIO_DIRECTION = "";
TWILIO_CALLED_NO = "";
TWILIO_IS_VOICEMAIL = false;
var TWILIO_CONTACT ;

function initializeTwilioGlobalListeners(){
	
}

$(function(){

	// After 15 sec procedure will start.
	setTimeout(function()
	{
		// after DOM ready.
		if (document.readyState === "complete")
		{
			globalTwilioIOSetup();
		}
	}, 10000); // 15 sec
    
    $('body').off('click', '.noty_twilio_mute');
	$('body').on('click', '.noty_twilio_mute', function(e)
			{
				e.preventDefault();
				console.log("Twilio call noty_twilio_mute from noty");
				
				globalconnection.mute(true);
				
				$('.noty_buttons').find('.noty_twilio_unmute').css('display','inline');
				$('.noty_buttons').find('.noty_twilio_mute').toggle();
			});
	
    $('body').off('click', '.noty_twilio_unmute');
	$('body').on('click', '.noty_twilio_unmute', function(e)
			{
				e.preventDefault();
				console.log("Twilio call noty_twilio_unmute from noty");

				globalconnection.mute(false);
				
				$('.noty_buttons').find('.noty_twilio_unmute').toggle();
				$('.noty_buttons').find('.noty_twilio_mute').toggle();
			});
	
	$('body').off('click', '.noty_twilio_hangup');
	$('body').on('click', '.noty_twilio_hangup', function(e)
	{
		e.preventDefault();
		console.log("Twilio call hang up from noty");

		Twilio.Device.disconnectAll();
	});

    $('body').off('click', '.noty_twilio_dialpad');
	$('body').on('click', '.noty_twilio_dialpad', function(e)
	{
		e.preventDefault();
		console.log("Twilio call dailpad from noty");

		$('.noty_buttons').find('#dialpad_in_twilio').toggle();
		if($('#dialpad_in_twilio:visible').length > 0){
			$("#panel-body1, #draggable-noty" ).css({"height":"150px"});
		}else{
			$("#panel-body1, #draggable-noty" ).css({"height":"45px"});
		}
		
	});
	
	//START voice mails
    $('body').off('click', '#noty_twilio_voicemail');
	$('body').on('click', '#noty_twilio_voicemail', function(e){
		e.preventDefault();
		var voiceMailCount = parseInt($(this).attr('data-length'));
		if(voiceMailCount === 1) {
			sendVoiceAndEndCall($(this).attr('data-src'));
		} else {
			$("#splitButtonVoicemail").trigger("click");
		}
	});
	
    $('body').off('click', '.voiceMailItem');
	$('body').on('click', '.voiceMailItem', function(e){
		e.preventDefault();
		sendVoiceAndEndCall($(this).attr('data-src'));
	});
		
	//END voice mails related
    $('body').off('click', '.noty_twilio_answer');
	$('body').on('click', '.noty_twilio_answer', function(e)
	{
		e.preventDefault();
		console.log("Twilio call answered from noty");

		globalconnection.accept();
	});

    $('body').off('click', '.noty_twilio_ignore');
	$('body').on('click', '.noty_twilio_ignore', function(e)
	{
		e.preventDefault();
		console.log("Twilio call ignore from noty");

		globalconnection.ignore();
		if(CALL_CAMPAIGN.start){
				CALL_CAMPAIGN.state = "START";
				dialNextCallManually();			
	}
	});

    $('body').off('click', '.noty_twilio_cancel');
	$('body').on('click', '.noty_twilio_cancel', function(e)
	{
		e.preventDefault();
		console.log("Twilio call canceld from noty");

		//globalconnection.disconnect();

		Twilio.Device.disconnectAll();
	});

    $('body').off('click', '#validate_account');
	$('body').on('click', '#validate_account', function(e)
	{
		e.preventDefault();
		console.log("In validate event");

		if ($(this).text() == "Validating...")
		{
			console.log("Do not hit me again " + $(this).text());
			return;
		}

		// Checks whether all input fields are given
		if (!isValidForm($("#twilioio_login_form")))
		{
			return;
		}

		var acc_sid = $("#twilio_acc_sid").val();
		var auth_token = $("#twilio_auth_token").val();

		// if (acc_sid.match("^AC"))
		{
			// Change validate to validating
			$("#validate_account").text("Validating...");
			$("#validate_account").attr("disabled", true);

			// validate entered details and get verified numbers
			getValidateAndVerfiedCallerId(acc_sid, auth_token, null);
		}
		/*
		 * else alert("Account SID should start with 'AC'");
		 */
	});

    $('body').off('change', '#twilio_number');
	$('body').on('change', '#twilio_number', function(e)
	{
		e.preventDefault();
		$("#error-number-not-selected").hide();

		var numberSID = $("#twilio_number option:selected").attr("data");
		console.log("twilio_number change");
		console.log("twilio_number " + $(this).val() + " clicked " + numberSID);

		$("#twilio_number_sid").val(numberSID);
	});
	
    $('body').off('change', '#twilio_from_number');
	$('body').on('change', '#twilio_from_number', function(e)
	{
		e.preventDefault();
		$("#error-number-not-selected").hide();
	});

    $('body').off('click', '.contact-make-twilio-call,.TwilioIO_call');
	$('body').on('click', '.contact-make-twilio-call, .TwilioIO_call', function(e)
	{
		e.preventDefault();
		TWILIO_CALLTYPE = "Outgoing";
		TWILIO_DIRECTION = "outbound-dial";
		TWILIO_IS_VOICEMAIL = false;
		
//		alert("connecting twilio call");
		
		var contactDetailsObj = agile_crm_get_contact();
		TWILIO_CONTACT_ID = contactDetailsObj.id;
		TWILIO_CONTACT = contactDetailsObj;
//		alert(TWILIO_CONTACT_ID);

		if (Twilio.Device.status() == "busy"  || checkForActiveCall())
		{
			showAlertModal("on_call");
			return;
		}

		console.log("phone: " + $(this).closest(".contact-make-call").attr("phone"));

		if(CALL_CAMPAIGN.start )
			  {
				if(CALL_CAMPAIGN.state == "PAUSE"){
					showAlertModal("on_call");
					return;
				}
				CALL_CAMPAIGN.state = "PAUSE" ;
			  }
		twiliocall($(this).closest(".contact-make-call").attr("phone"), getContactName(contactDetailsObj));
	});

	$('body').off('click', '#twilio_acc_sid, #twilio_auth_token');
    $('body').on('click', '#twilio_acc_sid, #twilio_auth_token', function(e)
	{
		e.preventDefault();
		$("#note-number-not-available").hide();
	});
	
    $('body').off('click', '.twilioio-advance-settings');
	$('body').on('click', '.twilioio-advance-settings', function(e)
	 {
		e.preventDefault();
		
		// If twimlet url is none so display nothing
		if("None" == $("#twilio_twimlet_url").val())
			$("#twilio_twimlet_url").val(""); 
		
		// Toggle advanced settings
		$(".twilioio-advance-settings-hide").toggle();
	    $(".twilioio-advance-settings-show").toggle();
	    $("#twilio_recording").toggle();
	    $("#twilio_twimlet_url_controls").toggle();
	 });

    $('body').off('click', '#twilio_verify_settings');
	$('body').on('click', '#twilio_verify_settings', function(e)
			{
				e.preventDefault();

				getTemplate('twilio-initial', {}, undefined, function(template_ui){
					if(!template_ui)
						  return;
					$('#widget-settings').html($(template_ui));	

				}, "#widget-settings");
			});
	
		/*
		 * If Twilio account doesn't have numbers, we need to verify numbers in
		 * Twilio.On click of verify button in Twilio initial template,
		 * verifyNumberFromTwilio is called to verify a number in Twilio
		 */
        $('body').off('click', '#twilio_verify');
		$('body').on('click', '#twilio_verify', function(e)
		{
			e.preventDefault();

			// Checks whether all input fields are given
			if (!isValidForm($("#twilio_call_form")))
				return;

			// From number to make calls as entered by user
			var from_number = $('#twilio_from').val();
			console.log("Twilio verify from number: " + from_number);

			$.getJSON("core/api/widgets/Twilio", function(data)
					{
						console.log(data);
						
						if(data)
						{
							/*
							 * Verifies a number in Twilio and shows verification code in the Twilio
							 * template with a procced button
							 */
							verifyNumberFromTwilio(from_number, data.id, function(verified_data)
							{
								verified_data["settings"] = true;
								// Append the url with the random number in order to differentiate the same action performed more than once.
								verified_data["id"] = Math.floor((Math.random()*10)+1);
								
								console.log(verified_data);
								getTemplate('twilio-verify', verified_data, undefined, function(template_ui){
									if(!template_ui)
										  return;

									$('#widget-settings').html($(template_ui));	
								}, "#widget-settings");

							});
						}
					});
		});
		
		 $('body').off('click', '.play-twilio-record');
		$("body").on("click", '.play-twilio-record', function(e)
				{
			//close all the opened audio file
					var opened_audio_length = $(".audio-inside-sound:visible").length;
					while(opened_audio_length > 0){
						$($(".audio-inside-sound:visible")[0]).closest(".twilio-sound").find(".text-inside-sound").show()
						$($(".audio-inside-sound:visible")[0]).find(".twilio_audio")[0].pause();
						$($(".audio-inside-sound:visible")[0]).hide();
						opened_audio_length = opened_audio_length-1;
					}
					var el = $(this).closest(".twilio-sound");
					el.find(".audio-inside-sound").show();
					el.find(".text-inside-sound").hide();
					el.find(".twilio_audio")[0].play();
					
					
				});
		 $('body').off('click', '.close-twilio-record');
		$("body").on("click", '.close-twilio-record', function(e)
				{
					var el = $(this).closest(".twilio-sound");
					el.find(".twilio_audio")[0].pause();
					el.find(".audio-inside-sound").hide();
					el.find(".text-inside-sound").show();
				});
	
});

/*
 * Get token from widget details and setup twilio device. Caller : 1.
 * Twilio.Device.offline 2. init() 3. save_widget_prefs(...)
 */

function globalTwilioIOSetup()
{
	console.log("Twilio_Setup_Called: " + Twilio_Setup_Called);

	if (Twilio_Setup_Called)
		return;

	Twilio_Setup_Called = true;

	// Get Sip widget
	$.getJSON("/core/api/widgets/TwilioIO", function(twilioio_widget)
	{
		console.log("twilioio_widget");
		console.log(twilioio_widget);

		if (twilioio_widget == null)
			return;

		if (twilioio_widget.prefs != undefined)
		{
			twilioio_widget.prefs = eval("(" + twilioio_widget.prefs + ")");

			if (twilioio_widget.prefs.twilio_from_number)
				Verfied_Number = twilioio_widget.prefs.twilio_from_number;
			else
				Verfied_Number = twilioio_widget.prefs.twilio_number;
			
			getGlobalToken();
		}
	}).error(function(data)
	{
		console.log("twilioio error");
		console.log(data);
	});
}

function getGlobalToken()
{
	console.log("****** In getGlobalToken ******");
	Restart_Twilio = false;

	$.get("/core/api/widgets/twilio/getglobaltoken", function(token)
	{
		console.log("Twilio token " + token);
		Twilio_Token = token;

		setUpGlobalTwilio();

		// Restart twilio after 24 hrs with new token, because token life is 24hrs
		setTimeout(function()
		{
			// After 24hrs check where call is connected or not 
			if (Twilio.Device.status() == "busy")
			{
				Restart_Twilio = true;
			}
			else
			{
				// Get widget, Create token and set twilio device
				globalTwilioIOSetup();
			}
		}, 86400000); // 24 hr = 86400000ms

	}).error(function(data)
	{
		console.log("Twilio IO error ");
		console.log(data);
	});
	
	
}

function getValidateAndVerfiedCallerId(acc_sid, auth_token, callback)
{
	$.get("/core/api/widgets/twilio/validateaccount/" + acc_sid + "/" + auth_token, function(result)
	{
		console.log("Twilio validate account " + result);
		console.log(result);
		result = eval("(" + result + ")");
		console.log("Twilio validate account " + result);

		if (result)
		{
			// Get twilio number
			getTwilioNumbers(acc_sid, auth_token, function(twilioNumbers)
			{
				// Get verified number
				getVerifiedNumbers(acc_sid, auth_token, function(verifiedNumbers)
				{
					addNumbersInUI(twilioNumbers, verifiedNumbers);

					// If defined, execute the callback function
					if (callback && typeof (callback) === "function")
						callback(result);
				});
			});
		}
		else
			setToValidate(result, true);
	}).error(function(data)
	{
		console.log("Twilio validate account error");
		setToValidate(data, true);
	});
}

function addNumbersInUI(twilioNumbers, verifiedNumbers)
{
	console.log("Twilio twilio number " + twilioNumbers + "  " + verifiedNumbers);
	console.log("Twilio twilio number " + twilioNumbers.length + "  " + verifiedNumbers.length);

	// no twilio # as well as no verified #
	if (twilioNumbers.length == 0 && verifiedNumbers.length == 0)
	{
		// Reset form
		setToValidate("no number", false);

		// Add error msg at bottom of form
		$("#note-number-not-available").html("You have no twilio numbers and verified numbers.");
		$("#note-number-not-available").show();
	}
	// twilio # is available but no verified #
	else if (twilioNumbers.length != 0 && verifiedNumbers.length == 0)
	{
		// Add note at bottom you do not have verified #
		$("#note-number-not-available").html("You have no verified numbers. Please verify number in your Twilio account.");
		$("#note-number-not-available").show();

		// If no numbers
		if (!twilioNumbers[0].PhoneNumber)
		{
			showAlertModal("no_twilio_numbers");
			return;
		}

		console.log("Twilio twilio number " + twilioNumbers[0].PhoneNumber);

		// Add verified number in UI
		addTwilioNumbersInUI(twilioNumbers);

		// Hide validate button
		$("#validate_account").hide();

		// Show save button
		$("#save_prefs").show();

		// Hide twilio from numbers list
		$("#twilio_from_numbers").hide();

		// Show twilio numbers list
		$("#twilio_numbers").show();

		$("#twilio_number").addClass("required");
	}
	// verified # is available but no twilio #
	else if (twilioNumbers.length == 0 && verifiedNumbers.length != 0)
	{
		// Add note at bottom you do not have twilio #
		$("#note-number-not-available").html("You have no twilio numbers. Please buy or port a number in your Twilio account.");
		$("#note-number-not-available").show();

		// If no numbers
		if (!verifiedNumbers[0].PhoneNumber)
		{
			showAlertModal("no_verified_num");
			return;
		}

		console.log("Twilio verified number " + verifiedNumbers[0].PhoneNumber);

		// Add verified number in UI
		addVerifiedCallerIdInUI(verifiedNumbers);

		// Hide validate button
		$("#validate_account").hide();

		// Show save button
		$("#save_prefs").show();

		// Show twilio from numbers list
		$("#twilio_from_numbers").show();

		// Hide twilio numbers list
		$("#twilio_numbers").hide();

		$("#twilio_from_number").addClass("required");
	}
	// both available
	else if (twilioNumbers.length != 0 && verifiedNumbers.length != 0)
	{
		// Add verified number in UI
		addTwilioNumbersInUI(twilioNumbers);

		// Add verified number in UI
		addVerifiedCallerIdInUI(verifiedNumbers);

		// Hide validate button
		$("#validate_account").hide();

		// Show save button
		$("#save_prefs").show();

		// Show twilio from numbers list
		$("#twilio_from_numbers").show();

		// Show twilio numbers list
		$("#twilio_numbers").show();
	}
	
	// Show record call option on form
	//$("#twilio_recording").show();
	
	// Show twimlet url controls
	//$("#twilio_twimlet_url_controls").show();
}

function setToValidate(data, showAlert)
{
	// Change validate to validating
	$("#validate_account").text("Validate");
	$("#validate_account").attr("disabled", false);

	console.log("Twilio error ");
	console.log(data);

	if (showAlert){
		showAlertModal("valid_details");
		return;
	}

	// Reset form fields after sending email
	$("#twilioio_login_form").each(function()
	{
		this.reset();
	});
}

function getTwilioNumbers(acc_sid, auth_token, callback)
{
	$.get("/core/api/widgets/twilio/gettwilionumbers/" + acc_sid + "/" + auth_token, function(result)
	{
		console.log("Twilio getTwilioNumbers " + result);
		console.log(result);
		result = eval("(" + result + ")");
		console.log("Twilio getTwilioNumbers " + result);

		// If defined, execute the callback function
		if (callback && typeof (callback) === "function")
			callback(result);
	}).error(function(data)
	{
		console.log("error in getTwilioNumbers");
		setToValidate(data, true);
	});
}

function getVerifiedNumbers(acc_sid, auth_token, callback)
{
	$.get("/core/api/widgets/twilio/getverifiednumbers/" + acc_sid + "/" + auth_token, function(result)
	{
		console.log("Twilio getVerifiedNumbers " + result);
		console.log(result);
		result = eval("(" + result + ")");
		console.log("Twilio getVerifiedNumbers " + result);

		// If defined, execute the callback function
		if (callback && typeof (callback) === "function")
			callback(result);
	}).error(function(data)
	{
		console.log("error in getVerifiedNumbers");
		setToValidate(data, true);
	});
}

function addTwilioNumbersInUI(result)
{
	var phoneNumberHtml = '<option value="" default selected style="display:none;">Select a Twilio number</option>';
	var optionHtml = "";

	// Collect all twilio number for display
	$.each(result, function(index, phoneNumber)
	{
		optionHtml = '<option data="' + phoneNumber.Sid + '" value="' + phoneNumber.PhoneNumber + '">' + phoneNumber.PhoneNumber + '</option>';
		phoneNumberHtml = phoneNumberHtml + optionHtml;
	});

	optionHtml = '<option data="" value="">None</option>';
	phoneNumberHtml = phoneNumberHtml + optionHtml;
	
	// Add verified number in list
	$("#twilio_number").html(phoneNumberHtml);
}

function addVerifiedCallerIdInUI(result)
{
	var phoneNumberHtml = '<option value="" default selected style="display:none;">Select a verifed number</option>';
	var optionHtml = "";

	// Collect all verified number for display
	$.each(result, function(index, phoneNumber)
	{
		optionHtml = '<option value="' + phoneNumber.PhoneNumber + '">' + phoneNumber.PhoneNumber + '</option>';
		phoneNumberHtml = phoneNumberHtml + optionHtml;
	});

	optionHtml = '<option data="" value="">None</option>';
	phoneNumberHtml = phoneNumberHtml + optionHtml;
	
	// Add verified number in list
	$("#twilio_from_number").html(phoneNumberHtml);
}

//
function createAppSid(twilioio_prefs, callback)
{
	console.log("In createAppSid");
	var numberSid = "None";
	if (twilioio_prefs.twilio_number_sid != "")
		numberSid = twilioio_prefs.twilio_number_sid;

	if (twilioio_prefs.twilio_twimlet_url == "")
		twilioio_prefs.twilio_twimlet_url = "None";
	
	$.get("/core/api/widgets/twilio/createappsid/" + twilioio_prefs.twilio_acc_sid + "/" + twilioio_prefs.twilio_auth_token + "/" + numberSid+ "/" + twilioio_prefs.twilio_record+ "/" + encodeURIComponent(twilioio_prefs.twilio_twimlet_url), function(result)
	{
		console.log("Twilio createAppSid " + result);

		// If defined, execute the callback function
		if (callback && typeof (callback) === "function")
			callback(result);
	}).error(function(data)
	{
		console.log("Twilio get app sid error ");
		console.log(data);
		var that = this;
		showAlertModal("valid_details_try_again", undefined, function(){
			$("#save_prefs").text("Save");
			$("#save_prefs").attr("disabled", false);
			$("#save_prefs").hide();
			$("#validate_account").text("Validate");
			$("#validate_account").attr("disabled", false);
			$("#validate_account").show();

			// Show twilio from numbers list
			$("#twilio_from_numbers").hide();

			// Show twilio numbers list
			$("#twilio_numbers").hide();

			// Hide record call option on form
			//$("#twilio_recording").hide();
			
			// Hide twimlet url controls
			//$("#twilio_twimlet_url_controls").hide();
			
			// Reset form fields after sending email
			$("#twilioio_login_form").each(function()
			{
				that.reset();
			});
		});

		
	});
}

function fill_twilioio_numbers()
{
	// Hide validate button
	$("#validate_account").hide();

	// Show save button
	$("#save_prefs").show();

	$("#save_prefs").text("Loading...");
	$("#save_prefs").attr("disabled", true);
	
	// Retrieves widget which is fetched using script API
	// Get TwilioIO widget
	$.getJSON("/core/api/widgets/TwilioIO", function(twilioio_widget)
	{
		if (twilioio_widget == null)
			return;

		console.log("twilioio_widget");
		console.log(twilioio_widget);

		if (twilioio_widget.prefs != undefined)
		{
			twilioio_widget.prefs = eval("(" + twilioio_widget.prefs + ")");
			
			// Show advanced settings if data available
			if((twilioio_widget.prefs.twilio_record == "true") || (twilioio_widget.prefs.twilio_twimlet_url != "None"))
				$(".twilioio-advance-settings").click();

			getValidateAndVerfiedCallerId(twilioio_widget.prefs.twilio_acc_sid, twilioio_widget.prefs.twilio_auth_token, function(data)
			{
				console.log("In callback getValidateAndVerfiedCallerId");
				$('#twilio_from_number').val(twilioio_widget.prefs.twilio_from_number);
				$('#twilio_number').val(twilioio_widget.prefs.twilio_number);
				$('#twilio_number_sid').val(twilioio_widget.prefs.twilio_number_sid);
				$("#save_prefs").text("Save");
				$("#save_prefs").attr("disabled", false);
			});
		}
	}).error(function(data)
	{
		console.log("twilioio_widget error");
		console.log(data);
	});
}

function setUpGlobalTwilio()
{
	// Loads twilio min.js to intiliaze twilio call events
	head.js("https://static.twilio.com/libs/twiliojs/1.2/twilio.min.js", function()
	{
		Twilio.Device.setup(Twilio_Token);

		if (Twilio_Start)
			return;

		Twilio_Start = true;

		Twilio.Device.ready(function(device)
		{
			console.log("ready");

			console.log("in twilio ready Twilio_Setup_Called: " + Twilio_Setup_Called);
			Twilio_Setup_Called = false;

	
		});

		Twilio.Device.error(function(error)
		{
			console.log("Twilio error");
			console.log(error);
			console.log(error.code);

			if (Twilio.Device.status() == "busy")
			{
				if(!(CALL_CAMPAIGN.start && CALL_CAMPAIGN.call_from_campaign)){
					showAlertModal("active_connection");
					return;
				}
			}
			Twilio.Device.disconnectAll();

			closeTwilioNoty();

			// Token expired error
			if (error.code == "31205")
			{
				// Get widget, Create token and set twilio device
				globalTwilioIOSetup();
			}
			
			if (error.code == "31000")
			{
				// Get widget, Create token and set twilio device
				Twilio_Start = false;
				setUpGlobalTwilio();
			}
/*			if(CALL_CAMPAIGN.state == "START" ){
				restartCalling();
			}*/
		});

		Twilio.Device.connect(function(conn)
		{
			console.log("Twilio call is connected");
			// Called for all new connections
			console.log(conn);
			console.log(conn._status);
			globalconnection = conn;

				// If call campaign then update call noty
				if(CALL_CAMPAIGN.start && CALL_CAMPAIGN.call_from_campaign)
				  {
					
						// Change status of call
						CALL_CAMPAIGN.call_status = "CONNECTED";				
						
						// Start all timers
						//setTimerCallDuration();
						
						// Edit call status on call noty
						//$(".call_status").html("On Call");
						//$("#currentTime").html("");
						editCallContainer();
						
						return;
					 
				  }else{
						//TWILIO_CALLTYPE = "Incoming";
						//TWILIO_DIRECTION = "inbound";
						//To_Number = globalconnection.parameters.From;
						//To_Name = searchForContact(To_Number);
						//Twilio_Call_Noty_IMG = addContactImg("Incoming");
					  
						console.log("calling call noty");
						
						var btns = [{"id":"", "class":"btn btn-sm btn-default p-xs noty_twilio_mute icon-microphone","title":""},{"id":"", "class":"btn btn-sm btn-default p-xs noty_twilio_unmute icon-microphone-off","title":""},{"id":"", "class":"btn btn-xs btn-default noty_twilio_dialpad icon-th","title":""},{"id":"", "class":"btn btn-sm btn-danger noty_twilio_hangup","title":"Hangup"}];
						showDraggableNoty("Twilioio", TWILIO_CONTACT, "connected", To_Number, btns);
						
						/*showCallNotyPopup("connected", "Twilio", Twilio_Call_Noty_IMG+'<span class="noty_contact_details"><b>On call  </b>' + To_Number +'<br><a href="#contact/'+TWILIO_CONTACT_ID+'" style="color: inherit;">' + To_Name + '</a><br></span><div class="clearfix"></div>', false);*/
					 }		
		});

		Twilio.Device.disconnect(function(conn)
		{
			
			console.log("Twilio call is disconnected");

			if(CALL_CAMPAIGN.start){
				CALL_CAMPAIGN.call_status = "DISCONNECTED";
			}
			// Called for all disconnections
			console.log(conn);
			
			var phoneNumber = To_Number;
			var messageObj = conn.message;
			
			if (Twilio.Device.status() != "busy")
			{
				closeTwilioNoty();
					if(globalconnection){
						globalconnection.mute(false);
					}				

				// after disconnect check If restart is set so restart twilio with new token.
				// restart is set after 24hrs
				if (Restart_Twilio == true)
				{
					// Get widget, Create token and set twilio device
					globalTwilioIOSetup();
				}
			}
			
			try{
				// Get all call logs for widget only on cotact detail page
				if(window.location.hash.indexOf("contact/") != -1)
				  {
					if(typeof getTwilioIOLogs == 'undefined')
						return;
					
					getTwilioIOLogs(phoneNumber);
					
					// Change selected number if its different than calling number.
					var selectedNumber = $('#contact_number').val();
					if(selectedNumber != phoneNumber)
					{
						$("#contact_number").val(phoneNumber);
					}
				  }		
			}catch(err){
				console.log('error in log fetching' + err.message);
			}
	   	
			
		
		try{
			// notes related code			
			console.log("calSid new  " + conn.parameters.CallSid);
			
			
			twilioGetWidgetDetails(function(data){

				var widgetDetails = data;
				var widgetPrefs = $.parseJSON(data.prefs);
				var acc_sid = widgetPrefs.twilio_acc_sid;
				var auth_token = widgetPrefs.twilio_auth_token;	
				var isParent = "true";
				if(TWILIO_CALLTYPE == "Incoming") {
					isParent = "false";
				}

				var ApiCallUrl = "/core/api/widgets/twilio/getlastcall/" + acc_sid + "/" + auth_token + "/" + conn.parameters.CallSid + "/" + isParent;
				console.log(ApiCallUrl);
				if(!widgetDetails)
					return;

				twilioApiRequest(ApiCallUrl, function(data){
						var callDetails  = data;
						console.log("Call Details : isParent " + isParent);
						console.log(callDetails);
						
						if(!callDetails)
							return;

						var callDetailsJson = $.parseJSON(callDetails.responseText);
						if(isParent == "true")
							var callRespJson = callDetailsJson.calls[0];
						else
							var callRespJson = callDetailsJson;
						
						if(typeof callRespJson != "undefined") {
							if(typeof callRespJson.status != "undefined") {
								if(callRespJson.status != "completed" && CALL_CAMPAIGN.start){
									CALL_CAMPAIGN.state = "DISCONNECTED";
								}
								console.log(callRespJson.status);
								showNoteAfterCall(callRespJson,messageObj);
							}
						} else {
							if(CALL_CAMPAIGN.start){
								CALL_CAMPAIGN.state = "DISCONNECTED";
							}						

						}
						
							//if the call campaign is started then we try to make a next call from campaign
								if(($("#noteModal").data('bs.modal') || {}).isShown != true){
								if(CALL_CAMPAIGN.start)
								  {
									if(CALL_CAMPAIGN.call_from_campaign ){
											// if state is pause i.e callresp.status != completed then make another call
								
													if(TWILIO_IS_VOICEMAIL){
														TWILIO_IS_VOICEMAIL = false;
													}
													CALL_CAMPAIGN.state = "START";
														
													  if(CALL_CAMPAIGN.autodial){
														  dialNextCallAutomatically();
													  }else{
														  if(CALL_CAMPAIGN.last_clicked == "NEXT" || CALL_CAMPAIGN.last_clicked == "PREVIOUS"){
															  dialNextCallAutomatically();
														  }else{
															  dialNextCallManually();
														  }
													  }
									}else{
											CALL_CAMPAIGN.state = "START";
											dialNextCallManually();
										  }
								  	}	
								}
				});			

			});
			}catch(err){
				console.log("error --> " + err.message);
				if(CALL_CAMPAIGN.start)
				  {
					CALL_CAMPAIGN.state = "START";
					dialNextCallAutomatically();
				}
			}										
		});

		Twilio.Device
				.incoming(function(conn)
				{
					TWILIO_CALLTYPE = "Incoming";
					TWILIO_DIRECTION = "inbound";
					TWILIO_IS_VOICEMAIL = false;
					TWILIO_CONTACT_ID = 0;
					TWILIO_CONTACT = null;
					globalconnection = conn;
					var previousDialled;
					
						if(To_Number){
							previousDialled = To_Number;
						}
					
					To_Number = globalconnection.parameters.From;
					console.log("Incoming connection from " + conn.parameters.From);
					console.log("globalconnection status: "+globalconnection.status());


					addContactImg("Incoming", function(img){
						Twilio_Call_Noty_IMG = img;
					
						if (Twilio.Device.status() == "busy" || (CALL_CAMPAIGN.call_status == "CONNECTED" || CALL_CAMPAIGN.call_status == "CALLING" || CALL_CAMPAIGN.autodial == true))
						{
							console.log("getting one more call.");
							var btns = [];
							showDraggableNoty("Twilioio", TWILIO_CONTACT, "missedCall", conn.parameters.From, btns);
							
							//showCallNotyPopup("missedCall", "error", Twilio_Call_Noty_IMG+'<span class="noty_contact_details"><b>Missed call : </b><br>' + conn.parameters.From + '<br></span><div class="clearfix"></div>', 5000);
							if(previousDialled){
								To_Number = previousDialled ;  
							}
							conn.reject();						
							if (conn)
								conn.disconnect();
							return;
						}
					
						if(CALL_CAMPAIGN.start){
							CALL_CAMPAIGN.state = "PAUSE";
						}

					// accept the incoming connection and start two-way audio
					// conn.accept();

						searchForContact(To_Number, function(name){
								To_Name = name;

								var btns = [{"id":"", "class":"btn btn-primary noty_twilio_answer","title":"Answer"},{"id":"","class":"btn btn-danger noty_twilio_ignore","title":"Ignore"}];
								showDraggableNoty("Twilioio", TWILIO_CONTACT, "incoming", To_Number, btns);
								
								/*showCallNotyPopup("incoming", "Twilio",
										Twilio_Call_Noty_IMG+'<span class="noty_contact_details"><i class="icon icon-phone"></i><b>Incoming call </b>'+ To_Number + '<br><a href="#contact/'+TWILIO_CONTACT_ID+'" style="color: inherit;">' + To_Name + '</a><br></span><div class="clearfix"></div>', false);										*/
						});
					});	
					
				});

		// If any network failure, show error
		Twilio.Device.offline(function()
		{
			// Called on network connection lost.
			console.log("Twilio went offline");

			closeTwilioNoty();

			// Get widget, Create token and set twilio device
			// globalTwilioIOSetup();
		});

		// When call is cancelled, hide hang up and show call
		Twilio.Device.cancel(function(conn)
		{
			// who canceled the call
			console.log(conn.parameters.From);
			closeTwilioNoty();
			
			console.log("Incoming call calSid new  " + conn.parameters.CallSid);
			
			var messageObj = conn.message;	

			twilioGetWidgetDetails(function(data){

				var widgetDetails = data;
				var widgetPrefs = $.parseJSON(widgetDetails.prefs);
				var acc_sid = widgetPrefs.twilio_acc_sid;
				var auth_token = widgetPrefs.twilio_auth_token;	
				var isParent = "true";
				if(TWILIO_CALLTYPE == "Incoming") {
					isParent = "false";
				}
				var ApiCallUrl = "/core/api/widgets/twilio/getlastcall/" + acc_sid + "/" + auth_token + "/" + conn.parameters.CallSid + "/" + isParent;
				console.log(ApiCallUrl);
				if(!widgetDetails)
					return;
				
				twilioApiRequest(ApiCallUrl, function(data1){

					var callDetails  = data1;
					console.log(callDetails);
					
					if(!callDetails)
						return;
					
					var callRespJson = $.parseJSON(callDetails.responseText);
					
					if(typeof callRespJson != "undefined") {
						if(typeof callRespJson.status != "undefined") {
							console.log(callRespJson.status);
							showNoteAfterCall(callRespJson,messageObj);
						}
					} 
					// added for call campaign
					if(CALL_CAMPAIGN.start){
						CALL_CAMPAIGN.state = "START";	
						if(CALL_CAMPAIGN.autodial){
							dialNextCallAutomatically();
						}else{
							dialNextCallManually();
						}
					}	

				});
			});		
			
		});

		/*
		 * Called for each available client when this device becomes ready and
		 * every time another client's availability changes.
		 */
		Twilio.Device.presence(function(presenceEvent)
		{
			// name of client whose availablity changed
			console.log(presenceEvent.from);

			// true or false
			console.log(presenceEvent.available);
		});
	});
}
function twiliocall(phoneNumber, toName)
{
	// get the phone number to connect the call to
	
	params = { "from" : Verfied_Number, "PhoneNumber" : phoneNumber};

	// if call campaign is running then modify call container	
	try{
		if(CALL_CAMPAIGN.start)
		  {
				if(Twilio.Device.status() == "busy" || CALL_CAMPAIGN.call_status == "CONNECTED" || CALL_CAMPAIGN.call_status == "CALLING"){
					return;
				}
				
			if(CALL_CAMPAIGN.call_from_campaign)
			  {
				// Change status of call
				TWILIO_CALLTYPE = "Outgoing";
				TWILIO_DIRECTION = "outbound-dial";
				CALL_CAMPAIGN.call_status = "CALLING";		
				$("#pauseCallDiv").hide();
				$("#callStartText").html("");
				$("#callStartTime").html("");
				$("#callPauseText").hide();
				// Edit call status on call noty
				//$(".call_status").html("Calling");
		  	  }
		  }	
	}catch(err) {
		console.log("error --> " + err.message);
		Twilio.Device.disconnectAll();
		$("#callStartText").html("");
		$("#callStartTime").html("");
		return;
	}
	
	Twilio.Device.connect(params);

	To_Number = phoneNumber;
	To_Name = toName;
	TWILIO_CALLED_NO = To_Number;	
	
	if(!CALL_CAMPAIGN.call_from_campaign){
		addContactImg("Outgoing", function(img){
			Twilio_Call_Noty_IMG = img;
			// this was added to remve the error of popup message	
				console.log("calling call noty");
				
				var btns = [{"id":"", "class":"btn btn-default btn-sm noty_twilio_cancel","title":"Cancel"}];
				showDraggableNoty("Twilioio", TWILIO_CONTACT, "outgoing", To_Number, btns);
				
				/*showCallNotyPopup("outgoing", "Twilio", Twilio_Call_Noty_IMG+'<span class="noty_contact_details"><i class="icon icon-phone"></i><b>Calling </b>'+ To_Number +'<br><a href="#contact/'+TWILIO_CONTACT_ID+'" style="color: inherit;">' + To_Name + '</a><br></span><div class="clearfix"></div>', false);*/
		});		
	}	
}

// Send DTMF signal to twilio active connection from dialpad.
function twilioSendDTMF(digit)
{
	console.log("twilioSendDTMF: " + digit);

	// session for call is active and number is available.
	if (Twilio.Device.status() == "busy" && digit)
	{
		// send dtmf on twilio
		// if (connection)
		globalconnection.sendDigits(digit);
	}
}

function closeTwilioNoty()
{
	if (Twilio.Device.status() == "busy")
		return;

	globalconnection = undefined;
	To_Number = undefined;
	To_Name = "";
	closeCallNoty(true);
	// Close noty
	if (Twilio_Call_Noty != undefined)
	{
		Twilio_Call_Noty.close();
		Twilio_Call_Noty = undefined;
	}
	
	
}

function showNoteAfterCall(callRespJson,messageObj)
{
	if(!(TWILIO_IS_VOICEMAIL == false))
		   return;

	var	el = $("#noteForm");
	//	TWILIO_CONTACT_ID = 0;

	if(CALL_CAMPAIGN.start){
		if(TWILIO_CALLTYPE == "Outgoing" && CALL_CAMPAIGN.call_from_campaign){
			getContactDetails();
		}
	}
	if(TWILIO_CONTACT_ID) {

		accessUrlUsingAjax("core/api/contacts/"+TWILIO_CONTACT_ID, function(resp){

			console.log(callRespJson);
			var json = resp;
			if(json == null) {
				return showNewContactModal(messageObj);
			}

			var contact_name = getContactName(json);
			var noteSub = "";
			var friendlyStatus = "";
			var callStatus = callRespJson.status;

			if(callStatus != 404 && typeof callRespJson.duration != "undefined") {
			
					var phoneNumber = "";
					if(TWILIO_DIRECTION == "outbound-dial") {
		//				phoneNumber = callRespJson.to;
						phoneNumber = TWILIO_CALLED_NO;
						TWILIO_CALLED_NO = "";
						
						if(callStatus != "completed") {
							$.post( "/core/api/widgets/twilio/savecallactivityById",{
								id:TWILIO_CONTACT_ID,
								direction: TWILIO_DIRECTION, 
								phone: phoneNumber, 
								status : callRespJson.status,
								duration : callRespJson.duration 
								});
						}
					}else{
						phoneNumber = callRespJson.from;
						
						if(callStatus != "completed") {
							$.post( "/core/api/widgets/twilio/savecallactivity",{
								direction: TWILIO_DIRECTION, 
								phone: phoneNumber, 
								status : callRespJson.status,
								duration : callRespJson.duration 
								});
						}
					}
						
					

					var noteStatus = "";
					switch(callStatus) {
				    case "canceled":
				    	noteSub = TWILIO_CALLTYPE + " call - Declined";
				    	friendlyStatus = "Declined";
				    	noteStatus = "failed";
				        break;
				    case "completed":
				    	noteSub = TWILIO_CALLTYPE + " call - Done";
				    	friendlyStatus = "Done";
				    	noteStatus = "answered";
				    	break;
				    case "busy":
				    	noteSub = TWILIO_CALLTYPE + " call - Busy";
				    	friendlyStatus = "Received busy tone on number "+ phoneNumber;
				    	noteStatus = "busy";
				    	break;
				    case "failed":
				    	noteSub = TWILIO_CALLTYPE + " call - Failed";
				    	friendlyStatus = TWILIO_CALLTYPE + " call made to "+ phoneNumber +" has failed";
				    	noteStatus = "failed";
				    	break;
				    case "no-answer":
				    	noteSub = TWILIO_CALLTYPE + " call - No answer";
				    	friendlyStatus = "No answer";
				    	noteStatus = "busy";
				    	break;
				    default:
				        return;
					}
				 	// Adds contact name to tags ul as li element
					if(callStatus == "completed") {

						var data = {};
						data.url = "/core/api/widgets/twilio/";
						data.subject = noteSub;
						data.number = phoneNumber;
						data.callType = TWILIO_DIRECTION;
						data.status = "answered";
						data.duration = callRespJson.duration;
						data.contId = json.id;
						data.contact_name = contact_name;
						data.widget = "Twilio";
						showDynamicCallLogs(data);

						//changed by prakash to add the last_called parameter and last_connected parameter of contact object on server side - 15/6/15
							if(TWILIO_DIRECTION == "outbound-dial") {
								twilioIOSaveContactedTime();	
							//code to be written to save tag to cotacts for call campaign...
							if(CALL_CAMPAIGN.start && CALL_CAMPAIGN.call_from_campaign){
								updateTotalTime(callRespJson.duration);
								saveTagForCampaign();
							}
							}
											
					} else {
						//add note automatically
						$.post( "/core/api/widgets/twilio/autosavenote", {
							subject: noteSub,
							message: "",
							contactid: TWILIO_CONTACT_ID,
							phone: phoneNumber,
							callType: TWILIO_DIRECTION,
							status: noteStatus,
							duration: 0
							});
					}
				}
		});
			
	} else {
		var phoneNumber = "";
		if(TWILIO_DIRECTION == "outbound-dial"){
			phoneNumber = callRespJson.to;
/*			$.post( "/core/api/widgets/twilio/savecallactivityById",{
				id:TWILIO_CONTACT_ID,
				direction: TWILIO_DIRECTION, 
				phone: phoneNumber, 
				status : callRespJson.status,
				duration : callRespJson.duration 
				});*/
		}else{
			phoneNumber = callRespJson.from;
		}
			$.post( "/core/api/widgets/twilio/savecallactivity",{
				direction: TWILIO_DIRECTION, 
				phone: phoneNumber, 
				status : callRespJson.status,
				duration : callRespJson.duration 
				});
		

		return showNewContactModal(phoneNumber);
	}
	
}


function showNewContactModal(phoneNumber) {
	$('#personModal').modal('show');
	$("#personForm").find("#phone").val(phoneNumber);
	return;
}

function twilioSecondsToFriendly(time) {
	var hours = Math.floor(time / 3600);
	if(hours > 0)
	time = time - hours*60*60;
	var minutes = Math.floor(time / 60);
	var seconds = time - minutes * 60;
	var friendlyTime = "";
	if(hours == 1)
		friendlyTime = hours+ "h ";
	if(hours > 1)
		friendlyTime = hours+ "h ";
	if(minutes > 0)
		friendlyTime += minutes + "m ";
	if(seconds > 0)
		friendlyTime += seconds + "s ";
	if(friendlyTime != "")
	return friendlyTime;
}

function searchForContact(from, callback) {
	console.log("searchForContact : " + from);	
	
	var name = "";
	try {

	    accessUrlUsingAjax("core/api/contacts/search/phonenumber/"+from, function(responseJson){

	    	if(!responseJson)
	    		 callback(name);

			TWILIO_CONTACT_ID = responseJson.id;
			TWILIO_CONTACT = responseJson;
			console.log("TWILIO_CONTACT_ID : "+TWILIO_CONTACT_ID);
			callback(getContactName(responseJson));
	    });
		
    } catch(e){
    	callback(name);
    }
}

function sendVoiceAndEndCall(fileSelected) {
	console.log("Sending voice mail...");

	if(TWILIO_IS_VOICEMAIL == false) {
		
		var conn = globalconnection;
		twilioGetWidgetDetails(function(data){
			var widgetDetails = data;
			var widgetPrefs = $.parseJSON(widgetDetails.prefs);

			var acc_sid = widgetPrefs.twilio_acc_sid;
			var auth_token = widgetPrefs.twilio_auth_token;	
			var isParent = "true";
			var ApiCallUrl = "/core/api/widgets/twilio/getlastcall/" + acc_sid + "/" + auth_token + "/" + conn.parameters.CallSid + "/" + isParent;
			if(!widgetDetails)
				return;

			twilioApiRequest(ApiCallUrl, function(data1){
				var callDetails  = data1;
				if(!callDetails)
					return;

				var callDetailsJson = $.parseJSON(callDetails.responseText);
				if(isParent == "true")
					var callRespJson = callDetailsJson.calls[0];
				else
					var callRespJson = callDetailsJson;

				if(typeof callRespJson != "undefined") {
				if(typeof callRespJson.status != "undefined" && callRespJson.status == 'in-progress') {

						// alert("Voicemail will be sent to user.Current call will be closed.");
						var messageObj = globalconnection.message;
						twilioVoiceMailRedirect(fileSelected, function(data){
								if(!data)
								  return;
								closeTwilioNoty();
								// added for call campaign...
								if(CALL_CAMPAIGN.start){
									if(TWILIO_CALLTYPE == "Outgoing" && CALL_CAMPAIGN.call_from_campaign){
										getContactDetails();
									}
								}
								//...............................
								if(TWILIO_CONTACT_ID) {		
									//add note automatically
									$.post( "/core/api/widgets/twilio/autosavenote", {
										subject: TWILIO_CALLTYPE + " call - Left voicemail",
										message: "",
										contactid: TWILIO_CONTACT_ID
										});
									
									if(TWILIO_CALLED_NO != "") {
										$.post( "/core/api/widgets/twilio/savecallactivityById",{
											id:TWILIO_CONTACT_ID,
											direction: TWILIO_DIRECTION, 
											phone: TWILIO_CALLED_NO, 
											status : "voicemail",
											duration : 0 
											});
									}
									TWILIO_IS_VOICEMAIL = true;					
								}
						});
					}

				} else {
					return;
				}


			});
		});

	}
}

function twilioVoiceMailRedirect(fileSelected, callback) {

	twilioGetWidgetDetails(function(data){

		var widgetDetails = data;	
		if(!widgetDetails)
			return callback(false);

		var widgetPrefs = $.parseJSON(widgetDetails.prefs);
		var acc_sid = widgetPrefs.twilio_acc_sid;
		var auth_token = widgetPrefs.twilio_auth_token;	
		
		var isParent = "true";
		if(TWILIO_CALLTYPE == "Incoming") {
			isParent = "false";
		}
		var ApiCallUrl = "/core/api/widgets/twilio/getlastcall/" + acc_sid + "/" + auth_token + "/" + globalconnection.parameters.CallSid + "/" + isParent;
		console.log(ApiCallUrl);
		
		twilioApiRequest(ApiCallUrl, function(data1){
 	
 			var callDetails  = data1;
 			console.log("Call Details : isParent " + isParent);
			console.log(callDetails);	
			if(!callDetails)
				return;

			var callDetailsJson = $.parseJSON(callDetails.responseText);
			if(isParent == "true")
				var callRespJson = callDetailsJson.calls[0];
			else
				var callRespJson = callDetailsJson;

			ApiCallUrl = "/core/api/widgets/twilio/setvoicemail/" + acc_sid + "/" + auth_token + "/" +callRespJson.sid + "/" + fileSelected
			console.log("In ajax send voice mail : " + ApiCallUrl);	
			var resp  = twilioApiRequest(ApiCallUrl);
			//added for call-campaign...
			if(CALL_CAMPAIGN.start){
				$('#noty_twilio_voicemail').attr('disabled','disabled');
				$('#splitButtonVoicemail').attr('disabled','disabled');
				
			}
			//...........................
			return callback(true);

		});
	});
}


function twilioGetWidgetDetails(callback){

	accessUrlUsingAjax("/core/api/widgets/TwilioIO", function(resp){
		return callback(resp);
	});
}

//this will return an object
function twilioApiRequest(ApiCallUrl, callback){

	accessUrlUsingAjax(ApiCallUrl, function(resp){
		return callback(resp);
	});
}

// Get contact from DB and then return contact img
function searchForContactImg(from, callback) {
	console.log("searchForContactImg : " + from);	
	var contactImg = "";
	try {

		accessUrlUsingAjax("core/api/contacts/search/phonenumber/"+from, function(resp){

			var responseJson = resp;
			console.log("**** responseJson ****");
			console.log(responseJson);
			return callback(responseJson);

		});

	} catch(e) {
		return callback(null);
	}	
}

// Add contact img in html for call noty text with contact url
function addContactImg(callType, callback)
{
	var notyContactImg = "";
	if(callType == "Outgoing")
	  {
		var currentContact = agile_crm_get_contact();
		var contactImg = getGravatar(currentContact.properties, 40);
		notyContactImg = '<a href="#contact/'+TWILIO_CONTACT_ID+'" style="float:left;margin-right:10px;"><img class="thumbnail" width="40" height="40" alt="" src="'+contactImg+'" style="display:inline;"></a>';
		return callback(notyContactImg);
	  }
	else
	{
		searchForContactImg(To_Number, function(contact){
			var callingContact = contact;
			if(callingContact != null)
			{
				var contactImg = getGravatar(callingContact.properties, 40);
				notyContactImg = '<a href="#contact/'+TWILIO_CONTACT_ID+'" style="float:left;margin-right:10px;"><img class="thumbnail" width="40" height="40" alt="" src="'+contactImg+'" style="display:inline;"></a>';			
			}
			return callback(notyContactImg);
		});
	} 
}

/**
 * Take contact property and width for img, return gravatar or contact img.
 * Used for twilio IO as well as SIP call noty.
 */
function getGravatar(items, width)
{
	if (items == undefined)
		return;

	// Checks if properties already has an image, to return it
	var agent_image = getPropertyValue(items, "image");
	if (agent_image)
		return agent_image;

	// Default image
	var img = DEFAULT_GRAVATAR_url;
	var backup_image = "&d=404\" ";
	// backup_image="";
	var initials = text_gravatar_initials(items);

	if (initials.length == 0)
		backup_image = "&d=" + DEFAULT_GRAVATAR_url + "\" ";
	var data_name = "onLoad=\"image_load(this)\" onError=\"image_error(this)\" _data-name=\"" + initials;
	var email = getPropertyValue(items, "email");
	if (email)
	{
		return ('https://secure.gravatar.com/avatar/' + Agile_MD5(email) + '.jpg?s=' + width + backup_image + data_name);
	}

	return ('https://secure.gravatar.com/avatar/' + Agile_MD5("") + '.jpg?s=' + width + '' + backup_image + data_name);	
}
	
/**
 * Verifies a given number In Twilio and returns verification code to verify in
 * the Twilio Widget
 * 
 * @param from_number
 *            {@link String} Number to verify
 * @param callback
 *            Function to be executed on success
 */
function verifyNumberFromTwilio(from_number, id, callback)
{

	/*
	 * Sends GET request to the URL "/core/api/widgets/twilio/verify/numbers/"
	 * with Twilio_Plugin_Id and from_number as path parameters
	 */
	$.getJSON("/core/api/widgets/twilio/verify/numbers/" + id + "/" + from_number, function(verified_data)
	{
		console.log("Twilio verified_data " + verified_data);

		// If data is not defined return
		if (!verified_data)
			return;

		// If defined, execute the callback function
		if (callback && typeof (callback) === "function")
			callback(verified_data);

	}).error(function(data)
	{	
		// Append the url with the random number in order to differentiate the same action performed more than once.
		var flag = Math.floor((Math.random()*10)+1); 
		setUpError("Twilio", "widget-settings-error", data.responseText, window.location.protocol + "//" 
				+ window.location.host + "/#Twilio/twilio"+flag);
	});
	
	return;
}


var Widget_Collection_Events = Base_Collection_View.extend({

   events : {
   	  "click .install-custom-widget" : "addCustomWidgetClicked",
   },

   addCustomWidgetClicked : function(e){

   },
});


var Widget_Model_Events = Base_Model_View.extend({

   events : {
        "click #stripe_url" : "stripeUrl",
   	  "click .save-agile-widget" : "saveWidgetPrefs",
   	  "click .connect_shopify" : "connectShopify",
   	  "click .revoke-widget" : "revokeWidget"
   },

   stripeUrl: function(){
     var url = $('#stripe_url').attr('url');
     $('#stripe_url').attr('disabled', 'disabled');
     var scope = $("input:radio[name='scope']:checked").val();
     url += "&scope="+scope+"&return_url="+ encodeURIComponent(window.location.href);     
     window.location.assign(url);
   },

   revokeWidget : function(e){
   		e.preventDefault();
      	var ele = $(e.currentTarget);
      	
   		var widgetName = $(ele).closest("#widget-settings").attr("widget-name");
   		delete_widget(widgetName);
   		window.location.href = "#add-widget";
      location.reload();
   },

   saveWidgetPrefs : function(e){
      e.preventDefault();
      var ele = $(e.currentTarget);

      var widgetName = $(ele).closest("#widget-settings").attr("widget-name");
      if(!widgetName){
      	  return;
      }
	  
	  // Checks whether all input fields are given
	  if (!isValidForm($(ele).closest("form"))){
		 return;
	  }

		var prefs = serializeForm($(ele).closest("form").attr("id"));
		console.log(prefs);

		if(widgetName == "Sip"){
			prefs["sip_publicid"] = "sip:" + prefs["sip_privateid"] + "@" + prefs["sip_realm"]; 
		}

		if($(ele).attr("disabled"))
			  return;

		$(ele).attr("disabled", "disabled").val("Saving...");

      if(widgetName != "TwilioIO"){
         // Saves the preferences into widget with name
         save_widget_prefs(widgetName, JSON.stringify(prefs), function(data){
            console.log(data);
            $(ele).removeAttr("disabled").val("Save");
         });
      }else{
         createAppSid(prefs, function(data){
               // Update prefs
               console.log(data);
               prefs["twilio_app_sid"] = data;
               // Saves the preferences into widget with name
               save_widget_prefs(widgetName, JSON.stringify(prefs), function(data){
                  console.log(data);
                  $(ele).removeAttr("disabled").val("Save");
               });
         });
      }

		
   },

   connectShopify : function(e){
   	  e.preventDefault();

      var shopName = $('#shop').val();
		if (shopName != ""){
			var domain = window.location.origin;
			window.location = "/scribe?service_type=shopify&url=shopify&isForAll="+isForAll+"&shop=" + shopName + "&domain=" + domain + "";
		}else{
			showAlertModal("enter_shop_name", undefined, function(){
        $('#shop').focus();
      });
			return false;
		}
   }

});/**
 * Loads widgets on a contact, creates a collection view
 */
var Widgets_View;
var widget_template_loaded_map = {};

/**
 * Loads all the widgets for the current agile user
 * 
 * @param el
 * @param contact
 */
function loadWidgets(el, contact)
{
	// Before loading the widgets, clear the queue of requests.
	// queueClear("widget_queue");
	// Create Data JSON
	var data = { contact : contact };

	var is_widget_view_new = false;
	/*
	 * If Widgets_View is not defined , creates collection view, collection is
	 * sorted based on position i.e., set when sorted using jquery ui sortable
	 */
	if (!Widgets_View)
	{
		// This flag is used to ensure widget script are loaded only once in
		// postrender. It is set to false after widget setup is initialized
		is_widget_view_new = true;
		Widgets_View = new Base_Collection_View({ url : '/core/api/widgets', restKey : "widget", templateKey : "widgets", individual_tag_name : 'li',
			sortKey : 'position', modelData : data, postRenderCallback : function(widgets_el)
			{
				head.load(FLAT_FULL_UI + "css/misc/agile-widgets.css", function()
				{
					// If scripts aren't loaded earlier, setup is initialized
					if (is_widget_view_new)
					{
						set_up_widgets(el, widgets_el, contact.id);
					}
					is_widget_view_new = false;
				})

			} });

		/*
		 * Fetch widgets from collection and set_up_widgets (load their scripts)
		 */
		Widgets_View.collection.fetch();

		// show widgets
		var newEl = Widgets_View.render().el;
		$('#widgets', el).html(newEl);
		widgetBindingsLoader();
	}
	else
	{
		/*
		 * Have a flag, which is used to check whether widgets are already
		 * loaded. This avoid unnecessary loading.
		 */
		var flag = false;
        $(el).off('view_loaded');
		$(el).on('view_loaded', function(e)
		{

			if (flag == false)
			{
				flag = true;

				// Sort needs to be called as there could be position change
				Widgets_View.collection.sort();

				$('#widgets', el).html(Widgets_View.render(true).el);
				// Sets up widget
				set_up_widgets(el, Widgets_View.el, contact.id);

			}
			widgetBindingsLoader();
		});
	}
}

function widgetBindingsLoader(){
	/*
	 * Called on click of icon-minus on widgets, collapsed class is added to it
	 * and sets "is_minimized" field of widget as true, we check this while
	 * loading widgets and skip loading widget if it is minimized
	 */
    $('#widgets').off('click', '.widget-minimize');
	$('#widgets').on('click', '.widget-minimize', function(e)
	{
		e.preventDefault();
		var widget_name = $(this).attr('widget');

		// content in widget is hidden
		$("#" + widget_name).collapse('hide');
		$(this).removeClass();

		$(this).addClass('collapsed');
		$(this).addClass('widget-maximize');
		$(this).addClass('fa');
		$(this).addClass('fa-plus');
		$(this).addClass('text-muted');

		// Get widget from collection by widget name
		var widget = Widgets_View.collection.where({ name : widget_name })[0]
		var widgetJSON = widget.toJSON();

		// set "is_minimized" field of widget as true
		widget.set({ 'is_minimized' : true }, { silent : true });
		widgetJSON['is_minimized'] = true;

		// Get model and save widget
		var model = new BaseModel();
		model.url = "core/api/widgets";
		model.save(widgetJSON, { silent : true });

	});

	/*
	 * Called on click of icon-plus on widgets, sets "is_minimized" field of
	 * widget as false, we check this while loading widgets and skip loading
	 * widget if it is minimized
	 */
    $('#widgets').off('click', '.widget-maximize');
	$('#widgets').on('click', '.widget-maximize', function(e)
	{
		e.preventDefault();
		var widget_name = $(this).attr('widget');

		// Get widget from collection by widget name
		var widget = Widgets_View.collection.where({ name : widget_name })[0];
		var widgetJSON = widget.toJSON();

		// set "is_minimized" field of widget as false
		widgetJSON['is_minimized'] = false;
		widget.set({ 'is_minimized' : false }, { silent : true })

		// Get model and save widget
		var model = new BaseModel();
		model.url = "core/api/widgets";
		model.save(widgetJSON, { silent : true });

		// Stores boolean whether widget has class collapsed
		var is_collapsed = $(this).hasClass('collapsed');
		$(this).removeClass();

		$(this).addClass('widget-minimize');
		$(this).addClass('text-muted');
		$(this).addClass('fa');
		$(this).addClass('fa-minus');
		$(this).addClass('c-p');		

		/*
		 * If is collapsed, script is already loaded, show the content in widget
		 * and return
		 */
		if (is_collapsed)
		{
			$("#" + widget_name).collapse('show');
		}else{			
			queueGetRequest("_widgets_", "flatfull/"+widget.get('url'), "script", function(data, queueName){
					try{
					console.log("start" + model.get('name') + "Widget");
					  eval("start" + model.get('name') + "Widget")(queueName.replace("_widgets_", ""));	
					  $("#" + widget_name).collapse('show');
					}catch(err){ 						
						console.log(err);
					}		
			}, undefined, 'true');
		}

	});
}

function process_url(url)
{
	return url = FLAT_FULL_UI + url;
}

/**
 * Loads the scripts of widgets which are not minimized and enables sorting
 * functionality on widgets
 * 
 * @param el
 * @param widgets_el
 */
function set_up_widgets(el, widgets_el, contact_id)
{
	/*
	 * Iterates through all the models (widgets) in the collection, and scripts
	 * are loaded from the URL in the widget
	 */
	_(Widgets_View.collection.models).each(function(model)
	{
		// In case collection is not empty
		var id = model.get("id");
		var url = process_url(model.get("url"));

		model.set('selector', model.get('name').replace(/ +/g, ''));

		/*
		 * Set the data element in the div so that we can retrieve this in get
		 * plugin preferences
		 */
		$('#' + model.get('selector'), widgets_el).data('model', model);

		if(!contact_id)
			contact_id = App_Contacts.contactDetailView.model.get("id");
		
		/*
		 * Checks if widget is minimized, if minimized script is not loaded
		 */
		if (!model.get("is_minimized") && model.get("widget_type") != "CUSTOM")
		{
			if (widget_template_loaded_map[model.get('name').toLowerCase()])
			{
				queueGetRequest("_widgets_" + contact_id, url, "script", function(data, queueName){
					try{
					console.log("start" + model.get('name') + "Widget");
					  eval("start" + model.get('name') + "Widget")(queueName.replace("_widgets_", ""));	
					}catch(err){console.log(err);}
					
				}, undefined, 'true');
			}
			else
				downloadTemplate(model.get('name').toLowerCase() + ".js", function()
				{
					widget_template_loaded_map[model.get('name').toLowerCase()] = true;
					queueGetRequest("_widgets_" + contact_id, url, "script", function(data, queueName){
						try{
							console.log("start" + model.get('name') + "Widget");
					  		eval("start" + model.get('name') + "Widget")(queueName.replace("_widgets_", ""));	
						}catch(err){console.log(err);}						
					}, undefined, 'true');
				});
		}

		/*
		 * For custom widgets we load the scripts using HTTP connections and
		 * store the script in script field of widget object, that is retrieved
		 * and appended in the body
		 */
		if (model.get("widget_type") == "CUSTOM")
		{

			if ($('#' + model.get('selector') + '-container').length){
				$('#' + model.get('selector') + '-container', widgets_el).show('0', function(e){
					setup_custom_widget(model, widgets_el);
				});

				//setup_custom_widget(model, widgets_el)
			}else {
				$('#' + model.get('selector') + '-container', widgets_el).show('0', function(e){
					setup_custom_widget(model, widgets_el);
				});
			}
		}
	}, this);
	enableWidgetSoring(widgets_el);
}

function setup_custom_widget(model, widgets_el)
{
	try
	{
		// $('form', this).focus_first();
		if (model.get('script'))
			$('#' + model.get('selector'), widgets_el).html(model.get('script'));
		else
			getScript(model, function(data)
			{
				console.log(data);
				$('#' + model.get('selector'), widgets_el).html(data);
			});
	}
	catch (err)
	{
		console.log(err);
	}
}

function getScript(model, callback)
{
	try
	{
		// Gets contact id, to save social results of a particular id
		var contact_id = agile_crm_get_contact()['id'];

		$.post("core/api/widgets/script/" + contact_id + "/" + model.get("name"), function(data)
		{

			// If defined, execute the callback function
			if (callback && typeof (callback) === "function")
				callback(data);
		}).error(function(data)
		{
			console.log(data);
			console.log(data.responseText);
		});
	}
	catch (err)
	{
		console.log(err);
	}
}

/**
 * Enables sorting on widgets by loading jquery-ui to get sortable functionality
 * on widgets. Whenever widget is sorted, it saves the new positions of widgets
 * 
 * @param el
 */
function enableWidgetSoring(el)
{
	// Loads jquery-ui to get sortable functionality on widgets
	head.js(LIB_PATH + 'lib/jquery-ui.min.js', function()
	{
		$('.widget-sortable', el).sortable();

		// Makes icon-cursor-move on widgets panel as handle for sorting
		$('.widget-sortable', el).sortable("option", "handle", ".icon-widget-move");

		/*
		 * This event is called after sorting stops to save new positions of
		 * widgets
		 */
        $('.widget-sortable', el).off("sortstop");
		$('.widget-sortable', el).on(
				"sortstop",
				function(event, ui)
				{
					var models = [];

					/*
					 * Iterate through each all the widgets and set each widget
					 * position and store it in array
					 */
					$('.widget-sortable > li', el).each(function(index, element)
					{
						var model_name = $(element).find('.collapse').attr('id');

						if(!model_name)
						model_name = $(element).find('.widgets').attr('id');
						
						
						// Get Model, model is set as data to widget element
						var model = $('#' + model_name).data('model');

						model.set({ 'position' : index }, { silent : true });

						models.push({ id : model.get("id"), position : index });
					});

					// Saves new positions in server
					$.ajax({ type : 'POST', url : '/core/api/widgets/positions', data : JSON.stringify(models),
						contentType : "application/json; charset=utf-8", dataType : 'json' });
				});
	});
}

/**
 * Initializes an ajax queue with GET request for the given URL with the given
 * queue name
 * 
 * <p>
 * Requests with the same queue name are processes synchronously one after the
 * other. This method is used by widgets
 * </p>
 * 
 * @param queueName
 *            Name of the queue
 * @param url
 *            URL to make request
 * @param dataType
 *            Type of data to be retrieved
 * @param successcallback
 *            Function to be executed on success
 * @param errorCallback
 *            Function to be executed on error
 */
function queueGetRequest(queueName, url, dataType, successCallback, errorCallback, isCacheEnable)
{
	console.log(queueName + ", " + url);
	// Loads ajaxq to initialize queue
	head.js('/js/lib/ajaxm/ajaxq.js', function()
	{
		try
		{
			isCacheEnable = (isCacheEnable) ? true : false;
			/*
			 * Initialize a queue, with GET request
			 */
			$.ajaxq(queueName, { url : url, cache : isCacheEnable, dataType : dataType,

			// function to be executed on success, if successCallback is
			// defined
			success : function(data)
			{
				console.log("Sucesses", url);
				if (successCallback && typeof (successCallback) === "function")
					successCallback(data, queueName);
			},

			// function to be executed on success, if errorCallback is
			// defined
			error : function(data)
			{
				console.log("error", url);
				if (errorCallback && typeof (errorCallback) === "function")
					errorCallback(data, queueName);
			},

			// function to be executed on completion of queue
			complete : function(data)
			{
				console.log('completed get');
			}, });
		}
		catch (err)
		{
			console.log(err);
		}
	});
}

/**
 * Initializes an ajax queue with POST request for the given URL with the given
 * queue name
 * 
 * <p>
 * Requests with the same queue name are processes synchronously one after the
 * other. This method is used by widgets
 * </p>
 * 
 * @param queueName
 *            Name of the queue
 * @param url
 *            URL to make request
 * @param dataType
 *            Type of data to be retrieved
 * @param successcallback
 *            Function to be executed on success
 * @param errorCallback
 *            Function to be executed on error
 */
function queuePostRequest(queueName, url, data, successcallback, errorCallback)
{
	// Loads ajaxq to initialize queue
	head.js('/js/lib/ajaxm/ajaxq.js', function()
	{
		try
		{
			/*
			 * Initialize a queue, with POST request
			 */
			$.ajaxq(queueName, { type : 'POST', url : url, cache : false, data : data,

			// function to be executed on success, if successCallback is
			// defined
			success : function(data)
			{
				if (successcallback && typeof (successcallback) === "function")
					successcallback(data);
			},

			// function to be executed on success, if errorCallback is
			// defined
			error : function(data)
			{
				if (errorCallback && typeof (errorCallback) === "function")
					errorCallback(data);
			},

			// function to be executed on completion of queue
			complete : function(data)
			{
				console.log('completed post');
			} });
		}
		catch (err)
		{
			console.log(err);
		}
	});
}

/**
 * Aborts all the requests in the queue.
 * 
 * @param queueName
 *            the name of the queue.
 */
function queueClear(queueName)
{
	console.log('clear queue.');
	if (document.ajaxq)
	{
		document.ajaxq.q[queueName] = [];
		try{

			document.ajaxq.qr[queueName].abort();
	  		document.ajaxq.qr[queueName] = null;
  		}catch(e){
  			console.log(e);
  		}
	}
}

/**
 * Shrink the widget header name width
 * 
 * <p>
 * Shows the icons and decrease the width of widget header to avoid the widget
 * name overflow on mouse hover
 * 
 * @param el
 *            Element on which mouse entered (widget header)
 */
function showIcons(el)
{
	// Shows widget icons on hover
	$(el).find('div.widget_header_icons').show();

	// Changes width of widget name
	$(el).find('div.widget_header_name').css({ "width" : "40%" });
}

/**
 * Expand the widget header name width.
 * 
 * <p>
 * Hide the icons and use the remaining width in widget header name DIV on mouse
 * leave
 * </p>
 * 
 * @param el
 *            Element on which mouse left (widget header)
 */
function hideIcons(el)
{
	// Hide widget icons on hover
	$(el).find('div.widget_header_icons').hide();

	// Changes width of widget name
	$(el).find('div.widget_header_name').css({ "width" : "80%" });
}
/**
 * Organizes widgets into different categories like (SOCIAL, SUPPORT, EMAIL,
 * CALL, BILLING.. etc) to show in the add widget page, based on the widget_type
 * fetched from Widget object
 * 
 * @param base_model
 */
function organize_widgets(base_model)
{
	var itemView = new Base_List_View({ model : base_model, template : this.options.templateKey + "-model", tagName : 'div', });

	// Get widget type from model (widget object)
	var widget_type = base_model.get('widget_type');

	/*
	 * Appends the model (widget) to its specific div, based on the widget_type
	 * as div id (div defined in widget_add.html)
	 */
	var container = "";

	if (widget_type == "SOCIAL")
		  container = "social";
	if (widget_type == "SUPPORT")
		  container = "support";
	if (widget_type == "EMAIL")
		container = "email";
	if (widget_type == "CALL")
	{
	  if( base_model.get('name') == "Twilio" && !base_model.get('is_added'))
		  console.log("It is old twilio");
	  else
		  container = "call";
	}	
	if (widget_type == "BILLING")
		container = "billing";
	if (widget_type == "ECOMMERCE")
		container = "ecommerce";
	if (widget_type == "CUSTOM")
		 container = "custom";

	if(container)
		$('#' + container, this.el).append($(itemView.render().el).addClass('col-md-4 col-sm-6 col-xs-12'));
}

/**
 * Add/ Delete button are shown in the widget based on the attribute is_added in
 * widget model, Add and delete functionalities of the widgets are defined in
 * this init function
 */
function initializeWidgetSettingsListeners(){
	// adding widget
	/**
	 * When user clicks on add-widget, gets the widget-name which is set to add
	 * anchor tag and gets the model from the collection with widget name and
	 * add widget then navigates back to the contact-details page
	 */
	$('#prefs-tabs-content').off();
	$('#prefs-tabs-content .install-custom-widget').off();
	$('#prefs-tabs-content, #custom-widget').on('click', '.install-custom-widget', function(e)
	{

		e.preventDefault();
		console.log($(this));
		
		/* We make add button on a widget disabled on click of it. This is done
		 * to avoid continuous click in a short time, like double click on add
		 * button
		 */
		if ($(this).attr("disabled"))
			return;

		// set attribute disabled as disabled
		$(this).attr("disabled", "disabled");

		// Reads the name of the widget to be added
		var widget_name = $(this).attr('widget-name');

		console.log('In add widget');
		console.log(widget_name);

		if (App_Widgets.Catalog_Widgets_View == null)
			return;

		
		 /* Get widget model from collection based on the name attribute of the
		 * widget model
		 */
		var models = App_Widgets.Catalog_Widgets_View.collection.where({ name : widget_name });

		
		 /* Saves widget model and on success navigate back to contact detailed
		 * view
		 */
		var widgetModel = new Backbone.Model();

		console.log(widgetModel);

		// URL to connect with widgets
		widgetModel.url = '/core/api/widgets';

		widgetModel.save(models[0].toJSON(), { success : function(data)
		{
			// Checks if Widget_View is defined and adds widget to collection
			if (Widgets_View && Widgets_View.collection)
				Widgets_View.collection.add(new BaseModel(data.toJSON()));


			data.set('is_added', true);
			models[0].set(data);

		} });

	});

	// Deleting widget
	/**
	 * When user chooses to delete a widget, on confirmation sends delete
	 * request based on the name of the widget
	 */
	$('#prefs-tabs-content #delete-widget').off();
	$('#prefs-tabs-content').on('click', '#delete-widget', function(e)
	{
		// Fetch widget name from the widget on which delete is clicked
		var widget_name = $(this).attr('widget-name');

		// If not confirmed to delete, return
		var displayName;
		
		if(widget_name == "Rapleaf"){
			displayName = "Towerdata";
		}else if(widget_name == "TwilioIO"){
			displayName = "Twilio";
		}else{
			displayName = widget_name;
		}

		showAlertModal("Are you sure to delete " + displayName, "confirm", function(){
			delete_widget(widget_name);

			if(widget_name == "Linkedin")
				$('#Linkedin-container').hide();
			
			if(widget_name == "Twilio")
				$('#Twilio-container').hide();
		},undefined, "Delete Widget");

	});	
	
	// Helps to know that widget is for all users.
	$('#prefs-tabs-content .add_to_all').off();
	$('#prefs-tabs-content').on('click', '.add_to_all', function(e){
		isForAll = true;
	});

	$('#prefs-tabs-content .add-widget').off();
	$('#prefs-tabs-content').on('click', '.add-widget', function(e){
		isForAll = false;
	});
	
	$('#prefs-tabs-content #remove-widget').off();
	$('#prefs-tabs-content').on('click', '#remove-widget', function(e)
	{

		// Fetch widget name from the widget on which delete is clicked
		var widget_name = $(this).attr('widget-name');
		
		
		// If not confirmed to delete, return
		showAlertModal("delete", "confirm", function(){
			//Deletes the cutom widget form the widget entity.
			delete_widget(widget_name);
			
			/*
			 * Sends Delete request with widget name as path parameter, and on
			 * success fetches the widgets to reflect the changes is_added, to show
			 * add widget in the view instead of delete option
			 */
			$.ajax({ type : 'DELETE', url : '/core/api/widgets/remove?widget_name=' + widget_name, contentType : "application/json; charset=utf-8",

			success : function(data)
			{
				update_collection(widget_name);
				
				// Call fetch on collection to update widget models
				App_Widgets.Catalog_Widgets_View.collection.fetch();

			}, dataType : 'json' });
		},undefined, "Delete Widget");

		

	});
	
}


function delete_widget(widget_name)
{
	/*
	 * Sends Delete request with widget name as path parameter, and on
	 * success fetches the widgets to reflect the changes is_added, to show
	 * add widget in the view instead of delete option
	 */
	$.ajax({ type : 'DELETE', url : '/core/api/widgets?widget_name=' + widget_name, contentType : "application/json; charset=utf-8",

	success : function(data)
	{

		App_Widgets.Catalog_Widgets_View.collection.where({ name : widget_name })[0].set({'is_added': false}, {silent : true}).unset("prefs");
		update_collection(widget_name);
		location.reload();
		
	}, dataType : 'json' });

}

function update_collection(widget_name)
{
	/*
	 * If Widgets_View is defined, remove widgets from widget collection
	 */
	if (Widgets_View && Widgets_View.collection)
	{
		// Fetch widget from collection based on widget_name
		var model = Widgets_View.collection.where({ name : widget_name });
		Widgets_View.collection.remove(model);
	}
}//Helps to know that widget is for all users.
var isForAll = false;

function initializeTabListeners(localStorageItem, navigateURL){
	$("#prefs-tabs-content .widgets_inner ul li").off("click");
	$("#prefs-tabs-content").on("click",".tab-container ul li",function(){
		var temp = $(this).find("a").attr("href").split("#");
		_agile_set_prefs(localStorageItem, temp[1]);
		Backbone.history.navigate(navigateURL, { trigger : true });
	});
}

function update_collection_with_prefs(data) {

	console.log("In update_collection_with_prefs");
	console.log(data);
	if (App_Widgets.Catalog_Widgets_View
			&& App_Widgets.Catalog_Widgets_View.collection) {
		var models = App_Widgets.Catalog_Widgets_View.collection.where({
			name : data["name"]
		});
		if (models && models[0]) {
			models[0].set({
				'prefs' : data.prefs
			});
			console.log(App_Widgets.Catalog_Widgets_View.collection.where({
				name : data["name"]
			})[0]);
		}

	}

	if (Widgets_View && Widgets_View.collection) {
		var models = Widgets_View.collection.where({
			name : data["name"]
		});
		if (models && models[0]) {
			models[0].set({
				'prefs' : data.prefs
			});
			console.log(Widgets_View.collection.where({
				name : data["name"]
			})[0]);
		}

	}

}

function save_widget_prefs(pluginName, prefs, callback) {
	console.log("In save_widget_prefs.");
	
	var msgType = "success";
	var displayName = pluginName;
	if(displayName=="TwilioIO")
		displayName="Twilio";
	var msg = displayName+" widget saved successfully";	

	/*
	 * Get widget model from collection based on the name attribute of the
	 * widget model
	 */
	var models = App_Widgets.Catalog_Widgets_View.collection.where({
		name : pluginName
	});

	/*
	 * Saves widget model and on success navigate back to contact detailed view
	 */
	var widgetModel = new Backbone.Model();

	console.log(widgetModel);

	// URL to connect with widgets
	widgetModel.url = '/core/api/widgets';
	models[0].set('prefs', prefs);
	models[0].set('isForAll', isForAll);

	widgetModel.save(models[0].toJSON(), {
		success : function(data) {
			// Checks if Widget_View is defined and adds
			// widget to collection
			if (Widgets_View && Widgets_View.collection) {
				Widgets_View.collection.add(new BaseModel(data.toJSON()));
			}

			data.set('is_added', true);
			models[0].set(data);
			var widgetID = data.id;
			
			if(pluginName  == "Rapleaf"){
				displayName = "Towerdata"
			}else if(pluginName == "HelpScout"){
				displayName = "Help Scout"
			}else if(pluginName == "TwilioIO"){
				displayName = "Twilio";
			}else{
				displayName = pluginName;
			}			

			if(widgetID){

				// If plugin name is CallScript do not redirect
				if (pluginName != "CallScript") {
					window.location.href = ("#" + pluginName + "/" + data.id);
				}

				console.log("data******");
				console.log(data);

				update_collection_with_prefs(data);

				if (pluginName == "Sip") {
					// Stop old stack.
					if (Sip_Start == true) {
						Sip_Updated = true;
						sipUnRegister();
					}
					// Register on Sip.
					sipStart();
					globalCallWidgetSet();
				}

				if (pluginName == "TwilioIO") {
					Twilio_Setup_Called = false;
					// Get widget, Create token and set twilio device
					globalTwilioIOSetup();
					globalCallWidgetSet();
				}

				if (pluginName == "Bria"){
					globalCallWidgetSet();
				}
				
				if (pluginName == "Skype"){
					globalCallWidgetSet();
				}

			}else{
				msgType = "error";

				if(pluginName == "Braintree" || displayName == "Uservoice"){					
					msg = "Invalid  "+displayName+" credentials";
				}else{					
					msg = ("Error occurred while saving "+displayName);
				}				
			}

			// if (pluginName != "CallScript")
			showNotyPopUp(msgType , msg, "bottomRight");
			$('#stripe_url').removeAttr('disabled');

			if (callback && typeof (callback) === "function") {
				callback(data);
			}

		}, error : function(data){
			console.log(data);

			msgType = "error";			

			if(pluginName == "Braintree" || pluginName == "Uservoice"){				
				msg = "Invalid  "+pluginName+" credentials";					
			}else{
				msg = "Error occurred while saving "+pluginName;	
			}

			$('#stripe_url').removeAttr('disabled');
			showNotyPopUp(msgType , msg, "bottomRight");
			$('#save_prefs').removeAttr('disabled');

		}
	});
}

function setUpError(widget_name, template_id, error_data, error_url, model) {

	$("#content").html(getTemplate("settings"), {});

	var el;
	var models;
	var json;

	if (model) {
		el = $(getTemplate("widget-settings", model));
		json = model;
	} else {

		if (!App_Widgets.Catalog_Widgets_View
				|| App_Widgets.Catalog_Widgets_View.collection.length == 0) {

						if(callback)
			 				callback(el);

			// Fetch the list of widgets
			App_Widgets.Catalog_Widgets_View.collection.fetch({ success : function() {
					$.getJSON('core/api/widgets/' + widget_name,function(data1) {
						setUpError(widget_name, template_id,
								error_data, error_url, data1)
					});
				}
			});
			return;
		}

		models = App_Widgets.Catalog_Widgets_View.collection.where({
			name : widget_name
		});
		json = models[0].toJSON();
		el = $(getTemplate("widget-settings", json));
	}

	json['error_message'] = error_data;
	json['error_url'] = error_url;
}

function set_up_access(widget_name, template_id, data, url, model){
	getTemplate('settings', {}, undefined, function(template_ui){
 		if(!template_ui)
    		return;
		$('#content').html($(template_ui)); 
		var el;
		var json;
		var models;

		$('#prefs-tabs-content').html(getRandomLoadingImg());
		$('#PrefsTab .select').removeClass('select');
		$('.add-widget-prefs-tab').addClass('select');

		if (model){
			getTemplate('widget-settings', model, undefined, function(template_ui1){
		 		if(!template_ui1)
		    		return;
				el = $(template_ui1);
				var widgetTab = _agile_get_prefs("widget_tab");
				el.find('a[href="#'+widgetTab+'"]').closest("li").addClass("active");
				initializeTabListeners("widget_tab", "add-widget");
				json = model; 
				setup_widget_revoke_access(el, json, data, widget_name, template_id, url, model);
			}, null);

			return;
		} else {

			$('#widget-settings', el).html(getTemplate(template_id, json));

			App_Widgets.Catalog_Widgets_View = new Base_Collection_View({ url : '/core/api/widgets/default' });

			$('#prefs-tabs-content').find('form').data('widget', json);

			$.getJSON('core/api/widgets/' + widget_name, function(data1){
				set_up_access(widget_name, template_id, data, url, data1)
			});
			
		} 
	});
}

function addWidgetProfile(widgetId, widgetName, template, url) {
	loadSettingsUI(function() {

		// Get route model
		getWidgetModelFromName(widgetId, "", function(model) {
				$.getJSON((url), function(data) {

					getTemplate(
							"widget-settings", model, undefined, function(widget_el){

					$('#prefs-tabs-content')
							.html(widget_el);

					// Loading GooglePlus profile
					if (widgetName == "GooglePlus") {
						var widgetPrefGP = JSON.parse(model.prefs);
						$.getJSON("https://www.googleapis.com/plus/v1/people/me?access_token="+ widgetPrefGP['access_token']).success(function(userData) { 
							model["profile"] = userData;
							// Create a view modal for widgets
							renderWidgetView(template, url, model, '#widget-settings');
							return;
						}).error(function() { 
							model["profile"] = {};
							// Create a view modal for widgets
							renderWidgetView(template, url, model, '#widget-settings');
							return;
						});
						return;
						// Loading Stripe profile
					} else if (widgetName == "Stripe") {					
						if(model)
						model["prefs"] = JSON.parse(model["prefs"]);

						$.getJSON("core/api/custom-fields/type/scope?scope=CONTACT&type=TEXT", function(data) {
							model["custom_data"] = data;

							// Create a view modal for widgets
							renderWidgetView(template, url, model, '#widget-settings');
							return;

						});

						try {		
							model["profile"] = JSON.parse(model.prefs);				  							
						}catch(err) {
							console.log("stripe try error");
						   	model["profile"] = model.prefs;
						}
						
					} else {

						if (data) {
							if($.isArray(data)){
								model["profile"] = jQuery.parseJSON(model.prefs);
							}else{
								try{
									data.prefs = jQuery.parseJSON(data.prefs);
								}catch(e){
									console.log("Error occured while parsing widget prefs");
								}
								model["profile"] = data;
							}
						}
						// Create a view modal for widgets
						renderWidgetView(template, url, model, '#widget-settings');
					}
					
				});								
			});
		});
	});
}

// 
function addOAuthWidget(widgetName, template, url) {
	loadSettingsUI(function() {

		// Get route model
		getWidgetModelFromName(widgetName, "name", function(model) {

			if (model) {
				model["url"] = url;
			}

			getTemplate("widget-settings", model, undefined, function(widget_el){
				$('#prefs-tabs-content').html(widget_el);

				// Create a view modal for widgets
				renderWidgetView(template, 'core/api/widgets',model, '#widget-settings');
				 $('[data-toggle="tooltip"]').tooltip();
			});

		});

	});
}

/**
 * Add model widget.
 */
function addConfigurableWidget(widgetId, widgetName, templateName) {

	loadSettingsUI(function() {

		var type = "";
		var selector = "";

		if (!widgetId) {
			type = "name";
			selector = widgetName;
		} else {
			selector = widgetId;
		}

		// Get route model
		getWidgetModelFromName(selector, type, function(model) {

			var widget_el = getTemplate("widget-settings", model);
			$('#prefs-tabs-content').html(widget_el);

			if(widgetName == "Braintree"){
				// Retrieve all custom from Agile account
				$.get("/core/api/custom-fields/type/scope?scope=CONTACT&type=TEXT", function(data){
					// Include 'stripe_field_name' to stripe_widget_prefs and save
					model['custom_fields'] = data;
					
					renderWidgetView(templateName, 'core/api/widgets',model, '#widget-settings');

				}, "json").error(function(data){
					
				});
				
			}else{
				// Create a view modal for widgets
				renderWidgetView(templateName, 'core/api/widgets',model, '#widget-settings');
			}

			if (model.name == "TwilioIO" && model.is_added) {
				fill_twilioio_numbers();
			}
		});
	});
}

function loadSettingsUI(callback) {
	getTemplate('settings', {}, undefined, function(template_ui) {
		if (!template_ui)
			return;

		$('#content').html($(template_ui));
		$('#prefs-tabs-content').html(getRandomLoadingImg());

		$('#PrefsTab .select').removeClass('select');
		$('.add-widget-prefs-tab').addClass('select');

		if (callback)
			callback();
	}, "#content");
}


function getWidgetModelFromName(widgetId, type, callback) {

	getAgileConfiguredWidgetCollection(function(widgetCollection) {

		var model = "";
		if (type == "name") {
			models = widgetCollection.where({ name : widgetId });
			model = models[0];
		} else {
			model = widgetCollection.get(widgetId);
		}

		if (!model) {
			Backbone.history.navigate('add-widget', { trigger : true });
			return;
		}
		callback(model.toJSON());
	});
}

function deserializeWidget(widget, el) {
	if (!widget.prefs){
		return;
	}
	deserializeForm(JSON.parse(widget.prefs), $(el).find("form"));
}
/**
 * triggers.js is a script file that sets tags typeahead when Tag options are
 * selected
 * 
 * @module Campaigns
 * 
 */
function initializeTriggersListeners(){
}

/**
 * Commented old code for trigger edit. 
 * Made it compatible with new listeners code. 
 * This function is called on trigger-edit route to 
 * initialize change events of trigger
 */
/*$(function(){

	// Tag suggestions when 'Tag is added' and 'Tag is deleted' options selected
	$('body').on('change', '#trigger-type', function(e)
	{
		e.preventDefault();

		// Hide trigger milestones div for other trigger conditions.
		if ($(this).val() !== 'DEAL_MILESTONE_IS_CHANGED'){
			$('form#addTriggerForm').find('select#trigger-deal-milestone').closest('div.control-group').css('display', 'none');
		}
		
		if($(this).val() !== 'RUNS_DAILY' || $(this).val() !== 'RUNS_WEEKLY' || $(this).val() !== 'RUNS_MONTHLY'){
			$('form#addTriggerForm').find('select#contact-filter').closest('div.control-group').css('display', 'none');
		}

		// Hide trigger stripe event div for other trigger conditions.
		if($(this).val() !== 'STRIPE_CHARGE_EVENT'){
			$('form#addTriggerForm').find('select#trigger-stripe-event').closest('div.control-group').css('display', 'none');
			$('form#addTriggerForm').find('select#trigger-stripe-event').val("");
			$('#trigger-run-on-new-contacts').css('display', 'none');
		}
		
		// Hide trigger shopify event div for other trigger conditions.
		if($(this).val() !== 'SHOPIFY_EVENT'){
			$('form#addTriggerForm').find('select#trigger-shopify-event').closest('div.control-group').css('display', 'none');
			$('form#addTriggerForm').find('select#trigger-shopify-event').val("");
			$('#trigger-run-on-new-contacts').css('display', 'none');
		}
		
		// Hide trigger inbound mail event div for other trigger conditions.
		if($(this).val() !== 'INBOUND_MAIL_EVENT'){
			$('form#addTriggerForm').find('div#trigger-inbound-mail-event').css('display', 'none');
			$('#new-mail-trigger-run-on-new-contacts').css('display', 'none');
		}
		
		if($(this).val() != 'EMAIL_OPENED' || $(this).val() != 'EMAIL_LINK_CLICKED'){
			
			$('form#addTriggerForm').find('select#email-tracking-type').closest('div.control-group').css('display', 'none');
			
			$('form#addTriggerForm').find('#custom-link-clicked').closest('div.control-group').css('display', 'none');
			
			$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', 'none');
		}
		
		if($(this).val() != 'UNSUBSCRIBED')
			$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', 'none');
		
		if($(this).val() != 'EVENT_IS_ADDED')
		{
			$('form#addTriggerForm').find('select#event-owner-id').closest('div.control-group').css('display', 'none');
			
			$('form#addTriggerForm').find('select#event-type').closest('div.control-group').css('display', 'none');
		}
		
		// Hide trigger milestones div for other trigger conditions.
		if ($(this).val() !== 'INBOUND_CALL' || $(this).val() !== 'OUTBOUND_CALL'){
			$('form#addTriggerForm').find('div#CALL').closest('div.control-group').css('display', 'none');
		}
			
		if($(this).val() != 'FORM_SUBMIT'){
			$('form#addTriggerForm').find('select#trigger-form-event').closest('div.control-group').css('display', 'none');
			$('#trigger-run-on-new-contacts').css('display', 'none');
		}

		// Initialize tags typeahead
		if ($(this).val() == 'TAG_IS_ADDED' || $(this).val() == 'TAG_IS_DELETED')
		{
			$('form#addTriggerForm').find('#trigger-custom-tags').closest('div.control-group').css('display', '');
			
			// Tags typeahead for tag input field
			addTagsDefaultTypeahead($('form#addTriggerForm').find('div#RHS'));
		}
		
		// Initialize tags typeahead
		if ($(this).val() == 'RUNS_DAILY' || $(this).val() == 'RUNS_WEEKLY' || $(this).val() == 'RUNS_MONTHLY')
		{	
			populate_contact_filters_in_trigger($('form#addTriggerForm'), 'contact-filter');
		}


		// Show score
		if ($(this).val() == 'ADD_SCORE')
			$('form#addTriggerForm').find('#trigger-custom-score').closest('div.control-group').css('display', '');
		
		// Populate milestones for triggers
		if ($(this).val() == 'DEAL_MILESTONE_IS_CHANGED')
		{
			populate_milestones_in_trigger($('form#addTriggerForm'), 'trigger-deal-milestone');
		}
		
		// Show stripe events
		if($(this).val() == 'STRIPE_CHARGE_EVENT')
		{
			populate_stripe_events_in_trigger($('form#addTriggerForm'), 'trigger-stripe-event');
		}
		
		// Show shopify events
		if($(this).val() == 'SHOPIFY_EVENT')
		{
			populate_shopify_events_in_trigger($('form#addTriggerForm'), 'trigger-shopify-event');
		}

		if($(this).val() == 'INBOUND_MAIL_EVENT')
		{
			populate_inbound_mail_events_in_trigger($('form#addTriggerForm'), 'trigger-inbound-mail-event');
		}
		
		if($(this).val() == 'EMAIL_OPENED' || $(this).val() == 'EMAIL_LINK_CLICKED'){
			$('form#addTriggerForm').find('#email-tracking-type').closest('div.control-group').css('display', '');
			
			if($(this).val() == 'EMAIL_LINK_CLICKED')
				$('form#addTriggerForm').find('#custom-link-clicked').closest('div.control-group').css('display', '');
		}
		
		if($(this).val() == 'EVENT_IS_ADDED')
		{
			$('form#addTriggerForm').find('select#event-type').closest('div.control-group').css('display', '');
			
			populate_owners_in_trigger($('form#addTriggerForm'), 'event-owner-id');
		}
		
		if($(this).val() == 'INBOUND_CALL' || $(this).val() == 'OUTBOUND_CALL')
		{
			populate_call_trigger_options($('form#addTriggerForm'));	
		}
		
		if($(this).val() == 'FORM_SUBMIT')
		{
			populate_forms_in_trigger($('form#addTriggerForm'), 'trigger-form-event');
		}

		if($(this).val() == 'UNSUBSCRIBED')
			show_email_tracking_campaigns();

	});
	
	// When cancel clicked, take to Back page
	$('body').on('click', '#trigger-cancel', function(e)
	{
		e.preventDefault();

		if (history !== undefined)
			history.back(-1);
	});
	
	$('body').on('change', '#email-tracking-type', function(e){
		
		e.preventDefault();
		
		if($(this).val() == 'ANY' || $(this).val() == 'PERSONAL')
		{
			// Show milestones select element
			$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', 'none');
			return;
		}
		
		// show email tracking campaigns
		show_email_tracking_campaigns();
		
	});
});*/

/**
 * Shows hidden trigger-milestones select element and fills with milestones
 * data.
 * 
 * @param trigger_form -
 *            trigger form jQuery object
 * @param milestones_select_id -
 *            trigger milestones select id
 * @param trigger_deal_milestone_value -
 *            trigger milestone value obtained from saved trigger.
 */
function populate_milestones_in_trigger(trigger_form, milestones_select_id, trigger_deal_milestone_value)
{

	// Show milestones select element
	trigger_form.find('select#' + milestones_select_id).closest('div.control-group').css('display', '');

	// Show loading image.
	$('select#' + milestones_select_id).after(getRandomLoadingImg());

	populateTrackMilestones(trigger_form, undefined, undefined, function(tracks)
	{
//		console.log(tracks);
		$('.loading').remove();

		// Make obtained milestone value selected
		if (trigger_deal_milestone_value !== undefined)
		{
//			"Won" - > "defaultId_Won";
			
			var pipeline_id = trigger_deal_milestone_value.split('_')[0];
			
			// If pipeline_id is not NUMBER
			if(pipeline_id != " " && isNaN(Number(pipeline_id)))
			{
				$.each(tracks, function(index, track){
					
					// For Old code compatibility - Appending Default track id to default milestones
					if(track.isDefault && ~track.milestones.indexOf(trigger_deal_milestone_value))
					{
						trigger_deal_milestone_value = track.id + "_" + trigger_deal_milestone_value;
						return true;
					}
				});
				
			}
			
			trigger_form.find('select#' + milestones_select_id).val(trigger_deal_milestone_value).attr('selected', 'selected').trigger('change');
		}
	}, "Select new milestone...", 'trigger-deal-milestone');

	// Fills milestone select element
/*	populateMilestones(trigger_form, undefined, 0, undefined, function(data)
	{
		$('.loading').remove();
		// Append obtained option values to select
		trigger_form.find('select#' + milestones_select_id).html(data);
		// Make obtained milestone value selected
		if (trigger_deal_milestone_value !== undefined)
		{
			trigger_form.find('select#' + milestones_select_id).val(trigger_deal_milestone_value).attr('selected', 'selected').trigger('change');
		}
	}, "Select new milestone...");*/
}

/**
 * Shows hidden trigger-milestones select element and fills with milestones
 * data.
 * 
 * @param trigger_form -
 *            trigger form jQuery object
 * @param filter_select_id -
 *            contact filter select id
 * @param trigger_deal_milestone_value -
 *            trigger milestone value obtained from saved trigger.
 */
function populate_contact_filters_in_trigger(trigger_form, filter_select_id, value)
{
	// Show milestones select element
	trigger_form.find('select#' + filter_select_id).closest('div.control-group').css('display', '');

	var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
	
	fillSelect('contact-filter', '/core/api/filters', 'workflow', function fillContactFilter()
	{
		if (value)
		{
			$('#contact-filter',trigger_form).find('option[value=' + value + ']').attr('selected', 'selected');
		}
	}, optionsTemplate, false,undefined,"Select Contact filter");
}

/**
 *	Function to populate the stripe event trigger with stripe events
 * 
 * @param trigger_form
 * 				trigger form object
 * @param stripe_event_select_id
 * 				stripe event select element id
 * @param stripe_event_value
 * 				stripe event type
 */
function populate_stripe_events_in_trigger(trigger_form, stripe_event_select_id, stripe_event_value, trigger_run_on_new_contacts)
{
	trigger_form.find('select#' + stripe_event_select_id).closest('div.control-group').css('display','');
	trigger_form.find("#trigger-run-on-new-contacts").css('display', '');
	if(trigger_run_on_new_contacts)
		trigger_form.find("#trigger-run-on-new-contacts").val(trigger_run_on_new_contacts);

	if(stripe_event_value !== undefined)
	{
		trigger_form.find('select#' + stripe_event_select_id).val(stripe_event_value).attr('selected', 'selected').trigger('change');
	}
}

function populate_shopify_events_in_trigger(trigger_form, shopify_event_select_id, shopify_event_value, trigger_run_on_new_contacts)
{
	trigger_form.find('select#' + shopify_event_select_id).closest('div.control-group').css('display','');
	trigger_form.find("#trigger-run-on-new-contacts").css('display', '');
	if(trigger_run_on_new_contacts)
		trigger_form.find("#trigger-run-on-new-contacts").val(trigger_run_on_new_contacts);

	if(shopify_event_value !== undefined)
	{
		trigger_form.find('select#' + shopify_event_select_id).val(shopify_event_value).attr('selected', 'selected').trigger('change');
	}
}

function populate_inbound_mail_events_in_trigger(trigger_form, inbound_mail_event_div_class, new_email_trigger_run_on_new_contacts)
{
	trigger_form.find('div#' + inbound_mail_event_div_class).css('display','');
	trigger_form.find("#new-mail-trigger-run-on-new-contacts").css('display', '');
	if(new_email_trigger_run_on_new_contacts)
		trigger_form.find("#new-mail-trigger-run-on-new-contacts").val(new_email_trigger_run_on_new_contacts);
}

function populate_owners_in_trigger(trigger_form, owner_select_id, trigger_owner_id)
{
	// Show milestones select element
	trigger_form.find('select#' + owner_select_id).closest('div.control-group').css('display', '');

	var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
	
	fillSelect(owner_select_id, '/core/api/users/partial', 'users', function()
			{
		
			$("#" + owner_select_id +' option:first').after('<option value="ANY">Any Owner</option>');
			
			if (trigger_owner_id)
			{
				$('#'+owner_select_id, trigger_form).find('option[value=' + trigger_owner_id + ']').attr('selected', 'selected');
			}
		
	}, optionsTemplate, false, undefined, "Select Event Owner");
}

function populate_call_trigger_options(trigger_form, triggerJSON)
{
	
	trigger_form.find('div#CALL').closest('div.control-group').css('display', '');
	
	if(triggerJSON && triggerJSON["call_disposition"])
		trigger_form.find('div#CALL select').find('option[value="' + triggerJSON["call_disposition"] + '"]').attr('selected', 'selected').trigger('change');
}

function populate_forms_in_trigger(trigger_form, trigger_form_select_id, trigger_form_id, trigger_run_on_new_contacts)
{
	trigger_form.find("#trigger-run-on-new-contacts").css('display', '');
	if(trigger_run_on_new_contacts)
		trigger_form.find("#trigger-run-on-new-contacts").val(trigger_run_on_new_contacts);
	trigger_form.find('select#' + trigger_form_select_id).closest('div.control-group').css('display', '');
	var formOptionsTemplate = "<option value='{{id}}'>{{formName}}</option>";
	fillSelect(trigger_form_select_id, 'core/api/forms', 'forms', function()
	{
		if (trigger_form_id)
		{
			$('#' + trigger_form_select_id, trigger_form).find('option[value=' + trigger_form_id + ']').attr('selected', 'selected');
		}
	}, formOptionsTemplate, false, undefined, "Select Form");
}


/**
 * Shows triggers for each td in workflows list
 * 
 * @param el -
 *            Backbone el
 * 
 */
function show_triggers_of_each_workflow(el)
{
	// Fetches triggers from collection and appends
	if (App_Workflows.triggersCollectionView != undefined && App_Workflows.triggersCollectionView.collection.length != 0)
	{
		append_triggers_to_workflow(el);
		return;
	}

	App_Workflows.triggersCollectionView = new Base_Collection_View({ url : '/core/api/triggers', restKey : "triggers", templateKey : "triggers",
		individual_tag_name : 'tr' });

	App_Workflows.triggersCollectionView.collection.fetch({ success : function(data)
	{
		// Shows pending triggers content
		if (App_Workflows.triggersCollectionView == undefined || App_Workflows.triggersCollectionView.collection.length == 0)
		{
			$('#triggers-verification', el).css('display', 'block');
			return;
		}

		// Append triggers to workflow
		append_triggers_to_workflow(el);

	} });

}

/**
 * Appends triggers to each workflow in UI
 * 
 * @param el -
 *            Backbone el
 * 
 */
function append_triggers_to_workflow(el)
{
	// Appends triggers to respective workflow
	$('.workflow-triggers', el).each(function(index, td)
	{

		// Returns filtered array of models
		var trigger_models = App_Workflows.triggersCollectionView.collection.where({ campaign_id : parseInt($(td).attr('workflow-id')) });
		var trigger_collection = new BaseCollection(trigger_models, {});

		// show triggers if exists for a workflow
		if (trigger_collection.length !== 0){

			getTemplate('workflow-triggers', { "triggers" : trigger_collection.toJSON() }, undefined, function(template_ui){
				if(!template_ui)
					  return;
				$(td).html($(template_ui));	
			}, $(td));

		}
	});
}

function show_email_tracking_campaigns()
{
	// Show campaign select element
	$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', '');

	var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
	
	/**
	 * Fills campaign select with existing Campaigns.
	 * 
	 * @param campaign-select -
	 *            Id of select element of Campaign
	 * @param /core/api/workflows -
	 *            Url to get workflows
	 * @param 'workflow' -
	 *            parse key
	 * @param no-callback -
	 *            No callback
	 * @param optionsTemplate-
	 *            to fill options with workflows
	 */
	fillSelect('email-tracking-campaign-id', '/core/api/workflows', 'workflow', function()
			{
				
				$('#email-tracking-campaign-id option:first').after('<option value="0">All</option>');
				
			}, optionsTemplate, false);
}

function initializeTriggerEventListners()
{
	$("#trigger-listener").on('click', '.add-trigger', function(e){
		 
		var type = e.target.getAttribute("data");
		var campaign_id = $('#campaign-id').val();
		App_Workflows.triggerAdd(campaign_id,type);
		 
	});

}

function openVerifyEmailModal(el) {
	if (window.parent.$('#workflow-verify-email').size() != 0)
		window.parent.$('#workflow-verify-email').remove();

	var selected = $(el).find(':selected').val();

	if (selected == 'verify_email')
		window.parent.workflow_alerts("Verify a new From address", undefined,
				"workflow-verify-email-modal"

				, function(modal) {

					// Focus on input
					modal.on('shown.bs.modal', function() {
						$(this).find('input').focus();

						parent.send_verify_email();
					});

					// On hidden
					modal.on('hidden.bs.modal', function(e) {

						var given_email = $(this).find('input').val();

						resetAndFillFromSelect(given_email);
					});
				});
	
		resetAndFillFromSelect(selected);
}

function rearrange_from_email_options($select, data) {

	if (!data)
		return;

	var unverified = [];

	/*for(var i=0; i<$($select[0]).find("option").length; i++){
		for(var j=$($select[0]).find("option").length-1; j>i; j--){
		if($($($select[0]).find("option")[i]).val() == $($($select[0]).find("option")[j]).val())
			$($($select[0]).find("option")[i]).remove();
		}
	}*/

	$.each(data, function(index, obj) {

		if (obj.verified == "NO")
			unverified.push(obj.email);

	});

	$select.find('option').each(function() {

		var email = $(this).val();
		
		if (unverified.indexOf(email) != -1) {
			$(this).attr('unverified', 'unverified');
			$(this).text(email + ' (unverified)');
		}
		
	});

}

function resetAndFillFromSelect(selected_val) {
	// Make send email node from email empty
	$('#from_email').empty();

	var options = {
		"+ Add new" : "verify_email"
	};

	fetchAndFillSelect(
			'core/api/account-prefs/verified-emails/all',
			"email",
			"email",
			undefined,
			options,
			$('#from_email'),
			"prepend",
			function($select, data) {
				var ownerEmail = $select.find('option[value = \"'+CURRENT_DOMAIN_USER.email+'\"]').val();
				if(typeof(ownerEmail) == "undefined")
				{
				$select
						.find("option:first")
						.before(
								"<option value="+CURRENT_DOMAIN_USER.email+">"+CURRENT_DOMAIN_USER.email+"</option>");
				}
	
				if (selected_val)
					$select.val(selected_val).attr("selected", "selected");
				else
					$select.val(CURRENT_DOMAIN_USER.email).attr("selected", "selected");

				rearrange_from_email_options($select, data);
			});
}


function fetchAndFillSelect(url, keyField, valField, appendNameField, options, selectContainer, arrange_type, callback)
{

	var selectOptionAttributes ="";
	
	
	// Populate Options - Naresh 23/04/2014
	if(options !== undefined)
	{
		$.each(
				options, function (key, value) {
					
					if(key.indexOf("*") == 0)
					{
						key  = key.substr(1);
						selectOptionAttributes += "<option selected='selected' value='" + value + "'>" + key + "</option>";
					}
					else
						selectOptionAttributes += "<option value='" + value + "'>" + key + "</option>";
				});
	 }

	$.ajax({
		  url: url,
		  async: false,
		  dataType: "json",
		  success: function(data)
		  {	    			
	    	$(selectContainer[0]).find('option').remove();
			// Append given options
			if(selectOptionAttributes !== undefined)
	    	$(selectOptionAttributes).appendTo(selectContainer);
	    
		var array = eval (data);	      
		$.each(array, function( index, json )
		{				
				var key = eval("json." + keyField);			
				var value = eval("json." + valField);
				
				var appendName = eval("json."+ appendNameField);
				
				// Append name to email like Naresh <naresh@agilecrm.com    >
				if(key!= undefined && appendName != undefined)
					key = appendName + " &lt;"+key+"&gt;";
				
				if(key != undefined && value != undefined)
				{
					console.log(key); 
					if(key.indexOf("*") == 0)
					{
						key  = key.substr(1);
						
						option = "<option selected value='" + value + "'>" + key + "</option>";
    				}
    				else
    				    option = "<option value='" + value + "'>" + key + "</option>";
        				
    				if(arrange_type && arrange_type == "prepend")
    					$(option).prependTo(selectContainer[0]);
    				else
    				{	
    					// Append to container	
        				$(option).appendTo(selectContainer[0]);	        				        								
        			}
				}											   	   	   	  	   	  				
		});

		  if(callback && typeof (callback) === "function")
		  	callback(selectContainer, data);
		  }
	});
}


function initializeTriggerListEventListners(id,trigger_type)
{

	$('#trigger-selector, #trigger-edit-selector').on('click', '#trigger-cancel', function(e)
 	{
		e.preventDefault();

		if (!history)
			   return;

		if($(this).closest("#trigger-edit-selector").length == 0)
			Backbone.history.loadUrl();
		else history.back(-1);
	});


	$('#trigger-selector, #trigger-edit-selector').on('change', '#email-tracking-type', function(e)
		{
			
			e.preventDefault();
		
			if($(this).val() == 'ANY' || $(this).val() == 'PERSONAL')
				{
					// Show milestones select element
					$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', 'none');
					return;
				}
		
			// show email tracking campaigns
			show_email_tracking_campaigns();
		});

	
	$('#trigger-selector, #trigger-edit-selector').on('change', '#trigger-type', function(e)
	{
		e.preventDefault();

		var type = $(this).val();
		/*if(type != undefined)
			type = trigger_type;*/
		// Hide trigger milestones div for other trigger conditions.
		if (type !== 'DEAL_MILESTONE_IS_CHANGED'){
			$('form#addTriggerForm').find('select#trigger-deal-milestone').closest('div.control-group').css('display', 'none');
		}
		
		if(type !== 'RUNS_HOURLY' || type !== 'RUNS_DAILY' || type !== 'RUNS_WEEKLY' || type !== 'RUNS_MONTHLY'){
			$('form#addTriggerForm').find('select#contact-filter').closest('div.control-group').css('display', 'none');
		}

		// Hide trigger stripe event div for other trigger conditions.
		if(type !== 'STRIPE_CHARGE_EVENT'){
			$('form#addTriggerForm').find('select#trigger-stripe-event').closest('div.control-group').css('display', 'none');
			$('form#addTriggerForm').find('select#trigger-stripe-event').val("");
			$('#trigger-run-on-new-contacts').css('display', 'none');
		}
		
		// Hide trigger shopify event div for other trigger conditions.
		if(type !== 'SHOPIFY_EVENT'){
			$('form#addTriggerForm').find('select#trigger-shopify-event').closest('div.control-group').css('display', 'none');
			$('form#addTriggerForm').find('select#trigger-shopify-event').val("");
			$('#trigger-run-on-new-contacts').css('display', 'none');
		}
		
		// Hide trigger inbound mail event div for other trigger conditions.
		if(type !== 'INBOUND_MAIL_EVENT'){
			$('form#addTriggerForm').find('div#trigger-inbound-mail-event').css('display', 'none');
			$('#new-mail-trigger-run-on-new-contacts').css('display', 'none');
		}
		
		if(type != 'EMAIL_OPENED' || type != 'EMAIL_LINK_CLICKED'){
			
			$('form#addTriggerForm').find('select#email-tracking-type').closest('div.control-group').css('display', 'none');
			
			$('form#addTriggerForm').find('#custom-link-clicked').closest('div.control-group').css('display', 'none');
			
			$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', 'none');
		}
		
		if(type != 'UNSUBSCRIBED')
			$('form#addTriggerForm').find('select#email-tracking-campaign-id').closest('div.control-group').css('display', 'none');
		
		if(type != 'EVENT_IS_ADDED')
		{
			$('form#addTriggerForm').find('select#event-owner-id').closest('div.control-group').css('display', 'none');
			
			$('form#addTriggerForm').find('select#event-type').closest('div.control-group').css('display', 'none');
		}
		
		// Hide trigger milestones div for other trigger conditions.
		if (type !== 'INBOUND_CALL' || type !== 'OUTBOUND_CALL'){
			$('form#addTriggerForm').find('div#CALL').closest('div.control-group').css('display', 'none');
		}
			
		if(type != 'FORM_SUBMIT'){
			$('form#addTriggerForm').find('select#trigger-form-event').closest('div.control-group').css('display', 'none');
			$('#trigger-run-on-new-contacts').css('display', 'none');
		}

		// Initialize tags typeahead
		if (type == 'TAG_IS_ADDED' || type == 'TAG_IS_DELETED')
		{
			$('form#addTriggerForm').find('#trigger-custom-tags').closest('div.control-group').css('display', '');
			
			// Tags typeahead for tag input field
			addTagsDefaultTypeahead($('form#addTriggerForm').find('div#RHS'));
		}
		
		// Initialize tags typeahead
		if (type == 'RUNS_HOURLY' || type == 'RUNS_DAILY' || type == 'RUNS_WEEKLY' || type == 'RUNS_MONTHLY')
		{	
			populate_contact_filters_in_trigger($('form#addTriggerForm'), 'contact-filter');
		}


		// Show score
		if (type == 'ADD_SCORE')
			$('form#addTriggerForm').find('#trigger-custom-score').closest('div.control-group').css('display', '');
		
		// Populate milestones for triggers
		if (type == 'DEAL_MILESTONE_IS_CHANGED')
		{
			populate_milestones_in_trigger($('form#addTriggerForm'), 'trigger-deal-milestone');
		}
		
		// Show stripe events
		if(type == 'STRIPE_CHARGE_EVENT')
		{
			populate_stripe_events_in_trigger($('form#addTriggerForm'), 'trigger-stripe-event');
		}
		
		// Show shopify events
		if(type == 'SHOPIFY_EVENT')
		{
			populate_shopify_events_in_trigger($('form#addTriggerForm'), 'trigger-shopify-event');
		}

		if(type == 'INBOUND_MAIL_EVENT')
		{
			populate_inbound_mail_events_in_trigger($('form#addTriggerForm'), 'trigger-inbound-mail-event');
		}
		
		if(type == 'EMAIL_OPENED' || type == 'EMAIL_LINK_CLICKED'){
			$('form#addTriggerForm').find('#email-tracking-type').closest('div.control-group').css('display', '');
			
			if(type == 'EMAIL_LINK_CLICKED')
				$('form#addTriggerForm').find('#custom-link-clicked').closest('div.control-group').css('display', '');
		}
		
		if(type == 'EVENT_IS_ADDED')
		{
			$('form#addTriggerForm').find('select#event-type').closest('div.control-group').css('display', '');
			
			populate_owners_in_trigger($('form#addTriggerForm'), 'event-owner-id');
		}
		
		if(type == 'INBOUND_CALL' || type == 'OUTBOUND_CALL')
		{
			populate_call_trigger_options($('form#addTriggerForm'));	
		}
		
		if(type == 'FORM_SUBMIT')
		{
			populate_forms_in_trigger($('form#addTriggerForm'), 'trigger-form-event');
		}

		if(type == 'UNSUBSCRIBED')
			show_email_tracking_campaigns();

	});
}

var _AGILE_API_KEY = "";

function setGlobalAPIKey(callback)
{
	if( _AGILE_API_KEY && _AGILE_API_KEY != '' )
	{
		//If key is set, call the function directly.
		if( callback && typeof(callback) === 'function')	callback();
		return;
	}
	
    $.ajax({ 
    	type : 'GET', 
        url : '/core/api/api-key', 
        dataType : 'json',
        success : function(resp) {
            if( resp )
            {
                console.log("Setting API KEY: " + resp.api_key);
                _AGILE_API_KEY = resp.api_key;
				
				if( callback && typeof(callback) === 'function' )
				{
					callback();
				}
            }
        }
    });
}
  
function getFormNameForTrigger(formID, callback)
{
	if( !formID )	return false;

	if( !callback || !(typeof(callback) === 'function'))	return false;
	
	$.ajax({
		type : "GET",
		url : '/core/api/forms/form?formId=' + formID,
		dataType : 'json',
		success : function(response) {
			callback(response.formName);
		}
	});
}

function getFormNameCellIDForFormSubmitTriggers(formID)
{
	return formID + "_formNameField";
}
/**
 * workflow-alerts deals with the alerts inside a campaign.
 * Ex- If the node limit is reached
 */
function campaignAlert(alertType)
{
	if(alertType == null)
		return;
	var alertJSON={};
	var alertTemplate;
	var templateName = "";

	if(alertType == "nodeLimit")
		{
		alertJSON = _billing_restriction.currentLimits;
		templateName = "campaign-node-limit-modal";
		}

	 
	if(alertType == "Empty")
		{
		alertJSON["title"]="No Twilio Number";
		alertJSON["message"]="The Twilio SMS gateway you configured does not have a purchased number. Please purchase a number from Twilio to start sending SMS.";
		templateName = "SMSGateway-integration-alert-modal";
		}
	
	if(alertType == "Unauthorised")
		{
		alertJSON["title"]="SMS Gateway not Configured";
		alertJSON["message"]="You need to enable SMS Gateway integration to use this option. Please enable it in Admin Settings -> Integrations";
		templateName = "SMSGateway-integration-alert-modal";
		}

		getTemplate(templateName, alertJSON, undefined, function(template_ui){
			if(!template_ui)
				  return;
			$(template_ui).modal('show');
		}, null);
}

function workflow_alerts(title, message , template, callback){
	
	var JSONValues = {};
	JSONValues["title"] = title;
	JSONValues["message"] = message;
	
	getTemplate(template, JSONValues, undefined, function(template_ui){
		if(!template_ui)
			  return;
			
		var $modal = $(template_ui);
		$modal.modal('show');	

		if(callback && typeof (callback) === "function")
			callback($modal);

	}, null);
}

function workflow_spam_alerts(reason, score , template, callback){
	
	var JSONValues = {};
	JSONValues["title"] = "Spam Result";
	JSONValues["score"] = score;
	JSONValues["reason"]=reason;
	
	getTemplate(template, JSONValues, undefined, function(template_ui){
		if(!template_ui)
			  return;
			
		var $modal = $(template_ui);
		$modal.modal('show');	

		if(callback && typeof (callback) === "function")
			callback($modal);

	}, null);
}

function send_verify_email(el)
{
	// On Enter Key
	var $input = $('#verify-email-form', el).find('input');

	$input.off('keypress');
	$input.on('keypress', function(e){
		
		// Enter key
		if(e.type== 'keypress' && e.which != 13)
			return;

		e.preventDefault();

		// Trigger click on enter
		$('#verify-email-send').trigger('click');
	});

	$('#verify-email-send', el).off('click');
	$('#verify-email-send', el).on('click', function(e){
		
		e.preventDefault();

		// If already clicked, return
		if($(this).attr("disabled"))
			return;

		if(!isValidForm('#verify-email-form'))
			return;

		$(this).attr('disabled', 'disabled').text("Sending...");

		var json = serializeForm("verify-email-form");
		
		if(!json)
			return;
		
		$.ajax({
			url: 'core/api/emails/verify-from-email',
			type: 'POST',
			data: json,
			success: function(data){
				
				$('#verify-email-send').removeAttr('disabled');

			     // Hide form elements
			     $('#verify-email-form').find('div.row div').hide();
			     $('#verify-email-form').find('div.row input').val(json.email);

			     $('#verify-email-form').find('div.row span#alert-msg').html("<p class='m-l'>Verification email sent to &#39;"+json.email+"&#39;. Please check your email and complete the verification process.</p>");
			     $('#verify-email-send').removeAttr('href').removeAttr('id').off('click').attr('data-dismiss', 'modal').text('Done');

			},
			error: function(response)
			{
				$('#verify-email-send').removeAttr('disabled');
				
				if(response.responseText == 'Email not verified yet.')
				{
					// Hide form elements
					$('#verify-email-form').find('div.row div').hide();
					$('#verify-email-form').find('div.row input').val(json.email);
			     
					$('#verify-email-form').find('div.row span#alert-msg').html("<p class='m-l'> &#39;"+json.email+"&#39; is not verified yet. Please check your email and complete the verification process.</p>");
					$('#verify-email-send').removeAttr('href').removeAttr('id').off('click').attr('data-dismiss', 'modal').text('Done');
					
//					$("#verify-ignore").show();
					return;
			     }

				$('#workflow-verify-email').modal('hide');
			}
		});
		
	});
}

function unsubscribe_contact()
{
	
    $('#unsubscribe').off('click');
	$('body').on('click', '#unsubscribe', function(e){
		
		e.preventDefault();

		// If already clicked, return
		if($(this).attr("disabled"))
			return;

		if(!isValidForm('#unsubscribe-form'))
			return;

		$(this).attr('disabled', 'disabled').text("Unsubscribing...");

		var json = {}, campaigns_list = [];

		$('#campaigns-list option:selected').each(function(index, option){

				campaigns_list.push($(this).val());
    	});

		var unsubscribe_campaign_ids = [];
				
		$.each(App_Contacts.contactDetailView.model.toJSON()["unsubscribeStatus"], function(index, value){
       
			unsubscribe_campaign_ids.push(value.campaign_id);
		});

		// Removes already unsubscribed campaigns
		campaigns_list = campaigns_list.filter(function(el){

			return unsubscribe_campaign_ids.indexOf(el) < 0 ; 
		});

		// If undefined
		if(!campaigns_list || campaigns_list.length == 0)
		{
			$('div#contact-detail-resubscribe-modal').modal('hide');
			return;
		}

		json["campaign_id"] = campaigns_list.join(',');
		json["contact_id"] = App_Contacts.contactDetailView.model.get('id');
		json["type"] = "CURRENT";
		
		if(is_selected_all)
			json["type"]="ALL";

		if(!json)
			return;
		
		$.ajax({
			url: 'core/api/unsubscribe',
			type: 'POST',
			data: json,
			success: function(data){
				
				$('#unsubscribe').removeAttr('disabled').text('Unsubscribe');

				// To update Campaigns tab
				unsubscribe_status_updated = true;

				$('div#contact-detail-resubscribe-modal').modal('hide');

				showNotyPopUp("information", "Unsubscribed successfully.", "top");
			},
			error: function(response)
			{
				
			}
		});
		
	});
}

function resubscribe()
{
	$('.resubscribe').off('click');
	$('.resubscribe').on('click', function(e){

		e.preventDefault();

		var $element = $(event.target);
		var $that = $(this);
		showAlertModal("Are you sure to resubscribe " + $(this).attr("contact_name") + " to " + $(this).attr("campaign_name") + " campaign?", "confirm", function(){
			var campaign_id = $that.attr('data');

			var json = {};
			json["id"] = App_Contacts.contactDetailView.model.get('id');
			json["workflow-id"] = campaign_id;

			if(campaign_id == "ALL")
			{
				var workflow_ids = [];

				$.each(App_Contacts.contactDetailView.model.toJSON()["unsubscribeStatus"], function(index, value){
	               
					workflow_ids.push(value.campaign_id);
				});

				json["workflow-id"] = workflow_ids.join(',');
			}

			$.ajax({
				url: 'core/api/campaigns/resubscribe',
				type: 'POST',
				data: json,
				success: function(data){
					
					// To update campaigns tab
					unsubscribe_status_updated = true;

					$element.closest('li').remove();

					// Remove All option too
					$('ul#added-tags-ul').find("a[data='ALL']").closest('li').remove();

				},
				error: function(response)
				{
					

				}
			});
		},undefined, "Resubscribe");
		
		

	});

}
$(function()
{
    $('#content').on('click', '#select-all-active-contacts', function(e)
	{
						e.preventDefault();
						SUBSCRIBERS_SELECT_ALL = true;
						$('#content')
								.find('#subscribers-bulk-select')
								.css('display', 'block')
								.html(
										'Selected All ' + getAvailableActiveContacts() + ' contacts. <a hrer="#" id="select-all-active-contacts-revert" class="text-info">Select chosen contacts only</a>');

						// On choosing select all option, all the visible
						// checkboxes in the table should be checked
						$.each($('.tbody_check'), function(index, element)
						{
							$(element).attr('checked', "checked");
						});
					});

    $('#content').on('click', '#select-all-active-contacts-revert', function(e)
					{
						e.preventDefault();
						SUBSCRIBERS_SELECT_ALL = false;
						$('#content')
								.find('#subscribers-bulk-select')
								.css('display', 'block')
								.html(
										"Selected " + App_Workflows.active_subscribers_collection.collection.length + " contacts. <a href='#' id='select-all-active-contacts' class='text-info'>Select all " + getAvailableActiveContacts() + " contacts</a>");
					});
});

/**
 * Shows delete button when thead/tbody checkbox is checked.
 * 
 * @param clicked_ele - 
 * 				clicked checkbox element.
 * 
 * @param isBulk -
 * 				true if .thead is checked, otherwise false
 * 
 */
function toggle_active_contacts_bulk_actions_dropdown(clicked_ele, isBulk)
{
	SUBSCRIBERS_SELECT_ALL = false;
	var total_available_contacts;

	if (clicked_ele)
			total_available_contacts = getAvailableActiveContacts();

	$('#content').find('#subscribers-bulk-select').css('display', 'none');

	// When checked show Delete button
	if ($(clicked_ele).is(':checked'))
	{
		$('#content').find('#subscribers-block').css('display', 'block');
		
		$('#subscribers-block').find('#remove-active-from-campaign').css('display', 'inline-block');

		// To show subscribers-bulk-select only thead is checked i.e., isBulk is true.
		if (isBulk && total_available_contacts != App_Workflows.active_subscribers_collection.collection.length)
		$('#subscribers-block')
					.find('#subscribers-bulk-select')
					.css('display', 'block')
					.html(
							"Selected " + App_Workflows.active_subscribers_collection.collection.length + " contacts. <a id='select-all-active-contacts' class='text-info' href='#'>Select all " + total_available_contacts + " contacts</a>");

	}
	// When unchecked hide Delete button
	else
	{
		// To hide Delete button when .thead is unchecked
		if (isBulk)
		{
			$('#remove-active-from-campaign').css('display', 'none');
			return;
		}

		// Hide delete button when .tbody is unchecked
		var check_count = 0
		$.each($('.tbody_check'), function(index, element)
		{
			if ($(element).is(':checked'))
			{
				check_count++;
				return false;
			}
		});

		if (check_count == 0)
		{
			$('#remove-active-from-campaign').css('display', 'none');
		}
	}
}

/**
 * Returns total active subscribers count.
 **/
function getAvailableActiveContacts()
{

	if (App_Workflows.active_subscribers_collection.collection.toJSON()[0] && App_Workflows.active_subscribers_collection.collection.toJSON()[0].count)
	{
		var current_active_subscribers_count = App_Workflows.active_subscribers_collection.collection.toJSON()[0].count;
		return current_active_subscribers_count;
	}

	return App_Workflows.active_subscribers_collection.collection.toJSON().length;

}

/**
 * Returns subscribers base collection view object for given params.
 * 
 * @param workflow_id - 
 * 				workflow (or campaign) id
 * @param fetch_url -
 * 				rest url to get subscribers
 * 
 * @param template-key - 
 * 				id of subscribers html template
 * 
 **/
function get_campaign_subscribers_collection(workflow_id, fetch_url, template_key)
{
	/* Set the designer JSON. This will be deserialized */
	//var workflow_model = App_Workflows.workflow_list_view.collection.get(workflow_id);
	//var workflow_name = workflow_model.get("name");

	abortCountQueryCall();

	var subscribers_collection = new Base_Collection_View({ 
		url : fetch_url, 
		templateKey : template_key,
		individual_tag_name : 'tr', 
		cursor : true,
		page_size : 20,
		postRenderCallback : function(el)
		{
			head.js(LIB_PATH + 'lib/jquery.timeago.js', function()
			{
				$("time.campaign-started-time", el).timeago();
				$("time.campaign-completed-time", el).timeago();
				contactListener();
			});

			//$('#subscribers-campaign-name').text(workflow_name);
			
			// Call to get Count 
			getAndUpdateCollectionCount("workflows", el, fetch_url);

		},
		appendItemCallback : function(el)
		{
			$("time.campaign-started-time", el).timeago();
			$("time.campaign-completed-time", el).timeago();
		} });

	return subscribers_collection;
}

/**
 * Fills pad-content for all, active, completed and removed 
 * subscribers when empty json obtains.
 * 
 * @param id -
 *          slate div id.
 * @param type - 
 *          to match with SUBSCRIBERS_PAD_CONTENT json key
 **/
function fill_subscribers_slate(id, type)
{
	var SUBSCRIBERS_PAD_CONTENT = {
		    "active-subscribers": {
		        "title": "Campaign does not have any active subscriber",
		        "description": "You can add subscribers from Contacts tab - using the Bulk Actions option",
		        "button_text" : "Add subscribers",
				"route" : "#contacts",
		        "image": updateImageS3Path("/img/clipboard.png")
		    },
		    "completed-subscribers": {
		        "title": "No contact assigned to this campaign",
		        "description": "You can add subscribers from Contacts tab - using the Bulk Actions option",
		        "button_text" : "Add subscribers",
				"route" : "#contacts",
		        "image": updateImageS3Path("/img/clipboard.png")
		    },
		    "removed-subscribers": {
		        "title": "No contact removed from this campaign",
		        "description": "Removed subscribers are the contacts deleted from the active campaign",
		        "image": updateImageS3Path("/img/clipboard.png")
		    },
		    "all-subscribers": {
		        "title": "No current or past subscribers for this campaign",
		        "description": "You can add subscribers from Contacts tab - using the Bulk Actions option",
		        "button_text" : "Add subscribers",
				"route" : "#contacts",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "unsubscribe-subscribers": {
		    	"title": "No unsubscriptions for this campaign",
		        "description": "Great! No one unsubscribed from this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "hardbounced-subscribers": {
		    	"title": "No hard bounces for this campaign",
		        "description": "Great! No email get hardbounced",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "softbounced-subscribers": {
		    	"title": "No soft bounces for this campaign",
		        "description": "Great! No email get softbounced",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "spam-reported-subscribers": {
		    	"title": "No one reported spam for this campaign",
		        "description": "Great! No one reported spam yet",
				"image": updateImageS3Path("/img/clipboard.png")
		    }
		}

	
	getTemplate("empty-collection-model", SUBSCRIBERS_PAD_CONTENT[type], undefined, function(template_ui){
		if(!template_ui)
			  return;

		$("#" + id).html($(template_ui));
	}, "#" + id);

}
/**
 * workflows.js is a script file to deal with common UI Handlers for
 * workflows from client side.
 * 
 * @module Campaigns  
 * 
 * 
 */
 /**
*  Workflow event listeners
*/
var unsubscribe_fill_select = {};
var Workflow_Model_Events = Base_Model_View.extend({
   
    events: {
        'click #save-workflow-top,#save-workflow-bottom,#duplicate-workflow-top,#duplicate-workflow-bottom': 'saveCampaignClick',
        'click #workflow-unsubscribe-option': 'unsubscribeCampaign',
        'click #workflow-designer-help': 'helpCampaign',
        'change #unsubscribe-action': 'unsubscribeCampaignOptionSelect',
        'change #disable-workflow':'saveCampaignClick',
        'change .emailSelect,click .emailSelect' : 'fillDetails',
        'click #campaign_access_level': 'accessLevelChange',
    },

    fillDetails : function(e)
    {
        console.log('fillDetails');
        var unsubscribe_subject = "";
        unsubscribe_fill_select.id = "";
        var model_id = $('.emailSelect option:selected').prop('value');
        if (!model_id)
        	return;
		var emailTemplatesModel = Backbone.Model.extend({ url : '/core/api/email/templates/' + model_id, restKey : "emailTemplates" });
		var templateModel = new emailTemplatesModel();
		
		templateModel.fetch({ success : (function(data)
		{
            var model = data.toJSON();
			unsubscribe_fill_select.id = model_id;
            unsubscribe_fill_select.text = model.text;
		})
    });
            

    },

    unsubscribeCampaignOptionSelect : function(e){
        e.preventDefault();
        var targetEl = $(e.currentTarget);
        
        var all_text = "Contact will not receive any further emails from any campaign (i.e., the 'Send Email' option will not work. However, other actions in" 
                       + " campaign will work as expected)";
        
        var this_text = "Contact will be removed from this campaign";
        
        var ask_text = "Prompts the user with options to either unsubscribe from this campaign or all communication";
        
        var $p_ele = $(this).closest('div.controls').parent().find('small');
        
        if($(targetEl).val() == "UNSUBSCRIBE_FROM_ALL")
            $p_ele.html(all_text);
        
        if($(targetEl).val() == "UNSUBSCRIBE_FROM_THIS_CAMPAIGN")
            $p_ele.html(this_text);
        
        if($(targetEl).val() == "ASK_USER")
            $p_ele.html(ask_text);
          
    },
    /**
     * Script to show workflow video tutorial in bootstrap modal.
     **/
    helpCampaign : function(e){
        e.preventDefault();

        getTemplate('workflow-designer-help-modal', {}, undefined, function(template_ui){
            if(!template_ui)
                  return;           

            $("#workflow-designer-help-modal").html($(template_ui)).modal('show');

            // Stops video on modal hide
            $("#workflow-designer-help-modal").on("hide.bs.modal", function(){
                $(this).html("");
            });

        }, null);
    },

    unsubscribeCampaign : function(e){
        e.preventDefault();
        $(e.currentTarget).find('i').toggleClass('icon-plus').toggleClass('icon-minus');
        $("#workflow-unsubscribe-block").slideToggle('fast');        
    },

        
   /**
     * Saves the content of workflow if the form is valid. Verifies for duplicate workflow names.
     * Separate ids are given for buttons (as IDs are unique in html) but having same functionality, 
     * so ids are separated by comma in click event.
     * 
     **/
    saveCampaignClick: function(e, trigger_data, callback){
        e.preventDefault();
        var targetEl = $(e.currentTarget);

        try{
            var nodeLength = $('iframe[id=designer]').contents().find('#paintarea .contextMenuForNode').length;
            var currentLimits=_billing_restriction.currentLimits;
            var campaignNodeLimit=currentLimits.campaignNodesLimit;
            if(nodeLength-1 > campaignNodeLimit)
            {
                $("#workflow-edit-msg").hide();
                $("#nodes-limit-reached").show();
                campaignAlert("nodeLimit");
                return;
            }

        }
        catch(err){}

        // Temporary variable to hold clicked button, either top or bottom. $ is preceded, just to show 
       // it is holding jQuery object
       var $clicked_button = $(targetEl);
       
       if(!window.frames.designer.checkWorkflowSize())
           return;
       
       if($(targetEl).attr('disabled'))
        return;
           
        // Check if the form is valid
        if (!isValidForm('#workflowform')) {
            $('#workflowform').find("span.help-inline").not(':hidden').prev('input').focus();
            return false;
        }
        
        // Gets Designer JSON
        var designerJSON = window.frames.designer.serializePhoneSystem();
        /**
         * Checks if start node is connected to any other node.
         */      
        if(!is_start_active(designerJSON)){
            var $save_info = '<span style="color: red;">Please connect the \'Start\' node to another node in the campaign</span>';
            $("#workflow-msg").html($save_info).show().fadeOut(3000);
            return false;
        }

        var name = $('#workflow-name').val();
        
        var unsubscribe_tag = $('#unsubscribe-tag').val().trim();
        var unsubscribe_action = $('#unsubscribe-action').val();
        var unsubscribe_email = $('#unsubscribe-email').val().trim();
        var unsubscribe_name = $('#unsubscribe-name').val().trim();
        var unsubscribe_subject = "";
        if(unsubscribe_fill_select.id)
            unsubscribe_subject = unsubscribe_fill_select.id;
        var is_disabled = $('.is-disabled-top').attr("data");
        if(e.type == "change" && is_disabled)
            is_disabled = !JSON.parse(is_disabled);

        var unsubscribe_json ={
                                    "tag":unsubscribe_tag,
                                    "action":unsubscribe_action,
                                    "unsubscribe_email": unsubscribe_email,
                                    "unsubscribe_name": unsubscribe_name,
                                    "unsubscribe_subject": unsubscribe_subject
                               }

        // Access Level
        var access_permission = $('#access_level').val();

        // Check for valid name
        if (isNotValid(name)) {
            showAlertModal("name_not_valid");
            return;
        }

        // Disables save button to prevent multiple save on click event issues
        disable_save_button($(targetEl));

        track_with_save_success_model($(targetEl));
                
        var workflowJSON = {};

        // New Workflow or Copy Workflow
        if (App_Workflows.workflow_model === undefined || $(targetEl).attr('id') === 'duplicate-workflow-top' || $(targetEl).attr('id') === 'duplicate-workflow-bottom') 
        {
            create_new_workflow(e,name, designerJSON, unsubscribe_json, $clicked_button, trigger_data, is_disabled, undefined, access_permission);   

        }
        // Update workflow
        else
        {
            workflowJSON = App_Workflows.workflow_model;

            // To reset model on error
            var previousAttributes = App_Workflows.workflow_model.previousAttributes();

            App_Workflows.workflow_model.set("name", name);
            App_Workflows.workflow_model.set("rules", designerJSON);
            App_Workflows.workflow_model.set("unsubscribe", unsubscribe_json);
            App_Workflows.workflow_model.set("is_disabled", is_disabled);
            App_Workflows.workflow_model.set("access_level", access_permission);
            
            App_Workflows.workflow_model.save({}, {success: function(){
                
                enable_save_button($clicked_button);
                
                show_campaign_save(e);

                if(callback)
                    callback();
                
                try{
                // Adds tag in our domain
                add_tag_our_domain(CAMPAIGN_TAG);
                }catch(err){
                }
                // Hide message
                $('#workflow-edit-msg').hide();

                if(e.type == "change"){
                     var disabled = $(".is-disabled-top");
                 var status = $('#disable-switch').bootstrapSwitch('status');
                if (is_disabled && status) {
                        disabled.attr("data", true);
                        $('#designer-tour').addClass("blur").removeClass("anti-blur");
                        window.frames[1].$('#paintarea').addClass("disable-iframe").removeClass("enable-iframe");
                        window.frames[1].$('#paintarea .nodeItem table>tbody').addClass("disable-iframe").removeClass("enable-iframe");
                        show_campaign_save(e,"Campaign has been disabled successfully.","red");
                    } else {
                        disabled.attr("data", false);
                        $('#designer-tour').addClass("anti-blur").removeClass("blur");
                        window.frames[1].$('#paintarea').addClass("enable-iframe").removeClass("disable-iframe");
                        window.frames[1].$('#toolbartabs').removeClass("disable-iframe");
                       // $('#designer-tour').css("pointer-events","none");
                        window.frames[1].$('#paintarea .nodeItem table>tbody').addClass("enable-iframe").removeClass("disable-iframe");
                        show_campaign_save(e,"Campaign has been enabled successfully.");
                    }
                }

                // Show success message of access level property
                if($(targetEl).attr('id') === 'campaign_access_level'){
                    if(access_permission == "1")
                        show_campaign_save(e,"The Campaign is now Public.");
                       //show_campaign_save(e,"The Campaign is now Public.");

                    else 
                        show_campaign_save(e,"The Campaign is now Private.");
                }

                // Boolean data used on clicking on Done
                if(trigger_data && trigger_data["navigate"])
                {
                    Backbone.history.navigate("workflows", {
                      trigger: true
                  });
                }

                 // Adds tag in our domain
                add_tag_our_domain(CAMPAIGN_TAG);
                
            },
            
            error: function(jqXHR, status, errorThrown){ 
              enable_save_button($clicked_button);

              // Reset model with previous on error
              App_Workflows.workflow_model.set(previousAttributes);
              
              console.log(status);
                    // Show cause of error in saving
                    $save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>'
                            + status.responseText
                            + '</i></p></small></div>');

                    // Appends error info to form actions
                    // block.
                    $("#workflow-msg").html(
                            $save_info).show();
              //var json = JSON.parse(status.responseText);
              //workflow_alerts(json["title"], json["message"],"workflow-alert-modal");
              // shows Exception message
              //alert(status.responseText);
                }
            });        
            
        } 
        var unsubscribe_subject = "";
        unsubscribe_fill_select.id = "";
        var model_id = $('.emailSelect option:selected').prop('value');
        if (!model_id)
            return;
        
        var emailTemplatesModel = Backbone.Model.extend({ url : '/core/api/email/templates/' + model_id, restKey : "emailTemplates" });
        var templateModel = new emailTemplatesModel();
        
        templateModel.fetch({ success : (function(data)
            {
                var model = data.toJSON();
                unsubscribe_fill_select.id = model_id;
                unsubscribe_fill_select.text = model.text;
            }),
        error: (function () {
                unsubscribe_fill_select.id = model_id;
                unsubscribe_subject = unsubscribe_fill_select.id;
            })
        });
 
    },

    accessLevelChange : function(e){
        console.log("change");
        var level = $("#access_level", this.el).val();
        if(level == "1"){
            level = CURRENT_DOMAIN_USER.id;
        } else {
            level = "1";
        }

        $("#access_level", this.el).val(level);
        var that = this;

        // Resave if it is not a new campaign
        if(App_Workflows.workflow_model && App_Workflows.workflow_model.get("id")){
            this.saveCampaignClick(e, undefined, function(){
                // Change ui text
                change_access_level(level, that.el);
            });
            return;
        }

        // Change ui text
        change_access_level(level, this.el);

    }

});

function initializeLogReportHandlers(){

    // Show stats of selected campaign
    $("#campaign-reports-select").change(function(e){
      
       e.preventDefault();
        var targetEl = $(e.currentTarget);

        var active_tab = $('#campaign-tabs .select').data('campaign-tab-active');
        
        if(active_tab == "STATS")
            Backbone.history.navigate("email-reports/"+$(targetEl).val() , {
                trigger: true
            });
        
        if(active_tab == "SUBSCRIBERS")
            Backbone.history.navigate("workflow/all-subscribers/"+$(targetEl).val() , {
                trigger: true
            });
        
        if(active_tab == "LOGS")
            Backbone.history.navigate("workflows/logs/"+$(targetEl).val() , {
                trigger: true
            });
    });
}
/**
* Report Collection event handlers
*/
var Workflow_Reports_Events = Base_Collection_View.extend({
   
    events: {
        'click #delete_campaign_logs': 'onDeleteAllCampaignLogs',
        'click .log-filters': 'onChangeLogFilter',       
    },

     /**
     *  Deletes all logs of campaign
     *      
     **/
    onDeleteAllCampaignLogs : function(e){

        e.preventDefault();
        
        // Gets campaign id
        var campaign_id = $("#logs-table").find("input.campaign").val();
        
        if(!campaign_id)
            return;
        
        showAlertModal("delete_campaign_logs", "confirm", function(){
            // Sends delete request to CampaignsAPI for deletion of logs
            $.ajax({
                url: 'core/api/campaigns/logs/' + campaign_id,
                type: 'DELETE',
                success: function(){
                    App_Workflows.logsToCampaign(campaign_id);
                    //location.reload(true);
                }
            });
        });
    },

    // Show logs of selected filter
    onChangeLogFilter : function(e){
        e.preventDefault();
        var targetEl = $(e.currentTarget);

        var log_type = $(targetEl).data('log-type');
        var id = $(targetEl).data('campaign-id');
        
        App_Workflows.logsToCampaign(id, log_type, $(targetEl).text());

    },

});

$(function(){

	// To stop propagation to edit page
	$('body').on('click', '.stop-propagation', function (e) {
        e.stopPropagation();
    });
	
});

/**
 * Creates a new workflow or Copy existing workflow and add to workflows collection
 * 
 * @param name - workflow name
 * @param designerJSON - campaign workflow in json
 * @param unsubscribe_json - unsubscribe data of workflow
 * @param $clicked_button - jquery object to know clicked button
 **/
function create_new_workflow(e,name, designerJSON, unsubscribe_json, $clicked_button, trigger_data, is_disabled, was_disabled, access_level)
{
	var workflowJSON = {};
	
	workflowJSON.name = name;
    workflowJSON.rules = designerJSON;
    workflowJSON.unsubscribe = unsubscribe_json;
    workflowJSON.is_disabled = is_disabled;
    workflowJSON.was_disabled = was_disabled;
    workflowJSON.access_level = access_level;
    
    var workflow = new Backbone.Model(workflowJSON);
    App_Workflows.workflow_list_view.collection.create(workflow,{
    	    success:function(){  

    	    	// Removes disabled attribute of save button
    	    	enable_save_button($clicked_button);
    	    	
    	    	// Shows Campaign save message
    	    	show_campaign_save(e);

    	    	// $('#workflowform').find('#save-workflow').removeAttr('disabled');
    	    	
    	    	// Hide edit message
    	    	$('#workflow-edit-msg').hide();
    	    	
    	    	// $(".save-workflow-img").remove();
    	    	        
    	    	// Boolean data used on clicking on Done
    	    	if(trigger_data && trigger_data["navigate"])
    	    	{
    	    		Backbone.history.navigate("workflows", {
                      trigger: true
                  });
    	    	}
    	    	
    	    	// Updates workflow model
    	    	App_Workflows.workflow_model = workflow;
                if(Current_Route.indexOf("share-campaign")!=-1)
                    App_Workflows.workflow_list_view = undefined;
    	    },
            
            error: function(jqXHR, status, errorThrown){ 
              enable_save_button($clicked_button); 
              App_Workflows.workflow_list_view.collection.remove(workflow);
              // shows Exception message
              if(status.status != 406)
              {
            	  // Show different message for Copy
            	  if($clicked_button.attr('id') === 'duplicate-workflow-bottom' || $clicked_button.attr('id') === 'duplicate-workflow-top')
            	  {
            		  if(status.responseText === "Please change the given name. Same kind of name already exists.")
            		  {
            			  showAlertModal("duplicate_workflow");
            			  return;
            		  }
            	  }
            	  
            	  showAlertModal(response.responseText, undefined, undefined, undefined, "Error");
              }
              else
            	  {
            	  console.log(status);
            		// Show cause of error in saving
					$save_info = $('<div style="display:inline-block"><small><p style="color:#B94A48; font-size:14px"><i>'
							+ status.responseText
							+ '</i></p></small></div>');

					// Appends error info to form actions
					// block.
					$("#workflow-msg").html(
							$save_info).show();
            	  }
                }
    });
}

/**
 * Fills pad-content for logs when empty json obtains.
 * 
 * @param id -
 *          slate div id.
 * @param type - 
 *          to match with LOGS_PAD_CONTENT json key
 **/
function fill_logs_slate(id, type)
{
	if(type == undefined)
		type="ALL";
	
	var LOGS_PAD_CONTENT = {
		    "ALL": {
		        "title": "No logs for this campaign yet",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "EMAIL_SENT": {
		    	"title": "No emails sent yet",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
            "EMAIL_SENDING_SKIPPED": {
                "title": "No emails skipped yet",
                "image": updateImageS3Path("/img/clipboard.png")
            },
		    "EMAIL_OPENED": {
		    	"title": "No emails opened in this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "EMAIL_CLICKED": {
		    	"title": "No emails clicked in this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "UNSUBSCRIBED": {
		    	"title": "No one unsubscribed from this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "EMAIL_HARD_BOUNCED": {
		    	"title": "No hard bounces seen for  this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "EMAIL_SOFT_BOUNCED": {
		    	"title": "No soft bounces seen for this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    },
		    "EMAIL_SPAM": {
		    	"title": "No spam reports seen for this campaign",
				"image": updateImageS3Path("/img/clipboard.png")
		    }
		}

	getTemplate("empty-collection-model", LOGS_PAD_CONTENT[type], undefined, function(template_ui){
        if(!template_ui)
              return;
            
        $("#" + id).html($(template_ui));
    }, "#" + id);


}

function show_campaign_save(e,message,color)
{
	// Campaign save message
    var save_info;
    if(message)
        save_info = '<span style="color: green;">'+message+'</span>';
    else
    {
	   save_info = '<span style="color: green;">Campaign saved.</span>';
       //Show popup modal for adding campaign in trigger or contac
        showCampaignPopup(e);
       
    }

    if(color)
        save_info = $(save_info).css("color", color);

   	$("#workflow-msg").html(save_info).show().fadeOut(3000);
}

function is_start_active(designerJSON){
    
    var nodes  = JSON.parse(designerJSON).nodes;
    var is_active = true;
    try{
    $.each(nodes,function(node_name,node_value){
        if(node_value.displayname == "Start"){
        var start_states= node_value.States;
        $.each(start_states,function(start_name,start_node){
        if(start_node.start == "hangup"){
            is_active = false;
            return true
        }
        });
        }
        });
    }
    catch(err){
        return is_active;
    }
    return is_active;
}

function populate_workflows_list(id, el, callback)
{
     if(callback == undefined)
        callback = 'no-callback';

     var optionsTemplate = "<option value='{{id}}'>{{name}}</option>";
     fillSelect(id, '/core/api/workflows', 'workflow', callback , optionsTemplate, undefined, el);
}

function shareCampaign()
{
    $("#shareCampaign").remove();
    getTemplate('share-campaign-modal', {}, undefined, function(template_ui){
                if(!template_ui)
                    return;
                var share_campaign_modal = $(template_ui);
                share_campaign_modal.modal('show');
               /* share_campaign_modal.on('shown.bs.modal', function(){
                    window.history.back();
                });*/
    }, null);

        
}
function createJSON() {
        var shareCampaign_json = {};
        // Getting the emailId entered by the user to share with
        var value = $("#emailId").val();
        if(!isValidForm('#verify-email'))
            return;
        var json = serializeForm("verify-email");
        if(!json)
            return;
        shareCampaign_json.receiverEmail = value;
        shareCampaign_json.campaignId = App_Workflows.workflow_model.id;

        $.ajax({ url : "/core/api/workflows/share?type=Workflow&id="+App_Workflows.workflow_model.id+"&recEmail="+shareCampaign_json.receiverEmail,
         type : "GET",
         data: shareCampaign_json,
         dataType: "json",
         contentType : "application/json",
         success : function()
            {
                $("#shareCampaign").modal('hide');
                showNotyPopUp("information", "Campaign has been shared successfully.", "top");
                //Backbone.history.navigate("workflows", { trigger : true });
            },error : function(){
                $("#shareCampaign").modal('hide');
            }
        });
}
$('body').on('mouseenter','#workflows-model-list tr', function(e){
         $(this).find('#camp_history').removeClass('hide');
         $(this).find('#camp_reports').removeClass('hide');
    });

$('body').on('mouseleave','#workflows-model-list tr', function(e){
         $(this).find('#camp_history').addClass('hide');
         $(this).find('#camp_reports').addClass('hide');
    });

   /**
     *Script to show Popup window. when user click on save campaign 
     *
     **/
   
     function showCampaignPopup(e)
     {
         e.preventDefault();

        var targetEl=$(e.currentTarget);
        var click_button= $(targetEl).attr('id');
        var popup_status=readData("campaign-save-popup");

        if(popup_status !=='true' && (click_button==='save-workflow-top' || click_button==='save-workflow-bottom' || click_button==='duplicate-workflow-top' || click_button==='duplicate-workflow-bottom'))
        {
            while($("#workflow-save-popup").length)
                  $("#workflow-save-popup").remove();

            workflow_alerts("Next Action ", "null" , "workflow-save-popup-modal", function(el){
               
                window.setTimeout(function () {   $(el).find("#popup-msg").fadeOut(8000); }, 500); 
            });
        }
     }

    function popupCampaignContact ()
    {
            $("#workflow-save-popup").modal("hide");
           
          // window.location.hash="#contacts";
           Backbone.history.navigate("#contacts" , {
                trigger: true
            });
           
       }
         
     function popupCampaignTrigger ()
     {  
            $("#workflow-save-popup").modal("hide");
             
             Backbone.history.navigate("#trigger-add" , {
                trigger: true
            });
            
     }


     function hideCampaignPopup()
     {
        if($("#campaign-save-popup").prop("checked"))
            storeData("campaign-save-popup", true,10);
        else
            storeData("campaign-save-popup", false,10);
      }


function initializeWorkflowsListeners() {}

function change_access_level(level, el){
    if(level == "1"){
        $("#campaign_access_level span", el).text('Make Private');
        $("#campaign_access_level i", el).removeClass("icon-unlock");
        $("#campaign_access_level i", el).addClass("fa fa-lock");
    }
    else {
        $("#campaign_access_level span", el).text('Make Public');
        $("#campaign_access_level i", el).removeClass("fa fa-lock");
        $("#campaign_access_level i", el).addClass("icon-unlock");
    }
}

/**
 * wysihtml.js is used to embed beautiful html editors to email body. Inserts
 * merge fields into email body. wysihtml makes use of wysihtml5 which is a
 * javascript plugin that makes it easy to create simple, beautiful wysiwyg
 * editors with the help of wysihtml5 and Twitter Bootstrap.
 */
var Email_Template_Events = Base_Model_View.extend({
	
	events: {
		'click .merge-field': 'onMergeFieldSelect',
		'click .add-attachment-select': 'onAddAttachmentSelect',
		'click .add-attachment-confirm': 'onAddAttachmentConfirm',
		'click .add-attachment-cancel': 'onAddAttachmentCancel',				
		'click .add-tpl-attachment-confirm': 'onTemplateAddAttachmentConfirm',
		'click .add-tpl-attachment-cancel': 'onTemplateAddAttachmentCancel',
		'change #attachment-select': 'onChangedAttachment',					
	},

	// Code for Merge fields in Email Template
	onMergeFieldSelect: function(e){
		e.preventDefault();

		// Get Selected Value
		var fieldContent = $(e.currentTarget).attr("name");

		// Get Current HTML
		var val = $('#email-template-html').val();

		// Set New HTML
		var wysihtml5 = $('#email-template-html').data('wysihtml5');
		if (wysihtml5) {
			
			// wysihtml5.editor.setValue(fieldcontent + " " + val,
			// true);
		    editor.focus();
			wysihtml5.editor.composer.commands.exec("insertHTML", '{{'
					+ fieldContent + '}}');
		}
	},

	onAddAttachmentSelect : function(e){
		e.preventDefault();
		var target_ele = $(e.currentTarget);

		var el = $(target_ele).closest("div");
		$(target_ele).css("display", "none");
		el.find(".attachment-document-select").css("display", "inline");
		var optionsTemplate = "<option value='{{id}}' network_type='{{titleFromEnums network_type}}' size='{{size}}'>{{name}}</option>";
        fillSelect('attachment-select','core/api/documents', 'documents',  function fillNew()
		{
			el.find("#attachment-select option:first").after("<option value='new'>Upload new doc</option>");

		}, optionsTemplate, false, el);
        $('#enable_tracking').css("margin-top", "-7px");

	},
	
	/**
	 * For adding existing document to current contact
	 */
	onAddAttachmentConfirm : function(e){
		e.preventDefault();
		var target_ele = $(e.currentTarget);

		var network_type = $('#attachment-select').find(":selected").attr('network_type');
		var document_size = $('#attachment-select').find(":selected").attr('size');
		if(typeof network_type !=='undefined' && network_type.toUpperCase() === 'GOOGLE')
		{
			$(target_ele).closest("span").find(".attachment-status").html("<span style='color:#df382c;margin-top:10px; display:block'>Can not attach Google Drive doc to email. You can add a link instead in the email.</span>");
			$(target_ele).css({'border': '1px solid #df382c','outline': 'none'   });				             	            
		}
		else if(document_size >= 5242880){
			$(target_ele).closest("span").find(".attachment-status").html("<span style='color:#df382c;margin-top:10px; display:block'>Document size exceeds the 5MB limit.</span>");
			$(target_ele).css({'border': '1px solid #df382c','outline': 'none'   });
		}
		else
		{
			$('#attachment-select').closest("span").find('.attachment-status').find("span").fadeOut(0);
			$('#attachment-select').css({"border":"1px solid #bbb"});
		    var document_id = $(target_ele).closest(".attachment-document-select").find("#attachment-select").val();
		    var saveBtn = $(target_ele);
			
	  		// To check whether the document is selected or not
		    if(document_id == "")
		    {
		    	saveBtn.closest("span").find(".save-status").html("<span style='color:red;margin-left:10px;'>This field is required.</span>");
		    	saveBtn.closest("span").find('span.save-status').find("span").fadeOut(5000);
		    	return;
		    }	    	
		    else if(document_id == "new")
		    {	
		    	e.preventDefault();
				$(target_ele).closest('form').find('#error').html("");
				var form_id = $(target_ele).closest('form').attr("id");
				var id = $(target_ele).find("a").attr("id");
				
				var newwindow = window.open("upload-attachment.jsp?id="+ form_id +"&t=" + CURRENT_USER_PREFS.template +"&d=" + CURRENT_DOMAIN_USER.domain, 'name','height=310,width=500');
				
				if (window.focus)
				{
					newwindow.focus();
				}
		    }
		    else if(document_id != undefined && document_id != null)
		    {
		    	var docName = $( "#attachment-select option:selected").text();
		    	$('#emailForm').find('#eattachment').css('display','block');
		    	$('#emailForm').find('#attachment_id').find("#attachment_fname").text(docName);
		    	$('#emailForm').find(".attachment-document-select").css('display','none');
		    	$('#emailForm').find('#eattachment_key').attr('name',"document_key");
		    	$('#emailForm').find('#eattachment_key').attr('value',document_id);
		    	$("#emailForm").find("#agile_attachment_name").attr("value", docName);
                $("#emailForm").find("#agile_attachment_url").attr("value", $("#attachment-select option:selected").attr("url"))
		    }
	    }
		$('#enable_tracking').css("margin-top", "-47px");

	},

	/**
	 * To cancel the add attachment request in send-email form
	 */
	onAddAttachmentCancel : function(e){
		e.preventDefault();
		var target_ele = $(e.currentTarget);

		var blobKey = $('#emailForm').find('#attachment_id').attr('name');
		if(typeof blobKey !== typeof undefined)
	    {
			if(blobKey.toLowerCase() === 'blob_key')
			{
				var blobKeyValue = $('#emailForm').find('#eattachment_key').attr("value");
				deleteBlob(blobKeyValue);
			}
	    }
		$('#attachment-select').closest("span").find('.attachment-status').find("span").fadeOut(0);
		$('#attachment-select').css({"border":"1px solid #bbb"});	 
		$('#attachment-select').find('option:first').attr('selected', 'selected');
		var el = $(target_ele).closest("div");
		$('#emailForm').find('.attachment-document-select').css('display','none');
		$('#emailForm').find('#eattachment').css('display','none');
		$('#emailForm').find(".add-attachment-select").css("display", "inline");
		$('#emailForm').find('#eattachment_key').attr("name","name");
    	$('#emailForm').find('#eattachment_key').attr("value","value");
    	$("#emailForm").find("#agile_attachment_name").attr("value", "");
        $("#emailForm").find("#agile_attachment_url").attr("value", "")
    	$('#enable_tracking').css("margin-top", "-7px");

	},

	onTemplateAddAttachmentConfirm : function(e){
		e.preventDefault();
		var target_ele = $(e.currentTarget);

		if($(target_ele).parent().find('select').val()=="new"){

			$('#uploadDocumentModal').html(getTemplate("upload-document-modal", {})).modal('show');
			$('#GOOGLE',$('#uploadDocumentModal')).parent().hide();

		}else if($(target_ele).parent().find('select').val()!=""){
			$('#tpl-attachment-select').hide();
			$('#tpl-attachment-name').show();
			$('#attachment_id',$('#tpl-attachment-name')).val($(target_ele).parent().find('select').val());
			$('#tpl_attachment_fname',$('#tpl-attachment-name')).html('<a href='+$(target_ele).parent().find('option:selected').attr('url')+'>'+$(target_ele).parent().find('option:selected').text()+'</a>');
		}else if($(target_ele).parent().find('select').val()==""){
			$('#attachment-select-required').show();
		}

	},

	onTemplateAddAttachmentCancel : function(e){
		e.preventDefault();
		var target_ele = $(e.currentTarget);

		$('#tpl-attachment-select').show();
		$('#tpl-attachment-name').hide();
		$('.add-attachment-select').show();
		$('.attachment-document-select').hide();
		$('#attachment_id',$('#tpl-attachment-name')).val("");

	},

	onChangedAttachment : function(e){
		e.preventDefault();
		var target_ele = $(e.currentTarget);

		if($(target_ele).val()==""){
			$('#attachment-select-required').show();
		}else{
			$('#attachment-select-required').hide();
		}

	},

});

/**
 * Sets HTML Editor for UserPrefs, EmailTemplates etc.
 **/
function setupHTMLEditor(selector, data) {
	head.js(LIB_PATH + 'lib/wysihtml5-0.3.0-min.js', LIB_PATH + 'lib/bootstrap-wysihtml5-min.js',
			function() {
				console.log('setting up text');
				console.log(selector.html());
				
				if(!$(selector).data('wysihtml5'))
					selector.wysihtml5();
				
				if(data)
					selector.data("wysihtml5").editor.setValue(data, false);
				
			});
}
/*
 * Chained - jQuery non AJAX(J) chained selects plugin
 *
 * Copyright (c) 2010-2011 Mika Tuupola
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 */

(function($)
{
	var _AGILE_CUSTOM_DIVIDER_ = ' _AGILE_CUSTOM_DIVIDER_';
	var custom_chained_filter = "custom_chained_class";
	$.fn.chained = function(parent_selector, options)
	{

		return this.each(function()
		{

			/* Save this to self because this changes when scope changes. */
			var self = this;
			var backup = $(self).clone();
			var url = null;
			var template_key = null;
			var related_set = null;
			var parse_key = null;
			var parse_value = null;
			var select_value = null;

			/* Handles maximum two parents now. */
			$(parent_selector).each(function()
			{
				$(this).bind("change", function()
				{
					$(self).html(backup.html());

					/* If multiple parents build classname like foo\bar. */
					var selected = "";
					$(parent_selector).each(function()
					{
						var selected_element = $(":selected", this);
						url = selected_element.attr('url');
						template_key = selected_element.attr('template');
						select_value = selected_element.attr('data');
						parse_key = selected_element.attr('parse_key');
						parse_value = selected_element.attr('parse_value');
						related_set = selected_element.attr('related');
						selected += "\\" + $(":selected", this).val();
					});
					selected = selected.substr(1);
					if (url && related_set && related_set == $(self).attr("id"))
					{
						$(self).html(LOADING_HTML)
						$.getJSON(url, function(json)
						{
							build.call(self, json, parse_key, parse_value, template_key);
							if (select_value)
							{
								$("select", self).val(select_value);
							}

							/* Force updating the children. */
							$(self).trigger("change");
							if (options && typeof (options) === "function")
							{
								// execute the callback, passing parameters as
								// necessary
								options($(this), $(self));
							}
						});
						return;
					}

					/* Also check for first parent without subclassing. */
					/* TODO: This should be dynamic and check for each parent */
					/* without subclassing. */
					var first = $(parent_selector).first();
					var selected_first = $(":selected", first).val();

					$("input, textarea", self).each(function()
					{
						// Remove unneeded items but save the default value.
						if (!$(this).hasClass(selected) && !$(this).hasClass(selected_first))
						{
							$(this).remove();
						}
					});

					// Add date picker for required input fields
					$.each($(".date", self), function(index, data)
					{
						$(data).datepicker({ format: CURRENT_USER_PREFS.dateFormat, weekStart : CALENDAR_WEEK_START_DAY });
					});

					$("option", self).each(function()
					{
						var classAttr = $(this).attr('class');

						if (selected.indexOf(' ') > 0 || selected_first.indexOf(' ') > 0)
						{
							if (classAttr.indexOf(_AGILE_CUSTOM_DIVIDER_) >= 0)
							{
								var custome_class = $(this).attr(custom_chained_filter);
								var array = [];
								if (custome_class)
									array = custome_class.split(_AGILE_CUSTOM_DIVIDER_);
								else
									array = classAttr.split(_AGILE_CUSTOM_DIVIDER_);

								var count = 0;
								for (var i = 0; i < array.length; i++)
								{

									var c = array[i].trim();
									if (selected == c || selected_first == c)
									{
										count++;
									}
								}
								if (count == 0)
									$(this).remove();
								return;
							}
						}

						// Remove unneeded items but save the default value.
						if (!$(this).hasClass(selected) && !$(this).hasClass(selected_first))
						{
							$(this).remove();
						}

					});

					if (0 == $("option", self).size())
					{
						$("select", self).remove();
					}

					/* If we have only the default value disable select. */
					if (1 == $("option", self).size() && $(self).val() === "")
					{
						$(self).attr("disabled", "disabled");
					}
					else
					{
						$(self).removeAttr("disabled");
					}

					if (0 == $("option", self).size() && $("input, textarea", self).size() == 0)
					{
						$(self).parent().hide();
					}
					else
					{
						$(self).parent().css('display', '');
					}

					$(self).trigger("change");

					if (options && typeof (options) === "function")
					{
						// execute the callback, passing parameters as necessary
						options($(this), $(self));
					}

				});

				/* Force IE to see something selected on first page load, */
				/* unless something is already selected */
				if (!$("option:selected", this).length)
				{
					$("option", this).first().attr("selected", "selected");
				}

				/* Force updating the children. */
				$(this).trigger("change");

			});

			/* Build the select from given data. */
			function build(json, parse_key, parse_value, template_key)
			{
				/*
				 * If select already had somet hing selected, preserve it.
				 */
				var selected_key = $(":selected", self).val();

				/* Clear the select. */
				$(self).empty();

				var element = $('<select  name="temp' + Math.random() + '"   class="form-control required"></select>');

				var option_list = [];
				if ($.isArray(json))
				{
					/*
					 * JSON is already an array (which preserves the ordering of
					 * options)
					 */
					/*
					 * [["","--"],["series-1","1 series"],["series-3","3
					 * series"]]
					 */
					option_list = json;
				}
				else
				{
					/* JSON is an JavaScript object. Rebuild it as an array. */
					/* {"":"--","series-1":"1 series","series-3":"3 series"} */
					for ( var index in json)
					{
						if (json.hasOwnProperty(index))
						{
							option_list.push([
									index, json[index]
							]);
						}
					}
				}

				var option = $("<option />").val("").append("select");
				$(element).append(option);
				/* Add new options from json. */
				for (var i = 0; i !== option_list.length; i++)
				{
					 if(template_key != null)
                   	 {
                         var optionsHTML = getTemplate(template_key, option_list[i], "no");
                         $(element).append(optionsHTML);
                         continue;
                     }

					var key = option_list[i][parse_key];
					var value = option_list[i][parse_value];

					/* Set the selected option from JSON. */
					if ("selected" === key)
					{
						selected_key = value;
						continue;
					}
					var option = $("<option />").val(key).append(value);
					$(element).append(option);
				}

				$(self).html(element).parent().css('display', '');

				/* Loop option again to set selected. IE needed this... */
				$(self).children().each(function()
				{
					if ($(this).val() === selected_key)
					{
						$(this).attr("selected", "selected");
					}
				});

				/* If we have only the default value disable select. */
				if (1 === $("option", self).size() && $(self).val() === "")
				{
					$(self).attr("disabled", "disabled");
				}
				else
				{
					$(self).removeAttr("disabled");
				}
			}

		});
	};

	/* Alias for those who like to use more English like syntax. */
	$.fn.chainedTo = $.fn.chained;

})(jQuery);
